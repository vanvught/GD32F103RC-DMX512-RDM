
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	080012a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, ip}
 8000008:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800000c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000010:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000014:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000018:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
	...
 800002c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000030:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800003c:	080080c1 	stmdaeq	r0, {r0, r6, r7, pc}
 8000040:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000044:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000048:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800004c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000050:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000054:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000058:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800005c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000060:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000064:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000068:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800006c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000070:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000074:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000078:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800007c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000080:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000084:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000088:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800008c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000090:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000094:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000098:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800009c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000a0:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000a4:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000a8:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000ac:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000b0:	080037a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, ip, sp}
 80000b4:	08003849 	stmdaeq	r0, {r0, r3, r6, fp, ip, sp}
 80000b8:	0800388d 	stmdaeq	r0, {r0, r2, r3, r7, fp, ip, sp}
 80000bc:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000c0:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000c4:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000c8:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000cc:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000d0:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000d4:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000d8:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000dc:	080035b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, ip, sp}
 80000e0:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000e4:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000e8:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000ec:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000f0:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000f4:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 80000f8:	00000000 	andeq	r0, r0, r0
 80000fc:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000100:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000104:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000108:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800010c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000110:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000114:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000118:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800011c:	080038ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp, ip, sp}
 8000120:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000124:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 8000128:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}
 800012c:	080012f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, ip}

Disassembly of section .text:

08000130 <__aeabi_d2f>:
 8000130:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000134:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000138:	bf24      	itt	cs
 800013a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800013e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000142:	d90d      	bls.n	8000160 <__aeabi_d2f+0x30>
 8000144:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000148:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800014c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000150:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000154:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000158:	bf08      	it	eq
 800015a:	f020 0001 	biceq.w	r0, r0, #1
 800015e:	4770      	bx	lr
 8000160:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000164:	d121      	bne.n	80001aa <__aeabi_d2f+0x7a>
 8000166:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800016a:	bfbc      	itt	lt
 800016c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000170:	4770      	bxlt	lr
 8000172:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000176:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800017a:	f1c2 0218 	rsb	r2, r2, #24
 800017e:	f1c2 0c20 	rsb	ip, r2, #32
 8000182:	fa10 f30c 	lsls.w	r3, r0, ip
 8000186:	fa20 f002 	lsr.w	r0, r0, r2
 800018a:	bf18      	it	ne
 800018c:	f040 0001 	orrne.w	r0, r0, #1
 8000190:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000194:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000198:	fa03 fc0c 	lsl.w	ip, r3, ip
 800019c:	ea40 000c 	orr.w	r0, r0, ip
 80001a0:	fa23 f302 	lsr.w	r3, r3, r2
 80001a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001a8:	e7cc      	b.n	8000144 <__aeabi_d2f+0x14>
 80001aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80001ae:	d107      	bne.n	80001c0 <__aeabi_d2f+0x90>
 80001b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80001b4:	bf1e      	ittt	ne
 80001b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80001ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80001be:	4770      	bxne	lr
 80001c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80001c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80001c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop

080001d0 <__aeabi_frsub>:
 80001d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__addsf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_fsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001dc <__addsf3>:
 80001dc:	0042      	lsls	r2, r0, #1
 80001de:	bf1f      	itttt	ne
 80001e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e4:	ea92 0f03 	teqne	r2, r3
 80001e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f0:	d06a      	beq.n	80002c8 <__addsf3+0xec>
 80001f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fa:	bfc1      	itttt	gt
 80001fc:	18d2      	addgt	r2, r2, r3
 80001fe:	4041      	eorgt	r1, r0
 8000200:	4048      	eorgt	r0, r1
 8000202:	4041      	eorgt	r1, r0
 8000204:	bfb8      	it	lt
 8000206:	425b      	neglt	r3, r3
 8000208:	2b19      	cmp	r3, #25
 800020a:	bf88      	it	hi
 800020c:	4770      	bxhi	lr
 800020e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000216:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021a:	bf18      	it	ne
 800021c:	4240      	negne	r0, r0
 800021e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000222:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000226:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4249      	negne	r1, r1
 800022e:	ea92 0f03 	teq	r2, r3
 8000232:	d03f      	beq.n	80002b4 <__addsf3+0xd8>
 8000234:	f1a2 0201 	sub.w	r2, r2, #1
 8000238:	fa41 fc03 	asr.w	ip, r1, r3
 800023c:	eb10 000c 	adds.w	r0, r0, ip
 8000240:	f1c3 0320 	rsb	r3, r3, #32
 8000244:	fa01 f103 	lsl.w	r1, r1, r3
 8000248:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800024c:	d502      	bpl.n	8000254 <__addsf3+0x78>
 800024e:	4249      	negs	r1, r1
 8000250:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000254:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000258:	d313      	bcc.n	8000282 <__addsf3+0xa6>
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d306      	bcc.n	800026e <__addsf3+0x92>
 8000260:	0840      	lsrs	r0, r0, #1
 8000262:	ea4f 0131 	mov.w	r1, r1, rrx
 8000266:	f102 0201 	add.w	r2, r2, #1
 800026a:	2afe      	cmp	r2, #254	; 0xfe
 800026c:	d251      	bcs.n	8000312 <__addsf3+0x136>
 800026e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000272:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000276:	bf08      	it	eq
 8000278:	f020 0001 	biceq.w	r0, r0, #1
 800027c:	ea40 0003 	orr.w	r0, r0, r3
 8000280:	4770      	bx	lr
 8000282:	0049      	lsls	r1, r1, #1
 8000284:	eb40 0000 	adc.w	r0, r0, r0
 8000288:	3a01      	subs	r2, #1
 800028a:	bf28      	it	cs
 800028c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000290:	d2ed      	bcs.n	800026e <__addsf3+0x92>
 8000292:	fab0 fc80 	clz	ip, r0
 8000296:	f1ac 0c08 	sub.w	ip, ip, #8
 800029a:	ebb2 020c 	subs.w	r2, r2, ip
 800029e:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a2:	bfaa      	itet	ge
 80002a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a8:	4252      	neglt	r2, r2
 80002aa:	4318      	orrge	r0, r3
 80002ac:	bfbc      	itt	lt
 80002ae:	40d0      	lsrlt	r0, r2
 80002b0:	4318      	orrlt	r0, r3
 80002b2:	4770      	bx	lr
 80002b4:	f092 0f00 	teq	r2, #0
 80002b8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002bc:	bf06      	itte	eq
 80002be:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c2:	3201      	addeq	r2, #1
 80002c4:	3b01      	subne	r3, #1
 80002c6:	e7b5      	b.n	8000234 <__addsf3+0x58>
 80002c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d0:	bf18      	it	ne
 80002d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d6:	d021      	beq.n	800031c <__addsf3+0x140>
 80002d8:	ea92 0f03 	teq	r2, r3
 80002dc:	d004      	beq.n	80002e8 <__addsf3+0x10c>
 80002de:	f092 0f00 	teq	r2, #0
 80002e2:	bf08      	it	eq
 80002e4:	4608      	moveq	r0, r1
 80002e6:	4770      	bx	lr
 80002e8:	ea90 0f01 	teq	r0, r1
 80002ec:	bf1c      	itt	ne
 80002ee:	2000      	movne	r0, #0
 80002f0:	4770      	bxne	lr
 80002f2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002f6:	d104      	bne.n	8000302 <__addsf3+0x126>
 80002f8:	0040      	lsls	r0, r0, #1
 80002fa:	bf28      	it	cs
 80002fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000300:	4770      	bx	lr
 8000302:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000306:	bf3c      	itt	cc
 8000308:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800030c:	4770      	bxcc	lr
 800030e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000312:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000316:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031a:	4770      	bx	lr
 800031c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000320:	bf16      	itet	ne
 8000322:	4608      	movne	r0, r1
 8000324:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000328:	4601      	movne	r1, r0
 800032a:	0242      	lsls	r2, r0, #9
 800032c:	bf06      	itte	eq
 800032e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000332:	ea90 0f01 	teqeq	r0, r1
 8000336:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033a:	4770      	bx	lr

0800033c <__aeabi_ui2f>:
 800033c:	f04f 0300 	mov.w	r3, #0
 8000340:	e004      	b.n	800034c <__aeabi_i2f+0x8>
 8000342:	bf00      	nop

08000344 <__aeabi_i2f>:
 8000344:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000348:	bf48      	it	mi
 800034a:	4240      	negmi	r0, r0
 800034c:	ea5f 0c00 	movs.w	ip, r0
 8000350:	bf08      	it	eq
 8000352:	4770      	bxeq	lr
 8000354:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000358:	4601      	mov	r1, r0
 800035a:	f04f 0000 	mov.w	r0, #0
 800035e:	e01c      	b.n	800039a <__aeabi_l2f+0x2a>

08000360 <__aeabi_ul2f>:
 8000360:	ea50 0201 	orrs.w	r2, r0, r1
 8000364:	bf08      	it	eq
 8000366:	4770      	bxeq	lr
 8000368:	f04f 0300 	mov.w	r3, #0
 800036c:	e00a      	b.n	8000384 <__aeabi_l2f+0x14>
 800036e:	bf00      	nop

08000370 <__aeabi_l2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800037c:	d502      	bpl.n	8000384 <__aeabi_l2f+0x14>
 800037e:	4240      	negs	r0, r0
 8000380:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000384:	ea5f 0c01 	movs.w	ip, r1
 8000388:	bf02      	ittt	eq
 800038a:	4684      	moveq	ip, r0
 800038c:	4601      	moveq	r1, r0
 800038e:	2000      	moveq	r0, #0
 8000390:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000394:	bf08      	it	eq
 8000396:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800039e:	fabc f28c 	clz	r2, ip
 80003a2:	3a08      	subs	r2, #8
 80003a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a8:	db10      	blt.n	80003cc <__aeabi_l2f+0x5c>
 80003aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ae:	4463      	add	r3, ip
 80003b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b4:	f1c2 0220 	rsb	r2, r2, #32
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	fa20 f202 	lsr.w	r2, r0, r2
 80003c0:	eb43 0002 	adc.w	r0, r3, r2
 80003c4:	bf08      	it	eq
 80003c6:	f020 0001 	biceq.w	r0, r0, #1
 80003ca:	4770      	bx	lr
 80003cc:	f102 0220 	add.w	r2, r2, #32
 80003d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d4:	f1c2 0220 	rsb	r2, r2, #32
 80003d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003dc:	fa21 f202 	lsr.w	r2, r1, r2
 80003e0:	eb43 0002 	adc.w	r0, r3, r2
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ea:	4770      	bx	lr

080003ec <__gesf2>:
 80003ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80003f0:	e006      	b.n	8000400 <__cmpsf2+0x4>
 80003f2:	bf00      	nop

080003f4 <__lesf2>:
 80003f4:	f04f 0c01 	mov.w	ip, #1
 80003f8:	e002      	b.n	8000400 <__cmpsf2+0x4>
 80003fa:	bf00      	nop

080003fc <__cmpsf2>:
 80003fc:	f04f 0c01 	mov.w	ip, #1
 8000400:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000404:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000408:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800040c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000410:	bf18      	it	ne
 8000412:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000416:	d011      	beq.n	800043c <__cmpsf2+0x40>
 8000418:	b001      	add	sp, #4
 800041a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800041e:	bf18      	it	ne
 8000420:	ea90 0f01 	teqne	r0, r1
 8000424:	bf58      	it	pl
 8000426:	ebb2 0003 	subspl.w	r0, r2, r3
 800042a:	bf88      	it	hi
 800042c:	17c8      	asrhi	r0, r1, #31
 800042e:	bf38      	it	cc
 8000430:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000434:	bf18      	it	ne
 8000436:	f040 0001 	orrne.w	r0, r0, #1
 800043a:	4770      	bx	lr
 800043c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000440:	d102      	bne.n	8000448 <__cmpsf2+0x4c>
 8000442:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000446:	d105      	bne.n	8000454 <__cmpsf2+0x58>
 8000448:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800044c:	d1e4      	bne.n	8000418 <__cmpsf2+0x1c>
 800044e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000452:	d0e1      	beq.n	8000418 <__cmpsf2+0x1c>
 8000454:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop

0800045c <__aeabi_cfrcmple>:
 800045c:	4684      	mov	ip, r0
 800045e:	4608      	mov	r0, r1
 8000460:	4661      	mov	r1, ip
 8000462:	e7ff      	b.n	8000464 <__aeabi_cfcmpeq>

08000464 <__aeabi_cfcmpeq>:
 8000464:	b50f      	push	{r0, r1, r2, r3, lr}
 8000466:	f7ff ffc9 	bl	80003fc <__cmpsf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	bf48      	it	mi
 800046e:	f110 0f00 	cmnmi.w	r0, #0
 8000472:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000474 <__aeabi_fcmpeq>:
 8000474:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000478:	f7ff fff4 	bl	8000464 <__aeabi_cfcmpeq>
 800047c:	bf0c      	ite	eq
 800047e:	2001      	moveq	r0, #1
 8000480:	2000      	movne	r0, #0
 8000482:	f85d fb08 	ldr.w	pc, [sp], #8
 8000486:	bf00      	nop

08000488 <__aeabi_fcmplt>:
 8000488:	f84d ed08 	str.w	lr, [sp, #-8]!
 800048c:	f7ff ffea 	bl	8000464 <__aeabi_cfcmpeq>
 8000490:	bf34      	ite	cc
 8000492:	2001      	movcc	r0, #1
 8000494:	2000      	movcs	r0, #0
 8000496:	f85d fb08 	ldr.w	pc, [sp], #8
 800049a:	bf00      	nop

0800049c <__aeabi_fcmple>:
 800049c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004a0:	f7ff ffe0 	bl	8000464 <__aeabi_cfcmpeq>
 80004a4:	bf94      	ite	ls
 80004a6:	2001      	movls	r0, #1
 80004a8:	2000      	movhi	r0, #0
 80004aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ae:	bf00      	nop

080004b0 <__aeabi_fcmpge>:
 80004b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004b4:	f7ff ffd2 	bl	800045c <__aeabi_cfrcmple>
 80004b8:	bf94      	ite	ls
 80004ba:	2001      	movls	r0, #1
 80004bc:	2000      	movhi	r0, #0
 80004be:	f85d fb08 	ldr.w	pc, [sp], #8
 80004c2:	bf00      	nop

080004c4 <__aeabi_fcmpgt>:
 80004c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004c8:	f7ff ffc8 	bl	800045c <__aeabi_cfrcmple>
 80004cc:	bf34      	ite	cc
 80004ce:	2001      	movcc	r0, #1
 80004d0:	2000      	movcs	r0, #0
 80004d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2iz>:
 80004d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004e0:	d30f      	bcc.n	8000502 <__aeabi_f2iz+0x2a>
 80004e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004ea:	d90d      	bls.n	8000508 <__aeabi_f2iz+0x30>
 80004ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80004f8:	fa23 f002 	lsr.w	r0, r3, r2
 80004fc:	bf18      	it	ne
 80004fe:	4240      	negne	r0, r0
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr
 8000508:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800050c:	d101      	bne.n	8000512 <__aeabi_f2iz+0x3a>
 800050e:	0242      	lsls	r2, r0, #9
 8000510:	d105      	bne.n	800051e <__aeabi_f2iz+0x46>
 8000512:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000516:	bf08      	it	eq
 8000518:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800051c:	4770      	bx	lr
 800051e:	f04f 0000 	mov.w	r0, #0
 8000522:	4770      	bx	lr

08000524 <__aeabi_uldivmod>:
 8000524:	b953      	cbnz	r3, 800053c <__aeabi_uldivmod+0x18>
 8000526:	b94a      	cbnz	r2, 800053c <__aeabi_uldivmod+0x18>
 8000528:	2900      	cmp	r1, #0
 800052a:	bf08      	it	eq
 800052c:	2800      	cmpeq	r0, #0
 800052e:	bf1c      	itt	ne
 8000530:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000534:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000538:	f000 b976 	b.w	8000828 <__aeabi_idiv0>
 800053c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000540:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000544:	f000 f806 	bl	8000554 <__udivmoddi4>
 8000548:	f8dd e004 	ldr.w	lr, [sp, #4]
 800054c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000550:	b004      	add	sp, #16
 8000552:	4770      	bx	lr

08000554 <__udivmoddi4>:
 8000554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000558:	9e08      	ldr	r6, [sp, #32]
 800055a:	460d      	mov	r5, r1
 800055c:	4604      	mov	r4, r0
 800055e:	4688      	mov	r8, r1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d14d      	bne.n	8000600 <__udivmoddi4+0xac>
 8000564:	428a      	cmp	r2, r1
 8000566:	4694      	mov	ip, r2
 8000568:	d968      	bls.n	800063c <__udivmoddi4+0xe8>
 800056a:	fab2 f282 	clz	r2, r2
 800056e:	b152      	cbz	r2, 8000586 <__udivmoddi4+0x32>
 8000570:	fa01 f302 	lsl.w	r3, r1, r2
 8000574:	f1c2 0120 	rsb	r1, r2, #32
 8000578:	fa20 f101 	lsr.w	r1, r0, r1
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	ea41 0803 	orr.w	r8, r1, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800058a:	fbb8 f7f1 	udiv	r7, r8, r1
 800058e:	fa1f fe8c 	uxth.w	lr, ip
 8000592:	fb01 8817 	mls	r8, r1, r7, r8
 8000596:	fb07 f00e 	mul.w	r0, r7, lr
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005a0:	4298      	cmp	r0, r3
 80005a2:	d90a      	bls.n	80005ba <__udivmoddi4+0x66>
 80005a4:	eb1c 0303 	adds.w	r3, ip, r3
 80005a8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80005ac:	f080 811e 	bcs.w	80007ec <__udivmoddi4+0x298>
 80005b0:	4298      	cmp	r0, r3
 80005b2:	f240 811b 	bls.w	80007ec <__udivmoddi4+0x298>
 80005b6:	3f02      	subs	r7, #2
 80005b8:	4463      	add	r3, ip
 80005ba:	1a1b      	subs	r3, r3, r0
 80005bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80005c0:	fb01 3310 	mls	r3, r1, r0, r3
 80005c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80005c8:	b2a4      	uxth	r4, r4
 80005ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ce:	45a6      	cmp	lr, r4
 80005d0:	d90a      	bls.n	80005e8 <__udivmoddi4+0x94>
 80005d2:	eb1c 0404 	adds.w	r4, ip, r4
 80005d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80005da:	f080 8109 	bcs.w	80007f0 <__udivmoddi4+0x29c>
 80005de:	45a6      	cmp	lr, r4
 80005e0:	f240 8106 	bls.w	80007f0 <__udivmoddi4+0x29c>
 80005e4:	4464      	add	r4, ip
 80005e6:	3802      	subs	r0, #2
 80005e8:	2100      	movs	r1, #0
 80005ea:	eba4 040e 	sub.w	r4, r4, lr
 80005ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005f2:	b11e      	cbz	r6, 80005fc <__udivmoddi4+0xa8>
 80005f4:	2300      	movs	r3, #0
 80005f6:	40d4      	lsrs	r4, r2
 80005f8:	e9c6 4300 	strd	r4, r3, [r6]
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	428b      	cmp	r3, r1
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0xc2>
 8000604:	2e00      	cmp	r6, #0
 8000606:	f000 80ee 	beq.w	80007e6 <__udivmoddi4+0x292>
 800060a:	2100      	movs	r1, #0
 800060c:	e9c6 0500 	strd	r0, r5, [r6]
 8000610:	4608      	mov	r0, r1
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	fab3 f183 	clz	r1, r3
 800061a:	2900      	cmp	r1, #0
 800061c:	d14a      	bne.n	80006b4 <__udivmoddi4+0x160>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d302      	bcc.n	8000628 <__udivmoddi4+0xd4>
 8000622:	4282      	cmp	r2, r0
 8000624:	f200 80fc 	bhi.w	8000820 <__udivmoddi4+0x2cc>
 8000628:	1a84      	subs	r4, r0, r2
 800062a:	eb65 0303 	sbc.w	r3, r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	4698      	mov	r8, r3
 8000632:	2e00      	cmp	r6, #0
 8000634:	d0e2      	beq.n	80005fc <__udivmoddi4+0xa8>
 8000636:	e9c6 4800 	strd	r4, r8, [r6]
 800063a:	e7df      	b.n	80005fc <__udivmoddi4+0xa8>
 800063c:	b902      	cbnz	r2, 8000640 <__udivmoddi4+0xec>
 800063e:	deff      	udf	#255	; 0xff
 8000640:	fab2 f282 	clz	r2, r2
 8000644:	2a00      	cmp	r2, #0
 8000646:	f040 8091 	bne.w	800076c <__udivmoddi4+0x218>
 800064a:	eba1 000c 	sub.w	r0, r1, ip
 800064e:	2101      	movs	r1, #1
 8000650:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000654:	fa1f fe8c 	uxth.w	lr, ip
 8000658:	fbb0 f3f7 	udiv	r3, r0, r7
 800065c:	fb07 0013 	mls	r0, r7, r3, r0
 8000660:	0c25      	lsrs	r5, r4, #16
 8000662:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000666:	fb0e f003 	mul.w	r0, lr, r3
 800066a:	42a8      	cmp	r0, r5
 800066c:	d908      	bls.n	8000680 <__udivmoddi4+0x12c>
 800066e:	eb1c 0505 	adds.w	r5, ip, r5
 8000672:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000676:	d202      	bcs.n	800067e <__udivmoddi4+0x12a>
 8000678:	42a8      	cmp	r0, r5
 800067a:	f200 80ce 	bhi.w	800081a <__udivmoddi4+0x2c6>
 800067e:	4643      	mov	r3, r8
 8000680:	1a2d      	subs	r5, r5, r0
 8000682:	fbb5 f0f7 	udiv	r0, r5, r7
 8000686:	fb07 5510 	mls	r5, r7, r0, r5
 800068a:	fb0e fe00 	mul.w	lr, lr, r0
 800068e:	b2a4      	uxth	r4, r4
 8000690:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000694:	45a6      	cmp	lr, r4
 8000696:	d908      	bls.n	80006aa <__udivmoddi4+0x156>
 8000698:	eb1c 0404 	adds.w	r4, ip, r4
 800069c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80006a0:	d202      	bcs.n	80006a8 <__udivmoddi4+0x154>
 80006a2:	45a6      	cmp	lr, r4
 80006a4:	f200 80b6 	bhi.w	8000814 <__udivmoddi4+0x2c0>
 80006a8:	4628      	mov	r0, r5
 80006aa:	eba4 040e 	sub.w	r4, r4, lr
 80006ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006b2:	e79e      	b.n	80005f2 <__udivmoddi4+0x9e>
 80006b4:	f1c1 0720 	rsb	r7, r1, #32
 80006b8:	408b      	lsls	r3, r1
 80006ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80006be:	ea4c 0c03 	orr.w	ip, ip, r3
 80006c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80006c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006ca:	fbba f8f9 	udiv	r8, sl, r9
 80006ce:	fa20 f307 	lsr.w	r3, r0, r7
 80006d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80006d6:	408d      	lsls	r5, r1
 80006d8:	fa1f fe8c 	uxth.w	lr, ip
 80006dc:	431d      	orrs	r5, r3
 80006de:	fa00 f301 	lsl.w	r3, r0, r1
 80006e2:	fb08 f00e 	mul.w	r0, r8, lr
 80006e6:	0c2c      	lsrs	r4, r5, #16
 80006e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80006ec:	42a0      	cmp	r0, r4
 80006ee:	fa02 f201 	lsl.w	r2, r2, r1
 80006f2:	d90b      	bls.n	800070c <__udivmoddi4+0x1b8>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80006fc:	f080 8088 	bcs.w	8000810 <__udivmoddi4+0x2bc>
 8000700:	42a0      	cmp	r0, r4
 8000702:	f240 8085 	bls.w	8000810 <__udivmoddi4+0x2bc>
 8000706:	f1a8 0802 	sub.w	r8, r8, #2
 800070a:	4464      	add	r4, ip
 800070c:	1a24      	subs	r4, r4, r0
 800070e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000712:	fb09 4410 	mls	r4, r9, r0, r4
 8000716:	fb00 fe0e 	mul.w	lr, r0, lr
 800071a:	b2ad      	uxth	r5, r5
 800071c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000720:	45a6      	cmp	lr, r4
 8000722:	d908      	bls.n	8000736 <__udivmoddi4+0x1e2>
 8000724:	eb1c 0404 	adds.w	r4, ip, r4
 8000728:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800072c:	d26c      	bcs.n	8000808 <__udivmoddi4+0x2b4>
 800072e:	45a6      	cmp	lr, r4
 8000730:	d96a      	bls.n	8000808 <__udivmoddi4+0x2b4>
 8000732:	3802      	subs	r0, #2
 8000734:	4464      	add	r4, ip
 8000736:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800073a:	fba0 9502 	umull	r9, r5, r0, r2
 800073e:	eba4 040e 	sub.w	r4, r4, lr
 8000742:	42ac      	cmp	r4, r5
 8000744:	46c8      	mov	r8, r9
 8000746:	46ae      	mov	lr, r5
 8000748:	d356      	bcc.n	80007f8 <__udivmoddi4+0x2a4>
 800074a:	d053      	beq.n	80007f4 <__udivmoddi4+0x2a0>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d069      	beq.n	8000824 <__udivmoddi4+0x2d0>
 8000750:	ebb3 0208 	subs.w	r2, r3, r8
 8000754:	eb64 040e 	sbc.w	r4, r4, lr
 8000758:	fa22 f301 	lsr.w	r3, r2, r1
 800075c:	fa04 f707 	lsl.w	r7, r4, r7
 8000760:	431f      	orrs	r7, r3
 8000762:	40cc      	lsrs	r4, r1
 8000764:	e9c6 7400 	strd	r7, r4, [r6]
 8000768:	2100      	movs	r1, #0
 800076a:	e747      	b.n	80005fc <__udivmoddi4+0xa8>
 800076c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000770:	f1c2 0120 	rsb	r1, r2, #32
 8000774:	fa25 f301 	lsr.w	r3, r5, r1
 8000778:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800077c:	fa20 f101 	lsr.w	r1, r0, r1
 8000780:	4095      	lsls	r5, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	fbb3 f1f7 	udiv	r1, r3, r7
 8000788:	fb07 3311 	mls	r3, r7, r1, r3
 800078c:	fa1f fe8c 	uxth.w	lr, ip
 8000790:	0c28      	lsrs	r0, r5, #16
 8000792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000796:	fb01 f30e 	mul.w	r3, r1, lr
 800079a:	4283      	cmp	r3, r0
 800079c:	fa04 f402 	lsl.w	r4, r4, r2
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x260>
 80007a2:	eb1c 0000 	adds.w	r0, ip, r0
 80007a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80007aa:	d22f      	bcs.n	800080c <__udivmoddi4+0x2b8>
 80007ac:	4283      	cmp	r3, r0
 80007ae:	d92d      	bls.n	800080c <__udivmoddi4+0x2b8>
 80007b0:	3902      	subs	r1, #2
 80007b2:	4460      	add	r0, ip
 80007b4:	1ac0      	subs	r0, r0, r3
 80007b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80007ba:	fb07 0013 	mls	r0, r7, r3, r0
 80007be:	b2ad      	uxth	r5, r5
 80007c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80007c4:	fb03 f00e 	mul.w	r0, r3, lr
 80007c8:	42a8      	cmp	r0, r5
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x28a>
 80007cc:	eb1c 0505 	adds.w	r5, ip, r5
 80007d0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80007d4:	d216      	bcs.n	8000804 <__udivmoddi4+0x2b0>
 80007d6:	42a8      	cmp	r0, r5
 80007d8:	d914      	bls.n	8000804 <__udivmoddi4+0x2b0>
 80007da:	3b02      	subs	r3, #2
 80007dc:	4465      	add	r5, ip
 80007de:	1a28      	subs	r0, r5, r0
 80007e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007e4:	e738      	b.n	8000658 <__udivmoddi4+0x104>
 80007e6:	4631      	mov	r1, r6
 80007e8:	4630      	mov	r0, r6
 80007ea:	e707      	b.n	80005fc <__udivmoddi4+0xa8>
 80007ec:	462f      	mov	r7, r5
 80007ee:	e6e4      	b.n	80005ba <__udivmoddi4+0x66>
 80007f0:	4618      	mov	r0, r3
 80007f2:	e6f9      	b.n	80005e8 <__udivmoddi4+0x94>
 80007f4:	454b      	cmp	r3, r9
 80007f6:	d2a9      	bcs.n	800074c <__udivmoddi4+0x1f8>
 80007f8:	ebb9 0802 	subs.w	r8, r9, r2
 80007fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000800:	3801      	subs	r0, #1
 8000802:	e7a3      	b.n	800074c <__udivmoddi4+0x1f8>
 8000804:	4643      	mov	r3, r8
 8000806:	e7ea      	b.n	80007de <__udivmoddi4+0x28a>
 8000808:	4628      	mov	r0, r5
 800080a:	e794      	b.n	8000736 <__udivmoddi4+0x1e2>
 800080c:	4641      	mov	r1, r8
 800080e:	e7d1      	b.n	80007b4 <__udivmoddi4+0x260>
 8000810:	46d0      	mov	r8, sl
 8000812:	e77b      	b.n	800070c <__udivmoddi4+0x1b8>
 8000814:	4464      	add	r4, ip
 8000816:	3802      	subs	r0, #2
 8000818:	e747      	b.n	80006aa <__udivmoddi4+0x156>
 800081a:	3b02      	subs	r3, #2
 800081c:	4465      	add	r5, ip
 800081e:	e72f      	b.n	8000680 <__udivmoddi4+0x12c>
 8000820:	4608      	mov	r0, r1
 8000822:	e706      	b.n	8000632 <__udivmoddi4+0xde>
 8000824:	4631      	mov	r1, r6
 8000826:	e6e9      	b.n	80005fc <__udivmoddi4+0xa8>

08000828 <__aeabi_idiv0>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <__aeabi_drsub>:
 800082c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000830:	e002      	b.n	8000838 <__adddf3>
 8000832:	bf00      	nop

08000834 <__aeabi_dsub>:
 8000834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000838 <__adddf3>:
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800083e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000842:	ea94 0f05 	teq	r4, r5
 8000846:	bf08      	it	eq
 8000848:	ea90 0f02 	teqeq	r0, r2
 800084c:	bf1f      	itttt	ne
 800084e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000852:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000856:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800085a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800085e:	f000 80e2 	beq.w	8000a26 <__adddf3+0x1ee>
 8000862:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000866:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800086a:	bfb8      	it	lt
 800086c:	426d      	neglt	r5, r5
 800086e:	dd0c      	ble.n	800088a <__adddf3+0x52>
 8000870:	442c      	add	r4, r5
 8000872:	ea80 0202 	eor.w	r2, r0, r2
 8000876:	ea81 0303 	eor.w	r3, r1, r3
 800087a:	ea82 0000 	eor.w	r0, r2, r0
 800087e:	ea83 0101 	eor.w	r1, r3, r1
 8000882:	ea80 0202 	eor.w	r2, r0, r2
 8000886:	ea81 0303 	eor.w	r3, r1, r3
 800088a:	2d36      	cmp	r5, #54	; 0x36
 800088c:	bf88      	it	hi
 800088e:	bd30      	pophi	{r4, r5, pc}
 8000890:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800089c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80008a0:	d002      	beq.n	80008a8 <__adddf3+0x70>
 80008a2:	4240      	negs	r0, r0
 80008a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80008ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008b4:	d002      	beq.n	80008bc <__adddf3+0x84>
 80008b6:	4252      	negs	r2, r2
 80008b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008bc:	ea94 0f05 	teq	r4, r5
 80008c0:	f000 80a7 	beq.w	8000a12 <__adddf3+0x1da>
 80008c4:	f1a4 0401 	sub.w	r4, r4, #1
 80008c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80008cc:	db0d      	blt.n	80008ea <__adddf3+0xb2>
 80008ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008d2:	fa22 f205 	lsr.w	r2, r2, r5
 80008d6:	1880      	adds	r0, r0, r2
 80008d8:	f141 0100 	adc.w	r1, r1, #0
 80008dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80008e0:	1880      	adds	r0, r0, r2
 80008e2:	fa43 f305 	asr.w	r3, r3, r5
 80008e6:	4159      	adcs	r1, r3
 80008e8:	e00e      	b.n	8000908 <__adddf3+0xd0>
 80008ea:	f1a5 0520 	sub.w	r5, r5, #32
 80008ee:	f10e 0e20 	add.w	lr, lr, #32
 80008f2:	2a01      	cmp	r2, #1
 80008f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008f8:	bf28      	it	cs
 80008fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008fe:	fa43 f305 	asr.w	r3, r3, r5
 8000902:	18c0      	adds	r0, r0, r3
 8000904:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800090c:	d507      	bpl.n	800091e <__adddf3+0xe6>
 800090e:	f04f 0e00 	mov.w	lr, #0
 8000912:	f1dc 0c00 	rsbs	ip, ip, #0
 8000916:	eb7e 0000 	sbcs.w	r0, lr, r0
 800091a:	eb6e 0101 	sbc.w	r1, lr, r1
 800091e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000922:	d31b      	bcc.n	800095c <__adddf3+0x124>
 8000924:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000928:	d30c      	bcc.n	8000944 <__adddf3+0x10c>
 800092a:	0849      	lsrs	r1, r1, #1
 800092c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000930:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000934:	f104 0401 	add.w	r4, r4, #1
 8000938:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800093c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000940:	f080 809a 	bcs.w	8000a78 <__adddf3+0x240>
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	bf08      	it	eq
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	ea41 0105 	orr.w	r1, r1, r5
 800095a:	bd30      	pop	{r4, r5, pc}
 800095c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000960:	4140      	adcs	r0, r0
 8000962:	eb41 0101 	adc.w	r1, r1, r1
 8000966:	3c01      	subs	r4, #1
 8000968:	bf28      	it	cs
 800096a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800096e:	d2e9      	bcs.n	8000944 <__adddf3+0x10c>
 8000970:	f091 0f00 	teq	r1, #0
 8000974:	bf04      	itt	eq
 8000976:	4601      	moveq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	fab1 f381 	clz	r3, r1
 800097e:	bf08      	it	eq
 8000980:	3320      	addeq	r3, #32
 8000982:	f1a3 030b 	sub.w	r3, r3, #11
 8000986:	f1b3 0220 	subs.w	r2, r3, #32
 800098a:	da0c      	bge.n	80009a6 <__adddf3+0x16e>
 800098c:	320c      	adds	r2, #12
 800098e:	dd08      	ble.n	80009a2 <__adddf3+0x16a>
 8000990:	f102 0c14 	add.w	ip, r2, #20
 8000994:	f1c2 020c 	rsb	r2, r2, #12
 8000998:	fa01 f00c 	lsl.w	r0, r1, ip
 800099c:	fa21 f102 	lsr.w	r1, r1, r2
 80009a0:	e00c      	b.n	80009bc <__adddf3+0x184>
 80009a2:	f102 0214 	add.w	r2, r2, #20
 80009a6:	bfd8      	it	le
 80009a8:	f1c2 0c20 	rsble	ip, r2, #32
 80009ac:	fa01 f102 	lsl.w	r1, r1, r2
 80009b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009b4:	bfdc      	itt	le
 80009b6:	ea41 010c 	orrle.w	r1, r1, ip
 80009ba:	4090      	lslle	r0, r2
 80009bc:	1ae4      	subs	r4, r4, r3
 80009be:	bfa2      	ittt	ge
 80009c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009c4:	4329      	orrge	r1, r5
 80009c6:	bd30      	popge	{r4, r5, pc}
 80009c8:	ea6f 0404 	mvn.w	r4, r4
 80009cc:	3c1f      	subs	r4, #31
 80009ce:	da1c      	bge.n	8000a0a <__adddf3+0x1d2>
 80009d0:	340c      	adds	r4, #12
 80009d2:	dc0e      	bgt.n	80009f2 <__adddf3+0x1ba>
 80009d4:	f104 0414 	add.w	r4, r4, #20
 80009d8:	f1c4 0220 	rsb	r2, r4, #32
 80009dc:	fa20 f004 	lsr.w	r0, r0, r4
 80009e0:	fa01 f302 	lsl.w	r3, r1, r2
 80009e4:	ea40 0003 	orr.w	r0, r0, r3
 80009e8:	fa21 f304 	lsr.w	r3, r1, r4
 80009ec:	ea45 0103 	orr.w	r1, r5, r3
 80009f0:	bd30      	pop	{r4, r5, pc}
 80009f2:	f1c4 040c 	rsb	r4, r4, #12
 80009f6:	f1c4 0220 	rsb	r2, r4, #32
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000a02:	ea40 0003 	orr.w	r0, r0, r3
 8000a06:	4629      	mov	r1, r5
 8000a08:	bd30      	pop	{r4, r5, pc}
 8000a0a:	fa21 f004 	lsr.w	r0, r1, r4
 8000a0e:	4629      	mov	r1, r5
 8000a10:	bd30      	pop	{r4, r5, pc}
 8000a12:	f094 0f00 	teq	r4, #0
 8000a16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a1a:	bf06      	itte	eq
 8000a1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a20:	3401      	addeq	r4, #1
 8000a22:	3d01      	subne	r5, #1
 8000a24:	e74e      	b.n	80008c4 <__adddf3+0x8c>
 8000a26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a2a:	bf18      	it	ne
 8000a2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a30:	d029      	beq.n	8000a86 <__adddf3+0x24e>
 8000a32:	ea94 0f05 	teq	r4, r5
 8000a36:	bf08      	it	eq
 8000a38:	ea90 0f02 	teqeq	r0, r2
 8000a3c:	d005      	beq.n	8000a4a <__adddf3+0x212>
 8000a3e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a42:	bf04      	itt	eq
 8000a44:	4619      	moveq	r1, r3
 8000a46:	4610      	moveq	r0, r2
 8000a48:	bd30      	pop	{r4, r5, pc}
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf1e      	ittt	ne
 8000a50:	2100      	movne	r1, #0
 8000a52:	2000      	movne	r0, #0
 8000a54:	bd30      	popne	{r4, r5, pc}
 8000a56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a5a:	d105      	bne.n	8000a68 <__adddf3+0x230>
 8000a5c:	0040      	lsls	r0, r0, #1
 8000a5e:	4149      	adcs	r1, r1
 8000a60:	bf28      	it	cs
 8000a62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a66:	bd30      	pop	{r4, r5, pc}
 8000a68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a6c:	bf3c      	itt	cc
 8000a6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a72:	bd30      	popcc	{r4, r5, pc}
 8000a74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	bd30      	pop	{r4, r5, pc}
 8000a86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a8a:	bf1a      	itte	ne
 8000a8c:	4619      	movne	r1, r3
 8000a8e:	4610      	movne	r0, r2
 8000a90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a94:	bf1c      	itt	ne
 8000a96:	460b      	movne	r3, r1
 8000a98:	4602      	movne	r2, r0
 8000a9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a9e:	bf06      	itte	eq
 8000aa0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000aa4:	ea91 0f03 	teqeq	r1, r3
 8000aa8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000aac:	bd30      	pop	{r4, r5, pc}
 8000aae:	bf00      	nop

08000ab0 <__aeabi_ui2d>:
 8000ab0:	f090 0f00 	teq	r0, #0
 8000ab4:	bf04      	itt	eq
 8000ab6:	2100      	moveq	r1, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	b530      	push	{r4, r5, lr}
 8000abc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ac0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ac4:	f04f 0500 	mov.w	r5, #0
 8000ac8:	f04f 0100 	mov.w	r1, #0
 8000acc:	e750      	b.n	8000970 <__adddf3+0x138>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2d>:
 8000ad0:	f090 0f00 	teq	r0, #0
 8000ad4:	bf04      	itt	eq
 8000ad6:	2100      	moveq	r1, #0
 8000ad8:	4770      	bxeq	lr
 8000ada:	b530      	push	{r4, r5, lr}
 8000adc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ae4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ae8:	bf48      	it	mi
 8000aea:	4240      	negmi	r0, r0
 8000aec:	f04f 0100 	mov.w	r1, #0
 8000af0:	e73e      	b.n	8000970 <__adddf3+0x138>
 8000af2:	bf00      	nop

08000af4 <__aeabi_f2d>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b02:	bf1f      	itttt	ne
 8000b04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000b08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000b0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b10:	4770      	bxne	lr
 8000b12:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b16:	bf08      	it	eq
 8000b18:	4770      	bxeq	lr
 8000b1a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b1e:	bf04      	itt	eq
 8000b20:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b24:	4770      	bxeq	lr
 8000b26:	b530      	push	{r4, r5, lr}
 8000b28:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b34:	e71c      	b.n	8000970 <__adddf3+0x138>
 8000b36:	bf00      	nop

08000b38 <__aeabi_ul2d>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	b530      	push	{r4, r5, lr}
 8000b42:	f04f 0500 	mov.w	r5, #0
 8000b46:	e00a      	b.n	8000b5e <__aeabi_l2d+0x16>

08000b48 <__aeabi_l2d>:
 8000b48:	ea50 0201 	orrs.w	r2, r0, r1
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b56:	d502      	bpl.n	8000b5e <__aeabi_l2d+0x16>
 8000b58:	4240      	negs	r0, r0
 8000b5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b62:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b6a:	f43f aed8 	beq.w	800091e <__adddf3+0xe6>
 8000b6e:	f04f 0203 	mov.w	r2, #3
 8000b72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b76:	bf18      	it	ne
 8000b78:	3203      	addne	r2, #3
 8000b7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b7e:	bf18      	it	ne
 8000b80:	3203      	addne	r2, #3
 8000b82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b86:	f1c2 0320 	rsb	r3, r2, #32
 8000b8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b96:	ea40 000e 	orr.w	r0, r0, lr
 8000b9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b9e:	4414      	add	r4, r2
 8000ba0:	e6bd      	b.n	800091e <__adddf3+0xe6>
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dmul>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000baa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000bae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000bb2:	bf1d      	ittte	ne
 8000bb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000bb8:	ea94 0f0c 	teqne	r4, ip
 8000bbc:	ea95 0f0c 	teqne	r5, ip
 8000bc0:	f000 f8de 	bleq	8000d80 <__aeabi_dmul+0x1dc>
 8000bc4:	442c      	add	r4, r5
 8000bc6:	ea81 0603 	eor.w	r6, r1, r3
 8000bca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000bce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000bd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000bd6:	bf18      	it	ne
 8000bd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be4:	d038      	beq.n	8000c58 <__aeabi_dmul+0xb4>
 8000be6:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bea:	f04f 0500 	mov.w	r5, #0
 8000bee:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000bf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000bf6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bfa:	f04f 0600 	mov.w	r6, #0
 8000bfe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000c02:	f09c 0f00 	teq	ip, #0
 8000c06:	bf18      	it	ne
 8000c08:	f04e 0e01 	orrne.w	lr, lr, #1
 8000c0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000c10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000c14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000c18:	d204      	bcs.n	8000c24 <__aeabi_dmul+0x80>
 8000c1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000c1e:	416d      	adcs	r5, r5
 8000c20:	eb46 0606 	adc.w	r6, r6, r6
 8000c24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000c28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c3c:	bf88      	it	hi
 8000c3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c42:	d81e      	bhi.n	8000c82 <__aeabi_dmul+0xde>
 8000c44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c4e:	f150 0000 	adcs.w	r0, r0, #0
 8000c52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000c5c:	ea46 0101 	orr.w	r1, r6, r1
 8000c60:	ea40 0002 	orr.w	r0, r0, r2
 8000c64:	ea81 0103 	eor.w	r1, r1, r3
 8000c68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c6c:	bfc2      	ittt	gt
 8000c6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c76:	bd70      	popgt	{r4, r5, r6, pc}
 8000c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7c:	f04f 0e00 	mov.w	lr, #0
 8000c80:	3c01      	subs	r4, #1
 8000c82:	f300 80ab 	bgt.w	8000ddc <__aeabi_dmul+0x238>
 8000c86:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000c8a:	bfde      	ittt	le
 8000c8c:	2000      	movle	r0, #0
 8000c8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000c92:	bd70      	pople	{r4, r5, r6, pc}
 8000c94:	f1c4 0400 	rsb	r4, r4, #0
 8000c98:	3c20      	subs	r4, #32
 8000c9a:	da35      	bge.n	8000d08 <__aeabi_dmul+0x164>
 8000c9c:	340c      	adds	r4, #12
 8000c9e:	dc1b      	bgt.n	8000cd8 <__aeabi_dmul+0x134>
 8000ca0:	f104 0414 	add.w	r4, r4, #20
 8000ca4:	f1c4 0520 	rsb	r5, r4, #32
 8000ca8:	fa00 f305 	lsl.w	r3, r0, r5
 8000cac:	fa20 f004 	lsr.w	r0, r0, r4
 8000cb0:	fa01 f205 	lsl.w	r2, r1, r5
 8000cb4:	ea40 0002 	orr.w	r0, r0, r2
 8000cb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000cbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000cc4:	fa21 f604 	lsr.w	r6, r1, r4
 8000cc8:	eb42 0106 	adc.w	r1, r2, r6
 8000ccc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	f1c4 040c 	rsb	r4, r4, #12
 8000cdc:	f1c4 0520 	rsb	r5, r4, #32
 8000ce0:	fa00 f304 	lsl.w	r3, r0, r4
 8000ce4:	fa20 f005 	lsr.w	r0, r0, r5
 8000ce8:	fa01 f204 	lsl.w	r2, r1, r4
 8000cec:	ea40 0002 	orr.w	r0, r0, r2
 8000cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000cf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000cf8:	f141 0100 	adc.w	r1, r1, #0
 8000cfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	f1c4 0520 	rsb	r5, r4, #32
 8000d0c:	fa00 f205 	lsl.w	r2, r0, r5
 8000d10:	ea4e 0e02 	orr.w	lr, lr, r2
 8000d14:	fa20 f304 	lsr.w	r3, r0, r4
 8000d18:	fa01 f205 	lsl.w	r2, r1, r5
 8000d1c:	ea43 0302 	orr.w	r3, r3, r2
 8000d20:	fa21 f004 	lsr.w	r0, r1, r4
 8000d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d28:	fa21 f204 	lsr.w	r2, r1, r4
 8000d2c:	ea20 0002 	bic.w	r0, r0, r2
 8000d30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
 8000d40:	f094 0f00 	teq	r4, #0
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_dmul+0x1c2>
 8000d46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000d4a:	0040      	lsls	r0, r0, #1
 8000d4c:	eb41 0101 	adc.w	r1, r1, r1
 8000d50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d54:	bf08      	it	eq
 8000d56:	3c01      	subeq	r4, #1
 8000d58:	d0f7      	beq.n	8000d4a <__aeabi_dmul+0x1a6>
 8000d5a:	ea41 0106 	orr.w	r1, r1, r6
 8000d5e:	f095 0f00 	teq	r5, #0
 8000d62:	bf18      	it	ne
 8000d64:	4770      	bxne	lr
 8000d66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000d6a:	0052      	lsls	r2, r2, #1
 8000d6c:	eb43 0303 	adc.w	r3, r3, r3
 8000d70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d74:	bf08      	it	eq
 8000d76:	3d01      	subeq	r5, #1
 8000d78:	d0f7      	beq.n	8000d6a <__aeabi_dmul+0x1c6>
 8000d7a:	ea43 0306 	orr.w	r3, r3, r6
 8000d7e:	4770      	bx	lr
 8000d80:	ea94 0f0c 	teq	r4, ip
 8000d84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d88:	bf18      	it	ne
 8000d8a:	ea95 0f0c 	teqne	r5, ip
 8000d8e:	d00c      	beq.n	8000daa <__aeabi_dmul+0x206>
 8000d90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d94:	bf18      	it	ne
 8000d96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d9a:	d1d1      	bne.n	8000d40 <__aeabi_dmul+0x19c>
 8000d9c:	ea81 0103 	eor.w	r1, r1, r3
 8000da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000da4:	f04f 0000 	mov.w	r0, #0
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000dae:	bf06      	itte	eq
 8000db0:	4610      	moveq	r0, r2
 8000db2:	4619      	moveq	r1, r3
 8000db4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000db8:	d019      	beq.n	8000dee <__aeabi_dmul+0x24a>
 8000dba:	ea94 0f0c 	teq	r4, ip
 8000dbe:	d102      	bne.n	8000dc6 <__aeabi_dmul+0x222>
 8000dc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000dc4:	d113      	bne.n	8000dee <__aeabi_dmul+0x24a>
 8000dc6:	ea95 0f0c 	teq	r5, ip
 8000dca:	d105      	bne.n	8000dd8 <__aeabi_dmul+0x234>
 8000dcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000dd0:	bf1c      	itt	ne
 8000dd2:	4610      	movne	r0, r2
 8000dd4:	4619      	movne	r1, r3
 8000dd6:	d10a      	bne.n	8000dee <__aeabi_dmul+0x24a>
 8000dd8:	ea81 0103 	eor.w	r1, r1, r3
 8000ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000de0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000de4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000de8:	f04f 0000 	mov.w	r0, #0
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
 8000dee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000df2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000df6:	bd70      	pop	{r4, r5, r6, pc}

08000df8 <__aeabi_ddiv>:
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e06:	bf1d      	ittte	ne
 8000e08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e0c:	ea94 0f0c 	teqne	r4, ip
 8000e10:	ea95 0f0c 	teqne	r5, ip
 8000e14:	f000 f8a7 	bleq	8000f66 <__aeabi_ddiv+0x16e>
 8000e18:	eba4 0405 	sub.w	r4, r4, r5
 8000e1c:	ea81 0e03 	eor.w	lr, r1, r3
 8000e20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e28:	f000 8088 	beq.w	8000f3c <__aeabi_ddiv+0x144>
 8000e2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e48:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000e50:	429d      	cmp	r5, r3
 8000e52:	bf08      	it	eq
 8000e54:	4296      	cmpeq	r6, r2
 8000e56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000e5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000e5e:	d202      	bcs.n	8000e66 <__aeabi_ddiv+0x6e>
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e66:	1ab6      	subs	r6, r6, r2
 8000e68:	eb65 0503 	sbc.w	r5, r5, r3
 8000e6c:	085b      	lsrs	r3, r3, #1
 8000e6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000e7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e82:	bf22      	ittt	cs
 8000e84:	1ab6      	subcs	r6, r6, r2
 8000e86:	4675      	movcs	r5, lr
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	085b      	lsrs	r3, r3, #1
 8000e8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e92:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e9a:	bf22      	ittt	cs
 8000e9c:	1ab6      	subcs	r6, r6, r2
 8000e9e:	4675      	movcs	r5, lr
 8000ea0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea4:	085b      	lsrs	r3, r3, #1
 8000ea6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000eaa:	ebb6 0e02 	subs.w	lr, r6, r2
 8000eae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000eb2:	bf22      	ittt	cs
 8000eb4:	1ab6      	subcs	r6, r6, r2
 8000eb6:	4675      	movcs	r5, lr
 8000eb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ec2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ec6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000eca:	bf22      	ittt	cs
 8000ecc:	1ab6      	subcs	r6, r6, r2
 8000ece:	4675      	movcs	r5, lr
 8000ed0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed4:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ed8:	d018      	beq.n	8000f0c <__aeabi_ddiv+0x114>
 8000eda:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000ede:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000ee2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ee6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000eea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000eee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ef2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ef6:	d1c0      	bne.n	8000e7a <__aeabi_ddiv+0x82>
 8000ef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000efc:	d10b      	bne.n	8000f16 <__aeabi_ddiv+0x11e>
 8000efe:	ea41 0100 	orr.w	r1, r1, r0
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000f0a:	e7b6      	b.n	8000e7a <__aeabi_ddiv+0x82>
 8000f0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f10:	bf04      	itt	eq
 8000f12:	4301      	orreq	r1, r0
 8000f14:	2000      	moveq	r0, #0
 8000f16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000f1a:	bf88      	it	hi
 8000f1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000f20:	f63f aeaf 	bhi.w	8000c82 <__aeabi_dmul+0xde>
 8000f24:	ebb5 0c03 	subs.w	ip, r5, r3
 8000f28:	bf04      	itt	eq
 8000f2a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f32:	f150 0000 	adcs.w	r0, r0, #0
 8000f36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000f40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f48:	bfc2      	ittt	gt
 8000f4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f52:	bd70      	popgt	{r4, r5, r6, pc}
 8000f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f58:	f04f 0e00 	mov.w	lr, #0
 8000f5c:	3c01      	subs	r4, #1
 8000f5e:	e690      	b.n	8000c82 <__aeabi_dmul+0xde>
 8000f60:	ea45 0e06 	orr.w	lr, r5, r6
 8000f64:	e68d      	b.n	8000c82 <__aeabi_dmul+0xde>
 8000f66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f6a:	ea94 0f0c 	teq	r4, ip
 8000f6e:	bf08      	it	eq
 8000f70:	ea95 0f0c 	teqeq	r5, ip
 8000f74:	f43f af3b 	beq.w	8000dee <__aeabi_dmul+0x24a>
 8000f78:	ea94 0f0c 	teq	r4, ip
 8000f7c:	d10a      	bne.n	8000f94 <__aeabi_ddiv+0x19c>
 8000f7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f82:	f47f af34 	bne.w	8000dee <__aeabi_dmul+0x24a>
 8000f86:	ea95 0f0c 	teq	r5, ip
 8000f8a:	f47f af25 	bne.w	8000dd8 <__aeabi_dmul+0x234>
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	e72c      	b.n	8000dee <__aeabi_dmul+0x24a>
 8000f94:	ea95 0f0c 	teq	r5, ip
 8000f98:	d106      	bne.n	8000fa8 <__aeabi_ddiv+0x1b0>
 8000f9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f9e:	f43f aefd 	beq.w	8000d9c <__aeabi_dmul+0x1f8>
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	e722      	b.n	8000dee <__aeabi_dmul+0x24a>
 8000fa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000fac:	bf18      	it	ne
 8000fae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000fb2:	f47f aec5 	bne.w	8000d40 <__aeabi_dmul+0x19c>
 8000fb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000fba:	f47f af0d 	bne.w	8000dd8 <__aeabi_dmul+0x234>
 8000fbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000fc2:	f47f aeeb 	bne.w	8000d9c <__aeabi_dmul+0x1f8>
 8000fc6:	e712      	b.n	8000dee <__aeabi_dmul+0x24a>

08000fc8 <__aeabi_fmul>:
 8000fc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fd0:	bf1e      	ittt	ne
 8000fd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd6:	ea92 0f0c 	teqne	r2, ip
 8000fda:	ea93 0f0c 	teqne	r3, ip
 8000fde:	d06f      	beq.n	80010c0 <__aeabi_fmul+0xf8>
 8000fe0:	441a      	add	r2, r3
 8000fe2:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe6:	0240      	lsls	r0, r0, #9
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000fee:	d01e      	beq.n	800102e <__aeabi_fmul+0x66>
 8000ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ff4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ff8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ffc:	fba0 3101 	umull	r3, r1, r0, r1
 8001000:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001004:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001008:	bf3e      	ittt	cc
 800100a:	0049      	lslcc	r1, r1, #1
 800100c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001010:	005b      	lslcc	r3, r3, #1
 8001012:	ea40 0001 	orr.w	r0, r0, r1
 8001016:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800101a:	2afd      	cmp	r2, #253	; 0xfd
 800101c:	d81d      	bhi.n	800105a <__aeabi_fmul+0x92>
 800101e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001022:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001026:	bf08      	it	eq
 8001028:	f020 0001 	biceq.w	r0, r0, #1
 800102c:	4770      	bx	lr
 800102e:	f090 0f00 	teq	r0, #0
 8001032:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001036:	bf08      	it	eq
 8001038:	0249      	lsleq	r1, r1, #9
 800103a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800103e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001042:	3a7f      	subs	r2, #127	; 0x7f
 8001044:	bfc2      	ittt	gt
 8001046:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800104a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800104e:	4770      	bxgt	lr
 8001050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	3a01      	subs	r2, #1
 800105a:	dc5d      	bgt.n	8001118 <__aeabi_fmul+0x150>
 800105c:	f112 0f19 	cmn.w	r2, #25
 8001060:	bfdc      	itt	le
 8001062:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8001066:	4770      	bxle	lr
 8001068:	f1c2 0200 	rsb	r2, r2, #0
 800106c:	0041      	lsls	r1, r0, #1
 800106e:	fa21 f102 	lsr.w	r1, r1, r2
 8001072:	f1c2 0220 	rsb	r2, r2, #32
 8001076:	fa00 fc02 	lsl.w	ip, r0, r2
 800107a:	ea5f 0031 	movs.w	r0, r1, rrx
 800107e:	f140 0000 	adc.w	r0, r0, #0
 8001082:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8001086:	bf08      	it	eq
 8001088:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800108c:	4770      	bx	lr
 800108e:	f092 0f00 	teq	r2, #0
 8001092:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0040      	lsleq	r0, r0, #1
 800109a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800109e:	3a01      	subeq	r2, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fmul+0xce>
 80010a2:	ea40 000c 	orr.w	r0, r0, ip
 80010a6:	f093 0f00 	teq	r3, #0
 80010aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ae:	bf02      	ittt	eq
 80010b0:	0049      	lsleq	r1, r1, #1
 80010b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010b6:	3b01      	subeq	r3, #1
 80010b8:	d0f9      	beq.n	80010ae <__aeabi_fmul+0xe6>
 80010ba:	ea41 010c 	orr.w	r1, r1, ip
 80010be:	e78f      	b.n	8000fe0 <__aeabi_fmul+0x18>
 80010c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010c4:	ea92 0f0c 	teq	r2, ip
 80010c8:	bf18      	it	ne
 80010ca:	ea93 0f0c 	teqne	r3, ip
 80010ce:	d00a      	beq.n	80010e6 <__aeabi_fmul+0x11e>
 80010d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d4:	bf18      	it	ne
 80010d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010da:	d1d8      	bne.n	800108e <__aeabi_fmul+0xc6>
 80010dc:	ea80 0001 	eor.w	r0, r0, r1
 80010e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80010e4:	4770      	bx	lr
 80010e6:	f090 0f00 	teq	r0, #0
 80010ea:	bf17      	itett	ne
 80010ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80010f0:	4608      	moveq	r0, r1
 80010f2:	f091 0f00 	teqne	r1, #0
 80010f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80010fa:	d014      	beq.n	8001126 <__aeabi_fmul+0x15e>
 80010fc:	ea92 0f0c 	teq	r2, ip
 8001100:	d101      	bne.n	8001106 <__aeabi_fmul+0x13e>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d10f      	bne.n	8001126 <__aeabi_fmul+0x15e>
 8001106:	ea93 0f0c 	teq	r3, ip
 800110a:	d103      	bne.n	8001114 <__aeabi_fmul+0x14c>
 800110c:	024b      	lsls	r3, r1, #9
 800110e:	bf18      	it	ne
 8001110:	4608      	movne	r0, r1
 8001112:	d108      	bne.n	8001126 <__aeabi_fmul+0x15e>
 8001114:	ea80 0001 	eor.w	r0, r0, r1
 8001118:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800111c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001124:	4770      	bx	lr
 8001126:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800112a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800112e:	4770      	bx	lr

08001130 <__aeabi_fdiv>:
 8001130:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001134:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001138:	bf1e      	ittt	ne
 800113a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800113e:	ea92 0f0c 	teqne	r2, ip
 8001142:	ea93 0f0c 	teqne	r3, ip
 8001146:	d069      	beq.n	800121c <__aeabi_fdiv+0xec>
 8001148:	eba2 0203 	sub.w	r2, r2, r3
 800114c:	ea80 0c01 	eor.w	ip, r0, r1
 8001150:	0249      	lsls	r1, r1, #9
 8001152:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001156:	d037      	beq.n	80011c8 <__aeabi_fdiv+0x98>
 8001158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800115c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001160:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001164:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001168:	428b      	cmp	r3, r1
 800116a:	bf38      	it	cc
 800116c:	005b      	lslcc	r3, r3, #1
 800116e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001172:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001176:	428b      	cmp	r3, r1
 8001178:	bf24      	itt	cs
 800117a:	1a5b      	subcs	r3, r3, r1
 800117c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001180:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001184:	bf24      	itt	cs
 8001186:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800118a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800118e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001192:	bf24      	itt	cs
 8001194:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001198:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800119c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80011a0:	bf24      	itt	cs
 80011a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80011a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	bf18      	it	ne
 80011ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80011b2:	d1e0      	bne.n	8001176 <__aeabi_fdiv+0x46>
 80011b4:	2afd      	cmp	r2, #253	; 0xfd
 80011b6:	f63f af50 	bhi.w	800105a <__aeabi_fmul+0x92>
 80011ba:	428b      	cmp	r3, r1
 80011bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011c0:	bf08      	it	eq
 80011c2:	f020 0001 	biceq.w	r0, r0, #1
 80011c6:	4770      	bx	lr
 80011c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80011d0:	327f      	adds	r2, #127	; 0x7f
 80011d2:	bfc2      	ittt	gt
 80011d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80011d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80011dc:	4770      	bxgt	lr
 80011de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e737      	b.n	800105a <__aeabi_fmul+0x92>
 80011ea:	f092 0f00 	teq	r2, #0
 80011ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80011f2:	bf02      	ittt	eq
 80011f4:	0040      	lsleq	r0, r0, #1
 80011f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80011fa:	3a01      	subeq	r2, #1
 80011fc:	d0f9      	beq.n	80011f2 <__aeabi_fdiv+0xc2>
 80011fe:	ea40 000c 	orr.w	r0, r0, ip
 8001202:	f093 0f00 	teq	r3, #0
 8001206:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800120a:	bf02      	ittt	eq
 800120c:	0049      	lsleq	r1, r1, #1
 800120e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001212:	3b01      	subeq	r3, #1
 8001214:	d0f9      	beq.n	800120a <__aeabi_fdiv+0xda>
 8001216:	ea41 010c 	orr.w	r1, r1, ip
 800121a:	e795      	b.n	8001148 <__aeabi_fdiv+0x18>
 800121c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001220:	ea92 0f0c 	teq	r2, ip
 8001224:	d108      	bne.n	8001238 <__aeabi_fdiv+0x108>
 8001226:	0242      	lsls	r2, r0, #9
 8001228:	f47f af7d 	bne.w	8001126 <__aeabi_fmul+0x15e>
 800122c:	ea93 0f0c 	teq	r3, ip
 8001230:	f47f af70 	bne.w	8001114 <__aeabi_fmul+0x14c>
 8001234:	4608      	mov	r0, r1
 8001236:	e776      	b.n	8001126 <__aeabi_fmul+0x15e>
 8001238:	ea93 0f0c 	teq	r3, ip
 800123c:	d104      	bne.n	8001248 <__aeabi_fdiv+0x118>
 800123e:	024b      	lsls	r3, r1, #9
 8001240:	f43f af4c 	beq.w	80010dc <__aeabi_fmul+0x114>
 8001244:	4608      	mov	r0, r1
 8001246:	e76e      	b.n	8001126 <__aeabi_fmul+0x15e>
 8001248:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800124c:	bf18      	it	ne
 800124e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001252:	d1ca      	bne.n	80011ea <__aeabi_fdiv+0xba>
 8001254:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001258:	f47f af5c 	bne.w	8001114 <__aeabi_fmul+0x14c>
 800125c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001260:	f47f af3c 	bne.w	80010dc <__aeabi_fmul+0x114>
 8001264:	e75f      	b.n	8001126 <__aeabi_fmul+0x15e>
 8001266:	bf00      	nop

08001268 <__aeabi_f2uiz>:
 8001268:	0042      	lsls	r2, r0, #1
 800126a:	d20e      	bcs.n	800128a <__aeabi_f2uiz+0x22>
 800126c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001270:	d30b      	bcc.n	800128a <__aeabi_f2uiz+0x22>
 8001272:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001276:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800127a:	d409      	bmi.n	8001290 <__aeabi_f2uiz+0x28>
 800127c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001284:	fa23 f002 	lsr.w	r0, r3, r2
 8001288:	4770      	bx	lr
 800128a:	f04f 0000 	mov.w	r0, #0
 800128e:	4770      	bx	lr
 8001290:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001294:	d101      	bne.n	800129a <__aeabi_f2uiz+0x32>
 8001296:	0242      	lsls	r2, r0, #9
 8001298:	d102      	bne.n	80012a0 <__aeabi_f2uiz+0x38>
 800129a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129e:	4770      	bx	lr
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <Reset_Handler>:
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <Zerobss+0x10>)
 80012aa:	4685      	mov	sp, r0
 80012ac:	2100      	movs	r1, #0
 80012ae:	e003      	b.n	80012b8 <DataInit>

080012b0 <CopyData>:
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <Zerobss+0x14>)
 80012b2:	585b      	ldr	r3, [r3, r1]
 80012b4:	5043      	str	r3, [r0, r1]
 80012b6:	3104      	adds	r1, #4

080012b8 <DataInit>:
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <Zerobss+0x18>)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <Zerobss+0x1c>)
 80012bc:	1842      	adds	r2, r0, r1
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3f6      	bcc.n	80012b0 <CopyData>
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <Zerobss+0x20>)
 80012c4:	e002      	b.n	80012cc <Zerobss>

080012c6 <FillZerobss>:
 80012c6:	2300      	movs	r3, #0
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <Zerobss>:
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <Zerobss+0x24>)
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>
 80012d2:	f006 fefd 	bl	80080d0 <SystemInit>
 80012d6:	f000 f8e3 	bl	80014a0 <main>
 80012da:	4770      	bx	lr
 80012dc:	2000c000 	andcs	ip, r0, r0
 80012e0:	0800add8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp, pc}
 80012e4:	20000000 	andcs	r0, r0, r0
 80012e8:	200000e4 	andcs	r0, r0, r4, ror #1
 80012ec:	200000e8 	andcs	r0, r0, r8, ror #1
 80012f0:	20009824 	andcs	r9, r0, r4, lsr #16

080012f4 <ADC0_1_IRQHandler>:
 80012f4:	e7fe      	b.n	80012f4 <ADC0_1_IRQHandler>

080012f6 <FactoryDefaults::~FactoryDefaults()>:
 80012f6:	4770      	bx	lr

080012f8 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80012f8:	4770      	bx	lr
	...

080012fc <PixelDmxStartStop::Start()>:
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <PixelDmxStartStop::Start()+0x14>)
 8001302:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8001306:	2204      	movs	r2, #4
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	4770      	bx	lr
 8001310:	40010000 	andmi	r0, r1, r0

08001314 <PixelDmxStartStop::Stop()>:
 8001314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <PixelDmxStartStop::Stop()+0x14>)
 800131a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800131e:	2204      	movs	r2, #4
 8001320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	4770      	bx	lr
 8001328:	40010000 	andmi	r0, r1, r0

0800132c <Reboot::~Reboot()>:
 800132c:	4770      	bx	lr

0800132e <Reboot::~Reboot()>:
 800132e:	b510      	push	{r4, lr}
 8001330:	4604      	mov	r4, r0
 8001332:	f006 fc6c 	bl	8007c0e <operator delete(void*)>
 8001336:	4620      	mov	r0, r4
 8001338:	bd10      	pop	{r4, pc}

0800133a <FactoryDefaults::~FactoryDefaults()>:
 800133a:	b510      	push	{r4, lr}
 800133c:	4604      	mov	r4, r0
 800133e:	f006 fc66 	bl	8007c0e <operator delete(void*)>
 8001342:	4620      	mov	r0, r4
 8001344:	bd10      	pop	{r4, pc}

08001346 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8001346:	b510      	push	{r4, lr}
 8001348:	4604      	mov	r4, r0
 800134a:	f006 fc60 	bl	8007c0e <operator delete(void*)>
 800134e:	4620      	mov	r0, r4
 8001350:	bd10      	pop	{r4, pc}
	...

08001354 <RDMResponder::PersonalityUpdate(LightSet*)>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	4e0a      	ldr	r6, [pc, #40]	; (8001380 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 8001358:	4604      	mov	r4, r0
 800135a:	6830      	ldr	r0, [r6, #0]
 800135c:	460d      	mov	r5, r1
 800135e:	4281      	cmp	r1, r0
 8001360:	d007      	beq.n	8001372 <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 8001362:	6803      	ldr	r3, [r0, #0]
 8001364:	2100      	movs	r1, #0
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4798      	blx	r3
 800136a:	2200      	movs	r2, #0
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 800136e:	6035      	str	r5, [r6, #0]
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	4620      	mov	r0, r4
 8001374:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8001378:	f000 fb6e 	bl	8001a58 <RDMResponder::PersonalityUpdate(unsigned int)>
 800137c:	bd70      	pop	{r4, r5, r6, pc}
 800137e:	bf00      	nop
 8001380:	20000204 	andcs	r0, r0, r4, lsl #4
 8001384:	20000200 	andcs	r0, r0, r0, lsl #4

08001388 <FactoryDefaults::Set()>:
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <FactoryDefaults::Set()+0xc>)
 800138a:	210b      	movs	r1, #11
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	f005 b953 	b.w	8006638 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8001392:	bf00      	nop
 8001394:	200016ac 	andcs	r1, r0, ip, lsr #13

08001398 <Reboot::Run()>:
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <Reboot::Run()+0x8>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	f005 b81a 	b.w	80063d4 <WS28xx::Blackout()>
 80013a0:	20000694 	mulcs	r0, r4, r6

080013a4 <RDMResponder::DmxStartAddressUpdate()>:
 80013a4:	b508      	push	{r3, lr}
 80013a6:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80013aa:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 80013ae:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80013b2:	b289      	uxth	r1, r1
 80013b4:	f000 fb44 	bl	8001a40 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 80013b8:	bd08      	pop	{r3, pc}

080013ba <Display::ClearLine(unsigned char) [clone .isra.0]>:
 80013ba:	b110      	cbz	r0, 80013c2 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 80013bc:	6803      	ldr	r3, [r0, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4718      	bx	r3
 80013c2:	4770      	bx	lr

080013c4 <RDMResponder::~RDMResponder()>:
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <RDMResponder::~RDMResponder()+0x3c>)
 80013ca:	f840 3b8c 	str.w	r3, [r0], #140
 80013ce:	f001 ff83 	bl	80032d8 <RDMSubDevices::~RDMSubDevices()>
 80013d2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80013d6:	f001 f951 	bl	800267c <RDMSensors::~RDMSensors()>
 80013da:	2300      	movs	r3, #0
 80013dc:	2201      	movs	r2, #1
 80013de:	4619      	mov	r1, r3
 80013e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80013e4:	f002 fb6c 	bl	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <RDMResponder::~RDMResponder()+0x40>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	6803      	ldr	r3, [r0, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	4798      	blx	r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <RDMResponder::~RDMResponder()+0x44>)
 80013f8:	4620      	mov	r0, r4
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	bf00      	nop
 8001400:	08009ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, pc}
 8001404:	20000204 	andcs	r0, r0, r4, lsl #4
 8001408:	20000200 	andcs	r0, r0, r0, lsl #4

0800140c <RDMResponder::~RDMResponder()>:
 800140c:	b510      	push	{r4, lr}
 800140e:	4604      	mov	r4, r0
 8001410:	f7ff ffd8 	bl	80013c4 <RDMResponder::~RDMResponder()>
 8001414:	4620      	mov	r0, r4
 8001416:	f006 fbfa 	bl	8007c0e <operator delete(void*)>
 800141a:	4620      	mov	r0, r4
 800141c:	bd10      	pop	{r4, pc}

0800141e <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 800141e:	2300      	movs	r3, #0
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	4604      	mov	r4, r0
 8001424:	460e      	mov	r6, r1
 8001426:	4615      	mov	r5, r2
 8001428:	6043      	str	r3, [r0, #4]
 800142a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800142e:	b9aa      	cbnz	r2, 800145c <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3e>
 8001430:	8002      	strh	r2, [r0, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	f104 0208 	add.w	r2, r4, #8
 8001438:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800143c:	1e71      	subs	r1, r6, #1
 800143e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001442:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001446:	b183      	cbz	r3, 800146a <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x4c>
 8001448:	4290      	cmp	r0, r2
 800144a:	d00e      	beq.n	800146a <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x4c>
 800144c:	f802 3b01 	strb.w	r3, [r2], #1
 8001450:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001454:	3301      	adds	r3, #1
 8001456:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800145a:	e7f2      	b.n	8001442 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x24>
 800145c:	6813      	ldr	r3, [r2, #0]
 800145e:	4610      	mov	r0, r2
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	4798      	blx	r3
 8001464:	6065      	str	r5, [r4, #4]
 8001466:	8020      	strh	r0, [r4, #0]
 8001468:	e7e3      	b.n	8001432 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x14>
 800146a:	4620      	mov	r0, r4
 800146c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001470 <is_config_mode()>:
 8001470:	b510      	push	{r4, lr}
 8001472:	4c0a      	ldr	r4, [pc, #40]	; (800149c <is_config_mode()+0x2c>)
 8001474:	f240 6003 	movw	r0, #1539	; 0x603
 8001478:	f007 f86c 	bl	8008554 <rcu_periph_clock_enable>
 800147c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001480:	2203      	movs	r2, #3
 8001482:	4620      	mov	r0, r4
 8001484:	2148      	movs	r1, #72	; 0x48
 8001486:	f006 ffc9 	bl	800841c <gpio_init>
 800148a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148e:	4620      	mov	r0, r4
 8001490:	f007 f818 	bl	80084c4 <gpio_input_bit_get>
 8001494:	fab0 f080 	clz	r0, r0
 8001498:	0940      	lsrs	r0, r0, #5
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40010c00 	andmi	r0, r1, r0, lsl #24

080014a0 <main>:
 80014a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a4:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
 80014a8:	a820      	add	r0, sp, #128	; 0x80
 80014aa:	f006 f98b 	bl	80077c4 <Hardware::Hardware()>
 80014ae:	a818      	add	r0, sp, #96	; 0x60
 80014b0:	f005 fcf4 	bl	8006e9c <Network::Network()>
 80014b4:	a825      	add	r0, sp, #148	; 0x94
 80014b6:	f006 f941 	bl	800773c <LedBlink::LedBlink()>
 80014ba:	a88f      	add	r0, sp, #572	; 0x23c
 80014bc:	f005 fd02 	bl	8006ec4 <DisplayUdf::DisplayUdf()>
 80014c0:	4bb4      	ldr	r3, [pc, #720]	; (8001794 <main+0x2f4>)
 80014c2:	4ab5      	ldr	r2, [pc, #724]	; (8001798 <main+0x2f8>)
 80014c4:	49b5      	ldr	r1, [pc, #724]	; (800179c <main+0x2fc>)
 80014c6:	a805      	add	r0, sp, #20
 80014c8:	f006 f8f2 	bl	80076b0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80014cc:	a806      	add	r0, sp, #24
 80014ce:	f005 fb6b 	bl	8006ba8 <FlashRom::FlashRom()>
 80014d2:	a807      	add	r0, sp, #28
 80014d4:	f005 f88a 	bl	80065ec <SpiFlashStore::SpiFlashStore()>
 80014d8:	2101      	movs	r1, #1
 80014da:	a825      	add	r0, sp, #148	; 0x94
 80014dc:	f006 f93e 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 80014e0:	f7ff ffc6 	bl	8001470 <is_config_mode()>
 80014e4:	4dae      	ldr	r5, [pc, #696]	; (80017a0 <main+0x300>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4606      	mov	r6, r0
 80014ea:	ac2b      	add	r4, sp, #172	; 0xac
 80014ec:	a805      	add	r0, sp, #20
 80014ee:	f006 f917 	bl	8007720 <FirmwareVersion::Print(char const*)>
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014fe:	a812      	add	r0, sp, #72	; 0x48
 8001500:	f005 fb46 	bl	8006b90 <StoreWS28xxDmx::StoreWS28xxDmx()>
 8001504:	a912      	add	r1, sp, #72	; 0x48
 8001506:	a845      	add	r0, sp, #276	; 0x114
 8001508:	f004 f9fc 	bl	8005904 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800150c:	a845      	add	r0, sp, #276	; 0x114
 800150e:	f004 fa21 	bl	8005954 <WS28xxDmxParams::Load()>
 8001512:	b130      	cbz	r0, 8001522 <main+0x82>
 8001514:	a845      	add	r0, sp, #276	; 0x114
 8001516:	a92b      	add	r1, sp, #172	; 0xac
 8001518:	f004 fa28 	bl	800596c <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 800151c:	a845      	add	r0, sp, #276	; 0x114
 800151e:	f004 fa5b 	bl	80059d8 <WS28xxDmxParams::Dump()>
 8001522:	ab0a      	add	r3, sp, #40	; 0x28
 8001524:	ac0b      	add	r4, sp, #44	; 0x2c
 8001526:	2101      	movs	r1, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	aa09      	add	r2, sp, #36	; 0x24
 800152c:	ab1c      	add	r3, sp, #112	; 0x70
 800152e:	a82b      	add	r0, sp, #172	; 0xac
 8001530:	9401      	str	r4, [sp, #4]
 8001532:	f003 ffdd 	bl	80054f0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 8001536:	a82b      	add	r0, sp, #172	; 0xac
 8001538:	f004 f832 	bl	80055a0 <PixelDmxConfiguration::Dump()>
 800153c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800153e:	2b01      	cmp	r3, #1
 8001540:	d909      	bls.n	8001556 <main+0xb6>
 8001542:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001546:	024b      	lsls	r3, r1, #9
 8001548:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 800154c:	bf94      	ite	ls
 800154e:	fbb3 f3f2 	udivls	r3, r3, r2
 8001552:	23aa      	movhi	r3, #170	; 0xaa
 8001554:	932c      	str	r3, [sp, #176]	; 0xb0
 8001556:	a92b      	add	r1, sp, #172	; 0xac
 8001558:	a86a      	add	r0, sp, #424	; 0x1a8
 800155a:	f004 f993 	bl	8005884 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 800155e:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <main+0x304>)
 8001560:	2203      	movs	r2, #3
 8001562:	2110      	movs	r1, #16
 8001564:	4890      	ldr	r0, [pc, #576]	; (80017a8 <main+0x308>)
 8001566:	930c      	str	r3, [sp, #48]	; 0x30
 8001568:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 800156c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001570:	f8cd 81e0 	str.w	r8, [sp, #480]	; 0x1e0
 8001574:	f006 ff52 	bl	800841c <gpio_init>
 8001578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157c:	4b8b      	ldr	r3, [pc, #556]	; (80017ac <main+0x30c>)
 800157e:	4f8c      	ldr	r7, [pc, #560]	; (80017b0 <main+0x310>)
 8001580:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8001584:	2110      	movs	r1, #16
 8001586:	2304      	movs	r3, #4
 8001588:	2203      	movs	r2, #3
 800158a:	4638      	mov	r0, r7
 800158c:	f006 ff46 	bl	800841c <gpio_init>
 8001590:	2304      	movs	r3, #4
 8001592:	ac0c      	add	r4, sp, #48	; 0x30
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	2101      	movs	r1, #1
 8001598:	9479      	str	r4, [sp, #484]	; 0x1e4
 800159a:	a808      	add	r0, sp, #32
 800159c:	f89d 413e 	ldrb.w	r4, [sp, #318]	; 0x13e
 80015a0:	f004 fadc 	bl	8005b5c <PixelPatterns::PixelPatterns(unsigned int)>
 80015a4:	4b83      	ldr	r3, [pc, #524]	; (80017b4 <main+0x314>)
 80015a6:	2c05      	cmp	r4, #5
 80015a8:	601c      	str	r4, [r3, #0]
 80015aa:	f340 81cc 	ble.w	8001946 <main+0x4a6>
 80015ae:	4641      	mov	r1, r8
 80015b0:	a80d      	add	r0, sp, #52	; 0x34
 80015b2:	f004 f811 	bl	80055d8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>
 80015b6:	a80e      	add	r0, sp, #56	; 0x38
 80015b8:	f005 f9da 	bl	8006970 <StoreRDMSensors::StoreRDMSensors()>
 80015bc:	a90e      	add	r1, sp, #56	; 0x38
 80015be:	a85c      	add	r0, sp, #368	; 0x170
 80015c0:	f001 f968 	bl	8002894 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 80015c4:	a85c      	add	r0, sp, #368	; 0x170
 80015c6:	f001 f967 	bl	8002898 <RDMSensorsParams::Load()>
 80015ca:	b128      	cbz	r0, 80015d8 <main+0x138>
 80015cc:	a85c      	add	r0, sp, #368	; 0x170
 80015ce:	f001 f987 	bl	80028e0 <RDMSensorsParams::Set()>
 80015d2:	a85c      	add	r0, sp, #368	; 0x170
 80015d4:	f001 f96c 	bl	80028b0 <RDMSensorsParams::Dump()>
 80015d8:	a80f      	add	r0, sp, #60	; 0x3c
 80015da:	f005 f9fd 	bl	80069d8 <StoreRDMSubDevices::StoreRDMSubDevices()>
 80015de:	a90f      	add	r1, sp, #60	; 0x3c
 80015e0:	a87b      	add	r0, sp, #492	; 0x1ec
 80015e2:	f001 ff47 	bl	8003474 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 80015e6:	a87b      	add	r0, sp, #492	; 0x1ec
 80015e8:	f001 ff46 	bl	8003478 <RDMSubDevicesParams::Load()>
 80015ec:	b128      	cbz	r0, 80015fa <main+0x15a>
 80015ee:	a87b      	add	r0, sp, #492	; 0x1ec
 80015f0:	f001 ff4f 	bl	8003492 <RDMSubDevicesParams::Set()>
 80015f4:	a87b      	add	r0, sp, #492	; 0x1ec
 80015f6:	f001 ff4b 	bl	8003490 <RDMSubDevicesParams::Dump()>
 80015fa:	982b      	ldr	r0, [sp, #172]	; 0xac
 80015fc:	f004 fd16 	bl	800602c <PixelType::GetType(pixel::Type)>
 8001600:	4605      	mov	r5, r0
 8001602:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001604:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
 8001608:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 800160c:	f004 fd1a 	bl	8006044 <PixelType::GetMap(pixel::Map)>
 8001610:	462b      	mov	r3, r5
 8001612:	211f      	movs	r1, #31
 8001614:	4a68      	ldr	r2, [pc, #416]	; (80017b8 <main+0x318>)
 8001616:	e9cd 9001 	strd	r9, r0, [sp, #4]
 800161a:	f8cd 8000 	str.w	r8, [sp]
 800161e:	a833      	add	r0, sp, #204	; 0xcc
 8001620:	f000 ff0c 	bl	800243c <snprintf>
 8001624:	202c      	movs	r0, #44	; 0x2c
 8001626:	f006 faf6 	bl	8007c16 <operator new(unsigned int)>
 800162a:	4605      	mov	r5, r0
 800162c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800162e:	a933      	add	r1, sp, #204	; 0xcc
 8001630:	f7ff fef5 	bl	800141e <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8001634:	202c      	movs	r0, #44	; 0x2c
 8001636:	9514      	str	r5, [sp, #80]	; 0x50
 8001638:	f006 faed 	bl	8007c16 <operator new(unsigned int)>
 800163c:	4605      	mov	r5, r0
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <main+0x31c>)
 8001640:	aa0d      	add	r2, sp, #52	; 0x34
 8001642:	f7ff feec 	bl	800141e <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8001646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001648:	a8d8      	add	r0, sp, #864	; 0x360
 800164a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800164e:	9515      	str	r5, [sp, #84]	; 0x54
 8001650:	f002 fa64 	bl	8003b1c <Dmx::Dmx()>
 8001654:	ada4      	add	r5, sp, #656	; 0x290
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <main+0x320>)
 8001658:	2202      	movs	r2, #2
 800165a:	a914      	add	r1, sp, #80	; 0x50
 800165c:	4628      	mov	r0, r5
 800165e:	f8c3 8000 	str.w	r8, [r3]
 8001662:	f002 fca1 	bl	8003fa8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8001666:	2101      	movs	r1, #1
 8001668:	a8df      	add	r0, sp, #892	; 0x37c
 800166a:	f002 fe6d 	bl	8004348 <RDMHandler::RDMHandler(bool)>
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <main+0x324>)
 8001670:	4628      	mov	r0, r5
 8001672:	93a4      	str	r3, [sp, #656]	; 0x290
 8001674:	4b54      	ldr	r3, [pc, #336]	; (80017c8 <main+0x328>)
 8001676:	601d      	str	r5, [r3, #0]
 8001678:	f002 fcf4 	bl	8004064 <RDMDeviceResponder::Init()>
 800167c:	a816      	add	r0, sp, #88	; 0x58
 800167e:	f005 f941 	bl	8006904 <StoreRDMDevice::StoreRDMDevice()>
 8001682:	a916      	add	r1, sp, #88	; 0x58
 8001684:	a850      	add	r0, sp, #320	; 0x140
 8001686:	f002 fbf7 	bl	8003e78 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 800168a:	a850      	add	r0, sp, #320	; 0x140
 800168c:	f002 fc06 	bl	8003e9c <RDMDeviceParams::Load()>
 8001690:	b130      	cbz	r0, 80016a0 <main+0x200>
 8001692:	a850      	add	r0, sp, #320	; 0x140
 8001694:	a9a5      	add	r1, sp, #660	; 0x294
 8001696:	f002 fc0c 	bl	8003eb2 <RDMDeviceParams::Set(RDMDevice*)>
 800169a:	a850      	add	r0, sp, #320	; 0x140
 800169c:	f002 fc3e 	bl	8003f1c <RDMDeviceParams::Dump()>
 80016a0:	ab17      	add	r3, sp, #92	; 0x5c
 80016a2:	93c3      	str	r3, [sp, #780]	; 0x30c
 80016a4:	ab10      	add	r3, sp, #64	; 0x40
 80016a6:	93d7      	str	r3, [sp, #860]	; 0x35c
 80016a8:	2301      	movs	r3, #1
 80016aa:	4a48      	ldr	r2, [pc, #288]	; (80017cc <main+0x32c>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	9210      	str	r2, [sp, #64]	; 0x40
 80016b0:	a8d8      	add	r0, sp, #864	; 0x360
 80016b2:	461a      	mov	r2, r3
 80016b4:	f002 fa04 	bl	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80016b8:	2e00      	cmp	r6, #0
 80016ba:	f040 812c 	bne.w	8001916 <main+0x476>
 80016be:	1e23      	subs	r3, r4, #0
 80016c0:	bf18      	it	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80017d0 <main+0x330>
 80016c8:	4628      	mov	r0, r5
 80016ca:	f888 3000 	strb.w	r3, [r8]
 80016ce:	f002 fd55 	bl	800417c <RDMDeviceResponder::Print()>
 80016d2:	f898 1000 	ldrb.w	r1, [r8]
 80016d6:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <main+0x334>)
 80016d8:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <main+0x338>)
 80016da:	4840      	ldr	r0, [pc, #256]	; (80017dc <main+0x33c>)
 80016dc:	2900      	cmp	r1, #0
 80016de:	bf14      	ite	ne
 80016e0:	4611      	movne	r1, r2
 80016e2:	4619      	moveq	r1, r3
 80016e4:	f000 fe9a 	bl	800241c <printf>
 80016e8:	2e00      	cmp	r6, #0
 80016ea:	f040 8128 	bne.w	800193e <main+0x49e>
 80016ee:	a86a      	add	r0, sp, #424	; 0x1a8
 80016f0:	f004 f974 	bl	80059dc <WS28xxDmx::Print()>
 80016f4:	b13c      	cbz	r4, 8001706 <main+0x266>
 80016f6:	4620      	mov	r0, r4
 80016f8:	f004 fa50 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80016fc:	4622      	mov	r2, r4
 80016fe:	4601      	mov	r1, r0
 8001700:	4837      	ldr	r0, [pc, #220]	; (80017e0 <main+0x340>)
 8001702:	f000 fe8b 	bl	800241c <printf>
 8001706:	4937      	ldr	r1, [pc, #220]	; (80017e4 <main+0x344>)
 8001708:	a88f      	add	r0, sp, #572	; 0x23c
 800170a:	f005 fbed 	bl	8006ee8 <DisplayUdf::SetTitle(char const*, ...)>
 800170e:	2203      	movs	r2, #3
 8001710:	2102      	movs	r1, #2
 8001712:	a88f      	add	r0, sp, #572	; 0x23c
 8001714:	f005 fc50 	bl	8006fb8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8001718:	220d      	movs	r2, #13
 800171a:	2106      	movs	r1, #6
 800171c:	a88f      	add	r0, sp, #572	; 0x23c
 800171e:	f005 fc4b 	bl	8006fb8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8001722:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001724:	f004 fc82 	bl	800602c <PixelType::GetType(pixel::Type)>
 8001728:	4680      	mov	r8, r0
 800172a:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800172c:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
 8001730:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
 8001734:	f004 fc86 	bl	8006044 <PixelType::GetMap(pixel::Map)>
 8001738:	4643      	mov	r3, r8
 800173a:	2107      	movs	r1, #7
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <main+0x348>)
 800173e:	e9cd a001 	strd	sl, r0, [sp, #4]
 8001742:	f8cd 9000 	str.w	r9, [sp]
 8001746:	a88f      	add	r0, sp, #572	; 0x23c
 8001748:	f005 fcc7 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 800174c:	a811      	add	r0, sp, #68	; 0x44
 800174e:	f005 f87d 	bl	800684c <StoreDisplayUdf::StoreDisplayUdf()>
 8001752:	a911      	add	r1, sp, #68	; 0x44
 8001754:	a83b      	add	r0, sp, #236	; 0xec
 8001756:	f005 fc48 	bl	8006fea <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800175a:	a83b      	add	r0, sp, #236	; 0xec
 800175c:	f005 fc52 	bl	8007004 <DisplayUdfParams::Load()>
 8001760:	b130      	cbz	r0, 8001770 <main+0x2d0>
 8001762:	a83b      	add	r0, sp, #236	; 0xec
 8001764:	a98f      	add	r1, sp, #572	; 0x23c
 8001766:	f005 fc59 	bl	800701c <DisplayUdfParams::Set(DisplayUdf*)>
 800176a:	a83b      	add	r0, sp, #236	; 0xec
 800176c:	f005 fc89 	bl	8007082 <DisplayUdfParams::Dump()>
 8001770:	a88f      	add	r0, sp, #572	; 0x23c
 8001772:	f005 fbcd 	bl	8006f10 <DisplayUdf::Show()>
 8001776:	2e00      	cmp	r6, #0
 8001778:	f000 80cf 	beq.w	800191a <main+0x47a>
 800177c:	2103      	movs	r1, #3
 800177e:	9890      	ldr	r0, [sp, #576]	; 0x240
 8001780:	f7ff fe1b 	bl	80013ba <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001784:	2104      	movs	r1, #4
 8001786:	9890      	ldr	r0, [sp, #576]	; 0x240
 8001788:	f7ff fe17 	bl	80013ba <Display::ClearLine(unsigned char) [clone .isra.0]>
 800178c:	2104      	movs	r1, #4
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <main+0x34c>)
 8001790:	a88f      	add	r0, sp, #572	; 0x23c
 8001792:	e02d      	b.n	80017f0 <main+0x350>
 8001794:	08009702 	stmdaeq	r0, {r1, r8, r9, sl, ip, pc}
 8001798:	0800970b 	stmdaeq	r0, {r0, r1, r3, r8, r9, sl, ip, pc}
 800179c:	080097e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip, pc}
 80017a0:	080096a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, pc}
 80017a4:	080097c0 	stmdaeq	r0, {r6, r7, r8, r9, sl, ip, pc}
 80017a8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80017ac:	40010000 	andmi	r0, r1, r0
 80017b0:	40011000 	andmi	r1, r1, r0
 80017b4:	2000068c 	andcs	r0, r0, ip, lsl #13
 80017b8:	08009717 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, ip, pc}
 80017bc:	08009726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, pc}
 80017c0:	20000204 	andcs	r0, r0, r4, lsl #4
 80017c4:	08009794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, pc}
 80017c8:	200001f4 	strdcs	r0, [r0], -r4
 80017cc:	080097ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, pc}
 80017d0:	20000208 	andcs	r0, r0, r8, lsl #4
 80017d4:	080096f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, ip, pc}
 80017d8:	080096fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, pc}
 80017dc:	08009732 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, ip, pc}
 80017e0:	0800973e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, ip, pc}
 80017e4:	08009756 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, ip, pc}
 80017e8:	0800976c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip, pc}
 80017ec:	08009779 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, ip, pc}
 80017f0:	f005 fc8f 	bl	8007112 <Display::Write(unsigned char, char const*)>
 80017f4:	2105      	movs	r1, #5
 80017f6:	9890      	ldr	r0, [sp, #576]	; 0x240
 80017f8:	f7ff fddf 	bl	80013ba <Display::ClearLine(unsigned char) [clone .isra.0]>
 80017fc:	2102      	movs	r1, #2
 80017fe:	a825      	add	r0, sp, #148	; 0x94
 8001800:	f005 ffac 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 8001804:	2004      	movs	r0, #4
 8001806:	f006 fa06 	bl	8007c16 <operator new(unsigned int)>
 800180a:	4b58      	ldr	r3, [pc, #352]	; (800196c <main+0x4cc>)
 800180c:	9023      	str	r0, [sp, #140]	; 0x8c
 800180e:	6003      	str	r3, [r0, #0]
 8001810:	2102      	movs	r1, #2
 8001812:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001816:	f006 fdd7 	bl	80083c8 <fwdgt_config>
 800181a:	2801      	cmp	r0, #1
 800181c:	bf0c      	ite	eq
 800181e:	2301      	moveq	r3, #1
 8001820:	2300      	movne	r3, #0
 8001822:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8001826:	d101      	bne.n	800182c <main+0x38c>
 8001828:	f006 fdbe 	bl	80083a8 <fwdgt_enable>
 800182c:	4c50      	ldr	r4, [pc, #320]	; (8001970 <main+0x4d0>)
 800182e:	4e51      	ldr	r6, [pc, #324]	; (8001974 <main+0x4d4>)
 8001830:	f04f 0801 	mov.w	r8, #1
 8001834:	f006 fdc0 	bl	80083b8 <fwdgt_counter_reload>
 8001838:	4628      	mov	r0, r5
 800183a:	f000 fe95 	bl	8002568 <RDMResponder::Run()>
 800183e:	a807      	add	r0, sp, #28
 8001840:	f004 ff80 	bl	8006744 <SpiFlashStore::Flash()>
 8001844:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001846:	b17a      	cbz	r2, 8001868 <main+0x3c8>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800184c:	1a5b      	subs	r3, r3, r1
 800184e:	429a      	cmp	r2, r3
 8001850:	d80a      	bhi.n	8001868 <main+0x3c8>
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	932a      	str	r3, [sp, #168]	; 0xa8
 8001856:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001858:	2b01      	cmp	r3, #1
 800185a:	f083 0201 	eor.w	r2, r3, #1
 800185e:	9229      	str	r2, [sp, #164]	; 0xa4
 8001860:	bf14      	ite	ne
 8001862:	f8c7 8010 	strne.w	r8, [r7, #16]
 8001866:	617b      	streq	r3, [r7, #20]
 8001868:	a88f      	add	r0, sp, #572	; 0x23c
 800186a:	f005 fcd5 	bl	8007218 <Display::Run()>
 800186e:	6833      	ldr	r3, [r6, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0df      	beq.n	8001834 <main+0x394>
 8001874:	a808      	add	r0, sp, #32
 8001876:	f004 fbaf 	bl	8005fd8 <PixelPatterns::Run()>
 800187a:	e7d9      	b.n	8001830 <main+0x390>
 800187c:	2300      	movs	r3, #0
 800187e:	2264      	movs	r2, #100	; 0x64
 8001880:	4619      	mov	r1, r3
 8001882:	a808      	add	r0, sp, #32
 8001884:	f004 f996 	bl	8005bb4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001888:	e691      	b.n	80015ae <main+0x10e>
 800188a:	2200      	movs	r2, #0
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	4611      	mov	r1, r2
 8001890:	e9cd 3200 	strd	r3, r2, [sp]
 8001894:	a808      	add	r0, sp, #32
 8001896:	4b38      	ldr	r3, [pc, #224]	; (8001978 <main+0x4d8>)
 8001898:	f004 f9a0 	bl	8005bdc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800189c:	e687      	b.n	80015ae <main+0x10e>
 800189e:	2100      	movs	r1, #0
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	4a35      	ldr	r2, [pc, #212]	; (8001978 <main+0x4d8>)
 80018a4:	9100      	str	r1, [sp, #0]
 80018a6:	a808      	add	r0, sp, #32
 80018a8:	f004 f9b4 	bl	8005c14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80018ac:	e67f      	b.n	80015ae <main+0x10e>
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80018b4:	2100      	movs	r1, #0
 80018b6:	a808      	add	r0, sp, #32
 80018b8:	f004 f9c6 	bl	8005c48 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80018bc:	e677      	b.n	80015ae <main+0x10e>
 80018be:	2200      	movs	r2, #0
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80018c6:	230a      	movs	r3, #10
 80018c8:	4611      	mov	r1, r2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	a808      	add	r0, sp, #32
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <main+0x4d8>)
 80018d0:	f004 f9ec 	bl	8005cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80018d4:	e66b      	b.n	80015ae <main+0x10e>
 80018d6:	2500      	movs	r5, #0
 80018d8:	46aa      	mov	sl, r5
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <main+0x4dc>)
 80018dc:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8001980 <main+0x4e0>
 80018e0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001984 <main+0x4e4>
 80018e4:	61dd      	str	r5, [r3, #28]
 80018e6:	f8db 3000 	ldr.w	r3, [fp]
 80018ea:	42ab      	cmp	r3, r5
 80018ec:	d90a      	bls.n	8001904 <main+0x464>
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8cd a000 	str.w	sl, [sp]
 80018f4:	4629      	mov	r1, r5
 80018f6:	461a      	mov	r2, r3
 80018f8:	f8d9 0000 	ldr.w	r0, [r9]
 80018fc:	f004 fc4f 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001900:	3501      	adds	r5, #1
 8001902:	e7f0      	b.n	80018e6 <main+0x446>
 8001904:	f007 fbe6 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 8001908:	2800      	cmp	r0, #0
 800190a:	d1fb      	bne.n	8001904 <main+0x464>
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <main+0x4e4>)
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f004 fbd8 	bl	80060c4 <WS28xx::Update()>
 8001914:	e64b      	b.n	80015ae <main+0x10e>
 8001916:	2300      	movs	r3, #0
 8001918:	e6d4      	b.n	80016c4 <main+0x224>
 800191a:	2c00      	cmp	r4, #0
 800191c:	f43f af6e 	beq.w	80017fc <main+0x35c>
 8001920:	2106      	movs	r1, #6
 8001922:	9890      	ldr	r0, [sp, #576]	; 0x240
 8001924:	f7ff fd49 	bl	80013ba <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001928:	4620      	mov	r0, r4
 800192a:	f004 f937 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800192e:	2106      	movs	r1, #6
 8001930:	4603      	mov	r3, r0
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <main+0x4e8>)
 8001934:	9400      	str	r4, [sp, #0]
 8001936:	a88f      	add	r0, sp, #572	; 0x23c
 8001938:	f005 fbcf 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 800193c:	e75e      	b.n	80017fc <main+0x35c>
 800193e:	4813      	ldr	r0, [pc, #76]	; (800198c <main+0x4ec>)
 8001940:	f000 fda4 	bl	800248c <puts>
 8001944:	e6df      	b.n	8001706 <main+0x266>
 8001946:	2c05      	cmp	r4, #5
 8001948:	f63f ae31 	bhi.w	80015ae <main+0x10e>
 800194c:	a301      	add	r3, pc, #4	; (adr r3, 8001954 <main+0x4b4>)
 800194e:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001952:	bf00      	nop
 8001954:	080018d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, fp, ip}
 8001958:	0800187d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip}
 800195c:	0800188b 	stmdaeq	r0, {r0, r1, r3, r7, fp, ip}
 8001960:	0800189f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, fp, ip}
 8001964:	080018af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, fp, ip}
 8001968:	080018bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, fp, ip}
 800196c:	080097d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip, pc}
 8001970:	2000181c 	andcs	r1, r0, ip, lsl r8
 8001974:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001978:	00646464 	rsbeq	r6, r4, r4, ror #8
 800197c:	20000658 	andcs	r0, r0, r8, asr r6
 8001980:	20000680 	andcs	r0, r0, r0, lsl #13
 8001984:	20000684 	andcs	r0, r0, r4, lsl #13
 8001988:	08009785 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, ip, pc}
 800198c:	08009726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, ip, pc}

08001990 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001990:	b110      	cbz	r0, 8001998 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001992:	6803      	ldr	r3, [r0, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4718      	bx	r3
 8001998:	4770      	bx	lr
	...

0800199c <PixelDmxParamsRdm::Display(unsigned char const*)>:
 800199c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019a0:	4d22      	ldr	r5, [pc, #136]	; (8001a2c <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 80019a2:	7908      	ldrb	r0, [r1, #4]
 80019a4:	460c      	mov	r4, r1
 80019a6:	682e      	ldr	r6, [r5, #0]
 80019a8:	b085      	sub	sp, #20
 80019aa:	bb40      	cbnz	r0, 80019fe <PixelDmxParamsRdm::Display(unsigned char const*)+0x62>
 80019ac:	2106      	movs	r1, #6
 80019ae:	6870      	ldr	r0, [r6, #4]
 80019b0:	f7ff ffee 	bl	8001990 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80019b4:	7820      	ldrb	r0, [r4, #0]
 80019b6:	682f      	ldr	r7, [r5, #0]
 80019b8:	f004 fb38 	bl	800602c <PixelType::GetType(pixel::Type)>
 80019bc:	4606      	mov	r6, r0
 80019be:	78e0      	ldrb	r0, [r4, #3]
 80019c0:	f894 8001 	ldrb.w	r8, [r4, #1]
 80019c4:	f894 9002 	ldrb.w	r9, [r4, #2]
 80019c8:	f004 fb3c 	bl	8006044 <PixelType::GetMap(pixel::Map)>
 80019cc:	4633      	mov	r3, r6
 80019ce:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80019d2:	2107      	movs	r1, #7
 80019d4:	4638      	mov	r0, r7
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 80019d8:	f8cd 8000 	str.w	r8, [sp]
 80019dc:	f005 fb7d 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 80019e0:	7963      	ldrb	r3, [r4, #5]
 80019e2:	2bff      	cmp	r3, #255	; 0xff
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <PixelDmxParamsRdm::Display(unsigned char const*)+0x98>)
 80019e6:	d113      	bne.n	8001a10 <PixelDmxParamsRdm::Display(unsigned char const*)+0x74>
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	b9da      	cbnz	r2, 8001a24 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>
 80019ec:	2201      	movs	r2, #1
 80019ee:	4912      	ldr	r1, [pc, #72]	; (8001a38 <PixelDmxParamsRdm::Display(unsigned char const*)+0x9c>)
 80019f0:	6828      	ldr	r0, [r5, #0]
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	b005      	add	sp, #20
 80019f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019fa:	f005 bba3 	b.w	8007144 <Display::TextStatus(char const*)>
 80019fe:	f004 f8cd 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001a02:	2106      	movs	r1, #6
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <PixelDmxParamsRdm::Display(unsigned char const*)+0xa0>)
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f005 fb66 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8001a0e:	e7d1      	b.n	80019b4 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001a10:	2200      	movs	r2, #0
 8001a12:	2108      	movs	r1, #8
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	6858      	ldr	r0, [r3, #4]
 8001a1a:	b005      	add	sp, #20
 8001a1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a20:	f7ff bfb6 	b.w	8001990 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001a24:	b005      	add	sp, #20
 8001a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200016e8 	andcs	r1, r0, r8, ror #13
 8001a30:	080097ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, pc}
 8001a34:	200000e8 	andcs	r0, r0, r8, ror #1
 8001a38:	08009803 	stmdaeq	r0, {r0, r1, fp, ip, pc}
 8001a3c:	080097e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, ip, pc}

08001a40 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f005 ba64 	b.w	8006f10 <DisplayUdf::Show()>
 8001a48:	200016e8 	andcs	r1, r0, r8, ror #13

08001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001a4c:	b110      	cbz	r0, 8001a54 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4718      	bx	r3
 8001a54:	4770      	bx	lr
	...

08001a58 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8001a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a5c:	4c2b      	ldr	r4, [pc, #172]	; (8001b0c <RDMResponder::PersonalityUpdate(unsigned int)+0xb4>)
 8001a5e:	4f2c      	ldr	r7, [pc, #176]	; (8001b10 <RDMResponder::PersonalityUpdate(unsigned int)+0xb8>)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	b085      	sub	sp, #20
 8001a64:	6858      	ldr	r0, [r3, #4]
 8001a66:	460d      	mov	r5, r1
 8001a68:	2107      	movs	r1, #7
 8001a6a:	f7ff ffef 	bl	8001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f8d4 8000 	ldr.w	r8, [r4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f004 fad8 	bl	800602c <PixelType::GetType(pixel::Type)>
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	4606      	mov	r6, r0
 8001a80:	e9d2 3905 	ldrd	r3, r9, [r2, #20]
 8001a84:	fb03 f709 	mul.w	r7, r3, r9
 8001a88:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a8a:	6898      	ldr	r0, [r3, #8]
 8001a8c:	f004 fada 	bl	8006044 <PixelType::GetMap(pixel::Map)>
 8001a90:	4633      	mov	r3, r6
 8001a92:	2107      	movs	r1, #7
 8001a94:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <RDMResponder::PersonalityUpdate(unsigned int)+0xbc>)
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	9700      	str	r7, [sp, #0]
 8001a9e:	f005 fb1c 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8001aa2:	6820      	ldr	r0, [r4, #0]
 8001aa4:	f005 fa34 	bl	8006f10 <DisplayUdf::Show()>
 8001aa8:	2d01      	cmp	r5, #1
 8001aaa:	d115      	bne.n	8001ad8 <RDMResponder::PersonalityUpdate(unsigned int)+0x80>
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <RDMResponder::PersonalityUpdate(unsigned int)+0xc0>)
 8001aae:	681d      	ldr	r5, [r3, #0]
 8001ab0:	b17d      	cbz	r5, 8001ad2 <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	2106      	movs	r1, #6
 8001ab6:	6858      	ldr	r0, [r3, #4]
 8001ab8:	f7ff ffc8 	bl	8001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001abc:	4628      	mov	r0, r5
 8001abe:	6824      	ldr	r4, [r4, #0]
 8001ac0:	f004 f86c 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001ac4:	2106      	movs	r1, #6
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <RDMResponder::PersonalityUpdate(unsigned int)+0xc4>)
 8001aca:	4620      	mov	r0, r4
 8001acc:	9500      	str	r5, [sp, #0]
 8001ace:	f005 fb04 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8001ad2:	b005      	add	sp, #20
 8001ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ad8:	2d02      	cmp	r5, #2
 8001ada:	d1fa      	bne.n	8001ad2 <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	2103      	movs	r1, #3
 8001ae0:	6858      	ldr	r0, [r3, #4]
 8001ae2:	f7ff ffb3 	bl	8001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	2104      	movs	r1, #4
 8001aea:	6858      	ldr	r0, [r3, #4]
 8001aec:	f7ff ffae 	bl	8001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001af0:	2104      	movs	r1, #4
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <RDMResponder::PersonalityUpdate(unsigned int)+0xc8>)
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	f005 fb0c 	bl	8007112 <Display::Write(unsigned char, char const*)>
 8001afa:	2105      	movs	r1, #5
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	6858      	ldr	r0, [r3, #4]
 8001b00:	b005      	add	sp, #20
 8001b02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b06:	f7ff bfa1 	b.w	8001a4c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001b0a:	bf00      	nop
 8001b0c:	200016e8 	andcs	r1, r0, r8, ror #13
 8001b10:	20000654 	andcs	r0, r0, r4, asr r6
 8001b14:	0800976c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip, pc}
 8001b18:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001b1c:	08009785 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, ip, pc}
 8001b20:	08009779 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, ip, pc}

08001b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	2905      	cmp	r1, #5
 8001b28:	b085      	sub	sp, #20
 8001b2a:	dc4c      	bgt.n	8001bc6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 8001b2e:	6019      	str	r1, [r3, #0]
 8001b30:	2905      	cmp	r1, #5
 8001b32:	d809      	bhi.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001b34:	e8df f001 	tbb	[pc, r1]
 8001b38:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001b3c:	2300211a 	movwcs	r2, #282	; 0x11a
 8001b40:	2264      	movs	r2, #100	; 0x64
 8001b42:	4619      	mov	r1, r3
 8001b44:	f004 f836 	bl	8005bb4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e03d      	b.n	8001bc8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2364      	movs	r3, #100	; 0x64
 8001b50:	4611      	mov	r1, r2
 8001b52:	e9cd 3200 	strd	r3, r2, [sp]
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001b58:	f004 f840 	bl	8005bdc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b5c:	e7f4      	b.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2364      	movs	r3, #100	; 0x64
 8001b62:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f004 f855 	bl	8005c14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b6a:	e7ed      	b.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001b72:	2100      	movs	r1, #0
 8001b74:	f004 f868 	bl	8005c48 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001b78:	e7e6      	b.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b82:	230a      	movs	r3, #10
 8001b84:	4611      	mov	r1, r2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001b8a:	f004 f88f 	bl	8005cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b8e:	e7db      	b.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001b90:	2400      	movs	r4, #0
 8001b92:	4626      	mov	r6, r4
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb0>)
 8001b96:	4f10      	ldr	r7, [pc, #64]	; (8001bd8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 8001b98:	4d10      	ldr	r5, [pc, #64]	; (8001bdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8001b9a:	61dc      	str	r4, [r3, #28]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	42a3      	cmp	r3, r4
 8001ba0:	d908      	bls.n	8001bb4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6828      	ldr	r0, [r5, #0]
 8001baa:	9600      	str	r6, [sp, #0]
 8001bac:	f004 faf7 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001bb0:	3401      	adds	r4, #1
 8001bb2:	e7f3      	b.n	8001b9c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001bb4:	f007 fa8e 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d1fb      	bne.n	8001bb4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	f004 fa80 	bl	80060c4 <WS28xx::Update()>
 8001bc4:	e7c0      	b.n	8001b48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	b005      	add	sp, #20
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bcc:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001bd0:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001bd4:	20000658 	andcs	r0, r0, r8, asr r6
 8001bd8:	20000680 	andcs	r0, r0, r0, lsl #13
 8001bdc:	20000684 	andcs	r0, r0, r4, lsl #13

08001be0 <rdm::selftest::Get()>:
 8001be0:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <rdm::selftest::Get()+0x8>)
 8001be2:	7818      	ldrb	r0, [r3, #0]
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000068c 	andcs	r0, r0, ip, lsl #13

08001bec <rdm::selftest::Set(unsigned char)>:
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <rdm::selftest::Set(unsigned char)+0x54>)
 8001bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	f7ff ff95 	bl	8001b24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	b1b0      	cbz	r0, 8001c2c <rdm::selftest::Set(unsigned char)+0x40>
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <rdm::selftest::Set(unsigned char)+0x58>)
 8001c00:	b1bc      	cbz	r4, 8001c32 <rdm::selftest::Set(unsigned char)+0x46>
 8001c02:	2201      	movs	r2, #1
 8001c04:	4e10      	ldr	r6, [pc, #64]	; (8001c48 <rdm::selftest::Set(unsigned char)+0x5c>)
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	6858      	ldr	r0, [r3, #4]
 8001c0c:	b118      	cbz	r0, 8001c16 <rdm::selftest::Set(unsigned char)+0x2a>
 8001c0e:	6803      	ldr	r3, [r0, #0]
 8001c10:	2106      	movs	r1, #6
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4798      	blx	r3
 8001c16:	4620      	mov	r0, r4
 8001c18:	6836      	ldr	r6, [r6, #0]
 8001c1a:	f003 ffbf 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001c1e:	2106      	movs	r1, #6
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <rdm::selftest::Set(unsigned char)+0x60>)
 8001c24:	4630      	mov	r0, r6
 8001c26:	9400      	str	r4, [sp, #0]
 8001c28:	f005 fa57 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd70      	pop	{r4, r5, r6, pc}
 8001c32:	701c      	strb	r4, [r3, #0]
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <rdm::selftest::Set(unsigned char)+0x64>)
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	f005 f96a 	bl	8006f10 <DisplayUdf::Show()>
 8001c3c:	e7f6      	b.n	8001c2c <rdm::selftest::Set(unsigned char)+0x40>
 8001c3e:	bf00      	nop
 8001c40:	20000688 	andcs	r0, r0, r8, lsl #13
 8001c44:	20000208 	andcs	r0, r0, r8, lsl #4
 8001c48:	200016ec 	andcs	r1, r0, ip, ror #13
 8001c4c:	08009785 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, ip, pc}
 8001c50:	200016e8 	andcs	r1, r0, r8, ror #13

08001c54 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	460c      	mov	r4, r1
 8001c58:	f003 ffa0 	bl	8005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001c5c:	b140      	cbz	r0, 8001c70 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4613      	mov	r3, r2
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	3201      	adds	r2, #1
 8001c66:	2900      	cmp	r1, #0
 8001c68:	d1fa      	bne.n	8001c60 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001c6a:	1a1b      	subs	r3, r3, r0
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	e000      	b.n	8001c72 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1e>
 8001c70:	6020      	str	r0, [r4, #0]
 8001c72:	bd10      	pop	{r4, pc}

08001c74 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	2905      	cmp	r1, #5
 8001c78:	b085      	sub	sp, #20
 8001c7a:	dc18      	bgt.n	8001cae <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>)
 8001c7e:	6019      	str	r1, [r3, #0]
 8001c80:	2905      	cmp	r1, #5
 8001c82:	d814      	bhi.n	8001cae <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001c84:	e8df f001 	tbb	[pc, r1]
 8001c88:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001c8c:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001c90:	2264      	movs	r2, #100	; 0x64
 8001c92:	4619      	mov	r1, r3
 8001c94:	b005      	add	sp, #20
 8001c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001c9a:	f003 bf8b 	b.w	8005bb4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	e9cd 3200 	strd	r3, r2, [sp]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001caa:	f003 ff97 	bl	8005bdc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001cae:	b005      	add	sp, #20
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2364      	movs	r3, #100	; 0x64
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001cb8:	9100      	str	r1, [sp, #0]
 8001cba:	f003 ffab 	bl	8005c14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001cbe:	e7f6      	b.n	8001cae <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001cc0:	2364      	movs	r3, #100	; 0x64
 8001cc2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	b005      	add	sp, #20
 8001cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001cce:	f003 bfbb 	b.w	8005c48 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001cda:	230a      	movs	r3, #10
 8001cdc:	4611      	mov	r1, r2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001ce2:	f003 ffe3 	bl	8005cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001ce6:	e7e2      	b.n	8001cae <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001ce8:	2400      	movs	r4, #0
 8001cea:	4626      	mov	r6, r4
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb8>)
 8001cee:	4f10      	ldr	r7, [pc, #64]	; (8001d30 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xbc>)
 8001cf0:	4d10      	ldr	r5, [pc, #64]	; (8001d34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001cf2:	61dc      	str	r4, [r3, #28]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	42a3      	cmp	r3, r4
 8001cf8:	d908      	bls.n	8001d0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x98>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6828      	ldr	r0, [r5, #0]
 8001d02:	9600      	str	r6, [sp, #0]
 8001d04:	f004 fa4b 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001d08:	3401      	adds	r4, #1
 8001d0a:	e7f3      	b.n	8001cf4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001d0c:	f007 f9e2 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d1fb      	bne.n	8001d0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x98>
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	b005      	add	sp, #20
 8001d1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001d1e:	f004 b9d1 	b.w	80060c4 <WS28xx::Update()>
 8001d22:	bf00      	nop
 8001d24:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001d28:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001d2c:	20000658 	andcs	r0, r0, r8, asr r6
 8001d30:	20000680 	andcs	r0, r0, r0, lsl #13
 8001d34:	20000684 	andcs	r0, r0, r4, lsl #13

08001d38 <RDMIdentify::On(rdm::identify::Mode)>:
 8001d38:	29ff      	cmp	r1, #255	; 0xff
 8001d3a:	d10d      	bne.n	8001d58 <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <RDMIdentify::On(rdm::identify::Mode)+0x24>)
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	b952      	cbnz	r2, 8001d58 <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001d48:	2105      	movs	r1, #5
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	f7ff bf8e 	b.w	8001c74 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200000e9 	andcs	r0, r0, r9, ror #1
 8001d60:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001d64:	200000ec 	andcs	r0, r0, ip, ror #1
 8001d68:	20000688 	andcs	r0, r0, r8, lsl #13

08001d6c <RDMIdentify::Off(rdm::identify::Mode)>:
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <RDMIdentify::Off(rdm::identify::Mode)+0x18>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	b13a      	cbz	r2, 8001d82 <RDMIdentify::Off(rdm::identify::Mode)+0x16>
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <RDMIdentify::Off(rdm::identify::Mode)+0x1c>)
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <RDMIdentify::Off(rdm::identify::Mode)+0x20>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	f7ff bf79 	b.w	8001c74 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001d82:	4770      	bx	lr
 8001d84:	200000e9 	andcs	r0, r0, r9, ror #1
 8001d88:	200000ec 	andcs	r0, r0, ip, ror #1
 8001d8c:	20000688 	andcs	r0, r0, r8, lsl #13

08001d90 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001d90:	2805      	cmp	r0, #5
 8001d92:	d81c      	bhi.n	8001dce <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x3e>
 8001d94:	e8df f000 	tbb	[pc, r0]
 8001d98:	0f0b0703 	svceq	0x000b0703
 8001d9c:	23041713 	movwcs	r1, #18195	; 0x4713
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	4770      	bx	lr
 8001da6:	2305      	movs	r3, #5
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	4770      	bx	lr
 8001dae:	230e      	movs	r3, #14
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001db2:	600b      	str	r3, [r1, #0]
 8001db4:	4770      	bx	lr
 8001db6:	2303      	movs	r3, #3
 8001db8:	480a      	ldr	r0, [pc, #40]	; (8001de4 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	4770      	bx	lr
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x58>)
 8001dc2:	600b      	str	r3, [r1, #0]
 8001dc4:	4770      	bx	lr
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	4808      	ldr	r0, [pc, #32]	; (8001dec <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x5c>)
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	4770      	bx	lr
 8001dce:	2309      	movs	r3, #9
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x60>)
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	0800980e 	stmdaeq	r0, {r1, r2, r3, fp, ip, pc}
 8001ddc:	0800981c 	stmdaeq	r0, {r2, r3, r4, fp, ip, pc}
 8001de0:	08009813 	stmdaeq	r0, {r0, r1, r4, fp, ip, pc}
 8001de4:	08009822 	stmdaeq	r0, {r1, r5, fp, ip, pc}
 8001de8:	08009826 	stmdaeq	r0, {r1, r2, r5, fp, ip, pc}
 8001dec:	08009833 	stmdaeq	r0, {r0, r1, r4, r5, fp, ip, pc}
 8001df0:	0800983b 	stmdaeq	r0, {r0, r1, r3, r4, r5, fp, ip, pc}

08001df4 <RDMSoftwareVersion::GetVersion()>:
 8001df4:	4800      	ldr	r0, [pc, #0]	; (8001df8 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001df6:	4770      	bx	lr
 8001df8:	08009845 	stmdaeq	r0, {r0, r2, r6, fp, ip, pc}

08001dfc <RDMSoftwareVersion::GetVersionLength()>:
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	4770      	bx	lr

08001e00 <RDMSoftwareVersion::GetVersionId()>:
 8001e00:	4800      	ldr	r0, [pc, #0]	; (8001e04 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001e02:	4770      	bx	lr
 8001e04:	61d97c1b 	bicsvs	r7, r9, fp, lsl ip

08001e08 <_itostr>:
 8001e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0a:	0fc7      	lsrs	r7, r0, #31
 8001e0c:	b091      	sub	sp, #68	; 0x44
 8001e0e:	bf18      	it	ne
 8001e10:	4240      	negne	r0, r0
 8001e12:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8001e16:	b9c8      	cbnz	r0, 8001e4c <_itostr+0x44>
 8001e18:	2330      	movs	r3, #48	; 0x30
 8001e1a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001e1e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001e22:	b132      	cbz	r2, 8001e32 <_itostr+0x2a>
 8001e24:	4668      	mov	r0, sp
 8001e26:	2530      	movs	r5, #48	; 0x30
 8001e28:	1ae6      	subs	r6, r4, r3
 8001e2a:	4296      	cmp	r6, r2
 8001e2c:	da01      	bge.n	8001e32 <_itostr+0x2a>
 8001e2e:	4283      	cmp	r3, r0
 8001e30:	d81c      	bhi.n	8001e6c <_itostr+0x64>
 8001e32:	b117      	cbz	r7, 8001e3a <_itostr+0x32>
 8001e34:	222d      	movs	r2, #45	; 0x2d
 8001e36:	f803 2901 	strb.w	r2, [r3], #-1
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	1ae0      	subs	r0, r4, r3
 8001e3e:	3901      	subs	r1, #1
 8001e40:	aa10      	add	r2, sp, #64	; 0x40
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d315      	bcc.n	8001e72 <_itostr+0x6a>
 8001e46:	3001      	adds	r0, #1
 8001e48:	b011      	add	sp, #68	; 0x44
 8001e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	250a      	movs	r5, #10
 8001e50:	46ec      	mov	ip, sp
 8001e52:	fb90 f6f5 	sdiv	r6, r0, r5
 8001e56:	fb05 0016 	mls	r0, r5, r6, r0
 8001e5a:	3030      	adds	r0, #48	; 0x30
 8001e5c:	f803 0901 	strb.w	r0, [r3], #-1
 8001e60:	4630      	mov	r0, r6
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d0dd      	beq.n	8001e22 <_itostr+0x1a>
 8001e66:	4563      	cmp	r3, ip
 8001e68:	d1f3      	bne.n	8001e52 <_itostr+0x4a>
 8001e6a:	e7da      	b.n	8001e22 <_itostr+0x1a>
 8001e6c:	f803 5901 	strb.w	r5, [r3], #-1
 8001e70:	e7da      	b.n	8001e28 <_itostr+0x20>
 8001e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e76:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001e7a:	e7e1      	b.n	8001e40 <_itostr+0x38>

08001e7c <_xputch>:
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	b410      	push	{r4}
 8001e80:	4c08      	ldr	r4, [pc, #32]	; (8001ea4 <_xputch+0x28>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4608      	mov	r0, r1
 8001e86:	6821      	ldr	r1, [r4, #0]
 8001e88:	3201      	adds	r2, #1
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	b139      	cbz	r1, 8001e9e <_xputch+0x22>
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	da02      	bge.n	8001e9a <_xputch+0x1e>
 8001e94:	1c4b      	adds	r3, r1, #1
 8001e96:	6023      	str	r3, [r4, #0]
 8001e98:	7008      	strb	r0, [r1, #0]
 8001e9a:	bc10      	pop	{r4}
 8001e9c:	4770      	bx	lr
 8001e9e:	bc10      	pop	{r4}
 8001ea0:	f005 bbf8 	b.w	8007694 <console_putc>
 8001ea4:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001ea8 <_format_int>:
 8001ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eac:	461f      	mov	r7, r3
 8001eae:	b091      	sub	sp, #68	; 0x44
 8001eb0:	ea52 0307 	orrs.w	r3, r2, r7
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	4616      	mov	r6, r2
 8001eb8:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001ebc:	d138      	bne.n	8001f30 <_format_int+0x88>
 8001ebe:	2330      	movs	r3, #48	; 0x30
 8001ec0:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001ec4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8001ecc:	07d8      	lsls	r0, r3, #31
 8001ece:	d508      	bpl.n	8001ee2 <_format_int+0x3a>
 8001ed0:	466a      	mov	r2, sp
 8001ed2:	2030      	movs	r0, #48	; 0x30
 8001ed4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001ed8:	1b2e      	subs	r6, r5, r4
 8001eda:	428e      	cmp	r6, r1
 8001edc:	da01      	bge.n	8001ee2 <_format_int+0x3a>
 8001ede:	4294      	cmp	r4, r2
 8001ee0:	d843      	bhi.n	8001f6a <_format_int+0xc2>
 8001ee2:	0699      	lsls	r1, r3, #26
 8001ee4:	d508      	bpl.n	8001ef8 <_format_int+0x50>
 8001ee6:	466a      	mov	r2, sp
 8001ee8:	2030      	movs	r0, #48	; 0x30
 8001eea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001eee:	1b2e      	subs	r6, r5, r4
 8001ef0:	428e      	cmp	r6, r1
 8001ef2:	da01      	bge.n	8001ef8 <_format_int+0x50>
 8001ef4:	4294      	cmp	r4, r2
 8001ef6:	d83b      	bhi.n	8001f70 <_format_int+0xc8>
 8001ef8:	071a      	lsls	r2, r3, #28
 8001efa:	bf44      	itt	mi
 8001efc:	222d      	movmi	r2, #45	; 0x2d
 8001efe:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001f02:	065b      	lsls	r3, r3, #25
 8001f04:	d408      	bmi.n	8001f18 <_format_int+0x70>
 8001f06:	466b      	mov	r3, sp
 8001f08:	2120      	movs	r1, #32
 8001f0a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001f0e:	1b28      	subs	r0, r5, r4
 8001f10:	4290      	cmp	r0, r2
 8001f12:	da01      	bge.n	8001f18 <_format_int+0x70>
 8001f14:	429c      	cmp	r4, r3
 8001f16:	d82e      	bhi.n	8001f76 <_format_int+0xce>
 8001f18:	1b2d      	subs	r5, r5, r4
 8001f1a:	3401      	adds	r4, #1
 8001f1c:	ab10      	add	r3, sp, #64	; 0x40
 8001f1e:	429c      	cmp	r4, r3
 8001f20:	d32c      	bcc.n	8001f7c <_format_int+0xd4>
 8001f22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f26:	42ab      	cmp	r3, r5
 8001f28:	dc2e      	bgt.n	8001f88 <_format_int+0xe0>
 8001f2a:	b011      	add	sp, #68	; 0x44
 8001f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f30:	462c      	mov	r4, r5
 8001f32:	46eb      	mov	fp, sp
 8001f34:	4630      	mov	r0, r6
 8001f36:	4639      	mov	r1, r7
 8001f38:	220a      	movs	r2, #10
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f7fe faf2 	bl	8000524 <__aeabi_uldivmod>
 8001f40:	46b2      	mov	sl, r6
 8001f42:	3230      	adds	r2, #48	; 0x30
 8001f44:	46b9      	mov	r9, r7
 8001f46:	2300      	movs	r3, #0
 8001f48:	4630      	mov	r0, r6
 8001f4a:	4639      	mov	r1, r7
 8001f4c:	f804 2901 	strb.w	r2, [r4], #-1
 8001f50:	220a      	movs	r2, #10
 8001f52:	f7fe fae7 	bl	8000524 <__aeabi_uldivmod>
 8001f56:	f1ba 0f0a 	cmp.w	sl, #10
 8001f5a:	f179 0300 	sbcs.w	r3, r9, #0
 8001f5e:	4606      	mov	r6, r0
 8001f60:	460f      	mov	r7, r1
 8001f62:	d3b1      	bcc.n	8001ec8 <_format_int+0x20>
 8001f64:	455c      	cmp	r4, fp
 8001f66:	d1e5      	bne.n	8001f34 <_format_int+0x8c>
 8001f68:	e7ae      	b.n	8001ec8 <_format_int+0x20>
 8001f6a:	f804 0901 	strb.w	r0, [r4], #-1
 8001f6e:	e7b3      	b.n	8001ed8 <_format_int+0x30>
 8001f70:	f804 0901 	strb.w	r0, [r4], #-1
 8001f74:	e7bb      	b.n	8001eee <_format_int+0x46>
 8001f76:	f804 1901 	strb.w	r1, [r4], #-1
 8001f7a:	e7c8      	b.n	8001f0e <_format_int+0x66>
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f82:	f7ff ff7b 	bl	8001e7c <_xputch>
 8001f86:	e7c9      	b.n	8001f1c <_format_int+0x74>
 8001f88:	2120      	movs	r1, #32
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	f7ff ff76 	bl	8001e7c <_xputch>
 8001f90:	3501      	adds	r5, #1
 8001f92:	e7c6      	b.n	8001f22 <_format_int+0x7a>

08001f94 <_format_hex>:
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b091      	sub	sp, #68	; 0x44
 8001f98:	4606      	mov	r6, r0
 8001f9a:	6804      	ldr	r4, [r0, #0]
 8001f9c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001fa0:	bb61      	cbnz	r1, 8001ffc <_format_hex+0x68>
 8001fa2:	2330      	movs	r3, #48	; 0x30
 8001fa4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001fa8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001fac:	07e5      	lsls	r5, r4, #31
 8001fae:	d507      	bpl.n	8001fc0 <_format_hex+0x2c>
 8001fb0:	4669      	mov	r1, sp
 8001fb2:	2530      	movs	r5, #48	; 0x30
 8001fb4:	6870      	ldr	r0, [r6, #4]
 8001fb6:	1ad7      	subs	r7, r2, r3
 8001fb8:	4287      	cmp	r7, r0
 8001fba:	da01      	bge.n	8001fc0 <_format_hex+0x2c>
 8001fbc:	428b      	cmp	r3, r1
 8001fbe:	d831      	bhi.n	8002024 <_format_hex+0x90>
 8001fc0:	06a0      	lsls	r0, r4, #26
 8001fc2:	d507      	bpl.n	8001fd4 <_format_hex+0x40>
 8001fc4:	4669      	mov	r1, sp
 8001fc6:	2530      	movs	r5, #48	; 0x30
 8001fc8:	68b0      	ldr	r0, [r6, #8]
 8001fca:	1ad7      	subs	r7, r2, r3
 8001fcc:	4287      	cmp	r7, r0
 8001fce:	da01      	bge.n	8001fd4 <_format_hex+0x40>
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	d82a      	bhi.n	800202a <_format_hex+0x96>
 8001fd4:	0661      	lsls	r1, r4, #25
 8001fd6:	d407      	bmi.n	8001fe8 <_format_hex+0x54>
 8001fd8:	4669      	mov	r1, sp
 8001fda:	2420      	movs	r4, #32
 8001fdc:	68b0      	ldr	r0, [r6, #8]
 8001fde:	1ad5      	subs	r5, r2, r3
 8001fe0:	4285      	cmp	r5, r0
 8001fe2:	da01      	bge.n	8001fe8 <_format_hex+0x54>
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d823      	bhi.n	8002030 <_format_hex+0x9c>
 8001fe8:	1ad5      	subs	r5, r2, r3
 8001fea:	1c5c      	adds	r4, r3, #1
 8001fec:	ab10      	add	r3, sp, #64	; 0x40
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	d321      	bcc.n	8002036 <_format_hex+0xa2>
 8001ff2:	68b3      	ldr	r3, [r6, #8]
 8001ff4:	429d      	cmp	r5, r3
 8001ff6:	db24      	blt.n	8002042 <_format_hex+0xae>
 8001ff8:	b011      	add	sp, #68	; 0x44
 8001ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffc:	f014 0f02 	tst.w	r4, #2
 8002000:	bf0c      	ite	eq
 8002002:	2757      	moveq	r7, #87	; 0x57
 8002004:	2737      	movne	r7, #55	; 0x37
 8002006:	4613      	mov	r3, r2
 8002008:	466d      	mov	r5, sp
 800200a:	f001 000f 	and.w	r0, r1, #15
 800200e:	2809      	cmp	r0, #9
 8002010:	bf94      	ite	ls
 8002012:	3030      	addls	r0, #48	; 0x30
 8002014:	19c0      	addhi	r0, r0, r7
 8002016:	0909      	lsrs	r1, r1, #4
 8002018:	f803 0901 	strb.w	r0, [r3], #-1
 800201c:	d0c6      	beq.n	8001fac <_format_hex+0x18>
 800201e:	42ab      	cmp	r3, r5
 8002020:	d1f3      	bne.n	800200a <_format_hex+0x76>
 8002022:	e7c3      	b.n	8001fac <_format_hex+0x18>
 8002024:	f803 5901 	strb.w	r5, [r3], #-1
 8002028:	e7c5      	b.n	8001fb6 <_format_hex+0x22>
 800202a:	f803 5901 	strb.w	r5, [r3], #-1
 800202e:	e7cc      	b.n	8001fca <_format_hex+0x36>
 8002030:	f803 4901 	strb.w	r4, [r3], #-1
 8002034:	e7d3      	b.n	8001fde <_format_hex+0x4a>
 8002036:	4630      	mov	r0, r6
 8002038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800203c:	f7ff ff1e 	bl	8001e7c <_xputch>
 8002040:	e7d4      	b.n	8001fec <_format_hex+0x58>
 8002042:	2120      	movs	r1, #32
 8002044:	4630      	mov	r0, r6
 8002046:	f7ff ff19 	bl	8001e7c <_xputch>
 800204a:	3501      	adds	r5, #1
 800204c:	e7d1      	b.n	8001ff2 <_format_hex+0x5e>
	...

08002050 <_vprintf>:
 8002050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002054:	4614      	mov	r4, r2
 8002056:	2200      	movs	r2, #0
 8002058:	460b      	mov	r3, r1
 800205a:	2700      	movs	r7, #0
 800205c:	b099      	sub	sp, #100	; 0x64
 800205e:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8002062:	ae08      	add	r6, sp, #32
 8002064:	7819      	ldrb	r1, [r3, #0]
 8002066:	b919      	cbnz	r1, 8002070 <_vprintf+0x20>
 8002068:	9806      	ldr	r0, [sp, #24]
 800206a:	b019      	add	sp, #100	; 0x64
 800206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002070:	2925      	cmp	r1, #37	; 0x25
 8002072:	f103 0501 	add.w	r5, r3, #1
 8002076:	d004      	beq.n	8002082 <_vprintf+0x32>
 8002078:	a803      	add	r0, sp, #12
 800207a:	f7ff feff 	bl	8001e7c <_xputch>
 800207e:	462b      	mov	r3, r5
 8002080:	e7f0      	b.n	8002064 <_vprintf+0x14>
 8002082:	2200      	movs	r2, #0
 8002084:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8002088:	9205      	str	r2, [sp, #20]
 800208a:	785a      	ldrb	r2, [r3, #1]
 800208c:	2a30      	cmp	r2, #48	; 0x30
 800208e:	d12b      	bne.n	80020e8 <_vprintf+0x98>
 8002090:	2220      	movs	r2, #32
 8002092:	9203      	str	r2, [sp, #12]
 8002094:	1c9d      	adds	r5, r3, #2
 8002096:	2200      	movs	r2, #0
 8002098:	46ac      	mov	ip, r5
 800209a:	4613      	mov	r3, r2
 800209c:	f04f 0e0a 	mov.w	lr, #10
 80020a0:	f89c 1000 	ldrb.w	r1, [ip]
 80020a4:	4665      	mov	r5, ip
 80020a6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80020aa:	2809      	cmp	r0, #9
 80020ac:	f10c 0c01 	add.w	ip, ip, #1
 80020b0:	d91e      	bls.n	80020f0 <_vprintf+0xa0>
 80020b2:	b12a      	cbz	r2, 80020c0 <_vprintf+0x70>
 80020b4:	9305      	str	r3, [sp, #20]
 80020b6:	b11b      	cbz	r3, 80020c0 <_vprintf+0x70>
 80020b8:	9b03      	ldr	r3, [sp, #12]
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	292e      	cmp	r1, #46	; 0x2e
 80020c2:	d124      	bne.n	800210e <_vprintf+0xbe>
 80020c4:	786b      	ldrb	r3, [r5, #1]
 80020c6:	2b2a      	cmp	r3, #42	; 0x2a
 80020c8:	d016      	beq.n	80020f8 <_vprintf+0xa8>
 80020ca:	2100      	movs	r1, #0
 80020cc:	f04f 0c0a 	mov.w	ip, #10
 80020d0:	460a      	mov	r2, r1
 80020d2:	1c68      	adds	r0, r5, #1
 80020d4:	7803      	ldrb	r3, [r0, #0]
 80020d6:	4605      	mov	r5, r0
 80020d8:	3b30      	subs	r3, #48	; 0x30
 80020da:	2b09      	cmp	r3, #9
 80020dc:	f100 0001 	add.w	r0, r0, #1
 80020e0:	d958      	bls.n	8002194 <_vprintf+0x144>
 80020e2:	b181      	cbz	r1, 8002106 <_vprintf+0xb6>
 80020e4:	9204      	str	r2, [sp, #16]
 80020e6:	e00e      	b.n	8002106 <_vprintf+0xb6>
 80020e8:	2a2d      	cmp	r2, #45	; 0x2d
 80020ea:	d1d4      	bne.n	8002096 <_vprintf+0x46>
 80020ec:	2240      	movs	r2, #64	; 0x40
 80020ee:	e7d0      	b.n	8002092 <_vprintf+0x42>
 80020f0:	2201      	movs	r2, #1
 80020f2:	fb0e 0303 	mla	r3, lr, r3, r0
 80020f6:	e7d3      	b.n	80020a0 <_vprintf+0x50>
 80020f8:	f854 3b04 	ldr.w	r3, [r4], #4
 80020fc:	3502      	adds	r5, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bfb8      	it	lt
 8002102:	425b      	neglt	r3, r3
 8002104:	9304      	str	r3, [sp, #16]
 8002106:	9b03      	ldr	r3, [sp, #12]
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	9303      	str	r3, [sp, #12]
 800210e:	782b      	ldrb	r3, [r5, #0]
 8002110:	2b6c      	cmp	r3, #108	; 0x6c
 8002112:	bf04      	itt	eq
 8002114:	9b03      	ldreq	r3, [sp, #12]
 8002116:	3501      	addeq	r5, #1
 8002118:	7829      	ldrb	r1, [r5, #0]
 800211a:	bf04      	itt	eq
 800211c:	f043 0304 	orreq.w	r3, r3, #4
 8002120:	9303      	streq	r3, [sp, #12]
 8002122:	2958      	cmp	r1, #88	; 0x58
 8002124:	f000 8173 	beq.w	800240e <_vprintf+0x3be>
 8002128:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800212c:	b2da      	uxtb	r2, r3
 800212e:	2a15      	cmp	r2, #21
 8002130:	d8a2      	bhi.n	8002078 <_vprintf+0x28>
 8002132:	2b15      	cmp	r3, #21
 8002134:	d8a0      	bhi.n	8002078 <_vprintf+0x28>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <_vprintf+0xec>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800219d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sp}
 8002140:	080021ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sp}
 8002144:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002148:	080021df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, sp}
 800214c:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002150:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002154:	080021ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sp}
 8002158:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 800215c:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002160:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002164:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002168:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 800216c:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002170:	08002351 	stmdaeq	r0, {r0, r4, r6, r8, r9, sp}
 8002174:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002178:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 800217c:	08002377 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, r9, sp}
 8002180:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002184:	080023f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sp}
 8002188:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 800218c:	08002079 	stmdaeq	r0, {r0, r3, r4, r5, r6, sp}
 8002190:	08002417 	stmdaeq	r0, {r0, r1, r2, r4, sl, sp}
 8002194:	2101      	movs	r1, #1
 8002196:	fb0c 3202 	mla	r2, ip, r2, r3
 800219a:	e79b      	b.n	80020d4 <_vprintf+0x84>
 800219c:	f854 1b04 	ldr.w	r1, [r4], #4
 80021a0:	a803      	add	r0, sp, #12
 80021a2:	f7ff fe6b 	bl	8001e7c <_xputch>
 80021a6:	3501      	adds	r5, #1
 80021a8:	e769      	b.n	800207e <_vprintf+0x2e>
 80021aa:	9903      	ldr	r1, [sp, #12]
 80021ac:	074a      	lsls	r2, r1, #29
 80021ae:	bf43      	ittte	mi
 80021b0:	3407      	addmi	r4, #7
 80021b2:	f024 0307 	bicmi.w	r3, r4, #7
 80021b6:	461c      	movmi	r4, r3
 80021b8:	f854 2b04 	ldrpl.w	r2, [r4], #4
 80021bc:	bf4a      	itet	mi
 80021be:	685b      	ldrmi	r3, [r3, #4]
 80021c0:	17d3      	asrpl	r3, r2, #31
 80021c2:	f854 2b08 	ldrmi.w	r2, [r4], #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da05      	bge.n	80021d6 <_vprintf+0x186>
 80021ca:	f041 0108 	orr.w	r1, r1, #8
 80021ce:	4252      	negs	r2, r2
 80021d0:	9103      	str	r1, [sp, #12]
 80021d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80021d6:	a803      	add	r0, sp, #12
 80021d8:	f7ff fe66 	bl	8001ea8 <_format_int>
 80021dc:	e7e3      	b.n	80021a6 <_vprintf+0x156>
 80021de:	3407      	adds	r4, #7
 80021e0:	f024 0407 	bic.w	r4, r4, #7
 80021e4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80021e8:	f7fd ffa2 	bl	8000130 <__aeabi_d2f>
 80021ec:	9b03      	ldr	r3, [sp, #12]
 80021ee:	4639      	mov	r1, r7
 80021f0:	07db      	lsls	r3, r3, #31
 80021f2:	bf54      	ite	pl
 80021f4:	f04f 0a06 	movpl.w	sl, #6
 80021f8:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 80021fc:	4681      	mov	r9, r0
 80021fe:	f7fe f943 	bl	8000488 <__aeabi_fcmplt>
 8002202:	2800      	cmp	r0, #0
 8002204:	d069      	beq.n	80022da <_vprintf+0x28a>
 8002206:	232d      	movs	r3, #45	; 0x2d
 8002208:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800220c:	f88d 3020 	strb.w	r3, [sp, #32]
 8002210:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8002214:	4648      	mov	r0, r9
 8002216:	f7fe f95f 	bl	80004d8 <__aeabi_f2iz>
 800221a:	4659      	mov	r1, fp
 800221c:	2200      	movs	r2, #0
 800221e:	4680      	mov	r8, r0
 8002220:	f7ff fdf2 	bl	8001e08 <_itostr>
 8002224:	eb0b 0200 	add.w	r2, fp, r0
 8002228:	e9cd 2000 	strd	r2, r0, [sp]
 800222c:	4640      	mov	r0, r8
 800222e:	f7fe f889 	bl	8000344 <__aeabi_i2f>
 8002232:	4601      	mov	r1, r0
 8002234:	4648      	mov	r0, r9
 8002236:	f7fd ffcf 	bl	80001d8 <__aeabi_fsub>
 800223a:	222e      	movs	r2, #46	; 0x2e
 800223c:	4601      	mov	r1, r0
 800223e:	200a      	movs	r0, #10
 8002240:	9b00      	ldr	r3, [sp, #0]
 8002242:	f10a 0901 	add.w	r9, sl, #1
 8002246:	f103 0801 	add.w	r8, r3, #1
 800224a:	9b01      	ldr	r3, [sp, #4]
 800224c:	f80b 2003 	strb.w	r2, [fp, r3]
 8002250:	4603      	mov	r3, r0
 8002252:	f1ba 0f00 	cmp.w	sl, #0
 8002256:	dc42      	bgt.n	80022de <_vprintf+0x28e>
 8002258:	9100      	str	r1, [sp, #0]
 800225a:	f7fe f873 	bl	8000344 <__aeabi_i2f>
 800225e:	9900      	ldr	r1, [sp, #0]
 8002260:	f7fe feb2 	bl	8000fc8 <__aeabi_fmul>
 8002264:	f7fe f938 	bl	80004d8 <__aeabi_f2iz>
 8002268:	4641      	mov	r1, r8
 800226a:	464a      	mov	r2, r9
 800226c:	f7ff fdcc 	bl	8001e08 <_itostr>
 8002270:	4480      	add	r8, r0
 8002272:	eba8 0806 	sub.w	r8, r8, r6
 8002276:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800227a:	5c73      	ldrb	r3, [r6, r1]
 800227c:	1872      	adds	r2, r6, r1
 800227e:	2b34      	cmp	r3, #52	; 0x34
 8002280:	d910      	bls.n	80022a4 <_vprintf+0x254>
 8002282:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8002286:	1e53      	subs	r3, r2, #1
 8002288:	282e      	cmp	r0, #46	; 0x2e
 800228a:	d02f      	beq.n	80022ec <_vprintf+0x29c>
 800228c:	469c      	mov	ip, r3
 800228e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002292:	4663      	mov	r3, ip
 8002294:	f81c 0901 	ldrb.w	r0, [ip], #-1
 8002298:	2839      	cmp	r0, #57	; 0x39
 800229a:	d024      	beq.n	80022e6 <_vprintf+0x296>
 800229c:	282e      	cmp	r0, #46	; 0x2e
 800229e:	d025      	beq.n	80022ec <_vprintf+0x29c>
 80022a0:	3001      	adds	r0, #1
 80022a2:	7018      	strb	r0, [r3, #0]
 80022a4:	f101 0360 	add.w	r3, r1, #96	; 0x60
 80022a8:	446b      	add	r3, sp
 80022aa:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80022ae:	2b2e      	cmp	r3, #46	; 0x2e
 80022b0:	bf08      	it	eq
 80022b2:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 80022b6:	4688      	mov	r8, r1
 80022b8:	4689      	mov	r9, r1
 80022ba:	9b05      	ldr	r3, [sp, #20]
 80022bc:	454b      	cmp	r3, r9
 80022be:	dc40      	bgt.n	8002342 <_vprintf+0x2f2>
 80022c0:	46b1      	mov	r9, r6
 80022c2:	f1b8 0f00 	cmp.w	r8, #0
 80022c6:	f77f af6e 	ble.w	80021a6 <_vprintf+0x156>
 80022ca:	f819 1b01 	ldrb.w	r1, [r9], #1
 80022ce:	a803      	add	r0, sp, #12
 80022d0:	f7ff fdd4 	bl	8001e7c <_xputch>
 80022d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80022d8:	e7f3      	b.n	80022c2 <_vprintf+0x272>
 80022da:	46b3      	mov	fp, r6
 80022dc:	e79a      	b.n	8002214 <_vprintf+0x1c4>
 80022de:	4358      	muls	r0, r3
 80022e0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80022e4:	e7b5      	b.n	8002252 <_vprintf+0x202>
 80022e6:	f88c e001 	strb.w	lr, [ip, #1]
 80022ea:	e7d2      	b.n	8002292 <_vprintf+0x242>
 80022ec:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80022f0:	3b01      	subs	r3, #1
 80022f2:	7818      	ldrb	r0, [r3, #0]
 80022f4:	2839      	cmp	r0, #57	; 0x39
 80022f6:	d112      	bne.n	800231e <_vprintf+0x2ce>
 80022f8:	42b3      	cmp	r3, r6
 80022fa:	d20d      	bcs.n	8002318 <_vprintf+0x2c8>
 80022fc:	1c98      	adds	r0, r3, #2
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	4281      	cmp	r1, r0
 8002302:	eba2 0203 	sub.w	r2, r2, r3
 8002306:	d913      	bls.n	8002330 <_vprintf+0x2e0>
 8002308:	3201      	adds	r2, #1
 800230a:	441a      	add	r2, r3
 800230c:	428a      	cmp	r2, r1
 800230e:	d10b      	bne.n	8002328 <_vprintf+0x2d8>
 8002310:	2231      	movs	r2, #49	; 0x31
 8002312:	4641      	mov	r1, r8
 8002314:	705a      	strb	r2, [r3, #1]
 8002316:	e7c5      	b.n	80022a4 <_vprintf+0x254>
 8002318:	f803 c901 	strb.w	ip, [r3], #-1
 800231c:	e7e9      	b.n	80022f2 <_vprintf+0x2a2>
 800231e:	42b3      	cmp	r3, r6
 8002320:	d3ec      	bcc.n	80022fc <_vprintf+0x2ac>
 8002322:	282d      	cmp	r0, #45	; 0x2d
 8002324:	d0ea      	beq.n	80022fc <_vprintf+0x2ac>
 8002326:	e7bb      	b.n	80022a0 <_vprintf+0x250>
 8002328:	f811 0b01 	ldrb.w	r0, [r1], #1
 800232c:	7008      	strb	r0, [r1, #0]
 800232e:	e7ed      	b.n	800230c <_vprintf+0x2bc>
 8002330:	4411      	add	r1, r2
 8002332:	4402      	add	r2, r0
 8002334:	4290      	cmp	r0, r2
 8002336:	d0eb      	beq.n	8002310 <_vprintf+0x2c0>
 8002338:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 800233c:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002340:	e7f8      	b.n	8002334 <_vprintf+0x2e4>
 8002342:	2120      	movs	r1, #32
 8002344:	a803      	add	r0, sp, #12
 8002346:	f7ff fd99 	bl	8001e7c <_xputch>
 800234a:	f109 0901 	add.w	r9, r9, #1
 800234e:	e7b4      	b.n	80022ba <_vprintf+0x26a>
 8002350:	2308      	movs	r3, #8
 8002352:	9305      	str	r3, [sp, #20]
 8002354:	2320      	movs	r3, #32
 8002356:	2130      	movs	r1, #48	; 0x30
 8002358:	f854 8b04 	ldr.w	r8, [r4], #4
 800235c:	a803      	add	r0, sp, #12
 800235e:	9303      	str	r3, [sp, #12]
 8002360:	f7ff fd8c 	bl	8001e7c <_xputch>
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	a803      	add	r0, sp, #12
 8002368:	f7ff fd88 	bl	8001e7c <_xputch>
 800236c:	4641      	mov	r1, r8
 800236e:	a803      	add	r0, sp, #12
 8002370:	f7ff fe10 	bl	8001f94 <_format_hex>
 8002374:	e717      	b.n	80021a6 <_vprintf+0x156>
 8002376:	f04f 0800 	mov.w	r8, #0
 800237a:	f854 9b04 	ldr.w	r9, [r4], #4
 800237e:	f819 3008 	ldrb.w	r3, [r9, r8]
 8002382:	b993      	cbnz	r3, 80023aa <_vprintf+0x35a>
 8002384:	9b03      	ldr	r3, [sp, #12]
 8002386:	07d9      	lsls	r1, r3, #31
 8002388:	d503      	bpl.n	8002392 <_vprintf+0x342>
 800238a:	9b04      	ldr	r3, [sp, #16]
 800238c:	4598      	cmp	r8, r3
 800238e:	bfa8      	it	ge
 8002390:	4698      	movge	r8, r3
 8002392:	9b03      	ldr	r3, [sp, #12]
 8002394:	f108 0a01 	add.w	sl, r8, #1
 8002398:	065a      	lsls	r2, r3, #25
 800239a:	d403      	bmi.n	80023a4 <_vprintf+0x354>
 800239c:	9b05      	ldr	r3, [sp, #20]
 800239e:	4598      	cmp	r8, r3
 80023a0:	db06      	blt.n	80023b0 <_vprintf+0x360>
 80023a2:	46d0      	mov	r8, sl
 80023a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80023a8:	e00e      	b.n	80023c8 <_vprintf+0x378>
 80023aa:	f108 0801 	add.w	r8, r8, #1
 80023ae:	e7e6      	b.n	800237e <_vprintf+0x32e>
 80023b0:	2120      	movs	r1, #32
 80023b2:	a803      	add	r0, sp, #12
 80023b4:	f7ff fd62 	bl	8001e7c <_xputch>
 80023b8:	46d0      	mov	r8, sl
 80023ba:	e7ea      	b.n	8002392 <_vprintf+0x342>
 80023bc:	a803      	add	r0, sp, #12
 80023be:	f7ff fd5d 	bl	8001e7c <_xputch>
 80023c2:	9b04      	ldr	r3, [sp, #16]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	9304      	str	r3, [sp, #16]
 80023c8:	9b03      	ldr	r3, [sp, #12]
 80023ca:	07db      	lsls	r3, r3, #31
 80023cc:	d501      	bpl.n	80023d2 <_vprintf+0x382>
 80023ce:	9b04      	ldr	r3, [sp, #16]
 80023d0:	b11b      	cbz	r3, 80023da <_vprintf+0x38a>
 80023d2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80023d6:	2900      	cmp	r1, #0
 80023d8:	d1f0      	bne.n	80023bc <_vprintf+0x36c>
 80023da:	9b05      	ldr	r3, [sp, #20]
 80023dc:	4543      	cmp	r3, r8
 80023de:	f77f aee2 	ble.w	80021a6 <_vprintf+0x156>
 80023e2:	2120      	movs	r1, #32
 80023e4:	a803      	add	r0, sp, #12
 80023e6:	f7ff fd49 	bl	8001e7c <_xputch>
 80023ea:	f108 0801 	add.w	r8, r8, #1
 80023ee:	e7f4      	b.n	80023da <_vprintf+0x38a>
 80023f0:	9b03      	ldr	r3, [sp, #12]
 80023f2:	f013 0304 	ands.w	r3, r3, #4
 80023f6:	bf1d      	ittte	ne
 80023f8:	3407      	addne	r4, #7
 80023fa:	f024 0307 	bicne.w	r3, r4, #7
 80023fe:	461c      	movne	r4, r3
 8002400:	f854 2b04 	ldreq.w	r2, [r4], #4
 8002404:	bf1c      	itt	ne
 8002406:	f854 2b08 	ldrne.w	r2, [r4], #8
 800240a:	685b      	ldrne	r3, [r3, #4]
 800240c:	e6e3      	b.n	80021d6 <_vprintf+0x186>
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	f854 1b04 	ldr.w	r1, [r4], #4
 800241a:	e7a8      	b.n	800236e <_vprintf+0x31e>

0800241c <printf>:
 800241c:	b40f      	push	{r0, r1, r2, r3}
 800241e:	b507      	push	{r0, r1, r2, lr}
 8002420:	aa04      	add	r2, sp, #16
 8002422:	f852 1b04 	ldr.w	r1, [r2], #4
 8002426:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	f7ff fe10 	bl	8002050 <_vprintf>
 8002430:	b003      	add	sp, #12
 8002432:	f85d eb04 	ldr.w	lr, [sp], #4
 8002436:	b004      	add	sp, #16
 8002438:	4770      	bx	lr
	...

0800243c <snprintf>:
 800243c:	b40c      	push	{r2, r3}
 800243e:	460b      	mov	r3, r1
 8002440:	b513      	push	{r0, r1, r4, lr}
 8002442:	4c09      	ldr	r4, [pc, #36]	; (8002468 <snprintf+0x2c>)
 8002444:	aa04      	add	r2, sp, #16
 8002446:	f852 1b04 	ldr.w	r1, [r2], #4
 800244a:	6020      	str	r0, [r4, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	f7ff fdfe 	bl	8002050 <_vprintf>
 8002454:	2300      	movs	r3, #0
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	7013      	strb	r3, [r2, #0]
 800245c:	b002      	add	sp, #8
 800245e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002462:	b002      	add	sp, #8
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800246c <vsnprintf>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4605      	mov	r5, r0
 8002470:	4c05      	ldr	r4, [pc, #20]	; (8002488 <vsnprintf+0x1c>)
 8002472:	4608      	mov	r0, r1
 8002474:	4611      	mov	r1, r2
 8002476:	461a      	mov	r2, r3
 8002478:	6025      	str	r5, [r4, #0]
 800247a:	f7ff fde9 	bl	8002050 <_vprintf>
 800247e:	2300      	movs	r3, #0
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	6023      	str	r3, [r4, #0]
 8002484:	7013      	strb	r3, [r2, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800248c <puts>:
 800248c:	b508      	push	{r3, lr}
 800248e:	f005 f90d 	bl	80076ac <console_puts>
 8002492:	200a      	movs	r0, #10
 8002494:	f005 f8fe 	bl	8007694 <console_putc>
 8002498:	2001      	movs	r0, #1
 800249a:	bd08      	pop	{r3, pc}

0800249c <DMXReceiver::Run(short&)>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <DMXReceiver::Run(short&)+0x8c>)
 80024a0:	4607      	mov	r7, r0
 80024a2:	781e      	ldrb	r6, [r3, #0]
 80024a4:	460d      	mov	r5, r1
 80024a6:	b11e      	cbz	r6, 80024b0 <DMXReceiver::Run(short&)+0x14>
 80024a8:	2400      	movs	r4, #0
 80024aa:	802c      	strh	r4, [r5, #0]
 80024ac:	4620      	mov	r0, r4
 80024ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b0:	4631      	mov	r1, r6
 80024b2:	f001 fc2b 	bl	8003d0c <Dmx::GetUpdatesPerSecond(unsigned int)>
 80024b6:	4604      	mov	r4, r0
 80024b8:	b998      	cbnz	r0, 80024e2 <DMXReceiver::Run(short&)+0x46>
 80024ba:	4e1c      	ldr	r6, [pc, #112]	; (800252c <DMXReceiver::Run(short&)+0x90>)
 80024bc:	7833      	ldrb	r3, [r6, #0]
 80024be:	b15b      	cbz	r3, 80024d8 <DMXReceiver::Run(short&)+0x3c>
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <DMXReceiver::Run(short&)+0x94>)
 80024c2:	4621      	mov	r1, r4
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4798      	blx	r3
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <DMXReceiver::Run(short&)+0x98>)
 80024ce:	2102      	movs	r1, #2
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	7034      	strb	r4, [r6, #0]
 80024d4:	f005 f942 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 80024d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024dc:	2400      	movs	r4, #0
 80024de:	802b      	strh	r3, [r5, #0]
 80024e0:	e7e4      	b.n	80024ac <DMXReceiver::Run(short&)+0x10>
 80024e2:	4631      	mov	r1, r6
 80024e4:	4638      	mov	r0, r7
 80024e6:	f001 fbfd 	bl	8003ce4 <Dmx::GetDmxAvailable(unsigned int)>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d0dc      	beq.n	80024a8 <DMXReceiver::Run(short&)+0xc>
 80024ee:	4f10      	ldr	r7, [pc, #64]	; (8002530 <DMXReceiver::Run(short&)+0x94>)
 80024f0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80024f4:	1c44      	adds	r4, r0, #1
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	802b      	strh	r3, [r5, #0]
 80024fa:	6802      	ldr	r2, [r0, #0]
 80024fc:	4631      	mov	r1, r6
 80024fe:	6915      	ldr	r5, [r2, #16]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4622      	mov	r2, r4
 8002504:	47a8      	blx	r5
 8002506:	4d09      	ldr	r5, [pc, #36]	; (800252c <DMXReceiver::Run(short&)+0x90>)
 8002508:	7829      	ldrb	r1, [r5, #0]
 800250a:	2900      	cmp	r1, #0
 800250c:	d1ce      	bne.n	80024ac <DMXReceiver::Run(short&)+0x10>
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4798      	blx	r3
 8002516:	2301      	movs	r3, #1
 8002518:	702b      	strb	r3, [r5, #0]
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <DMXReceiver::Run(short&)+0x98>)
 800251c:	2103      	movs	r1, #3
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f005 f91c 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 8002524:	e7c2      	b.n	80024ac <DMXReceiver::Run(short&)+0x10>
 8002526:	bf00      	nop
 8002528:	20000208 	andcs	r0, r0, r8, lsl #4
 800252c:	20000200 	andcs	r0, r0, r0, lsl #4
 8002530:	20000204 	andcs	r0, r0, r4, lsl #4
 8002534:	200017dc 	ldrdcs	r1, [r0], -ip

08002538 <RDMResponder::HandleResponse(unsigned char*)>:
 8002538:	780a      	ldrb	r2, [r1, #0]
 800253a:	b510      	push	{r4, lr}
 800253c:	2acc      	cmp	r2, #204	; 0xcc
 800253e:	d107      	bne.n	8002550 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002540:	788c      	ldrb	r4, [r1, #2]
 8002542:	2000      	movs	r0, #0
 8002544:	3402      	adds	r4, #2
 8002546:	4622      	mov	r2, r4
 8002548:	f001 fc40 	bl	8003dcc <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800254c:	4620      	mov	r0, r4
 800254e:	bd10      	pop	{r4, pc}
 8002550:	2afe      	cmp	r2, #254	; 0xfe
 8002552:	d105      	bne.n	8002560 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8002554:	2218      	movs	r2, #24
 8002556:	2000      	movs	r0, #0
 8002558:	f001 fc4a 	bl	8003df0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800255c:	2418      	movs	r4, #24
 800255e:	e7f5      	b.n	800254c <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002560:	f06f 0402 	mvn.w	r4, #2
 8002564:	e7f2      	b.n	800254c <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

08002568 <RDMResponder::Run()>:
 8002568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800256a:	4604      	mov	r4, r0
 800256c:	f10d 0106 	add.w	r1, sp, #6
 8002570:	30d0      	adds	r0, #208	; 0xd0
 8002572:	f7ff ff93 	bl	800249c <DMXReceiver::Run(short&)>
 8002576:	4e1f      	ldr	r6, [pc, #124]	; (80025f4 <RDMResponder::Run()+0x8c>)
 8002578:	4601      	mov	r1, r0
 800257a:	6830      	ldr	r0, [r6, #0]
 800257c:	8883      	ldrh	r3, [r0, #4]
 800257e:	b153      	cbz	r3, 8002596 <RDMResponder::Run()+0x2e>
 8002580:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8002584:	1c53      	adds	r3, r2, #1
 8002586:	d120      	bne.n	80025ca <RDMResponder::Run()+0x62>
 8002588:	4d1b      	ldr	r5, [pc, #108]	; (80025f8 <RDMResponder::Run()+0x90>)
 800258a:	782b      	ldrb	r3, [r5, #0]
 800258c:	b11b      	cbz	r3, 8002596 <RDMResponder::Run()+0x2e>
 800258e:	f000 ff24 	bl	80033da <RDMSubDevices::Stop()>
 8002592:	2300      	movs	r3, #0
 8002594:	702b      	strb	r3, [r5, #0]
 8002596:	2000      	movs	r0, #0
 8002598:	f000 ffe2 	bl	8003560 <Rdm::Receive(unsigned int)>
 800259c:	b198      	cbz	r0, 80025c6 <RDMResponder::Run()+0x5e>
 800259e:	7803      	ldrb	r3, [r0, #0]
 80025a0:	2bcc      	cmp	r3, #204	; 0xcc
 80025a2:	d120      	bne.n	80025e6 <RDMResponder::Run()+0x7e>
 80025a4:	7d03      	ldrb	r3, [r0, #20]
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d003      	beq.n	80025b2 <RDMResponder::Run()+0x4a>
 80025aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d11c      	bne.n	80025ec <RDMResponder::Run()+0x84>
 80025b2:	1c41      	adds	r1, r0, #1
 80025b4:	4a11      	ldr	r2, [pc, #68]	; (80025fc <RDMResponder::Run()+0x94>)
 80025b6:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 80025ba:	f002 fda5 	bl	8005108 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80025be:	4620      	mov	r0, r4
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <RDMResponder::Run()+0x94>)
 80025c2:	f7ff ffb9 	bl	8002538 <RDMResponder::HandleResponse(unsigned char*)>
 80025c6:	b002      	add	sp, #8
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
 80025ca:	2900      	cmp	r1, #0
 80025cc:	d0e3      	beq.n	8002596 <RDMResponder::Run()+0x2e>
 80025ce:	4d0a      	ldr	r5, [pc, #40]	; (80025f8 <RDMResponder::Run()+0x90>)
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f000 ff12 	bl	80033fa <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 80025d6:	782b      	ldrb	r3, [r5, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1dc      	bne.n	8002596 <RDMResponder::Run()+0x2e>
 80025dc:	6830      	ldr	r0, [r6, #0]
 80025de:	f000 feec 	bl	80033ba <RDMSubDevices::Start()>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e7d6      	b.n	8002594 <RDMResponder::Run()+0x2c>
 80025e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ea:	e7ec      	b.n	80025c6 <RDMResponder::Run()+0x5e>
 80025ec:	f06f 0001 	mvn.w	r0, #1
 80025f0:	e7e9      	b.n	80025c6 <RDMResponder::Run()+0x5e>
 80025f2:	bf00      	nop
 80025f4:	200001fc 	strdcs	r0, [r0], -ip
 80025f8:	200001f3 	strdcs	r0, [r0], -r3
 80025fc:	200000f4 	strdcs	r0, [r0], -r4

08002600 <CpuTemperature::Initialize()>:
 8002600:	2001      	movs	r0, #1
 8002602:	4770      	bx	lr

08002604 <CpuTemperature::~CpuTemperature()>:
 8002604:	4770      	bx	lr

08002606 <CpuTemperature::GetValue()>:
 8002606:	b508      	push	{r3, lr}
 8002608:	f006 fb26 	bl	8008c58 <gd32_adc_gettemp()>
 800260c:	f7fd ff64 	bl	80004d8 <__aeabi_f2iz>
 8002610:	b200      	sxth	r0, r0
 8002612:	bd08      	pop	{r3, pc}

08002614 <CpuTemperature::~CpuTemperature()>:
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	f005 faf9 	bl	8007c0e <operator delete(void*)>
 800261c:	4620      	mov	r0, r4
 800261e:	bd10      	pop	{r4, pc}

08002620 <RDMSensors::RDMSensors()>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <RDMSensors::RDMSensors()+0x4c>)
 8002626:	4604      	mov	r4, r0
 8002628:	6018      	str	r0, [r3, #0]
 800262a:	6006      	str	r6, [r0, #0]
 800262c:	7106      	strb	r6, [r0, #4]
 800262e:	2040      	movs	r0, #64	; 0x40
 8002630:	f005 faf3 	bl	8007c1a <operator new[](unsigned int)>
 8002634:	6020      	str	r0, [r4, #0]
 8002636:	2040      	movs	r0, #64	; 0x40
 8002638:	f005 faed 	bl	8007c16 <operator new(unsigned int)>
 800263c:	4605      	mov	r5, r0
 800263e:	7921      	ldrb	r1, [r4, #4]
 8002640:	f000 faca 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RDMSensors::RDMSensors()+0x50>)
 8002646:	4628      	mov	r0, r5
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <RDMSensors::RDMSensors()+0x54>)
 800264c:	490a      	ldr	r1, [pc, #40]	; (8002678 <RDMSensors::RDMSensors()+0x58>)
 800264e:	60ab      	str	r3, [r5, #8]
 8002650:	3354      	adds	r3, #84	; 0x54
 8002652:	60eb      	str	r3, [r5, #12]
 8002654:	2355      	movs	r3, #85	; 0x55
 8002656:	71ee      	strb	r6, [r5, #7]
 8002658:	822b      	strh	r3, [r5, #16]
 800265a:	f000 facf 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 800265e:	4629      	mov	r1, r5
 8002660:	4620      	mov	r0, r4
 8002662:	f000 f85b 	bl	800271c <RDMSensors::Add(RDMSensor*)>
 8002666:	4620      	mov	r0, r4
 8002668:	bd70      	pop	{r4, r5, r6, pc}
 800266a:	bf00      	nop
 800266c:	200001f8 	strdcs	r0, [r0], -r8
 8002670:	08009858 	stmdaeq	r0, {r3, r4, r6, fp, ip, pc}
 8002674:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002678:	08009849 	stmdaeq	r0, {r0, r3, r6, fp, ip, pc}

0800267c <RDMSensors::~RDMSensors()>:
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	2500      	movs	r5, #0
 8002680:	4604      	mov	r4, r0
 8002682:	462e      	mov	r6, r5
 8002684:	7923      	ldrb	r3, [r4, #4]
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	42ab      	cmp	r3, r5
 800268a:	d90a      	bls.n	80026a2 <RDMSensors::~RDMSensors()+0x26>
 800268c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002690:	b128      	cbz	r0, 800269e <RDMSensors::~RDMSensors()+0x22>
 8002692:	6803      	ldr	r3, [r0, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4798      	blx	r3
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800269e:	3501      	adds	r5, #1
 80026a0:	e7f0      	b.n	8002684 <RDMSensors::~RDMSensors()+0x8>
 80026a2:	b108      	cbz	r0, 80026a8 <RDMSensors::~RDMSensors()+0x2c>
 80026a4:	f005 fab5 	bl	8007c12 <operator delete[](void*)>
 80026a8:	4620      	mov	r0, r4
 80026aa:	bd70      	pop	{r4, r5, r6, pc}

080026ac <RDMSensors::GetDefintion(unsigned char)>:
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80026b2:	3006      	adds	r0, #6
 80026b4:	4770      	bx	lr

080026b6 <RDMSensors::GetValues(unsigned char)>:
 80026b6:	6803      	ldr	r3, [r0, #0]
 80026b8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80026bc:	f000 baac 	b.w	8002c18 <RDMSensor::GetValues()>

080026c0 <RDMSensors::SetValues(unsigned char)>:
 80026c0:	29ff      	cmp	r1, #255	; 0xff
 80026c2:	b538      	push	{r3, r4, r5, lr}
 80026c4:	4604      	mov	r4, r0
 80026c6:	d10a      	bne.n	80026de <RDMSensors::SetValues(unsigned char)+0x1e>
 80026c8:	2500      	movs	r5, #0
 80026ca:	7923      	ldrb	r3, [r4, #4]
 80026cc:	42ab      	cmp	r3, r5
 80026ce:	d90d      	bls.n	80026ec <RDMSensors::SetValues(unsigned char)+0x2c>
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80026d6:	f000 fab4 	bl	8002c42 <RDMSensor::SetValues()>
 80026da:	3501      	adds	r5, #1
 80026dc:	e7f5      	b.n	80026ca <RDMSensors::SetValues(unsigned char)+0xa>
 80026de:	6803      	ldr	r3, [r0, #0]
 80026e0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80026e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026e8:	f000 baab 	b.w	8002c42 <RDMSensor::SetValues()>
 80026ec:	bd38      	pop	{r3, r4, r5, pc}

080026ee <RDMSensors::SetRecord(unsigned char)>:
 80026ee:	29ff      	cmp	r1, #255	; 0xff
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	d10a      	bne.n	800270c <RDMSensors::SetRecord(unsigned char)+0x1e>
 80026f6:	2500      	movs	r5, #0
 80026f8:	7923      	ldrb	r3, [r4, #4]
 80026fa:	42ab      	cmp	r3, r5
 80026fc:	d90d      	bls.n	800271a <RDMSensors::SetRecord(unsigned char)+0x2c>
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002704:	f000 faa7 	bl	8002c56 <RDMSensor::Record()>
 8002708:	3501      	adds	r5, #1
 800270a:	e7f5      	b.n	80026f8 <RDMSensors::SetRecord(unsigned char)+0xa>
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002716:	f000 ba9e 	b.w	8002c56 <RDMSensor::Record()>
 800271a:	bd38      	pop	{r3, r4, r5, pc}

0800271c <RDMSensors::Add(RDMSensor*)>:
 800271c:	4603      	mov	r3, r0
 800271e:	6800      	ldr	r0, [r0, #0]
 8002720:	b510      	push	{r4, lr}
 8002722:	b148      	cbz	r0, 8002738 <RDMSensors::Add(RDMSensor*)+0x1c>
 8002724:	791a      	ldrb	r2, [r3, #4]
 8002726:	2a10      	cmp	r2, #16
 8002728:	bf1b      	ittet	ne
 800272a:	1c54      	addne	r4, r2, #1
 800272c:	711c      	strbne	r4, [r3, #4]
 800272e:	2000      	moveq	r0, #0
 8002730:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
 8002734:	bf18      	it	ne
 8002736:	2001      	movne	r0, #1
 8002738:	bd10      	pop	{r4, pc}

0800273a <RDMSensorBH170::Initialize()>:
 800273a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800273e:	4770      	bx	lr

08002740 <RDMSensorMCP9808::Initialize()>:
 8002740:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002744:	4770      	bx	lr

08002746 <RDMSensorHTU21DHumidity::Initialize()>:
 8002746:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800274a:	4770      	bx	lr

0800274c <RDMSensorHTU21DTemperature::Initialize()>:
 800274c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002750:	4770      	bx	lr

08002752 <RDMSensorINA219Current::Initialize()>:
 8002752:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002756:	4770      	bx	lr

08002758 <RDMSensorINA219Power::Initialize()>:
 8002758:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800275c:	4770      	bx	lr

0800275e <RDMSensorINA219Voltage::Initialize()>:
 800275e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002762:	4770      	bx	lr

08002764 <RDMSensorSI7021Humidity::Initialize()>:
 8002764:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002768:	4770      	bx	lr

0800276a <RDMSensorSI7021Temperature::Initialize()>:
 800276a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800276e:	4770      	bx	lr

08002770 <RDMSensorSI7021Temperature::GetValue()>:
 8002770:	b508      	push	{r3, lr}
 8002772:	3040      	adds	r0, #64	; 0x40
 8002774:	f000 fd7c 	bl	8003270 <sensor::SI7021::GetTemperature()>
 8002778:	f7fd feae 	bl	80004d8 <__aeabi_f2iz>
 800277c:	b200      	sxth	r0, r0
 800277e:	bd08      	pop	{r3, pc}

08002780 <RDMSensorSI7021Humidity::GetValue()>:
 8002780:	b508      	push	{r3, lr}
 8002782:	3040      	adds	r0, #64	; 0x40
 8002784:	f000 fd8a 	bl	800329c <sensor::SI7021::GetHumidity()>
 8002788:	f7fd fea6 	bl	80004d8 <__aeabi_f2iz>
 800278c:	b200      	sxth	r0, r0
 800278e:	bd08      	pop	{r3, pc}

08002790 <RDMSensorINA219Voltage::GetValue()>:
 8002790:	b508      	push	{r3, lr}
 8002792:	3040      	adds	r0, #64	; 0x40
 8002794:	f000 fc76 	bl	8003084 <sensor::INA219::GetBusVoltage()>
 8002798:	4903      	ldr	r1, [pc, #12]	; (80027a8 <RDMSensorINA219Voltage::GetValue()+0x18>)
 800279a:	f7fe fc15 	bl	8000fc8 <__aeabi_fmul>
 800279e:	f7fd fe9b 	bl	80004d8 <__aeabi_f2iz>
 80027a2:	b200      	sxth	r0, r0
 80027a4:	bd08      	pop	{r3, pc}
 80027a6:	bf00      	nop
 80027a8:	447a0000 	ldrbtmi	r0, [sl], #-0

080027ac <RDMSensorINA219Power::GetValue()>:
 80027ac:	b508      	push	{r3, lr}
 80027ae:	3040      	adds	r0, #64	; 0x40
 80027b0:	f000 fc74 	bl	800309c <sensor::INA219::GetBusPower()>
 80027b4:	f7fd fe90 	bl	80004d8 <__aeabi_f2iz>
 80027b8:	b200      	sxth	r0, r0
 80027ba:	bd08      	pop	{r3, pc}

080027bc <RDMSensorINA219Current::GetValue()>:
 80027bc:	b508      	push	{r3, lr}
 80027be:	3040      	adds	r0, #64	; 0x40
 80027c0:	f000 fc48 	bl	8003054 <sensor::INA219::GetShuntCurrent()>
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <RDMSensorINA219Current::GetValue()+0x18>)
 80027c6:	f7fe fbff 	bl	8000fc8 <__aeabi_fmul>
 80027ca:	f7fd fe85 	bl	80004d8 <__aeabi_f2iz>
 80027ce:	b200      	sxth	r0, r0
 80027d0:	bd08      	pop	{r3, pc}
 80027d2:	bf00      	nop
 80027d4:	447a0000 	ldrbtmi	r0, [sl], #-0

080027d8 <RDMSensorHTU21DTemperature::GetValue()>:
 80027d8:	b508      	push	{r3, lr}
 80027da:	3040      	adds	r0, #64	; 0x40
 80027dc:	f000 fb16 	bl	8002e0c <sensor::HTU21D::GetTemperature()>
 80027e0:	f7fd fe7a 	bl	80004d8 <__aeabi_f2iz>
 80027e4:	b200      	sxth	r0, r0
 80027e6:	bd08      	pop	{r3, pc}

080027e8 <RDMSensorHTU21DHumidity::GetValue()>:
 80027e8:	b508      	push	{r3, lr}
 80027ea:	3040      	adds	r0, #64	; 0x40
 80027ec:	f000 fb24 	bl	8002e38 <sensor::HTU21D::GetHumidity()>
 80027f0:	f7fd fe72 	bl	80004d8 <__aeabi_f2iz>
 80027f4:	b200      	sxth	r0, r0
 80027f6:	bd08      	pop	{r3, pc}

080027f8 <RDMSensorMCP9808::GetValue()>:
 80027f8:	b508      	push	{r3, lr}
 80027fa:	3040      	adds	r0, #64	; 0x40
 80027fc:	f000 fcbe 	bl	800317c <sensor::MCP9808::Get()>
 8002800:	f7fd fe6a 	bl	80004d8 <__aeabi_f2iz>
 8002804:	b200      	sxth	r0, r0
 8002806:	bd08      	pop	{r3, pc}

08002808 <RDMSensorBH170::GetValue()>:
 8002808:	b508      	push	{r3, lr}
 800280a:	3040      	adds	r0, #64	; 0x40
 800280c:	f000 fa7c 	bl	8002d08 <sensor::BH170::Get()>
 8002810:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002814:	bd08      	pop	{r3, pc}

08002816 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002816:	4770      	bx	lr

08002818 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
 800281c:	f005 f9f7 	bl	8007c0e <operator delete(void*)>
 8002820:	4620      	mov	r0, r4
 8002822:	bd10      	pop	{r4, pc}

08002824 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002824:	4770      	bx	lr

08002826 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002826:	b510      	push	{r4, lr}
 8002828:	4604      	mov	r4, r0
 800282a:	f005 f9f0 	bl	8007c0e <operator delete(void*)>
 800282e:	4620      	mov	r0, r4
 8002830:	bd10      	pop	{r4, pc}

08002832 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002832:	4770      	bx	lr

08002834 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002834:	b510      	push	{r4, lr}
 8002836:	4604      	mov	r4, r0
 8002838:	f005 f9e9 	bl	8007c0e <operator delete(void*)>
 800283c:	4620      	mov	r0, r4
 800283e:	bd10      	pop	{r4, pc}

08002840 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002840:	4770      	bx	lr

08002842 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002842:	b510      	push	{r4, lr}
 8002844:	4604      	mov	r4, r0
 8002846:	f005 f9e2 	bl	8007c0e <operator delete(void*)>
 800284a:	4620      	mov	r0, r4
 800284c:	bd10      	pop	{r4, pc}

0800284e <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 800284e:	4770      	bx	lr

08002850 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
 8002854:	f005 f9db 	bl	8007c0e <operator delete(void*)>
 8002858:	4620      	mov	r0, r4
 800285a:	bd10      	pop	{r4, pc}

0800285c <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800285c:	4770      	bx	lr

0800285e <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800285e:	b510      	push	{r4, lr}
 8002860:	4604      	mov	r4, r0
 8002862:	f005 f9d4 	bl	8007c0e <operator delete(void*)>
 8002866:	4620      	mov	r0, r4
 8002868:	bd10      	pop	{r4, pc}

0800286a <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800286a:	4770      	bx	lr

0800286c <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4604      	mov	r4, r0
 8002870:	f005 f9cd 	bl	8007c0e <operator delete(void*)>
 8002874:	4620      	mov	r0, r4
 8002876:	bd10      	pop	{r4, pc}

08002878 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002878:	4770      	bx	lr

0800287a <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
 800287e:	f005 f9c6 	bl	8007c0e <operator delete(void*)>
 8002882:	4620      	mov	r0, r4
 8002884:	bd10      	pop	{r4, pc}

08002886 <RDMSensorBH170::~RDMSensorBH170()>:
 8002886:	4770      	bx	lr

08002888 <RDMSensorBH170::~RDMSensorBH170()>:
 8002888:	b510      	push	{r4, lr}
 800288a:	4604      	mov	r4, r0
 800288c:	f005 f9bf 	bl	8007c0e <operator delete(void*)>
 8002890:	4620      	mov	r0, r4
 8002892:	bd10      	pop	{r4, pc}

08002894 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 8002894:	6001      	str	r1, [r0, #0]
 8002896:	4770      	bx	lr

08002898 <RDMSensorsParams::Load()>:
 8002898:	b508      	push	{r3, lr}
 800289a:	2300      	movs	r3, #0
 800289c:	4601      	mov	r1, r0
 800289e:	6043      	str	r3, [r0, #4]
 80028a0:	6800      	ldr	r0, [r0, #0]
 80028a2:	b120      	cbz	r0, 80028ae <RDMSensorsParams::Load()+0x16>
 80028a4:	6803      	ldr	r3, [r0, #0]
 80028a6:	3104      	adds	r1, #4
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4798      	blx	r3
 80028ac:	2001      	movs	r0, #1
 80028ae:	bd08      	pop	{r3, pc}

080028b0 <RDMSensorsParams::Dump()>:
 80028b0:	4770      	bx	lr
	...

080028b4 <RDMSensorsParams::Add(RDMSensor*)>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	680b      	ldr	r3, [r1, #0]
 80028b8:	4608      	mov	r0, r1
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	460c      	mov	r4, r1
 80028be:	4798      	blx	r3
 80028c0:	4605      	mov	r5, r0
 80028c2:	b130      	cbz	r0, 80028d2 <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 80028c6:	4621      	mov	r1, r4
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	f7ff ff27 	bl	800271c <RDMSensors::Add(RDMSensor*)>
 80028ce:	4628      	mov	r0, r5
 80028d0:	bd38      	pop	{r3, r4, r5, pc}
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	4620      	mov	r0, r4
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4798      	blx	r3
 80028da:	e7f8      	b.n	80028ce <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 80028dc:	200001f8 	strdcs	r0, [r0], -r8

080028e0 <RDMSensorsParams::Set()>:
 80028e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e4:	4605      	mov	r5, r0
 80028e6:	4607      	mov	r7, r0
 80028e8:	f04f 0800 	mov.w	r8, #0
 80028ec:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8002b6c <RDMSensorsParams::Set()+0x28c>
 80028f0:	686b      	ldr	r3, [r5, #4]
 80028f2:	4543      	cmp	r3, r8
 80028f4:	f240 8137 	bls.w	8002b66 <RDMSensorsParams::Set()+0x286>
 80028f8:	4b9d      	ldr	r3, [pc, #628]	; (8002b70 <RDMSensorsParams::Set()+0x290>)
 80028fa:	7a7e      	ldrb	r6, [r7, #9]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	791c      	ldrb	r4, [r3, #4]
 8002900:	7a3b      	ldrb	r3, [r7, #8]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d827      	bhi.n	8002956 <RDMSensorsParams::Set()+0x76>
 8002906:	e8df f013 	tbh	[pc, r3, lsl #1]
 800290a:	002a0005 	eoreq	r0, sl, r5
 800290e:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8002912:	204c00f0 	strdcs	r0, [ip], #-0
 8002916:	f005 f97e 	bl	8007c16 <operator new(unsigned int)>
 800291a:	4681      	mov	r9, r0
 800291c:	4621      	mov	r1, r4
 800291e:	f000 f95b 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002922:	4631      	mov	r1, r6
 8002924:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002928:	f000 f9ba 	bl	8002ca0 <sensor::BH170::BH170(unsigned char)>
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <RDMSensorsParams::Set()+0x294>)
 800292e:	241a      	movs	r4, #26
 8002930:	f8c9 3000 	str.w	r3, [r9]
 8002934:	2318      	movs	r3, #24
 8002936:	f889 3007 	strb.w	r3, [r9, #7]
 800293a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800293e:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8002942:	498d      	ldr	r1, [pc, #564]	; (8002b78 <RDMSensorsParams::Set()+0x298>)
 8002944:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002948:	4648      	mov	r0, r9
 800294a:	f000 f957 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 800294e:	4649      	mov	r1, r9
 8002950:	4628      	mov	r0, r5
 8002952:	f7ff ffaf 	bl	80028b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002956:	f108 0801 	add.w	r8, r8, #1
 800295a:	3703      	adds	r7, #3
 800295c:	e7c8      	b.n	80028f0 <RDMSensorsParams::Set()+0x10>
 800295e:	204c      	movs	r0, #76	; 0x4c
 8002960:	f005 f959 	bl	8007c16 <operator new(unsigned int)>
 8002964:	4682      	mov	sl, r0
 8002966:	4621      	mov	r1, r4
 8002968:	f000 f936 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 800296c:	4631      	mov	r1, r6
 800296e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002972:	f000 f9e9 	bl	8002d48 <sensor::HTU21D::HTU21D(unsigned char)>
 8002976:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <RDMSensorsParams::Set()+0x29c>)
 8002978:	f04f 0900 	mov.w	r9, #0
 800297c:	f8ca 2000 	str.w	r2, [sl]
 8002980:	221f      	movs	r2, #31
 8002982:	f88a 2007 	strb.w	r2, [sl, #7]
 8002986:	2264      	movs	r2, #100	; 0x64
 8002988:	4650      	mov	r0, sl
 800298a:	497d      	ldr	r1, [pc, #500]	; (8002b80 <RDMSensorsParams::Set()+0x2a0>)
 800298c:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002990:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002994:	f000 f932 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 8002998:	4651      	mov	r1, sl
 800299a:	4628      	mov	r0, r5
 800299c:	f7ff ff8a 	bl	80028b4 <RDMSensorsParams::Add(RDMSensor*)>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d0d8      	beq.n	8002956 <RDMSensorsParams::Set()+0x76>
 80029a4:	204c      	movs	r0, #76	; 0x4c
 80029a6:	f005 f936 	bl	8007c16 <operator new(unsigned int)>
 80029aa:	4682      	mov	sl, r0
 80029ac:	1c61      	adds	r1, r4, #1
 80029ae:	b2c9      	uxtb	r1, r1
 80029b0:	f000 f912 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 80029b4:	4631      	mov	r1, r6
 80029b6:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80029ba:	f000 f9c5 	bl	8002d48 <sensor::HTU21D::HTU21D(unsigned char)>
 80029be:	4a71      	ldr	r2, [pc, #452]	; (8002b84 <RDMSensorsParams::Set()+0x2a4>)
 80029c0:	4b71      	ldr	r3, [pc, #452]	; (8002b88 <RDMSensorsParams::Set()+0x2a8>)
 80029c2:	f8ca 2000 	str.w	r2, [sl]
 80029c6:	227d      	movs	r2, #125	; 0x7d
 80029c8:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 80029cc:	496f      	ldr	r1, [pc, #444]	; (8002b8c <RDMSensorsParams::Set()+0x2ac>)
 80029ce:	f88a 9007 	strb.w	r9, [sl, #7]
 80029d2:	f8aa 2010 	strh.w	r2, [sl, #16]
 80029d6:	4650      	mov	r0, sl
 80029d8:	f000 f910 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 80029dc:	4651      	mov	r1, sl
 80029de:	e7b7      	b.n	8002950 <RDMSensorsParams::Set()+0x70>
 80029e0:	2060      	movs	r0, #96	; 0x60
 80029e2:	f005 f918 	bl	8007c16 <operator new(unsigned int)>
 80029e6:	4682      	mov	sl, r0
 80029e8:	4621      	mov	r1, r4
 80029ea:	f000 f8f5 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 80029ee:	4631      	mov	r1, r6
 80029f0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80029f4:	f000 faee 	bl	8002fd4 <sensor::INA219::INA219(unsigned char)>
 80029f8:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <RDMSensorsParams::Set()+0x2b0>)
 80029fa:	f04f 0902 	mov.w	r9, #2
 80029fe:	f8ca 2000 	str.w	r2, [sl]
 8002a02:	4a64      	ldr	r2, [pc, #400]	; (8002b94 <RDMSensorsParams::Set()+0x2b4>)
 8002a04:	4650      	mov	r0, sl
 8002a06:	f8ca 2008 	str.w	r2, [sl, #8]
 8002a0a:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002a0e:	f8ca 200c 	str.w	r2, [sl, #12]
 8002a12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a16:	4960      	ldr	r1, [pc, #384]	; (8002b98 <RDMSensorsParams::Set()+0x2b8>)
 8002a18:	f88a 9007 	strb.w	r9, [sl, #7]
 8002a1c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a20:	f000 f8ec 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 8002a24:	4651      	mov	r1, sl
 8002a26:	4628      	mov	r0, r5
 8002a28:	f7ff ff44 	bl	80028b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	d092      	beq.n	8002956 <RDMSensorsParams::Set()+0x76>
 8002a30:	2060      	movs	r0, #96	; 0x60
 8002a32:	f005 f8f0 	bl	8007c16 <operator new(unsigned int)>
 8002a36:	4682      	mov	sl, r0
 8002a38:	1c61      	adds	r1, r4, #1
 8002a3a:	b2c9      	uxtb	r1, r1
 8002a3c:	f000 f8cc 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002a40:	4631      	mov	r1, r6
 8002a42:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002a46:	f000 fac5 	bl	8002fd4 <sensor::INA219::INA219(unsigned char)>
 8002a4a:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002a4e:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <RDMSensorsParams::Set()+0x2bc>)
 8002a50:	4650      	mov	r0, sl
 8002a52:	f8ca 2000 	str.w	r2, [sl]
 8002a56:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <RDMSensorsParams::Set()+0x2c0>)
 8002a58:	f88a 9007 	strb.w	r9, [sl, #7]
 8002a5c:	f8ca 2008 	str.w	r2, [sl, #8]
 8002a60:	440a      	add	r2, r1
 8002a62:	f8ca 200c 	str.w	r2, [sl, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	494e      	ldr	r1, [pc, #312]	; (8002ba4 <RDMSensorsParams::Set()+0x2c4>)
 8002a6a:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a6e:	f000 f8c5 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 8002a72:	4651      	mov	r1, sl
 8002a74:	4628      	mov	r0, r5
 8002a76:	f7ff ff1d 	bl	80028b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002a7a:	2060      	movs	r0, #96	; 0x60
 8002a7c:	f005 f8cb 	bl	8007c16 <operator new(unsigned int)>
 8002a80:	4682      	mov	sl, r0
 8002a82:	eb04 0109 	add.w	r1, r4, r9
 8002a86:	b2c9      	uxtb	r1, r1
 8002a88:	f000 f8a6 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002a8c:	4631      	mov	r1, r6
 8002a8e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002a92:	f000 fa9f 	bl	8002fd4 <sensor::INA219::INA219(unsigned char)>
 8002a96:	4a44      	ldr	r2, [pc, #272]	; (8002ba8 <RDMSensorsParams::Set()+0x2c8>)
 8002a98:	4844      	ldr	r0, [pc, #272]	; (8002bac <RDMSensorsParams::Set()+0x2cc>)
 8002a9a:	f8ca 2000 	str.w	r2, [sl]
 8002a9e:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <RDMSensorsParams::Set()+0x2d0>)
 8002aa0:	4944      	ldr	r1, [pc, #272]	; (8002bb4 <RDMSensorsParams::Set()+0x2d4>)
 8002aa2:	e9ca 0202 	strd	r0, r2, [sl, #8]
 8002aa6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002aaa:	f88a 9007 	strb.w	r9, [sl, #7]
 8002aae:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002ab2:	e790      	b.n	80029d6 <RDMSensorsParams::Set()+0xf6>
 8002ab4:	204c      	movs	r0, #76	; 0x4c
 8002ab6:	f005 f8ae 	bl	8007c16 <operator new(unsigned int)>
 8002aba:	4681      	mov	r9, r0
 8002abc:	4621      	mov	r1, r4
 8002abe:	f000 f88b 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002ac8:	f000 fb1a 	bl	8003100 <sensor::MCP9808::MCP9808(unsigned char)>
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <RDMSensorsParams::Set()+0x2d8>)
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <RDMSensorsParams::Set()+0x2dc>)
 8002ad0:	f8c9 3000 	str.w	r3, [r9]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f889 3007 	strb.w	r3, [r9, #7]
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <RDMSensorsParams::Set()+0x2e0>)
 8002adc:	4939      	ldr	r1, [pc, #228]	; (8002bc4 <RDMSensorsParams::Set()+0x2e4>)
 8002ade:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8002ae2:	2328      	movs	r3, #40	; 0x28
 8002ae4:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002ae8:	e72e      	b.n	8002948 <RDMSensorsParams::Set()+0x68>
 8002aea:	204c      	movs	r0, #76	; 0x4c
 8002aec:	f005 f893 	bl	8007c16 <operator new(unsigned int)>
 8002af0:	4682      	mov	sl, r0
 8002af2:	4621      	mov	r1, r4
 8002af4:	f000 f870 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002af8:	4631      	mov	r1, r6
 8002afa:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002afe:	f000 fb55 	bl	80031ac <sensor::SI7021::SI7021(unsigned char)>
 8002b02:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <RDMSensorsParams::Set()+0x2e8>)
 8002b04:	f04f 0900 	mov.w	r9, #0
 8002b08:	f8ca 2000 	str.w	r2, [sl]
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	f88a 2007 	strb.w	r2, [sl, #7]
 8002b12:	2264      	movs	r2, #100	; 0x64
 8002b14:	4650      	mov	r0, sl
 8002b16:	492d      	ldr	r1, [pc, #180]	; (8002bcc <RDMSensorsParams::Set()+0x2ec>)
 8002b18:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002b1c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002b20:	f000 f86c 	bl	8002bfc <RDMSensor::SetDescription(char const*)>
 8002b24:	4651      	mov	r1, sl
 8002b26:	4628      	mov	r0, r5
 8002b28:	f7ff fec4 	bl	80028b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	f43f af12 	beq.w	8002956 <RDMSensorsParams::Set()+0x76>
 8002b32:	204c      	movs	r0, #76	; 0x4c
 8002b34:	f005 f86f 	bl	8007c16 <operator new(unsigned int)>
 8002b38:	4682      	mov	sl, r0
 8002b3a:	1c61      	adds	r1, r4, #1
 8002b3c:	b2c9      	uxtb	r1, r1
 8002b3e:	f000 f84b 	bl	8002bd8 <RDMSensor::RDMSensor(unsigned char)>
 8002b42:	4631      	mov	r1, r6
 8002b44:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002b48:	f000 fb30 	bl	80031ac <sensor::SI7021::SI7021(unsigned char)>
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <RDMSensorsParams::Set()+0x2f0>)
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <RDMSensorsParams::Set()+0x2a8>)
 8002b50:	f8ca 2000 	str.w	r2, [sl]
 8002b54:	227d      	movs	r2, #125	; 0x7d
 8002b56:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002b5a:	491e      	ldr	r1, [pc, #120]	; (8002bd4 <RDMSensorsParams::Set()+0x2f4>)
 8002b5c:	f88a 9007 	strb.w	r9, [sl, #7]
 8002b60:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002b64:	e737      	b.n	80029d6 <RDMSensorsParams::Set()+0xf6>
 8002b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d
 8002b70:	200001f8 	strdcs	r0, [r0], -r8
 8002b74:	08009870 	stmdaeq	r0, {r4, r5, r6, fp, ip, pc}
 8002b78:	08009940 	stmdaeq	r0, {r6, r8, fp, ip, pc}
 8002b7c:	080098a0 	stmdaeq	r0, {r5, r7, fp, ip, pc}
 8002b80:	08009962 	stmdaeq	r0, {r1, r5, r6, r8, fp, ip, pc}
 8002b84:	080098b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, pc}
 8002b88:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002b8c:	0800994e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, ip, pc}
 8002b90:	080098d0 	stmdaeq	r0, {r4, r6, r7, fp, ip, pc}
 8002b94:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002b98:	0800997a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, ip, pc}
 8002b9c:	080098e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, ip, pc}
 8002ba0:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002ba4:	08009974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, pc}
 8002ba8:	08009900 	stmdaeq	r0, {r8, fp, ip, pc}
 8002bac:	83000305 	movwhi	r0, #773	; 0x305
 8002bb0:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002bb4:	08009982 	stmdaeq	r0, {r1, r7, r8, fp, ip, pc}
 8002bb8:	08009888 	stmdaeq	r0, {r3, r7, fp, ip, pc}
 8002bbc:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002bc0:	00120064 	andseq	r0, r2, r4, rrx
 8002bc4:	080099b0 	stmdaeq	r0, {r4, r5, r7, r8, fp, ip, pc}
 8002bc8:	08009918 	stmdaeq	r0, {r3, r4, r8, fp, ip, pc}
 8002bcc:	0800999e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip, pc}
 8002bd0:	08009930 	stmdaeq	r0, {r4, r5, r8, fp, ip, pc}
 8002bd4:	0800998a 	stmdaeq	r0, {r1, r3, r7, r8, fp, ip, pc}

08002bd8 <RDMSensor::RDMSensor(unsigned char)>:
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002bda:	7101      	strb	r1, [r0, #4]
 8002bdc:	6002      	str	r2, [r0, #0]
 8002bde:	2203      	movs	r2, #3
 8002be0:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002be4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002be8:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002bea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bee:	7181      	strb	r1, [r0, #6]
 8002bf0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002bf4:	8702      	strh	r2, [r0, #56]	; 0x38
 8002bf6:	4770      	bx	lr
 8002bf8:	080099cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, ip, pc}

08002bfc <RDMSensor::SetDescription(char const*)>:
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	f100 0212 	add.w	r2, r0, #18
 8002c04:	5ccc      	ldrb	r4, [r1, r3]
 8002c06:	b124      	cbz	r4, 8002c12 <RDMSensor::SetDescription(char const*)+0x16>
 8002c08:	3301      	adds	r3, #1
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	f802 4b01 	strb.w	r4, [r2], #1
 8002c10:	d1f8      	bne.n	8002c04 <RDMSensor::SetDescription(char const*)+0x8>
 8002c12:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002c16:	bd10      	pop	{r4, pc}

08002c18 <RDMSensor::GetValues()>:
 8002c18:	6803      	ldr	r3, [r0, #0]
 8002c1a:	b510      	push	{r4, lr}
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4798      	blx	r3
 8002c22:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002c26:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002c28:	4283      	cmp	r3, r0
 8002c2a:	bfa8      	it	ge
 8002c2c:	4603      	movge	r3, r0
 8002c2e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c30:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002c34:	4298      	cmp	r0, r3
 8002c36:	bfb8      	it	lt
 8002c38:	4618      	movlt	r0, r3
 8002c3a:	8720      	strh	r0, [r4, #56]	; 0x38
 8002c3c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <RDMSensor::SetValues()>:
 8002c42:	6803      	ldr	r3, [r0, #0]
 8002c44:	b510      	push	{r4, lr}
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4604      	mov	r4, r0
 8002c4a:	4798      	blx	r3
 8002c4c:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002c4e:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002c50:	8720      	strh	r0, [r4, #56]	; 0x38
 8002c52:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002c54:	bd10      	pop	{r4, pc}

08002c56 <RDMSensor::Record()>:
 8002c56:	6803      	ldr	r3, [r0, #0]
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4798      	blx	r3
 8002c60:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002c64:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002c66:	4283      	cmp	r3, r0
 8002c68:	bfa8      	it	ge
 8002c6a:	4603      	movge	r3, r0
 8002c6c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c6e:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002c72:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002c74:	4298      	cmp	r0, r3
 8002c76:	bfb8      	it	lt
 8002c78:	4618      	movlt	r0, r3
 8002c7a:	8720      	strh	r0, [r4, #56]	; 0x38
 8002c7c:	bd10      	pop	{r4, pc}

08002c7e <HAL_I2C::Write(char)>:
 8002c7e:	b513      	push	{r0, r1, r4, lr}
 8002c80:	4604      	mov	r4, r0
 8002c82:	7800      	ldrb	r0, [r0, #0]
 8002c84:	f88d 1007 	strb.w	r1, [sp, #7]
 8002c88:	f006 f870 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002c8c:	6860      	ldr	r0, [r4, #4]
 8002c8e:	f006 f865 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002c92:	2101      	movs	r1, #1
 8002c94:	f10d 0007 	add.w	r0, sp, #7
 8002c98:	f006 f86e 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <sensor::BH170::BH170(unsigned char)>:
 8002ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ca2:	1e0c      	subs	r4, r1, #0
 8002ca4:	bf08      	it	eq
 8002ca6:	2423      	moveq	r4, #35	; 0x23
 8002ca8:	2600      	movs	r6, #0
 8002caa:	4f16      	ldr	r7, [pc, #88]	; (8002d04 <sensor::BH170::BH170(unsigned char)+0x64>)
 8002cac:	7004      	strb	r4, [r0, #0]
 8002cae:	6047      	str	r7, [r0, #4]
 8002cb0:	7206      	strb	r6, [r0, #8]
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f006 f859 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002cba:	4638      	mov	r0, r7
 8002cbc:	f006 f84e 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002cc0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d902      	bls.n	8002cce <sensor::BH170::BH170(unsigned char)+0x2e>
 8002cc8:	3c50      	subs	r4, #80	; 0x50
 8002cca:	2c0f      	cmp	r4, #15
 8002ccc:	d814      	bhi.n	8002cf8 <sensor::BH170::BH170(unsigned char)+0x58>
 8002cce:	2101      	movs	r1, #1
 8002cd0:	f10d 0007 	add.w	r0, sp, #7
 8002cd4:	f006 f8b6 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8002cd8:	fab0 f080 	clz	r0, r0
 8002cdc:	0940      	lsrs	r0, r0, #5
 8002cde:	7228      	strb	r0, [r5, #8]
 8002ce0:	b138      	cbz	r0, 8002cf2 <sensor::BH170::BH170(unsigned char)+0x52>
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f7ff ffca 	bl	8002c7e <HAL_I2C::Write(char)>
 8002cea:	2110      	movs	r1, #16
 8002cec:	4628      	mov	r0, r5
 8002cee:	f7ff ffc6 	bl	8002c7e <HAL_I2C::Write(char)>
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	b003      	add	sp, #12
 8002cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf8:	4631      	mov	r1, r6
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f006 f83c 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002d00:	e7ea      	b.n	8002cd8 <sensor::BH170::BH170(unsigned char)+0x38>
 8002d02:	bf00      	nop
 8002d04:	00061a80 	andeq	r1, r6, r0, lsl #21

08002d08 <sensor::BH170::Get()>:
 8002d08:	b513      	push	{r0, r1, r4, lr}
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	7800      	ldrb	r0, [r0, #0]
 8002d10:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002d14:	f006 f82a 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002d18:	6860      	ldr	r0, [r4, #4]
 8002d1a:	f006 f81f 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002d1e:	2102      	movs	r1, #2
 8002d20:	a801      	add	r0, sp, #4
 8002d22:	f006 f88f 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8002d26:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002d2a:	ba40      	rev16	r0, r0
 8002d2c:	b280      	uxth	r0, r0
 8002d2e:	f7fd fb05 	bl	800033c <__aeabi_ui2f>
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <sensor::BH170::Get()+0x3c>)
 8002d34:	f7fe f9fc 	bl	8001130 <__aeabi_fdiv>
 8002d38:	f7fe fa96 	bl	8001268 <__aeabi_f2uiz>
 8002d3c:	b280      	uxth	r0, r0
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd10      	pop	{r4, pc}
 8002d42:	bf00      	nop
 8002d44:	3f99999a 	svccc	0x0099999a

08002d48 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d4a:	1e0c      	subs	r4, r1, #0
 8002d4c:	bf08      	it	eq
 8002d4e:	2440      	moveq	r4, #64	; 0x40
 8002d50:	2600      	movs	r6, #0
 8002d52:	4f11      	ldr	r7, [pc, #68]	; (8002d98 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002d54:	7004      	strb	r4, [r0, #0]
 8002d56:	6047      	str	r7, [r0, #4]
 8002d58:	7206      	strb	r6, [r0, #8]
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	f006 f805 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002d62:	4638      	mov	r0, r7
 8002d64:	f005 fffa 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002d68:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002d6c:	2b07      	cmp	r3, #7
 8002d6e:	d902      	bls.n	8002d76 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002d70:	3c50      	subs	r4, #80	; 0x50
 8002d72:	2c0f      	cmp	r4, #15
 8002d74:	d80b      	bhi.n	8002d8e <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002d76:	2101      	movs	r1, #1
 8002d78:	f10d 0007 	add.w	r0, sp, #7
 8002d7c:	f006 f862 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8002d80:	fab0 f380 	clz	r3, r0
 8002d84:	4628      	mov	r0, r5
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	722b      	strb	r3, [r5, #8]
 8002d8a:	b003      	add	sp, #12
 8002d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4630      	mov	r0, r6
 8002d92:	f005 fff1 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002d96:	e7f3      	b.n	8002d80 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002d98:	00061a80 	andeq	r1, r6, r0, lsl #21

08002d9c <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d9e:	4604      	mov	r4, r0
 8002da0:	7800      	ldrb	r0, [r0, #0]
 8002da2:	f88d 1004 	strb.w	r1, [sp, #4]
 8002da6:	f005 ffe1 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002daa:	6860      	ldr	r0, [r4, #4]
 8002dac:	f005 ffd6 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002db0:	2101      	movs	r1, #1
 8002db2:	a801      	add	r0, sp, #4
 8002db4:	f005 ffe0 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002dba:	2508      	movs	r5, #8
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f88d 3006 	strb.w	r3, [sp, #6]
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f242 7010 	movw	r0, #10000	; 0x2710
 8002dce:	f006 fa6f 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8002dd2:	7820      	ldrb	r0, [r4, #0]
 8002dd4:	f005 ffca 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002dd8:	6860      	ldr	r0, [r4, #4]
 8002dda:	f005 ffbf 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002dde:	2103      	movs	r1, #3
 8002de0:	a801      	add	r0, sp, #4
 8002de2:	f006 f82f 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8002de6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d001      	beq.n	8002df6 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 8002df2:	3d01      	subs	r5, #1
 8002df4:	d1e8      	bne.n	8002dc8 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002df6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002dfa:	ba40      	rev16	r0, r0
 8002dfc:	f020 0003 	bic.w	r0, r0, #3
 8002e00:	b280      	uxth	r0, r0
 8002e02:	b003      	add	sp, #12
 8002e04:	bd30      	pop	{r4, r5, pc}
 8002e06:	bf00      	nop
 8002e08:	080096c8 	stmdaeq	r0, {r3, r6, r7, r9, sl, ip, pc}

08002e0c <sensor::HTU21D::GetTemperature()>:
 8002e0c:	b508      	push	{r3, lr}
 8002e0e:	21f3      	movs	r1, #243	; 0xf3
 8002e10:	f7ff ffc4 	bl	8002d9c <sensor::HTU21D::ReadRaw(unsigned char)>
 8002e14:	f7fd fa92 	bl	800033c <__aeabi_ui2f>
 8002e18:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002e1c:	f7fe f8d4 	bl	8000fc8 <__aeabi_fmul>
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <sensor::HTU21D::GetTemperature()+0x24>)
 8002e22:	f7fe f8d1 	bl	8000fc8 <__aeabi_fmul>
 8002e26:	4903      	ldr	r1, [pc, #12]	; (8002e34 <sensor::HTU21D::GetTemperature()+0x28>)
 8002e28:	f7fd f9d6 	bl	80001d8 <__aeabi_fsub>
 8002e2c:	bd08      	pop	{r3, pc}
 8002e2e:	bf00      	nop
 8002e30:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002e34:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08002e38 <sensor::HTU21D::GetHumidity()>:
 8002e38:	b508      	push	{r3, lr}
 8002e3a:	21f5      	movs	r1, #245	; 0xf5
 8002e3c:	f7ff ffae 	bl	8002d9c <sensor::HTU21D::ReadRaw(unsigned char)>
 8002e40:	f7fd fa7c 	bl	800033c <__aeabi_ui2f>
 8002e44:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002e48:	f7fe f8be 	bl	8000fc8 <__aeabi_fmul>
 8002e4c:	4903      	ldr	r1, [pc, #12]	; (8002e5c <sensor::HTU21D::GetHumidity()+0x24>)
 8002e4e:	f7fe f8bb 	bl	8000fc8 <__aeabi_fmul>
 8002e52:	4903      	ldr	r1, [pc, #12]	; (8002e60 <sensor::HTU21D::GetHumidity()+0x28>)
 8002e54:	f7fd f9c0 	bl	80001d8 <__aeabi_fsub>
 8002e58:	bd08      	pop	{r3, pc}
 8002e5a:	bf00      	nop
 8002e5c:	42fa0000 	rscsmi	r0, sl, #0
 8002e60:	40c00000 	sbcmi	r0, r0, r0

08002e64 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002e64:	b513      	push	{r0, r1, r4, lr}
 8002e66:	4604      	mov	r4, r0
 8002e68:	0a13      	lsrs	r3, r2, #8
 8002e6a:	7800      	ldrb	r0, [r0, #0]
 8002e6c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002e70:	f88d 3005 	strb.w	r3, [sp, #5]
 8002e74:	f88d 2006 	strb.w	r2, [sp, #6]
 8002e78:	f005 ff78 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002e7c:	6860      	ldr	r0, [r4, #4]
 8002e7e:	f005 ff6d 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002e82:	2103      	movs	r1, #3
 8002e84:	a801      	add	r0, sp, #4
 8002e86:	f005 ff77 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd10      	pop	{r4, pc}

08002e8e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8002e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e90:	4604      	mov	r4, r0
 8002e92:	2600      	movs	r6, #0
 8002e94:	4615      	mov	r5, r2
 8002e96:	7800      	ldrb	r0, [r0, #0]
 8002e98:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002e9c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002ea0:	f005 ff64 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002ea4:	6860      	ldr	r0, [r4, #4]
 8002ea6:	f005 ff59 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002eaa:	2101      	movs	r1, #1
 8002eac:	a801      	add	r0, sp, #4
 8002eae:	f005 ff63 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f006 f9fb 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8002eba:	2102      	movs	r1, #2
 8002ebc:	a801      	add	r0, sp, #4
 8002ebe:	f005 ffc1 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8002ec2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ec6:	ba40      	rev16	r0, r0
 8002ec8:	b280      	uxth	r0, r0
 8002eca:	b002      	add	sp, #8
 8002ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ed0 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002ed0:	880b      	ldrh	r3, [r1, #0]
 8002ed2:	b510      	push	{r4, lr}
 8002ed4:	b1d3      	cbz	r3, 8002f0c <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d102      	bne.n	8002ee2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8002edc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002ee0:	6182      	str	r2, [r0, #24]
 8002ee2:	884a      	ldrh	r2, [r1, #2]
 8002ee4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ee8:	d019      	beq.n	8002f1e <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8002eea:	d812      	bhi.n	8002f12 <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8002eec:	b1da      	cbz	r2, 8002f26 <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8002eee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002ef2:	d016      	beq.n	8002f22 <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	888b      	ldrh	r3, [r1, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	88cb      	ldrh	r3, [r1, #6]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	890b      	ldrh	r3, [r1, #8]
 8002f00:	2100      	movs	r1, #0
 8002f02:	431a      	orrs	r2, r3
 8002f04:	b292      	uxth	r2, r2
 8002f06:	f7ff ffad 	bl	8002e64 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002f0a:	bd10      	pop	{r4, pc}
 8002f0c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002f10:	e7e6      	b.n	8002ee0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002f12:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002f16:	d1ed      	bne.n	8002ef4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002f18:	4c04      	ldr	r4, [pc, #16]	; (8002f2c <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8002f1a:	6144      	str	r4, [r0, #20]
 8002f1c:	e7ea      	b.n	8002ef4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002f1e:	4c04      	ldr	r4, [pc, #16]	; (8002f30 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002f20:	e7fb      	b.n	8002f1a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002f22:	4c04      	ldr	r4, [pc, #16]	; (8002f34 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002f24:	e7f9      	b.n	8002f1a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002f26:	4c04      	ldr	r4, [pc, #16]	; (8002f38 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002f28:	e7f7      	b.n	8002f1a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002f2a:	bf00      	nop
 8002f2c:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002f30:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002f34:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002f38:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08002f3c <sensor::INA219::Calibrate(float, float)>:
 8002f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f40:	61c1      	str	r1, [r0, #28]
 8002f42:	4605      	mov	r5, r0
 8002f44:	460e      	mov	r6, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	491d      	ldr	r1, [pc, #116]	; (8002fc0 <sensor::INA219::Calibrate(float, float)+0x84>)
 8002f4a:	f7fe f8f1 	bl	8001130 <__aeabi_fdiv>
 8002f4e:	491d      	ldr	r1, [pc, #116]	; (8002fc4 <sensor::INA219::Calibrate(float, float)+0x88>)
 8002f50:	f7fe f83a 	bl	8000fc8 <__aeabi_fmul>
 8002f54:	f7fe f988 	bl	8001268 <__aeabi_f2uiz>
 8002f58:	b280      	uxth	r0, r0
 8002f5a:	f7fd f9ef 	bl	800033c <__aeabi_ui2f>
 8002f5e:	4919      	ldr	r1, [pc, #100]	; (8002fc4 <sensor::INA219::Calibrate(float, float)+0x88>)
 8002f60:	f7fe f8e6 	bl	8001130 <__aeabi_fdiv>
 8002f64:	4918      	ldr	r1, [pc, #96]	; (8002fc8 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002f66:	f7fe f8e3 	bl	8001130 <__aeabi_fdiv>
 8002f6a:	4680      	mov	r8, r0
 8002f6c:	f7fd fab4 	bl	80004d8 <__aeabi_f2iz>
 8002f70:	4607      	mov	r7, r0
 8002f72:	f7fd f9e7 	bl	8000344 <__aeabi_i2f>
 8002f76:	4604      	mov	r4, r0
 8002f78:	4601      	mov	r1, r0
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	f7fd fa7a 	bl	8000474 <__aeabi_fcmpeq>
 8002f80:	b918      	cbnz	r0, 8002f8a <sensor::INA219::Calibrate(float, float)+0x4e>
 8002f82:	1c78      	adds	r0, r7, #1
 8002f84:	f7fd f9de 	bl	8000344 <__aeabi_i2f>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002f8e:	f7fe f81b 	bl	8000fc8 <__aeabi_fmul>
 8002f92:	490e      	ldr	r1, [pc, #56]	; (8002fcc <sensor::INA219::Calibrate(float, float)+0x90>)
 8002f94:	60e8      	str	r0, [r5, #12]
 8002f96:	4604      	mov	r4, r0
 8002f98:	f7fe f816 	bl	8000fc8 <__aeabi_fmul>
 8002f9c:	4631      	mov	r1, r6
 8002f9e:	6128      	str	r0, [r5, #16]
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7fe f811 	bl	8000fc8 <__aeabi_fmul>
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	4809      	ldr	r0, [pc, #36]	; (8002fd0 <sensor::INA219::Calibrate(float, float)+0x94>)
 8002faa:	f7fe f8c1 	bl	8001130 <__aeabi_fdiv>
 8002fae:	f7fe f95b 	bl	8001268 <__aeabi_f2uiz>
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	b282      	uxth	r2, r0
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f7ff ff54 	bl	8002e64 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc0:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 8002fc4:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002fc8:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8002fcc:	41a00000 	movmi	r0, r0
 8002fd0:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002fd4 <sensor::INA219::INA219(unsigned char)>:
 8002fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd6:	1e0c      	subs	r4, r1, #0
 8002fd8:	bf08      	it	eq
 8002fda:	2440      	moveq	r4, #64	; 0x40
 8002fdc:	2600      	movs	r6, #0
 8002fde:	4f1a      	ldr	r7, [pc, #104]	; (8003048 <sensor::INA219::INA219(unsigned char)+0x74>)
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	7004      	strb	r4, [r0, #0]
 8002fe4:	6047      	str	r7, [r0, #4]
 8002fe6:	7206      	strb	r6, [r0, #8]
 8002fe8:	4605      	mov	r5, r0
 8002fea:	4620      	mov	r0, r4
 8002fec:	f005 febe 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f005 feb3 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8002ff6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d902      	bls.n	8003004 <sensor::INA219::INA219(unsigned char)+0x30>
 8002ffe:	3c50      	subs	r4, #80	; 0x50
 8003000:	2c0f      	cmp	r4, #15
 8003002:	d81c      	bhi.n	800303e <sensor::INA219::INA219(unsigned char)+0x6a>
 8003004:	2101      	movs	r1, #1
 8003006:	a801      	add	r0, sp, #4
 8003008:	f005 ff1c 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 800300c:	fab0 f080 	clz	r0, r0
 8003010:	0940      	lsrs	r0, r0, #5
 8003012:	7228      	strb	r0, [r5, #8]
 8003014:	b180      	cbz	r0, 8003038 <sensor::INA219::INA219(unsigned char)+0x64>
 8003016:	4a0d      	ldr	r2, [pc, #52]	; (800304c <sensor::INA219::INA219(unsigned char)+0x78>)
 8003018:	ab01      	add	r3, sp, #4
 800301a:	6810      	ldr	r0, [r2, #0]
 800301c:	6851      	ldr	r1, [r2, #4]
 800301e:	8912      	ldrh	r2, [r2, #8]
 8003020:	c303      	stmia	r3!, {r0, r1}
 8003022:	4628      	mov	r0, r5
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	a901      	add	r1, sp, #4
 8003028:	f7ff ff52 	bl	8002ed0 <sensor::INA219::Configure(sensor::ina219::Config&)>
 800302c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003030:	4628      	mov	r0, r5
 8003032:	4907      	ldr	r1, [pc, #28]	; (8003050 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8003034:	f7ff ff82 	bl	8002f3c <sensor::INA219::Calibrate(float, float)>
 8003038:	4628      	mov	r0, r5
 800303a:	b005      	add	sp, #20
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303e:	4631      	mov	r1, r6
 8003040:	4630      	mov	r0, r6
 8003042:	f005 fe99 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8003046:	e7e1      	b.n	800300c <sensor::INA219::INA219(unsigned char)+0x38>
 8003048:	00061a80 	andeq	r1, r6, r0, lsl #21
 800304c:	080096cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, pc}
 8003050:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08003054 <sensor::INA219::GetShuntCurrent()>:
 8003054:	b510      	push	{r4, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	f44f 7248 	mov.w	r2, #800	; 0x320
 800305c:	2104      	movs	r1, #4
 800305e:	f7ff ff16 	bl	8002e8e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8003062:	f7fd f96f 	bl	8000344 <__aeabi_i2f>
 8003066:	68e1      	ldr	r1, [r4, #12]
 8003068:	f7fd ffae 	bl	8000fc8 <__aeabi_fmul>
 800306c:	bd10      	pop	{r4, pc}

0800306e <sensor::INA219::GetBusVoltageRaw()>:
 800306e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003072:	2102      	movs	r1, #2
 8003074:	b508      	push	{r3, lr}
 8003076:	f7ff ff0a 	bl	8002e8e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 800307a:	f340 004f 	sbfx	r0, r0, #1, #16
 800307e:	f020 0003 	bic.w	r0, r0, #3
 8003082:	bd08      	pop	{r3, pc}

08003084 <sensor::INA219::GetBusVoltage()>:
 8003084:	b508      	push	{r3, lr}
 8003086:	f7ff fff2 	bl	800306e <sensor::INA219::GetBusVoltageRaw()>
 800308a:	f7fd f95b 	bl	8000344 <__aeabi_i2f>
 800308e:	4902      	ldr	r1, [pc, #8]	; (8003098 <sensor::INA219::GetBusVoltage()+0x14>)
 8003090:	f7fd ff9a 	bl	8000fc8 <__aeabi_fmul>
 8003094:	bd08      	pop	{r3, pc}
 8003096:	bf00      	nop
 8003098:	3a83126f 	bcc	60c7a5c <__heap_size+0x60c6a5c>

0800309c <sensor::INA219::GetBusPower()>:
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80030a4:	2103      	movs	r1, #3
 80030a6:	f7ff fef2 	bl	8002e8e <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80030aa:	f7fd f94b 	bl	8000344 <__aeabi_i2f>
 80030ae:	6921      	ldr	r1, [r4, #16]
 80030b0:	f7fd ff8a 	bl	8000fc8 <__aeabi_fmul>
 80030b4:	bd10      	pop	{r4, pc}

080030b6 <HAL_I2C::ReadRegister16(unsigned char)>:
 80030b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030b8:	4604      	mov	r4, r0
 80030ba:	2501      	movs	r5, #1
 80030bc:	7800      	ldrb	r0, [r0, #0]
 80030be:	f88d 1000 	strb.w	r1, [sp]
 80030c2:	f88d 5001 	strb.w	r5, [sp, #1]
 80030c6:	f005 fe51 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 80030ca:	6860      	ldr	r0, [r4, #4]
 80030cc:	f005 fe46 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 80030d0:	4629      	mov	r1, r5
 80030d2:	4668      	mov	r0, sp
 80030d4:	f005 fe50 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 80030d8:	2300      	movs	r3, #0
 80030da:	7820      	ldrb	r0, [r4, #0]
 80030dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80030e0:	f005 fe44 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 80030e4:	6860      	ldr	r0, [r4, #4]
 80030e6:	f005 fe39 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 80030ea:	2102      	movs	r1, #2
 80030ec:	a801      	add	r0, sp, #4
 80030ee:	f005 fea9 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 80030f2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80030f6:	ba40      	rev16	r0, r0
 80030f8:	b280      	uxth	r0, r0
 80030fa:	b003      	add	sp, #12
 80030fc:	bd30      	pop	{r4, r5, pc}
	...

08003100 <sensor::MCP9808::MCP9808(unsigned char)>:
 8003100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003102:	1e0d      	subs	r5, r1, #0
 8003104:	bf08      	it	eq
 8003106:	2518      	moveq	r5, #24
 8003108:	2600      	movs	r6, #0
 800310a:	4f1b      	ldr	r7, [pc, #108]	; (8003178 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 800310c:	7005      	strb	r5, [r0, #0]
 800310e:	6047      	str	r7, [r0, #4]
 8003110:	7206      	strb	r6, [r0, #8]
 8003112:	4604      	mov	r4, r0
 8003114:	4628      	mov	r0, r5
 8003116:	f005 fe29 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 800311a:	4638      	mov	r0, r7
 800311c:	f005 fe1e 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8003120:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003124:	2b07      	cmp	r3, #7
 8003126:	d902      	bls.n	800312e <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8003128:	3d50      	subs	r5, #80	; 0x50
 800312a:	2d0f      	cmp	r5, #15
 800312c:	d81f      	bhi.n	800316e <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 800312e:	2101      	movs	r1, #1
 8003130:	f10d 0007 	add.w	r0, sp, #7
 8003134:	f005 fe86 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8003138:	fab0 f080 	clz	r0, r0
 800313c:	0940      	lsrs	r0, r0, #5
 800313e:	7220      	strb	r0, [r4, #8]
 8003140:	b190      	cbz	r0, 8003168 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003142:	2106      	movs	r1, #6
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff ffb6 	bl	80030b6 <HAL_I2C::ReadRegister16(unsigned char)>
 800314a:	2854      	cmp	r0, #84	; 0x54
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	7223      	strb	r3, [r4, #8]
 8003154:	d108      	bne.n	8003168 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003156:	2107      	movs	r1, #7
 8003158:	4620      	mov	r0, r4
 800315a:	f7ff ffac 	bl	80030b6 <HAL_I2C::ReadRegister16(unsigned char)>
 800315e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8003162:	4258      	negs	r0, r3
 8003164:	4158      	adcs	r0, r3
 8003166:	7220      	strb	r0, [r4, #8]
 8003168:	4620      	mov	r0, r4
 800316a:	b003      	add	sp, #12
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316e:	4631      	mov	r1, r6
 8003170:	4630      	mov	r0, r6
 8003172:	f005 fe01 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8003176:	e7df      	b.n	8003138 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8003178:	00061a80 	andeq	r1, r6, r0, lsl #21

0800317c <sensor::MCP9808::Get()>:
 800317c:	b510      	push	{r4, lr}
 800317e:	2105      	movs	r1, #5
 8003180:	f7ff ff99 	bl	80030b6 <HAL_I2C::ReadRegister16(unsigned char)>
 8003184:	4604      	mov	r4, r0
 8003186:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800318a:	f7fd f8db 	bl	8000344 <__aeabi_i2f>
 800318e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8003192:	f7fd ff19 	bl	8000fc8 <__aeabi_fmul>
 8003196:	04e2      	lsls	r2, r4, #19
 8003198:	4603      	mov	r3, r0
 800319a:	d504      	bpl.n	80031a6 <sensor::MCP9808::Get()+0x2a>
 800319c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80031a0:	f7fd f81a 	bl	80001d8 <__aeabi_fsub>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd10      	pop	{r4, pc}
	...

080031ac <sensor::SI7021::SI7021(unsigned char)>:
 80031ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031ae:	1e0c      	subs	r4, r1, #0
 80031b0:	bf08      	it	eq
 80031b2:	2440      	moveq	r4, #64	; 0x40
 80031b4:	2600      	movs	r6, #0
 80031b6:	4f11      	ldr	r7, [pc, #68]	; (80031fc <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80031b8:	7004      	strb	r4, [r0, #0]
 80031ba:	6047      	str	r7, [r0, #4]
 80031bc:	7206      	strb	r6, [r0, #8]
 80031be:	4605      	mov	r5, r0
 80031c0:	4620      	mov	r0, r4
 80031c2:	f005 fdd3 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 80031c6:	4638      	mov	r0, r7
 80031c8:	f005 fdc8 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 80031cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d902      	bls.n	80031da <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80031d4:	3c50      	subs	r4, #80	; 0x50
 80031d6:	2c0f      	cmp	r4, #15
 80031d8:	d80b      	bhi.n	80031f2 <sensor::SI7021::SI7021(unsigned char)+0x46>
 80031da:	2101      	movs	r1, #1
 80031dc:	f10d 0007 	add.w	r0, sp, #7
 80031e0:	f005 fe30 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 80031e4:	fab0 f380 	clz	r3, r0
 80031e8:	4628      	mov	r0, r5
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	722b      	strb	r3, [r5, #8]
 80031ee:	b003      	add	sp, #12
 80031f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f2:	4631      	mov	r1, r6
 80031f4:	4630      	mov	r0, r6
 80031f6:	f005 fdbf 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 80031fa:	e7f3      	b.n	80031e4 <sensor::SI7021::SI7021(unsigned char)+0x38>
 80031fc:	00061a80 	andeq	r1, r6, r0, lsl #21

08003200 <sensor::SI7021::ReadRaw(unsigned char)>:
 8003200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003202:	4604      	mov	r4, r0
 8003204:	7800      	ldrb	r0, [r0, #0]
 8003206:	f88d 1004 	strb.w	r1, [sp, #4]
 800320a:	f005 fdaf 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 800320e:	6860      	ldr	r0, [r4, #4]
 8003210:	f005 fda4 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8003214:	2101      	movs	r1, #1
 8003216:	a801      	add	r0, sp, #4
 8003218:	f005 fdae 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 800321e:	2508      	movs	r5, #8
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003226:	2300      	movs	r3, #0
 8003228:	f88d 3006 	strb.w	r3, [sp, #6]
 800322c:	2100      	movs	r1, #0
 800322e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003232:	f006 f83d 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003236:	7820      	ldrb	r0, [r4, #0]
 8003238:	f005 fd98 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 800323c:	6860      	ldr	r0, [r4, #4]
 800323e:	f005 fd8d 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 8003242:	2103      	movs	r1, #3
 8003244:	a801      	add	r0, sp, #4
 8003246:	f005 fdfd 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 800324a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d001      	beq.n	800325a <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 8003256:	3d01      	subs	r5, #1
 8003258:	d1e8      	bne.n	800322c <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 800325a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800325e:	ba40      	rev16	r0, r0
 8003260:	f020 0003 	bic.w	r0, r0, #3
 8003264:	b280      	uxth	r0, r0
 8003266:	b003      	add	sp, #12
 8003268:	bd30      	pop	{r4, r5, pc}
 800326a:	bf00      	nop
 800326c:	080096d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip, pc}

08003270 <sensor::SI7021::GetTemperature()>:
 8003270:	b508      	push	{r3, lr}
 8003272:	21f3      	movs	r1, #243	; 0xf3
 8003274:	f7ff ffc4 	bl	8003200 <sensor::SI7021::ReadRaw(unsigned char)>
 8003278:	f7fd f860 	bl	800033c <__aeabi_ui2f>
 800327c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8003280:	f7fd fea2 	bl	8000fc8 <__aeabi_fmul>
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <sensor::SI7021::GetTemperature()+0x24>)
 8003286:	f7fd fe9f 	bl	8000fc8 <__aeabi_fmul>
 800328a:	4903      	ldr	r1, [pc, #12]	; (8003298 <sensor::SI7021::GetTemperature()+0x28>)
 800328c:	f7fc ffa4 	bl	80001d8 <__aeabi_fsub>
 8003290:	bd08      	pop	{r3, pc}
 8003292:	bf00      	nop
 8003294:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8003298:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

0800329c <sensor::SI7021::GetHumidity()>:
 800329c:	b508      	push	{r3, lr}
 800329e:	21f5      	movs	r1, #245	; 0xf5
 80032a0:	f7ff ffae 	bl	8003200 <sensor::SI7021::ReadRaw(unsigned char)>
 80032a4:	f7fd f84a 	bl	800033c <__aeabi_ui2f>
 80032a8:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80032ac:	f7fd fe8c 	bl	8000fc8 <__aeabi_fmul>
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <sensor::SI7021::GetHumidity()+0x24>)
 80032b2:	f7fd fe89 	bl	8000fc8 <__aeabi_fmul>
 80032b6:	4903      	ldr	r1, [pc, #12]	; (80032c4 <sensor::SI7021::GetHumidity()+0x28>)
 80032b8:	f7fc ff8e 	bl	80001d8 <__aeabi_fsub>
 80032bc:	bd08      	pop	{r3, pc}
 80032be:	bf00      	nop
 80032c0:	42fa0000 	rscsmi	r0, sl, #0
 80032c4:	40c00000 	sbcmi	r0, r0, r0

080032c8 <RDMSubDevices::RDMSubDevices()>:
 80032c8:	2200      	movs	r2, #0
 80032ca:	6002      	str	r2, [r0, #0]
 80032cc:	8082      	strh	r2, [r0, #4]
 80032ce:	4a01      	ldr	r2, [pc, #4]	; (80032d4 <RDMSubDevices::RDMSubDevices()+0xc>)
 80032d0:	6010      	str	r0, [r2, #0]
 80032d2:	4770      	bx	lr
 80032d4:	200001fc 	strdcs	r0, [r0], -ip

080032d8 <RDMSubDevices::~RDMSubDevices()>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	2500      	movs	r5, #0
 80032dc:	4604      	mov	r4, r0
 80032de:	462f      	mov	r7, r5
 80032e0:	88a3      	ldrh	r3, [r4, #4]
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	d90a      	bls.n	80032fe <RDMSubDevices::~RDMSubDevices()+0x26>
 80032e8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80032ec:	00ae      	lsls	r6, r5, #2
 80032ee:	b110      	cbz	r0, 80032f6 <RDMSubDevices::~RDMSubDevices()+0x1e>
 80032f0:	6803      	ldr	r3, [r0, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4798      	blx	r3
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	3501      	adds	r5, #1
 80032fa:	519f      	str	r7, [r3, r6]
 80032fc:	e7f0      	b.n	80032e0 <RDMSubDevices::~RDMSubDevices()+0x8>
 80032fe:	b108      	cbz	r0, 8003304 <RDMSubDevices::~RDMSubDevices()+0x2c>
 8003300:	f004 fc87 	bl	8007c12 <operator delete[](void*)>
 8003304:	4620      	mov	r0, r4
 8003306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003308 <RDMSubDevices::GetInfo(unsigned short)>:
 8003308:	6803      	ldr	r3, [r0, #0]
 800330a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800330e:	3901      	subs	r1, #1
 8003310:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003314:	3010      	adds	r0, #16
 8003316:	4770      	bx	lr

08003318 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003318:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	3b01      	subs	r3, #1
 8003320:	4611      	mov	r1, r2
 8003322:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003326:	f000 b8c1 	b.w	80034ac <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800332a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800332a:	b410      	push	{r4}
 800332c:	460c      	mov	r4, r1
 800332e:	6800      	ldr	r0, [r0, #0]
 8003330:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003334:	3c01      	subs	r4, #1
 8003336:	4611      	mov	r1, r2
 8003338:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800333c:	461a      	mov	r2, r3
 800333e:	bc10      	pop	{r4}
 8003340:	f000 b8c9 	b.w	80034d6 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003344 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800334a:	3901      	subs	r1, #1
 800334c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003350:	8a58      	ldrh	r0, [r3, #18]
 8003352:	4770      	bx	lr

08003354 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003354:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003358:	6800      	ldr	r0, [r0, #0]
 800335a:	3b01      	subs	r3, #1
 800335c:	4611      	mov	r1, r2
 800335e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003362:	f000 b897 	b.w	8003494 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

08003366 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 8003366:	6803      	ldr	r3, [r0, #0]
 8003368:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800336c:	3901      	subs	r1, #1
 800336e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003372:	8a18      	ldrh	r0, [r3, #16]
 8003374:	4770      	bx	lr

08003376 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 8003376:	6803      	ldr	r3, [r0, #0]
 8003378:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800337c:	3901      	subs	r1, #1
 800337e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003382:	7d18      	ldrb	r0, [r3, #20]
 8003384:	4770      	bx	lr

08003386 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8003386:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	4611      	mov	r1, r2
 8003390:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003394:	f000 b8ae 	b.w	80034f4 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

08003398 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 8003398:	6803      	ldr	r3, [r0, #0]
 800339a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800339e:	3901      	subs	r1, #1
 80033a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033a4:	7d58      	ldrb	r0, [r3, #21]
 80033a6:	4770      	bx	lr

080033a8 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80033a8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80033ac:	6800      	ldr	r0, [r0, #0]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	4611      	mov	r1, r2
 80033b2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80033b6:	f000 b872 	b.w	800349e <RDMSubDevice::GetPersonality(unsigned char)>

080033ba <RDMSubDevices::Start()>:
 80033ba:	b538      	push	{r3, r4, r5, lr}
 80033bc:	4605      	mov	r5, r0
 80033be:	2400      	movs	r4, #0
 80033c0:	88ab      	ldrh	r3, [r5, #4]
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	d908      	bls.n	80033d8 <RDMSubDevices::Start()+0x1e>
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80033cc:	b110      	cbz	r0, 80033d4 <RDMSubDevices::Start()+0x1a>
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4798      	blx	r3
 80033d4:	3401      	adds	r4, #1
 80033d6:	e7f3      	b.n	80033c0 <RDMSubDevices::Start()+0x6>
 80033d8:	bd38      	pop	{r3, r4, r5, pc}

080033da <RDMSubDevices::Stop()>:
 80033da:	b538      	push	{r3, r4, r5, lr}
 80033dc:	4605      	mov	r5, r0
 80033de:	2400      	movs	r4, #0
 80033e0:	88ab      	ldrh	r3, [r5, #4]
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	d908      	bls.n	80033f8 <RDMSubDevices::Stop()+0x1e>
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80033ec:	b110      	cbz	r0, 80033f4 <RDMSubDevices::Stop()+0x1a>
 80033ee:	6803      	ldr	r3, [r0, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	4798      	blx	r3
 80033f4:	3401      	adds	r4, #1
 80033f6:	e7f3      	b.n	80033e0 <RDMSubDevices::Stop()+0x6>
 80033f8:	bd38      	pop	{r3, r4, r5, pc}

080033fa <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 80033fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fc:	4605      	mov	r5, r0
 80033fe:	460f      	mov	r7, r1
 8003400:	4616      	mov	r6, r2
 8003402:	2400      	movs	r4, #0
 8003404:	88ab      	ldrh	r3, [r5, #4]
 8003406:	42a3      	cmp	r3, r4
 8003408:	d911      	bls.n	800342e <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x34>
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003410:	b158      	cbz	r0, 800342a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x30>
 8003412:	8a43      	ldrh	r3, [r0, #18]
 8003414:	8a02      	ldrh	r2, [r0, #16]
 8003416:	4413      	add	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	42b3      	cmp	r3, r6
 800341e:	d804      	bhi.n	800342a <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x30>
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	4632      	mov	r2, r6
 8003424:	4639      	mov	r1, r7
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	4798      	blx	r3
 800342a:	3401      	adds	r4, #1
 800342c:	e7ea      	b.n	8003404 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>
 800342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003430 <RDMSubDevices::GetFactoryDefaults()>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4605      	mov	r5, r0
 8003434:	2400      	movs	r4, #0
 8003436:	88ab      	ldrh	r3, [r5, #4]
 8003438:	42a3      	cmp	r3, r4
 800343a:	d90a      	bls.n	8003452 <RDMSubDevices::GetFactoryDefaults()+0x22>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003442:	b908      	cbnz	r0, 8003448 <RDMSubDevices::GetFactoryDefaults()+0x18>
 8003444:	3401      	adds	r4, #1
 8003446:	e7f6      	b.n	8003436 <RDMSubDevices::GetFactoryDefaults()+0x6>
 8003448:	f000 f87c 	bl	8003544 <RDMSubDevice::GetFactoryDefaults()>
 800344c:	2800      	cmp	r0, #0
 800344e:	d1f9      	bne.n	8003444 <RDMSubDevices::GetFactoryDefaults()+0x14>
 8003450:	bd38      	pop	{r3, r4, r5, pc}
 8003452:	2001      	movs	r0, #1
 8003454:	e7fc      	b.n	8003450 <RDMSubDevices::GetFactoryDefaults()+0x20>

08003456 <RDMSubDevices::SetFactoryDefaults()>:
 8003456:	b538      	push	{r3, r4, r5, lr}
 8003458:	4605      	mov	r5, r0
 800345a:	2400      	movs	r4, #0
 800345c:	88ab      	ldrh	r3, [r5, #4]
 800345e:	42a3      	cmp	r3, r4
 8003460:	d907      	bls.n	8003472 <RDMSubDevices::SetFactoryDefaults()+0x1c>
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003468:	b108      	cbz	r0, 800346e <RDMSubDevices::SetFactoryDefaults()+0x18>
 800346a:	f000 f845 	bl	80034f8 <RDMSubDevice::SetFactoryDefaults()>
 800346e:	3401      	adds	r4, #1
 8003470:	e7f4      	b.n	800345c <RDMSubDevices::SetFactoryDefaults()+0x6>
 8003472:	bd38      	pop	{r3, r4, r5, pc}

08003474 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 8003474:	6001      	str	r1, [r0, #0]
 8003476:	4770      	bx	lr

08003478 <RDMSubDevicesParams::Load()>:
 8003478:	b508      	push	{r3, lr}
 800347a:	2300      	movs	r3, #0
 800347c:	4601      	mov	r1, r0
 800347e:	6043      	str	r3, [r0, #4]
 8003480:	6800      	ldr	r0, [r0, #0]
 8003482:	b120      	cbz	r0, 800348e <RDMSubDevicesParams::Load()+0x16>
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	3104      	adds	r1, #4
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4798      	blx	r3
 800348c:	2001      	movs	r0, #1
 800348e:	bd08      	pop	{r3, pc}

08003490 <RDMSubDevicesParams::Dump()>:
 8003490:	4770      	bx	lr

08003492 <RDMSubDevicesParams::Set()>:
 8003492:	4770      	bx	lr

08003494 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	8241      	strh	r1, [r0, #18]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2100      	movs	r1, #0
 800349c:	4718      	bx	r3

0800349e <RDMSubDevice::GetPersonality(unsigned char)>:
 800349e:	6843      	ldr	r3, [r0, #4]
 80034a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80034a4:	3901      	subs	r1, #1
 80034a6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80034aa:	4770      	bx	lr

080034ac <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80034ac:	f100 0316 	add.w	r3, r0, #22
 80034b0:	600b      	str	r3, [r1, #0]
 80034b2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80034b6:	710b      	strb	r3, [r1, #4]
 80034b8:	4770      	bx	lr

080034ba <RDMSubDevice::SetLabel(char const*)>:
 80034ba:	2300      	movs	r3, #0
 80034bc:	b510      	push	{r4, lr}
 80034be:	f100 0216 	add.w	r2, r0, #22
 80034c2:	5ccc      	ldrb	r4, [r1, r3]
 80034c4:	b124      	cbz	r4, 80034d0 <RDMSubDevice::SetLabel(char const*)+0x16>
 80034c6:	3301      	adds	r3, #1
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	f802 4b01 	strb.w	r4, [r2], #1
 80034ce:	d1f8      	bne.n	80034c2 <RDMSubDevice::SetLabel(char const*)+0x8>
 80034d0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80034d4:	bd10      	pop	{r4, pc}

080034d6 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 80034d6:	2300      	movs	r3, #0
 80034d8:	b530      	push	{r4, r5, lr}
 80034da:	f100 0416 	add.w	r4, r0, #22
 80034de:	429a      	cmp	r2, r3
 80034e0:	d905      	bls.n	80034ee <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 80034e2:	5ccd      	ldrb	r5, [r1, r3]
 80034e4:	3301      	adds	r3, #1
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	f804 5b01 	strb.w	r5, [r4], #1
 80034ec:	d1f7      	bne.n	80034de <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 80034ee:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80034f2:	bd30      	pop	{r4, r5, pc}

080034f4 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 80034f4:	7501      	strb	r1, [r0, #20]
 80034f6:	4770      	bx	lr

080034f8 <RDMSubDevice::SetFactoryDefaults()>:
 80034f8:	7a03      	ldrb	r3, [r0, #8]
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b94b      	cbnz	r3, 8003512 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 80034fe:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8003502:	f7ff ffda 	bl	80034ba <RDMSubDevice::SetLabel(char const*)>
 8003506:	8983      	ldrh	r3, [r0, #12]
 8003508:	8243      	strh	r3, [r0, #18]
 800350a:	7b83      	ldrb	r3, [r0, #14]
 800350c:	7503      	strb	r3, [r0, #20]
 800350e:	2301      	movs	r3, #1
 8003510:	7203      	strb	r3, [r0, #8]
 8003512:	bd10      	pop	{r4, pc}

08003514 <RDMSubDevice::CalculateChecksum()>:
 8003514:	4602      	mov	r2, r0
 8003516:	b510      	push	{r4, lr}
 8003518:	8a43      	ldrh	r3, [r0, #18]
 800351a:	7d00      	ldrb	r0, [r0, #20]
 800351c:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 8003520:	4403      	add	r3, r0
 8003522:	b298      	uxth	r0, r3
 8003524:	f102 0316 	add.w	r3, r2, #22
 8003528:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800352c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003530:	32ea      	adds	r2, #234	; 0xea
 8003532:	18d1      	adds	r1, r2, r3
 8003534:	428c      	cmp	r4, r1
 8003536:	d904      	bls.n	8003542 <RDMSubDevice::CalculateChecksum()+0x2e>
 8003538:	f813 1b01 	ldrb.w	r1, [r3], #1
 800353c:	4408      	add	r0, r1
 800353e:	b280      	uxth	r0, r0
 8003540:	e7f7      	b.n	8003532 <RDMSubDevice::CalculateChecksum()+0x1e>
 8003542:	bd10      	pop	{r4, pc}

08003544 <RDMSubDevice::GetFactoryDefaults()>:
 8003544:	7a03      	ldrb	r3, [r0, #8]
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	b133      	cbz	r3, 800355a <RDMSubDevice::GetFactoryDefaults()+0x16>
 800354c:	f7ff ffe2 	bl	8003514 <RDMSubDevice::CalculateChecksum()>
 8003550:	8963      	ldrh	r3, [r4, #10]
 8003552:	4283      	cmp	r3, r0
 8003554:	bf1c      	itt	ne
 8003556:	2300      	movne	r3, #0
 8003558:	7223      	strbne	r3, [r4, #8]
 800355a:	7a20      	ldrb	r0, [r4, #8]
 800355c:	bd10      	pop	{r4, pc}
	...

08003560 <Rdm::Receive(unsigned int)>:
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <Rdm::Receive(unsigned int)+0xc>)
 8003562:	4601      	mov	r1, r0
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	f000 bc1f 	b.w	8003da8 <Dmx::RdmReceive(unsigned int)>
 800356a:	bf00      	nop
 800356c:	20000638 	andcs	r0, r0, r8, lsr r6

08003570 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003570:	2300      	movs	r3, #0
 8003572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003576:	4604      	mov	r4, r0
 8003578:	460e      	mov	r6, r1
 800357a:	4617      	mov	r7, r2
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800357e:	461a      	mov	r2, r3
 8003580:	4601      	mov	r1, r0
 8003582:	6828      	ldr	r0, [r5, #0]
 8003584:	f000 fa9c 	bl	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003588:	463b      	mov	r3, r7
 800358a:	4632      	mov	r2, r6
 800358c:	4621      	mov	r1, r4
 800358e:	6828      	ldr	r0, [r5, #0]
 8003590:	f000 fbc4 	bl	8003d1c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003594:	2100      	movs	r1, #0
 8003596:	2004      	movs	r0, #4
 8003598:	f005 fe8a 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 800359c:	2301      	movs	r3, #1
 800359e:	4621      	mov	r1, r4
 80035a0:	6828      	ldr	r0, [r5, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035a8:	f000 ba8a 	b.w	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80035ac:	20000638 	andcs	r0, r0, r8, lsr r6

080035b0 <USART2_IRQHandler>:
 80035b0:	b510      	push	{r4, lr}
 80035b2:	f3bf 8f5f 	dmb	sy
 80035b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035ba:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80035be:	f013 0f02 	tst.w	r3, #2
 80035c2:	4b74      	ldr	r3, [pc, #464]	; (8003794 <USART2_IRQHandler+0x1e4>)
 80035c4:	d00e      	beq.n	80035e4 <USART2_IRQHandler+0x34>
 80035c6:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 80035ca:	f021 0102 	bic.w	r1, r1, #2
 80035ce:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
 80035d2:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80035dc:	2202      	movs	r2, #2
 80035de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80035e2:	bd10      	pop	{r4, pc}
 80035e4:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80035e8:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80035ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f0:	290a      	cmp	r1, #10
 80035f2:	f200 80ca 	bhi.w	800378a <USART2_IRQHandler+0x1da>
 80035f6:	e8df f001 	tbb	[pc, r1]
 80035fa:	c810c806 	ldmdagt	r0, {r1, r2, fp, lr, pc}
 80035fe:	6d5f482c 	ldclvs	8, cr4, [pc, #-176]	; 8003554 <RDMSubDevice::GetFactoryDefaults()+0x10>
 8003602:	00ac9886 	adceq	r9, ip, r6, lsl #17
 8003606:	2108      	movs	r1, #8
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	2201      	movs	r2, #1
 800360c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003610:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003614:	f3bf 8f5f 	dmb	sy
 8003618:	e7e3      	b.n	80035e2 <USART2_IRQHandler+0x32>
 800361a:	b11a      	cbz	r2, 8003624 <USART2_IRQHandler+0x74>
 800361c:	2acc      	cmp	r2, #204	; 0xcc
 800361e:	d012      	beq.n	8003646 <USART2_IRQHandler+0x96>
 8003620:	2200      	movs	r2, #0
 8003622:	e00d      	b.n	8003640 <USART2_IRQHandler+0x90>
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800362c:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <USART2_IRQHandler+0x1e8>)
 800362e:	6851      	ldr	r1, [r2, #4]
 8003630:	3101      	adds	r1, #1
 8003632:	6051      	str	r1, [r2, #4]
 8003634:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003638:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 800363c:	60d1      	str	r1, [r2, #12]
 800363e:	2204      	movs	r2, #4
 8003640:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003644:	e7e6      	b.n	8003614 <USART2_IRQHandler+0x64>
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	4a54      	ldr	r2, [pc, #336]	; (800379c <USART2_IRQHandler+0x1ec>)
 800364a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800364e:	2205      	movs	r2, #5
 8003650:	e7f6      	b.n	8003640 <USART2_IRQHandler+0x90>
 8003652:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003656:	b288      	uxth	r0, r1
 8003658:	541a      	strb	r2, [r3, r0]
 800365a:	1c4a      	adds	r2, r1, #1
 800365c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003664:	d904      	bls.n	8003670 <USART2_IRQHandler+0xc0>
 8003666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800366e:	e7d7      	b.n	8003620 <USART2_IRQHandler+0x70>
 8003670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003674:	4848      	ldr	r0, [pc, #288]	; (8003798 <USART2_IRQHandler+0x1e8>)
 8003676:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 800367a:	68c3      	ldr	r3, [r0, #12]
 800367c:	60c1      	str	r1, [r0, #12]
 800367e:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 8003682:	3304      	adds	r3, #4
 8003684:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8003688:	e7c4      	b.n	8003614 <USART2_IRQHandler+0x64>
 800368a:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800368e:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 8003692:	541a      	strb	r2, [r3, r0]
 8003694:	1c41      	adds	r1, r0, #1
 8003696:	3817      	subs	r0, #23
 8003698:	b289      	uxth	r1, r1
 800369a:	4422      	add	r2, r4
 800369c:	28e7      	cmp	r0, #231	; 0xe7
 800369e:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80036a2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80036a6:	d804      	bhi.n	80036b2 <USART2_IRQHandler+0x102>
 80036a8:	789a      	ldrb	r2, [r3, #2]
 80036aa:	428a      	cmp	r2, r1
 80036ac:	d101      	bne.n	80036b2 <USART2_IRQHandler+0x102>
 80036ae:	2206      	movs	r2, #6
 80036b0:	e7c6      	b.n	8003640 <USART2_IRQHandler+0x90>
 80036b2:	29ff      	cmp	r1, #255	; 0xff
 80036b4:	d9ae      	bls.n	8003614 <USART2_IRQHandler+0x64>
 80036b6:	e7b3      	b.n	8003620 <USART2_IRQHandler+0x70>
 80036b8:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80036bc:	545a      	strb	r2, [r3, r1]
 80036be:	3101      	adds	r1, #1
 80036c0:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80036c4:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80036c8:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 80036cc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80036d0:	2207      	movs	r2, #7
 80036d2:	e7b5      	b.n	8003640 <USART2_IRQHandler+0x90>
 80036d4:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80036d8:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80036dc:	545a      	strb	r2, [r3, r1]
 80036de:	1a82      	subs	r2, r0, r2
 80036e0:	b292      	uxth	r2, r2
 80036e2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80036e6:	b912      	cbnz	r2, 80036ee <USART2_IRQHandler+0x13e>
 80036e8:	785a      	ldrb	r2, [r3, #1]
 80036ea:	2a01      	cmp	r2, #1
 80036ec:	d001      	beq.n	80036f2 <USART2_IRQHandler+0x142>
 80036ee:	2200      	movs	r2, #0
 80036f0:	e7bb      	b.n	800366a <USART2_IRQHandler+0xba>
 80036f2:	3101      	adds	r1, #1
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <USART2_IRQHandler+0x1f0>)
 80036f6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80036fa:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80036fe:	6851      	ldr	r1, [r2, #4]
 8003700:	4a28      	ldr	r2, [pc, #160]	; (80037a4 <USART2_IRQHandler+0x1f4>)
 8003702:	6011      	str	r1, [r2, #0]
 8003704:	e78c      	b.n	8003620 <USART2_IRQHandler+0x70>
 8003706:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800370a:	2aaa      	cmp	r2, #170	; 0xaa
 800370c:	545a      	strb	r2, [r3, r1]
 800370e:	f101 0101 	add.w	r1, r1, #1
 8003712:	b289      	uxth	r1, r1
 8003714:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003718:	d002      	beq.n	8003720 <USART2_IRQHandler+0x170>
 800371a:	2909      	cmp	r1, #9
 800371c:	f47f af7a 	bne.w	8003614 <USART2_IRQHandler+0x64>
 8003720:	2200      	movs	r2, #0
 8003722:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003726:	2209      	movs	r2, #9
 8003728:	e78a      	b.n	8003640 <USART2_IRQHandler+0x90>
 800372a:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800372e:	545a      	strb	r2, [r3, r1]
 8003730:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8003734:	3101      	adds	r1, #1
 8003736:	3201      	adds	r2, #1
 8003738:	b292      	uxth	r2, r2
 800373a:	2a0c      	cmp	r2, #12
 800373c:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003740:	d002      	beq.n	8003748 <USART2_IRQHandler+0x198>
 8003742:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003746:	e765      	b.n	8003614 <USART2_IRQHandler+0x64>
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800374e:	220a      	movs	r2, #10
 8003750:	e776      	b.n	8003640 <USART2_IRQHandler+0x90>
 8003752:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8003756:	545a      	strb	r2, [r3, r1]
 8003758:	1c4a      	adds	r2, r1, #1
 800375a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800375e:	b292      	uxth	r2, r2
 8003760:	3101      	adds	r1, #1
 8003762:	b289      	uxth	r1, r1
 8003764:	2904      	cmp	r1, #4
 8003766:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800376a:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800376e:	f47f af51 	bne.w	8003614 <USART2_IRQHandler+0x64>
 8003772:	2100      	movs	r1, #0
 8003774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003778:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800377c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <USART2_IRQHandler+0x1f0>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <USART2_IRQHandler+0x1f4>)
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e744      	b.n	8003614 <USART2_IRQHandler+0x64>
 800378a:	2200      	movs	r2, #0
 800378c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003790:	e756      	b.n	8003640 <USART2_IRQHandler+0x90>
 8003792:	bf00      	nop
 8003794:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003798:	20000628 	andcs	r0, r0, r8, lsr #12
 800379c:	00cc0001 	sbceq	r0, ip, r1
 80037a0:	e0001000 	and	r1, r0, r0
 80037a4:	2000063c 	andcs	r0, r0, ip, lsr r6

080037a8 <TIMER1_IRQHandler>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	f3bf 8f5f 	dmb	sy
 80037ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037b2:	691c      	ldr	r4, [r3, #16]
 80037b4:	4e1f      	ldr	r6, [pc, #124]	; (8003834 <TIMER1_IRQHandler+0x8c>)
 80037b6:	07a7      	lsls	r7, r4, #30
 80037b8:	8835      	ldrh	r5, [r6, #0]
 80037ba:	d518      	bpl.n	80037ee <TIMER1_IRQHandler+0x46>
 80037bc:	4f1e      	ldr	r7, [pc, #120]	; (8003838 <TIMER1_IRQHandler+0x90>)
 80037be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c2:	2203      	movs	r2, #3
 80037c4:	2110      	movs	r1, #16
 80037c6:	4638      	mov	r0, r7
 80037c8:	f004 fe28 	bl	800841c <gpio_init>
 80037cc:	07ed      	lsls	r5, r5, #31
 80037ce:	d506      	bpl.n	80037de <TIMER1_IRQHandler+0x36>
 80037d0:	8833      	ldrh	r3, [r6, #0]
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	8033      	strh	r3, [r6, #0]
 80037d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	4621      	mov	r1, r4
 80037e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037e4:	f005 f91d 	bl	8008a22 <timer_interrupt_flag_clear>
 80037e8:	f3bf 8f5f 	dmb	sy
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ee:	0760      	lsls	r0, r4, #29
 80037f0:	d509      	bpl.n	8003806 <TIMER1_IRQHandler+0x5e>
 80037f2:	05e9      	lsls	r1, r5, #23
 80037f4:	d5f3      	bpl.n	80037de <TIMER1_IRQHandler+0x36>
 80037f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fa:	2203      	movs	r2, #3
 80037fc:	2118      	movs	r1, #24
 80037fe:	480e      	ldr	r0, [pc, #56]	; (8003838 <TIMER1_IRQHandler+0x90>)
 8003800:	f004 fe0c 	bl	800841c <gpio_init>
 8003804:	e7eb      	b.n	80037de <TIMER1_IRQHandler+0x36>
 8003806:	0722      	lsls	r2, r4, #28
 8003808:	d5e9      	bpl.n	80037de <TIMER1_IRQHandler+0x36>
 800380a:	05eb      	lsls	r3, r5, #23
 800380c:	d5e7      	bpl.n	80037de <TIMER1_IRQHandler+0x36>
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <TIMER1_IRQHandler+0x94>)
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	480a      	ldr	r0, [pc, #40]	; (8003840 <TIMER1_IRQHandler+0x98>)
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	61da      	str	r2, [r3, #28]
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <TIMER1_IRQHandler+0x9c>)
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
 8003820:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8003824:	621a      	str	r2, [r3, #32]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	f005 f997 	bl	8008b60 <usart_dma_transmit_config>
 8003832:	e7d4      	b.n	80037de <TIMER1_IRQHandler+0x36>
 8003834:	20000624 	andcs	r0, r0, r4, lsr #12
 8003838:	40011000 	andmi	r1, r1, r0
 800383c:	40020000 	andmi	r0, r2, r0
 8003840:	40004800 	andmi	r4, r0, r0, lsl #16
 8003844:	2000041c 	andcs	r0, r0, ip, lsl r4

08003848 <TIMER2_IRQHandler>:
 8003848:	b508      	push	{r3, lr}
 800384a:	f3bf 8f5f 	dmb	sy
 800384e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003852:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8003856:	078b      	lsls	r3, r1, #30
 8003858:	d50d      	bpl.n	8003876 <TIMER2_IRQHandler+0x2e>
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <TIMER2_IRQHandler+0x3c>)
 800385c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003860:	2a04      	cmp	r2, #4
 8003862:	d108      	bne.n	8003876 <TIMER2_IRQHandler+0x2e>
 8003864:	2200      	movs	r2, #0
 8003866:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800386a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800386e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003876:	4804      	ldr	r0, [pc, #16]	; (8003888 <TIMER2_IRQHandler+0x40>)
 8003878:	f005 f8d3 	bl	8008a22 <timer_interrupt_flag_clear>
 800387c:	f3bf 8f5f 	dmb	sy
 8003880:	bd08      	pop	{r3, pc}
 8003882:	bf00      	nop
 8003884:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003888:	40000400 	andmi	r0, r0, r0, lsl #8

0800388c <TIMER3_IRQHandler>:
 800388c:	b508      	push	{r3, lr}
 800388e:	f3bf 8f5f 	dmb	sy
 8003892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003896:	4804      	ldr	r0, [pc, #16]	; (80038a8 <TIMER3_IRQHandler+0x1c>)
 8003898:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800389c:	f005 f8c1 	bl	8008a22 <timer_interrupt_flag_clear>
 80038a0:	f3bf 8f5f 	dmb	sy
 80038a4:	bd08      	pop	{r3, pc}
 80038a6:	bf00      	nop
 80038a8:	40000800 	andmi	r0, r0, r0, lsl #16

080038ac <TIMER6_IRQHandler>:
 80038ac:	b508      	push	{r3, lr}
 80038ae:	f3bf 8f5f 	dmb	sy
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <TIMER6_IRQHandler+0x24>)
 80038b4:	4807      	ldr	r0, [pc, #28]	; (80038d4 <TIMER6_IRQHandler+0x28>)
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	1a52      	subs	r2, r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	2101      	movs	r1, #1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	f005 f8ad 	bl	8008a22 <timer_interrupt_flag_clear>
 80038c8:	f3bf 8f5f 	dmb	sy
 80038cc:	bd08      	pop	{r3, pc}
 80038ce:	bf00      	nop
 80038d0:	20000628 	andcs	r0, r0, r8, lsr #12
 80038d4:	40001400 	andmi	r1, r0, r0, lsl #8

080038d8 <Dmx::ClearData(unsigned int)>:
 80038d8:	f44f 7301 	mov.w	r3, #516	; 0x204
 80038dc:	b510      	push	{r4, lr}
 80038de:	2400      	movs	r4, #0
 80038e0:	4a08      	ldr	r2, [pc, #32]	; (8003904 <Dmx::ClearData(unsigned int)+0x2c>)
 80038e2:	fb03 2301 	mla	r3, r3, r1, r2
 80038e6:	f203 2002 	addw	r0, r3, #514	; 0x202
 80038ea:	f823 4b02 	strh.w	r4, [r3], #2
 80038ee:	4283      	cmp	r3, r0
 80038f0:	d1fb      	bne.n	80038ea <Dmx::ClearData(unsigned int)+0x12>
 80038f2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80038f6:	fb03 2201 	mla	r2, r3, r1, r2
 80038fa:	f240 2301 	movw	r3, #513	; 0x201
 80038fe:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 8003902:	bd10      	pop	{r4, pc}
 8003904:	2000041c 	andcs	r0, r0, ip, lsl r4

08003908 <Dmx::StartData(unsigned int, unsigned int)>:
 8003908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800390e:	6943      	ldr	r3, [r0, #20]
 8003910:	460c      	mov	r4, r1
 8003912:	4615      	mov	r5, r2
 8003914:	b085      	sub	sp, #20
 8003916:	2b00      	cmp	r3, #0
 8003918:	d16a      	bne.n	80039f0 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800391a:	4e48      	ldr	r6, [pc, #288]	; (8003a3c <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800391c:	8834      	ldrh	r4, [r6, #0]
 800391e:	2c00      	cmp	r4, #0
 8003920:	d15b      	bne.n	80039da <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 8003922:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8003926:	f004 fe15 	bl	8008554 <rcu_periph_clock_enable>
 800392a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800392e:	f004 ff81 	bl	8008834 <timer_deinit>
 8003932:	236b      	movs	r3, #107	; 0x6b
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	4b42      	ldr	r3, [pc, #264]	; (8003a40 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 8003938:	4669      	mov	r1, sp
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	f8ad 4004 	strh.w	r4, [sp, #4]
 8003946:	f8ad 400c 	strh.w	r4, [sp, #12]
 800394a:	f88d 400e 	strb.w	r4, [sp, #14]
 800394e:	f004 ffd3 	bl	80088f8 <timer_init>
 8003952:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003956:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800395a:	f005 f865 	bl	8008a28 <timer_flag_clear>
 800395e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003962:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003966:	f005 f85c 	bl	8008a22 <timer_interrupt_flag_clear>
 800396a:	2210      	movs	r2, #16
 800396c:	4621      	mov	r1, r4
 800396e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003972:	f005 f81e 	bl	80089b2 <timer_channel_output_mode_config>
 8003976:	2210      	movs	r2, #16
 8003978:	2101      	movs	r1, #1
 800397a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800397e:	f005 f818 	bl	80089b2 <timer_channel_output_mode_config>
 8003982:	4f30      	ldr	r7, [pc, #192]	; (8003a44 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003984:	2210      	movs	r2, #16
 8003986:	2102      	movs	r1, #2
 8003988:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800398c:	f005 f811 	bl	80089b2 <timer_channel_output_mode_config>
 8003990:	4622      	mov	r2, r4
 8003992:	4621      	mov	r1, r4
 8003994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003998:	f005 f831 	bl	80089fe <timer_channel_output_pulse_value_config>
 800399c:	2101      	movs	r1, #1
 800399e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039a2:	883a      	ldrh	r2, [r7, #0]
 80039a4:	f005 f82b 	bl	80089fe <timer_channel_output_pulse_value_config>
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2102      	movs	r1, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	b292      	uxth	r2, r2
 80039b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039b8:	f005 f821 	bl	80089fe <timer_channel_output_pulse_value_config>
 80039bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039c0:	210e      	movs	r1, #14
 80039c2:	f005 f82a 	bl	8008a1a <timer_interrupt_enable>
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 80039cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039d0:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f004 ffe7 	bl	80089a8 <timer_enable>
 80039da:	2201      	movs	r2, #1
 80039dc:	8831      	ldrh	r1, [r6, #0]
 80039de:	fa02 f305 	lsl.w	r3, r2, r5
 80039e2:	430b      	orrs	r3, r1
 80039e4:	8033      	strh	r3, [r6, #0]
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 80039e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80039ec:	b005      	add	sp, #20
 80039ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f0:	f44f 7204 	mov.w	r2, #528	; 0x210
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 80039f6:	fb02 3305 	mla	r3, r2, r5, r3
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003a00:	2107      	movs	r1, #7
 8003a02:	4620      	mov	r0, r4
 8003a04:	f005 f8b2 	bl	8008b6c <usart_flag_get>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0f9      	beq.n	8003a00 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a10:	4620      	mov	r0, r4
 8003a12:	f005 f8cc 	bl	8008bae <usart_interrupt_flag_clear>
 8003a16:	f240 3105 	movw	r1, #773	; 0x305
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f005 f8ae 	bl	8008b7c <usart_interrupt_enable>
 8003a20:	2202      	movs	r2, #2
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003a24:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003a38:	e7d8      	b.n	80039ec <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 8003a3a:	bf00      	nop
 8003a3c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003a40:	20000000 	andcs	r0, r0, r0
 8003a44:	20000008 	andcs	r0, r0, r8
 8003a48:	20000004 	andcs	r0, r0, r4
 8003a4c:	e000e100 	and	lr, r0, r0, lsl #2
 8003a50:	20000620 	andcs	r0, r0, r0, lsr #12
 8003a54:	2000020c 	andcs	r0, r0, ip, lsl #4

08003a58 <Dmx::StopData(unsigned int, unsigned int)>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4d16      	ldr	r5, [pc, #88]	; (8003ab4 <Dmx::StopData(unsigned int, unsigned int)+0x5c>)
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8003a62:	4603      	mov	r3, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	b17a      	cbz	r2, 8003a88 <Dmx::StopData(unsigned int, unsigned int)+0x30>
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	b973      	cbnz	r3, 8003a8a <Dmx::StopData(unsigned int, unsigned int)+0x32>
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4912      	ldr	r1, [pc, #72]	; (8003ab8 <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 8003a70:	f104 0308 	add.w	r3, r4, #8
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	40a2      	lsls	r2, r4
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	880a      	ldrh	r2, [r1, #0]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	800b      	strh	r3, [r1, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
 8003a8a:	f240 3105 	movw	r1, #773	; 0x305
 8003a8e:	f005 f881 	bl	8008b94 <usart_interrupt_disable>
 8003a92:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 8003a98:	fb02 3304 	mla	r3, r2, r4, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003aaa:	f023 0302 	bic.w	r3, r3, #2
 8003aae:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003ab2:	e7e6      	b.n	8003a82 <Dmx::StopData(unsigned int, unsigned int)+0x2a>
 8003ab4:	20000620 	andcs	r0, r0, r0, lsr #12
 8003ab8:	20000624 	andcs	r0, r0, r4, lsr #12
 8003abc:	2000020c 	andcs	r0, r0, ip, lsl #4

08003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	6943      	ldr	r3, [r0, #20]
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	4614      	mov	r4, r2
 8003acc:	d014      	beq.n	8003af8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 8003ace:	6142      	str	r2, [r0, #20]
 8003ad0:	4910      	ldr	r1, [pc, #64]	; (8003b14 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f7ff ffc0 	bl	8003a58 <Dmx::StopData(unsigned int, unsigned int)>
 8003ad8:	b934      	cbnz	r4, 8003ae8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 8003ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003ae0:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003ae4:	b94d      	cbnz	r5, 8003afa <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	2c01      	cmp	r4, #1
 8003aea:	d1fb      	bne.n	8003ae4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003af2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003af6:	e7f5      	b.n	8003ae4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003af8:	b135      	cbz	r5, 8003b08 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 8003afa:	4630      	mov	r0, r6
 8003afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b00:	2200      	movs	r2, #0
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003b04:	f7ff bf00 	b.w	8003908 <Dmx::StartData(unsigned int, unsigned int)>
 8003b08:	462a      	mov	r2, r5
 8003b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b0e:	4901      	ldr	r1, [pc, #4]	; (8003b14 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003b10:	f7ff bfa2 	b.w	8003a58 <Dmx::StopData(unsigned int, unsigned int)>
 8003b14:	40004800 	andmi	r4, r0, r0, lsl #16
 8003b18:	40010000 	andmi	r0, r1, r0

08003b1c <Dmx::Dmx()>:
 8003b1c:	225c      	movs	r2, #92	; 0x5c
 8003b1e:	230c      	movs	r3, #12
 8003b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b24:	e9c0 2300 	strd	r2, r3, [r0]
 8003b28:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003b2c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b34:	2400      	movs	r4, #0
 8003b36:	4605      	mov	r5, r0
 8003b38:	8203      	strh	r3, [r0, #16]
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <Dmx::Dmx()+0x19c>)
 8003b3c:	b08b      	sub	sp, #44	; 0x2c
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <Dmx::Dmx()+0x1a0>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	801c      	strh	r4, [r3, #0]
 8003b46:	2110      	movs	r1, #16
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	485c      	ldr	r0, [pc, #368]	; (8003cc0 <Dmx::Dmx()+0x1a4>)
 8003b4e:	f004 fc65 	bl	800841c <gpio_init>
 8003b52:	4621      	mov	r1, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7ff febf 	bl	80038d8 <Dmx::ClearData(unsigned int)>
 8003b5a:	4b5a      	ldr	r3, [pc, #360]	; (8003cc4 <Dmx::Dmx()+0x1a8>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4628      	mov	r0, r5
 8003b60:	601c      	str	r4, [r3, #0]
 8003b62:	4623      	mov	r3, r4
 8003b64:	f7ff ffac 	bl	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003b68:	4b57      	ldr	r3, [pc, #348]	; (8003cc8 <Dmx::Dmx()+0x1ac>)
 8003b6a:	4e58      	ldr	r6, [pc, #352]	; (8003ccc <Dmx::Dmx()+0x1b0>)
 8003b6c:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003b70:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003b74:	f004 fcee 	bl	8008554 <rcu_periph_clock_enable>
 8003b78:	f240 5001 	movw	r0, #1281	; 0x501
 8003b7c:	f004 fcea 	bl	8008554 <rcu_periph_clock_enable>
 8003b80:	4630      	mov	r0, r6
 8003b82:	2101      	movs	r1, #1
 8003b84:	f004 fb46 	bl	8008214 <dma_deinit>
 8003b88:	4b51      	ldr	r3, [pc, #324]	; (8003cd0 <Dmx::Dmx()+0x1b4>)
 8003b8a:	2701      	movs	r7, #1
 8003b8c:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8003b90:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8003b94:	aa03      	add	r2, sp, #12
 8003b96:	9307      	str	r3, [sp, #28]
 8003b98:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <Dmx::Dmx()+0x1b8>)
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ba4:	9308      	str	r3, [sp, #32]
 8003ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003baa:	4630      	mov	r0, r6
 8003bac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003bb0:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8003bb4:	f004 fb4a 	bl	800824c <dma_init>
 8003bb8:	4639      	mov	r1, r7
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f004 fb80 	bl	80082c0 <dma_circulation_disable>
 8003bc0:	4639      	mov	r1, r7
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f004 fb8c 	bl	80082e0 <dma_memory_to_memory_disable>
 8003bc8:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 8003bcc:	f240 7001 	movw	r0, #1793	; 0x701
 8003bd0:	f004 fcc0 	bl	8008554 <rcu_periph_clock_enable>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f004 fe2d 	bl	8008834 <timer_deinit>
 8003bda:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003bde:	236b      	movs	r3, #107	; 0x6b
 8003be0:	4630      	mov	r0, r6
 8003be2:	a903      	add	r1, sp, #12
 8003be4:	9303      	str	r3, [sp, #12]
 8003be6:	f8ad 4010 	strh.w	r4, [sp, #16]
 8003bea:	f8cd 9014 	str.w	r9, [sp, #20]
 8003bee:	f8ad 4018 	strh.w	r4, [sp, #24]
 8003bf2:	f88d 401a 	strb.w	r4, [sp, #26]
 8003bf6:	f004 fe7f 	bl	80088f8 <timer_init>
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f004 ff13 	bl	8008a28 <timer_flag_clear>
 8003c02:	4649      	mov	r1, r9
 8003c04:	4630      	mov	r0, r6
 8003c06:	f004 ff0c 	bl	8008a22 <timer_interrupt_flag_clear>
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	2210      	movs	r2, #16
 8003c10:	f004 fecf 	bl	80089b2 <timer_channel_output_mode_config>
 8003c14:	4639      	mov	r1, r7
 8003c16:	4630      	mov	r0, r6
 8003c18:	2210      	movs	r2, #16
 8003c1a:	f004 feca 	bl	80089b2 <timer_channel_output_mode_config>
 8003c1e:	4630      	mov	r0, r6
 8003c20:	2210      	movs	r2, #16
 8003c22:	2102      	movs	r1, #2
 8003c24:	f004 fec5 	bl	80089b2 <timer_channel_output_mode_config>
 8003c28:	2210      	movs	r2, #16
 8003c2a:	2103      	movs	r1, #3
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f004 fec0 	bl	80089b2 <timer_channel_output_mode_config>
 8003c32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003c36:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003cd8 <Dmx::Dmx()+0x1bc>
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003c40:	f8c8 3000 	str.w	r3, [r8]
 8003c44:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003c48:	f004 feae 	bl	80089a8 <timer_enable>
 8003c4c:	f240 7005 	movw	r0, #1797	; 0x705
 8003c50:	f004 fc80 	bl	8008554 <rcu_periph_clock_enable>
 8003c54:	4630      	mov	r0, r6
 8003c56:	f004 fded 	bl	8008834 <timer_deinit>
 8003c5a:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8003c5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003c62:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c66:	4630      	mov	r0, r6
 8003c68:	a903      	add	r1, sp, #12
 8003c6a:	9305      	str	r3, [sp, #20]
 8003c6c:	f004 fe44 	bl	80088f8 <timer_init>
 8003c70:	4649      	mov	r1, r9
 8003c72:	4630      	mov	r0, r6
 8003c74:	f004 fed8 	bl	8008a28 <timer_flag_clear>
 8003c78:	4649      	mov	r1, r9
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f004 fed1 	bl	8008a22 <timer_interrupt_flag_clear>
 8003c80:	4639      	mov	r1, r7
 8003c82:	4630      	mov	r0, r6
 8003c84:	f004 fec9 	bl	8008a1a <timer_interrupt_enable>
 8003c88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003c92:	f8c8 3004 	str.w	r3, [r8, #4]
 8003c96:	f004 fe87 	bl	80089a8 <timer_enable>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <Dmx::Dmx()+0x1c0>)
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	480e      	ldr	r0, [pc, #56]	; (8003ce0 <Dmx::Dmx()+0x1c4>)
 8003ca6:	f005 fa1f 	bl	80090e8 <gd32_uart_begin>
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	4628      	mov	r0, r5
 8003cae:	f8c8 3004 	str.w	r3, [r8, #4]
 8003cb2:	b00b      	add	sp, #44	; 0x2c
 8003cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cb8:	20000638 	andcs	r0, r0, r8, lsr r6
 8003cbc:	20000624 	andcs	r0, r0, r4, lsr #12
 8003cc0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003cc4:	20000620 	andcs	r0, r0, r0, lsr #12
 8003cc8:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003ccc:	40020000 	andmi	r0, r2, r0
 8003cd0:	2000041c 	andcs	r0, r0, ip, lsl r4
 8003cd4:	40004804 	andmi	r4, r0, r4, lsl #16
 8003cd8:	e000e100 	and	lr, r0, r0, lsl #2
 8003cdc:	0003d090 	muleq	r3, r0, r0
 8003ce0:	40004800 	andmi	r4, r0, r0, lsl #16

08003ce4 <Dmx::GetDmxAvailable(unsigned int)>:
 8003ce4:	f44f 7304 	mov.w	r3, #528	; 0x210
 8003ce8:	4807      	ldr	r0, [pc, #28]	; (8003d08 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003cea:	fb03 0001 	mla	r0, r3, r1, r0
 8003cee:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003cf2:	f413 4100 	ands.w	r1, r3, #32768	; 0x8000
 8003cf6:	bf1b      	ittet	ne
 8003cf8:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8003cfc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003d00:	4608      	moveq	r0, r1
 8003d02:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8003d06:	4770      	bx	lr
 8003d08:	2000020c 	andcs	r0, r0, ip, lsl #4

08003d0c <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8003d0c:	f3bf 8f5f 	dmb	sy
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003d12:	0109      	lsls	r1, r1, #4
 8003d14:	5858      	ldr	r0, [r3, r1]
 8003d16:	4770      	bx	lr
 8003d18:	20000628 	andcs	r0, r0, r8, lsr #12

08003d1c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	4614      	mov	r4, r2
 8003d20:	461d      	mov	r5, r3
 8003d22:	4e1f      	ldr	r6, [pc, #124]	; (8003da0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003d24:	2106      	movs	r1, #6
 8003d26:	4630      	mov	r0, r6
 8003d28:	f004 ff20 	bl	8008b6c <usart_flag_get>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d0f9      	beq.n	8003d24 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003d30:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003d34:	4e1b      	ldr	r6, [pc, #108]	; (8003da4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	2110      	movs	r1, #16
 8003d40:	f004 fb6c 	bl	800841c <gpio_init>
 8003d44:	6177      	str	r7, [r6, #20]
 8003d46:	2100      	movs	r1, #0
 8003d48:	20b0      	movs	r0, #176	; 0xb0
 8003d4a:	f005 fab1 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4630      	mov	r0, r6
 8003d52:	2203      	movs	r2, #3
 8003d54:	2118      	movs	r1, #24
 8003d56:	f004 fb61 	bl	800841c <gpio_init>
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	200c      	movs	r0, #12
 8003d5e:	f005 faa7 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003d62:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003d66:	4f0e      	ldr	r7, [pc, #56]	; (8003da0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003d68:	4425      	add	r5, r4
 8003d6a:	42ac      	cmp	r4, r5
 8003d6c:	d10b      	bne.n	8003d86 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8003d6e:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
 8003d72:	4d0b      	ldr	r5, [pc, #44]	; (8003da0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003d74:	2106      	movs	r1, #6
 8003d76:	4628      	mov	r0, r5
 8003d78:	f004 fef8 	bl	8008b6c <usart_flag_get>
 8003d7c:	2801      	cmp	r0, #1
 8003d7e:	d00d      	beq.n	8003d9c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 8003d80:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8003d84:	e7f6      	b.n	8003d74 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x58>
 8003d86:	2107      	movs	r1, #7
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f004 feef 	bl	8008b6c <usart_flag_get>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d0f9      	beq.n	8003d86 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8003d92:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d96:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8003d9a:	e7e6      	b.n	8003d6a <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x4e>
 8003d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40004800 	andmi	r4, r0, r0, lsl #16
 8003da4:	40011000 	andmi	r1, r1, r0

08003da8 <Dmx::RdmReceive(unsigned int)>:
 8003da8:	f44f 7304 	mov.w	r3, #528	; 0x210
 8003dac:	4806      	ldr	r0, [pc, #24]	; (8003dc8 <Dmx::RdmReceive(unsigned int)+0x20>)
 8003dae:	fb03 0101 	mla	r1, r3, r1, r0
 8003db2:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 8003db6:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 8003dba:	bf1e      	ittt	ne
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	4608      	movne	r0, r1
 8003dc0:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	2000020c 	andcs	r0, r0, ip, lsl #4

08003dcc <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4604      	mov	r4, r0
 8003dd0:	460d      	mov	r5, r1
 8003dd2:	4616      	mov	r6, r2
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 8003dd6:	20c8      	movs	r0, #200	; 0xc8
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	f005 fa69 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003dde:	4632      	mov	r2, r6
 8003de0:	4629      	mov	r1, r5
 8003de2:	4620      	mov	r0, r4
 8003de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003de8:	f7ff bbc2 	b.w	8003570 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003dec:	2000063c 	andcs	r0, r0, ip, lsr r6

08003df0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df6:	4606      	mov	r6, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	20c8      	movs	r0, #200	; 0xc8
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	4615      	mov	r5, r2
 8003e00:	f005 fa56 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003e04:	2300      	movs	r3, #0
 8003e06:	4f19      	ldr	r7, [pc, #100]	; (8003e6c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003e08:	4631      	mov	r1, r6
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f7ff fe57 	bl	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003e12:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003e16:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003e70 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>
 8003e1a:	4425      	add	r5, r4
 8003e1c:	42ac      	cmp	r4, r5
 8003e1e:	d10c      	bne.n	8003e3a <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x4a>
 8003e20:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003e24:	4e12      	ldr	r6, [pc, #72]	; (8003e70 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003e26:	2106      	movs	r1, #6
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f004 fe9f 	bl	8008b6c <usart_flag_get>
 8003e2e:	2801      	cmp	r0, #1
 8003e30:	4604      	mov	r4, r0
 8003e32:	d00d      	beq.n	8003e50 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x60>
 8003e34:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003e38:	e7f5      	b.n	8003e26 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x36>
 8003e3a:	2107      	movs	r1, #7
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	f004 fe95 	bl	8008b6c <usart_flag_get>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d0f9      	beq.n	8003e3a <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x4a>
 8003e46:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e4a:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8003e4e:	e7e5      	b.n	8003e1c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2c>
 8003e50:	2100      	movs	r1, #0
 8003e52:	2004      	movs	r0, #4
 8003e54:	f005 fa2c 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8003e58:	4623      	mov	r3, r4
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	6838      	ldr	r0, [r7, #0]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e64:	f7ff be2c 	b.w	8003ac0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003e68:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003e6c:	20000638 	andcs	r0, r0, r8, lsr r6
 8003e70:	40004800 	andmi	r4, r0, r0, lsl #16

08003e74 <memcpy.isra.0>:
 8003e74:	f003 bf66 	b.w	8007d44 <memcpy>

08003e78 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	6001      	str	r1, [r0, #0]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4604      	mov	r4, r0
 8003e80:	6041      	str	r1, [r0, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	3008      	adds	r0, #8
 8003e86:	f003 ff7f 	bl	8007d88 <memset>
 8003e8a:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e90:	237f      	movs	r3, #127	; 0x7f
 8003e92:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003e96:	bd10      	pop	{r4, pc}
 8003e98:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

08003e9c <RDMDeviceParams::Load()>:
 8003e9c:	4601      	mov	r1, r0
 8003e9e:	6800      	ldr	r0, [r0, #0]
 8003ea0:	b130      	cbz	r0, 8003eb0 <RDMDeviceParams::Load()+0x14>
 8003ea2:	b508      	push	{r3, lr}
 8003ea4:	6803      	ldr	r3, [r0, #0]
 8003ea6:	3104      	adds	r1, #4
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4798      	blx	r3
 8003eac:	2001      	movs	r0, #1
 8003eae:	bd08      	pop	{r3, pc}
 8003eb0:	4770      	bx	lr

08003eb2 <RDMDeviceParams::Set(RDMDevice*)>:
 8003eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb4:	6843      	ldr	r3, [r0, #4]
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	4605      	mov	r5, r0
 8003ebc:	d518      	bpl.n	8003ef0 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003ebe:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003ec2:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8003ec6:	2e20      	cmp	r6, #32
 8003ec8:	bf28      	it	cs
 8003eca:	2620      	movcs	r6, #32
 8003ecc:	f100 0108 	add.w	r1, r0, #8
 8003ed0:	b1e3      	cbz	r3, 8003f0c <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 8003ed2:	f104 070a 	add.w	r7, r4, #10
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	4632      	mov	r2, r6
 8003eda:	f7ff ffcb 	bl	8003e74 <memcpy.isra.0>
 8003ede:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003ee0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 8003ee4:	b120      	cbz	r0, 8003ef0 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003ee6:	6803      	ldr	r3, [r0, #0]
 8003ee8:	4632      	mov	r2, r6
 8003eea:	4639      	mov	r1, r7
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4798      	blx	r3
 8003ef0:	686b      	ldr	r3, [r5, #4]
 8003ef2:	079a      	lsls	r2, r3, #30
 8003ef4:	bf44      	itt	mi
 8003ef6:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003efa:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 8003efe:	075b      	lsls	r3, r3, #29
 8003f00:	bf44      	itt	mi
 8003f02:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8003f06:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 8003f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	f104 0053 	add.w	r0, r4, #83	; 0x53
 8003f12:	f7ff ffaf 	bl	8003e74 <memcpy.isra.0>
 8003f16:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
 8003f1a:	e7e9      	b.n	8003ef0 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

08003f1c <RDMDeviceParams::Dump()>:
 8003f1c:	4770      	bx	lr

08003f1e <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003f1e:	4770      	bx	lr

08003f20 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003f20:	4770      	bx	lr
	...

08003f24 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	4604      	mov	r4, r0
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003f2a:	f840 3b8c 	str.w	r3, [r0], #140
 8003f2e:	f7ff f9d3 	bl	80032d8 <RDMSubDevices::~RDMSubDevices()>
 8003f32:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003f36:	f7fe fba1 	bl	800267c <RDMSensors::~RDMSensors()>
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	bf00      	nop
 8003f40:	08009ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, pc}

08003f44 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4604      	mov	r4, r0
 8003f48:	f7ff ffec 	bl	8003f24 <RDMDeviceResponder::~RDMDeviceResponder()>
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f003 fe5e 	bl	8007c0e <operator delete(void*)>
 8003f52:	4620      	mov	r0, r4
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8003f56:	b470      	push	{r4, r5, r6}
 8003f58:	790a      	ldrb	r2, [r1, #4]
 8003f5a:	680b      	ldr	r3, [r1, #0]
 8003f5c:	2a20      	cmp	r2, #32
 8003f5e:	bf28      	it	cs
 8003f60:	2220      	movcs	r2, #32
 8003f62:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 8003f66:	189c      	adds	r4, r3, r2
 8003f68:	b189      	cbz	r1, 8003f8e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 8003f6a:	f100 010a 	add.w	r1, r0, #10
 8003f6e:	460d      	mov	r5, r1
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d004      	beq.n	8003f7e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x28>
 8003f74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f78:	f805 6b01 	strb.w	r6, [r5], #1
 8003f7c:	e7f8      	b.n	8003f70 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x1a>
 8003f7e:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8003f82:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003f84:	b170      	cbz	r0, 8003fa4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x4e>
 8003f86:	bc70      	pop	{r4, r5, r6}
 8003f88:	6803      	ldr	r3, [r0, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4718      	bx	r3
 8003f8e:	f100 0153 	add.w	r1, r0, #83	; 0x53
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	d004      	beq.n	8003fa0 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x4a>
 8003f96:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003f9a:	f801 5b01 	strb.w	r5, [r1], #1
 8003f9e:	e7f8      	b.n	8003f92 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3c>
 8003fa0:	f880 2073 	strb.w	r2, [r0, #115]	; 0x73
 8003fa4:	bc70      	pop	{r4, r5, r6}
 8003fa6:	4770      	bx	lr

08003fa8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8003fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003faa:	4604      	mov	r4, r0
 8003fac:	1d07      	adds	r7, r0, #4
 8003fae:	4638      	mov	r0, r7
 8003fb0:	460e      	mov	r6, r1
 8003fb2:	4615      	mov	r5, r2
 8003fb4:	f001 f9e4 	bl	8005380 <RDMDevice::RDMDevice()>
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4b27      	ldr	r3, [pc, #156]	; (8004058 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb0>)
 8003fbc:	f840 3b80 	str.w	r3, [r0], #128
 8003fc0:	f001 f99e 	bl	8005300 <RDMIdentify::RDMIdentify()>
 8003fc4:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003fc8:	f7fe fb2a 	bl	8002620 <RDMSensors::RDMSensors()>
 8003fcc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003fd0:	f7ff f97a 	bl	80032c8 <RDMSubDevices::RDMSubDevices()>
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb4>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601c      	str	r4, [r3, #0]
 8003fda:	2365      	movs	r3, #101	; 0x65
 8003fdc:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 8003fe0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003fe4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8003fee:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003ff2:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8003ff6:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8003ffa:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8003ffe:	428b      	cmp	r3, r1
 8004000:	d002      	beq.n	8004008 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x60>
 8004002:	f803 2b01 	strb.w	r2, [r3], #1
 8004006:	e7fa      	b.n	8003ffe <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x56>
 8004008:	2200      	movs	r2, #0
 800400a:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
 800400e:	428b      	cmp	r3, r1
 8004010:	d002      	beq.n	8004018 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x70>
 8004012:	f803 2b01 	strb.w	r2, [r3], #1
 8004016:	e7fa      	b.n	800400e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x66>
 8004018:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800401c:	f7fd feea 	bl	8001df4 <RDMSoftwareVersion::GetVersion()>
 8004020:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8004024:	f7fd feea 	bl	8001dfc <RDMSoftwareVersion::GetVersionLength()>
 8004028:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800402c:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	b91b      	cbnz	r3, 800403e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x96>
 8004036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb8>)
 8004040:	4638      	mov	r0, r7
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2317      	movs	r3, #23
 8004046:	4669      	mov	r1, sp
 8004048:	f88d 3004 	strb.w	r3, [sp, #4]
 800404c:	f7ff ff83 	bl	8003f56 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004050:	4620      	mov	r0, r4
 8004052:	b003      	add	sp, #12
 8004054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004056:	bf00      	nop
 8004058:	08009ab0 	stmdaeq	r0, {r4, r5, r7, r9, fp, ip, pc}
 800405c:	20000640 	andcs	r0, r0, r0, asr #12
 8004060:	08009a90 	stmdaeq	r0, {r4, r7, r9, fp, ip, pc}

08004064 <RDMDeviceResponder::Init()>:
 8004064:	2301      	movs	r3, #1
 8004066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004068:	4604      	mov	r4, r0
 800406a:	f06f 050d 	mvn.w	r5, #13
 800406e:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8004072:	f100 0357 	add.w	r3, r0, #87	; 0x57
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800407c:	4669      	mov	r1, sp
 800407e:	3004      	adds	r0, #4
 8004080:	f88d 3004 	strb.w	r3, [sp, #4]
 8004084:	f7ff ff67 	bl	8003f56 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004088:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 800408c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004090:	f104 020e 	add.w	r2, r4, #14
 8004094:	1b2d      	subs	r5, r5, r4
 8004096:	18a9      	adds	r1, r5, r2
 8004098:	4288      	cmp	r0, r1
 800409a:	d904      	bls.n	80040a6 <RDMDeviceResponder::Init()+0x42>
 800409c:	f812 1b01 	ldrb.w	r1, [r2], #1
 80040a0:	440b      	add	r3, r1
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	e7f7      	b.n	8004096 <RDMDeviceResponder::Init()+0x32>
 80040a6:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80040aa:	f7fd fea9 	bl	8001e00 <RDMSoftwareVersion::GetVersionId()>
 80040ae:	2201      	movs	r2, #1
 80040b0:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80040ba:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 80040be:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 80040c2:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80040c6:	0a1a      	lsrs	r2, r3, #8
 80040c8:	0e03      	lsrs	r3, r0, #24
 80040ca:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80040ce:	0c03      	lsrs	r3, r0, #16
 80040d0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80040d4:	0a03      	lsrs	r3, r0, #8
 80040d6:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80040da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80040de:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 80040e2:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 80040ec:	685d      	ldr	r5, [r3, #4]
 80040ee:	bb05      	cbnz	r5, 8004132 <RDMDeviceResponder::Init()+0xce>
 80040f0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 80040f4:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80040f8:	0a1a      	lsrs	r2, r3, #8
 80040fa:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80040fe:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
 8004102:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 8004106:	2301      	movs	r3, #1
 8004108:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800410c:	0a33      	lsrs	r3, r6, #8
 800410e:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8004112:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8004116:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 800411a:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800411e:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8004122:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004126:	428b      	cmp	r3, r1
 8004128:	d01e      	beq.n	8004168 <RDMDeviceResponder::Init()+0x104>
 800412a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800412e:	749a      	strb	r2, [r3, #18]
 8004130:	e7f9      	b.n	8004126 <RDMDeviceResponder::Init()+0xc2>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	4628      	mov	r0, r5
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	4798      	blx	r3
 800413a:	0a00      	lsrs	r0, r0, #8
 800413c:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	4628      	mov	r0, r5
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	4798      	blx	r3
 8004148:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	4628      	mov	r0, r5
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4798      	blx	r3
 8004154:	0a00      	lsrs	r0, r0, #8
 8004156:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	4628      	mov	r0, r5
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	4798      	blx	r3
 8004162:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8004166:	e7ce      	b.n	8004106 <RDMDeviceResponder::Init()+0xa2>
 8004168:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800416c:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004170:	4413      	add	r3, r2
 8004172:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004176:	b002      	add	sp, #8
 8004178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800417c <RDMDeviceResponder::Print()>:
 800417c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800417e:	4604      	mov	r4, r0
 8004180:	3004      	adds	r0, #4
 8004182:	f001 f973 	bl	800546c <RDMDevice::Print()>
 8004186:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800418a:	481d      	ldr	r0, [pc, #116]	; (8004200 <RDMDeviceResponder::Print()+0x84>)
 800418c:	681d      	ldr	r5, [r3, #0]
 800418e:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
 8004192:	f7fe f943 	bl	800241c <printf>
 8004196:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 800419a:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 800419e:	4819      	ldr	r0, [pc, #100]	; (8004204 <RDMDeviceResponder::Print()+0x88>)
 80041a0:	f7fe f93c 	bl	800241c <printf>
 80041a4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80041a8:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80041ac:	4816      	ldr	r0, [pc, #88]	; (8004208 <RDMDeviceResponder::Print()+0x8c>)
 80041ae:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80041b2:	f7fe f933 	bl	800241c <printf>
 80041b6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80041ba:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 80041be:	3508      	adds	r5, #8
 80041c0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80041c4:	4811      	ldr	r0, [pc, #68]	; (800420c <RDMDeviceResponder::Print()+0x90>)
 80041c6:	f7fe f929 	bl	800241c <printf>
 80041ca:	4633      	mov	r3, r6
 80041cc:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 80041d0:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80041d4:	9500      	str	r5, [sp, #0]
 80041d6:	480e      	ldr	r0, [pc, #56]	; (8004210 <RDMDeviceResponder::Print()+0x94>)
 80041d8:	f7fe f920 	bl	800241c <printf>
 80041dc:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80041e0:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80041e4:	480b      	ldr	r0, [pc, #44]	; (8004214 <RDMDeviceResponder::Print()+0x98>)
 80041e6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80041ea:	f7fe f917 	bl	800241c <printf>
 80041ee:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 80041f2:	4809      	ldr	r0, [pc, #36]	; (8004218 <RDMDeviceResponder::Print()+0x9c>)
 80041f4:	b002      	add	sp, #8
 80041f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041fa:	f7fe b90f 	b.w	800241c <printf>
 80041fe:	bf00      	nop
 8004200:	080099dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, ip, pc}
 8004204:	080099f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, fp, ip, pc}
 8004208:	08009a12 	stmdaeq	r0, {r1, r4, r9, fp, ip, pc}
 800420c:	08009a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, ip, pc}
 8004210:	08009a42 	stmdaeq	r0, {r1, r6, r9, fp, ip, pc}
 8004214:	08009a60 	stmdaeq	r0, {r5, r6, r9, fp, ip, pc}
 8004218:	08009a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp, ip, pc}

0800421c <memcmp>:
 800421c:	b510      	push	{r4, lr}
 800421e:	3901      	subs	r1, #1
 8004220:	4402      	add	r2, r0
 8004222:	4290      	cmp	r0, r2
 8004224:	d008      	beq.n	8004238 <memcmp+0x1c>
 8004226:	7803      	ldrb	r3, [r0, #0]
 8004228:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800422c:	42a3      	cmp	r3, r4
 800422e:	d001      	beq.n	8004234 <memcmp+0x18>
 8004230:	1b18      	subs	r0, r3, r4
 8004232:	bd10      	pop	{r4, pc}
 8004234:	3001      	adds	r0, #1
 8004236:	e7f4      	b.n	8004222 <memcmp+0x6>
 8004238:	2000      	movs	r0, #0
 800423a:	e7fa      	b.n	8004232 <memcmp+0x16>

0800423c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 800423c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8004240:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8004244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004248:	3b01      	subs	r3, #1
 800424a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800424e:	6858      	ldr	r0, [r3, #4]
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	4718      	bx	r3

08004256 <memcpy.isra.0>:
 8004256:	3801      	subs	r0, #1
 8004258:	440a      	add	r2, r1
 800425a:	4291      	cmp	r1, r2
 800425c:	d004      	beq.n	8004268 <memcpy.isra.0+0x12>
 800425e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004262:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004266:	e7f8      	b.n	800425a <memcpy.isra.0+0x4>
 8004268:	4770      	bx	lr

0800426a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 800426a:	b570      	push	{r4, r5, r6, lr}
 800426c:	4604      	mov	r4, r0
 800426e:	1e50      	subs	r0, r2, #1
 8004270:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004274:	4615      	mov	r5, r2
 8004276:	d220      	bcs.n	80042ba <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x50>
 8004278:	b129      	cbz	r1, 8004286 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 800427a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800427e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004282:	f7ff b867 	b.w	8003354 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 8004286:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 800428a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800428e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004292:	3b01      	subs	r3, #1
 8004294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004298:	4629      	mov	r1, r5
 800429a:	6858      	ldr	r0, [r3, #4]
 800429c:	6803      	ldr	r3, [r0, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4798      	blx	r3
 80042a2:	b120      	cbz	r0, 80042ae <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x44>
 80042a4:	0a2b      	lsrs	r3, r5, #8
 80042a6:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80042aa:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	4620      	mov	r0, r4
 80042b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4718      	bx	r3
 80042ba:	bd70      	pop	{r4, r5, r6, pc}

080042bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 80042bc:	b111      	cbz	r1, 80042c4 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 80042be:	308c      	adds	r0, #140	; 0x8c
 80042c0:	f7ff b872 	b.w	80033a8 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 80042c4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80042c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042cc:	3a01      	subs	r2, #1
 80042ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80042d2:	4770      	bx	lr

080042d4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 80042d4:	b111      	cbz	r1, 80042dc <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 80042d6:	308c      	adds	r0, #140	; 0x8c
 80042d8:	f7ff b85e 	b.w	8003398 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 80042dc:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 80042e0:	4770      	bx	lr

080042e2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80042e2:	b570      	push	{r4, r5, r6, lr}
 80042e4:	4604      	mov	r4, r0
 80042e6:	b121      	cbz	r1, 80042f2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 80042e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042ec:	308c      	adds	r0, #140	; 0x8c
 80042ee:	f7ff b84a 	b.w	8003386 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 80042f2:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80042f6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80042fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80042fe:	3a01      	subs	r2, #1
 8004300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004304:	685d      	ldr	r5, [r3, #4]
 8004306:	682b      	ldr	r3, [r5, #0]
 8004308:	4628      	mov	r0, r5
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4798      	blx	r3
 800430e:	0a00      	lsrs	r0, r0, #8
 8004310:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	4798      	blx	r3
 800431c:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	4628      	mov	r0, r5
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4798      	blx	r3
 8004328:	0a00      	lsrs	r0, r0, #8
 800432a:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	4628      	mov	r0, r5
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4798      	blx	r3
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800433c:	4629      	mov	r1, r5
 800433e:	4620      	mov	r0, r4
 8004340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4718      	bx	r3

08004348 <RDMHandler::RDMHandler(bool)>:
 8004348:	2200      	movs	r2, #0
 800434a:	7001      	strb	r1, [r0, #0]
 800434c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004350:	7042      	strb	r2, [r0, #1]
 8004352:	4770      	bx	lr

08004354 <RDMHandler::HandleString(char const*, unsigned int)>:
 8004354:	6883      	ldr	r3, [r0, #8]
 8004356:	75da      	strb	r2, [r3, #23]
 8004358:	3318      	adds	r3, #24
 800435a:	440a      	add	r2, r1
 800435c:	4291      	cmp	r1, r2
 800435e:	d004      	beq.n	800436a <RDMHandler::HandleString(char const*, unsigned int)+0x16>
 8004360:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004364:	f803 0b01 	strb.w	r0, [r3], #1
 8004368:	e7f8      	b.n	800435c <RDMHandler::HandleString(char const*, unsigned int)+0x8>
 800436a:	4770      	bx	lr

0800436c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8004372:	25cc      	movs	r5, #204	; 0xcc
 8004374:	701d      	strb	r5, [r3, #0]
 8004376:	7825      	ldrb	r5, [r4, #0]
 8004378:	705d      	strb	r5, [r3, #1]
 800437a:	7ba5      	ldrb	r5, [r4, #14]
 800437c:	73dd      	strb	r5, [r3, #15]
 800437e:	2500      	movs	r5, #0
 8004380:	745d      	strb	r5, [r3, #17]
 8004382:	7c65      	ldrb	r5, [r4, #17]
 8004384:	749d      	strb	r5, [r3, #18]
 8004386:	7ca5      	ldrb	r5, [r4, #18]
 8004388:	74dd      	strb	r5, [r3, #19]
 800438a:	7ce5      	ldrb	r5, [r4, #19]
 800438c:	3501      	adds	r5, #1
 800438e:	751d      	strb	r5, [r3, #20]
 8004390:	7d25      	ldrb	r5, [r4, #20]
 8004392:	755d      	strb	r5, [r3, #21]
 8004394:	7d65      	ldrb	r5, [r4, #21]
 8004396:	759d      	strb	r5, [r3, #22]
 8004398:	b119      	cbz	r1, 80043a2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800439a:	1e4d      	subs	r5, r1, #1
 800439c:	2d01      	cmp	r5, #1
 800439e:	d921      	bls.n	80043e4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	7dda      	ldrb	r2, [r3, #23]
 80043a4:	7419      	strb	r1, [r3, #16]
 80043a6:	3218      	adds	r2, #24
 80043a8:	709a      	strb	r2, [r3, #2]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x98>)
 80043ac:	f104 0108 	add.w	r1, r4, #8
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	1cdd      	adds	r5, r3, #3
 80043b4:	3204      	adds	r2, #4
 80043b6:	340e      	adds	r4, #14
 80043b8:	f811 6b01 	ldrb.w	r6, [r1], #1
 80043bc:	f805 6b01 	strb.w	r6, [r5], #1
 80043c0:	f812 6b01 	ldrb.w	r6, [r2], #1
 80043c4:	42a1      	cmp	r1, r4
 80043c6:	716e      	strb	r6, [r5, #5]
 80043c8:	d1f6      	bne.n	80043b8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4c>
 80043ca:	2200      	movs	r2, #0
 80043cc:	7899      	ldrb	r1, [r3, #2]
 80043ce:	4613      	mov	r3, r2
 80043d0:	6884      	ldr	r4, [r0, #8]
 80043d2:	4291      	cmp	r1, r2
 80043d4:	eb04 0502 	add.w	r5, r4, r2
 80043d8:	d90d      	bls.n	80043f6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 80043da:	5ca5      	ldrb	r5, [r4, r2]
 80043dc:	3201      	adds	r2, #1
 80043de:	442b      	add	r3, r5
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	e7f6      	b.n	80043d2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x66>
 80043e4:	7419      	strb	r1, [r3, #16]
 80043e6:	2102      	movs	r1, #2
 80043e8:	251a      	movs	r5, #26
 80043ea:	75d9      	strb	r1, [r3, #23]
 80043ec:	0a11      	lsrs	r1, r2, #8
 80043ee:	709d      	strb	r5, [r3, #2]
 80043f0:	7619      	strb	r1, [r3, #24]
 80043f2:	765a      	strb	r2, [r3, #25]
 80043f4:	e7d9      	b.n	80043aa <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80043f6:	0a1a      	lsrs	r2, r3, #8
 80043f8:	702a      	strb	r2, [r5, #0]
 80043fa:	6882      	ldr	r2, [r0, #8]
 80043fc:	440a      	add	r2, r1
 80043fe:	7053      	strb	r3, [r2, #1]
 8004400:	e7ce      	b.n	80043a0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8004402:	bf00      	nop
 8004404:	20000640 	andcs	r0, r0, r0, asr #12

08004408 <RDMHandler::RespondMessageAck()>:
 8004408:	6843      	ldr	r3, [r0, #4]
 800440a:	7d9a      	ldrb	r2, [r3, #22]
 800440c:	b90a      	cbnz	r2, 8004412 <RDMHandler::RespondMessageAck()+0xa>
 800440e:	2218      	movs	r2, #24
 8004410:	705a      	strb	r2, [r3, #1]
 8004412:	2200      	movs	r2, #0
 8004414:	4611      	mov	r1, r2
 8004416:	f7ff bfa9 	b.w	800436c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

0800441c <RDMHandler::GetSupportedParameters(unsigned short)>:
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 800441e:	2900      	cmp	r1, #0
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8004422:	bf08      	it	eq
 8004424:	461a      	moveq	r2, r3
 8004426:	b4f0      	push	{r4, r5, r6, r7}
 8004428:	bf14      	ite	ne
 800442a:	2108      	movne	r1, #8
 800442c:	211e      	moveq	r1, #30
 800442e:	2518      	movs	r5, #24
 8004430:	4614      	mov	r4, r2
 8004432:	2300      	movs	r3, #0
 8004434:	fb05 2501 	mla	r5, r5, r1, r2
 8004438:	7d66      	ldrb	r6, [r4, #21]
 800443a:	b10e      	cbz	r6, 8004440 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 800443c:	3301      	adds	r3, #1
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3418      	adds	r4, #24
 8004442:	42ac      	cmp	r4, r5
 8004444:	d1f8      	bne.n	8004438 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 8004446:	6886      	ldr	r6, [r0, #8]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	75f3      	strb	r3, [r6, #23]
 800444c:	230c      	movs	r3, #12
 800444e:	4359      	muls	r1, r3
 8004450:	2300      	movs	r3, #0
 8004452:	461c      	mov	r4, r3
 8004454:	f102 0c15 	add.w	ip, r2, #21
 8004458:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 800445c:	b14d      	cbz	r5, 8004472 <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 800445e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004462:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 8004466:	0a2d      	lsrs	r5, r5, #8
 8004468:	763d      	strb	r5, [r7, #24]
 800446a:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800446e:	3401      	adds	r4, #1
 8004470:	767d      	strb	r5, [r7, #25]
 8004472:	330c      	adds	r3, #12
 8004474:	4299      	cmp	r1, r3
 8004476:	d1ef      	bne.n	8004458 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 8004478:	bcf0      	pop	{r4, r5, r6, r7}
 800447a:	f7ff bfc5 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 800447e:	bf00      	nop
 8004480:	08009adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, pc}
 8004484:	08009dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, pc}

08004488 <RDMHandler::GetDeviceInfo(unsigned short)>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4b18      	ldr	r3, [pc, #96]	; (80044ec <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 800448c:	4605      	mov	r5, r0
 800448e:	681c      	ldr	r4, [r3, #0]
 8004490:	b349      	cbz	r1, 80044e6 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8004492:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004496:	f7fe ff37 	bl	8003308 <RDMSubDevices::GetInfo(unsigned short)>
 800449a:	b1b8      	cbz	r0, 80044cc <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 800449c:	8803      	ldrh	r3, [r0, #0]
 800449e:	0a1b      	lsrs	r3, r3, #8
 80044a0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 80044a4:	8803      	ldrh	r3, [r0, #0]
 80044a6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 80044aa:	7903      	ldrb	r3, [r0, #4]
 80044ac:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80044b0:	7943      	ldrb	r3, [r0, #5]
 80044b2:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 80044b6:	8843      	ldrh	r3, [r0, #2]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 80044be:	8843      	ldrh	r3, [r0, #2]
 80044c0:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 80044c4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80044c8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 80044cc:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80044d0:	2213      	movs	r2, #19
 80044d2:	68a8      	ldr	r0, [r5, #8]
 80044d4:	75c2      	strb	r2, [r0, #23]
 80044d6:	3018      	adds	r0, #24
 80044d8:	f7ff febd 	bl	8004256 <memcpy.isra.0>
 80044dc:	4628      	mov	r0, r5
 80044de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044e2:	f7ff bf91 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80044e6:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80044ea:	e7f1      	b.n	80044d0 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 80044ec:	20000640 	andcs	r0, r0, r0, asr #12

080044f0 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	2301      	movs	r3, #1
 80044f4:	6886      	ldr	r6, [r0, #8]
 80044f6:	4605      	mov	r5, r0
 80044f8:	75f3      	strb	r3, [r6, #23]
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 80044fc:	681c      	ldr	r4, [r3, #0]
 80044fe:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8004502:	b37b      	cbz	r3, 8004564 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8004504:	f06f 0c0d 	mvn.w	ip, #13
 8004508:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 800450c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004510:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
 8004514:	f104 020e 	add.w	r2, r4, #14
 8004518:	ebac 0c04 	sub.w	ip, ip, r4
 800451c:	eb0c 0002 	add.w	r0, ip, r2
 8004520:	42b8      	cmp	r0, r7
 8004522:	d204      	bcs.n	800452e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 8004524:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004528:	4403      	add	r3, r0
 800452a:	b29b      	uxth	r3, r3
 800452c:	e7f6      	b.n	800451c <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800452e:	4299      	cmp	r1, r3
 8004530:	d008      	beq.n	8004544 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8004532:	2300      	movs	r3, #0
 8004534:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004538:	7633      	strb	r3, [r6, #24]
 800453a:	4628      	mov	r0, r5
 800453c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004540:	f7ff bf62 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004544:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004548:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800454c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8004550:	440b      	add	r3, r1
 8004552:	429a      	cmp	r2, r3
 8004554:	d1ed      	bne.n	8004532 <RDMHandler::GetFactoryDefaults(unsigned short)+0x42>
 8004556:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800455a:	f7fe ff69 	bl	8003430 <RDMSubDevices::GetFactoryDefaults()>
 800455e:	4603      	mov	r3, r0
 8004560:	2800      	cmp	r0, #0
 8004562:	d0e7      	beq.n	8004534 <RDMHandler::GetFactoryDefaults(unsigned short)+0x44>
 8004564:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8004568:	e7e6      	b.n	8004538 <RDMHandler::GetFactoryDefaults(unsigned short)+0x48>
 800456a:	bf00      	nop
 800456c:	20000640 	andcs	r0, r0, r0, asr #12

08004570 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 8004570:	2102      	movs	r1, #2
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800457a:	6883      	ldr	r3, [r0, #8]
 800457c:	75d9      	strb	r1, [r3, #23]
 800457e:	0a11      	lsrs	r1, r2, #8
 8004580:	7619      	strb	r1, [r3, #24]
 8004582:	765a      	strb	r2, [r3, #25]
 8004584:	f7ff bf40 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004588:	20000640 	andcs	r0, r0, r0, asr #12

0800458c <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	2209      	movs	r2, #9
 8004592:	4904      	ldr	r1, [pc, #16]	; (80045a4 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8004594:	f7ff fede 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 8004598:	4620      	mov	r0, r4
 800459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459e:	f7ff bf33 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80045a2:	bf00      	nop
 80045a4:	08009ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, pc}

080045a8 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4604      	mov	r4, r0
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 80045b4:	312f      	adds	r1, #47	; 0x2f
 80045b6:	f7ff fecd 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 80045ba:	4620      	mov	r0, r4
 80045bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c0:	f7ff bf22 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80045c4:	20000640 	andcs	r0, r0, r0, asr #12

080045c8 <RDMHandler::GetDeviceLabel(unsigned short)>:
 80045c8:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 80045ca:	b513      	push	{r0, r1, r4, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	b171      	cbz	r1, 80045f0 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 80045d2:	466a      	mov	r2, sp
 80045d4:	308c      	adds	r0, #140	; 0x8c
 80045d6:	f7fe fe9f 	bl	8003318 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 80045da:	4620      	mov	r0, r4
 80045dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045e0:	9900      	ldr	r1, [sp, #0]
 80045e2:	f7ff feb7 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff ff0e 	bl	8004408 <RDMHandler::RespondMessageAck()>
 80045ec:	b002      	add	sp, #8
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	f100 030e 	add.w	r3, r0, #14
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80045fa:	f88d 3004 	strb.w	r3, [sp, #4]
 80045fe:	e7ec      	b.n	80045da <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8004600:	20000640 	andcs	r0, r0, r0, asr #12

08004604 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004610:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004614:	f7ff fe9e 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 8004618:	4620      	mov	r0, r4
 800461a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800461e:	f7ff bef3 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004622:	bf00      	nop
 8004624:	20000640 	andcs	r0, r0, r0, asr #12

08004628 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8004628:	2201      	movs	r2, #1
 800462a:	6883      	ldr	r3, [r0, #8]
 800462c:	75da      	strb	r2, [r3, #23]
 800462e:	4a02      	ldr	r2, [pc, #8]	; (8004638 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8004630:	7812      	ldrb	r2, [r2, #0]
 8004632:	761a      	strb	r2, [r3, #24]
 8004634:	f7ff bee8 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004638:	20000644 	andcs	r0, r0, r4, asr #12

0800463c <RDMHandler::GetLanguage(unsigned short)>:
 800463c:	b510      	push	{r4, lr}
 800463e:	4604      	mov	r4, r0
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8004642:	2202      	movs	r2, #2
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	31c3      	adds	r1, #195	; 0xc3
 8004648:	f7ff fe84 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 800464c:	4620      	mov	r0, r4
 800464e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004652:	f7ff bed9 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004656:	bf00      	nop
 8004658:	20000640 	andcs	r0, r0, r0, asr #12

0800465c <RDMHandler::GetPersonality(unsigned short)>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	4f0d      	ldr	r7, [pc, #52]	; (8004694 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8004660:	4604      	mov	r4, r0
 8004662:	460e      	mov	r6, r1
 8004664:	6838      	ldr	r0, [r7, #0]
 8004666:	b189      	cbz	r1, 800468c <RDMHandler::GetPersonality(unsigned short)+0x30>
 8004668:	308c      	adds	r0, #140	; 0x8c
 800466a:	f7fe fe84 	bl	8003376 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 800466e:	4605      	mov	r5, r0
 8004670:	4631      	mov	r1, r6
 8004672:	6838      	ldr	r0, [r7, #0]
 8004674:	f7ff fe2e 	bl	80042d4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004678:	2202      	movs	r2, #2
 800467a:	68a3      	ldr	r3, [r4, #8]
 800467c:	7658      	strb	r0, [r3, #25]
 800467e:	75da      	strb	r2, [r3, #23]
 8004680:	761d      	strb	r5, [r3, #24]
 8004682:	4620      	mov	r0, r4
 8004684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004688:	f7ff bebe 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 800468c:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 8004690:	e7ee      	b.n	8004670 <RDMHandler::GetPersonality(unsigned short)+0x14>
 8004692:	bf00      	nop
 8004694:	20000640 	andcs	r0, r0, r0, asr #12

08004698 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	b169      	cbz	r1, 80046be <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 80046a2:	308c      	adds	r0, #140	; 0x8c
 80046a4:	f7fe fe4e 	bl	8003344 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 80046a8:	2202      	movs	r2, #2
 80046aa:	68a3      	ldr	r3, [r4, #8]
 80046ac:	75da      	strb	r2, [r3, #23]
 80046ae:	0a02      	lsrs	r2, r0, #8
 80046b0:	7658      	strb	r0, [r3, #25]
 80046b2:	761a      	strb	r2, [r3, #24]
 80046b4:	4620      	mov	r0, r4
 80046b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ba:	f7ff bea5 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80046be:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80046c2:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80046c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80046ca:	b298      	uxth	r0, r3
 80046cc:	e7ec      	b.n	80046a8 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 80046ce:	bf00      	nop
 80046d0:	20000640 	andcs	r0, r0, r0, asr #12

080046d4 <RDMHandler::GetDeviceHours(unsigned short)>:
 80046d4:	2104      	movs	r1, #4
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 80046dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e0:	6883      	ldr	r3, [r0, #8]
 80046e2:	75d9      	strb	r1, [r3, #23]
 80046e4:	2100      	movs	r1, #0
 80046e6:	7619      	strb	r1, [r3, #24]
 80046e8:	7659      	strb	r1, [r3, #25]
 80046ea:	0a11      	lsrs	r1, r2, #8
 80046ec:	7699      	strb	r1, [r3, #26]
 80046ee:	76da      	strb	r2, [r3, #27]
 80046f0:	f7ff be8a 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80046f4:	2000181c 	andcs	r1, r0, ip, lsl r8
 80046f8:	0036ee80 	eorseq	lr, r6, r0, lsl #29

080046fc <RDMHandler::GetDisplayInvert(unsigned short)>:
 80046fc:	2301      	movs	r3, #1
 80046fe:	6882      	ldr	r2, [r0, #8]
 8004700:	75d3      	strb	r3, [r2, #23]
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b103      	cbz	r3, 800470c <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 800470a:	79db      	ldrb	r3, [r3, #7]
 800470c:	7613      	strb	r3, [r2, #24]
 800470e:	f7ff be7b 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004712:	bf00      	nop
 8004714:	200016ec 	andcs	r1, r0, ip, ror #13

08004718 <RDMHandler::GetDisplayLevel(unsigned short)>:
 8004718:	2301      	movs	r3, #1
 800471a:	6882      	ldr	r2, [r0, #8]
 800471c:	75d3      	strb	r3, [r2, #23]
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	b103      	cbz	r3, 8004728 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8004726:	799b      	ldrb	r3, [r3, #6]
 8004728:	7613      	strb	r3, [r2, #24]
 800472a:	f7ff be6d 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 800472e:	bf00      	nop
 8004730:	200016ec 	andcs	r1, r0, ip, ror #13

08004734 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4604      	mov	r4, r0
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	a901      	add	r1, sp, #4
 8004740:	f003 f8b1 	bl	80078a6 <Hardware::GetTime(tm*)>
 8004744:	9a06      	ldr	r2, [sp, #24]
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 800474c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004750:	765a      	strb	r2, [r3, #25]
 8004752:	9a05      	ldr	r2, [sp, #20]
 8004754:	4620      	mov	r0, r4
 8004756:	3201      	adds	r2, #1
 8004758:	769a      	strb	r2, [r3, #26]
 800475a:	9a04      	ldr	r2, [sp, #16]
 800475c:	7619      	strb	r1, [r3, #24]
 800475e:	76da      	strb	r2, [r3, #27]
 8004760:	9a03      	ldr	r2, [sp, #12]
 8004762:	771a      	strb	r2, [r3, #28]
 8004764:	9a02      	ldr	r2, [sp, #8]
 8004766:	775a      	strb	r2, [r3, #29]
 8004768:	9a01      	ldr	r2, [sp, #4]
 800476a:	779a      	strb	r2, [r3, #30]
 800476c:	2207      	movs	r2, #7
 800476e:	75da      	strb	r2, [r3, #23]
 8004770:	f7ff fe4a 	bl	8004408 <RDMHandler::RespondMessageAck()>
 8004774:	b00a      	add	sp, #40	; 0x28
 8004776:	bd10      	pop	{r4, pc}
 8004778:	200017e0 	andcs	r1, r0, r0, ror #15

0800477c <RDMHandler::GetPowerState(unsigned short)>:
 800477c:	2201      	movs	r2, #1
 800477e:	6883      	ldr	r3, [r0, #8]
 8004780:	75da      	strb	r2, [r3, #23]
 8004782:	22ff      	movs	r2, #255	; 0xff
 8004784:	761a      	strb	r2, [r3, #24]
 8004786:	f7ff be3f 	b.w	8004408 <RDMHandler::RespondMessageAck()>

0800478a <RDMHandler::GetPerformSelfTest(unsigned short)>:
 800478a:	b538      	push	{r3, r4, r5, lr}
 800478c:	2301      	movs	r3, #1
 800478e:	6885      	ldr	r5, [r0, #8]
 8004790:	4604      	mov	r4, r0
 8004792:	75eb      	strb	r3, [r5, #23]
 8004794:	f7fd fa24 	bl	8001be0 <rdm::selftest::Get()>
 8004798:	3800      	subs	r0, #0
 800479a:	bf18      	it	ne
 800479c:	2001      	movne	r0, #1
 800479e:	7628      	strb	r0, [r5, #24]
 80047a0:	4620      	mov	r0, r4
 80047a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a6:	f7ff be2f 	b.w	8004408 <RDMHandler::RespondMessageAck()>
	...

080047ac <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4604      	mov	r4, r0
 80047b0:	2208      	movs	r2, #8
 80047b2:	4904      	ldr	r1, [pc, #16]	; (80047c4 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 80047b4:	f7ff fdce 	bl	8004354 <RDMHandler::HandleString(char const*, unsigned int)>
 80047b8:	4620      	mov	r0, r4
 80047ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047be:	f7ff be23 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80047c2:	bf00      	nop
 80047c4:	08009aca 	stmdaeq	r0, {r1, r3, r6, r7, r9, fp, ip, pc}

080047c8 <RDMHandler::GetSlotInfo(unsigned short)>:
 80047c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80047cc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004854 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 80047d0:	4606      	mov	r6, r0
 80047d2:	6887      	ldr	r7, [r0, #8]
 80047d4:	4689      	mov	r9, r1
 80047d6:	f8d8 0000 	ldr.w	r0, [r8]
 80047da:	b349      	cbz	r1, 8004830 <RDMHandler::GetSlotInfo(unsigned short)+0x68>
 80047dc:	308c      	adds	r0, #140	; 0x8c
 80047de:	f7fe fdc2 	bl	8003366 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 80047e2:	f04f 0a00 	mov.w	sl, #0
 80047e6:	282e      	cmp	r0, #46	; 0x2e
 80047e8:	bf28      	it	cs
 80047ea:	202e      	movcs	r0, #46	; 0x2e
 80047ec:	4654      	mov	r4, sl
 80047ee:	b285      	uxth	r5, r0
 80047f0:	fa1f f18a 	uxth.w	r1, sl
 80047f4:	42a9      	cmp	r1, r5
 80047f6:	d223      	bcs.n	8004840 <RDMHandler::GetSlotInfo(unsigned short)+0x78>
 80047f8:	f1b9 0f00 	cmp.w	r9, #0
 80047fc:	d115      	bne.n	800482a <RDMHandler::GetSlotInfo(unsigned short)+0x62>
 80047fe:	f8d8 0000 	ldr.w	r0, [r8]
 8004802:	aa01      	add	r2, sp, #4
 8004804:	f7ff fd1a 	bl	800423c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004808:	b178      	cbz	r0, 800482a <RDMHandler::GetSlotInfo(unsigned short)+0x62>
 800480a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800480e:	193a      	adds	r2, r7, r4
 8004810:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004814:	7693      	strb	r3, [r2, #26]
 8004816:	1d23      	adds	r3, r4, #4
 8004818:	0a08      	lsrs	r0, r1, #8
 800481a:	443b      	add	r3, r7
 800481c:	f882 9018 	strb.w	r9, [r2, #24]
 8004820:	f882 a019 	strb.w	sl, [r2, #25]
 8004824:	76d0      	strb	r0, [r2, #27]
 8004826:	3405      	adds	r4, #5
 8004828:	7619      	strb	r1, [r3, #24]
 800482a:	f10a 0a01 	add.w	sl, sl, #1
 800482e:	e7df      	b.n	80047f0 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8004830:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004834:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 8004838:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800483c:	b298      	uxth	r0, r3
 800483e:	e7d0      	b.n	80047e2 <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8004840:	b2e4      	uxtb	r4, r4
 8004842:	75fc      	strb	r4, [r7, #23]
 8004844:	3418      	adds	r4, #24
 8004846:	4630      	mov	r0, r6
 8004848:	70bc      	strb	r4, [r7, #2]
 800484a:	f7ff fddd 	bl	8004408 <RDMHandler::RespondMessageAck()>
 800484e:	b002      	add	sp, #8
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004854:	20000640 	andcs	r0, r0, r0, asr #12

08004858 <RDMHandler::RespondMessageNack(unsigned short)>:
 8004858:	460a      	mov	r2, r1
 800485a:	2102      	movs	r1, #2
 800485c:	f7ff bd86 	b.w	800436c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08004860 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8004860:	b510      	push	{r4, lr}
 8004862:	6843      	ldr	r3, [r0, #4]
 8004864:	4604      	mov	r4, r0
 8004866:	7d9a      	ldrb	r2, [r3, #22]
 8004868:	2a01      	cmp	r2, #1
 800486a:	d004      	beq.n	8004876 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800486c:	2101      	movs	r1, #1
 800486e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004872:	f7ff bff1 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004876:	7ddb      	ldrb	r3, [r3, #23]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d003      	beq.n	8004884 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800487c:	2bff      	cmp	r3, #255	; 0xff
 800487e:	d001      	beq.n	8004884 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004880:	2106      	movs	r1, #6
 8004882:	e7f4      	b.n	800486e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004884:	2100      	movs	r1, #0
 8004886:	68a2      	ldr	r2, [r4, #8]
 8004888:	2bff      	cmp	r3, #255	; 0xff
 800488a:	75d1      	strb	r1, [r2, #23]
 800488c:	d102      	bne.n	8004894 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800488e:	2104      	movs	r1, #4
 8004890:	4620      	mov	r0, r4
 8004892:	e7ec      	b.n	800486e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	f003 f81c 	bl	80078d4 <Hardware::Reboot()>
 800489c:	2800      	cmp	r0, #0
 800489e:	d0f6      	beq.n	800488e <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	bf00      	nop
 80048a4:	200017e0 	andcs	r1, r0, r0, ror #15

080048a8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	6843      	ldr	r3, [r0, #4]
 80048ac:	460d      	mov	r5, r1
 80048ae:	7d99      	ldrb	r1, [r3, #22]
 80048b0:	4604      	mov	r4, r0
 80048b2:	2901      	cmp	r1, #1
 80048b4:	d004      	beq.n	80048c0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 80048b6:	2101      	movs	r1, #1
 80048b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048bc:	f7ff bfcc 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 80048c0:	7ddb      	ldrb	r3, [r3, #23]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d901      	bls.n	80048ca <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 80048c6:	2106      	movs	r1, #6
 80048c8:	e7f6      	b.n	80048b8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 80048cc:	4f12      	ldr	r7, [pc, #72]	; (8004918 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 80048ce:	6816      	ldr	r6, [r2, #0]
 80048d0:	4a12      	ldr	r2, [pc, #72]	; (800491c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 80048d2:	6810      	ldr	r0, [r2, #0]
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 80048d6:	b983      	cbnz	r3, 80048fa <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 80048d8:	2102      	movs	r1, #2
 80048da:	7013      	strb	r3, [r2, #0]
 80048dc:	f002 ff3e 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 80048e0:	7839      	ldrb	r1, [r7, #0]
 80048e2:	b111      	cbz	r1, 80048ea <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80048e4:	4630      	mov	r0, r6
 80048e6:	f7fd fa41 	bl	8001d6c <RDMIdentify::Off(rdm::identify::Mode)>
 80048ea:	b98d      	cbnz	r5, 8004910 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	4620      	mov	r0, r4
 80048f0:	75dd      	strb	r5, [r3, #23]
 80048f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048f6:	f7ff bd87 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80048fa:	7011      	strb	r1, [r2, #0]
 80048fc:	2104      	movs	r1, #4
 80048fe:	f002 ff2d 	bl	800775c <LedBlink::SetMode(ledblink::Mode)>
 8004902:	7839      	ldrb	r1, [r7, #0]
 8004904:	2900      	cmp	r1, #0
 8004906:	d0f0      	beq.n	80048ea <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004908:	4630      	mov	r0, r6
 800490a:	f7fd fa15 	bl	8001d38 <RDMIdentify::On(rdm::identify::Mode)>
 800490e:	e7ec      	b.n	80048ea <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004912:	bf00      	nop
 8004914:	20000648 	andcs	r0, r0, r8, asr #12
 8004918:	20000645 	andcs	r0, r0, r5, asr #12
 800491c:	200017dc 	ldrdcs	r1, [r0], -ip
 8004920:	20000644 	andcs	r0, r0, r4, asr #12

08004924 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004924:	b470      	push	{r4, r5, r6}
 8004926:	6842      	ldr	r2, [r0, #4]
 8004928:	4603      	mov	r3, r0
 800492a:	7d94      	ldrb	r4, [r2, #22]
 800492c:	2c02      	cmp	r4, #2
 800492e:	d003      	beq.n	8004938 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8004930:	2101      	movs	r1, #1
 8004932:	bc70      	pop	{r4, r5, r6}
 8004934:	f7ff bf90 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004938:	4c0b      	ldr	r4, [pc, #44]	; (8004968 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 800493a:	7dd6      	ldrb	r6, [r2, #23]
 800493c:	6824      	ldr	r4, [r4, #0]
 800493e:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 8004942:	42ae      	cmp	r6, r5
 8004944:	d104      	bne.n	8004950 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8004946:	7e15      	ldrb	r5, [r2, #24]
 8004948:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 800494c:	4295      	cmp	r5, r2
 800494e:	d002      	beq.n	8004956 <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004950:	2106      	movs	r1, #6
 8004952:	4618      	mov	r0, r3
 8004954:	e7ed      	b.n	8004932 <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8004956:	b921      	cbnz	r1, 8004962 <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004958:	6883      	ldr	r3, [r0, #8]
 800495a:	75d9      	strb	r1, [r3, #23]
 800495c:	bc70      	pop	{r4, r5, r6}
 800495e:	f7ff bd53 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004962:	bc70      	pop	{r4, r5, r6}
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000640 	andcs	r0, r0, r0, asr #12

0800496c <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 800496c:	6842      	ldr	r2, [r0, #4]
 800496e:	7d92      	ldrb	r2, [r2, #22]
 8004970:	b112      	cbz	r2, 8004978 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 8004972:	2101      	movs	r1, #1
 8004974:	f7ff bf70 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004978:	2104      	movs	r1, #4
 800497a:	6883      	ldr	r3, [r0, #8]
 800497c:	75d9      	strb	r1, [r3, #23]
 800497e:	761a      	strb	r2, [r3, #24]
 8004980:	765a      	strb	r2, [r3, #25]
 8004982:	769a      	strb	r2, [r3, #26]
 8004984:	76da      	strb	r2, [r3, #27]
 8004986:	f7ff bd3f 	b.w	8004408 <RDMHandler::RespondMessageAck()>
	...

0800498c <RDMHandler::SetPersonality(bool, unsigned short)>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	6843      	ldr	r3, [r0, #4]
 8004990:	4615      	mov	r5, r2
 8004992:	7d9a      	ldrb	r2, [r3, #22]
 8004994:	4604      	mov	r4, r0
 8004996:	2a01      	cmp	r2, #1
 8004998:	d004      	beq.n	80049a4 <RDMHandler::SetPersonality(bool, unsigned short)+0x18>
 800499a:	2101      	movs	r1, #1
 800499c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a0:	f7ff bf5a 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 80049a4:	4f0c      	ldr	r7, [pc, #48]	; (80049d8 <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>)
 80049a6:	7dde      	ldrb	r6, [r3, #23]
 80049a8:	4629      	mov	r1, r5
 80049aa:	6838      	ldr	r0, [r7, #0]
 80049ac:	f7ff fc92 	bl	80042d4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80049b0:	b10e      	cbz	r6, 80049b6 <RDMHandler::SetPersonality(bool, unsigned short)+0x2a>
 80049b2:	4286      	cmp	r6, r0
 80049b4:	d902      	bls.n	80049bc <RDMHandler::SetPersonality(bool, unsigned short)+0x30>
 80049b6:	2106      	movs	r1, #6
 80049b8:	4620      	mov	r0, r4
 80049ba:	e7ef      	b.n	800499c <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 80049bc:	4632      	mov	r2, r6
 80049be:	6838      	ldr	r0, [r7, #0]
 80049c0:	4629      	mov	r1, r5
 80049c2:	f7ff fc8e 	bl	80042e2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 80049c6:	2200      	movs	r2, #0
 80049c8:	68a3      	ldr	r3, [r4, #8]
 80049ca:	4620      	mov	r0, r4
 80049cc:	75da      	strb	r2, [r3, #23]
 80049ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049d2:	f7ff bd19 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80049d6:	bf00      	nop
 80049d8:	20000640 	andcs	r0, r0, r0, asr #12

080049dc <RDMHandler::GetPersonalityDescription(unsigned short)>:
 80049dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e0:	6843      	ldr	r3, [r0, #4]
 80049e2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004a5c <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 80049e6:	7dde      	ldrb	r6, [r3, #23]
 80049e8:	4604      	mov	r4, r0
 80049ea:	f8d9 0000 	ldr.w	r0, [r9]
 80049ee:	460f      	mov	r7, r1
 80049f0:	f7ff fc70 	bl	80042d4 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80049f4:	b10e      	cbz	r6, 80049fa <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 80049f6:	4286      	cmp	r6, r0
 80049f8:	d905      	bls.n	8004a06 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 80049fa:	4620      	mov	r0, r4
 80049fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a00:	2106      	movs	r1, #6
 8004a02:	f7ff bf29 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a06:	4632      	mov	r2, r6
 8004a08:	4639      	mov	r1, r7
 8004a0a:	f8d9 0000 	ldr.w	r0, [r9]
 8004a0e:	f7ff fc55 	bl	80042bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004a12:	8803      	ldrh	r3, [r0, #0]
 8004a14:	68a5      	ldr	r5, [r4, #8]
 8004a16:	0a1a      	lsrs	r2, r3, #8
 8004a18:	4639      	mov	r1, r7
 8004a1a:	766a      	strb	r2, [r5, #25]
 8004a1c:	f8d9 0000 	ldr.w	r0, [r9]
 8004a20:	4632      	mov	r2, r6
 8004a22:	762e      	strb	r6, [r5, #24]
 8004a24:	76ab      	strb	r3, [r5, #26]
 8004a26:	f7ff fc49 	bl	80042bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f105 081b 	add.w	r8, r5, #27
 8004a30:	1dc1      	adds	r1, r0, #7
 8004a32:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8004a36:	b2d3      	uxtb	r3, r2
 8004a38:	429e      	cmp	r6, r3
 8004a3a:	d907      	bls.n	8004a4c <RDMHandler::GetPersonalityDescription(unsigned short)+0x70>
 8004a3c:	3201      	adds	r2, #1
 8004a3e:	2a21      	cmp	r2, #33	; 0x21
 8004a40:	d004      	beq.n	8004a4c <RDMHandler::GetPersonalityDescription(unsigned short)+0x70>
 8004a42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004a46:	f808 3b01 	strb.w	r3, [r8], #1
 8004a4a:	e7f2      	b.n	8004a32 <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 8004a4c:	3303      	adds	r3, #3
 8004a4e:	75eb      	strb	r3, [r5, #23]
 8004a50:	4620      	mov	r0, r4
 8004a52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a56:	f7ff bcd7 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004a5a:	bf00      	nop
 8004a5c:	20000640 	andcs	r0, r0, r0, asr #12

08004a60 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004a60:	b570      	push	{r4, r5, r6, lr}
 8004a62:	6846      	ldr	r6, [r0, #4]
 8004a64:	460d      	mov	r5, r1
 8004a66:	7db3      	ldrb	r3, [r6, #22]
 8004a68:	4604      	mov	r4, r0
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	d004      	beq.n	8004a7a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004a70:	2101      	movs	r1, #1
 8004a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a76:	f7ff beef 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a7a:	7df2      	ldrb	r2, [r6, #23]
 8004a7c:	7e33      	ldrb	r3, [r6, #24]
 8004a7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	1e53      	subs	r3, r2, #1
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d301      	bcc.n	8004a90 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8004a8c:	2106      	movs	r1, #6
 8004a8e:	e7f0      	b.n	8004a72 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	f7ff fbe9 	bl	800426a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004a98:	b935      	cbnz	r5, 8004aa8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8004a9a:	68a3      	ldr	r3, [r4, #8]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	75dd      	strb	r5, [r3, #23]
 8004aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aa4:	f7ff bcb0 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000640 	andcs	r0, r0, r0, asr #12

08004ab0 <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	6843      	ldr	r3, [r0, #4]
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	7dde      	ldrb	r6, [r3, #23]
 8004ab8:	2eff      	cmp	r6, #255	; 0xff
 8004aba:	d004      	beq.n	8004ac6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <RDMHandler::GetSensorDefinition(unsigned short)+0xa4>)
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	7903      	ldrb	r3, [r0, #4]
 8004ac2:	42b3      	cmp	r3, r6
 8004ac4:	d805      	bhi.n	8004ad2 <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004acc:	2106      	movs	r1, #6
 8004ace:	f7ff bec3 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	68ac      	ldr	r4, [r5, #8]
 8004ad6:	f7fd fde9 	bl	80026ac <RDMSensors::GetDefintion(unsigned char)>
 8004ada:	7803      	ldrb	r3, [r0, #0]
 8004adc:	42b3      	cmp	r3, r6
 8004ade:	d1f2      	bne.n	8004ac6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004ae0:	7623      	strb	r3, [r4, #24]
 8004ae2:	7843      	ldrb	r3, [r0, #1]
 8004ae4:	f100 010c 	add.w	r1, r0, #12
 8004ae8:	7663      	strb	r3, [r4, #25]
 8004aea:	7883      	ldrb	r3, [r0, #2]
 8004aec:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004af0:	76a3      	strb	r3, [r4, #26]
 8004af2:	78c3      	ldrb	r3, [r0, #3]
 8004af4:	76e3      	strb	r3, [r4, #27]
 8004af6:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004afa:	7723      	strb	r3, [r4, #28]
 8004afc:	8883      	ldrh	r3, [r0, #4]
 8004afe:	7763      	strb	r3, [r4, #29]
 8004b00:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004b04:	77a3      	strb	r3, [r4, #30]
 8004b06:	88c3      	ldrh	r3, [r0, #6]
 8004b08:	77e3      	strb	r3, [r4, #31]
 8004b0a:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8004b0e:	f884 3020 	strb.w	r3, [r4, #32]
 8004b12:	8903      	ldrh	r3, [r0, #8]
 8004b14:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8004b18:	f990 300b 	ldrsb.w	r3, [r0, #11]
 8004b1c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004b20:	8943      	ldrh	r3, [r0, #10]
 8004b22:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8004b26:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004b2a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004b2e:	230d      	movs	r3, #13
 8004b30:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8004b34:	f1a3 060d 	sub.w	r6, r3, #13
 8004b38:	42b7      	cmp	r7, r6
 8004b3a:	dd05      	ble.n	8004b48 <RDMHandler::GetSensorDefinition(unsigned short)+0x98>
 8004b3c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004b40:	3301      	adds	r3, #1
 8004b42:	f802 6b01 	strb.w	r6, [r2], #1
 8004b46:	e7f3      	b.n	8004b30 <RDMHandler::GetSensorDefinition(unsigned short)+0x80>
 8004b48:	75e3      	strb	r3, [r4, #23]
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b50:	f7ff bc5a 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004b54:	200001f8 	strdcs	r0, [r0], -r8

08004b58 <RDMHandler::GetSensorValue(unsigned short)>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	6843      	ldr	r3, [r0, #4]
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	7d9a      	ldrb	r2, [r3, #22]
 8004b60:	2a01      	cmp	r2, #1
 8004b62:	d004      	beq.n	8004b6e <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004b64:	2101      	movs	r1, #1
 8004b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b6a:	f7ff be75 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b6e:	7dde      	ldrb	r6, [r3, #23]
 8004b70:	2eff      	cmp	r6, #255	; 0xff
 8004b72:	d004      	beq.n	8004b7e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	7903      	ldrb	r3, [r0, #4]
 8004b7a:	42b3      	cmp	r3, r6
 8004b7c:	d802      	bhi.n	8004b84 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004b7e:	2106      	movs	r1, #6
 8004b80:	4628      	mov	r0, r5
 8004b82:	e7f0      	b.n	8004b66 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004b84:	4631      	mov	r1, r6
 8004b86:	68ac      	ldr	r4, [r5, #8]
 8004b88:	f7fd fd95 	bl	80026b6 <RDMSensors::GetValues(unsigned char)>
 8004b8c:	7a03      	ldrb	r3, [r0, #8]
 8004b8e:	42b3      	cmp	r3, r6
 8004b90:	d1f5      	bne.n	8004b7e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004b92:	2309      	movs	r3, #9
 8004b94:	75e3      	strb	r3, [r4, #23]
 8004b96:	2321      	movs	r3, #33	; 0x21
 8004b98:	70a3      	strb	r3, [r4, #2]
 8004b9a:	7a03      	ldrb	r3, [r0, #8]
 8004b9c:	7623      	strb	r3, [r4, #24]
 8004b9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004ba2:	7663      	strb	r3, [r4, #25]
 8004ba4:	8803      	ldrh	r3, [r0, #0]
 8004ba6:	76a3      	strb	r3, [r4, #26]
 8004ba8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004bac:	76e3      	strb	r3, [r4, #27]
 8004bae:	8843      	ldrh	r3, [r0, #2]
 8004bb0:	7723      	strb	r3, [r4, #28]
 8004bb2:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004bb6:	7763      	strb	r3, [r4, #29]
 8004bb8:	8883      	ldrh	r3, [r0, #4]
 8004bba:	77a3      	strb	r3, [r4, #30]
 8004bbc:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004bc0:	77e3      	strb	r3, [r4, #31]
 8004bc2:	88c3      	ldrh	r3, [r0, #6]
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f884 3020 	strb.w	r3, [r4, #32]
 8004bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bce:	f7ff bc1b 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004bd2:	bf00      	nop
 8004bd4:	200001f8 	strdcs	r0, [r0], -r8

08004bd8 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	6843      	ldr	r3, [r0, #4]
 8004bde:	4606      	mov	r6, r0
 8004be0:	7d9a      	ldrb	r2, [r3, #22]
 8004be2:	460d      	mov	r5, r1
 8004be4:	2a01      	cmp	r2, #1
 8004be6:	d004      	beq.n	8004bf2 <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004be8:	2101      	movs	r1, #1
 8004bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	f7ff be33 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004bf2:	7ddf      	ldrb	r7, [r3, #23]
 8004bf4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004c88 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004bf8:	2fff      	cmp	r7, #255	; 0xff
 8004bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfe:	d004      	beq.n	8004c0a <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004c00:	791a      	ldrb	r2, [r3, #4]
 8004c02:	42ba      	cmp	r2, r7
 8004c04:	d801      	bhi.n	8004c0a <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004c06:	2106      	movs	r1, #6
 8004c08:	e7ef      	b.n	8004bea <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004c0a:	4639      	mov	r1, r7
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd fd57 	bl	80026c0 <RDMSensors::SetValues(unsigned char)>
 8004c12:	bbb5      	cbnz	r5, 8004c82 <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004c14:	2fff      	cmp	r7, #255	; 0xff
 8004c16:	68b4      	ldr	r4, [r6, #8]
 8004c18:	d112      	bne.n	8004c40 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004c1a:	2309      	movs	r3, #9
 8004c1c:	75e3      	strb	r3, [r4, #23]
 8004c1e:	2321      	movs	r3, #33	; 0x21
 8004c20:	7625      	strb	r5, [r4, #24]
 8004c22:	70a3      	strb	r3, [r4, #2]
 8004c24:	7665      	strb	r5, [r4, #25]
 8004c26:	76a5      	strb	r5, [r4, #26]
 8004c28:	76e5      	strb	r5, [r4, #27]
 8004c2a:	7725      	strb	r5, [r4, #28]
 8004c2c:	7765      	strb	r5, [r4, #29]
 8004c2e:	77a5      	strb	r5, [r4, #30]
 8004c30:	77e5      	strb	r5, [r4, #31]
 8004c32:	f884 5020 	strb.w	r5, [r4, #32]
 8004c36:	4630      	mov	r0, r6
 8004c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	f7ff bbe4 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004c40:	4639      	mov	r1, r7
 8004c42:	f8d8 0000 	ldr.w	r0, [r8]
 8004c46:	f7fd fd36 	bl	80026b6 <RDMSensors::GetValues(unsigned char)>
 8004c4a:	2309      	movs	r3, #9
 8004c4c:	75e3      	strb	r3, [r4, #23]
 8004c4e:	2321      	movs	r3, #33	; 0x21
 8004c50:	70a3      	strb	r3, [r4, #2]
 8004c52:	7a03      	ldrb	r3, [r0, #8]
 8004c54:	7623      	strb	r3, [r4, #24]
 8004c56:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004c5a:	7663      	strb	r3, [r4, #25]
 8004c5c:	8803      	ldrh	r3, [r0, #0]
 8004c5e:	76a3      	strb	r3, [r4, #26]
 8004c60:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004c64:	76e3      	strb	r3, [r4, #27]
 8004c66:	8843      	ldrh	r3, [r0, #2]
 8004c68:	7723      	strb	r3, [r4, #28]
 8004c6a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004c6e:	7763      	strb	r3, [r4, #29]
 8004c70:	8883      	ldrh	r3, [r0, #4]
 8004c72:	77a3      	strb	r3, [r4, #30]
 8004c74:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004c78:	77e3      	strb	r3, [r4, #31]
 8004c7a:	88c3      	ldrh	r3, [r0, #6]
 8004c7c:	f884 3020 	strb.w	r3, [r4, #32]
 8004c80:	e7d9      	b.n	8004c36 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c86:	bf00      	nop
 8004c88:	200001f8 	strdcs	r0, [r0], -r8

08004c8c <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	6843      	ldr	r3, [r0, #4]
 8004c90:	4604      	mov	r4, r0
 8004c92:	7d9a      	ldrb	r2, [r3, #22]
 8004c94:	460d      	mov	r5, r1
 8004c96:	2a01      	cmp	r2, #1
 8004c98:	d004      	beq.n	8004ca4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca0:	f7ff bdda 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ca4:	7dd9      	ldrb	r1, [r3, #23]
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004ca8:	29ff      	cmp	r1, #255	; 0xff
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	7903      	ldrb	r3, [r0, #4]
 8004cae:	d103      	bne.n	8004cb8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004cb0:	b923      	cbnz	r3, 8004cbc <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004cb2:	2106      	movs	r1, #6
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	e7f1      	b.n	8004c9c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	d2fa      	bcs.n	8004cb2 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004cbc:	f7fd fd17 	bl	80026ee <RDMSensors::SetRecord(unsigned char)>
 8004cc0:	b935      	cbnz	r5, 8004cd0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	75dd      	strb	r5, [r3, #23]
 8004cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ccc:	f7ff bb9c 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200001f8 	strdcs	r0, [r0], -r8

08004cd8 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004cd8:	2104      	movs	r1, #4
 8004cda:	f7ff bdbd 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004ce0 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	6843      	ldr	r3, [r0, #4]
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	7d9a      	ldrb	r2, [r3, #22]
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	d004      	beq.n	8004cf6 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	f7ff bdb1 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cf6:	7ddd      	ldrb	r5, [r3, #23]
 8004cf8:	2d02      	cmp	r5, #2
 8004cfa:	d102      	bne.n	8004d02 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004cfc:	2106      	movs	r1, #6
 8004cfe:	f7ff fdab 	bl	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d02:	1e6b      	subs	r3, r5, #1
 8004d04:	4259      	negs	r1, r3
 8004d06:	4159      	adcs	r1, r3
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6858      	ldr	r0, [r3, #4]
 8004d0e:	b110      	cbz	r0, 8004d16 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004d10:	6803      	ldr	r3, [r0, #0]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	4798      	blx	r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	68a3      	ldr	r3, [r4, #8]
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	75da      	strb	r2, [r3, #23]
 8004d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d22:	f7ff bb71 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004d26:	bf00      	nop
 8004d28:	200016ec 	andcs	r1, r0, ip, ror #13

08004d2c <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	6843      	ldr	r3, [r0, #4]
 8004d30:	4604      	mov	r4, r0
 8004d32:	7d99      	ldrb	r1, [r3, #22]
 8004d34:	2901      	cmp	r1, #1
 8004d36:	d004      	beq.n	8004d42 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	f7ff bd8b 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d42:	4e0b      	ldr	r6, [pc, #44]	; (8004d70 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004d44:	7ddd      	ldrb	r5, [r3, #23]
 8004d46:	6830      	ldr	r0, [r6, #0]
 8004d48:	b105      	cbz	r5, 8004d4c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	f002 fa54 	bl	80071f8 <Display::SetSleep(bool)>
 8004d50:	6833      	ldr	r3, [r6, #0]
 8004d52:	6858      	ldr	r0, [r3, #4]
 8004d54:	b118      	cbz	r0, 8004d5e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004d56:	6803      	ldr	r3, [r0, #0]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4798      	blx	r3
 8004d5e:	2200      	movs	r2, #0
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	4620      	mov	r0, r4
 8004d64:	75da      	strb	r2, [r3, #23]
 8004d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d6a:	f7ff bb4d 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004d6e:	bf00      	nop
 8004d70:	200016ec 	andcs	r1, r0, ip, ror #13

08004d74 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	6843      	ldr	r3, [r0, #4]
 8004d78:	4604      	mov	r4, r0
 8004d7a:	7d9a      	ldrb	r2, [r3, #22]
 8004d7c:	b08a      	sub	sp, #40	; 0x28
 8004d7e:	2a07      	cmp	r2, #7
 8004d80:	d005      	beq.n	8004d8e <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004d82:	2101      	movs	r1, #1
 8004d84:	b00a      	add	sp, #40	; 0x28
 8004d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d8a:	f7ff bd65 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d8e:	7dd8      	ldrb	r0, [r3, #23]
 8004d90:	7e1a      	ldrb	r2, [r3, #24]
 8004d92:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004d96:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004d9a:	9206      	str	r2, [sp, #24]
 8004d9c:	7e5a      	ldrb	r2, [r3, #25]
 8004d9e:	3a01      	subs	r2, #1
 8004da0:	9205      	str	r2, [sp, #20]
 8004da2:	7e9a      	ldrb	r2, [r3, #26]
 8004da4:	9204      	str	r2, [sp, #16]
 8004da6:	7eda      	ldrb	r2, [r3, #27]
 8004da8:	9203      	str	r2, [sp, #12]
 8004daa:	7f1a      	ldrb	r2, [r3, #28]
 8004dac:	7f5b      	ldrb	r3, [r3, #29]
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	b979      	cbnz	r1, 8004dd4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004db6:	a901      	add	r1, sp, #4
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	f002 fd5f 	bl	800787c <Hardware::SetTime(tm const*)>
 8004dbe:	b918      	cbnz	r0, 8004dc8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f7ff fd48 	bl	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	4620      	mov	r0, r4
 8004dce:	75da      	strb	r2, [r3, #23]
 8004dd0:	f7ff fb1a 	bl	8004408 <RDMHandler::RespondMessageAck()>
 8004dd4:	b00a      	add	sp, #40	; 0x28
 8004dd6:	bd10      	pop	{r4, pc}
 8004dd8:	200017e0 	andcs	r1, r0, r0, ror #15

08004ddc <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004ddc:	6842      	ldr	r2, [r0, #4]
 8004dde:	7d91      	ldrb	r1, [r2, #22]
 8004de0:	2901      	cmp	r1, #1
 8004de2:	d002      	beq.n	8004dea <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004de4:	2101      	movs	r1, #1
 8004de6:	f7ff bd37 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004dea:	7dd1      	ldrb	r1, [r2, #23]
 8004dec:	1eca      	subs	r2, r1, #3
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	2afb      	cmp	r2, #251	; 0xfb
 8004df2:	d801      	bhi.n	8004df8 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004df4:	2106      	movs	r1, #6
 8004df6:	e7f6      	b.n	8004de6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004df8:	29ff      	cmp	r1, #255	; 0xff
 8004dfa:	d104      	bne.n	8004e06 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	6883      	ldr	r3, [r0, #8]
 8004e00:	75da      	strb	r2, [r3, #23]
 8004e02:	f7ff bb01 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004e06:	2104      	movs	r1, #4
 8004e08:	e7ed      	b.n	8004de6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004e0a <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	6843      	ldr	r3, [r0, #4]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	7d9a      	ldrb	r2, [r3, #22]
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	d004      	beq.n	8004e20 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004e16:	2101      	movs	r1, #1
 8004e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e1c:	f7ff bd1c 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e20:	7dd8      	ldrb	r0, [r3, #23]
 8004e22:	f7fc fee3 	bl	8001bec <rdm::selftest::Set(unsigned char)>
 8004e26:	b910      	cbnz	r0, 8004e2e <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004e28:	2106      	movs	r1, #6
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	e7f4      	b.n	8004e18 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	68a3      	ldr	r3, [r4, #8]
 8004e32:	4620      	mov	r0, r4
 8004e34:	75da      	strb	r2, [r3, #23]
 8004e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e3a:	f7ff bae5 	b.w	8004408 <RDMHandler::RespondMessageAck()>

08004e3e <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004e3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e40:	6845      	ldr	r5, [r0, #4]
 8004e42:	4604      	mov	r4, r0
 8004e44:	a901      	add	r1, sp, #4
 8004e46:	7de8      	ldrb	r0, [r5, #23]
 8004e48:	f7fc ff04 	bl	8001c54 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	b928      	cbnz	r0, 8004e5c <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004e50:	2106      	movs	r1, #6
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff fd00 	bl	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e58:	b003      	add	sp, #12
 8004e5a:	bd30      	pop	{r4, r5, pc}
 8004e5c:	9a01      	ldr	r2, [sp, #4]
 8004e5e:	2a20      	cmp	r2, #32
 8004e60:	bf84      	itt	hi
 8004e62:	2220      	movhi	r2, #32
 8004e64:	9201      	strhi	r2, [sp, #4]
 8004e66:	9901      	ldr	r1, [sp, #4]
 8004e68:	68a2      	ldr	r2, [r4, #8]
 8004e6a:	1c48      	adds	r0, r1, #1
 8004e6c:	75d0      	strb	r0, [r2, #23]
 8004e6e:	7de8      	ldrb	r0, [r5, #23]
 8004e70:	3219      	adds	r2, #25
 8004e72:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004e76:	4419      	add	r1, r3
 8004e78:	428b      	cmp	r3, r1
 8004e7a:	d004      	beq.n	8004e86 <RDMHandler::GetSelfTestDescription(unsigned short)+0x48>
 8004e7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e80:	f802 0b01 	strb.w	r0, [r2], #1
 8004e84:	e7f8      	b.n	8004e78 <RDMHandler::GetSelfTestDescription(unsigned short)+0x3a>
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7ff fabe 	bl	8004408 <RDMHandler::RespondMessageAck()>
 8004e8c:	e7e4      	b.n	8004e58 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
	...

08004e90 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e92:	4604      	mov	r4, r0
 8004e94:	b961      	cbnz	r1, 8004eb0 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004e96:	6846      	ldr	r6, [r0, #4]
 8004e98:	466a      	mov	r2, sp
 8004e9a:	7df3      	ldrb	r3, [r6, #23]
 8004e9c:	7e35      	ldrb	r5, [r6, #24]
 8004e9e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004ea2:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <RDMHandler::GetSlotDescription(unsigned short)+0x78>)
 8004ea4:	b2ad      	uxth	r5, r5
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f7ff f9c7 	bl	800423c <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004eae:	b928      	cbnz	r0, 8004ebc <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004eb0:	2106      	movs	r1, #6
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f7ff fcd0 	bl	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f8bd 1000 	ldrh.w	r1, [sp]
 8004ec2:	aa01      	add	r2, sp, #4
 8004ec4:	f000 fa3a 	bl	800533c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004ece:	9a01      	ldr	r2, [sp, #4]
 8004ed0:	2a20      	cmp	r2, #32
 8004ed2:	bf84      	itt	hi
 8004ed4:	2220      	movhi	r2, #32
 8004ed6:	9201      	strhi	r2, [sp, #4]
 8004ed8:	9901      	ldr	r1, [sp, #4]
 8004eda:	68a2      	ldr	r2, [r4, #8]
 8004edc:	1c88      	adds	r0, r1, #2
 8004ede:	75d0      	strb	r0, [r2, #23]
 8004ee0:	7df0      	ldrb	r0, [r6, #23]
 8004ee2:	321a      	adds	r2, #26
 8004ee4:	f802 0c02 	strb.w	r0, [r2, #-2]
 8004ee8:	7e30      	ldrb	r0, [r6, #24]
 8004eea:	4419      	add	r1, r3
 8004eec:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	d004      	beq.n	8004efe <RDMHandler::GetSlotDescription(unsigned short)+0x6e>
 8004ef4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004ef8:	f802 0b01 	strb.w	r0, [r2], #1
 8004efc:	e7f8      	b.n	8004ef0 <RDMHandler::GetSlotDescription(unsigned short)+0x60>
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff fa82 	bl	8004408 <RDMHandler::RespondMessageAck()>
 8004f04:	e7d8      	b.n	8004eb8 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004f06:	bf00      	nop
 8004f08:	20000640 	andcs	r0, r0, r0, asr #12

08004f0c <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f0e:	6843      	ldr	r3, [r0, #4]
 8004f10:	4605      	mov	r5, r0
 8004f12:	7d9b      	ldrb	r3, [r3, #22]
 8004f14:	460e      	mov	r6, r1
 8004f16:	b12b      	cbz	r3, 8004f24 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004f18:	2101      	movs	r1, #1
 8004f1a:	b003      	add	sp, #12
 8004f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004f20:	f7ff bc9a 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f24:	f06f 070d 	mvn.w	r7, #13
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xbc>)
 8004f2a:	4669      	mov	r1, sp
 8004f2c:	681c      	ldr	r4, [r3, #0]
 8004f2e:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004f38:	1d20      	adds	r0, r4, #4
 8004f3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f3e:	f7ff f80a 	bl	8003f56 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004f42:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004f46:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004f4a:	f104 020e 	add.w	r2, r4, #14
 8004f4e:	1b3f      	subs	r7, r7, r4
 8004f50:	18b9      	adds	r1, r7, r2
 8004f52:	4288      	cmp	r0, r1
 8004f54:	d904      	bls.n	8004f60 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x54>
 8004f56:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004f5a:	440b      	add	r3, r1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	e7f7      	b.n	8004f50 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8004f60:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8004f64:	2201      	movs	r2, #1
 8004f66:	2100      	movs	r1, #0
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7ff f9ba 	bl	80042e2 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4620      	mov	r0, r4
 8004f72:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 8004f76:	f7ff f978 	bl	800426a <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004f7a:	2213      	movs	r2, #19
 8004f7c:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8004f80:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004f84:	f7ff f967 	bl	8004256 <memcpy.isra.0>
 8004f88:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004f8c:	f7fe fa63 	bl	8003456 <RDMSubDevices::SetFactoryDefaults()>
 8004f90:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004f94:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004f98:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004fa8:	b110      	cbz	r0, 8004fb0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 8004faa:	6803      	ldr	r3, [r0, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4798      	blx	r3
 8004fb0:	b93e      	cbnz	r6, 8004fc2 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb6>
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	68ab      	ldr	r3, [r5, #8]
 8004fb6:	75de      	strb	r6, [r3, #23]
 8004fb8:	b003      	add	sp, #12
 8004fba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004fbe:	f7ff ba23 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8004fc2:	b003      	add	sp, #12
 8004fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000640 	andcs	r0, r0, r0, asr #12

08004fcc <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8004fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fce:	6845      	ldr	r5, [r0, #4]
 8004fd0:	460e      	mov	r6, r1
 8004fd2:	7dab      	ldrb	r3, [r5, #22]
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	4611      	mov	r1, r2
 8004fda:	d905      	bls.n	8004fe8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8004fdc:	2101      	movs	r1, #1
 8004fde:	b002      	add	sp, #8
 8004fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fe4:	f7ff bc38 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8004fea:	6810      	ldr	r0, [r2, #0]
 8004fec:	f105 0217 	add.w	r2, r5, #23
 8004ff0:	b159      	cbz	r1, 800500a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8004ff2:	308c      	adds	r0, #140	; 0x8c
 8004ff4:	f7fe f999 	bl	800332a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8004ff8:	b97e      	cbnz	r6, 800501a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	75de      	strb	r6, [r3, #23]
 8005000:	b002      	add	sp, #8
 8005002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005006:	f7ff b9ff 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 800500a:	4669      	mov	r1, sp
 800500c:	3004      	adds	r0, #4
 800500e:	9200      	str	r2, [sp, #0]
 8005010:	f88d 3004 	strb.w	r3, [sp, #4]
 8005014:	f7fe ff9f 	bl	8003f56 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8005018:	e7ee      	b.n	8004ff8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 800501a:	b002      	add	sp, #8
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	bf00      	nop
 8005020:	20000640 	andcs	r0, r0, r0, asr #12

08005024 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8005024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005028:	4616      	mov	r6, r2
 800502a:	2700      	movs	r7, #0
 800502c:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 8005030:	2c20      	cmp	r4, #32
 8005032:	46be      	mov	lr, r7
 8005034:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8005038:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800503c:	d004      	beq.n	8005048 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 800503e:	2105      	movs	r1, #5
 8005040:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005044:	f7ff bc08 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 8005048:	4c2d      	ldr	r4, [pc, #180]	; (8005100 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 800504a:	6824      	ldr	r4, [r4, #0]
 800504c:	88a4      	ldrh	r4, [r4, #4]
 800504e:	4294      	cmp	r4, r2
 8005050:	d205      	bcs.n	800505e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8005052:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8005056:	42a2      	cmp	r2, r4
 8005058:	d001      	beq.n	800505e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800505a:	2109      	movs	r1, #9
 800505c:	e7f0      	b.n	8005040 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800505e:	f04f 0c1e 	mov.w	ip, #30
 8005062:	2400      	movs	r4, #0
 8005064:	4d27      	ldr	r5, [pc, #156]	; (8005104 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 8005066:	f8b5 9000 	ldrh.w	r9, [r5]
 800506a:	4599      	cmp	r9, r3
 800506c:	bf02      	ittt	eq
 800506e:	462c      	moveq	r4, r5
 8005070:	7daf      	ldrbeq	r7, [r5, #22]
 8005072:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8005076:	f1bc 0c01 	subs.w	ip, ip, #1
 800507a:	f105 0518 	add.w	r5, r5, #24
 800507e:	d1f2      	bne.n	8005066 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 8005080:	b90c      	cbnz	r4, 8005086 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8005082:	2100      	movs	r1, #0
 8005084:	e7dc      	b.n	8005040 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8005086:	7803      	ldrb	r3, [r0, #0]
 8005088:	b19b      	cbz	r3, 80050b2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 800508a:	2f00      	cmp	r7, #0
 800508c:	d0f9      	beq.n	8005082 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800508e:	2e20      	cmp	r6, #32
 8005090:	d121      	bne.n	80050d6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 8005092:	2900      	cmp	r1, #0
 8005094:	d131      	bne.n	80050fa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 8005096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800509a:	429a      	cmp	r2, r3
 800509c:	d0dd      	beq.n	800505a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800509e:	6863      	ldr	r3, [r4, #4]
 80050a0:	b913      	cbnz	r3, 80050a8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 80050a2:	68a1      	ldr	r1, [r4, #8]
 80050a4:	07cd      	lsls	r5, r1, #31
 80050a6:	d5ca      	bpl.n	800503e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 80050a8:	7d21      	ldrb	r1, [r4, #20]
 80050aa:	4541      	cmp	r1, r8
 80050ac:	d005      	beq.n	80050ba <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 80050ae:	2101      	movs	r1, #1
 80050b0:	e7c6      	b.n	8005040 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80050b2:	f1be 0f00 	cmp.w	lr, #0
 80050b6:	d1ea      	bne.n	800508e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 80050b8:	e7e3      	b.n	8005082 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 80050ba:	68a1      	ldr	r1, [r4, #8]
 80050bc:	eb00 0461 	add.w	r4, r0, r1, asr #1
 80050c0:	104d      	asrs	r5, r1, #1
 80050c2:	07c9      	lsls	r1, r1, #31
 80050c4:	bf48      	it	mi
 80050c6:	5941      	ldrmi	r1, [r0, r5]
 80050c8:	4620      	mov	r0, r4
 80050ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050ce:	bf48      	it	mi
 80050d0:	58cb      	ldrmi	r3, [r1, r3]
 80050d2:	4611      	mov	r1, r2
 80050d4:	4718      	bx	r3
 80050d6:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80050da:	f003 0401 	and.w	r4, r3, #1
 80050de:	b90d      	cbnz	r5, 80050e4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 80050e0:	2c00      	cmp	r4, #0
 80050e2:	d0ac      	beq.n	800503e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 80050e4:	105e      	asrs	r6, r3, #1
 80050e6:	eb00 0363 	add.w	r3, r0, r3, asr #1
 80050ea:	b10c      	cbz	r4, 80050f0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 80050ec:	5980      	ldr	r0, [r0, r6]
 80050ee:	5945      	ldr	r5, [r0, r5]
 80050f0:	4618      	mov	r0, r3
 80050f2:	462b      	mov	r3, r5
 80050f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f8:	4718      	bx	r3
 80050fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050fe:	bf00      	nop
 8005100:	200001fc 	strdcs	r0, [r0], -ip
 8005104:	08009adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, ip, pc}

08005108 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8005108:	23ff      	movs	r3, #255	; 0xff
 800510a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510e:	7013      	strb	r3, [r2, #0]
 8005110:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005114:	7d0b      	ldrb	r3, [r1, #20]
 8005116:	f891 8015 	ldrb.w	r8, [r1, #21]
 800511a:	f101 0b02 	add.w	fp, r1, #2
 800511e:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 8005122:	4b57      	ldr	r3, [pc, #348]	; (8005280 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x178>)
 8005124:	4607      	mov	r7, r0
 8005126:	460d      	mov	r5, r1
 8005128:	4614      	mov	r4, r2
 800512a:	4956      	ldr	r1, [pc, #344]	; (8005284 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x17c>)
 800512c:	2206      	movs	r2, #6
 800512e:	4658      	mov	r0, fp
 8005130:	f8d3 9000 	ldr.w	r9, [r3]
 8005134:	f7ff f872 	bl	800421c <memcmp>
 8005138:	f109 0604 	add.w	r6, r9, #4
 800513c:	4682      	mov	sl, r0
 800513e:	2202      	movs	r2, #2
 8005140:	4631      	mov	r1, r6
 8005142:	4658      	mov	r0, fp
 8005144:	fa1f f888 	uxth.w	r8, r8
 8005148:	f7ff f868 	bl	800421c <memcmp>
 800514c:	b928      	cbnz	r0, 800515a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x52>
 800514e:	2204      	movs	r2, #4
 8005150:	494c      	ldr	r1, [pc, #304]	; (8005284 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x17c>)
 8005152:	18a8      	adds	r0, r5, r2
 8005154:	f7ff f862 	bl	800421c <memcmp>
 8005158:	b160      	cbz	r0, 8005174 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 800515a:	4631      	mov	r1, r6
 800515c:	2206      	movs	r2, #6
 800515e:	4658      	mov	r0, fp
 8005160:	f7ff f85c 	bl	800421c <memcmp>
 8005164:	4601      	mov	r1, r0
 8005166:	b130      	cbz	r0, 8005176 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8005168:	f1ba 0f00 	cmp.w	sl, #0
 800516c:	d04a      	beq.n	8005204 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfc>
 800516e:	b003      	add	sp, #12
 8005170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	2101      	movs	r1, #1
 8005176:	2301      	movs	r3, #1
 8005178:	7cea      	ldrb	r2, [r5, #19]
 800517a:	2a10      	cmp	r2, #16
 800517c:	d16e      	bne.n	800525c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x154>
 800517e:	f1b8 0f01 	cmp.w	r8, #1
 8005182:	d142      	bne.n	800520a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x102>
 8005184:	787b      	ldrb	r3, [r7, #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f1      	bne.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800518a:	2206      	movs	r2, #6
 800518c:	4631      	mov	r1, r6
 800518e:	f105 0017 	add.w	r0, r5, #23
 8005192:	f7ff f843 	bl	800421c <memcmp>
 8005196:	2800      	cmp	r0, #0
 8005198:	dce9      	bgt.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800519a:	2206      	movs	r2, #6
 800519c:	4630      	mov	r0, r6
 800519e:	f105 011d 	add.w	r1, r5, #29
 80051a2:	f7ff f83b 	bl	800421c <memcmp>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	dce1      	bgt.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80051aa:	23fe      	movs	r3, #254	; 0xfe
 80051ac:	7023      	strb	r3, [r4, #0]
 80051ae:	7063      	strb	r3, [r4, #1]
 80051b0:	70a3      	strb	r3, [r4, #2]
 80051b2:	70e3      	strb	r3, [r4, #3]
 80051b4:	7123      	strb	r3, [r4, #4]
 80051b6:	7163      	strb	r3, [r4, #5]
 80051b8:	71a3      	strb	r3, [r4, #6]
 80051ba:	23aa      	movs	r3, #170	; 0xaa
 80051bc:	4622      	mov	r2, r4
 80051be:	71e3      	strb	r3, [r4, #7]
 80051c0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80051c4:	f109 090a 	add.w	r9, r9, #10
 80051c8:	7831      	ldrb	r1, [r6, #0]
 80051ca:	3202      	adds	r2, #2
 80051cc:	f061 0155 	orn	r1, r1, #85	; 0x55
 80051d0:	7191      	strb	r1, [r2, #6]
 80051d2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80051d6:	f041 0155 	orr.w	r1, r1, #85	; 0x55
 80051da:	71d1      	strb	r1, [r2, #7]
 80051dc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051e0:	454e      	cmp	r6, r9
 80051e2:	440b      	add	r3, r1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	d1ef      	bne.n	80051c8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc0>
 80051e8:	0a1a      	lsrs	r2, r3, #8
 80051ea:	f062 0155 	orn	r1, r2, #85	; 0x55
 80051ee:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80051f2:	7562      	strb	r2, [r4, #21]
 80051f4:	f063 0255 	orn	r2, r3, #85	; 0x55
 80051f8:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80051fc:	7521      	strb	r1, [r4, #20]
 80051fe:	75a2      	strb	r2, [r4, #22]
 8005200:	75e3      	strb	r3, [r4, #23]
 8005202:	e7b4      	b.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005204:	4651      	mov	r1, sl
 8005206:	4653      	mov	r3, sl
 8005208:	e7b6      	b.n	8005178 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 800520a:	f1b8 0f03 	cmp.w	r8, #3
 800520e:	d118      	bne.n	8005242 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13a>
 8005210:	7daa      	ldrb	r2, [r5, #22]
 8005212:	2a00      	cmp	r2, #0
 8005214:	d1ab      	bne.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005216:	707a      	strb	r2, [r7, #1]
 8005218:	f1ba 0f00 	cmp.w	sl, #0
 800521c:	d0a7      	beq.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0a5      	beq.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005222:	2302      	movs	r3, #2
 8005224:	75e3      	strb	r3, [r4, #23]
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x180>)
 8005228:	7622      	strb	r2, [r4, #24]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	7662      	strb	r2, [r4, #25]
 800522e:	889b      	ldrh	r3, [r3, #4]
 8005230:	b10b      	cbz	r3, 8005236 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x12e>
 8005232:	2302      	movs	r3, #2
 8005234:	7663      	strb	r3, [r4, #25]
 8005236:	4638      	mov	r0, r7
 8005238:	b003      	add	sp, #12
 800523a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523e:	f7ff b8e3 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 8005242:	f1b8 0f02 	cmp.w	r8, #2
 8005246:	d192      	bne.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005248:	7daa      	ldrb	r2, [r5, #22]
 800524a:	2a00      	cmp	r2, #0
 800524c:	d18f      	bne.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800524e:	2101      	movs	r1, #1
 8005250:	7079      	strb	r1, [r7, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d08b      	beq.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005256:	f884 8017 	strb.w	r8, [r4, #23]
 800525a:	e7e4      	b.n	8005226 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x11e>
 800525c:	7c68      	ldrb	r0, [r5, #17]
 800525e:	7cab      	ldrb	r3, [r5, #18]
 8005260:	f1ba 0f00 	cmp.w	sl, #0
 8005264:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8005268:	b29b      	uxth	r3, r3
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	7dab      	ldrb	r3, [r5, #22]
 800526e:	bf08      	it	eq
 8005270:	2101      	moveq	r1, #1
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	4638      	mov	r0, r7
 8005276:	4643      	mov	r3, r8
 8005278:	f7ff fed4 	bl	8005024 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800527c:	e777      	b.n	800516e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800527e:	bf00      	nop
 8005280:	20000640 	andcs	r0, r0, r0, asr #12
 8005284:	08009ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp, ip, pc}
 8005288:	200001fc 	strdcs	r0, [r0], -ip

0800528c <RDMHandler::GetIdentifyMode(unsigned short)>:
 800528c:	2201      	movs	r2, #1
 800528e:	6883      	ldr	r3, [r0, #8]
 8005290:	75da      	strb	r2, [r3, #23]
 8005292:	4a02      	ldr	r2, [pc, #8]	; (800529c <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	761a      	strb	r2, [r3, #24]
 8005298:	f7ff b8b6 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 800529c:	20000645 	andcs	r0, r0, r5, asr #12

080052a0 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	6843      	ldr	r3, [r0, #4]
 80052a4:	4604      	mov	r4, r0
 80052a6:	7d9a      	ldrb	r2, [r3, #22]
 80052a8:	460d      	mov	r5, r1
 80052aa:	2a01      	cmp	r2, #1
 80052ac:	d004      	beq.n	80052b8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 80052ae:	2101      	movs	r1, #1
 80052b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b4:	f7ff bad0 	b.w	8004858 <RDMHandler::RespondMessageNack(unsigned short)>
 80052b8:	7dd9      	ldrb	r1, [r3, #23]
 80052ba:	1e4b      	subs	r3, r1, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2bfd      	cmp	r3, #253	; 0xfd
 80052c0:	d801      	bhi.n	80052c6 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 80052c2:	2106      	movs	r1, #6
 80052c4:	e7f4      	b.n	80052b0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 80052cc:	7019      	strb	r1, [r3, #0]
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b15b      	cbz	r3, 80052ec <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80052d4:	b151      	cbz	r1, 80052ec <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80052d6:	21ff      	movs	r1, #255	; 0xff
 80052d8:	f7fc fd2e 	bl	8001d38 <RDMIdentify::On(rdm::identify::Mode)>
 80052dc:	b94d      	cbnz	r5, 80052f2 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 80052de:	68a3      	ldr	r3, [r4, #8]
 80052e0:	4620      	mov	r0, r4
 80052e2:	75dd      	strb	r5, [r3, #23]
 80052e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052e8:	f7ff b88e 	b.w	8004408 <RDMHandler::RespondMessageAck()>
 80052ec:	f7fc fd3e 	bl	8001d6c <RDMIdentify::Off(rdm::identify::Mode)>
 80052f0:	e7f4      	b.n	80052dc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000648 	andcs	r0, r0, r8, asr #12
 80052f8:	20000645 	andcs	r0, r0, r5, asr #12
 80052fc:	20000644 	andcs	r0, r0, r4, asr #12

08005300 <RDMIdentify::RDMIdentify()>:
 8005300:	4b01      	ldr	r3, [pc, #4]	; (8005308 <RDMIdentify::RDMIdentify()+0x8>)
 8005302:	6018      	str	r0, [r3, #0]
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	20000648 	andcs	r0, r0, r8, asr #12

0800530c <RDMSlotInfo::bsearch(unsigned short)>:
 800530c:	b530      	push	{r4, r5, lr}
 800530e:	2128      	movs	r1, #40	; 0x28
 8005310:	4604      	mov	r4, r0
 8005312:	2200      	movs	r2, #0
 8005314:	4d08      	ldr	r5, [pc, #32]	; (8005338 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 8005316:	1a8b      	subs	r3, r1, r2
 8005318:	eb02 0063 	add.w	r0, r2, r3, asr #1
 800531c:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
 8005320:	42a3      	cmp	r3, r4
 8005322:	d205      	bcs.n	8005330 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8005324:	1c42      	adds	r2, r0, #1
 8005326:	428a      	cmp	r2, r1
 8005328:	ddf5      	ble.n	8005316 <RDMSlotInfo::bsearch(unsigned short)+0xa>
 800532a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800532e:	bd30      	pop	{r4, r5, pc}
 8005330:	d9fd      	bls.n	800532e <RDMSlotInfo::bsearch(unsigned short)+0x22>
 8005332:	1e41      	subs	r1, r0, #1
 8005334:	e7f7      	b.n	8005326 <RDMSlotInfo::bsearch(unsigned short)+0x1a>
 8005336:	bf00      	nop
 8005338:	0800a300 	stmdaeq	r0, {r8, r9, sp, pc}

0800533c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 800533c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005340:	4299      	cmp	r1, r3
 8005342:	b510      	push	{r4, lr}
 8005344:	4614      	mov	r4, r2
 8005346:	d103      	bne.n	8005350 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8005348:	4611      	mov	r1, r2
 800534a:	f7fc fd21 	bl	8001d90 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 800534e:	bd10      	pop	{r4, pc}
 8005350:	4608      	mov	r0, r1
 8005352:	f7ff ffdb 	bl	800530c <RDMSlotInfo::bsearch(unsigned short)>
 8005356:	2800      	cmp	r0, #0
 8005358:	da02      	bge.n	8005360 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 800535a:	2000      	movs	r0, #0
 800535c:	6020      	str	r0, [r4, #0]
 800535e:	e7f6      	b.n	800534e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 8005362:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005366:	6840      	ldr	r0, [r0, #4]
 8005368:	4602      	mov	r2, r0
 800536a:	4613      	mov	r3, r2
 800536c:	7819      	ldrb	r1, [r3, #0]
 800536e:	3201      	adds	r2, #1
 8005370:	2900      	cmp	r1, #0
 8005372:	d1fa      	bne.n	800536a <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 8005374:	1a1b      	subs	r3, r3, r0
 8005376:	b29b      	uxth	r3, r3
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	e7e8      	b.n	800534e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 800537c:	0800a300 	stmdaeq	r0, {r8, r9, sp, pc}

08005380 <RDMDevice::RDMDevice()>:
 8005380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005382:	4b35      	ldr	r3, [pc, #212]	; (8005458 <RDMDevice::RDMDevice()+0xd8>)
 8005384:	4a35      	ldr	r2, [pc, #212]	; (800545c <RDMDevice::RDMDevice()+0xdc>)
 8005386:	7859      	ldrb	r1, [r3, #1]
 8005388:	4604      	mov	r4, r0
 800538a:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 800538e:	7818      	ldrb	r0, [r3, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	4615      	mov	r5, r2
 8005394:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 8005398:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800539c:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 80053a0:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 80053a4:	67a3      	str	r3, [r4, #120]	; 0x78
 80053a6:	4613      	mov	r3, r2
 80053a8:	781e      	ldrb	r6, [r3, #0]
 80053aa:	3201      	adds	r2, #1
 80053ac:	2e00      	cmp	r6, #0
 80053ae:	d1fa      	bne.n	80053a6 <RDMDevice::RDMDevice()+0x26>
 80053b0:	1b5b      	subs	r3, r3, r5
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	bf28      	it	cs
 80053b6:	2320      	movcs	r3, #32
 80053b8:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 80053bc:	462e      	mov	r6, r5
 80053be:	461a      	mov	r2, r3
 80053c0:	4f26      	ldr	r7, [pc, #152]	; (800545c <RDMDevice::RDMDevice()+0xdc>)
 80053c2:	3a01      	subs	r2, #1
 80053c4:	d304      	bcc.n	80053d0 <RDMDevice::RDMDevice()+0x50>
 80053c6:	f817 cb01 	ldrb.w	ip, [r7], #1
 80053ca:	f806 cb01 	strb.w	ip, [r6], #1
 80053ce:	e7f8      	b.n	80053c2 <RDMDevice::RDMDevice()+0x42>
 80053d0:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80053d4:	4b22      	ldr	r3, [pc, #136]	; (8005460 <RDMDevice::RDMDevice()+0xe0>)
 80053d6:	7020      	strb	r0, [r4, #0]
 80053d8:	7061      	strb	r1, [r4, #1]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	4669      	mov	r1, sp
 80053de:	f001 fd6d 	bl	8006ebc <Network::MacAddressCopyTo(unsigned char*)>
 80053e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80053e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80053ea:	70a3      	strb	r3, [r4, #2]
 80053ec:	7263      	strb	r3, [r4, #9]
 80053ee:	4b1d      	ldr	r3, [pc, #116]	; (8005464 <RDMDevice::RDMDevice()+0xe4>)
 80053f0:	70e2      	strb	r2, [r4, #3]
 80053f2:	7222      	strb	r2, [r4, #8]
 80053f4:	461a      	mov	r2, r3
 80053f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80053fa:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80053fe:	7121      	strb	r1, [r4, #4]
 8005400:	7160      	strb	r0, [r4, #5]
 8005402:	71a0      	strb	r0, [r4, #6]
 8005404:	71e1      	strb	r1, [r4, #7]
 8005406:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800540a:	2900      	cmp	r1, #0
 800540c:	d1fb      	bne.n	8005406 <RDMDevice::RDMDevice()+0x86>
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	2b20      	cmp	r3, #32
 8005412:	bf28      	it	cs
 8005414:	2320      	movcs	r3, #32
 8005416:	461a      	mov	r2, r3
 8005418:	4912      	ldr	r1, [pc, #72]	; (8005464 <RDMDevice::RDMDevice()+0xe4>)
 800541a:	3a01      	subs	r2, #1
 800541c:	d304      	bcc.n	8005428 <RDMDevice::RDMDevice()+0xa8>
 800541e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005422:	f805 0b01 	strb.w	r0, [r5], #1
 8005426:	e7f8      	b.n	800541a <RDMDevice::RDMDevice()+0x9a>
 8005428:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800542c:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 8005430:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005432:	2314      	movs	r3, #20
 8005434:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <RDMDevice::RDMDevice()+0xe8>)
 8005436:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800543a:	f104 0067 	add.w	r0, r4, #103	; 0x67
 800543e:	f104 0353 	add.w	r3, r4, #83	; 0x53
 8005442:	4298      	cmp	r0, r3
 8005444:	d004      	beq.n	8005450 <RDMDevice::RDMDevice()+0xd0>
 8005446:	f812 1b01 	ldrb.w	r1, [r2], #1
 800544a:	f803 1b01 	strb.w	r1, [r3], #1
 800544e:	e7f8      	b.n	8005442 <RDMDevice::RDMDevice()+0xc2>
 8005450:	4620      	mov	r0, r4
 8005452:	b003      	add	sp, #12
 8005454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005456:	bf00      	nop
 8005458:	0800a53d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, sp, pc}
 800545c:	0800a53f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, sl, sp, pc}
 8005460:	200016e4 	andcs	r1, r0, r4, ror #13
 8005464:	0800a440 	stmdaeq	r0, {r6, sl, sp, pc}
 8005468:	0800a528 	stmdaeq	r0, {r3, r5, r8, sl, sp, pc}

0800546c <RDMDevice::Print()>:
 800546c:	b513      	push	{r0, r1, r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	4818      	ldr	r0, [pc, #96]	; (80054d4 <RDMDevice::Print()+0x68>)
 8005472:	f7fc ffd3 	bl	800241c <printf>
 8005476:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800547a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800547e:	4816      	ldr	r0, [pc, #88]	; (80054d8 <RDMDevice::Print()+0x6c>)
 8005480:	f7fc ffcc 	bl	800241c <printf>
 8005484:	7862      	ldrb	r2, [r4, #1]
 8005486:	7821      	ldrb	r1, [r4, #0]
 8005488:	4814      	ldr	r0, [pc, #80]	; (80054dc <RDMDevice::Print()+0x70>)
 800548a:	f7fc ffc7 	bl	800241c <printf>
 800548e:	79a3      	ldrb	r3, [r4, #6]
 8005490:	7a22      	ldrb	r2, [r4, #8]
 8005492:	7a61      	ldrb	r1, [r4, #9]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	4812      	ldr	r0, [pc, #72]	; (80054e0 <RDMDevice::Print()+0x74>)
 8005498:	79e3      	ldrb	r3, [r4, #7]
 800549a:	f7fc ffbf 	bl	800241c <printf>
 800549e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80054a2:	f104 020a 	add.w	r2, r4, #10
 80054a6:	480f      	ldr	r0, [pc, #60]	; (80054e4 <RDMDevice::Print()+0x78>)
 80054a8:	f7fc ffb8 	bl	800241c <printf>
 80054ac:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 80054b0:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80054b4:	0a09      	lsrs	r1, r1, #8
 80054b6:	480c      	ldr	r0, [pc, #48]	; (80054e8 <RDMDevice::Print()+0x7c>)
 80054b8:	f7fc ffb0 	bl	800241c <printf>
 80054bc:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80054c0:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80054c4:	4809      	ldr	r0, [pc, #36]	; (80054ec <RDMDevice::Print()+0x80>)
 80054c6:	0a09      	lsrs	r1, r1, #8
 80054c8:	b002      	add	sp, #8
 80054ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ce:	f7fc bfa5 	b.w	800241c <printf>
 80054d2:	bf00      	nop
 80054d4:	0800a454 	stmdaeq	r0, {r2, r4, r6, sl, sp, pc}
 80054d8:	0800a46e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, sp, pc}
 80054dc:	0800a489 	stmdaeq	r0, {r0, r3, r7, sl, sp, pc}
 80054e0:	0800a4a8 	stmdaeq	r0, {r3, r5, r7, sl, sp, pc}
 80054e4:	0800a4cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, sl, sp, pc}
 80054e8:	0800a4ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp, pc}
 80054ec:	0800a509 	stmdaeq	r0, {r0, r3, r8, sl, sp, pc}

080054f0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	460e      	mov	r6, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	4604      	mov	r4, r0
 80054fa:	4690      	mov	r8, r2
 80054fc:	461d      	mov	r5, r3
 80054fe:	9f06      	ldr	r7, [sp, #24]
 8005500:	f000 fa9c 	bl	8005a3c <PixelConfiguration::Validate(unsigned int&)>
 8005504:	2e01      	cmp	r6, #1
 8005506:	d009      	beq.n	800551c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 8005508:	7ce2      	ldrb	r2, [r4, #19]
 800550a:	b93a      	cbnz	r2, 800551c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800550c:	2e04      	cmp	r6, #4
 800550e:	d13f      	bne.n	8005590 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa0>
 8005510:	2303      	movs	r3, #3
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	4641      	mov	r1, r8
 8005516:	4620      	mov	r0, r4
 8005518:	f000 fa90 	bl	8005a3c <PixelConfiguration::Validate(unsigned int&)>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	2b07      	cmp	r3, #7
 8005520:	bf0d      	iteet	eq
 8005522:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005526:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800552a:	22aa      	movne	r2, #170	; 0xaa
 800552c:	2180      	moveq	r1, #128	; 0x80
 800552e:	bf15      	itete	ne
 8005530:	e9c5 2300 	strdne	r2, r3, [r5]
 8005534:	e9c5 1300 	strdeq	r1, r3, [r5]
 8005538:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800553c:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 8005540:	69a2      	ldr	r2, [r4, #24]
 8005542:	60ab      	str	r3, [r5, #8]
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	b10a      	cbz	r2, 800554c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 8005548:	429a      	cmp	r2, r3
 800554a:	d900      	bls.n	800554e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800554c:	61a3      	str	r3, [r4, #24]
 800554e:	69a2      	ldr	r2, [r4, #24]
 8005550:	fbb3 f3f2 	udiv	r3, r3, r2
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	6963      	ldr	r3, [r4, #20]
 8005558:	682a      	ldr	r2, [r5, #0]
 800555a:	42b3      	cmp	r3, r6
 800555c:	bf94      	ite	ls
 800555e:	6163      	strls	r3, [r4, #20]
 8005560:	6166      	strhi	r6, [r4, #20]
 8005562:	1c53      	adds	r3, r2, #1
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	2e01      	cmp	r6, #1
 8005568:	fbb2 f2f3 	udiv	r2, r2, r3
 800556c:	9b07      	ldr	r3, [sp, #28]
 800556e:	f102 0201 	add.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	bf09      	itett	eq
 8005576:	682a      	ldreq	r2, [r5, #0]
 8005578:	6963      	ldrne	r3, [r4, #20]
 800557a:	1c53      	addeq	r3, r2, #1
 800557c:	683a      	ldreq	r2, [r7, #0]
 800557e:	bf16      	itet	ne
 8005580:	435a      	mulne	r2, r3
 8005582:	fbb2 f2f3 	udiveq	r2, r2, r3
 8005586:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800558a:	60ea      	str	r2, [r5, #12]
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0be      	beq.n	8005514 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 8005596:	3b0b      	subs	r3, #11
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf88      	it	hi
 800559c:	6022      	strhi	r2, [r4, #0]
 800559e:	e7b9      	b.n	8005514 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

080055a0 <PixelDmxConfiguration::Dump()>:
 80055a0:	4770      	bx	lr

080055a2 <LightSet::Blackout(bool)>:
 80055a2:	4770      	bx	lr

080055a4 <LightSet::Print()>:
 80055a4:	4770      	bx	lr

080055a6 <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 80055a6:	2000      	movs	r0, #0
 80055a8:	4770      	bx	lr

080055aa <PixelDmxParamsRdm::GetDmxStartAddress()>:
 80055aa:	2001      	movs	r0, #1
 80055ac:	4770      	bx	lr

080055ae <PixelDmxParamsRdm::GetDmxFootprint()>:
 80055ae:	2006      	movs	r0, #6
 80055b0:	4770      	bx	lr

080055b2 <PixelDmxParamsRdm::Stop(unsigned int)>:
 80055b2:	4770      	bx	lr

080055b4 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80055b4:	2905      	cmp	r1, #5
 80055b6:	f04f 0000 	mov.w	r0, #0
 80055ba:	bf9f      	itttt	ls
 80055bc:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80055c0:	7090      	strbls	r0, [r2, #2]
 80055c2:	8013      	strhls	r3, [r2, #0]
 80055c4:	2001      	movls	r0, #1
 80055c6:	4770      	bx	lr

080055c8 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 80055c8:	4770      	bx	lr

080055ca <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 80055ca:	b510      	push	{r4, lr}
 80055cc:	4604      	mov	r4, r0
 80055ce:	f002 fb1e 	bl	8007c0e <operator delete(void*)>
 80055d2:	4620      	mov	r0, r4
 80055d4:	bd10      	pop	{r4, pc}
	...

080055d8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>:
 80055d8:	4b02      	ldr	r3, [pc, #8]	; (80055e4 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0xc>)
 80055da:	6003      	str	r3, [r0, #0]
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0x10>)
 80055de:	6019      	str	r1, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	0800a564 	stmdaeq	r0, {r2, r5, r6, r8, sl, sp, pc}
 80055e8:	2000064c 	andcs	r0, r0, ip, asr #12

080055ec <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	b570      	push	{r4, r5, r6, lr}
 80055f0:	4606      	mov	r6, r0
 80055f2:	4614      	mov	r4, r2
 80055f4:	d934      	bls.n	8005660 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 80055f6:	7953      	ldrb	r3, [r2, #5]
 80055f8:	b933      	cbnz	r3, 8005608 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80055fa:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80055fc:	7013      	strb	r3, [r2, #0]
 80055fe:	4621      	mov	r1, r4
 8005600:	4630      	mov	r0, r6
 8005602:	f7fc f9cb 	bl	800199c <PixelDmxParamsRdm::Display(unsigned char const*)>
 8005606:	e02b      	b.n	8005660 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005608:	2bff      	cmp	r3, #255	; 0xff
 800560a:	d124      	bne.n	8005656 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 800560e:	7811      	ldrb	r1, [r2, #0]
 8005610:	2900      	cmp	r1, #0
 8005612:	d1f4      	bne.n	80055fe <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005614:	4d14      	ldr	r5, [pc, #80]	; (8005668 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8005616:	7013      	strb	r3, [r2, #0]
 8005618:	6828      	ldr	r0, [r5, #0]
 800561a:	7821      	ldrb	r1, [r4, #0]
 800561c:	6803      	ldr	r3, [r0, #0]
 800561e:	290e      	cmp	r1, #14
 8005620:	bf28      	it	cs
 8005622:	210e      	movcs	r1, #14
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4798      	blx	r3
 8005628:	6828      	ldr	r0, [r5, #0]
 800562a:	7861      	ldrb	r1, [r4, #1]
 800562c:	6803      	ldr	r3, [r0, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4798      	blx	r3
 8005632:	6828      	ldr	r0, [r5, #0]
 8005634:	78a1      	ldrb	r1, [r4, #2]
 8005636:	6803      	ldr	r3, [r0, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4798      	blx	r3
 800563c:	6828      	ldr	r0, [r5, #0]
 800563e:	78e1      	ldrb	r1, [r4, #3]
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	2906      	cmp	r1, #6
 8005644:	bf28      	it	cs
 8005646:	2106      	movcs	r1, #6
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4798      	blx	r3
 800564c:	6828      	ldr	r0, [r5, #0]
 800564e:	7921      	ldrb	r1, [r4, #4]
 8005650:	6803      	ldr	r3, [r0, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	4798      	blx	r3
 8005656:	7963      	ldrb	r3, [r4, #5]
 8005658:	3b01      	subs	r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2bfd      	cmp	r3, #253	; 0xfd
 800565e:	d8ce      	bhi.n	80055fe <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	bf00      	nop
 8005664:	20000650 	andcs	r0, r0, r0, asr r6
 8005668:	2000064c 	andcs	r0, r0, ip, asr #12

0800566c <WS28xxDmx::GetDmxStartAddress()>:
 800566c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800566e:	4770      	bx	lr

08005670 <WS28xxDmx::GetDmxFootprint()>:
 8005670:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8005672:	4770      	bx	lr

08005674 <WS28xxDmx::~WS28xxDmx()>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8005678:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800567a:	4604      	mov	r4, r0
 800567c:	6003      	str	r3, [r0, #0]
 800567e:	b12d      	cbz	r5, 800568c <WS28xxDmx::~WS28xxDmx()+0x18>
 8005680:	4628      	mov	r0, r5
 8005682:	f000 fd19 	bl	80060b8 <WS28xx::~WS28xx()>
 8005686:	4628      	mov	r0, r5
 8005688:	f002 fac1 	bl	8007c0e <operator delete(void*)>
 800568c:	4620      	mov	r0, r4
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}

08005694 <WS28xxDmx::~WS28xxDmx()>:
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
 8005698:	f7ff ffec 	bl	8005674 <WS28xxDmx::~WS28xxDmx()>
 800569c:	4620      	mov	r0, r4
 800569e:	f002 fab6 	bl	8007c0e <operator delete(void*)>
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd10      	pop	{r4, pc}

080056a6 <WS28xxDmx::Blackout(bool)>:
 80056a6:	b538      	push	{r3, r4, r5, lr}
 80056a8:	4605      	mov	r5, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 80056b0:	f003 fd10 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d1fb      	bne.n	80056b0 <WS28xxDmx::Blackout(bool)+0xa>
 80056b8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80056ba:	b11c      	cbz	r4, 80056c4 <WS28xxDmx::Blackout(bool)+0x1e>
 80056bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056c0:	f000 be88 	b.w	80063d4 <WS28xx::Blackout()>
 80056c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056c8:	f000 bcfc 	b.w	80060c4 <WS28xx::Update()>

080056cc <WS28xxDmx::Start(unsigned int)>:
 80056cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056d0:	b93b      	cbnz	r3, 80056e2 <WS28xxDmx::Start(unsigned int)+0x16>
 80056d2:	2301      	movs	r3, #1
 80056d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80056d8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80056da:	b110      	cbz	r0, 80056e2 <WS28xxDmx::Start(unsigned int)+0x16>
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4718      	bx	r3
 80056e2:	4770      	bx	lr

080056e4 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 80056e4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80056e6:	b508      	push	{r3, lr}
 80056e8:	428a      	cmp	r2, r1
 80056ea:	d101      	bne.n	80056f0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 80056ec:	2001      	movs	r0, #1
 80056ee:	bd08      	pop	{r3, pc}
 80056f0:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80056f2:	440a      	add	r2, r1
 80056f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80056f8:	dc0b      	bgt.n	8005712 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 80056fa:	1e4a      	subs	r2, r1, #1
 80056fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005700:	d207      	bcs.n	8005712 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 8005702:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8005704:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005706:	2800      	cmp	r0, #0
 8005708:	d0f0      	beq.n	80056ec <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800570a:	6803      	ldr	r3, [r0, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4798      	blx	r3
 8005710:	e7ec      	b.n	80056ec <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 8005712:	2000      	movs	r0, #0
 8005714:	e7eb      	b.n	80056ee <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

08005716 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005716:	4603      	mov	r3, r0
 8005718:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800571a:	4288      	cmp	r0, r1
 800571c:	f04f 0000 	mov.w	r0, #0
 8005720:	d30f      	bcc.n	8005742 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 8005722:	7090      	strb	r0, [r2, #2]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	fbb1 f0f3 	udiv	r0, r1, r3
 800572a:	fb03 1110 	mls	r1, r3, r0, r1
 800572e:	2903      	cmp	r1, #3
 8005730:	d80e      	bhi.n	8005750 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 8005732:	e8df f001 	tbb	[pc, r1]
 8005736:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800573a:	f240 2305 	movw	r3, #517	; 0x205
 800573e:	2001      	movs	r0, #1
 8005740:	8013      	strh	r3, [r2, #0]
 8005742:	4770      	bx	lr
 8005744:	f240 2306 	movw	r3, #518	; 0x206
 8005748:	e7f9      	b.n	800573e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800574a:	f240 2307 	movw	r3, #519	; 0x207
 800574e:	e7f6      	b.n	800573e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8005750:	f240 2312 	movw	r3, #530	; 0x212
 8005754:	e7f3      	b.n	800573e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

08005756 <WS28xxDmx::Stop(unsigned int)>:
 8005756:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800575a:	b510      	push	{r4, lr}
 800575c:	4604      	mov	r4, r0
 800575e:	b193      	cbz	r3, 8005786 <WS28xxDmx::Stop(unsigned int)+0x30>
 8005760:	2300      	movs	r3, #0
 8005762:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005766:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005768:	b133      	cbz	r3, 8005778 <WS28xxDmx::Stop(unsigned int)+0x22>
 800576a:	f003 fcb3 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 800576e:	2800      	cmp	r0, #0
 8005770:	d1fb      	bne.n	800576a <WS28xxDmx::Stop(unsigned int)+0x14>
 8005772:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005774:	f000 fe2e 	bl	80063d4 <WS28xx::Blackout()>
 8005778:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800577a:	b120      	cbz	r0, 8005786 <WS28xxDmx::Stop(unsigned int)+0x30>
 800577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005780:	6803      	ldr	r3, [r0, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4718      	bx	r3
 8005786:	bd10      	pop	{r4, pc}

08005788 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	b085      	sub	sp, #20
 800578e:	4606      	mov	r6, r0
 8005790:	4690      	mov	r8, r2
 8005792:	4699      	mov	r9, r3
 8005794:	9103      	str	r1, [sp, #12]
 8005796:	f003 fc9d 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 800579a:	2800      	cmp	r0, #0
 800579c:	d16f      	bne.n	800587e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf6>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	6972      	ldr	r2, [r6, #20]
 80057a2:	f003 0103 	and.w	r1, r3, #3
 80057a6:	6a33      	ldr	r3, [r6, #32]
 80057a8:	2902      	cmp	r1, #2
 80057aa:	fbb9 f7f3 	udiv	r7, r9, r3
 80057ae:	d02c      	beq.n	800580a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 80057b0:	2903      	cmp	r1, #3
 80057b2:	d031      	beq.n	8005818 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 80057b4:	2901      	cmp	r1, #1
 80057b6:	6875      	ldr	r5, [r6, #4]
 80057b8:	d028      	beq.n	800580c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 80057ba:	4297      	cmp	r7, r2
 80057bc:	bf28      	it	cs
 80057be:	4617      	movcs	r7, r2
 80057c0:	4295      	cmp	r5, r2
 80057c2:	d92b      	bls.n	800581c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
 80057c4:	4605      	mov	r5, r0
 80057c6:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 80057c8:	3c01      	subs	r4, #1
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	4444      	add	r4, r8
 80057ce:	d12d      	bne.n	800582c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa4>
 80057d0:	42af      	cmp	r7, r5
 80057d2:	d94a      	bls.n	800586a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 80057d4:	eba4 0308 	sub.w	r3, r4, r8
 80057d8:	4599      	cmp	r9, r3
 80057da:	d946      	bls.n	800586a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 80057dc:	f04f 0b00 	mov.w	fp, #0
 80057e0:	69b3      	ldr	r3, [r6, #24]
 80057e2:	f894 f000 	pld	[r4]
 80057e6:	fb03 fa05 	mul.w	sl, r3, r5
 80057ea:	69b3      	ldr	r3, [r6, #24]
 80057ec:	fa1f f18b 	uxth.w	r1, fp
 80057f0:	428b      	cmp	r3, r1
 80057f2:	f10b 0b01 	add.w	fp, fp, #1
 80057f6:	d914      	bls.n	8005822 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9a>
 80057f8:	78a2      	ldrb	r2, [r4, #2]
 80057fa:	7863      	ldrb	r3, [r4, #1]
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	7822      	ldrb	r2, [r4, #0]
 8005800:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8005802:	4451      	add	r1, sl
 8005804:	f000 fccb 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005808:	e7ef      	b.n	80057ea <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 800580a:	68b5      	ldr	r5, [r6, #8]
 800580c:	442f      	add	r7, r5
 800580e:	4297      	cmp	r7, r2
 8005810:	bf28      	it	cs
 8005812:	4617      	movcs	r7, r2
 8005814:	4604      	mov	r4, r0
 8005816:	e7d8      	b.n	80057ca <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8005818:	68f5      	ldr	r5, [r6, #12]
 800581a:	e7f7      	b.n	800580c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 800581c:	4605      	mov	r5, r0
 800581e:	4604      	mov	r4, r0
 8005820:	e7d3      	b.n	80057ca <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8005822:	3501      	adds	r5, #1
 8005824:	3403      	adds	r4, #3
 8005826:	e7d3      	b.n	80057d0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 8005828:	3501      	adds	r5, #1
 800582a:	3404      	adds	r4, #4
 800582c:	42af      	cmp	r7, r5
 800582e:	d91c      	bls.n	800586a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 8005830:	eba4 0308 	sub.w	r3, r4, r8
 8005834:	4599      	cmp	r9, r3
 8005836:	d918      	bls.n	800586a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 8005838:	f04f 0a00 	mov.w	sl, #0
 800583c:	69b3      	ldr	r3, [r6, #24]
 800583e:	f894 f000 	pld	[r4]
 8005842:	fb03 fb05 	mul.w	fp, r3, r5
 8005846:	69b3      	ldr	r3, [r6, #24]
 8005848:	fa1f f18a 	uxth.w	r1, sl
 800584c:	428b      	cmp	r3, r1
 800584e:	f10a 0a01 	add.w	sl, sl, #1
 8005852:	d9e9      	bls.n	8005828 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa0>
 8005854:	78e2      	ldrb	r2, [r4, #3]
 8005856:	7863      	ldrb	r3, [r4, #1]
 8005858:	9201      	str	r2, [sp, #4]
 800585a:	78a2      	ldrb	r2, [r4, #2]
 800585c:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800585e:	9200      	str	r2, [sp, #0]
 8005860:	7822      	ldrb	r2, [r4, #0]
 8005862:	4459      	add	r1, fp
 8005864:	f000 fdf3 	bl	800644e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005868:	e7ed      	b.n	8005846 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbe>
 800586a:	6933      	ldr	r3, [r6, #16]
 800586c:	9a03      	ldr	r2, [sp, #12]
 800586e:	429a      	cmp	r2, r3
 8005870:	d105      	bne.n	800587e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf6>
 8005872:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8005874:	b005      	add	sp, #20
 8005876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f000 bc23 	b.w	80060c4 <WS28xx::Update()>
 800587e:	b005      	add	sp, #20
 8005880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005884 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 8005888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800588a:	6003      	str	r3, [r0, #0]
 800588c:	2300      	movs	r3, #0
 800588e:	460d      	mov	r5, r1
 8005890:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8005894:	2101      	movs	r1, #1
 8005896:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800589a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800589e:	8483      	strh	r3, [r0, #36]	; 0x24
 80058a0:	6283      	str	r3, [r0, #40]	; 0x28
 80058a2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80058a4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 80058aa:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80058ac:	6018      	str	r0, [r3, #0]
 80058ae:	f100 031c 	add.w	r3, r0, #28
 80058b2:	8602      	strh	r2, [r0, #48]	; 0x30
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f100 0314 	add.w	r3, r0, #20
 80058ba:	4604      	mov	r4, r0
 80058bc:	f100 0220 	add.w	r2, r0, #32
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	1d03      	adds	r3, r0, #4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f7ff fe13 	bl	80054f0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 80058ca:	201c      	movs	r0, #28
 80058cc:	f002 f9a3 	bl	8007c16 <operator new(unsigned int)>
 80058d0:	4606      	mov	r6, r0
 80058d2:	4629      	mov	r1, r5
 80058d4:	f000 fd3e 	bl	8006354 <WS28xx::WS28xx(PixelConfiguration&)>
 80058d8:	4630      	mov	r0, r6
 80058da:	6366      	str	r6, [r4, #52]	; 0x34
 80058dc:	f000 fd7a 	bl	80063d4 <WS28xx::Blackout()>
 80058e0:	69ab      	ldr	r3, [r5, #24]
 80058e2:	6a22      	ldr	r2, [r4, #32]
 80058e4:	61a3      	str	r3, [r4, #24]
 80058e6:	8bab      	ldrh	r3, [r5, #28]
 80058e8:	4628      	mov	r0, r5
 80058ea:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80058ec:	6963      	ldr	r3, [r4, #20]
 80058ee:	4353      	muls	r3, r2
 80058f0:	8623      	strh	r3, [r4, #48]	; 0x30
 80058f2:	f7ff fe55 	bl	80055a0 <PixelDmxConfiguration::Dump()>
 80058f6:	4620      	mov	r0, r4
 80058f8:	b002      	add	sp, #8
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	0800a598 	stmdaeq	r0, {r3, r4, r7, r8, sl, sp, pc}
 8005900:	20000654 	andcs	r0, r0, r4, asr r6

08005904 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 8005904:	2200      	movs	r2, #0
 8005906:	6001      	str	r1, [r0, #0]
 8005908:	4910      	ldr	r1, [pc, #64]	; (800594c <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 800590a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800590e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005912:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8005916:	81c1      	strh	r1, [r0, #14]
 8005918:	213d      	movs	r1, #61	; 0x3d
 800591a:	8201      	strh	r1, [r0, #16]
 800591c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005920:	8241      	strh	r1, [r0, #18]
 8005922:	2101      	movs	r1, #1
 8005924:	7541      	strb	r1, [r0, #21]
 8005926:	2106      	movs	r1, #6
 8005928:	75c1      	strb	r1, [r0, #23]
 800592a:	4909      	ldr	r1, [pc, #36]	; (8005950 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 800592c:	7302      	strb	r2, [r0, #12]
 800592e:	e9c0 c106 	strd	ip, r1, [r0, #24]
 8005932:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 8005936:	6201      	str	r1, [r0, #32]
 8005938:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800593c:	6241      	str	r1, [r0, #36]	; 0x24
 800593e:	211d      	movs	r1, #29
 8005940:	7582      	strb	r2, [r0, #22]
 8005942:	8501      	strh	r1, [r0, #40]	; 0x28
 8005944:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	0100aa03 	tsteq	r0, r3, lsl #20
 8005950:	00090005 	andeq	r0, r9, r5

08005954 <WS28xxDmxParams::Load()>:
 8005954:	b508      	push	{r3, lr}
 8005956:	2300      	movs	r3, #0
 8005958:	4601      	mov	r1, r0
 800595a:	6043      	str	r3, [r0, #4]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	b120      	cbz	r0, 800596a <WS28xxDmxParams::Load()+0x16>
 8005960:	6803      	ldr	r3, [r0, #0]
 8005962:	3104      	adds	r1, #4
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	4798      	blx	r3
 8005968:	2001      	movs	r0, #1
 800596a:	bd08      	pop	{r3, pc}

0800596c <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800596c:	6843      	ldr	r3, [r0, #4]
 800596e:	07da      	lsls	r2, r3, #31
 8005970:	bf44      	itt	mi
 8005972:	7a02      	ldrbmi	r2, [r0, #8]
 8005974:	600a      	strmi	r2, [r1, #0]
 8005976:	079a      	lsls	r2, r3, #30
 8005978:	d505      	bpl.n	8005986 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800597a:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800597e:	2a00      	cmp	r2, #0
 8005980:	bf08      	it	eq
 8005982:	22aa      	moveq	r2, #170	; 0xaa
 8005984:	604a      	str	r2, [r1, #4]
 8005986:	059a      	lsls	r2, r3, #22
 8005988:	bf44      	itt	mi
 800598a:	7dc2      	ldrbmi	r2, [r0, #23]
 800598c:	608a      	strmi	r2, [r1, #8]
 800598e:	055a      	lsls	r2, r3, #21
 8005990:	bf44      	itt	mi
 8005992:	7e02      	ldrbmi	r2, [r0, #24]
 8005994:	740a      	strbmi	r2, [r1, #16]
 8005996:	051a      	lsls	r2, r3, #20
 8005998:	bf44      	itt	mi
 800599a:	7e42      	ldrbmi	r2, [r0, #25]
 800599c:	744a      	strbmi	r2, [r1, #17]
 800599e:	06da      	lsls	r2, r3, #27
 80059a0:	bf44      	itt	mi
 80059a2:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 80059a6:	60ca      	strmi	r2, [r1, #12]
 80059a8:	069a      	lsls	r2, r3, #26
 80059aa:	bf44      	itt	mi
 80059ac:	7c82      	ldrbmi	r2, [r0, #18]
 80059ae:	748a      	strbmi	r2, [r1, #18]
 80059b0:	075a      	lsls	r2, r3, #29
 80059b2:	d50b      	bpl.n	80059cc <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 80059b4:	7ac2      	ldrb	r2, [r0, #11]
 80059b6:	b510      	push	{r4, lr}
 80059b8:	7b04      	ldrb	r4, [r0, #12]
 80059ba:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80059be:	838a      	strh	r2, [r1, #28]
 80059c0:	05da      	lsls	r2, r3, #23
 80059c2:	bf44      	itt	mi
 80059c4:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 80059c8:	618b      	strmi	r3, [r1, #24]
 80059ca:	bd10      	pop	{r4, pc}
 80059cc:	05db      	lsls	r3, r3, #23
 80059ce:	bf44      	itt	mi
 80059d0:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 80059d4:	618b      	strmi	r3, [r1, #24]
 80059d6:	4770      	bx	lr

080059d8 <WS28xxDmxParams::Dump()>:
 80059d8:	4770      	bx	lr
	...

080059dc <WS28xxDmx::Print()>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80059e2:	f000 fb8b 	bl	80060fc <WS28xx::Print()>
 80059e6:	4805      	ldr	r0, [pc, #20]	; (80059fc <WS28xxDmx::Print()+0x20>)
 80059e8:	f7fc fd18 	bl	800241c <printf>
 80059ec:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80059f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f4:	4802      	ldr	r0, [pc, #8]	; (8005a00 <WS28xxDmx::Print()+0x24>)
 80059f6:	f7fc bd11 	b.w	800241c <printf>
 80059fa:	bf00      	nop
 80059fc:	0800a5c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, pc}
 8005a00:	0800a5da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, sp, pc}

08005a04 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 8005a04:	f020 0308 	bic.w	r3, r0, #8
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d006      	beq.n	8005a1a <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 8005a0c:	2808      	cmp	r0, #8
 8005a0e:	d006      	beq.n	8005a1e <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 8005a10:	280a      	cmp	r0, #10
 8005a12:	bf14      	ite	ne
 8005a14:	2002      	movne	r0, #2
 8005a16:	2005      	moveq	r0, #5
 8005a18:	4770      	bx	lr
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	4770      	bx	lr
 8005a1e:	2004      	movs	r0, #4
 8005a20:	4770      	bx	lr

08005a22 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005a22:	23c0      	movs	r3, #192	; 0xc0
 8005a24:	2803      	cmp	r0, #3
 8005a26:	700b      	strb	r3, [r1, #0]
 8005a28:	d006      	beq.n	8005a38 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005a2a:	3808      	subs	r0, #8
 8005a2c:	2803      	cmp	r0, #3
 8005a2e:	bf34      	ite	cc
 8005a30:	23fc      	movcc	r3, #252	; 0xfc
 8005a32:	23f0      	movcs	r3, #240	; 0xf0
 8005a34:	7013      	strb	r3, [r2, #0]
 8005a36:	4770      	bx	lr
 8005a38:	23f8      	movs	r3, #248	; 0xf8
 8005a3a:	e7fb      	b.n	8005a34 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>

08005a3c <PixelConfiguration::Validate(unsigned int&)>:
 8005a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a3e:	e9d0 5300 	ldrd	r5, r3, [r0]
 8005a42:	2d07      	cmp	r5, #7
 8005a44:	4604      	mov	r4, r0
 8005a46:	6882      	ldr	r2, [r0, #8]
 8005a48:	d129      	bne.n	8005a9e <PixelConfiguration::Validate(unsigned int&)+0x62>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	bf28      	it	cs
 8005a50:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005a54:	6043      	str	r3, [r0, #4]
 8005a56:	2304      	movs	r3, #4
 8005a58:	600b      	str	r3, [r1, #0]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2a06      	cmp	r2, #6
 8005a5e:	74e3      	strb	r3, [r4, #19]
 8005a60:	d103      	bne.n	8005a6a <PixelConfiguration::Validate(unsigned int&)+0x2e>
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff ffce 	bl	8005a04 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 8005a68:	60a0      	str	r0, [r4, #8]
 8005a6a:	7c63      	ldrb	r3, [r4, #17]
 8005a6c:	7c22      	ldrb	r2, [r4, #16]
 8005a6e:	4628      	mov	r0, r5
 8005a70:	429a      	cmp	r2, r3
 8005a72:	bf28      	it	cs
 8005a74:	2300      	movcs	r3, #0
 8005a76:	f10d 0207 	add.w	r2, sp, #7
 8005a7a:	bf28      	it	cs
 8005a7c:	8223      	strhcs	r3, [r4, #16]
 8005a7e:	f10d 0106 	add.w	r1, sp, #6
 8005a82:	f7ff ffce 	bl	8005a22 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8005a86:	7c23      	ldrb	r3, [r4, #16]
 8005a88:	b913      	cbnz	r3, 8005a90 <PixelConfiguration::Validate(unsigned int&)+0x54>
 8005a8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a8e:	7423      	strb	r3, [r4, #16]
 8005a90:	7c63      	ldrb	r3, [r4, #17]
 8005a92:	b913      	cbnz	r3, 8005a9a <PixelConfiguration::Validate(unsigned int&)+0x5e>
 8005a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a98:	7463      	strb	r3, [r4, #17]
 8005a9a:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 8005a9c:	e020      	b.n	8005ae0 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8005a9e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8005aa2:	bf28      	it	cs
 8005aa4:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005aa8:	6043      	str	r3, [r0, #4]
 8005aaa:	2303      	movs	r3, #3
 8005aac:	600b      	str	r3, [r1, #0]
 8005aae:	f1a5 030b 	sub.w	r3, r5, #11
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d806      	bhi.n	8005ac4 <PixelConfiguration::Validate(unsigned int&)+0x88>
 8005ab6:	7c83      	ldrb	r3, [r0, #18]
 8005ab8:	2b1f      	cmp	r3, #31
 8005aba:	d81d      	bhi.n	8005af8 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 8005abc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005ac0:	74a3      	strb	r3, [r4, #18]
 8005ac2:	e000      	b.n	8005ac6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005ac4:	b9d5      	cbnz	r5, 8005afc <PixelConfiguration::Validate(unsigned int&)+0xc0>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005acc:	2a06      	cmp	r2, #6
 8005ace:	bf08      	it	eq
 8005ad0:	60a3      	streq	r3, [r4, #8]
 8005ad2:	2d0d      	cmp	r5, #13
 8005ad4:	74e3      	strb	r3, [r4, #19]
 8005ad6:	8221      	strh	r1, [r4, #16]
 8005ad8:	68e3      	ldr	r3, [r4, #12]
 8005ada:	d109      	bne.n	8005af0 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 8005adc:	b913      	cbnz	r3, 8005ae4 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 8005ae0:	60e3      	str	r3, [r4, #12]
 8005ae2:	e003      	b.n	8005aec <PixelConfiguration::Validate(unsigned int&)+0xb0>
 8005ae4:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d900      	bls.n	8005aec <PixelConfiguration::Validate(unsigned int&)+0xb0>
 8005aea:	60e2      	str	r2, [r4, #12]
 8005aec:	b003      	add	sp, #12
 8005aee:	bd30      	pop	{r4, r5, pc}
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f4      	beq.n	8005ade <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8005af4:	4a06      	ldr	r2, [pc, #24]	; (8005b10 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 8005af6:	e7f6      	b.n	8005ae6 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005af8:	23ff      	movs	r3, #255	; 0xff
 8005afa:	e7e1      	b.n	8005ac0 <PixelConfiguration::Validate(unsigned int&)+0x84>
 8005afc:	2d0d      	cmp	r5, #13
 8005afe:	d0e2      	beq.n	8005ac6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005b00:	e7ab      	b.n	8005a5a <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8005b02:	bf00      	nop
 8005b04:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005b08:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005b0c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8005b10:	017d7840 	cmneq	sp, r0, asr #16

08005b14 <PixelConfiguration::Dump()>:
 8005b14:	4770      	bx	lr
	...

08005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 8005b18:	b507      	push	{r0, r1, r2, lr}
 8005b1a:	b2cb      	uxtb	r3, r1
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8005b22:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005b26:	4601      	mov	r1, r0
 8005b28:	4803      	ldr	r0, [pc, #12]	; (8005b38 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	f000 fb37 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005b30:	b003      	add	sp, #12
 8005b32:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b36:	bf00      	nop
 8005b38:	20000684 	andcs	r0, r0, r4, lsl #13

08005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	2400      	movs	r4, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d905      	bls.n	8005b54 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	f7ff ffe4 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005b50:	3401      	adds	r4, #1
 8005b52:	e7f6      	b.n	8005b42 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
 8005b56:	bf00      	nop
 8005b58:	20000680 	andcs	r0, r0, r0, lsl #13

08005b5c <PixelPatterns::PixelPatterns(unsigned int)>:
 8005b5c:	2901      	cmp	r1, #1
 8005b5e:	bf28      	it	cs
 8005b60:	2101      	movcs	r1, #1
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005b64:	4a08      	ldr	r2, [pc, #32]	; (8005b88 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2200      	movs	r2, #0
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005b7c:	61da      	str	r2, [r3, #28]
 8005b7e:	6019      	str	r1, [r3, #0]
 8005b80:	619a      	str	r2, [r3, #24]
 8005b82:	4770      	bx	lr
 8005b84:	20000694 	mulcs	r0, r4, r6
 8005b88:	20000684 	andcs	r0, r0, r4, lsl #13
 8005b8c:	20000678 	andcs	r0, r0, r8, ror r6
 8005b90:	20000680 	andcs	r0, r0, r0, lsl #13
 8005b94:	2000181c 	andcs	r1, r0, ip, lsl r8
 8005b98:	20000658 	andcs	r0, r0, r8, asr r6

08005b9c <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005b9c:	2805      	cmp	r0, #5
 8005b9e:	bfdd      	ittte	le
 8005ba0:	220e      	movle	r2, #14
 8005ba2:	4b02      	ldrle	r3, [pc, #8]	; (8005bac <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8005ba4:	fb02 3000 	mlale	r0, r2, r0, r3
 8005ba8:	4801      	ldrgt	r0, [pc, #4]	; (8005bb0 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005baa:	4770      	bx	lr
 8005bac:	0800a606 	stmdaeq	r0, {r1, r2, r9, sl, sp, pc}
 8005bb0:	0800a5fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp, pc}

08005bb4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	460e      	mov	r6, r1
 8005bb8:	4615      	mov	r5, r2
 8005bba:	461c      	mov	r4, r3
 8005bbc:	f7ff ffbe 	bl	8005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	4905      	ldr	r1, [pc, #20]	; (8005bd8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005bca:	61cb      	str	r3, [r1, #28]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	604d      	str	r5, [r1, #4]
 8005bd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005bd4:	618c      	str	r4, [r1, #24]
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	20000658 	andcs	r0, r0, r8, asr r6

08005bdc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	460e      	mov	r6, r1
 8005be0:	461c      	mov	r4, r3
 8005be2:	4615      	mov	r5, r2
 8005be4:	f7ff ffaa 	bl	8005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005be8:	2302      	movs	r3, #2
 8005bea:	4908      	ldr	r1, [pc, #32]	; (8005c0c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005bec:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005bf0:	61cb      	str	r3, [r1, #28]
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005bf8:	604b      	str	r3, [r1, #4]
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	610b      	str	r3, [r1, #16]
 8005c00:	2300      	movs	r3, #0
 8005c02:	614b      	str	r3, [r1, #20]
 8005c04:	9b05      	ldr	r3, [sp, #20]
 8005c06:	618b      	str	r3, [r1, #24]
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000658 	andcs	r0, r0, r8, asr r6
 8005c10:	20000680 	andcs	r0, r0, r0, lsl #13

08005c14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	460e      	mov	r6, r1
 8005c18:	461d      	mov	r5, r3
 8005c1a:	4614      	mov	r4, r2
 8005c1c:	f7ff ff8e 	bl	8005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005c20:	2303      	movs	r3, #3
 8005c22:	4907      	ldr	r1, [pc, #28]	; (8005c40 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005c24:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005c28:	61cb      	str	r3, [r1, #28]
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005c2c:	604d      	str	r5, [r1, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	608c      	str	r4, [r1, #8]
 8005c32:	610b      	str	r3, [r1, #16]
 8005c34:	2300      	movs	r3, #0
 8005c36:	614b      	str	r3, [r1, #20]
 8005c38:	9b04      	ldr	r3, [sp, #16]
 8005c3a:	618b      	str	r3, [r1, #24]
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000658 	andcs	r0, r0, r8, asr r6
 8005c44:	20000680 	andcs	r0, r0, r0, lsl #13

08005c48 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	460e      	mov	r6, r1
 8005c4c:	461d      	mov	r5, r3
 8005c4e:	4614      	mov	r4, r2
 8005c50:	f7ff ff74 	bl	8005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005c54:	2304      	movs	r3, #4
 8005c56:	4912      	ldr	r1, [pc, #72]	; (8005ca0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005c58:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005c5c:	604d      	str	r5, [r1, #4]
 8005c5e:	4d11      	ldr	r5, [pc, #68]	; (8005ca4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005c60:	61cb      	str	r3, [r1, #28]
 8005c62:	6828      	ldr	r0, [r5, #0]
 8005c64:	608c      	str	r4, [r1, #8]
 8005c66:	1e43      	subs	r3, r0, #1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	610b      	str	r3, [r1, #16]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4c0d      	ldr	r4, [pc, #52]	; (8005ca8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005c72:	614b      	str	r3, [r1, #20]
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	b993      	cbnz	r3, 8005c9e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 8005c78:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	bf2c      	ite	cs
 8005c80:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005c84:	0080      	lslcc	r0, r0, #2
 8005c86:	f001 ffc8 	bl	8007c1a <operator new[](unsigned int)>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	6020      	str	r0, [r4, #0]
 8005c90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c94:	4298      	cmp	r0, r3
 8005c96:	d002      	beq.n	8005c9e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 8005c98:	f840 2b04 	str.w	r2, [r0], #4
 8005c9c:	e7fa      	b.n	8005c94 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	20000658 	andcs	r0, r0, r8, asr r6
 8005ca4:	20000680 	andcs	r0, r0, r0, lsl #13
 8005ca8:	2000067c 	andcs	r0, r0, ip, ror r6

08005cac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	460e      	mov	r6, r1
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	f7ff ff42 	bl	8005b3c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005cb8:	2305      	movs	r3, #5
 8005cba:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005cbc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005cc0:	61cb      	str	r3, [r1, #28]
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005cc8:	604b      	str	r3, [r1, #4]
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	610b      	str	r3, [r1, #16]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	614b      	str	r3, [r1, #20]
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	618b      	str	r3, [r1, #24]
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	20000658 	andcs	r0, r0, r8, asr r6

08005cdc <PixelPatterns::Wheel(unsigned char)>:
 8005cdc:	43c9      	mvns	r1, r1
 8005cde:	b2c9      	uxtb	r1, r1
 8005ce0:	2954      	cmp	r1, #84	; 0x54
 8005ce2:	d809      	bhi.n	8005cf8 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005ce4:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 8005ce8:	3801      	subs	r0, #1
 8005cea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005cee:	b2c3      	uxtb	r3, r0
 8005cf0:	b2c8      	uxtb	r0, r1
 8005cf2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8005cf6:	4770      	bx	lr
 8005cf8:	29a9      	cmp	r1, #169	; 0xa9
 8005cfa:	d80b      	bhi.n	8005d14 <PixelPatterns::Wheel(unsigned char)+0x38>
 8005cfc:	3955      	subs	r1, #85	; 0x55
 8005cfe:	b2c9      	uxtb	r1, r1
 8005d00:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005d04:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 8005d08:	b2c3      	uxtb	r3, r0
 8005d0a:	1e48      	subs	r0, r1, #1
 8005d0c:	b2c0      	uxtb	r0, r0
 8005d0e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005d12:	4770      	bx	lr
 8005d14:	3156      	adds	r1, #86	; 0x56
 8005d16:	b2c9      	uxtb	r1, r1
 8005d18:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 8005d1c:	3801      	subs	r0, #1
 8005d1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005d22:	b2c3      	uxtb	r3, r0
 8005d24:	b2c8      	uxtb	r0, r1
 8005d26:	0400      	lsls	r0, r0, #16
 8005d28:	e7f1      	b.n	8005d0e <PixelPatterns::Wheel(unsigned char)+0x32>
	...

08005d2c <PixelPatterns::Increment(unsigned int)>:
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <PixelPatterns::Increment(unsigned int)+0x38>)
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	014c      	lsls	r4, r1, #5
 8005d32:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005d36:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8005d3a:	b930      	cbnz	r0, 8005d4a <PixelPatterns::Increment(unsigned int)+0x1e>
 8005d3c:	690a      	ldr	r2, [r1, #16]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	4293      	cmp	r3, r2
 8005d42:	bf18      	it	ne
 8005d44:	4618      	movne	r0, r3
 8005d46:	6148      	str	r0, [r1, #20]
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	b92b      	cbnz	r3, 8005d58 <PixelPatterns::Increment(unsigned int)+0x2c>
 8005d4c:	4422      	add	r2, r4
 8005d4e:	6913      	ldr	r3, [r2, #16]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	6153      	str	r3, [r2, #20]
 8005d56:	e7f7      	b.n	8005d48 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	614b      	str	r3, [r1, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f3      	bne.n	8005d48 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005d60:	e7f4      	b.n	8005d4c <PixelPatterns::Increment(unsigned int)+0x20>
 8005d62:	bf00      	nop
 8005d64:	20000658 	andcs	r0, r0, r8, asr r6

08005d68 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	2600      	movs	r6, #0
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005d74:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005db8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8005d78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d7c:	695f      	ldr	r7, [r3, #20]
 8005d7e:	f8d8 1000 	ldr.w	r1, [r8]
 8005d82:	b2b2      	uxth	r2, r6
 8005d84:	4291      	cmp	r1, r2
 8005d86:	f106 0601 	add.w	r6, r6, #1
 8005d8a:	d90c      	bls.n	8005da6 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 8005d8c:	0213      	lsls	r3, r2, #8
 8005d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d92:	443b      	add	r3, r7
 8005d94:	b2d9      	uxtb	r1, r3
 8005d96:	4620      	mov	r0, r4
 8005d98:	f7ff ffa0 	bl	8005cdc <PixelPatterns::Wheel(unsigned char)>
 8005d9c:	4601      	mov	r1, r0
 8005d9e:	4610      	mov	r0, r2
 8005da0:	f7ff feba 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005da4:	e7eb      	b.n	8005d7e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 8005da6:	4629      	mov	r1, r5
 8005da8:	4620      	mov	r0, r4
 8005daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dae:	f7ff bfbd 	b.w	8005d2c <PixelPatterns::Increment(unsigned int)>
 8005db2:	bf00      	nop
 8005db4:	20000658 	andcs	r0, r0, r8, asr r6
 8005db8:	20000680 	andcs	r0, r0, r0, lsl #13

08005dbc <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f04f 0b00 	mov.w	fp, #0
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8005dca:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8005e18 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8005dce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005dd2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8005dd6:	f8df a044 	ldr.w	sl, [pc, #68]	; 8005e1c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 8005dda:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 8005dde:	f8d9 3000 	ldr.w	r3, [r9]
 8005de2:	fa1f f08b 	uxth.w	r0, fp
 8005de6:	4283      	cmp	r3, r0
 8005de8:	d90d      	bls.n	8005e06 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 8005dea:	eb08 0300 	add.w	r3, r8, r0
 8005dee:	fb0a f303 	mul.w	r3, sl, r3
 8005df2:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8005df6:	bf94      	ite	ls
 8005df8:	4631      	movls	r1, r6
 8005dfa:	4639      	movhi	r1, r7
 8005dfc:	f7ff fe8c 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e00:	f10b 0b01 	add.w	fp, fp, #1
 8005e04:	e7eb      	b.n	8005dde <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 8005e06:	4621      	mov	r1, r4
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0e:	f7ff bf8d 	b.w	8005d2c <PixelPatterns::Increment(unsigned int)>
 8005e12:	bf00      	nop
 8005e14:	20000658 	andcs	r0, r0, r8, asr r6
 8005e18:	20000680 	andcs	r0, r0, r0, lsl #13
 8005e1c:	aaaaaaab 	bge	6ab08d0 <__heap_size+0x6aaf8d0>

08005e20 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4605      	mov	r5, r0
 8005e24:	460c      	mov	r4, r1
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 8005e28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	6958      	ldr	r0, [r3, #20]
 8005e30:	f7ff fe72 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3c:	f7ff bf76 	b.w	8005d2c <PixelPatterns::Increment(unsigned int)>
 8005e40:	20000658 	andcs	r0, r0, r8, asr r6

08005e44 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8005e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e48:	460d      	mov	r5, r1
 8005e4a:	f04f 0900 	mov.w	r9, #0
 8005e4e:	4a27      	ldr	r2, [pc, #156]	; (8005eec <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 8005e50:	b085      	sub	sp, #20
 8005e52:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005e56:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8005e5a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8005e5e:	00b3      	lsls	r3, r6, #2
 8005e60:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8005ef0 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 8005e64:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005ef4 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8005e68:	9002      	str	r0, [sp, #8]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	1bbf      	subs	r7, r7, r6
 8005e6e:	f8db 1000 	ldr.w	r1, [fp]
 8005e72:	fa1f f489 	uxth.w	r4, r9
 8005e76:	42a1      	cmp	r1, r4
 8005e78:	d930      	bls.n	8005edc <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d10b      	bne.n	8005e96 <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 8005e7e:	4651      	mov	r1, sl
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fe49 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e86:	f8d8 1000 	ldr.w	r1, [r8]
 8005e8a:	9b01      	ldr	r3, [sp, #4]
 8005e8c:	f841 a003 	str.w	sl, [r1, r3]
 8005e90:	f109 0901 	add.w	r9, r9, #1
 8005e94:	e7eb      	b.n	8005e6e <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 8005e96:	42a7      	cmp	r7, r4
 8005e98:	d108      	bne.n	8005eac <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff fe3b 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005ea2:	f8d8 1000 	ldr.w	r1, [r8]
 8005ea6:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 8005eaa:	e7f1      	b.n	8005e90 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 8005eac:	f8d8 1000 	ldr.w	r1, [r8]
 8005eb0:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005eb4:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8005eb8:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 8005ebc:	0209      	lsls	r1, r1, #8
 8005ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005ec2:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8005ec6:	4301      	orrs	r1, r0
 8005ec8:	4620      	mov	r0, r4
 8005eca:	9103      	str	r1, [sp, #12]
 8005ecc:	f7ff fe24 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005ed0:	f8d8 0000 	ldr.w	r0, [r8]
 8005ed4:	9903      	ldr	r1, [sp, #12]
 8005ed6:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8005eda:	e7d9      	b.n	8005e90 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 8005edc:	4629      	mov	r1, r5
 8005ede:	9802      	ldr	r0, [sp, #8]
 8005ee0:	b005      	add	sp, #20
 8005ee2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	f7ff bf21 	b.w	8005d2c <PixelPatterns::Increment(unsigned int)>
 8005eea:	bf00      	nop
 8005eec:	20000658 	andcs	r0, r0, r8, asr r6
 8005ef0:	20000680 	andcs	r0, r0, r0, lsl #13
 8005ef4:	2000067c 	andcs	r0, r0, ip, ror r6

08005ef8 <PixelPatterns::FadeUpdate(unsigned int)>:
 8005ef8:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 8005efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005efe:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005f02:	4605      	mov	r5, r0
 8005f04:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 8005f08:	460c      	mov	r4, r1
 8005f0a:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 8005f0e:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005f12:	434a      	muls	r2, r1
 8005f14:	1a77      	subs	r7, r6, r1
 8005f16:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8005f1a:	fb07 220c 	mla	r2, r7, ip, r2
 8005f1e:	fbb2 f2f6 	udiv	r2, r2, r6
 8005f22:	0212      	lsls	r2, r2, #8
 8005f24:	fa1f fc82 	uxth.w	ip, r2
 8005f28:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8005f2c:	434a      	muls	r2, r1
 8005f2e:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 8005f32:	fb07 220e 	mla	r2, r7, lr, r2
 8005f36:	fbb2 f2f6 	udiv	r2, r2, r6
 8005f3a:	0412      	lsls	r2, r2, #16
 8005f3c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005f40:	ea4c 0202 	orr.w	r2, ip, r2
 8005f44:	fa5f fc83 	uxtb.w	ip, r3
 8005f48:	b2c3      	uxtb	r3, r0
 8005f4a:	434b      	muls	r3, r1
 8005f4c:	fb07 330c 	mla	r3, r7, ip, r3
 8005f50:	fbb3 f3f6 	udiv	r3, r3, r6
 8005f54:	2700      	movs	r7, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8005f84 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005f5c:	ea42 0603 	orr.w	r6, r2, r3
 8005f60:	f8d8 3000 	ldr.w	r3, [r8]
 8005f64:	42bb      	cmp	r3, r7
 8005f66:	d905      	bls.n	8005f74 <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 8005f68:	4638      	mov	r0, r7
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	f7ff fdd4 	bl	8005b18 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005f70:	3701      	adds	r7, #1
 8005f72:	e7f5      	b.n	8005f60 <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7c:	f7ff bed6 	b.w	8005d2c <PixelPatterns::Increment(unsigned int)>
 8005f80:	20000658 	andcs	r0, r0, r8, asr r6
 8005f84:	20000680 	andcs	r0, r0, r0, lsl #13

08005f88 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8005f8c:	014e      	lsls	r6, r1, #5
 8005f8e:	599c      	ldr	r4, [r3, r6]
 8005f90:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8005f94:	686f      	ldr	r7, [r5, #4]
 8005f96:	1b14      	subs	r4, r2, r4
 8005f98:	42bc      	cmp	r4, r7
 8005f9a:	d319      	bcc.n	8005fd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005f9c:	519a      	str	r2, [r3, r6]
 8005f9e:	69eb      	ldr	r3, [r5, #28]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d814      	bhi.n	8005fd0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005fa6:	e8df f003 	tbb	[pc, r3]
 8005faa:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8005fae:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8005fb2:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 8005fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb8:	f7ff ff00 	bl	8005dbc <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8005fbc:	e7fa      	b.n	8005fb4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fbe:	f7ff ff2f 	bl	8005e20 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8005fc2:	e7f7      	b.n	8005fb4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fc4:	f7ff ff3e 	bl	8005e44 <PixelPatterns::ScannerUpdate(unsigned int)>
 8005fc8:	e7f4      	b.n	8005fb4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fca:	f7ff ff95 	bl	8005ef8 <PixelPatterns::FadeUpdate(unsigned int)>
 8005fce:	e7f1      	b.n	8005fb4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7f0      	b.n	8005fb6 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8005fd4:	20000658 	andcs	r0, r0, r8, asr r6

08005fd8 <PixelPatterns::Run()>:
 8005fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fdc:	4605      	mov	r5, r0
 8005fde:	f003 f879 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	b9c8      	cbnz	r0, 800601a <PixelPatterns::Run()+0x42>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <PixelPatterns::Run()+0x48>)
 8005fea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8006024 <PixelPatterns::Run()+0x4c>
 8005fee:	681f      	ldr	r7, [r3, #0]
 8005ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff4:	b2f1      	uxtb	r1, r6
 8005ff6:	428b      	cmp	r3, r1
 8005ff8:	f106 0601 	add.w	r6, r6, #1
 8005ffc:	d906      	bls.n	800600c <PixelPatterns::Run()+0x34>
 8005ffe:	463a      	mov	r2, r7
 8006000:	4628      	mov	r0, r5
 8006002:	f7ff ffc1 	bl	8005f88 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 8006006:	4304      	orrs	r4, r0
 8006008:	b2e4      	uxtb	r4, r4
 800600a:	e7f1      	b.n	8005ff0 <PixelPatterns::Run()+0x18>
 800600c:	b12c      	cbz	r4, 800601a <PixelPatterns::Run()+0x42>
 800600e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006012:	4b05      	ldr	r3, [pc, #20]	; (8006028 <PixelPatterns::Run()+0x50>)
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	f000 b855 	b.w	80060c4 <WS28xx::Update()>
 800601a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800601e:	bf00      	nop
 8006020:	2000181c 	andcs	r1, r0, ip, lsl r8
 8006024:	20000678 	andcs	r0, r0, r8, ror r6
 8006028:	20000684 	andcs	r0, r0, r4, lsl #13

0800602c <PixelType::GetType(pixel::Type)>:
 800602c:	280d      	cmp	r0, #13
 800602e:	bfda      	itte	le
 8006030:	4b02      	ldrle	r3, [pc, #8]	; (800603c <PixelType::GetType(pixel::Type)+0x10>)
 8006032:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8006036:	4802      	ldrgt	r0, [pc, #8]	; (8006040 <PixelType::GetType(pixel::Type)+0x14>)
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	0800a672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, sp, pc}
 8006040:	0800a5fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp, pc}

08006044 <PixelType::GetMap(pixel::Map)>:
 8006044:	2805      	cmp	r0, #5
 8006046:	bfda      	itte	le
 8006048:	4b02      	ldrle	r3, [pc, #8]	; (8006054 <PixelType::GetMap(pixel::Map)+0x10>)
 800604a:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800604e:	4802      	ldrgt	r0, [pc, #8]	; (8006058 <PixelType::GetMap(pixel::Map)+0x14>)
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	0800a65a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, sp, pc}
 8006058:	0800983b 	stmdaeq	r0, {r0, r1, r3, r4, r5, fp, ip, pc}

0800605c <PixelType::ConvertTxH(unsigned char)>:
 800605c:	28f0      	cmp	r0, #240	; 0xf0
 800605e:	d010      	beq.n	8006082 <PixelType::ConvertTxH(unsigned char)+0x26>
 8006060:	d807      	bhi.n	8006072 <PixelType::ConvertTxH(unsigned char)+0x16>
 8006062:	28c0      	cmp	r0, #192	; 0xc0
 8006064:	d00f      	beq.n	8006086 <PixelType::ConvertTxH(unsigned char)+0x2a>
 8006066:	28e0      	cmp	r0, #224	; 0xe0
 8006068:	d00f      	beq.n	800608a <PixelType::ConvertTxH(unsigned char)+0x2e>
 800606a:	2880      	cmp	r0, #128	; 0x80
 800606c:	d113      	bne.n	8006096 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800606e:	480b      	ldr	r0, [pc, #44]	; (800609c <PixelType::ConvertTxH(unsigned char)+0x40>)
 8006070:	4770      	bx	lr
 8006072:	28fc      	cmp	r0, #252	; 0xfc
 8006074:	d00b      	beq.n	800608e <PixelType::ConvertTxH(unsigned char)+0x32>
 8006076:	28fe      	cmp	r0, #254	; 0xfe
 8006078:	d00b      	beq.n	8006092 <PixelType::ConvertTxH(unsigned char)+0x36>
 800607a:	28f8      	cmp	r0, #248	; 0xf8
 800607c:	d10b      	bne.n	8006096 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800607e:	4808      	ldr	r0, [pc, #32]	; (80060a0 <PixelType::ConvertTxH(unsigned char)+0x44>)
 8006080:	4770      	bx	lr
 8006082:	4808      	ldr	r0, [pc, #32]	; (80060a4 <PixelType::ConvertTxH(unsigned char)+0x48>)
 8006084:	4770      	bx	lr
 8006086:	4808      	ldr	r0, [pc, #32]	; (80060a8 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 8006088:	4770      	bx	lr
 800608a:	4808      	ldr	r0, [pc, #32]	; (80060ac <PixelType::ConvertTxH(unsigned char)+0x50>)
 800608c:	4770      	bx	lr
 800608e:	4808      	ldr	r0, [pc, #32]	; (80060b0 <PixelType::ConvertTxH(unsigned char)+0x54>)
 8006090:	4770      	bx	lr
 8006092:	4808      	ldr	r0, [pc, #32]	; (80060b4 <PixelType::ConvertTxH(unsigned char)+0x58>)
 8006094:	4770      	bx	lr
 8006096:	2000      	movs	r0, #0
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 80060a0:	3f480000 	svccc	0x00480000
 80060a4:	3f200000 	svccc	0x00200000
 80060a8:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 80060ac:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 80060b0:	3f700000 	svccc	0x00700000
 80060b4:	3f8c0000 	svccc	0x008c0000

080060b8 <WS28xx::~WS28xx()>:
 80060b8:	2200      	movs	r2, #0
 80060ba:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <WS28xx::~WS28xx()+0x8>)
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	4770      	bx	lr
 80060c0:	20000694 	mulcs	r0, r4, r6

080060c4 <WS28xx::Update()>:
 80060c4:	2200      	movs	r2, #0
 80060c6:	b430      	push	{r4, r5}
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <WS28xx::Update()+0x34>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68c1      	ldr	r1, [r0, #12]
 80060ce:	6944      	ldr	r4, [r0, #20]
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d902      	bls.n	80060da <WS28xx::Update()+0x16>
 80060d4:	54e2      	strb	r2, [r4, r3]
 80060d6:	3301      	adds	r3, #1
 80060d8:	e7f8      	b.n	80060cc <WS28xx::Update()+0x8>
 80060da:	2300      	movs	r3, #0
 80060dc:	6980      	ldr	r0, [r0, #24]
 80060de:	084d      	lsrs	r5, r1, #1
 80060e0:	429d      	cmp	r5, r3
 80060e2:	d006      	beq.n	80060f2 <WS28xx::Update()+0x2e>
 80060e4:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 80060e8:	ba52      	rev16	r2, r2
 80060ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80060ee:	3301      	adds	r3, #1
 80060f0:	e7f6      	b.n	80060e0 <WS28xx::Update()+0x1c>
 80060f2:	bc30      	pop	{r4, r5}
 80060f4:	f002 bfd4 	b.w	80090a0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 80060f8:	20000690 	mulcs	r0, r0, r6

080060fc <WS28xx::Print()>:
 80060fc:	b513      	push	{r0, r1, r4, lr}
 80060fe:	4604      	mov	r4, r0
 8006100:	4819      	ldr	r0, [pc, #100]	; (8006168 <WS28xx::Print()+0x6c>)
 8006102:	f7fc f98b 	bl	800241c <printf>
 8006106:	6820      	ldr	r0, [r4, #0]
 8006108:	f7ff ff90 	bl	800602c <PixelType::GetType(pixel::Type)>
 800610c:	6822      	ldr	r2, [r4, #0]
 800610e:	4601      	mov	r1, r0
 8006110:	4816      	ldr	r0, [pc, #88]	; (800616c <WS28xx::Print()+0x70>)
 8006112:	f7fc f983 	bl	800241c <printf>
 8006116:	6861      	ldr	r1, [r4, #4]
 8006118:	4815      	ldr	r0, [pc, #84]	; (8006170 <WS28xx::Print()+0x74>)
 800611a:	f7fc f97f 	bl	800241c <printf>
 800611e:	7ca3      	ldrb	r3, [r4, #18]
 8006120:	b1fb      	cbz	r3, 8006162 <WS28xx::Print()+0x66>
 8006122:	68a0      	ldr	r0, [r4, #8]
 8006124:	f7ff ff8e 	bl	8006044 <PixelType::GetMap(pixel::Map)>
 8006128:	68a2      	ldr	r2, [r4, #8]
 800612a:	4601      	mov	r1, r0
 800612c:	4811      	ldr	r0, [pc, #68]	; (8006174 <WS28xx::Print()+0x78>)
 800612e:	f7fc f975 	bl	800241c <printf>
 8006132:	7c20      	ldrb	r0, [r4, #16]
 8006134:	f7ff ff92 	bl	800605c <PixelType::ConvertTxH(unsigned char)>
 8006138:	f7fa fcdc 	bl	8000af4 <__aeabi_f2d>
 800613c:	460b      	mov	r3, r1
 800613e:	7c21      	ldrb	r1, [r4, #16]
 8006140:	4602      	mov	r2, r0
 8006142:	9100      	str	r1, [sp, #0]
 8006144:	480c      	ldr	r0, [pc, #48]	; (8006178 <WS28xx::Print()+0x7c>)
 8006146:	f7fc f969 	bl	800241c <printf>
 800614a:	7c60      	ldrb	r0, [r4, #17]
 800614c:	f7ff ff86 	bl	800605c <PixelType::ConvertTxH(unsigned char)>
 8006150:	f7fa fcd0 	bl	8000af4 <__aeabi_f2d>
 8006154:	460b      	mov	r3, r1
 8006156:	7c61      	ldrb	r1, [r4, #17]
 8006158:	4602      	mov	r2, r0
 800615a:	9100      	str	r1, [sp, #0]
 800615c:	4807      	ldr	r0, [pc, #28]	; (800617c <WS28xx::Print()+0x80>)
 800615e:	f7fc f95d 	bl	800241c <printf>
 8006162:	b002      	add	sp, #8
 8006164:	bd10      	pop	{r4, pc}
 8006166:	bf00      	nop
 8006168:	0800a6e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl, sp, pc}
 800616c:	0800a6f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, sp, pc}
 8006170:	0800a708 	stmdaeq	r0, {r3, r8, r9, sl, sp, pc}
 8006174:	0800a717 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, sp, pc}
 8006178:	0800a72b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, sl, sp, pc}
 800617c:	0800a743 	stmdaeq	r0, {r0, r1, r6, r8, r9, sl, sp, pc}

08006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	2480      	movs	r4, #128	; 0x80
 8006184:	1c4b      	adds	r3, r1, #1
 8006186:	3109      	adds	r1, #9
 8006188:	4222      	tst	r2, r4
 800618a:	bf14      	ite	ne
 800618c:	7c46      	ldrbne	r6, [r0, #17]
 800618e:	7c06      	ldrbeq	r6, [r0, #16]
 8006190:	6945      	ldr	r5, [r0, #20]
 8006192:	0864      	lsrs	r4, r4, #1
 8006194:	54ee      	strb	r6, [r5, r3]
 8006196:	3301      	adds	r3, #1
 8006198:	4299      	cmp	r1, r3
 800619a:	d1f5      	bne.n	8006188 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)+0x8>
 800619c:	bd70      	pop	{r4, r5, r6, pc}

0800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800619e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a2:	461d      	mov	r5, r3
 80061a4:	7c83      	ldrb	r3, [r0, #18]
 80061a6:	4614      	mov	r4, r2
 80061a8:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d03c      	beq.n	800622a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x8c>
 80061b0:	2318      	movs	r3, #24
 80061b2:	4359      	muls	r1, r3
 80061b4:	6883      	ldr	r3, [r0, #8]
 80061b6:	f101 0808 	add.w	r8, r1, #8
 80061ba:	3b01      	subs	r3, #1
 80061bc:	f101 0710 	add.w	r7, r1, #16
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d82d      	bhi.n	8006220 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x82>
 80061c4:	e8df f003 	tbb	[pc, r3]
 80061c8:	22191003 	andscs	r1, r9, #3
 80061cc:	46220027 	strtmi	r0, [r2], -r7, lsr #32
 80061d0:	f7ff ffd6 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 80061d4:	4632      	mov	r2, r6
 80061d6:	4641      	mov	r1, r8
 80061d8:	f7ff ffd2 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 80061dc:	462a      	mov	r2, r5
 80061de:	4639      	mov	r1, r7
 80061e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	f7ff bfcc 	b.w	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 80061e8:	462a      	mov	r2, r5
 80061ea:	f7ff ffc9 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 80061ee:	4622      	mov	r2, r4
 80061f0:	4641      	mov	r1, r8
 80061f2:	f7ff ffc5 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 80061f6:	4632      	mov	r2, r6
 80061f8:	e7f1      	b.n	80061de <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x40>
 80061fa:	462a      	mov	r2, r5
 80061fc:	f7ff ffc0 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 8006200:	4632      	mov	r2, r6
 8006202:	4641      	mov	r1, r8
 8006204:	f7ff ffbc 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 8006208:	4622      	mov	r2, r4
 800620a:	e7e8      	b.n	80061de <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x40>
 800620c:	4632      	mov	r2, r6
 800620e:	f7ff ffb7 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 8006212:	4622      	mov	r2, r4
 8006214:	e7df      	b.n	80061d6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x38>
 8006216:	4632      	mov	r2, r6
 8006218:	f7ff ffb2 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800621c:	462a      	mov	r2, r5
 800621e:	e7f0      	b.n	8006202 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x64>
 8006220:	4622      	mov	r2, r4
 8006222:	f7ff ffad 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 8006226:	462a      	mov	r2, r5
 8006228:	e7e2      	b.n	80061f0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x52>
 800622a:	6803      	ldr	r3, [r0, #0]
 800622c:	f1a3 020b 	sub.w	r2, r3, #11
 8006230:	2a01      	cmp	r2, #1
 8006232:	6942      	ldr	r2, [r0, #20]
 8006234:	d811      	bhi.n	800625a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 8006236:	7cc3      	ldrb	r3, [r0, #19]
 8006238:	3101      	adds	r1, #1
 800623a:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800623e:	6943      	ldr	r3, [r0, #20]
 8006240:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006244:	705c      	strb	r4, [r3, #1]
 8006246:	6943      	ldr	r3, [r0, #20]
 8006248:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800624c:	709d      	strb	r5, [r3, #2]
 800624e:	6943      	ldr	r3, [r0, #20]
 8006250:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006254:	70ce      	strb	r6, [r1, #3]
 8006256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625a:	b94b      	cbnz	r3, 8006270 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xd2>
 800625c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006260:	5454      	strb	r4, [r2, r1]
 8006262:	6943      	ldr	r3, [r0, #20]
 8006264:	440b      	add	r3, r1
 8006266:	705d      	strb	r5, [r3, #1]
 8006268:	6943      	ldr	r3, [r0, #20]
 800626a:	4419      	add	r1, r3
 800626c:	708e      	strb	r6, [r1, #2]
 800626e:	e7f2      	b.n	8006256 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xb8>
 8006270:	ea6f 0396 	mvn.w	r3, r6, lsr #2
 8006274:	f084 07c0 	eor.w	r7, r4, #192	; 0xc0
 8006278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800627c:	ea43 1397 	orr.w	r3, r3, r7, lsr #6
 8006280:	ea6f 1715 	mvn.w	r7, r5, lsr #4
 8006284:	f007 070c 	and.w	r7, r7, #12
 8006288:	433b      	orrs	r3, r7
 800628a:	3101      	adds	r1, #1
 800628c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006290:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 8006294:	6943      	ldr	r3, [r0, #20]
 8006296:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800629a:	705e      	strb	r6, [r3, #1]
 800629c:	6943      	ldr	r3, [r0, #20]
 800629e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80062a2:	709d      	strb	r5, [r3, #2]
 80062a4:	6943      	ldr	r3, [r0, #20]
 80062a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80062aa:	70cc      	strb	r4, [r1, #3]
 80062ac:	e7d3      	b.n	8006256 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xb8>
	...

080062b0 <WS28xx::SetupBuffers()>:
 80062b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80062b2:	4604      	mov	r4, r0
 80062b4:	a803      	add	r0, sp, #12
 80062b6:	f002 feeb 	bl	8009090 <gd32_spi_dma_tx_prepare(unsigned int*)>
 80062ba:	2100      	movs	r1, #0
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	6160      	str	r0, [r4, #20]
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	4403      	add	r3, r0
 80062c8:	61a3      	str	r3, [r4, #24]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	7001      	strb	r1, [r0, #0]
 80062ce:	3b0b      	subs	r3, #11
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d82d      	bhi.n	8006330 <WS28xx::SetupBuffers()+0x80>
 80062d4:	460d      	mov	r5, r1
 80062d6:	460e      	mov	r6, r1
 80062d8:	7041      	strb	r1, [r0, #1]
 80062da:	7081      	strb	r1, [r0, #2]
 80062dc:	70c1      	strb	r1, [r0, #3]
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	d908      	bls.n	80062f6 <WS28xx::SetupBuffers()+0x46>
 80062e4:	2300      	movs	r3, #0
 80062e6:	4629      	mov	r1, r5
 80062e8:	461a      	mov	r2, r3
 80062ea:	4620      	mov	r0, r4
 80062ec:	9600      	str	r6, [sp, #0]
 80062ee:	f7ff ff56 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80062f2:	3501      	adds	r5, #1
 80062f4:	e7f3      	b.n	80062de <WS28xx::SetupBuffers()+0x2e>
 80062f6:	6821      	ldr	r1, [r4, #0]
 80062f8:	68e2      	ldr	r2, [r4, #12]
 80062fa:	390b      	subs	r1, #11
 80062fc:	2901      	cmp	r1, #1
 80062fe:	bf94      	ite	ls
 8006300:	21ff      	movls	r1, #255	; 0xff
 8006302:	2100      	movhi	r1, #0
 8006304:	6960      	ldr	r0, [r4, #20]
 8006306:	3a04      	subs	r2, #4
 8006308:	1883      	adds	r3, r0, r2
 800630a:	5481      	strb	r1, [r0, r2]
 800630c:	7059      	strb	r1, [r3, #1]
 800630e:	7099      	strb	r1, [r3, #2]
 8006310:	70d9      	strb	r1, [r3, #3]
 8006312:	2100      	movs	r1, #0
 8006314:	68e3      	ldr	r3, [r4, #12]
 8006316:	4a0e      	ldr	r2, [pc, #56]	; (8006350 <WS28xx::SetupBuffers()+0xa0>)
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	1cda      	adds	r2, r3, #3
 800631c:	f022 0203 	bic.w	r2, r2, #3
 8006320:	60e2      	str	r2, [r4, #12]
 8006322:	68e2      	ldr	r2, [r4, #12]
 8006324:	429a      	cmp	r2, r3
 8006326:	d910      	bls.n	800634a <WS28xx::SetupBuffers()+0x9a>
 8006328:	6962      	ldr	r2, [r4, #20]
 800632a:	54d1      	strb	r1, [r2, r3]
 800632c:	3301      	adds	r3, #1
 800632e:	e7f8      	b.n	8006322 <WS28xx::SetupBuffers()+0x72>
 8006330:	6963      	ldr	r3, [r4, #20]
 8006332:	6821      	ldr	r1, [r4, #0]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	b101      	cbz	r1, 800633a <WS28xx::SetupBuffers()+0x8a>
 8006338:	7c21      	ldrb	r1, [r4, #16]
 800633a:	68e0      	ldr	r0, [r4, #12]
 800633c:	3001      	adds	r0, #1
 800633e:	4403      	add	r3, r0
 8006340:	429a      	cmp	r2, r3
 8006342:	d0e6      	beq.n	8006312 <WS28xx::SetupBuffers()+0x62>
 8006344:	f802 1b01 	strb.w	r1, [r2], #1
 8006348:	e7fa      	b.n	8006340 <WS28xx::SetupBuffers()+0x90>
 800634a:	b004      	add	sp, #16
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	bf00      	nop
 8006350:	20000690 	mulcs	r0, r0, r6

08006354 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006356:	23aa      	movs	r3, #170	; 0xaa
 8006358:	2203      	movs	r2, #3
 800635a:	e9c0 2300 	strd	r2, r3, [r0]
 800635e:	2306      	movs	r3, #6
 8006360:	6083      	str	r3, [r0, #8]
 8006362:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8006366:	8243      	strh	r3, [r0, #18]
 8006368:	2300      	movs	r3, #0
 800636a:	460d      	mov	r5, r1
 800636c:	4604      	mov	r4, r0
 800636e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8006372:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 8006374:	a901      	add	r1, sp, #4
 8006376:	6018      	str	r0, [r3, #0]
 8006378:	4628      	mov	r0, r5
 800637a:	f7ff fb5f 	bl	8005a3c <PixelConfiguration::Validate(unsigned int&)>
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fbc8 	bl	8005b14 <PixelConfiguration::Dump()>
 8006384:	68ab      	ldr	r3, [r5, #8]
 8006386:	686a      	ldr	r2, [r5, #4]
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	8a2b      	ldrh	r3, [r5, #16]
 800638c:	6829      	ldr	r1, [r5, #0]
 800638e:	8223      	strh	r3, [r4, #16]
 8006390:	7cab      	ldrb	r3, [r5, #18]
 8006392:	7ce8      	ldrb	r0, [r5, #19]
 8006394:	74e3      	strb	r3, [r4, #19]
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	6021      	str	r1, [r4, #0]
 800639a:	4353      	muls	r3, r2
 800639c:	6062      	str	r2, [r4, #4]
 800639e:	74a0      	strb	r0, [r4, #18]
 80063a0:	b998      	cbnz	r0, 80063ca <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 80063a2:	390b      	subs	r1, #11
 80063a4:	2902      	cmp	r1, #2
 80063a6:	60e3      	str	r3, [r4, #12]
 80063a8:	bf9e      	ittt	ls
 80063aa:	68e3      	ldrls	r3, [r4, #12]
 80063ac:	3208      	addls	r2, #8
 80063ae:	18d2      	addls	r2, r2, r3
 80063b0:	4620      	mov	r0, r4
 80063b2:	bf98      	it	ls
 80063b4:	60e2      	strls	r2, [r4, #12]
 80063b6:	f7ff ff7b 	bl	80062b0 <WS28xx::SetupBuffers()>
 80063ba:	f002 fde3 	bl	8008f84 <gd32_spi_dma_begin()>
 80063be:	68e8      	ldr	r0, [r5, #12]
 80063c0:	f002 fe52 	bl	8009068 <gd32_spi_dma_set_speed_hz(unsigned int)>
 80063c4:	4620      	mov	r0, r4
 80063c6:	b003      	add	sp, #12
 80063c8:	bd30      	pop	{r4, r5, pc}
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	3301      	adds	r3, #1
 80063ce:	e7e8      	b.n	80063a2 <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 80063d0:	20000694 	mulcs	r0, r4, r6

080063d4 <WS28xx::Blackout()>:
 80063d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063d6:	2100      	movs	r1, #0
 80063d8:	6802      	ldr	r2, [r0, #0]
 80063da:	6943      	ldr	r3, [r0, #20]
 80063dc:	3a0b      	subs	r2, #11
 80063de:	2a02      	cmp	r2, #2
 80063e0:	7019      	strb	r1, [r3, #0]
 80063e2:	d827      	bhi.n	8006434 <WS28xx::Blackout()+0x60>
 80063e4:	460c      	mov	r4, r1
 80063e6:	460d      	mov	r5, r1
 80063e8:	7059      	strb	r1, [r3, #1]
 80063ea:	7099      	strb	r1, [r3, #2]
 80063ec:	70d9      	strb	r1, [r3, #3]
 80063ee:	6843      	ldr	r3, [r0, #4]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	d907      	bls.n	8006404 <WS28xx::Blackout()+0x30>
 80063f4:	2300      	movs	r3, #0
 80063f6:	4621      	mov	r1, r4
 80063f8:	461a      	mov	r2, r3
 80063fa:	9500      	str	r5, [sp, #0]
 80063fc:	f7ff fecf 	bl	800619e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006400:	3401      	adds	r4, #1
 8006402:	e7f4      	b.n	80063ee <WS28xx::Blackout()+0x1a>
 8006404:	6801      	ldr	r1, [r0, #0]
 8006406:	68c2      	ldr	r2, [r0, #12]
 8006408:	390b      	subs	r1, #11
 800640a:	2901      	cmp	r1, #1
 800640c:	bf94      	ite	ls
 800640e:	21ff      	movls	r1, #255	; 0xff
 8006410:	2100      	movhi	r1, #0
 8006412:	6944      	ldr	r4, [r0, #20]
 8006414:	3a04      	subs	r2, #4
 8006416:	18a3      	adds	r3, r4, r2
 8006418:	54a1      	strb	r1, [r4, r2]
 800641a:	7059      	strb	r1, [r3, #1]
 800641c:	7099      	strb	r1, [r3, #2]
 800641e:	70d9      	strb	r1, [r3, #3]
 8006420:	f7ff fe50 	bl	80060c4 <WS28xx::Update()>
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f002 fe54 	bl	80090d4 <gd32_spi_dma_tx_is_active()>
 800642c:	2800      	cmp	r0, #0
 800642e:	d1f9      	bne.n	8006424 <WS28xx::Blackout()+0x50>
 8006430:	b003      	add	sp, #12
 8006432:	bd30      	pop	{r4, r5, pc}
 8006434:	6943      	ldr	r3, [r0, #20]
 8006436:	6801      	ldr	r1, [r0, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	b101      	cbz	r1, 800643e <WS28xx::Blackout()+0x6a>
 800643c:	7c01      	ldrb	r1, [r0, #16]
 800643e:	68c4      	ldr	r4, [r0, #12]
 8006440:	3401      	adds	r4, #1
 8006442:	4423      	add	r3, r4
 8006444:	429a      	cmp	r2, r3
 8006446:	d0eb      	beq.n	8006420 <WS28xx::Blackout()+0x4c>
 8006448:	f802 1b01 	strb.w	r1, [r2], #1
 800644c:	e7fa      	b.n	8006444 <WS28xx::Blackout()+0x70>

0800644e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800644e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006450:	4615      	mov	r5, r2
 8006452:	461a      	mov	r2, r3
 8006454:	6803      	ldr	r3, [r0, #0]
 8006456:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800645a:	2b07      	cmp	r3, #7
 800645c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8006460:	d114      	bne.n	800648c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x3e>
 8006462:	014c      	lsls	r4, r1, #5
 8006464:	4621      	mov	r1, r4
 8006466:	f7ff fe8b 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800646a:	462a      	mov	r2, r5
 800646c:	f104 0108 	add.w	r1, r4, #8
 8006470:	f7ff fe86 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 8006474:	463a      	mov	r2, r7
 8006476:	f104 0110 	add.w	r1, r4, #16
 800647a:	f7ff fe81 	bl	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800647e:	4632      	mov	r2, r6
 8006480:	f104 0118 	add.w	r1, r4, #24
 8006484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006488:	f7ff be7a 	b.w	8006180 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8006490:	2300      	movs	r3, #0
 8006492:	2020      	movs	r0, #32
 8006494:	b510      	push	{r4, lr}
 8006496:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8006498:	428b      	cmp	r3, r1
 800649a:	d004      	beq.n	80064a6 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800649c:	f852 4b04 	ldr.w	r4, [r2], #4
 80064a0:	3301      	adds	r3, #1
 80064a2:	4420      	add	r0, r4
 80064a4:	e7f8      	b.n	8006498 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 80064a6:	bd10      	pop	{r4, pc}
 80064a8:	0800a75c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, pc}

080064ac <SpiFlashStore::Init()>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80065d4 <SpiFlashStore::Init()+0x128>
 80064b4:	4607      	mov	r7, r0
 80064b6:	b085      	sub	sp, #20
 80064b8:	f8d8 0000 	ldr.w	r0, [r8]
 80064bc:	f000 fb96 	bl	8006bec <FlashRom::GetSectorSize()>
 80064c0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80064c4:	4605      	mov	r5, r0
 80064c6:	f040 8083 	bne.w	80065d0 <SpiFlashStore::Init()+0x124>
 80064ca:	f8d8 0000 	ldr.w	r0, [r8]
 80064ce:	f000 fb85 	bl	8006bdc <FlashRom::GetSize()>
 80064d2:	4b41      	ldr	r3, [pc, #260]	; (80065d8 <SpiFlashStore::Init()+0x12c>)
 80064d4:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80064d8:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80064dc:	6019      	str	r1, [r3, #0]
 80064de:	2e00      	cmp	r6, #0
 80064e0:	d176      	bne.n	80065d0 <SpiFlashStore::Init()+0x124>
 80064e2:	4c3e      	ldr	r4, [pc, #248]	; (80065dc <SpiFlashStore::Init()+0x130>)
 80064e4:	ab03      	add	r3, sp, #12
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	462a      	mov	r2, r5
 80064ea:	4623      	mov	r3, r4
 80064ec:	f8d8 0000 	ldr.w	r0, [r8]
 80064f0:	f000 fb7f 	bl	8006bf2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 80064f4:	7823      	ldrb	r3, [r4, #0]
 80064f6:	2b41      	cmp	r3, #65	; 0x41
 80064f8:	bf1c      	itt	ne
 80064fa:	2341      	movne	r3, #65	; 0x41
 80064fc:	7023      	strbne	r3, [r4, #0]
 80064fe:	7863      	ldrb	r3, [r4, #1]
 8006500:	bf14      	ite	ne
 8006502:	4635      	movne	r5, r6
 8006504:	2501      	moveq	r5, #1
 8006506:	2b76      	cmp	r3, #118	; 0x76
 8006508:	bf1c      	itt	ne
 800650a:	2376      	movne	r3, #118	; 0x76
 800650c:	7063      	strbne	r3, [r4, #1]
 800650e:	78a3      	ldrb	r3, [r4, #2]
 8006510:	bf18      	it	ne
 8006512:	2500      	movne	r5, #0
 8006514:	2b56      	cmp	r3, #86	; 0x56
 8006516:	bf1c      	itt	ne
 8006518:	2356      	movne	r3, #86	; 0x56
 800651a:	70a3      	strbne	r3, [r4, #2]
 800651c:	78e3      	ldrb	r3, [r4, #3]
 800651e:	bf18      	it	ne
 8006520:	2500      	movne	r5, #0
 8006522:	2b10      	cmp	r3, #16
 8006524:	d01c      	beq.n	8006560 <SpiFlashStore::Init()+0xb4>
 8006526:	2310      	movs	r3, #16
 8006528:	70e3      	strb	r3, [r4, #3]
 800652a:	2201      	movs	r2, #1
 800652c:	2500      	movs	r5, #0
 800652e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <SpiFlashStore::Init()+0x134>)
 8006534:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80065e4 <SpiFlashStore::Init()+0x138>
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	4631      	mov	r1, r6
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ffa7 	bl	8006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006542:	1823      	adds	r3, r4, r0
 8006544:	5425      	strb	r5, [r4, r0]
 8006546:	705d      	strb	r5, [r3, #1]
 8006548:	709d      	strb	r5, [r3, #2]
 800654a:	70dd      	strb	r5, [r3, #3]
 800654c:	f858 3b04 	ldr.w	r3, [r8], #4
 8006550:	1d02      	adds	r2, r0, #4
 8006552:	4403      	add	r3, r0
 8006554:	4293      	cmp	r3, r2
 8006556:	d931      	bls.n	80065bc <SpiFlashStore::Init()+0x110>
 8006558:	f804 9002 	strb.w	r9, [r4, r2]
 800655c:	3201      	adds	r2, #1
 800655e:	e7f9      	b.n	8006554 <SpiFlashStore::Init()+0xa8>
 8006560:	2d00      	cmp	r5, #0
 8006562:	d0e2      	beq.n	800652a <SpiFlashStore::Init()+0x7e>
 8006564:	f04f 0900 	mov.w	r9, #0
 8006568:	46c8      	mov	r8, r9
 800656a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80065e8 <SpiFlashStore::Init()+0x13c>
 800656e:	f8da b000 	ldr.w	fp, [sl]
 8006572:	4631      	mov	r1, r6
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff ff8b 	bl	8006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800657a:	5c23      	ldrb	r3, [r4, r0]
 800657c:	2bff      	cmp	r3, #255	; 0xff
 800657e:	d114      	bne.n	80065aa <SpiFlashStore::Init()+0xfe>
 8006580:	1823      	adds	r3, r4, r0
 8006582:	785a      	ldrb	r2, [r3, #1]
 8006584:	2aff      	cmp	r2, #255	; 0xff
 8006586:	d110      	bne.n	80065aa <SpiFlashStore::Init()+0xfe>
 8006588:	789a      	ldrb	r2, [r3, #2]
 800658a:	2aff      	cmp	r2, #255	; 0xff
 800658c:	d10d      	bne.n	80065aa <SpiFlashStore::Init()+0xfe>
 800658e:	78da      	ldrb	r2, [r3, #3]
 8006590:	2aff      	cmp	r2, #255	; 0xff
 8006592:	d10a      	bne.n	80065aa <SpiFlashStore::Init()+0xfe>
 8006594:	46a9      	mov	r9, r5
 8006596:	f04f 0b01 	mov.w	fp, #1
 800659a:	f804 8000 	strb.w	r8, [r4, r0]
 800659e:	f883 8001 	strb.w	r8, [r3, #1]
 80065a2:	f883 8002 	strb.w	r8, [r3, #2]
 80065a6:	f883 8003 	strb.w	r8, [r3, #3]
 80065aa:	3601      	adds	r6, #1
 80065ac:	2e1c      	cmp	r6, #28
 80065ae:	d1e0      	bne.n	8006572 <SpiFlashStore::Init()+0xc6>
 80065b0:	f1b9 0f00 	cmp.w	r9, #0
 80065b4:	d008      	beq.n	80065c8 <SpiFlashStore::Init()+0x11c>
 80065b6:	f8ca b000 	str.w	fp, [sl]
 80065ba:	e005      	b.n	80065c8 <SpiFlashStore::Init()+0x11c>
 80065bc:	3601      	adds	r6, #1
 80065be:	2e1c      	cmp	r6, #28
 80065c0:	d1bb      	bne.n	800653a <SpiFlashStore::Init()+0x8e>
 80065c2:	2501      	movs	r5, #1
 80065c4:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <SpiFlashStore::Init()+0x13c>)
 80065c6:	601d      	str	r5, [r3, #0]
 80065c8:	4628      	mov	r0, r5
 80065ca:	b005      	add	sp, #20
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	2500      	movs	r5, #0
 80065d2:	e7f9      	b.n	80065c8 <SpiFlashStore::Init()+0x11c>
 80065d4:	200016c8 	andcs	r1, r0, r8, asr #13
 80065d8:	2000169c 	mulcs	r0, ip, r6
 80065dc:	2000069c 	mulcs	r0, ip, r6
 80065e0:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 80065e4:	0800a75c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, pc}
 80065e8:	200016a8 	andcs	r1, r0, r8, lsr #13

080065ec <SpiFlashStore::SpiFlashStore()>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <SpiFlashStore::SpiFlashStore()+0x38>)
 80065f0:	4604      	mov	r4, r0
 80065f2:	6018      	str	r0, [r3, #0]
 80065f4:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <SpiFlashStore::SpiFlashStore()+0x3c>)
 80065f6:	4d0d      	ldr	r5, [pc, #52]	; (800662c <SpiFlashStore::SpiFlashStore()+0x40>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b113      	cbz	r3, 8006604 <SpiFlashStore::SpiFlashStore()+0x18>
 80065fe:	f7ff ff55 	bl	80064ac <SpiFlashStore::Init()>
 8006602:	7028      	strb	r0, [r5, #0]
 8006604:	782b      	ldrb	r3, [r5, #0]
 8006606:	b153      	cbz	r3, 800661e <SpiFlashStore::SpiFlashStore()+0x32>
 8006608:	2320      	movs	r3, #32
 800660a:	2200      	movs	r2, #0
 800660c:	4908      	ldr	r1, [pc, #32]	; (8006630 <SpiFlashStore::SpiFlashStore()+0x44>)
 800660e:	f851 0b04 	ldr.w	r0, [r1], #4
 8006612:	3201      	adds	r2, #1
 8006614:	2a1c      	cmp	r2, #28
 8006616:	4403      	add	r3, r0
 8006618:	d1f9      	bne.n	800660e <SpiFlashStore::SpiFlashStore()+0x22>
 800661a:	4a06      	ldr	r2, [pc, #24]	; (8006634 <SpiFlashStore::SpiFlashStore()+0x48>)
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4620      	mov	r0, r4
 8006620:	bd38      	pop	{r3, r4, r5, pc}
 8006622:	bf00      	nop
 8006624:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006628:	200016c8 	andcs	r1, r0, r8, asr #13
 800662c:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006630:	0800a75c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, sp, pc}
 8006634:	200016a4 	andcs	r1, r0, r4, lsr #13

08006638 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8006638:	b508      	push	{r3, lr}
 800663a:	f7ff ff29 	bl	8006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800663e:	2300      	movs	r3, #0
 8006640:	4904      	ldr	r1, [pc, #16]	; (8006654 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8006642:	1842      	adds	r2, r0, r1
 8006644:	540b      	strb	r3, [r1, r0]
 8006646:	7053      	strb	r3, [r2, #1]
 8006648:	7093      	strb	r3, [r2, #2]
 800664a:	70d3      	strb	r3, [r2, #3]
 800664c:	2201      	movs	r2, #1
 800664e:	4b02      	ldr	r3, [pc, #8]	; (8006658 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	bd08      	pop	{r3, pc}
 8006654:	2000069c 	mulcs	r0, ip, r6
 8006658:	200016a8 	andcs	r1, r0, r8, lsr #13

0800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	461c      	mov	r4, r3
 8006662:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8006664:	4615      	mov	r5, r2
 8006666:	781f      	ldrb	r7, [r3, #0]
 8006668:	9e07      	ldr	r6, [sp, #28]
 800666a:	b35f      	cbz	r7, 80066c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800666c:	f7ff ff10 	bl	8006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006670:	f04f 0c00 	mov.w	ip, #0
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8006676:	1941      	adds	r1, r0, r5
 8006678:	1e63      	subs	r3, r4, #1
 800667a:	9c06      	ldr	r4, [sp, #24]
 800667c:	4411      	add	r1, r2
 800667e:	440c      	add	r4, r1
 8006680:	42a1      	cmp	r1, r4
 8006682:	d00a      	beq.n	800669a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 8006684:	f891 8000 	ldrb.w	r8, [r1]
 8006688:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800668c:	3101      	adds	r1, #1
 800668e:	45f0      	cmp	r8, lr
 8006690:	bf1c      	itt	ne
 8006692:	f801 ec01 	strbne.w	lr, [r1, #-1]
 8006696:	46bc      	movne	ip, r7
 8006698:	e7f2      	b.n	8006680 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800669a:	f1bc 0f00 	cmp.w	ip, #0
 800669e:	d011      	beq.n	80066c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	b109      	cbz	r1, 80066aa <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 80066a6:	2906      	cmp	r1, #6
 80066a8:	d101      	bne.n	80066ae <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80066aa:	2101      	movs	r1, #1
 80066ac:	6019      	str	r1, [r3, #0]
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80066b4:	6019      	str	r1, [r3, #0]
 80066b6:	b12d      	cbz	r5, 80066c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80066b8:	b126      	cbz	r6, 80066c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	4418      	add	r0, r3
 80066be:	5813      	ldr	r3, [r2, r0]
 80066c0:	4333      	orrs	r3, r6
 80066c2:	5013      	str	r3, [r2, r0]
 80066c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c8:	200016a0 	andcs	r1, r0, r0, lsr #13
 80066cc:	2000069c 	mulcs	r0, ip, r6
 80066d0:	200016a8 	andcs	r1, r0, r8, lsr #13
 80066d4:	2000181c 	andcs	r1, r0, ip, lsl r8
 80066d8:	20000698 	mulcs	r0, r8, r6

080066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 80066dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e0:	461d      	mov	r5, r3
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 80066e4:	b085      	sub	sp, #20
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	4607      	mov	r7, r0
 80066ea:	4688      	mov	r8, r1
 80066ec:	4614      	mov	r4, r2
 80066ee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80066f2:	b1eb      	cbz	r3, 8006730 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 80066f4:	f7ff fecc 	bl	8006490 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80066f8:	4910      	ldr	r1, [pc, #64]	; (800673c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 80066fa:	4a11      	ldr	r2, [pc, #68]	; (8006740 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 80066fc:	7809      	ldrb	r1, [r1, #0]
 80066fe:	eb00 0309 	add.w	r3, r0, r9
 8006702:	189e      	adds	r6, r3, r2
 8006704:	b951      	cbnz	r1, 800671c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 8006706:	589b      	ldr	r3, [r3, r2]
 8006708:	b143      	cbz	r3, 800671c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800670a:	3c01      	subs	r4, #1
 800670c:	4435      	add	r5, r6
 800670e:	42b5      	cmp	r5, r6
 8006710:	d00e      	beq.n	8006730 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 8006712:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006716:	f804 3f01 	strb.w	r3, [r4, #1]!
 800671a:	e7f8      	b.n	800670e <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800671c:	2300      	movs	r3, #0
 800671e:	464a      	mov	r2, r9
 8006720:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006724:	4641      	mov	r1, r8
 8006726:	4623      	mov	r3, r4
 8006728:	4638      	mov	r0, r7
 800672a:	9500      	str	r5, [sp, #0]
 800672c:	f7ff ff96 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006730:	b005      	add	sp, #20
 8006732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006736:	bf00      	nop
 8006738:	200016a0 	andcs	r1, r0, r0, lsr #13
 800673c:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8006740:	2000069c 	mulcs	r0, ip, r6

08006744 <SpiFlashStore::Flash()>:
 8006744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006746:	4c25      	ldr	r4, [pc, #148]	; (80067dc <SpiFlashStore::Flash()+0x98>)
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	2800      	cmp	r0, #0
 800674c:	d043      	beq.n	80067d6 <SpiFlashStore::Flash()+0x92>
 800674e:	3801      	subs	r0, #1
 8006750:	2805      	cmp	r0, #5
 8006752:	d831      	bhi.n	80067b8 <SpiFlashStore::Flash()+0x74>
 8006754:	e8df f000 	tbb	[pc, r0]
 8006758:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800675c:	4b203025 	blmi	88127f8 <__exidx_end+0x807a20>
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <SpiFlashStore::Flash()+0xa0>)
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	2302      	movs	r3, #2
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	2001      	movs	r0, #1
 800676c:	e033      	b.n	80067d6 <SpiFlashStore::Flash()+0x92>
 800676e:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <SpiFlashStore::Flash()+0x9c>)
 8006770:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <SpiFlashStore::Flash()+0xa0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	2b63      	cmp	r3, #99	; 0x63
 800677a:	d9f6      	bls.n	800676a <SpiFlashStore::Flash()+0x26>
 800677c:	2303      	movs	r3, #3
 800677e:	e7f3      	b.n	8006768 <SpiFlashStore::Flash()+0x24>
 8006780:	4919      	ldr	r1, [pc, #100]	; (80067e8 <SpiFlashStore::Flash()+0xa4>)
 8006782:	481a      	ldr	r0, [pc, #104]	; (80067ec <SpiFlashStore::Flash()+0xa8>)
 8006784:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006788:	6809      	ldr	r1, [r1, #0]
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	ab03      	add	r3, sp, #12
 800678e:	f000 fa3f 	bl	8006c10 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 8006792:	2800      	cmp	r0, #0
 8006794:	d0e9      	beq.n	800676a <SpiFlashStore::Flash()+0x26>
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <SpiFlashStore::Flash()+0x9c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <SpiFlashStore::Flash()+0xa0>)
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	2305      	movs	r3, #5
 80067a0:	e7e2      	b.n	8006768 <SpiFlashStore::Flash()+0x24>
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <SpiFlashStore::Flash()+0x9c>)
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <SpiFlashStore::Flash()+0xa0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	1a9b      	subs	r3, r3, r2
 80067ac:	2b63      	cmp	r3, #99	; 0x63
 80067ae:	d9dc      	bls.n	800676a <SpiFlashStore::Flash()+0x26>
 80067b0:	2304      	movs	r3, #4
 80067b2:	e7d9      	b.n	8006768 <SpiFlashStore::Flash()+0x24>
 80067b4:	2306      	movs	r3, #6
 80067b6:	e7d7      	b.n	8006768 <SpiFlashStore::Flash()+0x24>
 80067b8:	ab03      	add	r3, sp, #12
 80067ba:	4a0d      	ldr	r2, [pc, #52]	; (80067f0 <SpiFlashStore::Flash()+0xac>)
 80067bc:	490a      	ldr	r1, [pc, #40]	; (80067e8 <SpiFlashStore::Flash()+0xa4>)
 80067be:	480b      	ldr	r0, [pc, #44]	; (80067ec <SpiFlashStore::Flash()+0xa8>)
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <SpiFlashStore::Flash()+0xb0>)
 80067c6:	6809      	ldr	r1, [r1, #0]
 80067c8:	6800      	ldr	r0, [r0, #0]
 80067ca:	f000 fac1 	bl	8006d50 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d0cb      	beq.n	800676a <SpiFlashStore::Flash()+0x26>
 80067d2:	2000      	movs	r0, #0
 80067d4:	6020      	str	r0, [r4, #0]
 80067d6:	b004      	add	sp, #16
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	200016a8 	andcs	r1, r0, r8, lsr #13
 80067e0:	2000181c 	andcs	r1, r0, ip, lsl r8
 80067e4:	20000698 	mulcs	r0, r8, r6
 80067e8:	2000169c 	mulcs	r0, ip, r6
 80067ec:	200016c8 	andcs	r1, r0, r8, asr #13
 80067f0:	200016a4 	andcs	r1, r0, r4, lsr #13
 80067f4:	2000069c 	mulcs	r0, ip, r6

080067f8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80067f8:	4770      	bx	lr
	...

080067fc <StoreDisplayUdf::Copy(TDisplayUdfParams*)>:
 80067fc:	2300      	movs	r3, #0
 80067fe:	b507      	push	{r0, r1, r2, lr}
 8006800:	4805      	ldr	r0, [pc, #20]	; (8006818 <StoreDisplayUdf::Copy(TDisplayUdfParams*)+0x1c>)
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	460a      	mov	r2, r1
 8006806:	2322      	movs	r3, #34	; 0x22
 8006808:	210f      	movs	r1, #15
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	f7ff ff66 	bl	80066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006810:	b003      	add	sp, #12
 8006812:	f85d fb04 	ldr.w	pc, [sp], #4
 8006816:	bf00      	nop
 8006818:	200016ac 	andcs	r1, r0, ip, lsr #13

0800681c <StoreDisplayUdf::Update(TDisplayUdfParams const*)>:
 800681c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800681e:	2200      	movs	r2, #0
 8006820:	460b      	mov	r3, r1
 8006822:	2122      	movs	r1, #34	; 0x22
 8006824:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006828:	4804      	ldr	r0, [pc, #16]	; (800683c <StoreDisplayUdf::Update(TDisplayUdfParams const*)+0x20>)
 800682a:	9100      	str	r1, [sp, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	210f      	movs	r1, #15
 8006830:	f7ff ff14 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006834:	b005      	add	sp, #20
 8006836:	f85d fb04 	ldr.w	pc, [sp], #4
 800683a:	bf00      	nop
 800683c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006840 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
 8006844:	f001 f9e3 	bl	8007c0e <operator delete(void*)>
 8006848:	4620      	mov	r0, r4
 800684a:	bd10      	pop	{r4, pc}

0800684c <StoreDisplayUdf::StoreDisplayUdf()>:
 800684c:	4a02      	ldr	r2, [pc, #8]	; (8006858 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800684e:	6002      	str	r2, [r0, #0]
 8006850:	4a02      	ldr	r2, [pc, #8]	; (800685c <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8006852:	6010      	str	r0, [r2, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	0800a7d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, pc}
 800685c:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

08006860 <StoreRDMDevice::~StoreRDMDevice()>:
 8006860:	4770      	bx	lr

08006862 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8006862:	3804      	subs	r0, #4
 8006864:	4770      	bx	lr
	...

08006868 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8006868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800686a:	2200      	movs	r2, #0
 800686c:	460b      	mov	r3, r1
 800686e:	2129      	movs	r1, #41	; 0x29
 8006870:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006874:	4804      	ldr	r0, [pc, #16]	; (8006888 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8006876:	9100      	str	r1, [sp, #0]
 8006878:	6800      	ldr	r0, [r0, #0]
 800687a:	210b      	movs	r1, #11
 800687c:	f7ff feee 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006880:	b005      	add	sp, #20
 8006882:	f85d fb04 	ldr.w	pc, [sp], #4
 8006886:	bf00      	nop
 8006888:	200016ac 	andcs	r1, r0, ip, lsr #13

0800688c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	2401      	movs	r4, #1
 8006890:	2600      	movs	r6, #0
 8006892:	4d0c      	ldr	r5, [pc, #48]	; (80068c4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8006894:	b086      	sub	sp, #24
 8006896:	460b      	mov	r3, r1
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	f88d 2017 	strb.w	r2, [sp, #23]
 800689e:	9200      	str	r2, [sp, #0]
 80068a0:	210b      	movs	r1, #11
 80068a2:	2204      	movs	r2, #4
 80068a4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80068a8:	f7ff fed8 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	210b      	movs	r1, #11
 80068b0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80068b4:	6828      	ldr	r0, [r5, #0]
 80068b6:	9400      	str	r4, [sp, #0]
 80068b8:	f10d 0317 	add.w	r3, sp, #23
 80068bc:	f7ff fece 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80068c0:	b006      	add	sp, #24
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	200016ac 	andcs	r1, r0, ip, lsr #13

080068c8 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80068c8:	f1a0 0004 	sub.w	r0, r0, #4
 80068cc:	e7de      	b.n	800688c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 80068ce:	bf00      	nop

080068d0 <StoreRDMDevice::~StoreRDMDevice()>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	f001 f99b 	bl	8007c0e <operator delete(void*)>
 80068d8:	4620      	mov	r0, r4
 80068da:	bd10      	pop	{r4, pc}

080068dc <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80068dc:	f1a0 0004 	sub.w	r0, r0, #4
 80068e0:	e7f6      	b.n	80068d0 <StoreRDMDevice::~StoreRDMDevice()>
	...

080068e4 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80068e4:	2300      	movs	r3, #0
 80068e6:	b507      	push	{r0, r1, r2, lr}
 80068e8:	4805      	ldr	r0, [pc, #20]	; (8006900 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	460a      	mov	r2, r1
 80068ee:	2329      	movs	r3, #41	; 0x29
 80068f0:	210b      	movs	r1, #11
 80068f2:	6800      	ldr	r0, [r0, #0]
 80068f4:	f7ff fef2 	bl	80066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80068f8:	b003      	add	sp, #12
 80068fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80068fe:	bf00      	nop
 8006900:	200016ac 	andcs	r1, r0, ip, lsr #13

08006904 <StoreRDMDevice::StoreRDMDevice()>:
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8006906:	6002      	str	r2, [r0, #0]
 8006908:	321c      	adds	r2, #28
 800690a:	6042      	str	r2, [r0, #4]
 800690c:	4a02      	ldr	r2, [pc, #8]	; (8006918 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800690e:	6010      	str	r0, [r2, #0]
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	0800a7ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp, pc}
 8006918:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

0800691c <StoreRDMSensors::~StoreRDMSensors()>:
 800691c:	4770      	bx	lr
	...

08006920 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 8006920:	2300      	movs	r3, #0
 8006922:	b507      	push	{r0, r1, r2, lr}
 8006924:	4805      	ldr	r0, [pc, #20]	; (800693c <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x1c>)
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	460a      	mov	r2, r1
 800692a:	2334      	movs	r3, #52	; 0x34
 800692c:	2117      	movs	r1, #23
 800692e:	6800      	ldr	r0, [r0, #0]
 8006930:	f7ff fed4 	bl	80066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006934:	b003      	add	sp, #12
 8006936:	f85d fb04 	ldr.w	pc, [sp], #4
 800693a:	bf00      	nop
 800693c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006940 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8006940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006942:	2200      	movs	r2, #0
 8006944:	460b      	mov	r3, r1
 8006946:	2134      	movs	r1, #52	; 0x34
 8006948:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800694c:	4804      	ldr	r0, [pc, #16]	; (8006960 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 800694e:	9100      	str	r1, [sp, #0]
 8006950:	6800      	ldr	r0, [r0, #0]
 8006952:	2117      	movs	r1, #23
 8006954:	f7ff fe82 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006958:	b005      	add	sp, #20
 800695a:	f85d fb04 	ldr.w	pc, [sp], #4
 800695e:	bf00      	nop
 8006960:	200016ac 	andcs	r1, r0, ip, lsr #13

08006964 <StoreRDMSensors::~StoreRDMSensors()>:
 8006964:	b510      	push	{r4, lr}
 8006966:	4604      	mov	r4, r0
 8006968:	f001 f951 	bl	8007c0e <operator delete(void*)>
 800696c:	4620      	mov	r0, r4
 800696e:	bd10      	pop	{r4, pc}

08006970 <StoreRDMSensors::StoreRDMSensors()>:
 8006970:	4a02      	ldr	r2, [pc, #8]	; (800697c <StoreRDMSensors::StoreRDMSensors()+0xc>)
 8006972:	6002      	str	r2, [r0, #0]
 8006974:	4a02      	ldr	r2, [pc, #8]	; (8006980 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 8006976:	6010      	str	r0, [r2, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	0800a81c 	stmdaeq	r0, {r2, r3, r4, fp, sp, pc}
 8006980:	200016bc 			; <UNDEFINED> instruction: 0x200016bc

08006984 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8006984:	4770      	bx	lr
	...

08006988 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 8006988:	2300      	movs	r3, #0
 800698a:	b507      	push	{r0, r1, r2, lr}
 800698c:	4805      	ldr	r0, [pc, #20]	; (80069a4 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x1c>)
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	460a      	mov	r2, r1
 8006992:	234c      	movs	r3, #76	; 0x4c
 8006994:	2118      	movs	r1, #24
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	f7ff fea0 	bl	80066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800699c:	b003      	add	sp, #12
 800699e:	f85d fb04 	ldr.w	pc, [sp], #4
 80069a2:	bf00      	nop
 80069a4:	200016ac 	andcs	r1, r0, ip, lsr #13

080069a8 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 80069a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069aa:	2200      	movs	r2, #0
 80069ac:	460b      	mov	r3, r1
 80069ae:	214c      	movs	r1, #76	; 0x4c
 80069b0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80069b4:	4804      	ldr	r0, [pc, #16]	; (80069c8 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 80069b6:	9100      	str	r1, [sp, #0]
 80069b8:	6800      	ldr	r0, [r0, #0]
 80069ba:	2118      	movs	r1, #24
 80069bc:	f7ff fe4e 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80069c0:	b005      	add	sp, #20
 80069c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80069c6:	bf00      	nop
 80069c8:	200016ac 	andcs	r1, r0, ip, lsr #13

080069cc <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4604      	mov	r4, r0
 80069d0:	f001 f91d 	bl	8007c0e <operator delete(void*)>
 80069d4:	4620      	mov	r0, r4
 80069d6:	bd10      	pop	{r4, pc}

080069d8 <StoreRDMSubDevices::StoreRDMSubDevices()>:
 80069d8:	4a02      	ldr	r2, [pc, #8]	; (80069e4 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 80069da:	6002      	str	r2, [r0, #0]
 80069dc:	4a02      	ldr	r2, [pc, #8]	; (80069e8 <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 80069de:	6010      	str	r0, [r2, #0]
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	0800a834 	stmdaeq	r0, {r2, r4, r5, fp, sp, pc}
 80069e8:	200016c0 	andcs	r1, r0, r0, asr #13

080069ec <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80069ec:	4770      	bx	lr

080069ee <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80069ee:	3804      	subs	r0, #4
 80069f0:	4770      	bx	lr
	...

080069f4 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 80069f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069f6:	2200      	movs	r2, #0
 80069f8:	460b      	mov	r3, r1
 80069fa:	2127      	movs	r1, #39	; 0x27
 80069fc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006a00:	4804      	ldr	r0, [pc, #16]	; (8006a14 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 8006a02:	9100      	str	r1, [sp, #0]
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	2103      	movs	r1, #3
 8006a08:	f7ff fe28 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a0c:	b005      	add	sp, #20
 8006a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a12:	bf00      	nop
 8006a14:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a18 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8006a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a22:	2302      	movs	r3, #2
 8006a24:	4806      	ldr	r0, [pc, #24]	; (8006a40 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006a2c:	2207      	movs	r2, #7
 8006a2e:	2103      	movs	r1, #3
 8006a30:	6800      	ldr	r0, [r0, #0]
 8006a32:	f10d 0316 	add.w	r3, sp, #22
 8006a36:	f7ff fe11 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a3a:	b007      	add	sp, #28
 8006a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a40:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a44 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8006a44:	f1a0 0004 	sub.w	r0, r0, #4
 8006a48:	e7e6      	b.n	8006a18 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 8006a4a:	bf00      	nop

08006a4c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8006a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006a52:	2200      	movs	r2, #0
 8006a54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4807      	ldr	r0, [pc, #28]	; (8006a78 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	f88d 1017 	strb.w	r1, [sp, #23]
 8006a62:	2226      	movs	r2, #38	; 0x26
 8006a64:	2103      	movs	r1, #3
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f10d 0317 	add.w	r3, sp, #23
 8006a6c:	f7ff fdf6 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006a70:	b007      	add	sp, #28
 8006a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a76:	bf00      	nop
 8006a78:	200016ac 	andcs	r1, r0, ip, lsr #13

08006a7c <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8006a7c:	f1a0 0004 	sub.w	r0, r0, #4
 8006a80:	e7e4      	b.n	8006a4c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 8006a82:	bf00      	nop

08006a84 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 8006a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a90:	2301      	movs	r3, #1
 8006a92:	4807      	ldr	r0, [pc, #28]	; (8006ab0 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f88d 1017 	strb.w	r1, [sp, #23]
 8006a9a:	2213      	movs	r2, #19
 8006a9c:	2103      	movs	r1, #3
 8006a9e:	6800      	ldr	r0, [r0, #0]
 8006aa0:	f10d 0317 	add.w	r3, sp, #23
 8006aa4:	f7ff fdda 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006aa8:	b007      	add	sp, #28
 8006aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aae:	bf00      	nop
 8006ab0:	200016ac 	andcs	r1, r0, ip, lsr #13

08006ab4 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8006ab4:	f1a0 0004 	sub.w	r0, r0, #4
 8006ab8:	e7e4      	b.n	8006a84 <StoreWS28xxDmx::SaveMap(unsigned char)>
 8006aba:	bf00      	nop

08006abc <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8006abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ac8:	2302      	movs	r3, #2
 8006aca:	4807      	ldr	r0, [pc, #28]	; (8006ae8 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006ad2:	2211      	movs	r2, #17
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	6800      	ldr	r0, [r0, #0]
 8006ad8:	f10d 0316 	add.w	r3, sp, #22
 8006adc:	f7ff fdbe 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006ae0:	b007      	add	sp, #28
 8006ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ae6:	bf00      	nop
 8006ae8:	200016ac 	andcs	r1, r0, ip, lsr #13

08006aec <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8006aec:	f1a0 0004 	sub.w	r0, r0, #4
 8006af0:	e7e4      	b.n	8006abc <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8006af2:	bf00      	nop

08006af4 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8006af4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006af6:	2302      	movs	r3, #2
 8006af8:	2200      	movs	r2, #0
 8006afa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006afe:	4807      	ldr	r0, [pc, #28]	; (8006b1c <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006b06:	2205      	movs	r2, #5
 8006b08:	2103      	movs	r1, #3
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	f10d 0316 	add.w	r3, sp, #22
 8006b10:	f7ff fda4 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b14:	b007      	add	sp, #28
 8006b16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b1a:	bf00      	nop
 8006b1c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b20 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8006b20:	f1a0 0004 	sub.w	r0, r0, #4
 8006b24:	e7e6      	b.n	8006af4 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8006b26:	bf00      	nop

08006b28 <StoreWS28xxDmx::SaveType(unsigned char)>:
 8006b28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b32:	4807      	ldr	r0, [pc, #28]	; (8006b50 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	f88d 1017 	strb.w	r1, [sp, #23]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	6800      	ldr	r0, [r0, #0]
 8006b40:	f10d 0317 	add.w	r3, sp, #23
 8006b44:	f7ff fd8a 	bl	800665c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8006b48:	b007      	add	sp, #28
 8006b4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b4e:	bf00      	nop
 8006b50:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b54 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8006b54:	f1a0 0004 	sub.w	r0, r0, #4
 8006b58:	e7e6      	b.n	8006b28 <StoreWS28xxDmx::SaveType(unsigned char)>
 8006b5a:	bf00      	nop

08006b5c <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	4604      	mov	r4, r0
 8006b60:	f001 f855 	bl	8007c0e <operator delete(void*)>
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8006b68:	f1a0 0004 	sub.w	r0, r0, #4
 8006b6c:	e7f6      	b.n	8006b5c <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08006b70 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8006b70:	2300      	movs	r3, #0
 8006b72:	b507      	push	{r0, r1, r2, lr}
 8006b74:	4805      	ldr	r0, [pc, #20]	; (8006b8c <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	460a      	mov	r2, r1
 8006b7a:	2327      	movs	r3, #39	; 0x27
 8006b7c:	2103      	movs	r1, #3
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f7ff fdac 	bl	80066dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8006b84:	b003      	add	sp, #12
 8006b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b8a:	bf00      	nop
 8006b8c:	200016ac 	andcs	r1, r0, ip, lsr #13

08006b90 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8006b90:	4a03      	ldr	r2, [pc, #12]	; (8006ba0 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8006b92:	6002      	str	r2, [r0, #0]
 8006b94:	3230      	adds	r2, #48	; 0x30
 8006b96:	6042      	str	r2, [r0, #4]
 8006b98:	4a02      	ldr	r2, [pc, #8]	; (8006ba4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 8006b9a:	6010      	str	r0, [r2, #0]
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
 8006ba4:	200016c4 	andcs	r1, r0, r4, asr #13

08006ba8 <FlashRom::FlashRom()>:
 8006ba8:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <FlashRom::FlashRom()+0x24>)
 8006baa:	b510      	push	{r4, lr}
 8006bac:	6018      	str	r0, [r3, #0]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	7003      	strb	r3, [r0, #0]
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <FlashRom::FlashRom()+0x28>)
 8006bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bba:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006bbe:	4905      	ldr	r1, [pc, #20]	; (8006bd4 <FlashRom::FlashRom()+0x2c>)
 8006bc0:	029b      	lsls	r3, r3, #10
 8006bc2:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <FlashRom::FlashRom()+0x30>)
 8006bc4:	f7fb fc2a 	bl	800241c <printf>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	bd10      	pop	{r4, pc}
 8006bcc:	200016c8 	andcs	r1, r0, r8, asr #13
 8006bd0:	1ffff700 	svcne	0x00fff700
 8006bd4:	0800a89c 	stmdaeq	r0, {r2, r3, r4, r7, fp, sp, pc}
 8006bd8:	0800a8a1 	stmdaeq	r0, {r0, r5, r7, fp, sp, pc}

08006bdc <FlashRom::GetSize()>:
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <FlashRom::GetSize()+0xc>)
 8006bde:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8006be2:	0280      	lsls	r0, r0, #10
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	1ffff700 	svcne	0x00fff700

08006bec <FlashRom::GetSectorSize()>:
 8006bec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006bf0:	4770      	bx	lr

08006bf2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8006bf2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006bf6:	441a      	add	r2, r3
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8006bfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006c00:	f843 0b04 	str.w	r0, [r3], #4
 8006c04:	e7f8      	b.n	8006bf8 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 8006c06:	2200      	movs	r2, #0
 8006c08:	9b00      	ldr	r3, [sp, #0]
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	4770      	bx	lr

08006c10 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8006c10:	2000      	movs	r0, #0
 8006c12:	b538      	push	{r3, r4, r5, lr}
 8006c14:	4c47      	ldr	r4, [pc, #284]	; (8006d34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8006c16:	6018      	str	r0, [r3, #0]
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	f200 8082 	bhi.w	8006d24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8006c20:	e8df f003 	tbb	[pc, r3]
 8006c24:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8006c28:	4b430080 	blmi	90c6e30 <__exidx_end+0x10bc058>
 8006c2c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006c30:	6019      	str	r1, [r3, #0]
 8006c32:	4b42      	ldr	r3, [pc, #264]	; (8006d3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8006c38:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c40:	4b40      	ldr	r3, [pc, #256]	; (8006d44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006c42:	d807      	bhi.n	8006c54 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	f001 fb5a 	bl	8008300 <fmc_bank0_unlock>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	2000      	movs	r0, #0
 8006c52:	e026      	b.n	8006ca2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8006c54:	4a3c      	ldr	r2, [pc, #240]	; (8006d48 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d3f4      	bcc.n	8006c44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	f001 fb5d 	bl	800831c <fmc_bank1_unlock>
 8006c62:	e7f3      	b.n	8006c4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006c64:	4d37      	ldr	r5, [pc, #220]	; (8006d44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006c66:	782b      	ldrb	r3, [r5, #0]
 8006c68:	b15b      	cbz	r3, 8006c82 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8006c6a:	f001 fb75 	bl	8008358 <fmc_bank0_state_get>
 8006c6e:	2801      	cmp	r0, #1
 8006c70:	d0ee      	beq.n	8006c50 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8006c72:	7829      	ldrb	r1, [r5, #0]
 8006c74:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006c76:	b939      	cbnz	r1, 8006c88 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8006c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c7a:	f022 0202 	bic.w	r2, r2, #2
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006c80:	e006      	b.n	8006c90 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8006c82:	f001 fb7d 	bl	8008380 <fmc_bank1_state_get>
 8006c86:	e7f2      	b.n	8006c6e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	f022 0202 	bic.w	r2, r2, #2
 8006c8e:	611a      	str	r2, [r3, #16]
 8006c90:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	b94b      	cbnz	r3, 8006caa <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8006c96:	b129      	cbz	r1, 8006ca4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8006c98:	f001 fb4e 	bl	8008338 <fmc_bank0_lock>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	f001 fb50 	bl	8008348 <fmc_bank1_lock>
 8006ca8:	e7f8      	b.n	8006c9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e7cf      	b.n	8006c4e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8006cae:	4923      	ldr	r1, [pc, #140]	; (8006d3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8006cb0:	680b      	ldr	r3, [r1, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0ca      	beq.n	8006c4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006cb6:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006cb8:	4a1f      	ldr	r2, [pc, #124]	; (8006d38 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8006cba:	7818      	ldrb	r0, [r3, #0]
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006cbe:	b190      	cbz	r0, 8006ce6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8006cc0:	6918      	ldr	r0, [r3, #16]
 8006cc2:	f040 0002 	orr.w	r0, r0, #2
 8006cc6:	6118      	str	r0, [r3, #16]
 8006cc8:	6810      	ldr	r0, [r2, #0]
 8006cca:	6158      	str	r0, [r3, #20]
 8006ccc:	6918      	ldr	r0, [r3, #16]
 8006cce:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006cd2:	6118      	str	r0, [r3, #16]
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006cda:	600b      	str	r3, [r1, #0]
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e7b2      	b.n	8006c4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8006ce6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006ce8:	f040 0002 	orr.w	r0, r0, #2
 8006cec:	6518      	str	r0, [r3, #80]	; 0x50
 8006cee:	6810      	ldr	r0, [r2, #0]
 8006cf0:	6558      	str	r0, [r3, #84]	; 0x54
 8006cf2:	69dd      	ldr	r5, [r3, #28]
 8006cf4:	07ad      	lsls	r5, r5, #30
 8006cf6:	bf48      	it	mi
 8006cf8:	6158      	strmi	r0, [r3, #20]
 8006cfa:	4814      	ldr	r0, [pc, #80]	; (8006d4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006cfc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d02:	6503      	str	r3, [r0, #80]	; 0x50
 8006d04:	680b      	ldr	r3, [r1, #0]
 8006d06:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8006d0a:	600b      	str	r3, [r1, #0]
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d12:	e7e6      	b.n	8006ce2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8006d1a:	b132      	cbz	r2, 8006d2a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	611a      	str	r2, [r3, #16]
 8006d24:	2000      	movs	r0, #0
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	e7bb      	b.n	8006ca2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8006d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	651a      	str	r2, [r3, #80]	; 0x50
 8006d32:	e7f7      	b.n	8006d24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8006d34:	200016d0 	ldrdcs	r1, [r0], -r0
 8006d38:	200016d4 	ldrdcs	r1, [r0], -r4
 8006d3c:	200016e0 	andcs	r1, r0, r0, ror #13
 8006d40:	1ffff700 	svcne	0x00fff700
 8006d44:	200016dc 	ldrdcs	r1, [r0], -ip
 8006d48:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8006d4c:	40022000 	andmi	r2, r2, r0

08006d50 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	2400      	movs	r4, #0
 8006d54:	9804      	ldr	r0, [sp, #16]
 8006d56:	6004      	str	r4, [r0, #0]
 8006d58:	4c48      	ldr	r4, [pc, #288]	; (8006e7c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8006d5a:	6820      	ldr	r0, [r4, #0]
 8006d5c:	2804      	cmp	r0, #4
 8006d5e:	d848      	bhi.n	8006df2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8006d60:	e8df f000 	tbb	[pc, r0]
 8006d64:	22847c03 	addcs	r7, r4, #768	; 0x300
 8006d68:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8006d6c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8006d70:	6001      	str	r1, [r0, #0]
 8006d72:	4844      	ldr	r0, [pc, #272]	; (8006e84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006d74:	6003      	str	r3, [r0, #0]
 8006d76:	4b44      	ldr	r3, [pc, #272]	; (8006e88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4b44      	ldr	r3, [pc, #272]	; (8006e8c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8006d7c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8006d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d84:	4b42      	ldr	r3, [pc, #264]	; (8006e90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006d86:	d807      	bhi.n	8006d98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8006d88:	2201      	movs	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	f001 fab8 	bl	8008300 <fmc_bank0_unlock>
 8006d90:	2303      	movs	r3, #3
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	2000      	movs	r0, #0
 8006d96:	e026      	b.n	8006de6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8006d98:	4a3e      	ldr	r2, [pc, #248]	; (8006e94 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8006d9a:	4291      	cmp	r1, r2
 8006d9c:	d3f4      	bcc.n	8006d88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8006d9e:	2200      	movs	r2, #0
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	f001 fabb 	bl	800831c <fmc_bank1_unlock>
 8006da6:	e7f3      	b.n	8006d90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006da8:	4d39      	ldr	r5, [pc, #228]	; (8006e90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006daa:	782b      	ldrb	r3, [r5, #0]
 8006dac:	b15b      	cbz	r3, 8006dc6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8006dae:	f001 fad3 	bl	8008358 <fmc_bank0_state_get>
 8006db2:	2801      	cmp	r0, #1
 8006db4:	d0ee      	beq.n	8006d94 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8006db6:	7829      	ldrb	r1, [r5, #0]
 8006db8:	4b37      	ldr	r3, [pc, #220]	; (8006e98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006dba:	b939      	cbnz	r1, 8006dcc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	651a      	str	r2, [r3, #80]	; 0x50
 8006dc4:	e006      	b.n	8006dd4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8006dc6:	f001 fadb 	bl	8008380 <fmc_bank1_state_get>
 8006dca:	e7f2      	b.n	8006db2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	611a      	str	r2, [r3, #16]
 8006dd4:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	b94b      	cbnz	r3, 8006dee <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8006dda:	b129      	cbz	r1, 8006de8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8006ddc:	f001 faac 	bl	8008338 <fmc_bank0_lock>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2001      	movs	r0, #1
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f001 faae 	bl	8008348 <fmc_bank1_lock>
 8006dec:	e7f8      	b.n	8006de0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8006dee:	2304      	movs	r3, #4
 8006df0:	e7cf      	b.n	8006d92 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8006df2:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d91a      	bls.n	8006e30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8006dfa:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006dfc:	7819      	ldrb	r1, [r3, #0]
 8006dfe:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e00:	b189      	cbz	r1, 8006e26 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8006e02:	6919      	ldr	r1, [r3, #16]
 8006e04:	f041 0101 	orr.w	r1, r1, #1
 8006e08:	6119      	str	r1, [r3, #16]
 8006e0a:	4d1e      	ldr	r5, [pc, #120]	; (8006e84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006e0c:	481c      	ldr	r0, [pc, #112]	; (8006e80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8006e0e:	6829      	ldr	r1, [r5, #0]
 8006e10:	6803      	ldr	r3, [r0, #0]
 8006e12:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e16:	f843 6b04 	str.w	r6, [r3], #4
 8006e1a:	6003      	str	r3, [r0, #0]
 8006e1c:	6813      	ldr	r3, [r2, #0]
 8006e1e:	6029      	str	r1, [r5, #0]
 8006e20:	3b04      	subs	r3, #4
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e7b4      	b.n	8006d90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e26:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006e28:	f041 0101 	orr.w	r1, r1, #1
 8006e2c:	6519      	str	r1, [r3, #80]	; 0x50
 8006e2e:	e7ec      	b.n	8006e0a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0ad      	beq.n	8006d90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e34:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	4b17      	ldr	r3, [pc, #92]	; (8006e98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e3a:	b152      	cbz	r2, 8006e52 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	611a      	str	r2, [r3, #16]
 8006e44:	4a0f      	ldr	r2, [pc, #60]	; (8006e84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8006e46:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e79e      	b.n	8006d90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8006e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	651a      	str	r2, [r3, #80]	; 0x50
 8006e5a:	e7f3      	b.n	8006e44 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8006e62:	b132      	cbz	r2, 8006e72 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	f022 0202 	bic.w	r2, r2, #2
 8006e6a:	611a      	str	r2, [r3, #16]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	6020      	str	r0, [r4, #0]
 8006e70:	e7b9      	b.n	8006de6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8006e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e74:	f022 0202 	bic.w	r2, r2, #2
 8006e78:	651a      	str	r2, [r3, #80]	; 0x50
 8006e7a:	e7f7      	b.n	8006e6c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8006e7c:	200016d0 	ldrdcs	r1, [r0], -r0
 8006e80:	200016cc 	andcs	r1, r0, ip, asr #13
 8006e84:	200016d8 	ldrdcs	r1, [r0], -r8
 8006e88:	200016e0 	andcs	r1, r0, r0, ror #13
 8006e8c:	1ffff700 	svcne	0x00fff700
 8006e90:	200016dc 	ldrdcs	r1, [r0], -ip
 8006e94:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8006e98:	40022000 	andmi	r2, r2, r0

08006e9c <Network::Network()>:
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <Network::Network()+0x18>)
 8006e9e:	4906      	ldr	r1, [pc, #24]	; (8006eb8 <Network::Network()+0x1c>)
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	1e42      	subs	r2, r0, #1
 8006ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea8:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f9      	bne.n	8006ea4 <Network::Network()+0x8>
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	200016e4 	andcs	r1, r0, r4, ror #13
 8006eb8:	0800a8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, sp, pc}

08006ebc <Network::MacAddressCopyTo(unsigned char*)>:
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	f001 b8cd 	b.w	800805c <mac_address_get>
	...

08006ec4 <DisplayUdf::DisplayUdf()>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f000 f972 	bl	80071b0 <Display::Display()>
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <DisplayUdf::DisplayUdf()+0x20>)
 8006ece:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8006ed2:	601c      	str	r4, [r3, #0]
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f802 3b01 	strb.w	r3, [r2], #1
 8006eda:	3301      	adds	r3, #1
 8006edc:	2b15      	cmp	r3, #21
 8006ede:	d1fa      	bne.n	8006ed6 <DisplayUdf::DisplayUdf()+0x12>
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	200016e8 	andcs	r1, r0, r8, ror #13

08006ee8 <DisplayUdf::SetTitle(char const*, ...)>:
 8006ee8:	b40e      	push	{r1, r2, r3}
 8006eea:	b517      	push	{r0, r1, r2, r4, lr}
 8006eec:	ab05      	add	r3, sp, #20
 8006eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	211f      	movs	r1, #31
 8006ef6:	3020      	adds	r0, #32
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f7fb fab7 	bl	800246c <vsnprintf>
 8006efe:	2300      	movs	r3, #0
 8006f00:	4404      	add	r4, r0
 8006f02:	f884 3020 	strb.w	r3, [r4, #32]
 8006f06:	b003      	add	sp, #12
 8006f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0c:	b003      	add	sp, #12
 8006f0e:	4770      	bx	lr

08006f10 <DisplayUdf::Show()>:
 8006f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	21ff      	movs	r1, #255	; 0xff
 8006f16:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8006f1a:	f100 0254 	add.w	r2, r0, #84	; 0x54
 8006f1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f22:	2806      	cmp	r0, #6
 8006f24:	bf88      	it	hi
 8006f26:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d1f7      	bne.n	8006f1e <DisplayUdf::Show()+0xe>
 8006f2e:	2501      	movs	r5, #1
 8006f30:	6860      	ldr	r0, [r4, #4]
 8006f32:	b118      	cbz	r0, 8006f3c <DisplayUdf::Show()+0x2c>
 8006f34:	6803      	ldr	r3, [r0, #0]
 8006f36:	4629      	mov	r1, r5
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4798      	blx	r3
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	b2ed      	uxtb	r5, r5
 8006f40:	2d06      	cmp	r5, #6
 8006f42:	d1f5      	bne.n	8006f30 <DisplayUdf::Show()+0x20>
 8006f44:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8006f48:	f104 0220 	add.w	r2, r4, #32
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 f8e0 	bl	8007112 <Display::Write(unsigned char, char const*)>
 8006f52:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8006f56:	4620      	mov	r0, r4
 8006f58:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <DisplayUdf::Show()+0x94>)
 8006f5a:	f000 f8da 	bl	8007112 <Display::Write(unsigned char, char const*)>
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <DisplayUdf::Show()+0x98>)
 8006f60:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4620      	mov	r0, r4
 8006f68:	2303      	movs	r3, #3
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <DisplayUdf::Show()+0x9c>)
 8006f6c:	f000 f8b5 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <DisplayUdf::Show()+0xa0>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	f891 20ab 	ldrb.w	r2, [r1, #171]	; 0xab
 8006f78:	f891 30ac 	ldrb.w	r3, [r1, #172]	; 0xac
 8006f7c:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
 8006f80:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006f84:	f891 20a8 	ldrb.w	r2, [r1, #168]	; 0xa8
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8006f8e:	b292      	uxth	r2, r2
 8006f90:	9200      	str	r2, [sp, #0]
 8006f92:	4620      	mov	r0, r4
 8006f94:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <DisplayUdf::Show()+0xa4>)
 8006f96:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8006f9a:	f000 f89e 	bl	80070da <Display::Printf(unsigned char, char const*, ...)>
 8006f9e:	b003      	add	sp, #12
 8006fa0:	bd30      	pop	{r4, r5, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08009ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, pc}
 8006fa8:	20001780 	andcs	r1, r0, r0, lsl #15
 8006fac:	0800a8d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, sp, pc}
 8006fb0:	200001f4 	strdcs	r0, [r0], -r4
 8006fb4:	0800a8e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, fp, sp, pc}

08006fb8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8006fb8:	1e4b      	subs	r3, r1, #1
 8006fba:	2b05      	cmp	r3, #5
 8006fbc:	b530      	push	{r4, r5, lr}
 8006fbe:	d80f      	bhi.n	8006fe0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8006fc6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006fca:	428d      	cmp	r5, r1
 8006fcc:	d109      	bne.n	8006fe2 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8006fce:	1884      	adds	r4, r0, r2
 8006fd0:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8006fd4:	4403      	add	r3, r0
 8006fd6:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 8006fda:	4410      	add	r0, r2
 8006fdc:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8006fe0:	bd30      	pop	{r4, r5, pc}
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	2b14      	cmp	r3, #20
 8006fe6:	d1ee      	bne.n	8006fc6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8006fe8:	e7f7      	b.n	8006fda <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08006fea <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8006fea:	b510      	push	{r4, lr}
 8006fec:	2220      	movs	r2, #32
 8006fee:	4604      	mov	r4, r0
 8006ff0:	f840 1b04 	str.w	r1, [r0], #4
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	f000 fec7 	bl	8007d88 <memset>
 8006ffa:	f647 7305 	movw	r3, #32517	; 0x7f05
 8006ffe:	4620      	mov	r0, r4
 8007000:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007002:	bd10      	pop	{r4, pc}

08007004 <DisplayUdfParams::Load()>:
 8007004:	b508      	push	{r3, lr}
 8007006:	2300      	movs	r3, #0
 8007008:	4601      	mov	r1, r0
 800700a:	6043      	str	r3, [r0, #4]
 800700c:	6800      	ldr	r0, [r0, #0]
 800700e:	b120      	cbz	r0, 800701a <DisplayUdfParams::Load()+0x16>
 8007010:	6803      	ldr	r3, [r0, #0]
 8007012:	3104      	adds	r1, #4
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4798      	blx	r3
 8007018:	2001      	movs	r0, #1
 800701a:	bd08      	pop	{r3, pc}

0800701c <DisplayUdfParams::Set(DisplayUdf*)>:
 800701c:	6843      	ldr	r3, [r0, #4]
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	009a      	lsls	r2, r3, #2
 8007024:	4604      	mov	r4, r0
 8007026:	460e      	mov	r6, r1
 8007028:	d506      	bpl.n	8007038 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800702a:	6848      	ldr	r0, [r1, #4]
 800702c:	b120      	cbz	r0, 8007038 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	4798      	blx	r3
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	6870      	ldr	r0, [r6, #4]
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	bf41      	itttt	mi
 8007040:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8007044:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8007048:	4353      	mulmi	r3, r2
 800704a:	6133      	strmi	r3, [r6, #16]
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8007052:	b110      	cbz	r0, 800705a <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8007054:	6803      	ldr	r3, [r0, #0]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	4798      	blx	r3
 800705a:	2500      	movs	r5, #0
 800705c:	2701      	movs	r7, #1
 800705e:	f104 0808 	add.w	r8, r4, #8
 8007062:	6862      	ldr	r2, [r4, #4]
 8007064:	fa07 f305 	lsl.w	r3, r7, r5
 8007068:	4393      	bics	r3, r2
 800706a:	d105      	bne.n	8007078 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 800706c:	462a      	mov	r2, r5
 800706e:	4630      	mov	r0, r6
 8007070:	f818 1005 	ldrb.w	r1, [r8, r5]
 8007074:	f7ff ffa0 	bl	8006fb8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8007078:	3501      	adds	r5, #1
 800707a:	2d14      	cmp	r5, #20
 800707c:	d1f1      	bne.n	8007062 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 800707e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007082 <DisplayUdfParams::Dump()>:
 8007082:	4770      	bx	lr

08007084 <Display::Detect(DisplayType)>:
 8007084:	2902      	cmp	r1, #2
 8007086:	b538      	push	{r3, r4, r5, lr}
 8007088:	4604      	mov	r4, r0
 800708a:	d014      	beq.n	80070b6 <Display::Detect(DisplayType)+0x32>
 800708c:	2904      	cmp	r1, #4
 800708e:	d01b      	beq.n	80070c8 <Display::Detect(DisplayType)+0x44>
 8007090:	6860      	ldr	r0, [r4, #4]
 8007092:	b168      	cbz	r0, 80070b0 <Display::Detect(DisplayType)+0x2c>
 8007094:	6803      	ldr	r3, [r0, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	6860      	ldr	r0, [r4, #4]
 800709e:	b9ab      	cbnz	r3, 80070cc <Display::Detect(DisplayType)+0x48>
 80070a0:	b110      	cbz	r0, 80070a8 <Display::Detect(DisplayType)+0x24>
 80070a2:	6803      	ldr	r3, [r0, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4798      	blx	r3
 80070a8:	2304      	movs	r3, #4
 80070aa:	2200      	movs	r2, #0
 80070ac:	e9c4 3200 	strd	r3, r2, [r4]
 80070b0:	2300      	movs	r3, #0
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	e010      	b.n	80070d8 <Display::Detect(DisplayType)+0x54>
 80070b6:	2018      	movs	r0, #24
 80070b8:	f000 fdad 	bl	8007c16 <operator new(unsigned int)>
 80070bc:	4605      	mov	r5, r0
 80070be:	2100      	movs	r1, #0
 80070c0:	f000 f956 	bl	8007370 <Ssd1306::Ssd1306(TOledPanel)>
 80070c4:	6065      	str	r5, [r4, #4]
 80070c6:	e7e3      	b.n	8007090 <Display::Detect(DisplayType)+0xc>
 80070c8:	6001      	str	r1, [r0, #0]
 80070ca:	e7e1      	b.n	8007090 <Display::Detect(DisplayType)+0xc>
 80070cc:	6803      	ldr	r3, [r0, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4798      	blx	r3
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0eb      	beq.n	80070b0 <Display::Detect(DisplayType)+0x2c>
 80070d8:	bd38      	pop	{r3, r4, r5, pc}

080070da <Display::Printf(unsigned char, char const*, ...)>:
 80070da:	b40c      	push	{r2, r3}
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	6844      	ldr	r4, [r0, #4]
 80070e0:	4605      	mov	r5, r0
 80070e2:	460e      	mov	r6, r1
 80070e4:	b08a      	sub	sp, #40	; 0x28
 80070e6:	b174      	cbz	r4, 8007106 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80070e8:	ab0f      	add	r3, sp, #60	; 0x3c
 80070ea:	2120      	movs	r1, #32
 80070ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070ee:	a802      	add	r0, sp, #8
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	f7fb f9bb 	bl	800246c <vsnprintf>
 80070f6:	4604      	mov	r4, r0
 80070f8:	6868      	ldr	r0, [r5, #4]
 80070fa:	4631      	mov	r1, r6
 80070fc:	6803      	ldr	r3, [r0, #0]
 80070fe:	aa02      	add	r2, sp, #8
 8007100:	69dd      	ldr	r5, [r3, #28]
 8007102:	b2a3      	uxth	r3, r4
 8007104:	47a8      	blx	r5
 8007106:	4620      	mov	r0, r4
 8007108:	b00a      	add	sp, #40	; 0x28
 800710a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800710e:	b002      	add	sp, #8
 8007110:	4770      	bx	lr

08007112 <Display::Write(unsigned char, char const*)>:
 8007112:	6840      	ldr	r0, [r0, #4]
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	b168      	cbz	r0, 8007134 <Display::Write(unsigned char, char const*)+0x22>
 8007118:	2400      	movs	r4, #0
 800711a:	7905      	ldrb	r5, [r0, #4]
 800711c:	5d13      	ldrb	r3, [r2, r4]
 800711e:	b11b      	cbz	r3, 8007128 <Display::Write(unsigned char, char const*)+0x16>
 8007120:	1c63      	adds	r3, r4, #1
 8007122:	42ac      	cmp	r4, r5
 8007124:	461c      	mov	r4, r3
 8007126:	dbf9      	blt.n	800711c <Display::Write(unsigned char, char const*)+0xa>
 8007128:	6803      	ldr	r3, [r0, #0]
 800712a:	69dd      	ldr	r5, [r3, #28]
 800712c:	b2e3      	uxtb	r3, r4
 800712e:	47a8      	blx	r5
 8007130:	4620      	mov	r0, r4
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	4604      	mov	r4, r0
 8007136:	e7fb      	b.n	8007130 <Display::Write(unsigned char, char const*)+0x1e>

08007138 <Display::SetCursorPos(unsigned char, unsigned char)>:
 8007138:	6840      	ldr	r0, [r0, #4]
 800713a:	b110      	cbz	r0, 8007142 <Display::SetCursorPos(unsigned char, unsigned char)+0xa>
 800713c:	6803      	ldr	r3, [r0, #0]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	4718      	bx	r3
 8007142:	4770      	bx	lr

08007144 <Display::TextStatus(char const*)>:
 8007144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007148:	6843      	ldr	r3, [r0, #4]
 800714a:	4604      	mov	r4, r0
 800714c:	460e      	mov	r6, r1
 800714e:	b31b      	cbz	r3, 8007198 <Display::TextStatus(char const*)+0x54>
 8007150:	f893 9005 	ldrb.w	r9, [r3, #5]
 8007154:	2100      	movs	r1, #0
 8007156:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800715a:	b2ed      	uxtb	r5, r5
 800715c:	462a      	mov	r2, r5
 800715e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8007162:	2700      	movs	r7, #0
 8007164:	f7ff ffe8 	bl	8007138 <Display::SetCursorPos(unsigned char, unsigned char)>
 8007168:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800716c:	45b8      	cmp	r8, r7
 800716e:	d907      	bls.n	8007180 <Display::TextStatus(char const*)+0x3c>
 8007170:	6860      	ldr	r0, [r4, #4]
 8007172:	b118      	cbz	r0, 800717c <Display::TextStatus(char const*)+0x38>
 8007174:	6803      	ldr	r3, [r0, #0]
 8007176:	2120      	movs	r1, #32
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4798      	blx	r3
 800717c:	3701      	adds	r7, #1
 800717e:	e7f5      	b.n	800716c <Display::TextStatus(char const*)+0x28>
 8007180:	462a      	mov	r2, r5
 8007182:	4620      	mov	r0, r4
 8007184:	2100      	movs	r1, #0
 8007186:	f7ff ffd7 	bl	8007138 <Display::SetCursorPos(unsigned char, unsigned char)>
 800718a:	4632      	mov	r2, r6
 800718c:	4649      	mov	r1, r9
 800718e:	4620      	mov	r0, r4
 8007190:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007194:	f7ff bfbd 	b.w	8007112 <Display::Write(unsigned char, char const*)>
 8007198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800719c <Display::PrintInfo()>:
 800719c:	6840      	ldr	r0, [r0, #4]
 800719e:	b910      	cbnz	r0, 80071a6 <Display::PrintInfo()+0xa>
 80071a0:	4802      	ldr	r0, [pc, #8]	; (80071ac <Display::PrintInfo()+0x10>)
 80071a2:	f7fb b973 	b.w	800248c <puts>
 80071a6:	6803      	ldr	r3, [r0, #0]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	4718      	bx	r3
 80071ac:	0800a8f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, fp, sp, pc}

080071b0 <Display::Display()>:
 80071b0:	2300      	movs	r3, #0
 80071b2:	2204      	movs	r2, #4
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	e9c0 2300 	strd	r2, r3, [r0]
 80071bc:	7203      	strb	r3, [r0, #8]
 80071be:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <Display::Display()+0x3c>)
 80071c0:	3014      	adds	r0, #20
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f840 3c08 	str.w	r3, [r0, #-8]
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <Display::Display()+0x40>)
 80071ca:	f840 3c04 	str.w	r3, [r0, #-4]
 80071ce:	f000 f83d 	bl	800724c <Display7Segment::Display7Segment()>
 80071d2:	4b08      	ldr	r3, [pc, #32]	; (80071f4 <Display::Display()+0x44>)
 80071d4:	601c      	str	r4, [r3, #0]
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	b91b      	cbnz	r3, 80071e2 <Display::Display()+0x32>
 80071da:	2102      	movs	r1, #2
 80071dc:	4620      	mov	r0, r4
 80071de:	f7ff ff51 	bl	8007084 <Display::Detect(DisplayType)>
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7ff ffda 	bl	800719c <Display::PrintInfo()>
 80071e8:	4620      	mov	r0, r4
 80071ea:	bd10      	pop	{r4, pc}
 80071ec:	2000181c 	andcs	r1, r0, ip, lsl r8
 80071f0:	000493e0 	andeq	r9, r4, r0, ror #7
 80071f4:	200016ec 	andcs	r1, r0, ip, ror #13

080071f8 <Display::SetSleep(bool)>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4604      	mov	r4, r0
 80071fc:	6840      	ldr	r0, [r0, #4]
 80071fe:	460d      	mov	r5, r1
 8007200:	b138      	cbz	r0, 8007212 <Display::SetSleep(bool)+0x1a>
 8007202:	6803      	ldr	r3, [r0, #0]
 8007204:	7221      	strb	r1, [r4, #8]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	4798      	blx	r3
 800720a:	b915      	cbnz	r5, 8007212 <Display::SetSleep(bool)+0x1a>
 800720c:	4b01      	ldr	r3, [pc, #4]	; (8007214 <Display::SetSleep(bool)+0x1c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60e3      	str	r3, [r4, #12]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	2000181c 	andcs	r1, r0, ip, lsl r8

08007218 <Display::Run()>:
 8007218:	6901      	ldr	r1, [r0, #16]
 800721a:	b151      	cbz	r1, 8007232 <Display::Run()+0x1a>
 800721c:	7a02      	ldrb	r2, [r0, #8]
 800721e:	b942      	cbnz	r2, 8007232 <Display::Run()+0x1a>
 8007220:	4a04      	ldr	r2, [pc, #16]	; (8007234 <Display::Run()+0x1c>)
 8007222:	68c3      	ldr	r3, [r0, #12]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	4299      	cmp	r1, r3
 800722a:	d202      	bcs.n	8007232 <Display::Run()+0x1a>
 800722c:	2101      	movs	r1, #1
 800722e:	f7ff bfe3 	b.w	80071f8 <Display::SetSleep(bool)>
 8007232:	4770      	bx	lr
 8007234:	2000181c 	andcs	r1, r0, ip, lsl r8

08007238 <Display7Segment::Status(Display7SegmentMessage)>:
 8007238:	b508      	push	{r3, lr}
 800723a:	7a03      	ldrb	r3, [r0, #8]
 800723c:	b123      	cbz	r3, 8007248 <Display7Segment::Status(Display7SegmentMessage)+0x10>
 800723e:	43c9      	mvns	r1, r1
 8007240:	b28a      	uxth	r2, r1
 8007242:	2112      	movs	r1, #18
 8007244:	f7fb fe0e 	bl	8002e64 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007248:	bd08      	pop	{r3, pc}
	...

0800724c <Display7Segment::Display7Segment()>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4604      	mov	r4, r0
 8007250:	2500      	movs	r5, #0
 8007252:	2021      	movs	r0, #33	; 0x21
 8007254:	4e0f      	ldr	r6, [pc, #60]	; (8007294 <Display7Segment::Display7Segment()+0x48>)
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <Display7Segment::Display7Segment()+0x4c>)
 8007258:	7020      	strb	r0, [r4, #0]
 800725a:	6066      	str	r6, [r4, #4]
 800725c:	7225      	strb	r5, [r4, #8]
 800725e:	601c      	str	r4, [r3, #0]
 8007260:	f001 fd84 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 8007264:	4630      	mov	r0, r6
 8007266:	f001 fd79 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 800726a:	4629      	mov	r1, r5
 800726c:	4628      	mov	r0, r5
 800726e:	f001 fd83 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8007272:	1e02      	subs	r2, r0, #0
 8007274:	bf0c      	ite	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	462b      	movne	r3, r5
 800727a:	7223      	strb	r3, [r4, #8]
 800727c:	d108      	bne.n	8007290 <Display7Segment::Display7Segment()+0x44>
 800727e:	4611      	mov	r1, r2
 8007280:	4620      	mov	r0, r4
 8007282:	f7fb fdef 	bl	8002e64 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007286:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff ffd4 	bl	8007238 <Display7Segment::Status(Display7SegmentMessage)>
 8007290:	4620      	mov	r0, r4
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007298:	200016f0 	strdcs	r1, [r0], -r0

0800729c <Ssd1306::~Ssd1306()>:
 800729c:	4770      	bx	lr

0800729e <Ssd1306::SetCursor(unsigned int)>:
 800729e:	4770      	bx	lr

080072a0 <Ssd1306::PrintInfo()>:
 80072a0:	b410      	push	{r4}
 80072a2:	4906      	ldr	r1, [pc, #24]	; (80072bc <Ssd1306::PrintInfo()+0x1c>)
 80072a4:	7c44      	ldrb	r4, [r0, #17]
 80072a6:	7903      	ldrb	r3, [r0, #4]
 80072a8:	7942      	ldrb	r2, [r0, #5]
 80072aa:	4805      	ldr	r0, [pc, #20]	; (80072c0 <Ssd1306::PrintInfo()+0x20>)
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	bf08      	it	eq
 80072b0:	4601      	moveq	r1, r0
 80072b2:	4804      	ldr	r0, [pc, #16]	; (80072c4 <Ssd1306::PrintInfo()+0x24>)
 80072b4:	bc10      	pop	{r4}
 80072b6:	f7fb b8b1 	b.w	800241c <printf>
 80072ba:	bf00      	nop
 80072bc:	0800a904 	stmdaeq	r0, {r2, r8, fp, sp, pc}
 80072c0:	0800a90b 	stmdaeq	r0, {r0, r1, r3, r8, fp, sp, pc}
 80072c4:	0800a913 	stmdaeq	r0, {r0, r1, r4, r8, fp, sp, pc}

080072c8 <Ssd1306::~Ssd1306()>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	4604      	mov	r4, r0
 80072cc:	f000 fc9f 	bl	8007c0e <operator delete(void*)>
 80072d0:	4620      	mov	r0, r4
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <HAL_I2C::Setup()>:
 80072d4:	b510      	push	{r4, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	7800      	ldrb	r0, [r0, #0]
 80072da:	f001 fd47 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 80072de:	6860      	ldr	r0, [r4, #4]
 80072e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e4:	f001 bd3a 	b.w	8008d5c <gd32_i2c_set_baudrate(unsigned int)>

080072e8 <Ssd1306::PutChar(int)>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	f1a1 0420 	sub.w	r4, r1, #32
 80072ee:	2c5f      	cmp	r4, #95	; 0x5f
 80072f0:	bf88      	it	hi
 80072f2:	2400      	movhi	r4, #0
 80072f4:	3008      	adds	r0, #8
 80072f6:	f7ff ffed 	bl	80072d4 <HAL_I2C::Setup()>
 80072fa:	4804      	ldr	r0, [pc, #16]	; (800730c <Ssd1306::PutChar(int)+0x24>)
 80072fc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007300:	4420      	add	r0, r4
 8007302:	2107      	movs	r1, #7
 8007304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007308:	f001 bd36 	b.w	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 800730c:	0800a928 	stmdaeq	r0, {r3, r5, r8, fp, sp, pc}

08007310 <Ssd1306::PutString(char const*)>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4605      	mov	r5, r0
 8007314:	1e4c      	subs	r4, r1, #1
 8007316:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800731a:	b119      	cbz	r1, 8007324 <Ssd1306::PutString(char const*)+0x14>
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff ffe3 	bl	80072e8 <Ssd1306::PutChar(int)>
 8007322:	e7f8      	b.n	8007316 <Ssd1306::PutString(char const*)+0x6>
 8007324:	bd38      	pop	{r3, r4, r5, pc}

08007326 <Ssd1306::Text(char const*, unsigned int)>:
 8007326:	b570      	push	{r4, r5, r6, lr}
 8007328:	7903      	ldrb	r3, [r0, #4]
 800732a:	4605      	mov	r5, r0
 800732c:	460c      	mov	r4, r1
 800732e:	4293      	cmp	r3, r2
 8007330:	bf94      	ite	ls
 8007332:	18ce      	addls	r6, r1, r3
 8007334:	188e      	addhi	r6, r1, r2
 8007336:	42b4      	cmp	r4, r6
 8007338:	d005      	beq.n	8007346 <Ssd1306::Text(char const*, unsigned int)+0x20>
 800733a:	4628      	mov	r0, r5
 800733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007340:	f7ff ffd2 	bl	80072e8 <Ssd1306::PutChar(int)>
 8007344:	e7f7      	b.n	8007336 <Ssd1306::Text(char const*, unsigned int)+0x10>
 8007346:	bd70      	pop	{r4, r5, r6, pc}

08007348 <Ssd1306::InitMembers()>:
 8007348:	7c03      	ldrb	r3, [r0, #16]
 800734a:	b12b      	cbz	r3, 8007358 <Ssd1306::InitMembers()+0x10>
 800734c:	3b01      	subs	r3, #1
 800734e:	2b01      	cmp	r3, #1
 8007350:	d908      	bls.n	8007364 <Ssd1306::InitMembers()+0x1c>
 8007352:	f640 0315 	movw	r3, #2069	; 0x815
 8007356:	e007      	b.n	8007368 <Ssd1306::InitMembers()+0x20>
 8007358:	f640 0315 	movw	r3, #2069	; 0x815
 800735c:	8083      	strh	r3, [r0, #4]
 800735e:	2308      	movs	r3, #8
 8007360:	6143      	str	r3, [r0, #20]
 8007362:	4770      	bx	lr
 8007364:	f240 4315 	movw	r3, #1045	; 0x415
 8007368:	8083      	strh	r3, [r0, #4]
 800736a:	2304      	movs	r3, #4
 800736c:	e7f8      	b.n	8007360 <Ssd1306::InitMembers()+0x18>
	...

08007370 <Ssd1306::Ssd1306(TOledPanel)>:
 8007370:	4a08      	ldr	r2, [pc, #32]	; (8007394 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007372:	b508      	push	{r3, lr}
 8007374:	6002      	str	r2, [r0, #0]
 8007376:	227f      	movs	r2, #127	; 0x7f
 8007378:	80c2      	strh	r2, [r0, #6]
 800737a:	223c      	movs	r2, #60	; 0x3c
 800737c:	7202      	strb	r2, [r0, #8]
 800737e:	4a06      	ldr	r2, [pc, #24]	; (8007398 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007380:	7401      	strb	r1, [r0, #16]
 8007382:	60c2      	str	r2, [r0, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	7442      	strb	r2, [r0, #17]
 8007388:	4a04      	ldr	r2, [pc, #16]	; (800739c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 800738a:	6010      	str	r0, [r2, #0]
 800738c:	f7ff ffdc 	bl	8007348 <Ssd1306::InitMembers()>
 8007390:	bd08      	pop	{r3, pc}
 8007392:	bf00      	nop
 8007394:	0800ac00 	stmdaeq	r0, {sl, fp, sp, pc}
 8007398:	00061a80 	andeq	r1, r6, r0, lsl #21
 800739c:	2000177c 	andcs	r1, r0, ip, ror r7

080073a0 <Ssd1306::SendCommand(unsigned char)>:
 80073a0:	2300      	movs	r3, #0
 80073a2:	b507      	push	{r0, r1, r2, lr}
 80073a4:	3008      	adds	r0, #8
 80073a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80073aa:	f88d 1005 	strb.w	r1, [sp, #5]
 80073ae:	f7ff ff91 	bl	80072d4 <HAL_I2C::Setup()>
 80073b2:	2102      	movs	r1, #2
 80073b4:	a801      	add	r0, sp, #4
 80073b6:	f001 fcdf 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 80073ba:	b003      	add	sp, #12
 80073bc:	f85d fb04 	ldr.w	pc, [sp], #4

080073c0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80073c0:	2914      	cmp	r1, #20
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	4605      	mov	r5, r0
 80073c6:	4616      	mov	r6, r2
 80073c8:	d81c      	bhi.n	8007404 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80073ca:	7943      	ldrb	r3, [r0, #5]
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d919      	bls.n	8007404 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80073d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073d4:	7c43      	ldrb	r3, [r0, #17]
 80073d6:	004c      	lsls	r4, r1, #1
 80073d8:	b2e4      	uxtb	r4, r4
 80073da:	b10b      	cbz	r3, 80073e0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 80073dc:	3404      	adds	r4, #4
 80073de:	b2e4      	uxtb	r4, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f004 010e 	and.w	r1, r4, #14
 80073e6:	f7ff ffdb 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80073ea:	0921      	lsrs	r1, r4, #4
 80073ec:	4628      	mov	r0, r5
 80073ee:	f041 0110 	orr.w	r1, r1, #16
 80073f2:	f7ff ffd5 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80073f6:	4628      	mov	r0, r5
 80073f8:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80073fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007400:	f7ff bfce 	b.w	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007404:	bd70      	pop	{r4, r5, r6, pc}

08007406 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	4615      	mov	r5, r2
 800740c:	461e      	mov	r6, r3
 800740e:	b171      	cbz	r1, 800742e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007410:	7943      	ldrb	r3, [r0, #5]
 8007412:	428b      	cmp	r3, r1
 8007414:	d30b      	bcc.n	800742e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007416:	3901      	subs	r1, #1
 8007418:	b2ca      	uxtb	r2, r1
 800741a:	2100      	movs	r1, #0
 800741c:	f7ff ffd0 	bl	80073c0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007420:	4632      	mov	r2, r6
 8007422:	4629      	mov	r1, r5
 8007424:	4620      	mov	r0, r4
 8007426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800742a:	f7ff bf7c 	b.w	8007326 <Ssd1306::Text(char const*, unsigned int)>
 800742e:	bd70      	pop	{r4, r5, r6, pc}

08007430 <Ssd1306::ClearLine(unsigned char)>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4605      	mov	r5, r0
 8007434:	b1b9      	cbz	r1, 8007466 <Ssd1306::ClearLine(unsigned char)+0x36>
 8007436:	7943      	ldrb	r3, [r0, #5]
 8007438:	428b      	cmp	r3, r1
 800743a:	d314      	bcc.n	8007466 <Ssd1306::ClearLine(unsigned char)+0x36>
 800743c:	3901      	subs	r1, #1
 800743e:	b2cc      	uxtb	r4, r1
 8007440:	4622      	mov	r2, r4
 8007442:	2100      	movs	r1, #0
 8007444:	f7ff ffbc 	bl	80073c0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007448:	f105 0008 	add.w	r0, r5, #8
 800744c:	f7ff ff42 	bl	80072d4 <HAL_I2C::Setup()>
 8007450:	2181      	movs	r1, #129	; 0x81
 8007452:	4805      	ldr	r0, [pc, #20]	; (8007468 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8007454:	f001 fc90 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8007458:	4622      	mov	r2, r4
 800745a:	4628      	mov	r0, r5
 800745c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007460:	2100      	movs	r1, #0
 8007462:	f7ff bfad 	b.w	80073c0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	200016f4 	strdcs	r1, [r0], -r4

0800746c <Ssd1306::SetSleep(bool)>:
 800746c:	b111      	cbz	r1, 8007474 <Ssd1306::SetSleep(bool)+0x8>
 800746e:	21ae      	movs	r1, #174	; 0xae
 8007470:	f7ff bf96 	b.w	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007474:	21af      	movs	r1, #175	; 0xaf
 8007476:	e7fb      	b.n	8007470 <Ssd1306::SetSleep(bool)+0x4>

08007478 <Ssd1306::SetContrast(unsigned char)>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4604      	mov	r4, r0
 800747c:	460d      	mov	r5, r1
 800747e:	7181      	strb	r1, [r0, #6]
 8007480:	2181      	movs	r1, #129	; 0x81
 8007482:	f7ff ff8d 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007486:	4629      	mov	r1, r5
 8007488:	4620      	mov	r0, r4
 800748a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800748e:	f7ff bf87 	b.w	80073a0 <Ssd1306::SendCommand(unsigned char)>

08007492 <Ssd1306::SetFlipVertically(bool)>:
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	71c1      	strb	r1, [r0, #7]
 8007498:	b141      	cbz	r1, 80074ac <Ssd1306::SetFlipVertically(bool)+0x1a>
 800749a:	21c0      	movs	r1, #192	; 0xc0
 800749c:	f7ff ff80 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074a0:	21a0      	movs	r1, #160	; 0xa0
 80074a2:	4620      	mov	r0, r4
 80074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a8:	f7ff bf7a 	b.w	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074ac:	21c8      	movs	r1, #200	; 0xc8
 80074ae:	f7ff ff77 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074b2:	21a1      	movs	r1, #161	; 0xa1
 80074b4:	e7f5      	b.n	80074a2 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080074b8 <Ssd1306::CheckSH1106()>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	4604      	mov	r4, r0
 80074bc:	b086      	sub	sp, #24
 80074be:	2100      	movs	r1, #0
 80074c0:	f7ff ff6e 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074c4:	2190      	movs	r1, #144	; 0x90
 80074c6:	4620      	mov	r0, r4
 80074c8:	f7ff ff6a 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074cc:	21b0      	movs	r1, #176	; 0xb0
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff ff66 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074d4:	4b22      	ldr	r3, [pc, #136]	; (8007560 <Ssd1306::CheckSH1106()+0xa8>)
 80074d6:	f104 0608 	add.w	r6, r4, #8
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	791b      	ldrb	r3, [r3, #4]
 80074de:	ad02      	add	r5, sp, #8
 80074e0:	9002      	str	r0, [sp, #8]
 80074e2:	4630      	mov	r0, r6
 80074e4:	712b      	strb	r3, [r5, #4]
 80074e6:	f7ff fef5 	bl	80072d4 <HAL_I2C::Setup()>
 80074ea:	2105      	movs	r1, #5
 80074ec:	4628      	mov	r0, r5
 80074ee:	f001 fc43 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 80074f2:	2100      	movs	r1, #0
 80074f4:	4620      	mov	r0, r4
 80074f6:	f7ff ff53 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80074fa:	2190      	movs	r1, #144	; 0x90
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff ff4f 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007502:	21b0      	movs	r1, #176	; 0xb0
 8007504:	4620      	mov	r0, r4
 8007506:	f7ff ff4b 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 800750a:	2300      	movs	r3, #0
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	f88d 3014 	strb.w	r3, [sp, #20]
 8007512:	2340      	movs	r3, #64	; 0x40
 8007514:	4630      	mov	r0, r6
 8007516:	f88d 3007 	strb.w	r3, [sp, #7]
 800751a:	f7ff fedb 	bl	80072d4 <HAL_I2C::Setup()>
 800751e:	2101      	movs	r1, #1
 8007520:	f10d 0007 	add.w	r0, sp, #7
 8007524:	f001 fc28 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff fed3 	bl	80072d4 <HAL_I2C::Setup()>
 800752e:	2105      	movs	r1, #5
 8007530:	a804      	add	r0, sp, #16
 8007532:	f001 fc87 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 8007536:	2201      	movs	r2, #1
 8007538:	5cab      	ldrb	r3, [r5, r2]
 800753a:	a904      	add	r1, sp, #16
 800753c:	3201      	adds	r2, #1
 800753e:	4411      	add	r1, r2
 8007540:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8007544:	428b      	cmp	r3, r1
 8007546:	d006      	beq.n	8007556 <Ssd1306::CheckSH1106()+0x9e>
 8007548:	1a5b      	subs	r3, r3, r1
 800754a:	fab3 f383 	clz	r3, r3
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	7463      	strb	r3, [r4, #17]
 8007552:	b006      	add	sp, #24
 8007554:	bd70      	pop	{r4, r5, r6, pc}
 8007556:	2a05      	cmp	r2, #5
 8007558:	d1ee      	bne.n	8007538 <Ssd1306::CheckSH1106()+0x80>
 800755a:	2300      	movs	r3, #0
 800755c:	e7f5      	b.n	800754a <Ssd1306::CheckSH1106()+0x92>
 800755e:	bf00      	nop
 8007560:	0800a91f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, fp, sp, pc}

08007564 <Ssd1306::Cls()>:
 8007564:	7c43      	ldrb	r3, [r0, #17]
 8007566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf0c      	ite	eq
 800756e:	2500      	moveq	r5, #0
 8007570:	2504      	movne	r5, #4
 8007572:	4604      	mov	r4, r0
 8007574:	2600      	movs	r6, #0
 8007576:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 800757a:	f045 0810 	orr.w	r8, r5, #16
 800757e:	b2ff      	uxtb	r7, r7
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	4629      	mov	r1, r5
 8007584:	42b3      	cmp	r3, r6
 8007586:	4620      	mov	r0, r4
 8007588:	d91b      	bls.n	80075c2 <Ssd1306::Cls()+0x5e>
 800758a:	f7ff ff09 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 800758e:	4641      	mov	r1, r8
 8007590:	4620      	mov	r0, r4
 8007592:	f7ff ff05 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007596:	f066 014f 	orn	r1, r6, #79	; 0x4f
 800759a:	4620      	mov	r0, r4
 800759c:	b2c9      	uxtb	r1, r1
 800759e:	f7ff feff 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80075a2:	7c23      	ldrb	r3, [r4, #16]
 80075a4:	b123      	cbz	r3, 80075b0 <Ssd1306::Cls()+0x4c>
 80075a6:	3b01      	subs	r3, #1
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d901      	bls.n	80075b0 <Ssd1306::Cls()+0x4c>
 80075ac:	3601      	adds	r6, #1
 80075ae:	e7e7      	b.n	8007580 <Ssd1306::Cls()+0x1c>
 80075b0:	f104 0008 	add.w	r0, r4, #8
 80075b4:	f7ff fe8e 	bl	80072d4 <HAL_I2C::Setup()>
 80075b8:	4639      	mov	r1, r7
 80075ba:	4808      	ldr	r0, [pc, #32]	; (80075dc <Ssd1306::Cls()+0x78>)
 80075bc:	f001 fbdc 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 80075c0:	e7f4      	b.n	80075ac <Ssd1306::Cls()+0x48>
 80075c2:	f7ff feed 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80075c6:	4641      	mov	r1, r8
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff fee9 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075d4:	21b0      	movs	r1, #176	; 0xb0
 80075d6:	f7ff bee3 	b.w	80073a0 <Ssd1306::SendCommand(unsigned char)>
 80075da:	bf00      	nop
 80075dc:	200016f4 	strdcs	r1, [r0], -r4

080075e0 <Ssd1306::Start()>:
 80075e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075e2:	7a04      	ldrb	r4, [r0, #8]
 80075e4:	68c6      	ldr	r6, [r0, #12]
 80075e6:	4605      	mov	r5, r0
 80075e8:	4620      	mov	r0, r4
 80075ea:	f001 fbbf 	bl	8008d6c <gd32_i2c_set_address(unsigned char)>
 80075ee:	4630      	mov	r0, r6
 80075f0:	f001 fbb4 	bl	8008d5c <gd32_i2c_set_baudrate(unsigned int)>
 80075f4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	d902      	bls.n	8007602 <Ssd1306::Start()+0x22>
 80075fc:	3c50      	subs	r4, #80	; 0x50
 80075fe:	2c0f      	cmp	r4, #15
 8007600:	d80f      	bhi.n	8007622 <Ssd1306::Start()+0x42>
 8007602:	2101      	movs	r1, #1
 8007604:	f10d 0007 	add.w	r0, sp, #7
 8007608:	f001 fc1c 	bl	8008e44 <gd32_i2c_read(char*, unsigned int)>
 800760c:	fab0 f480 	clz	r4, r0
 8007610:	0964      	lsrs	r4, r4, #5
 8007612:	b35c      	cbz	r4, 800766c <Ssd1306::Start()+0x8c>
 8007614:	7c2e      	ldrb	r6, [r5, #16]
 8007616:	b14e      	cbz	r6, 800762c <Ssd1306::Start()+0x4c>
 8007618:	3e01      	subs	r6, #1
 800761a:	2e01      	cmp	r6, #1
 800761c:	d929      	bls.n	8007672 <Ssd1306::Start()+0x92>
 800761e:	2400      	movs	r4, #0
 8007620:	e024      	b.n	800766c <Ssd1306::Start()+0x8c>
 8007622:	2100      	movs	r1, #0
 8007624:	4608      	mov	r0, r1
 8007626:	f001 fba7 	bl	8008d78 <gd32_i2c_write(char const*, unsigned int)>
 800762a:	e7ef      	b.n	800760c <Ssd1306::Start()+0x2c>
 800762c:	4f16      	ldr	r7, [pc, #88]	; (8007688 <Ssd1306::Start()+0xa8>)
 800762e:	4628      	mov	r0, r5
 8007630:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007634:	3601      	adds	r6, #1
 8007636:	f7ff feb3 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 800763a:	2e18      	cmp	r6, #24
 800763c:	d1f7      	bne.n	800762e <Ssd1306::Start()+0x4e>
 800763e:	2300      	movs	r3, #0
 8007640:	4a12      	ldr	r2, [pc, #72]	; (800768c <Ssd1306::Start()+0xac>)
 8007642:	4618      	mov	r0, r3
 8007644:	4611      	mov	r1, r2
 8007646:	3301      	adds	r3, #1
 8007648:	2b86      	cmp	r3, #134	; 0x86
 800764a:	f802 0b01 	strb.w	r0, [r2], #1
 800764e:	d1fa      	bne.n	8007646 <Ssd1306::Start()+0x66>
 8007650:	2340      	movs	r3, #64	; 0x40
 8007652:	4628      	mov	r0, r5
 8007654:	700b      	strb	r3, [r1, #0]
 8007656:	f7ff ff2f 	bl	80074b8 <Ssd1306::CheckSH1106()>
 800765a:	4628      	mov	r0, r5
 800765c:	f7ff ff82 	bl	8007564 <Ssd1306::Cls()>
 8007660:	21af      	movs	r1, #175	; 0xaf
 8007662:	4628      	mov	r0, r5
 8007664:	f7ff fe9c 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007668:	2301      	movs	r3, #1
 800766a:	71eb      	strb	r3, [r5, #7]
 800766c:	4620      	mov	r0, r4
 800766e:	b003      	add	sp, #12
 8007670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007672:	2600      	movs	r6, #0
 8007674:	4f06      	ldr	r7, [pc, #24]	; (8007690 <Ssd1306::Start()+0xb0>)
 8007676:	4628      	mov	r0, r5
 8007678:	f817 1b01 	ldrb.w	r1, [r7], #1
 800767c:	3601      	adds	r6, #1
 800767e:	f7ff fe8f 	bl	80073a0 <Ssd1306::SendCommand(unsigned char)>
 8007682:	2e18      	cmp	r6, #24
 8007684:	d1f7      	bne.n	8007676 <Ssd1306::Start()+0x96>
 8007686:	e7da      	b.n	800763e <Ssd1306::Start()+0x5e>
 8007688:	0800abe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, sp, pc}
 800768c:	200016f4 	strdcs	r1, [r0], -r4
 8007690:	0800abc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, sp, pc}

08007694 <console_putc>:
 8007694:	280a      	cmp	r0, #10
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	d102      	bne.n	80076a2 <console_putc+0xe>
 800769c:	200d      	movs	r0, #13
 800769e:	f000 fcad 	bl	8007ffc <uart0_putc>
 80076a2:	4620      	mov	r0, r4
 80076a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a8:	f000 bca8 	b.w	8007ffc <uart0_putc>

080076ac <console_puts>:
 80076ac:	f000 bcc6 	b.w	800803c <uart0_puts>

080076b0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80076b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4617      	mov	r7, r2
 80076b6:	461e      	mov	r6, r3
 80076b8:	4d14      	ldr	r5, [pc, #80]	; (800770c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80076ba:	4b15      	ldr	r3, [pc, #84]	; (8007710 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80076bc:	b086      	sub	sp, #24
 80076be:	6018      	str	r0, [r3, #0]
 80076c0:	4604      	mov	r4, r0
 80076c2:	f105 0803 	add.w	r8, r5, #3
 80076c6:	2203      	movs	r2, #3
 80076c8:	4628      	mov	r0, r5
 80076ca:	f000 fb46 	bl	8007d5a <memmove>
 80076ce:	4639      	mov	r1, r7
 80076d0:	220b      	movs	r2, #11
 80076d2:	4640      	mov	r0, r8
 80076d4:	f000 fb41 	bl	8007d5a <memmove>
 80076d8:	f105 030e 	add.w	r3, r5, #14
 80076dc:	4631      	mov	r1, r6
 80076de:	2208      	movs	r2, #8
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fb3a 	bl	8007d5a <memmove>
 80076e6:	2308      	movs	r3, #8
 80076e8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80076ec:	230b      	movs	r3, #11
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	4b08      	ldr	r3, [pc, #32]	; (8007714 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80076f2:	9005      	str	r0, [sp, #20]
 80076f4:	e9cd 5300 	strd	r5, r3, [sp]
 80076f8:	213f      	movs	r1, #63	; 0x3f
 80076fa:	2303      	movs	r3, #3
 80076fc:	4a06      	ldr	r2, [pc, #24]	; (8007718 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80076fe:	4807      	ldr	r0, [pc, #28]	; (800771c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007700:	f7fa fe9c 	bl	800243c <snprintf>
 8007704:	4620      	mov	r0, r4
 8007706:	b006      	add	sp, #24
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770c:	20001780 	andcs	r1, r0, r0, lsl #15
 8007710:	200017d8 	ldrdcs	r1, [r0], -r8
 8007714:	08009ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, pc}
 8007718:	0800ac38 	stmdaeq	r0, {r3, r4, r5, sl, fp, sp, pc}
 800771c:	20001796 	mulcs	r0, r6, r7

08007720 <FirmwareVersion::Print(char const*)>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	4804      	ldr	r0, [pc, #16]	; (8007738 <FirmwareVersion::Print(char const*)+0x18>)
 8007726:	f7fa feb1 	bl	800248c <puts>
 800772a:	b124      	cbz	r4, 8007736 <FirmwareVersion::Print(char const*)+0x16>
 800772c:	4620      	mov	r0, r4
 800772e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007732:	f7fa beab 	b.w	800248c <puts>
 8007736:	bd10      	pop	{r4, pc}
 8007738:	20001796 	mulcs	r0, r6, r7

0800773c <LedBlink::LedBlink()>:
 800773c:	2200      	movs	r2, #0
 800773e:	2105      	movs	r1, #5
 8007740:	e9c0 2100 	strd	r2, r1, [r0]
 8007744:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007748:	6082      	str	r2, [r0, #8]
 800774a:	e9c0 1203 	strd	r1, r2, [r0, #12]
 800774e:	6142      	str	r2, [r0, #20]
 8007750:	4a01      	ldr	r2, [pc, #4]	; (8007758 <LedBlink::LedBlink()+0x1c>)
 8007752:	6010      	str	r0, [r2, #0]
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	200017dc 	ldrdcs	r1, [r0], -ip

0800775c <LedBlink::SetMode(ledblink::Mode)>:
 800775c:	6843      	ldr	r3, [r0, #4]
 800775e:	428b      	cmp	r3, r1
 8007760:	d02f      	beq.n	80077c2 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8007762:	6041      	str	r1, [r0, #4]
 8007764:	2904      	cmp	r1, #4
 8007766:	d822      	bhi.n	80077ae <LedBlink::SetMode(ledblink::Mode)+0x52>
 8007768:	e8df f001 	tbb	[pc, r1]
 800776c:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8007770:	23ff001d 	mvnscs	r0, #29
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	2300      	movs	r3, #0
 8007778:	2201      	movs	r2, #1
 800777a:	60c3      	str	r3, [r0, #12]
 800777c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007780:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007784:	611a      	str	r2, [r3, #16]
 8007786:	6880      	ldr	r0, [r0, #8]
 8007788:	b1d8      	cbz	r0, 80077c2 <LedBlink::SetMode(ledblink::Mode)+0x66>
 800778a:	6803      	ldr	r3, [r0, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	4718      	bx	r3
 8007790:	2301      	movs	r3, #1
 8007792:	6003      	str	r3, [r0, #0]
 8007794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007798:	60c3      	str	r3, [r0, #12]
 800779a:	e7f4      	b.n	8007786 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 800779c:	2303      	movs	r3, #3
 800779e:	6003      	str	r3, [r0, #0]
 80077a0:	f240 134d 	movw	r3, #333	; 0x14d
 80077a4:	e7f8      	b.n	8007798 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80077a6:	2305      	movs	r3, #5
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	23c8      	movs	r3, #200	; 0xc8
 80077ac:	e7f4      	b.n	8007798 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2201      	movs	r2, #1
 80077b2:	6003      	str	r3, [r0, #0]
 80077b4:	60c3      	str	r3, [r0, #12]
 80077b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077ba:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80077be:	615a      	str	r2, [r3, #20]
 80077c0:	e7e1      	b.n	8007786 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80077c2:	4770      	bx	lr

080077c4 <Hardware::Hardware()>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	2500      	movs	r5, #0
 80077ca:	b090      	sub	sp, #64	; 0x40
 80077cc:	f000 f8d2 	bl	8007974 <HwClock::HwClock()>
 80077d0:	4e28      	ldr	r6, [pc, #160]	; (8007874 <Hardware::Hardware()+0xb0>)
 80077d2:	4b29      	ldr	r3, [pc, #164]	; (8007878 <Hardware::Hardware()+0xb4>)
 80077d4:	f240 6004 	movw	r0, #1540	; 0x604
 80077d8:	60e5      	str	r5, [r4, #12]
 80077da:	7425      	strb	r5, [r4, #16]
 80077dc:	601c      	str	r4, [r3, #0]
 80077de:	f000 feb9 	bl	8008554 <rcu_periph_clock_enable>
 80077e2:	2203      	movs	r2, #3
 80077e4:	2110      	movs	r1, #16
 80077e6:	4630      	mov	r0, r6
 80077e8:	2301      	movs	r3, #1
 80077ea:	f000 fe17 	bl	800841c <gpio_init>
 80077ee:	2301      	movs	r3, #1
 80077f0:	6173      	str	r3, [r6, #20]
 80077f2:	f000 fbf3 	bl	8007fdc <uart0_init>
 80077f6:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
 80077fa:	f000 fc43 	bl	8008084 <systick_config>
 80077fe:	f001 fd43 	bl	8009288 <udelay_init()>
 8007802:	f001 fd3f 	bl	8009284 <micros_init()>
 8007806:	f240 7004 	movw	r0, #1796	; 0x704
 800780a:	f000 fea3 	bl	8008554 <rcu_periph_clock_enable>
 800780e:	4630      	mov	r0, r6
 8007810:	f001 f810 	bl	8008834 <timer_deinit>
 8007814:	236b      	movs	r3, #107	; 0x6b
 8007816:	f8ad 300c 	strh.w	r3, [sp, #12]
 800781a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800781e:	a903      	add	r1, sp, #12
 8007820:	4630      	mov	r0, r6
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	f001 f868 	bl	80088f8 <timer_init>
 8007828:	4630      	mov	r0, r6
 800782a:	f001 f8bd 	bl	80089a8 <timer_enable>
 800782e:	f001 f9cb 	bl	8008bc8 <gd32_adc_init()>
 8007832:	2308      	movs	r3, #8
 8007834:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
 8007838:	237a      	movs	r3, #122	; 0x7a
 800783a:	a807      	add	r0, sp, #28
 800783c:	930c      	str	r3, [sp, #48]	; 0x30
 800783e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007842:	9507      	str	r5, [sp, #28]
 8007844:	950f      	str	r5, [sp, #60]	; 0x3c
 8007846:	f000 fb2f 	bl	8007ea8 <mktime>
 800784a:	4629      	mov	r1, r5
 800784c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8007850:	a801      	add	r0, sp, #4
 8007852:	f000 fb9f 	bl	8007f94 <settimeofday>
 8007856:	f001 fa53 	bl	8008d00 <gd32_i2c_begin()>
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f990 	bl	8007b80 <HwClock::RtcProbe()>
 8007860:	4620      	mov	r0, r4
 8007862:	f000 f893 	bl	800798c <HwClock::Print()>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f8c4 	bl	80079f4 <HwClock::HcToSys()>
 800786c:	4620      	mov	r0, r4
 800786e:	b010      	add	sp, #64	; 0x40
 8007870:	bd70      	pop	{r4, r5, r6, pc}
 8007872:	bf00      	nop
 8007874:	40011000 	andmi	r1, r1, r0
 8007878:	200017e0 	andcs	r1, r0, r0, ror #15

0800787c <Hardware::SetTime(tm const*)>:
 800787c:	b500      	push	{lr}
 800787e:	680b      	ldr	r3, [r1, #0]
 8007880:	b08b      	sub	sp, #44	; 0x2c
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	684b      	ldr	r3, [r1, #4]
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	688b      	ldr	r3, [r1, #8]
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	68cb      	ldr	r3, [r1, #12]
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	690b      	ldr	r3, [r1, #16]
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	694b      	ldr	r3, [r1, #20]
 8007896:	a901      	add	r1, sp, #4
 8007898:	9306      	str	r3, [sp, #24]
 800789a:	f000 f90d 	bl	8007ab8 <HwClock::Set(rtc_time const*)>
 800789e:	2001      	movs	r0, #1
 80078a0:	b00b      	add	sp, #44	; 0x2c
 80078a2:	f85d fb04 	ldr.w	pc, [sp], #4

080078a6 <Hardware::GetTime(tm*)>:
 80078a6:	b513      	push	{r0, r1, r4, lr}
 80078a8:	2000      	movs	r0, #0
 80078aa:	460c      	mov	r4, r1
 80078ac:	f000 fb8a 	bl	8007fc4 <time>
 80078b0:	9001      	str	r0, [sp, #4]
 80078b2:	a801      	add	r0, sp, #4
 80078b4:	f000 fab4 	bl	8007e20 <localtime>
 80078b8:	6943      	ldr	r3, [r0, #20]
 80078ba:	6163      	str	r3, [r4, #20]
 80078bc:	6903      	ldr	r3, [r0, #16]
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	68c3      	ldr	r3, [r0, #12]
 80078c2:	60e3      	str	r3, [r4, #12]
 80078c4:	6883      	ldr	r3, [r0, #8]
 80078c6:	60a3      	str	r3, [r4, #8]
 80078c8:	6843      	ldr	r3, [r0, #4]
 80078ca:	6063      	str	r3, [r4, #4]
 80078cc:	6803      	ldr	r3, [r0, #0]
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	b002      	add	sp, #8
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <Hardware::Reboot()>:
 80078d4:	b508      	push	{r3, lr}
 80078d6:	68c3      	ldr	r3, [r0, #12]
 80078d8:	4604      	mov	r4, r0
 80078da:	b153      	cbz	r3, 80078f2 <Hardware::Reboot()+0x1e>
 80078dc:	2300      	movs	r3, #0
 80078de:	2104      	movs	r1, #4
 80078e0:	7403      	strb	r3, [r0, #16]
 80078e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80078e6:	f000 fd6f 	bl	80083c8 <fwdgt_config>
 80078ea:	68e0      	ldr	r0, [r4, #12]
 80078ec:	6803      	ldr	r3, [r0, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	4798      	blx	r3
 80078f2:	2102      	movs	r1, #2
 80078f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80078f8:	f000 fd66 	bl	80083c8 <fwdgt_config>
 80078fc:	2801      	cmp	r0, #1
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	7423      	strb	r3, [r4, #16]
 8007906:	d101      	bne.n	800790c <Hardware::Reboot()+0x38>
 8007908:	f000 fd4e 	bl	80083a8 <fwdgt_enable>
 800790c:	2208      	movs	r2, #8
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <Hardware::Reboot()+0x70>)
 8007910:	2501      	movs	r5, #1
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	480c      	ldr	r0, [pc, #48]	; (8007948 <Hardware::Reboot()+0x74>)
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	227d      	movs	r2, #125	; 0x7d
 800791a:	490c      	ldr	r1, [pc, #48]	; (800794c <Hardware::Reboot()+0x78>)
 800791c:	60da      	str	r2, [r3, #12]
 800791e:	68dc      	ldr	r4, [r3, #12]
 8007920:	b904      	cbnz	r4, 8007924 <Hardware::Reboot()+0x50>
 8007922:	e7fe      	b.n	8007922 <Hardware::Reboot()+0x4e>
 8007924:	6802      	ldr	r2, [r0, #0]
 8007926:	695e      	ldr	r6, [r3, #20]
 8007928:	1b92      	subs	r2, r2, r6
 800792a:	4294      	cmp	r4, r2
 800792c:	d8f8      	bhi.n	8007920 <Hardware::Reboot()+0x4c>
 800792e:	6802      	ldr	r2, [r0, #0]
 8007930:	615a      	str	r2, [r3, #20]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	2a01      	cmp	r2, #1
 8007936:	f082 0401 	eor.w	r4, r2, #1
 800793a:	611c      	str	r4, [r3, #16]
 800793c:	bf14      	ite	ne
 800793e:	610d      	strne	r5, [r1, #16]
 8007940:	614a      	streq	r2, [r1, #20]
 8007942:	e7ec      	b.n	800791e <Hardware::Reboot()+0x4a>
 8007944:	200017dc 	ldrdcs	r1, [r0], -ip
 8007948:	2000181c 	andcs	r1, r0, ip, lsl r8
 800794c:	40011000 	andmi	r1, r1, r0

08007950 <Hardware::WatchdogInit()>:
 8007950:	b510      	push	{r4, lr}
 8007952:	2102      	movs	r1, #2
 8007954:	4604      	mov	r4, r0
 8007956:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800795a:	f000 fd35 	bl	80083c8 <fwdgt_config>
 800795e:	2801      	cmp	r0, #1
 8007960:	bf0c      	ite	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	2300      	movne	r3, #0
 8007966:	7423      	strb	r3, [r4, #16]
 8007968:	d103      	bne.n	8007972 <Hardware::WatchdogInit()+0x22>
 800796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796e:	f000 bd1b 	b.w	80083a8 <fwdgt_enable>
 8007972:	bd10      	pop	{r4, pc}

08007974 <HwClock::HwClock()>:
 8007974:	2200      	movs	r2, #0
 8007976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800797a:	e9c0 2200 	strd	r2, r2, [r0]
 800797e:	7282      	strb	r2, [r0, #10]
 8007980:	4a01      	ldr	r2, [pc, #4]	; (8007988 <HwClock::HwClock()+0x14>)
 8007982:	8101      	strh	r1, [r0, #8]
 8007984:	6010      	str	r0, [r2, #0]
 8007986:	4770      	bx	lr
 8007988:	200017e4 	andcs	r1, r0, r4, ror #15

0800798c <HwClock::Print()>:
 800798c:	b510      	push	{r4, lr}
 800798e:	7a83      	ldrb	r3, [r0, #10]
 8007990:	4604      	mov	r4, r0
 8007992:	b08e      	sub	sp, #56	; 0x38
 8007994:	b92b      	cbnz	r3, 80079a2 <HwClock::Print()+0x16>
 8007996:	4812      	ldr	r0, [pc, #72]	; (80079e0 <HwClock::Print()+0x54>)
 8007998:	b00e      	add	sp, #56	; 0x38
 800799a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800799e:	f7fa bd75 	b.w	800248c <puts>
 80079a2:	7a43      	ldrb	r3, [r0, #9]
 80079a4:	480f      	ldr	r0, [pc, #60]	; (80079e4 <HwClock::Print()+0x58>)
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	bf96      	itet	ls
 80079aa:	4a0f      	ldrls	r2, [pc, #60]	; (80079e8 <HwClock::Print()+0x5c>)
 80079ac:	490f      	ldrhi	r1, [pc, #60]	; (80079ec <HwClock::Print()+0x60>)
 80079ae:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 80079b2:	f7fa fd33 	bl	800241c <printf>
 80079b6:	a905      	add	r1, sp, #20
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f913 	bl	8007be4 <HwClock::RtcGet(rtc_time*)>
 80079be:	9b05      	ldr	r3, [sp, #20]
 80079c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	4808      	ldr	r0, [pc, #32]	; (80079f0 <HwClock::Print()+0x64>)
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80079d6:	3201      	adds	r2, #1
 80079d8:	f7fa fd20 	bl	800241c <printf>
 80079dc:	b00e      	add	sp, #56	; 0x38
 80079de:	bd10      	pop	{r4, pc}
 80079e0:	0800ac5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, pc}
 80079e4:	0800973a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, ip, pc}
 80079e8:	0800acb4 	stmdaeq	r0, {r2, r4, r5, r7, sl, fp, sp, pc}
 80079ec:	0800a5fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp, pc}
 80079f0:	0800ac6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, sp, pc}

080079f4 <HwClock::HcToSys()>:
 80079f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079f8:	7a83      	ldrb	r3, [r0, #10]
 80079fa:	4604      	mov	r4, r0
 80079fc:	b0a3      	sub	sp, #140	; 0x8c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d050      	beq.n	8007aa4 <HwClock::HcToSys()+0xb0>
 8007a02:	4e2b      	ldr	r6, [pc, #172]	; (8007ab0 <HwClock::HcToSys()+0xbc>)
 8007a04:	6833      	ldr	r3, [r6, #0]
 8007a06:	7c1d      	ldrb	r5, [r3, #16]
 8007a08:	b135      	cbz	r5, 8007a18 <HwClock::HcToSys()+0x24>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2104      	movs	r1, #4
 8007a0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007a12:	741a      	strb	r2, [r3, #16]
 8007a14:	f000 fcd8 	bl	80083c8 <fwdgt_config>
 8007a18:	f04f 083c 	mov.w	r8, #60	; 0x3c
 8007a1c:	a907      	add	r1, sp, #28
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 f8e0 	bl	8007be4 <HwClock::RtcGet(rtc_time*)>
 8007a24:	2100      	movs	r1, #0
 8007a26:	a801      	add	r0, sp, #4
 8007a28:	f000 fa8a 	bl	8007f40 <gettimeofday>
 8007a2c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007a30:	fb08 2903 	mla	r9, r8, r3, r2
 8007a34:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	a819      	add	r0, sp, #100	; 0x64
 8007a3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a40:	931c      	str	r3, [sp, #112]	; 0x70
 8007a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a44:	931d      	str	r3, [sp, #116]	; 0x74
 8007a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a48:	931e      	str	r3, [sp, #120]	; 0x78
 8007a4a:	f000 fa2d 	bl	8007ea8 <mktime>
 8007a4e:	4607      	mov	r7, r0
 8007a50:	4620      	mov	r0, r4
 8007a52:	a910      	add	r1, sp, #64	; 0x40
 8007a54:	f000 f8c6 	bl	8007be4 <HwClock::RtcGet(rtc_time*)>
 8007a58:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007a5c:	fb08 3302 	mla	r3, r8, r2, r3
 8007a60:	4599      	cmp	r9, r3
 8007a62:	d0f5      	beq.n	8007a50 <HwClock::HcToSys()+0x5c>
 8007a64:	2100      	movs	r1, #0
 8007a66:	a803      	add	r0, sp, #12
 8007a68:	f000 fa6a 	bl	8007f40 <gettimeofday>
 8007a6c:	9a03      	ldr	r2, [sp, #12]
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	9705      	str	r7, [sp, #20]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	9a02      	ldr	r2, [sp, #8]
 8007a78:	d106      	bne.n	8007a88 <HwClock::HcToSys()+0x94>
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 8007a80:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007a84:	9306      	str	r3, [sp, #24]
 8007a86:	e002      	b.n	8007a8e <HwClock::HcToSys()+0x9a>
 8007a88:	1a99      	subs	r1, r3, r2
 8007a8a:	d40e      	bmi.n	8007aaa <HwClock::HcToSys()+0xb6>
 8007a8c:	9106      	str	r1, [sp, #24]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	a805      	add	r0, sp, #20
 8007a92:	f000 fa7f 	bl	8007f94 <settimeofday>
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <HwClock::HcToSys()+0xc0>)
 8007a98:	6830      	ldr	r0, [r6, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	b10d      	cbz	r5, 8007aa4 <HwClock::HcToSys()+0xb0>
 8007aa0:	f7ff ff56 	bl	8007950 <Hardware::WatchdogInit()>
 8007aa4:	b023      	add	sp, #140	; 0x8c
 8007aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	e7ea      	b.n	8007a84 <HwClock::HcToSys()+0x90>
 8007aae:	bf00      	nop
 8007ab0:	200017e0 	andcs	r1, r0, r0, ror #15
 8007ab4:	2000181c 	andcs	r1, r0, ip, lsl r8

08007ab8 <HwClock::Set(rtc_time const*)>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	7a86      	ldrb	r6, [r0, #10]
 8007abc:	4605      	mov	r5, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	b090      	sub	sp, #64	; 0x40
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d02b      	beq.n	8007b1e <HwClock::Set(rtc_time const*)+0x66>
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	a801      	add	r0, sp, #4
 8007aca:	f000 fa39 	bl	8007f40 <gettimeofday>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 f87f 	bl	8007bd4 <HwClock::RtcSet(rtc_time const*)>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	a807      	add	r0, sp, #28
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	68a3      	ldr	r3, [r4, #8]
 8007ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae4:	68e3      	ldr	r3, [r4, #12]
 8007ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aec:	6963      	ldr	r3, [r4, #20]
 8007aee:	2400      	movs	r4, #0
 8007af0:	930c      	str	r3, [sp, #48]	; 0x30
 8007af2:	940f      	str	r4, [sp, #60]	; 0x3c
 8007af4:	f000 f9d8 	bl	8007ea8 <mktime>
 8007af8:	4621      	mov	r1, r4
 8007afa:	9003      	str	r0, [sp, #12]
 8007afc:	a805      	add	r0, sp, #20
 8007afe:	f000 fa1f 	bl	8007f40 <gettimeofday>
 8007b02:	9906      	ldr	r1, [sp, #24]
 8007b04:	9b02      	ldr	r3, [sp, #8]
 8007b06:	a803      	add	r0, sp, #12
 8007b08:	1aca      	subs	r2, r1, r3
 8007b0a:	bf42      	ittt	mi
 8007b0c:	1a5b      	submi	r3, r3, r1
 8007b0e:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 8007b12:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8007b16:	2100      	movs	r1, #0
 8007b18:	9204      	str	r2, [sp, #16]
 8007b1a:	f000 fa3b 	bl	8007f94 <settimeofday>
 8007b1e:	4630      	mov	r0, r6
 8007b20:	b010      	add	sp, #64	; 0x40
 8007b22:	bd70      	pop	{r4, r5, r6, pc}

08007b24 <rtc_configuration()>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	f240 701b 	movw	r0, #1819	; 0x71b
 8007b2a:	f000 fd13 	bl	8008554 <rcu_periph_clock_enable>
 8007b2e:	f240 701c 	movw	r0, #1820	; 0x71c
 8007b32:	f000 fd0f 	bl	8008554 <rcu_periph_clock_enable>
 8007b36:	f000 fd05 	bl	8008544 <pmu_backup_write_enable>
 8007b3a:	f000 fb35 	bl	80081a8 <bkp_deinit>
 8007b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b42:	f000 fdb9 	bl	80086b8 <rcu_osci_on>
 8007b46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b4a:	f000 fd6b 	bl	8008624 <rcu_osci_stab_wait>
 8007b4e:	2801      	cmp	r0, #1
 8007b50:	4604      	mov	r4, r0
 8007b52:	d113      	bne.n	8007b7c <rtc_configuration()+0x58>
 8007b54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b58:	f000 fd4c 	bl	80085f4 <rcu_rtc_clock_config>
 8007b5c:	f640 000f 	movw	r0, #2063	; 0x80f
 8007b60:	f000 fcf8 	bl	8008554 <rcu_periph_clock_enable>
 8007b64:	f000 fe4e 	bl	8008804 <rtc_register_sync_wait>
 8007b68:	f000 fe44 	bl	80087f4 <rtc_lwoff_wait>
 8007b6c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8007b70:	f000 fe2e 	bl	80087d0 <rtc_prescaler_set>
 8007b74:	f000 fe3e 	bl	80087f4 <rtc_lwoff_wait>
 8007b78:	4620      	mov	r0, r4
 8007b7a:	bd10      	pop	{r4, pc}
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7fc      	b.n	8007b7a <rtc_configuration()+0x56>

08007b80 <HwClock::RtcProbe()>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	2001      	movs	r0, #1
 8007b86:	f000 fb2d 	bl	80081e4 <bkp_data_read>
 8007b8a:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 8007b8e:	42a8      	cmp	r0, r5
 8007b90:	d019      	beq.n	8007bc6 <HwClock::RtcProbe()+0x46>
 8007b92:	f7ff ffc7 	bl	8007b24 <rtc_configuration()>
 8007b96:	b908      	cbnz	r0, 8007b9c <HwClock::RtcProbe()+0x1c>
 8007b98:	72a0      	strb	r0, [r4, #10]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	f000 fe2a 	bl	80087f4 <rtc_lwoff_wait>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f000 fa0f 	bl	8007fc4 <time>
 8007ba6:	f000 fe03 	bl	80087b0 <rtc_counter_set>
 8007baa:	f000 fe23 	bl	80087f4 <rtc_lwoff_wait>
 8007bae:	4629      	mov	r1, r5
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f000 fb01 	bl	80081b8 <bkp_data_write>
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	7263      	strb	r3, [r4, #9]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	72a3      	strb	r3, [r4, #10]
 8007bbe:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <HwClock::RtcProbe()+0x50>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6063      	str	r3, [r4, #4]
 8007bc4:	e7e9      	b.n	8007b9a <HwClock::RtcProbe()+0x1a>
 8007bc6:	f000 fe1d 	bl	8008804 <rtc_register_sync_wait>
 8007bca:	f000 fe13 	bl	80087f4 <rtc_lwoff_wait>
 8007bce:	e7f2      	b.n	8007bb6 <HwClock::RtcProbe()+0x36>
 8007bd0:	2000181c 	andcs	r1, r0, ip, lsl r8

08007bd4 <HwClock::RtcSet(rtc_time const*)>:
 8007bd4:	b508      	push	{r3, lr}
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	f000 f966 	bl	8007ea8 <mktime>
 8007bdc:	f000 fde8 	bl	80087b0 <rtc_counter_set>
 8007be0:	2001      	movs	r0, #1
 8007be2:	bd08      	pop	{r3, pc}

08007be4 <HwClock::RtcGet(rtc_time*)>:
 8007be4:	b513      	push	{r0, r1, r4, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f000 fe1a 	bl	8008820 <rtc_counter_get>
 8007bec:	9001      	str	r0, [sp, #4]
 8007bee:	a801      	add	r0, sp, #4
 8007bf0:	f000 f916 	bl	8007e20 <localtime>
 8007bf4:	1e61      	subs	r1, r4, #1
 8007bf6:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8007bfa:	4290      	cmp	r0, r2
 8007bfc:	d004      	beq.n	8007c08 <HwClock::RtcGet(rtc_time*)+0x24>
 8007bfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007c02:	f801 3f01 	strb.w	r3, [r1, #1]!
 8007c06:	e7f8      	b.n	8007bfa <HwClock::RtcGet(rtc_time*)+0x16>
 8007c08:	2001      	movs	r0, #1
 8007c0a:	b002      	add	sp, #8
 8007c0c:	bd10      	pop	{r4, pc}

08007c0e <operator delete(void*)>:
 8007c0e:	f000 b873 	b.w	8007cf8 <free>

08007c12 <operator delete[](void*)>:
 8007c12:	f000 b871 	b.w	8007cf8 <free>

08007c16 <operator new(unsigned int)>:
 8007c16:	f000 b825 	b.w	8007c64 <malloc>

08007c1a <operator new[](unsigned int)>:
 8007c1a:	f000 b823 	b.w	8007c64 <malloc>
	...

08007c20 <__cxa_pure_virtual>:
 8007c20:	2121      	movs	r1, #33	; 0x21
 8007c22:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <__cxa_pure_virtual+0xc>)
 8007c24:	4a02      	ldr	r2, [pc, #8]	; (8007c30 <__cxa_pure_virtual+0x10>)
 8007c26:	4803      	ldr	r0, [pc, #12]	; (8007c34 <__cxa_pure_virtual+0x14>)
 8007c28:	f000 b806 	b.w	8007c38 <__assert_func>
 8007c2c:	0800acc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp, pc}
 8007c30:	0800acc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, sp, pc}
 8007c34:	0800acd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, pc}

08007c38 <__assert_func>:
 8007c38:	460c      	mov	r4, r1
 8007c3a:	b507      	push	{r0, r1, r2, lr}
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	b142      	cbz	r2, 8007c52 <__assert_func+0x1a>
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <__assert_func+0x20>)
 8007c42:	e9cd 3200 	strd	r3, r2, [sp]
 8007c46:	4602      	mov	r2, r0
 8007c48:	4623      	mov	r3, r4
 8007c4a:	4804      	ldr	r0, [pc, #16]	; (8007c5c <__assert_func+0x24>)
 8007c4c:	f7fa fbe6 	bl	800241c <printf>
 8007c50:	e7fe      	b.n	8007c50 <__assert_func+0x18>
 8007c52:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <__assert_func+0x28>)
 8007c54:	461a      	mov	r2, r3
 8007c56:	e7f4      	b.n	8007c42 <__assert_func+0xa>
 8007c58:	0800acea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, sp, pc}
 8007c5c:	0800acf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, sl, fp, sp, pc}
 8007c60:	0800a91e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp, sp, pc}

08007c64 <malloc>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	4601      	mov	r1, r0
 8007c6a:	481c      	ldr	r0, [pc, #112]	; (8007cdc <malloc+0x78>)
 8007c6c:	f7fa fbd6 	bl	800241c <printf>
 8007c70:	b17c      	cbz	r4, 8007c92 <malloc+0x2e>
 8007c72:	4b1b      	ldr	r3, [pc, #108]	; (8007ce0 <malloc+0x7c>)
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	b978      	cbnz	r0, 8007c98 <malloc+0x34>
 8007c78:	4a1a      	ldr	r2, [pc, #104]	; (8007ce4 <malloc+0x80>)
 8007c7a:	f104 031b 	add.w	r3, r4, #27
 8007c7e:	6811      	ldr	r1, [r2, #0]
 8007c80:	4819      	ldr	r0, [pc, #100]	; (8007ce8 <malloc+0x84>)
 8007c82:	f023 030f 	bic.w	r3, r3, #15
 8007c86:	440b      	add	r3, r1
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	d921      	bls.n	8007cd0 <malloc+0x6c>
 8007c8c:	4817      	ldr	r0, [pc, #92]	; (8007cec <malloc+0x88>)
 8007c8e:	f7fa fbc5 	bl	800241c <printf>
 8007c92:	2500      	movs	r5, #0
 8007c94:	4628      	mov	r0, r5
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	4284      	cmp	r4, r0
 8007c9a:	d80a      	bhi.n	8007cb2 <malloc+0x4e>
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	6899      	ldr	r1, [r3, #8]
 8007ca0:	3201      	adds	r2, #1
 8007ca2:	428a      	cmp	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	d900      	bls.n	8007caa <malloc+0x46>
 8007ca8:	609a      	str	r2, [r3, #8]
 8007caa:	68d9      	ldr	r1, [r3, #12]
 8007cac:	b919      	cbnz	r1, 8007cb6 <malloc+0x52>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	e7e2      	b.n	8007c78 <malloc+0x14>
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	e7de      	b.n	8007c74 <malloc+0x10>
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	688a      	ldr	r2, [r1, #8]
 8007cba:	60da      	str	r2, [r3, #12]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f101 050c 	add.w	r5, r1, #12
 8007cc2:	608b      	str	r3, [r1, #8]
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <malloc+0x8c>)
 8007cca:	f7fa fba7 	bl	800241c <printf>
 8007cce:	e7e1      	b.n	8007c94 <malloc+0x30>
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <malloc+0x90>)
 8007cd4:	e9c1 3400 	strd	r3, r4, [r1]
 8007cd8:	e7f0      	b.n	8007cbc <malloc+0x58>
 8007cda:	bf00      	nop
 8007cdc:	0800ad26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp, pc}
 8007ce0:	20000010 	andcs	r0, r0, r0, lsl r0
 8007ce4:	2000000c 	andcs	r0, r0, ip
 8007ce8:	2000b000 	andcs	fp, r0, r0
 8007cec:	0800ad32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, sp, pc}
 8007cf0:	0800ad4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, fp, sp, pc}
 8007cf4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08007cf8 <free>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	b1c8      	cbz	r0, 8007d32 <free+0x3a>
 8007cfe:	f1a0 050c 	sub.w	r5, r0, #12
 8007d02:	4602      	mov	r2, r0
 8007d04:	4629      	mov	r1, r5
 8007d06:	480c      	ldr	r0, [pc, #48]	; (8007d38 <free+0x40>)
 8007d08:	f7fa fb88 	bl	800241c <printf>
 8007d0c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <free+0x44>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d10d      	bne.n	8007d32 <free+0x3a>
 8007d16:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <free+0x48>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	b152      	cbz	r2, 8007d32 <free+0x3a>
 8007d1c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007d20:	4291      	cmp	r1, r2
 8007d22:	d107      	bne.n	8007d34 <free+0x3c>
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	f844 2c04 	str.w	r2, [r4, #-4]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	60dd      	str	r5, [r3, #12]
 8007d2e:	3a01      	subs	r2, #1
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	3310      	adds	r3, #16
 8007d36:	e7ef      	b.n	8007d18 <free+0x20>
 8007d38:	0800ad79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp, sp, pc}
 8007d3c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8007d40:	20000010 	andcs	r0, r0, r0, lsl r0

08007d44 <memcpy>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	1e43      	subs	r3, r0, #1
 8007d48:	440a      	add	r2, r1
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d100      	bne.n	8007d50 <memcpy+0xc>
 8007d4e:	bd10      	pop	{r4, pc}
 8007d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d58:	e7f7      	b.n	8007d4a <memcpy+0x6>

08007d5a <memmove>:
 8007d5a:	4288      	cmp	r0, r1
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	eb01 0302 	add.w	r3, r1, r2
 8007d62:	d208      	bcs.n	8007d76 <memmove+0x1c>
 8007d64:	1e42      	subs	r2, r0, #1
 8007d66:	4299      	cmp	r1, r3
 8007d68:	d100      	bne.n	8007d6c <memmove+0x12>
 8007d6a:	bd10      	pop	{r4, pc}
 8007d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d74:	e7f7      	b.n	8007d66 <memmove+0xc>
 8007d76:	4601      	mov	r1, r0
 8007d78:	4402      	add	r2, r0
 8007d7a:	428a      	cmp	r2, r1
 8007d7c:	d0f5      	beq.n	8007d6a <memmove+0x10>
 8007d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d86:	e7f8      	b.n	8007d7a <memmove+0x20>

08007d88 <memset>:
 8007d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8a:	b1e2      	cbz	r2, 8007dc6 <memset+0x3e>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	b2c9      	uxtb	r1, r1
 8007d90:	075c      	lsls	r4, r3, #29
 8007d92:	d114      	bne.n	8007dbe <memset+0x36>
 8007d94:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8007d98:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8007d9c:	463d      	mov	r5, r7
 8007d9e:	f022 0407 	bic.w	r4, r2, #7
 8007da2:	08d6      	lsrs	r6, r2, #3
 8007da4:	441c      	add	r4, r3
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	d10e      	bne.n	8007dc8 <memset+0x40>
 8007daa:	f06f 0307 	mvn.w	r3, #7
 8007dae:	fb03 2206 	mla	r2, r3, r6, r2
 8007db2:	4422      	add	r2, r4
 8007db4:	4294      	cmp	r4, r2
 8007db6:	d006      	beq.n	8007dc6 <memset+0x3e>
 8007db8:	f804 1b01 	strb.w	r1, [r4], #1
 8007dbc:	e7fa      	b.n	8007db4 <memset+0x2c>
 8007dbe:	3a01      	subs	r2, #1
 8007dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc4:	d1e4      	bne.n	8007d90 <memset+0x8>
 8007dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc8:	f843 7b08 	str.w	r7, [r3], #8
 8007dcc:	f843 5c04 	str.w	r5, [r3, #-4]
 8007dd0:	e7e9      	b.n	8007da6 <memset+0x1e>

08007dd2 <isleapyear>:
 8007dd2:	2264      	movs	r2, #100	; 0x64
 8007dd4:	fb90 f3f2 	sdiv	r3, r0, r2
 8007dd8:	fb02 0313 	mls	r3, r2, r3, r0
 8007ddc:	b94b      	cbnz	r3, 8007df2 <isleapyear+0x20>
 8007dde:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007de2:	fb90 f2f3 	sdiv	r2, r0, r3
 8007de6:	fb03 0012 	mls	r0, r3, r2, r0
 8007dea:	fab0 f080 	clz	r0, r0
 8007dee:	0940      	lsrs	r0, r0, #5
 8007df0:	4770      	bx	lr
 8007df2:	f010 0f03 	tst.w	r0, #3
 8007df6:	bf0c      	ite	eq
 8007df8:	2001      	moveq	r0, #1
 8007dfa:	2000      	movne	r0, #0
 8007dfc:	4770      	bx	lr
	...

08007e00 <getdaysofmonth>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4604      	mov	r4, r0
 8007e04:	2c01      	cmp	r4, #1
 8007e06:	4608      	mov	r0, r1
 8007e08:	d102      	bne.n	8007e10 <getdaysofmonth+0x10>
 8007e0a:	f7ff ffe2 	bl	8007dd2 <isleapyear>
 8007e0e:	b918      	cbnz	r0, 8007e18 <getdaysofmonth+0x18>
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <getdaysofmonth+0x1c>)
 8007e12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007e16:	bd10      	pop	{r4, pc}
 8007e18:	201d      	movs	r0, #29
 8007e1a:	e7fc      	b.n	8007e16 <getdaysofmonth+0x16>
 8007e1c:	0800ada0 	stmdaeq	r0, {r5, r7, r8, sl, fp, sp, pc}

08007e20 <localtime>:
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d03c      	beq.n	8007ea0 <localtime+0x80>
 8007e26:	213c      	movs	r1, #60	; 0x3c
 8007e28:	6803      	ldr	r3, [r0, #0]
 8007e2a:	4d1e      	ldr	r5, [pc, #120]	; (8007ea4 <localtime+0x84>)
 8007e2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8007e30:	fb01 3312 	mls	r3, r1, r2, r3
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	fb92 f3f1 	sdiv	r3, r2, r1
 8007e3a:	fb01 2213 	mls	r2, r1, r3, r2
 8007e3e:	606a      	str	r2, [r5, #4]
 8007e40:	2218      	movs	r2, #24
 8007e42:	fb93 f4f2 	sdiv	r4, r3, r2
 8007e46:	fb02 3314 	mls	r3, r2, r4, r3
 8007e4a:	60ab      	str	r3, [r5, #8]
 8007e4c:	2307      	movs	r3, #7
 8007e4e:	1d22      	adds	r2, r4, #4
 8007e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8007e54:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8007e58:	f240 166d 	movw	r6, #365	; 0x16d
 8007e5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	61ab      	str	r3, [r5, #24]
 8007e64:	4608      	mov	r0, r1
 8007e66:	f7ff ffb4 	bl	8007dd2 <isleapyear>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007e72:	4633      	moveq	r3, r6
 8007e74:	429c      	cmp	r4, r3
 8007e76:	db02      	blt.n	8007e7e <localtime+0x5e>
 8007e78:	1ae4      	subs	r4, r4, r3
 8007e7a:	3101      	adds	r1, #1
 8007e7c:	e7f2      	b.n	8007e64 <localtime+0x44>
 8007e7e:	2600      	movs	r6, #0
 8007e80:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 8007e84:	616b      	str	r3, [r5, #20]
 8007e86:	61ec      	str	r4, [r5, #28]
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ffb9 	bl	8007e00 <getdaysofmonth>
 8007e8e:	4284      	cmp	r4, r0
 8007e90:	db02      	blt.n	8007e98 <localtime+0x78>
 8007e92:	1a24      	subs	r4, r4, r0
 8007e94:	3601      	adds	r6, #1
 8007e96:	e7f7      	b.n	8007e88 <localtime+0x68>
 8007e98:	3401      	adds	r4, #1
 8007e9a:	4802      	ldr	r0, [pc, #8]	; (8007ea4 <localtime+0x84>)
 8007e9c:	612e      	str	r6, [r5, #16]
 8007e9e:	60ec      	str	r4, [r5, #12]
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	bf00      	nop
 8007ea4:	200017e8 	andcs	r1, r0, r8, ror #15

08007ea8 <mktime>:
 8007ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eac:	4604      	mov	r4, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d042      	beq.n	8007f38 <mktime+0x90>
 8007eb2:	6941      	ldr	r1, [r0, #20]
 8007eb4:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8007eb8:	2b45      	cmp	r3, #69	; 0x45
 8007eba:	d83d      	bhi.n	8007f38 <mktime+0x90>
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8007ec2:	f240 186d 	movw	r8, #365	; 0x16d
 8007ec6:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8007eca:	42af      	cmp	r7, r5
 8007ecc:	da23      	bge.n	8007f16 <mktime+0x6e>
 8007ece:	6927      	ldr	r7, [r4, #16]
 8007ed0:	2f0b      	cmp	r7, #11
 8007ed2:	d831      	bhi.n	8007f38 <mktime+0x90>
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	42af      	cmp	r7, r5
 8007ed8:	d128      	bne.n	8007f2c <mktime+0x84>
 8007eda:	68e5      	ldr	r5, [r4, #12]
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	dd2b      	ble.n	8007f38 <mktime+0x90>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ff8d 	bl	8007e00 <getdaysofmonth>
 8007ee6:	4285      	cmp	r5, r0
 8007ee8:	dc26      	bgt.n	8007f38 <mktime+0x90>
 8007eea:	2318      	movs	r3, #24
 8007eec:	3d01      	subs	r5, #1
 8007eee:	4435      	add	r5, r6
 8007ef0:	435d      	muls	r5, r3
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	2b17      	cmp	r3, #23
 8007ef6:	d81f      	bhi.n	8007f38 <mktime+0x90>
 8007ef8:	203c      	movs	r0, #60	; 0x3c
 8007efa:	442b      	add	r3, r5
 8007efc:	fb00 f503 	mul.w	r5, r0, r3
 8007f00:	6863      	ldr	r3, [r4, #4]
 8007f02:	2b3b      	cmp	r3, #59	; 0x3b
 8007f04:	d818      	bhi.n	8007f38 <mktime+0x90>
 8007f06:	442b      	add	r3, r5
 8007f08:	4343      	muls	r3, r0
 8007f0a:	6820      	ldr	r0, [r4, #0]
 8007f0c:	283b      	cmp	r0, #59	; 0x3b
 8007f0e:	d813      	bhi.n	8007f38 <mktime+0x90>
 8007f10:	4418      	add	r0, r3
 8007f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f16:	4628      	mov	r0, r5
 8007f18:	f7ff ff5b 	bl	8007dd2 <isleapyear>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	bf14      	ite	ne
 8007f20:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8007f24:	4643      	moveq	r3, r8
 8007f26:	3501      	adds	r5, #1
 8007f28:	441e      	add	r6, r3
 8007f2a:	e7ce      	b.n	8007eca <mktime+0x22>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f7ff ff67 	bl	8007e00 <getdaysofmonth>
 8007f32:	3501      	adds	r5, #1
 8007f34:	4406      	add	r6, r0
 8007f36:	e7ce      	b.n	8007ed6 <mktime+0x2e>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f3c:	e7e9      	b.n	8007f12 <mktime+0x6a>
	...

08007f40 <gettimeofday>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4b10      	ldr	r3, [pc, #64]	; (8007f84 <gettimeofday+0x44>)
 8007f44:	4a10      	ldr	r2, [pc, #64]	; (8007f88 <gettimeofday+0x48>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6814      	ldr	r4, [r2, #0]
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f50:	429c      	cmp	r4, r3
 8007f52:	bf2c      	ite	cs
 8007f54:	1ae4      	subcs	r4, r4, r3
 8007f56:	1b1c      	subcc	r4, r3, r4
 8007f58:	4354      	muls	r4, r2
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <gettimeofday+0x4c>)
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8007f62:	18a4      	adds	r4, r4, r2
 8007f64:	f141 0100 	adc.w	r1, r1, #0
 8007f68:	e9c3 4100 	strd	r4, r1, [r3]
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <gettimeofday+0x50>)
 8007f72:	f7f8 fad7 	bl	8000524 <__aeabi_uldivmod>
 8007f76:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <gettimeofday+0x50>)
 8007f78:	6028      	str	r0, [r5, #0]
 8007f7a:	fb03 4410 	mls	r4, r3, r0, r4
 8007f7e:	2000      	movs	r0, #0
 8007f80:	606c      	str	r4, [r5, #4]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	2000181c 	andcs	r1, r0, ip, lsl r8
 8007f88:	20001818 	andcs	r1, r0, r8, lsl r8
 8007f8c:	20001810 	andcs	r1, r0, r0, lsl r8
 8007f90:	000f4240 	andeq	r4, pc, r0, asr #4

08007f94 <settimeofday>:
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <settimeofday+0x20>)
 8007f96:	b510      	push	{r4, lr}
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <settimeofday+0x24>)
 8007f9c:	6804      	ldr	r4, [r0, #0]
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	6843      	ldr	r3, [r0, #4]
 8007fa2:	4806      	ldr	r0, [pc, #24]	; (8007fbc <settimeofday+0x28>)
 8007fa4:	17da      	asrs	r2, r3, #31
 8007fa6:	fbc4 3200 	smlal	r3, r2, r4, r0
 8007faa:	4905      	ldr	r1, [pc, #20]	; (8007fc0 <settimeofday+0x2c>)
 8007fac:	2000      	movs	r0, #0
 8007fae:	e9c1 3200 	strd	r3, r2, [r1]
 8007fb2:	bd10      	pop	{r4, pc}
 8007fb4:	2000181c 	andcs	r1, r0, ip, lsl r8
 8007fb8:	20001818 	andcs	r1, r0, r8, lsl r8
 8007fbc:	000f4240 	andeq	r4, pc, r0, asr #4
 8007fc0:	20001810 	andcs	r1, r0, r0, lsl r8

08007fc4 <time>:
 8007fc4:	b513      	push	{r0, r1, r4, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4668      	mov	r0, sp
 8007fcc:	f7ff ffb8 	bl	8007f40 <gettimeofday>
 8007fd0:	9800      	ldr	r0, [sp, #0]
 8007fd2:	b104      	cbz	r4, 8007fd6 <time+0x12>
 8007fd4:	6020      	str	r0, [r4, #0]
 8007fd6:	b002      	add	sp, #8
 8007fd8:	bd10      	pop	{r4, pc}
	...

08007fdc <uart0_init>:
 8007fdc:	2301      	movs	r3, #1
 8007fde:	b507      	push	{r0, r1, r2, lr}
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4803      	ldr	r0, [pc, #12]	; (8007ff8 <uart0_init+0x1c>)
 8007fec:	f001 f87c 	bl	80090e8 <gd32_uart_begin>
 8007ff0:	b003      	add	sp, #12
 8007ff2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ff6:	bf00      	nop
 8007ff8:	40013800 	andmi	r3, r1, r0, lsl #16

08007ffc <uart0_putc>:
 8007ffc:	280a      	cmp	r0, #10
 8007ffe:	b538      	push	{r3, r4, r5, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	d10a      	bne.n	800801a <uart0_putc+0x1e>
 8008004:	4d0b      	ldr	r5, [pc, #44]	; (8008034 <uart0_putc+0x38>)
 8008006:	2107      	movs	r1, #7
 8008008:	4628      	mov	r0, r5
 800800a:	f000 fdaf 	bl	8008b6c <usart_flag_get>
 800800e:	2800      	cmp	r0, #0
 8008010:	d0f9      	beq.n	8008006 <uart0_putc+0xa>
 8008012:	220d      	movs	r2, #13
 8008014:	4b08      	ldr	r3, [pc, #32]	; (8008038 <uart0_putc+0x3c>)
 8008016:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800801a:	4d06      	ldr	r5, [pc, #24]	; (8008034 <uart0_putc+0x38>)
 800801c:	2107      	movs	r1, #7
 800801e:	4628      	mov	r0, r5
 8008020:	f000 fda4 	bl	8008b6c <usart_flag_get>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0f9      	beq.n	800801c <uart0_putc+0x20>
 8008028:	4b03      	ldr	r3, [pc, #12]	; (8008038 <uart0_putc+0x3c>)
 800802a:	b2e4      	uxtb	r4, r4
 800802c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	40013800 	andmi	r3, r1, r0, lsl #16
 8008038:	40013000 	andmi	r3, r1, r0

0800803c <uart0_puts>:
 800803c:	b510      	push	{r4, lr}
 800803e:	1e44      	subs	r4, r0, #1
 8008040:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008044:	b903      	cbnz	r3, 8008048 <uart0_puts+0xc>
 8008046:	bd10      	pop	{r4, pc}
 8008048:	2b0a      	cmp	r3, #10
 800804a:	d102      	bne.n	8008052 <uart0_puts+0x16>
 800804c:	200d      	movs	r0, #13
 800804e:	f7ff ffd5 	bl	8007ffc <uart0_putc>
 8008052:	7820      	ldrb	r0, [r4, #0]
 8008054:	f7ff ffd2 	bl	8007ffc <uart0_putc>
 8008058:	e7f2      	b.n	8008040 <uart0_puts+0x4>
	...

0800805c <mac_address_get>:
 800805c:	2102      	movs	r1, #2
 800805e:	4a08      	ldr	r2, [pc, #32]	; (8008080 <mac_address_get+0x24>)
 8008060:	f8d2 37ec 	ldr.w	r3, [r2, #2028]	; 0x7ec
 8008064:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8008068:	7001      	strb	r1, [r0, #0]
 800806a:	0a19      	lsrs	r1, r3, #8
 800806c:	7041      	strb	r1, [r0, #1]
 800806e:	7102      	strb	r2, [r0, #4]
 8008070:	0c19      	lsrs	r1, r3, #16
 8008072:	0a12      	lsrs	r2, r2, #8
 8008074:	0e1b      	lsrs	r3, r3, #24
 8008076:	7081      	strb	r1, [r0, #2]
 8008078:	70c3      	strb	r3, [r0, #3]
 800807a:	7142      	strb	r2, [r0, #5]
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	1ffff000 	svcne	0x00fff000

08008084 <systick_config>:
 8008084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <systick_config+0x34>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008090:	3b01      	subs	r3, #1
 8008092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008096:	d20d      	bcs.n	80080b4 <systick_config+0x30>
 8008098:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800809c:	21f0      	movs	r1, #240	; 0xf0
 800809e:	6153      	str	r3, [r2, #20]
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <systick_config+0x38>)
 80080a2:	2007      	movs	r0, #7
 80080a4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80080a8:	2100      	movs	r1, #0
 80080aa:	6191      	str	r1, [r2, #24]
 80080ac:	6110      	str	r0, [r2, #16]
 80080ae:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80080b2:	4770      	bx	lr
 80080b4:	e7fe      	b.n	80080b4 <systick_config+0x30>
 80080b6:	bf00      	nop
 80080b8:	200000e0 	andcs	r0, r0, r0, ror #1
 80080bc:	e000ed00 	and	lr, r0, r0, lsl #26

080080c0 <SysTick_Handler>:
 80080c0:	4a02      	ldr	r2, [pc, #8]	; (80080cc <SysTick_Handler+0xc>)
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	3301      	adds	r3, #1
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	2000181c 	andcs	r1, r0, ip, lsl r8

080080d0 <SystemInit>:
 80080d0:	4b32      	ldr	r3, [pc, #200]	; (800819c <SystemInit+0xcc>)
 80080d2:	4933      	ldr	r1, [pc, #204]	; (80081a0 <SystemInit+0xd0>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	f022 0203 	bic.w	r2, r2, #3
 80080e2:	605a      	str	r2, [r3, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	400a      	ands	r2, r1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	6858      	ldr	r0, [r3, #4]
 80080ec:	4a2d      	ldr	r2, [pc, #180]	; (80081a4 <SystemInit+0xd4>)
 80080ee:	4002      	ands	r2, r0
 80080f0:	605a      	str	r2, [r3, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	400a      	ands	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	f022 620f 	bic.w	r2, r2, #149946368	; 0x8f00000
 8008106:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800810a:	605a      	str	r2, [r3, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	400a      	ands	r2, r1
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008116:	609a      	str	r2, [r3, #8]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008124:	6819      	ldr	r1, [r3, #0]
 8008126:	0389      	lsls	r1, r1, #14
 8008128:	d401      	bmi.n	800812e <SystemInit+0x5e>
 800812a:	3a01      	subs	r2, #1
 800812c:	d1fa      	bne.n	8008124 <SystemInit+0x54>
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	0390      	lsls	r0, r2, #14
 8008132:	d400      	bmi.n	8008136 <SystemInit+0x66>
 8008134:	e7fe      	b.n	8008134 <SystemInit+0x64>
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 800815c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	f042 6202 	orr.w	r2, r2, #136314880	; 0x8200000
 8008168:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	0191      	lsls	r1, r2, #6
 800817a:	d5fc      	bpl.n	8008176 <SystemInit+0xa6>
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	f022 0203 	bic.w	r2, r2, #3
 8008182:	605a      	str	r2, [r3, #4]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	f042 0202 	orr.w	r2, r2, #2
 800818a:	605a      	str	r2, [r3, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	0712      	lsls	r2, r2, #28
 8008190:	d5fc      	bpl.n	800818c <SystemInit+0xbc>
 8008192:	2100      	movs	r1, #0
 8008194:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8008198:	f000 b9ca 	b.w	8008530 <nvic_vector_table_set>
 800819c:	40021000 	andmi	r1, r2, r0
 80081a0:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80081a4:	e8ff000c 	ldm	pc!, {r2, r3}^	; <UNPREDICTABLE>

080081a8 <bkp_deinit>:
 80081a8:	b508      	push	{r3, lr}
 80081aa:	f000 f9f5 	bl	8008598 <rcu_bkp_reset_enable>
 80081ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081b2:	f000 b9f9 	b.w	80085a8 <rcu_bkp_reset_disable>
	...

080081b8 <bkp_data_write>:
 80081b8:	f1a0 030b 	sub.w	r3, r0, #11
 80081bc:	2b1f      	cmp	r3, #31
 80081be:	d804      	bhi.n	80081ca <bkp_data_write+0x12>
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <bkp_data_write+0x28>)
 80081c2:	4403      	add	r3, r0
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	8019      	strh	r1, [r3, #0]
 80081c8:	4770      	bx	lr
 80081ca:	1e43      	subs	r3, r0, #1
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	bf9f      	itttt	ls
 80081d0:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80081d4:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80081d8:	0080      	lslls	r0, r0, #2
 80081da:	8001      	strhls	r1, [r0, #0]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	10001b05 	andne	r1, r0, r5, lsl #22

080081e4 <bkp_data_read>:
 80081e4:	f1a0 030b 	sub.w	r3, r0, #11
 80081e8:	2b1f      	cmp	r3, #31
 80081ea:	d805      	bhi.n	80081f8 <bkp_data_read+0x14>
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <bkp_data_read+0x2c>)
 80081ee:	4403      	add	r3, r0
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	8818      	ldrh	r0, [r3, #0]
 80081f4:	b280      	uxth	r0, r0
 80081f6:	4770      	bx	lr
 80081f8:	1e43      	subs	r3, r0, #1
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d806      	bhi.n	800820c <bkp_data_read+0x28>
 80081fe:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008202:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008206:	0080      	lsls	r0, r0, #2
 8008208:	8800      	ldrh	r0, [r0, #0]
 800820a:	e7f3      	b.n	80081f4 <bkp_data_read+0x10>
 800820c:	2000      	movs	r0, #0
 800820e:	4770      	bx	lr
 8008210:	10001b05 	andne	r1, r0, r5, lsl #22

08008214 <dma_deinit>:
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <dma_deinit+0x34>)
 8008216:	4298      	cmp	r0, r3
 8008218:	d102      	bne.n	8008220 <dma_deinit+0xc>
 800821a:	2904      	cmp	r1, #4
 800821c:	d900      	bls.n	8008220 <dma_deinit+0xc>
 800821e:	e7fe      	b.n	800821e <dma_deinit+0xa>
 8008220:	2314      	movs	r3, #20
 8008222:	fb03 0301 	mla	r3, r3, r1, r0
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	0089      	lsls	r1, r1, #2
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	609a      	str	r2, [r3, #8]
 8008230:	2200      	movs	r2, #0
 8008232:	609a      	str	r2, [r3, #8]
 8008234:	60da      	str	r2, [r3, #12]
 8008236:	611a      	str	r2, [r3, #16]
 8008238:	615a      	str	r2, [r3, #20]
 800823a:	230f      	movs	r3, #15
 800823c:	6842      	ldr	r2, [r0, #4]
 800823e:	fa03 f101 	lsl.w	r1, r3, r1
 8008242:	4311      	orrs	r1, r2
 8008244:	6041      	str	r1, [r0, #4]
 8008246:	4770      	bx	lr
 8008248:	40020400 	andmi	r0, r2, r0, lsl #8

0800824c <dma_init>:
 800824c:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <dma_init+0x70>)
 800824e:	b510      	push	{r4, lr}
 8008250:	4298      	cmp	r0, r3
 8008252:	d102      	bne.n	800825a <dma_init+0xe>
 8008254:	2904      	cmp	r1, #4
 8008256:	d900      	bls.n	800825a <dma_init+0xe>
 8008258:	e7fe      	b.n	8008258 <dma_init+0xc>
 800825a:	2314      	movs	r3, #20
 800825c:	fb03 0101 	mla	r1, r3, r1, r0
 8008260:	6813      	ldr	r3, [r2, #0]
 8008262:	610b      	str	r3, [r1, #16]
 8008264:	6893      	ldr	r3, [r2, #8]
 8008266:	614b      	str	r3, [r1, #20]
 8008268:	8a13      	ldrh	r3, [r2, #16]
 800826a:	60cb      	str	r3, [r1, #12]
 800826c:	68d4      	ldr	r4, [r2, #12]
 800826e:	6853      	ldr	r3, [r2, #4]
 8008270:	6888      	ldr	r0, [r1, #8]
 8008272:	4323      	orrs	r3, r4
 8008274:	6954      	ldr	r4, [r2, #20]
 8008276:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800827a:	4323      	orrs	r3, r4
 800827c:	4303      	orrs	r3, r0
 800827e:	608b      	str	r3, [r1, #8]
 8008280:	7e13      	ldrb	r3, [r2, #24]
 8008282:	2b01      	cmp	r3, #1
 8008284:	688b      	ldr	r3, [r1, #8]
 8008286:	bf0c      	ite	eq
 8008288:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 800828c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008290:	608b      	str	r3, [r1, #8]
 8008292:	7e53      	ldrb	r3, [r2, #25]
 8008294:	2b01      	cmp	r3, #1
 8008296:	688b      	ldr	r3, [r1, #8]
 8008298:	bf0c      	ite	eq
 800829a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 800829e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 80082a2:	608b      	str	r3, [r1, #8]
 80082a4:	7e93      	ldrb	r3, [r2, #26]
 80082a6:	b923      	cbnz	r3, 80082b2 <dma_init+0x66>
 80082a8:	688b      	ldr	r3, [r1, #8]
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	608b      	str	r3, [r1, #8]
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	688b      	ldr	r3, [r1, #8]
 80082b4:	f043 0310 	orr.w	r3, r3, #16
 80082b8:	e7f9      	b.n	80082ae <dma_init+0x62>
 80082ba:	bf00      	nop
 80082bc:	40020400 	andmi	r0, r2, r0, lsl #8

080082c0 <dma_circulation_disable>:
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <dma_circulation_disable+0x1c>)
 80082c2:	4298      	cmp	r0, r3
 80082c4:	d102      	bne.n	80082cc <dma_circulation_disable+0xc>
 80082c6:	2904      	cmp	r1, #4
 80082c8:	d900      	bls.n	80082cc <dma_circulation_disable+0xc>
 80082ca:	e7fe      	b.n	80082ca <dma_circulation_disable+0xa>
 80082cc:	2314      	movs	r3, #20
 80082ce:	4359      	muls	r1, r3
 80082d0:	3008      	adds	r0, #8
 80082d2:	580b      	ldr	r3, [r1, r0]
 80082d4:	f023 0320 	bic.w	r3, r3, #32
 80082d8:	500b      	str	r3, [r1, r0]
 80082da:	4770      	bx	lr
 80082dc:	40020400 	andmi	r0, r2, r0, lsl #8

080082e0 <dma_memory_to_memory_disable>:
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <dma_memory_to_memory_disable+0x1c>)
 80082e2:	4298      	cmp	r0, r3
 80082e4:	d102      	bne.n	80082ec <dma_memory_to_memory_disable+0xc>
 80082e6:	2904      	cmp	r1, #4
 80082e8:	d900      	bls.n	80082ec <dma_memory_to_memory_disable+0xc>
 80082ea:	e7fe      	b.n	80082ea <dma_memory_to_memory_disable+0xa>
 80082ec:	2314      	movs	r3, #20
 80082ee:	4359      	muls	r1, r3
 80082f0:	3008      	adds	r0, #8
 80082f2:	580b      	ldr	r3, [r1, r0]
 80082f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082f8:	500b      	str	r3, [r1, r0]
 80082fa:	4770      	bx	lr
 80082fc:	40020400 	andmi	r0, r2, r0, lsl #8

08008300 <fmc_bank0_unlock>:
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <fmc_bank0_unlock+0x14>)
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	0612      	lsls	r2, r2, #24
 8008306:	bf41      	itttt	mi
 8008308:	4a03      	ldrmi	r2, [pc, #12]	; (8008318 <fmc_bank0_unlock+0x18>)
 800830a:	605a      	strmi	r2, [r3, #4]
 800830c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008310:	605a      	strmi	r2, [r3, #4]
 8008312:	4770      	bx	lr
 8008314:	40022000 	andmi	r2, r2, r0
 8008318:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0800831c <fmc_bank1_unlock>:
 800831c:	4b04      	ldr	r3, [pc, #16]	; (8008330 <fmc_bank1_unlock+0x14>)
 800831e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008320:	0612      	lsls	r2, r2, #24
 8008322:	bf41      	itttt	mi
 8008324:	4a03      	ldrmi	r2, [pc, #12]	; (8008334 <fmc_bank1_unlock+0x18>)
 8008326:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008328:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 800832c:	645a      	strmi	r2, [r3, #68]	; 0x44
 800832e:	4770      	bx	lr
 8008330:	40022000 	andmi	r2, r2, r0
 8008334:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008338 <fmc_bank0_lock>:
 8008338:	4a02      	ldr	r2, [pc, #8]	; (8008344 <fmc_bank0_lock+0xc>)
 800833a:	6913      	ldr	r3, [r2, #16]
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	6113      	str	r3, [r2, #16]
 8008342:	4770      	bx	lr
 8008344:	40022000 	andmi	r2, r2, r0

08008348 <fmc_bank1_lock>:
 8008348:	4a02      	ldr	r2, [pc, #8]	; (8008354 <fmc_bank1_lock+0xc>)
 800834a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800834c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008350:	6513      	str	r3, [r2, #80]	; 0x50
 8008352:	4770      	bx	lr
 8008354:	40022000 	andmi	r2, r2, r0

08008358 <fmc_bank0_state_get>:
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <fmc_bank0_state_get+0x24>)
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	07d1      	lsls	r1, r2, #31
 800835e:	d409      	bmi.n	8008374 <fmc_bank0_state_get+0x1c>
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	06d2      	lsls	r2, r2, #27
 8008364:	d408      	bmi.n	8008378 <fmc_bank0_state_get+0x20>
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f013 0f04 	tst.w	r3, #4
 800836c:	bf0c      	ite	eq
 800836e:	2000      	moveq	r0, #0
 8008370:	2002      	movne	r0, #2
 8008372:	4770      	bx	lr
 8008374:	2001      	movs	r0, #1
 8008376:	4770      	bx	lr
 8008378:	2003      	movs	r0, #3
 800837a:	4770      	bx	lr
 800837c:	40022000 	andmi	r2, r2, r0

08008380 <fmc_bank1_state_get>:
 8008380:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <fmc_bank1_state_get+0x24>)
 8008382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008384:	07d1      	lsls	r1, r2, #31
 8008386:	d409      	bmi.n	800839c <fmc_bank1_state_get+0x1c>
 8008388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800838a:	06d2      	lsls	r2, r2, #27
 800838c:	d408      	bmi.n	80083a0 <fmc_bank1_state_get+0x20>
 800838e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008390:	f013 0f04 	tst.w	r3, #4
 8008394:	bf0c      	ite	eq
 8008396:	2000      	moveq	r0, #0
 8008398:	2002      	movne	r0, #2
 800839a:	4770      	bx	lr
 800839c:	2001      	movs	r0, #1
 800839e:	4770      	bx	lr
 80083a0:	2003      	movs	r0, #3
 80083a2:	4770      	bx	lr
 80083a4:	40022000 	andmi	r2, r2, r0

080083a8 <fwdgt_enable>:
 80083a8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80083ac:	4b01      	ldr	r3, [pc, #4]	; (80083b4 <fwdgt_enable+0xc>)
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40003000 	andmi	r3, r0, r0

080083b8 <fwdgt_counter_reload>:
 80083b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80083bc:	4b01      	ldr	r3, [pc, #4]	; (80083c4 <fwdgt_counter_reload+0xc>)
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40003000 	andmi	r3, r0, r0

080083c8 <fwdgt_config>:
 80083c8:	f245 5355 	movw	r3, #21845	; 0x5555
 80083cc:	4a11      	ldr	r2, [pc, #68]	; (8008414 <fwdgt_config+0x4c>)
 80083ce:	b510      	push	{r4, lr}
 80083d0:	4c11      	ldr	r4, [pc, #68]	; (8008418 <fwdgt_config+0x50>)
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	68d3      	ldr	r3, [r2, #12]
 80083d6:	3c01      	subs	r4, #1
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	d013      	beq.n	8008406 <fwdgt_config+0x3e>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f8      	bne.n	80083d4 <fwdgt_config+0xc>
 80083e2:	6051      	str	r1, [r2, #4]
 80083e4:	490c      	ldr	r1, [pc, #48]	; (8008418 <fwdgt_config+0x50>)
 80083e6:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <fwdgt_config+0x4c>)
 80083e8:	68d3      	ldr	r3, [r2, #12]
 80083ea:	3901      	subs	r1, #1
 80083ec:	f003 0302 	and.w	r3, r3, #2
 80083f0:	d00d      	beq.n	800840e <fwdgt_config+0x46>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1f8      	bne.n	80083e8 <fwdgt_config+0x20>
 80083f6:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80083fa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80083fe:	6090      	str	r0, [r2, #8]
 8008400:	2001      	movs	r0, #1
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	e002      	b.n	800840c <fwdgt_config+0x44>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0eb      	beq.n	80083e2 <fwdgt_config+0x1a>
 800840a:	2000      	movs	r0, #0
 800840c:	bd10      	pop	{r4, pc}
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1fb      	bne.n	800840a <fwdgt_config+0x42>
 8008412:	e7f0      	b.n	80083f6 <fwdgt_config+0x2e>
 8008414:	40003000 	andmi	r3, r0, r0
 8008418:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

0800841c <gpio_init>:
 800841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008420:	f04f 0c0f 	mov.w	ip, #15
 8008424:	06cf      	lsls	r7, r1, #27
 8008426:	f04f 0400 	mov.w	r4, #0
 800842a:	f04f 0701 	mov.w	r7, #1
 800842e:	f001 050f 	and.w	r5, r1, #15
 8008432:	bf48      	it	mi
 8008434:	4315      	orrmi	r5, r2
 8008436:	fa23 f204 	lsr.w	r2, r3, r4
 800843a:	07d6      	lsls	r6, r2, #31
 800843c:	d510      	bpl.n	8008460 <gpio_init+0x44>
 800843e:	00a2      	lsls	r2, r4, #2
 8008440:	6806      	ldr	r6, [r0, #0]
 8008442:	fa0c fe02 	lsl.w	lr, ip, r2
 8008446:	ea26 060e 	bic.w	r6, r6, lr
 800844a:	fa05 f202 	lsl.w	r2, r5, r2
 800844e:	2928      	cmp	r1, #40	; 0x28
 8008450:	ea42 0206 	orr.w	r2, r2, r6
 8008454:	d128      	bne.n	80084a8 <gpio_init+0x8c>
 8008456:	fa07 f604 	lsl.w	r6, r7, r4
 800845a:	401e      	ands	r6, r3
 800845c:	6146      	str	r6, [r0, #20]
 800845e:	6002      	str	r2, [r0, #0]
 8008460:	3401      	adds	r4, #1
 8008462:	2c08      	cmp	r4, #8
 8008464:	d1e7      	bne.n	8008436 <gpio_init+0x1a>
 8008466:	2600      	movs	r6, #0
 8008468:	f04f 0c0f 	mov.w	ip, #15
 800846c:	2701      	movs	r7, #1
 800846e:	f106 0208 	add.w	r2, r6, #8
 8008472:	fa23 f402 	lsr.w	r4, r3, r2
 8008476:	07e4      	lsls	r4, r4, #31
 8008478:	d511      	bpl.n	800849e <gpio_init+0x82>
 800847a:	00b4      	lsls	r4, r6, #2
 800847c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008480:	fa0c f804 	lsl.w	r8, ip, r4
 8008484:	ea2e 0e08 	bic.w	lr, lr, r8
 8008488:	fa05 f404 	lsl.w	r4, r5, r4
 800848c:	2928      	cmp	r1, #40	; 0x28
 800848e:	ea44 040e 	orr.w	r4, r4, lr
 8008492:	d110      	bne.n	80084b6 <gpio_init+0x9a>
 8008494:	fa07 f202 	lsl.w	r2, r7, r2
 8008498:	401a      	ands	r2, r3
 800849a:	6142      	str	r2, [r0, #20]
 800849c:	6044      	str	r4, [r0, #4]
 800849e:	3601      	adds	r6, #1
 80084a0:	2e08      	cmp	r6, #8
 80084a2:	d1e4      	bne.n	800846e <gpio_init+0x52>
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a8:	2948      	cmp	r1, #72	; 0x48
 80084aa:	bf02      	ittt	eq
 80084ac:	fa07 f604 	lsleq.w	r6, r7, r4
 80084b0:	401e      	andeq	r6, r3
 80084b2:	6106      	streq	r6, [r0, #16]
 80084b4:	e7d3      	b.n	800845e <gpio_init+0x42>
 80084b6:	2948      	cmp	r1, #72	; 0x48
 80084b8:	bf02      	ittt	eq
 80084ba:	fa07 f202 	lsleq.w	r2, r7, r2
 80084be:	401a      	andeq	r2, r3
 80084c0:	6102      	streq	r2, [r0, #16]
 80084c2:	e7eb      	b.n	800849c <gpio_init+0x80>

080084c4 <gpio_input_bit_get>:
 80084c4:	6883      	ldr	r3, [r0, #8]
 80084c6:	420b      	tst	r3, r1
 80084c8:	bf14      	ite	ne
 80084ca:	2001      	movne	r0, #1
 80084cc:	2000      	moveq	r0, #0
 80084ce:	4770      	bx	lr

080084d0 <gpio_pin_remap_config>:
 80084d0:	2800      	cmp	r0, #0
 80084d2:	4a16      	ldr	r2, [pc, #88]	; (800852c <gpio_pin_remap_config+0x5c>)
 80084d4:	b530      	push	{r4, r5, lr}
 80084d6:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 80084da:	bfb4      	ite	lt
 80084dc:	69d3      	ldrlt	r3, [r2, #28]
 80084de:	6853      	ldrge	r3, [r2, #4]
 80084e0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80084e4:	b284      	uxth	r4, r0
 80084e6:	d110      	bne.n	800850a <gpio_pin_remap_config+0x3a>
 80084e8:	6855      	ldr	r5, [r2, #4]
 80084ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80084ee:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80084f2:	6055      	str	r5, [r2, #4]
 80084f4:	b119      	cbz	r1, 80084fe <gpio_pin_remap_config+0x2e>
 80084f6:	0d42      	lsrs	r2, r0, #21
 80084f8:	0112      	lsls	r2, r2, #4
 80084fa:	4094      	lsls	r4, r2
 80084fc:	4323      	orrs	r3, r4
 80084fe:	4a0b      	ldr	r2, [pc, #44]	; (800852c <gpio_pin_remap_config+0x5c>)
 8008500:	2800      	cmp	r0, #0
 8008502:	bfb4      	ite	lt
 8008504:	61d3      	strlt	r3, [r2, #28]
 8008506:	6053      	strge	r3, [r2, #4]
 8008508:	bd30      	pop	{r4, r5, pc}
 800850a:	02c2      	lsls	r2, r0, #11
 800850c:	bf4d      	iteet	mi
 800850e:	2203      	movmi	r2, #3
 8008510:	0d42      	lsrpl	r2, r0, #21
 8008512:	0112      	lslpl	r2, r2, #4
 8008514:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008518:	bf4c      	ite	mi
 800851a:	40aa      	lslmi	r2, r5
 800851c:	fa04 f202 	lslpl.w	r2, r4, r2
 8008520:	ea23 0302 	bic.w	r3, r3, r2
 8008524:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8008528:	e7e4      	b.n	80084f4 <gpio_pin_remap_config+0x24>
 800852a:	bf00      	nop
 800852c:	40010000 	andmi	r0, r1, r0

08008530 <nvic_vector_table_set>:
 8008530:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <nvic_vector_table_set+0x10>)
 8008536:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800853a:	4301      	orrs	r1, r0
 800853c:	6099      	str	r1, [r3, #8]
 800853e:	4770      	bx	lr
 8008540:	e000ed00 	and	lr, r0, r0, lsl #26

08008544 <pmu_backup_write_enable>:
 8008544:	4a02      	ldr	r2, [pc, #8]	; (8008550 <pmu_backup_write_enable+0xc>)
 8008546:	6813      	ldr	r3, [r2, #0]
 8008548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	4770      	bx	lr
 8008550:	40007000 	andmi	r7, r0, r0

08008554 <rcu_periph_clock_enable>:
 8008554:	2201      	movs	r2, #1
 8008556:	0983      	lsrs	r3, r0, #6
 8008558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800855c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008560:	6819      	ldr	r1, [r3, #0]
 8008562:	f000 001f 	and.w	r0, r0, #31
 8008566:	fa02 f000 	lsl.w	r0, r2, r0
 800856a:	4308      	orrs	r0, r1
 800856c:	6018      	str	r0, [r3, #0]
 800856e:	4770      	bx	lr

08008570 <rcu_periph_clock_disable>:
 8008570:	2101      	movs	r1, #1
 8008572:	0983      	lsrs	r3, r0, #6
 8008574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008578:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	f000 001f 	and.w	r0, r0, #31
 8008582:	fa01 f000 	lsl.w	r0, r1, r0
 8008586:	ea22 0000 	bic.w	r0, r2, r0
 800858a:	6018      	str	r0, [r3, #0]
 800858c:	4770      	bx	lr

0800858e <rcu_periph_reset_enable>:
 800858e:	f7ff bfe1 	b.w	8008554 <rcu_periph_clock_enable>

08008592 <rcu_periph_reset_disable>:
 8008592:	f7ff bfed 	b.w	8008570 <rcu_periph_clock_disable>
	...

08008598 <rcu_bkp_reset_enable>:
 8008598:	4a02      	ldr	r2, [pc, #8]	; (80085a4 <rcu_bkp_reset_enable+0xc>)
 800859a:	6a13      	ldr	r3, [r2, #32]
 800859c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a0:	6213      	str	r3, [r2, #32]
 80085a2:	4770      	bx	lr
 80085a4:	40021000 	andmi	r1, r2, r0

080085a8 <rcu_bkp_reset_disable>:
 80085a8:	4a02      	ldr	r2, [pc, #8]	; (80085b4 <rcu_bkp_reset_disable+0xc>)
 80085aa:	6a13      	ldr	r3, [r2, #32]
 80085ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b0:	6213      	str	r3, [r2, #32]
 80085b2:	4770      	bx	lr
 80085b4:	40021000 	andmi	r1, r2, r0

080085b8 <rcu_adc_clock_config>:
 80085b8:	490c      	ldr	r1, [pc, #48]	; (80085ec <rcu_adc_clock_config+0x34>)
 80085ba:	2805      	cmp	r0, #5
 80085bc:	684b      	ldr	r3, [r1, #4]
 80085be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80085c6:	d006      	beq.n	80085d6 <rcu_adc_clock_config+0x1e>
 80085c8:	d803      	bhi.n	80085d2 <rcu_adc_clock_config+0x1a>
 80085ca:	2804      	cmp	r0, #4
 80085cc:	d10a      	bne.n	80085e4 <rcu_adc_clock_config+0x2c>
 80085ce:	604b      	str	r3, [r1, #4]
 80085d0:	4770      	bx	lr
 80085d2:	2807      	cmp	r0, #7
 80085d4:	d1fb      	bne.n	80085ce <rcu_adc_clock_config+0x16>
 80085d6:	4a06      	ldr	r2, [pc, #24]	; (80085f0 <rcu_adc_clock_config+0x38>)
 80085d8:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 80085dc:	4303      	orrs	r3, r0
 80085de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e2:	e7f4      	b.n	80085ce <rcu_adc_clock_config+0x16>
 80085e4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80085e8:	e7f1      	b.n	80085ce <rcu_adc_clock_config+0x16>
 80085ea:	bf00      	nop
 80085ec:	40021000 	andmi	r1, r2, r0
 80085f0:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080085f4 <rcu_rtc_clock_config>:
 80085f4:	4a03      	ldr	r2, [pc, #12]	; (8008604 <rcu_rtc_clock_config+0x10>)
 80085f6:	6a13      	ldr	r3, [r2, #32]
 80085f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fc:	4303      	orrs	r3, r0
 80085fe:	6213      	str	r3, [r2, #32]
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	40021000 	andmi	r1, r2, r0

08008608 <rcu_flag_get>:
 8008608:	0983      	lsrs	r3, r0, #6
 800860a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800860e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f000 001f 	and.w	r0, r0, #31
 8008618:	fa23 f000 	lsr.w	r0, r3, r0
 800861c:	f000 0001 	and.w	r0, r0, #1
 8008620:	4770      	bx	lr
	...

08008624 <rcu_osci_stab_wait>:
 8008624:	2818      	cmp	r0, #24
 8008626:	b508      	push	{r3, lr}
 8008628:	d03b      	beq.n	80086a2 <rcu_osci_stab_wait+0x7e>
 800862a:	d804      	bhi.n	8008636 <rcu_osci_stab_wait+0x12>
 800862c:	b378      	cbz	r0, 800868e <rcu_osci_stab_wait+0x6a>
 800862e:	2810      	cmp	r0, #16
 8008630:	d012      	beq.n	8008658 <rcu_osci_stab_wait+0x34>
 8008632:	2000      	movs	r0, #0
 8008634:	bd08      	pop	{r3, pc}
 8008636:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800863a:	d01c      	beq.n	8008676 <rcu_osci_stab_wait+0x52>
 800863c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008640:	d1f7      	bne.n	8008632 <rcu_osci_stab_wait+0xe>
 8008642:	4a1c      	ldr	r2, [pc, #112]	; (80086b4 <rcu_osci_stab_wait+0x90>)
 8008644:	f640 1001 	movw	r0, #2305	; 0x901
 8008648:	f7ff ffde 	bl	8008608 <rcu_flag_get>
 800864c:	b908      	cbnz	r0, 8008652 <rcu_osci_stab_wait+0x2e>
 800864e:	3a01      	subs	r2, #1
 8008650:	d1f8      	bne.n	8008644 <rcu_osci_stab_wait+0x20>
 8008652:	f640 1001 	movw	r0, #2305	; 0x901
 8008656:	e008      	b.n	800866a <rcu_osci_stab_wait+0x46>
 8008658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865c:	2011      	movs	r0, #17
 800865e:	f7ff ffd3 	bl	8008608 <rcu_flag_get>
 8008662:	b908      	cbnz	r0, 8008668 <rcu_osci_stab_wait+0x44>
 8008664:	3a01      	subs	r2, #1
 8008666:	d1f9      	bne.n	800865c <rcu_osci_stab_wait+0x38>
 8008668:	2011      	movs	r0, #17
 800866a:	f7ff ffcd 	bl	8008608 <rcu_flag_get>
 800866e:	3800      	subs	r0, #0
 8008670:	bf18      	it	ne
 8008672:	2001      	movne	r0, #1
 8008674:	e7de      	b.n	8008634 <rcu_osci_stab_wait+0x10>
 8008676:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 800867a:	f640 0001 	movw	r0, #2049	; 0x801
 800867e:	f7ff ffc3 	bl	8008608 <rcu_flag_get>
 8008682:	b908      	cbnz	r0, 8008688 <rcu_osci_stab_wait+0x64>
 8008684:	3a01      	subs	r2, #1
 8008686:	d1f8      	bne.n	800867a <rcu_osci_stab_wait+0x56>
 8008688:	f640 0001 	movw	r0, #2049	; 0x801
 800868c:	e7ed      	b.n	800866a <rcu_osci_stab_wait+0x46>
 800868e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008692:	2001      	movs	r0, #1
 8008694:	f7ff ffb8 	bl	8008608 <rcu_flag_get>
 8008698:	b908      	cbnz	r0, 800869e <rcu_osci_stab_wait+0x7a>
 800869a:	3a01      	subs	r2, #1
 800869c:	d1f9      	bne.n	8008692 <rcu_osci_stab_wait+0x6e>
 800869e:	2001      	movs	r0, #1
 80086a0:	e7e3      	b.n	800866a <rcu_osci_stab_wait+0x46>
 80086a2:	4a04      	ldr	r2, [pc, #16]	; (80086b4 <rcu_osci_stab_wait+0x90>)
 80086a4:	2019      	movs	r0, #25
 80086a6:	f7ff ffaf 	bl	8008608 <rcu_flag_get>
 80086aa:	b908      	cbnz	r0, 80086b0 <rcu_osci_stab_wait+0x8c>
 80086ac:	3a01      	subs	r2, #1
 80086ae:	d1f9      	bne.n	80086a4 <rcu_osci_stab_wait+0x80>
 80086b0:	2019      	movs	r0, #25
 80086b2:	e7da      	b.n	800866a <rcu_osci_stab_wait+0x46>
 80086b4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080086b8 <rcu_osci_on>:
 80086b8:	f7ff bf4c 	b.w	8008554 <rcu_periph_clock_enable>

080086bc <rcu_clock_freq_get>:
 80086bc:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <rcu_clock_freq_get+0xbc>)
 80086be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c0:	4604      	mov	r4, r0
 80086c2:	461f      	mov	r7, r3
 80086c4:	b089      	sub	sp, #36	; 0x24
 80086c6:	ad04      	add	r5, sp, #16
 80086c8:	f103 0610 	add.w	r6, r3, #16
 80086cc:	462a      	mov	r2, r5
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	6859      	ldr	r1, [r3, #4]
 80086d2:	3308      	adds	r3, #8
 80086d4:	c203      	stmia	r2!, {r0, r1}
 80086d6:	42b3      	cmp	r3, r6
 80086d8:	4615      	mov	r5, r2
 80086da:	d1f7      	bne.n	80086cc <rcu_clock_freq_get+0x10>
 80086dc:	466b      	mov	r3, sp
 80086de:	6871      	ldr	r1, [r6, #4]
 80086e0:	6938      	ldr	r0, [r7, #16]
 80086e2:	c303      	stmia	r3!, {r0, r1}
 80086e4:	c303      	stmia	r3!, {r0, r1}
 80086e6:	4925      	ldr	r1, [pc, #148]	; (800877c <rcu_clock_freq_get+0xc0>)
 80086e8:	684b      	ldr	r3, [r1, #4]
 80086ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d136      	bne.n	8008760 <rcu_clock_freq_get+0xa4>
 80086f2:	684b      	ldr	r3, [r1, #4]
 80086f4:	03dd      	lsls	r5, r3, #15
 80086f6:	d510      	bpl.n	800871a <rcu_clock_freq_get+0x5e>
 80086f8:	684b      	ldr	r3, [r1, #4]
 80086fa:	4a21      	ldr	r2, [pc, #132]	; (8008780 <rcu_clock_freq_get+0xc4>)
 80086fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008700:	4b20      	ldr	r3, [pc, #128]	; (8008784 <rcu_clock_freq_get+0xc8>)
 8008702:	bf18      	it	ne
 8008704:	461a      	movne	r2, r3
 8008706:	684b      	ldr	r3, [r1, #4]
 8008708:	6848      	ldr	r0, [r1, #4]
 800870a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800870e:	0100      	lsls	r0, r0, #4
 8008710:	d505      	bpl.n	800871e <rcu_clock_freq_get+0x62>
 8008712:	f043 0310 	orr.w	r3, r3, #16
 8008716:	3301      	adds	r3, #1
 8008718:	e004      	b.n	8008724 <rcu_clock_freq_get+0x68>
 800871a:	4a1a      	ldr	r2, [pc, #104]	; (8008784 <rcu_clock_freq_get+0xc8>)
 800871c:	e7f3      	b.n	8008706 <rcu_clock_freq_get+0x4a>
 800871e:	2b0f      	cmp	r3, #15
 8008720:	d0f9      	beq.n	8008716 <rcu_clock_freq_get+0x5a>
 8008722:	3302      	adds	r3, #2
 8008724:	4353      	muls	r3, r2
 8008726:	684a      	ldr	r2, [r1, #4]
 8008728:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800872c:	3220      	adds	r2, #32
 800872e:	446a      	add	r2, sp
 8008730:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8008734:	fa23 f002 	lsr.w	r0, r3, r2
 8008738:	684a      	ldr	r2, [r1, #4]
 800873a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800873e:	3220      	adds	r2, #32
 8008740:	446a      	add	r2, sp
 8008742:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8008746:	684a      	ldr	r2, [r1, #4]
 8008748:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 800874c:	3220      	adds	r2, #32
 800874e:	446a      	add	r2, sp
 8008750:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008754:	2c03      	cmp	r4, #3
 8008756:	d80c      	bhi.n	8008772 <rcu_clock_freq_get+0xb6>
 8008758:	e8df f004 	tbb	[pc, r4]
 800875c:	09070504 	stmdbeq	r7, {r2, r8, sl}
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <rcu_clock_freq_get+0xc4>)
 8008762:	e7e0      	b.n	8008726 <rcu_clock_freq_get+0x6a>
 8008764:	4618      	mov	r0, r3
 8008766:	b009      	add	sp, #36	; 0x24
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	40e8      	lsrs	r0, r5
 800876c:	e7fb      	b.n	8008766 <rcu_clock_freq_get+0xaa>
 800876e:	40d0      	lsrs	r0, r2
 8008770:	e7f9      	b.n	8008766 <rcu_clock_freq_get+0xaa>
 8008772:	2000      	movs	r0, #0
 8008774:	e7f7      	b.n	8008766 <rcu_clock_freq_get+0xaa>
 8008776:	bf00      	nop
 8008778:	080096d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, ip, pc}
 800877c:	40021000 	andmi	r1, r2, r0
 8008780:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8008784:	003d0900 	eorseq	r0, sp, r0, lsl #18

08008788 <rtc_configuration_mode_enter>:
 8008788:	4a03      	ldr	r2, [pc, #12]	; (8008798 <rtc_configuration_mode_enter+0x10>)
 800878a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800878e:	f043 0310 	orr.w	r3, r3, #16
 8008792:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008796:	4770      	bx	lr
 8008798:	40002000 	andmi	r2, r0, r0

0800879c <rtc_configuration_mode_exit>:
 800879c:	4a03      	ldr	r2, [pc, #12]	; (80087ac <rtc_configuration_mode_exit+0x10>)
 800879e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80087a2:	f023 0310 	bic.w	r3, r3, #16
 80087a6:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 80087aa:	4770      	bx	lr
 80087ac:	40002000 	andmi	r2, r0, r0

080087b0 <rtc_counter_set>:
 80087b0:	b508      	push	{r3, lr}
 80087b2:	f7ff ffe9 	bl	8008788 <rtc_configuration_mode_enter>
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <rtc_counter_set+0x1c>)
 80087b8:	0c02      	lsrs	r2, r0, #16
 80087ba:	b280      	uxth	r0, r0
 80087bc:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 80087c0:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 80087c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087c8:	f7ff bfe8 	b.w	800879c <rtc_configuration_mode_exit>
 80087cc:	40002000 	andmi	r2, r0, r0

080087d0 <rtc_prescaler_set>:
 80087d0:	b508      	push	{r3, lr}
 80087d2:	f7ff ffd9 	bl	8008788 <rtc_configuration_mode_enter>
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <rtc_prescaler_set+0x20>)
 80087d8:	f3c0 4203 	ubfx	r2, r0, #16, #4
 80087dc:	b280      	uxth	r0, r0
 80087de:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80087e2:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 80087e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80087ea:	f7ff bfd7 	b.w	800879c <rtc_configuration_mode_exit>
 80087ee:	bf00      	nop
 80087f0:	40002000 	andmi	r2, r0, r0

080087f4 <rtc_lwoff_wait>:
 80087f4:	4a02      	ldr	r2, [pc, #8]	; (8008800 <rtc_lwoff_wait+0xc>)
 80087f6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80087fa:	069b      	lsls	r3, r3, #26
 80087fc:	d5fb      	bpl.n	80087f6 <rtc_lwoff_wait+0x2>
 80087fe:	4770      	bx	lr
 8008800:	40002000 	andmi	r2, r0, r0

08008804 <rtc_register_sync_wait>:
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <rtc_register_sync_wait+0x18>)
 8008806:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800880a:	f022 0208 	bic.w	r2, r2, #8
 800880e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008812:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8008816:	0712      	lsls	r2, r2, #28
 8008818:	d5fb      	bpl.n	8008812 <rtc_register_sync_wait+0xe>
 800881a:	4770      	bx	lr
 800881c:	40002000 	andmi	r2, r0, r0

08008820 <rtc_counter_get>:
 8008820:	4b03      	ldr	r3, [pc, #12]	; (8008830 <rtc_counter_get+0x10>)
 8008822:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8008826:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 800882a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800882e:	4770      	bx	lr
 8008830:	40002000 	andmi	r2, r0, r0

08008834 <timer_deinit>:
 8008834:	b508      	push	{r3, lr}
 8008836:	4b2d      	ldr	r3, [pc, #180]	; (80088ec <timer_deinit+0xb8>)
 8008838:	4298      	cmp	r0, r3
 800883a:	d048      	beq.n	80088ce <timer_deinit+0x9a>
 800883c:	d816      	bhi.n	800886c <timer_deinit+0x38>
 800883e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008842:	4298      	cmp	r0, r3
 8008844:	d03c      	beq.n	80088c0 <timer_deinit+0x8c>
 8008846:	d807      	bhi.n	8008858 <timer_deinit+0x24>
 8008848:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800884c:	d02a      	beq.n	80088a4 <timer_deinit+0x70>
 800884e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008852:	4298      	cmp	r0, r3
 8008854:	d02d      	beq.n	80088b2 <timer_deinit+0x7e>
 8008856:	bd08      	pop	{r3, pc}
 8008858:	4b25      	ldr	r3, [pc, #148]	; (80088f0 <timer_deinit+0xbc>)
 800885a:	4298      	cmp	r0, r3
 800885c:	d1fb      	bne.n	8008856 <timer_deinit+0x22>
 800885e:	f240 4003 	movw	r0, #1027	; 0x403
 8008862:	f7ff fe94 	bl	800858e <rcu_periph_reset_enable>
 8008866:	f240 4003 	movw	r0, #1027	; 0x403
 800886a:	e017      	b.n	800889c <timer_deinit+0x68>
 800886c:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <timer_deinit+0xc0>)
 800886e:	4298      	cmp	r0, r3
 8008870:	d00e      	beq.n	8008890 <timer_deinit+0x5c>
 8008872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008876:	4298      	cmp	r0, r3
 8008878:	d030      	beq.n	80088dc <timer_deinit+0xa8>
 800887a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 800887e:	4298      	cmp	r0, r3
 8008880:	d1e9      	bne.n	8008856 <timer_deinit+0x22>
 8008882:	f240 4005 	movw	r0, #1029	; 0x405
 8008886:	f7ff fe82 	bl	800858e <rcu_periph_reset_enable>
 800888a:	f240 4005 	movw	r0, #1029	; 0x405
 800888e:	e005      	b.n	800889c <timer_deinit+0x68>
 8008890:	f240 300b 	movw	r0, #779	; 0x30b
 8008894:	f7ff fe7b 	bl	800858e <rcu_periph_reset_enable>
 8008898:	f240 300b 	movw	r0, #779	; 0x30b
 800889c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088a0:	f7ff be77 	b.w	8008592 <rcu_periph_reset_disable>
 80088a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80088a8:	f7ff fe71 	bl	800858e <rcu_periph_reset_enable>
 80088ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80088b0:	e7f4      	b.n	800889c <timer_deinit+0x68>
 80088b2:	f240 4001 	movw	r0, #1025	; 0x401
 80088b6:	f7ff fe6a 	bl	800858e <rcu_periph_reset_enable>
 80088ba:	f240 4001 	movw	r0, #1025	; 0x401
 80088be:	e7ed      	b.n	800889c <timer_deinit+0x68>
 80088c0:	f240 4002 	movw	r0, #1026	; 0x402
 80088c4:	f7ff fe63 	bl	800858e <rcu_periph_reset_enable>
 80088c8:	f240 4002 	movw	r0, #1026	; 0x402
 80088cc:	e7e6      	b.n	800889c <timer_deinit+0x68>
 80088ce:	f240 4004 	movw	r0, #1028	; 0x404
 80088d2:	f7ff fe5c 	bl	800858e <rcu_periph_reset_enable>
 80088d6:	f240 4004 	movw	r0, #1028	; 0x404
 80088da:	e7df      	b.n	800889c <timer_deinit+0x68>
 80088dc:	f240 300d 	movw	r0, #781	; 0x30d
 80088e0:	f7ff fe55 	bl	800858e <rcu_periph_reset_enable>
 80088e4:	f240 300d 	movw	r0, #781	; 0x30d
 80088e8:	e7d8      	b.n	800889c <timer_deinit+0x68>
 80088ea:	bf00      	nop
 80088ec:	40001000 	andmi	r1, r0, r0
 80088f0:	40000c00 	andmi	r0, r0, r0, lsl #24
 80088f4:	40012c00 	andmi	r2, r1, r0, lsl #24

080088f8 <timer_init>:
 80088f8:	880b      	ldrh	r3, [r1, #0]
 80088fa:	6283      	str	r3, [r0, #40]	; 0x28
 80088fc:	4b26      	ldr	r3, [pc, #152]	; (8008998 <timer_init+0xa0>)
 80088fe:	4298      	cmp	r0, r3
 8008900:	d018      	beq.n	8008934 <timer_init+0x3c>
 8008902:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8008906:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800890a:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 800890e:	d011      	beq.n	8008934 <timer_init+0x3c>
 8008910:	4a22      	ldr	r2, [pc, #136]	; (800899c <timer_init+0xa4>)
 8008912:	4290      	cmp	r0, r2
 8008914:	d00e      	beq.n	8008934 <timer_init+0x3c>
 8008916:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800891a:	4290      	cmp	r0, r2
 800891c:	d00a      	beq.n	8008934 <timer_init+0x3c>
 800891e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008922:	4293      	cmp	r3, r2
 8008924:	d006      	beq.n	8008934 <timer_init+0x3c>
 8008926:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 800892a:	4293      	cmp	r3, r2
 800892c:	d002      	beq.n	8008934 <timer_init+0x3c>
 800892e:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <timer_init+0xa8>)
 8008930:	4298      	cmp	r0, r3
 8008932:	d10f      	bne.n	8008954 <timer_init+0x5c>
 8008934:	6803      	ldr	r3, [r0, #0]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	6003      	str	r3, [r0, #0]
 800893c:	884b      	ldrh	r3, [r1, #2]
 800893e:	6802      	ldr	r2, [r0, #0]
 8008940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008944:	4313      	orrs	r3, r2
 8008946:	6003      	str	r3, [r0, #0]
 8008948:	888b      	ldrh	r3, [r1, #4]
 800894a:	6802      	ldr	r2, [r0, #0]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	4313      	orrs	r3, r2
 8008952:	6003      	str	r3, [r0, #0]
 8008954:	688b      	ldr	r3, [r1, #8]
 8008956:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008958:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <timer_init+0xac>)
 800895a:	4298      	cmp	r0, r3
 800895c:	d003      	beq.n	8008966 <timer_init+0x6e>
 800895e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008962:	4298      	cmp	r0, r3
 8008964:	d104      	bne.n	8008970 <timer_init+0x78>
 8008966:	6943      	ldr	r3, [r0, #20]
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6143      	str	r3, [r0, #20]
 800896e:	4770      	bx	lr
 8008970:	6803      	ldr	r3, [r0, #0]
 8008972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008976:	6003      	str	r3, [r0, #0]
 8008978:	898b      	ldrh	r3, [r1, #12]
 800897a:	6802      	ldr	r2, [r0, #0]
 800897c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008980:	4313      	orrs	r3, r2
 8008982:	6003      	str	r3, [r0, #0]
 8008984:	4b04      	ldr	r3, [pc, #16]	; (8008998 <timer_init+0xa0>)
 8008986:	4298      	cmp	r0, r3
 8008988:	d002      	beq.n	8008990 <timer_init+0x98>
 800898a:	4b04      	ldr	r3, [pc, #16]	; (800899c <timer_init+0xa4>)
 800898c:	4298      	cmp	r0, r3
 800898e:	d1ea      	bne.n	8008966 <timer_init+0x6e>
 8008990:	7b8b      	ldrb	r3, [r1, #14]
 8008992:	6303      	str	r3, [r0, #48]	; 0x30
 8008994:	e7e7      	b.n	8008966 <timer_init+0x6e>
 8008996:	bf00      	nop
 8008998:	40012c00 	andmi	r2, r1, r0, lsl #24
 800899c:	40013400 	andmi	r3, r1, r0, lsl #8
 80089a0:	40002000 	andmi	r2, r0, r0
 80089a4:	40001000 	andmi	r1, r0, r0

080089a8 <timer_enable>:
 80089a8:	6803      	ldr	r3, [r0, #0]
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	6003      	str	r3, [r0, #0]
 80089b0:	4770      	bx	lr

080089b2 <timer_channel_output_mode_config>:
 80089b2:	2903      	cmp	r1, #3
 80089b4:	d81a      	bhi.n	80089ec <timer_channel_output_mode_config+0x3a>
 80089b6:	e8df f001 	tbb	[pc, r1]
 80089ba:	1a120a02 	bne	848b1ca <__exidx_end+0x4803f2>
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c4:	6183      	str	r3, [r0, #24]
 80089c6:	6983      	ldr	r3, [r0, #24]
 80089c8:	431a      	orrs	r2, r3
 80089ca:	6182      	str	r2, [r0, #24]
 80089cc:	4770      	bx	lr
 80089ce:	6983      	ldr	r3, [r0, #24]
 80089d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d4:	6183      	str	r3, [r0, #24]
 80089d6:	6983      	ldr	r3, [r0, #24]
 80089d8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80089dc:	e7f5      	b.n	80089ca <timer_channel_output_mode_config+0x18>
 80089de:	69c3      	ldr	r3, [r0, #28]
 80089e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e4:	61c3      	str	r3, [r0, #28]
 80089e6:	69c3      	ldr	r3, [r0, #28]
 80089e8:	431a      	orrs	r2, r3
 80089ea:	61c2      	str	r2, [r0, #28]
 80089ec:	4770      	bx	lr
 80089ee:	69c3      	ldr	r3, [r0, #28]
 80089f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f4:	61c3      	str	r3, [r0, #28]
 80089f6:	69c3      	ldr	r3, [r0, #28]
 80089f8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80089fc:	e7f5      	b.n	80089ea <timer_channel_output_mode_config+0x38>

080089fe <timer_channel_output_pulse_value_config>:
 80089fe:	2903      	cmp	r1, #3
 8008a00:	d80a      	bhi.n	8008a18 <timer_channel_output_pulse_value_config+0x1a>
 8008a02:	e8df f001 	tbb	[pc, r1]
 8008a06:	08060402 	stmdaeq	r6, {r1, sl}
 8008a0a:	6342      	str	r2, [r0, #52]	; 0x34
 8008a0c:	4770      	bx	lr
 8008a0e:	6382      	str	r2, [r0, #56]	; 0x38
 8008a10:	4770      	bx	lr
 8008a12:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008a14:	4770      	bx	lr
 8008a16:	6402      	str	r2, [r0, #64]	; 0x40
 8008a18:	4770      	bx	lr

08008a1a <timer_interrupt_enable>:
 8008a1a:	68c3      	ldr	r3, [r0, #12]
 8008a1c:	430b      	orrs	r3, r1
 8008a1e:	60c3      	str	r3, [r0, #12]
 8008a20:	4770      	bx	lr

08008a22 <timer_interrupt_flag_clear>:
 8008a22:	43c9      	mvns	r1, r1
 8008a24:	6101      	str	r1, [r0, #16]
 8008a26:	4770      	bx	lr

08008a28 <timer_flag_clear>:
 8008a28:	43c9      	mvns	r1, r1
 8008a2a:	6101      	str	r1, [r0, #16]
 8008a2c:	4770      	bx	lr
	...

08008a30 <usart_deinit>:
 8008a30:	b508      	push	{r3, lr}
 8008a32:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <usart_deinit+0x78>)
 8008a34:	4298      	cmp	r0, r3
 8008a36:	d028      	beq.n	8008a8a <usart_deinit+0x5a>
 8008a38:	d808      	bhi.n	8008a4c <usart_deinit+0x1c>
 8008a3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008a3e:	4298      	cmp	r0, r3
 8008a40:	d015      	beq.n	8008a6e <usart_deinit+0x3e>
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	4298      	cmp	r0, r3
 8008a48:	d018      	beq.n	8008a7c <usart_deinit+0x4c>
 8008a4a:	bd08      	pop	{r3, pc}
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <usart_deinit+0x7c>)
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	d022      	beq.n	8008a98 <usart_deinit+0x68>
 8008a52:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008a56:	4298      	cmp	r0, r3
 8008a58:	d1f7      	bne.n	8008a4a <usart_deinit+0x1a>
 8008a5a:	f240 300e 	movw	r0, #782	; 0x30e
 8008a5e:	f7ff fd96 	bl	800858e <rcu_periph_reset_enable>
 8008a62:	f240 300e 	movw	r0, #782	; 0x30e
 8008a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a6a:	f7ff bd92 	b.w	8008592 <rcu_periph_reset_disable>
 8008a6e:	f240 4011 	movw	r0, #1041	; 0x411
 8008a72:	f7ff fd8c 	bl	800858e <rcu_periph_reset_enable>
 8008a76:	f240 4011 	movw	r0, #1041	; 0x411
 8008a7a:	e7f4      	b.n	8008a66 <usart_deinit+0x36>
 8008a7c:	f240 4012 	movw	r0, #1042	; 0x412
 8008a80:	f7ff fd85 	bl	800858e <rcu_periph_reset_enable>
 8008a84:	f240 4012 	movw	r0, #1042	; 0x412
 8008a88:	e7ed      	b.n	8008a66 <usart_deinit+0x36>
 8008a8a:	f240 4013 	movw	r0, #1043	; 0x413
 8008a8e:	f7ff fd7e 	bl	800858e <rcu_periph_reset_enable>
 8008a92:	f240 4013 	movw	r0, #1043	; 0x413
 8008a96:	e7e6      	b.n	8008a66 <usart_deinit+0x36>
 8008a98:	f240 4014 	movw	r0, #1044	; 0x414
 8008a9c:	f7ff fd77 	bl	800858e <rcu_periph_reset_enable>
 8008aa0:	f240 4014 	movw	r0, #1044	; 0x414
 8008aa4:	e7df      	b.n	8008a66 <usart_deinit+0x36>
 8008aa6:	bf00      	nop
 8008aa8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008aac:	40005000 	andmi	r5, r0, r0

08008ab0 <usart_baudrate_set>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <usart_baudrate_set+0x48>)
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4298      	cmp	r0, r3
 8008ab8:	460d      	mov	r5, r1
 8008aba:	d01b      	beq.n	8008af4 <usart_baudrate_set+0x44>
 8008abc:	d809      	bhi.n	8008ad2 <usart_baudrate_set+0x22>
 8008abe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8008ac2:	4298      	cmp	r0, r3
 8008ac4:	d016      	beq.n	8008af4 <usart_baudrate_set+0x44>
 8008ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aca:	4298      	cmp	r0, r3
 8008acc:	d012      	beq.n	8008af4 <usart_baudrate_set+0x44>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e009      	b.n	8008ae6 <usart_baudrate_set+0x36>
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <usart_baudrate_set+0x4c>)
 8008ad4:	4298      	cmp	r0, r3
 8008ad6:	d00d      	beq.n	8008af4 <usart_baudrate_set+0x44>
 8008ad8:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8008adc:	4298      	cmp	r0, r3
 8008ade:	d1f6      	bne.n	8008ace <usart_baudrate_set+0x1e>
 8008ae0:	2003      	movs	r0, #3
 8008ae2:	f7ff fdeb 	bl	80086bc <rcu_clock_freq_get>
 8008ae6:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8008aea:	fbb3 f1f5 	udiv	r1, r3, r5
 8008aee:	b289      	uxth	r1, r1
 8008af0:	60a1      	str	r1, [r4, #8]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	2002      	movs	r0, #2
 8008af6:	e7f4      	b.n	8008ae2 <usart_baudrate_set+0x32>
 8008af8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8008afc:	40005000 	andmi	r5, r0, r0

08008b00 <usart_parity_config>:
 8008b00:	68c2      	ldr	r2, [r0, #12]
 8008b02:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8008b06:	60c2      	str	r2, [r0, #12]
 8008b08:	68c3      	ldr	r3, [r0, #12]
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	60c3      	str	r3, [r0, #12]
 8008b0e:	4770      	bx	lr

08008b10 <usart_word_length_set>:
 8008b10:	68c2      	ldr	r2, [r0, #12]
 8008b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b16:	60c2      	str	r2, [r0, #12]
 8008b18:	68c3      	ldr	r3, [r0, #12]
 8008b1a:	430b      	orrs	r3, r1
 8008b1c:	60c3      	str	r3, [r0, #12]
 8008b1e:	4770      	bx	lr

08008b20 <usart_stop_bit_set>:
 8008b20:	6902      	ldr	r2, [r0, #16]
 8008b22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b26:	6102      	str	r2, [r0, #16]
 8008b28:	6903      	ldr	r3, [r0, #16]
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	6103      	str	r3, [r0, #16]
 8008b2e:	4770      	bx	lr

08008b30 <usart_transmit_config>:
 8008b30:	68c3      	ldr	r3, [r0, #12]
 8008b32:	f023 0308 	bic.w	r3, r3, #8
 8008b36:	430b      	orrs	r3, r1
 8008b38:	60c3      	str	r3, [r0, #12]
 8008b3a:	4770      	bx	lr

08008b3c <usart_receive_config>:
 8008b3c:	68c3      	ldr	r3, [r0, #12]
 8008b3e:	f023 0304 	bic.w	r3, r3, #4
 8008b42:	430b      	orrs	r3, r1
 8008b44:	60c3      	str	r3, [r0, #12]
 8008b46:	4770      	bx	lr

08008b48 <usart_hardware_flow_rts_config>:
 8008b48:	6943      	ldr	r3, [r0, #20]
 8008b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b4e:	430b      	orrs	r3, r1
 8008b50:	6143      	str	r3, [r0, #20]
 8008b52:	4770      	bx	lr

08008b54 <usart_hardware_flow_cts_config>:
 8008b54:	6943      	ldr	r3, [r0, #20]
 8008b56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	6143      	str	r3, [r0, #20]
 8008b5e:	4770      	bx	lr

08008b60 <usart_dma_transmit_config>:
 8008b60:	6943      	ldr	r3, [r0, #20]
 8008b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b66:	430b      	orrs	r3, r1
 8008b68:	6143      	str	r3, [r0, #20]
 8008b6a:	4770      	bx	lr

08008b6c <usart_flag_get>:
 8008b6c:	098b      	lsrs	r3, r1, #6
 8008b6e:	5818      	ldr	r0, [r3, r0]
 8008b70:	f001 011f 	and.w	r1, r1, #31
 8008b74:	40c8      	lsrs	r0, r1
 8008b76:	f000 0001 	and.w	r0, r0, #1
 8008b7a:	4770      	bx	lr

08008b7c <usart_interrupt_enable>:
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8008b84:	5814      	ldr	r4, [r2, r0]
 8008b86:	f001 011f 	and.w	r1, r1, #31
 8008b8a:	fa03 f101 	lsl.w	r1, r3, r1
 8008b8e:	4321      	orrs	r1, r4
 8008b90:	5011      	str	r1, [r2, r0]
 8008b92:	bd10      	pop	{r4, pc}

08008b94 <usart_interrupt_disable>:
 8008b94:	2201      	movs	r2, #1
 8008b96:	b510      	push	{r4, lr}
 8008b98:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8008b9c:	5823      	ldr	r3, [r4, r0]
 8008b9e:	f001 011f 	and.w	r1, r1, #31
 8008ba2:	fa02 f101 	lsl.w	r1, r2, r1
 8008ba6:	ea23 0101 	bic.w	r1, r3, r1
 8008baa:	5021      	str	r1, [r4, r0]
 8008bac:	bd10      	pop	{r4, pc}

08008bae <usart_interrupt_flag_clear>:
 8008bae:	2201      	movs	r2, #1
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	0d8c      	lsrs	r4, r1, #22
 8008bb4:	5823      	ldr	r3, [r4, r0]
 8008bb6:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8008bba:	fa02 f101 	lsl.w	r1, r2, r1
 8008bbe:	ea23 0101 	bic.w	r1, r3, r1
 8008bc2:	5021      	str	r1, [r4, r0]
 8008bc4:	bd10      	pop	{r4, pc}
	...

08008bc8 <gd32_adc_init()>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	f240 6009 	movw	r0, #1545	; 0x609
 8008bce:	4c21      	ldr	r4, [pc, #132]	; (8008c54 <gd32_adc_init()+0x8c>)
 8008bd0:	f7ff fcc0 	bl	8008554 <rcu_periph_clock_enable>
 8008bd4:	2005      	movs	r0, #5
 8008bd6:	f7ff fcef 	bl	80085b8 <rcu_adc_clock_config>
 8008bda:	4620      	mov	r0, r4
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008be2:	f000 fb8d 	bl	8009300 <adc_special_function_config>
 8008be6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008bea:	4620      	mov	r0, r4
 8008bec:	2102      	movs	r1, #2
 8008bee:	f000 fc27 	bl	8009440 <adc_external_trigger_source_config>
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f000 fbab 	bl	8009350 <adc_data_alignment_config>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f000 fb70 	bl	80092e0 <adc_mode_config>
 8008c00:	2202      	movs	r2, #2
 8008c02:	4620      	mov	r0, r4
 8008c04:	4611      	mov	r1, r2
 8008c06:	f000 fbcf 	bl	80093a8 <adc_channel_length_config>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	2307      	movs	r3, #7
 8008c0e:	2210      	movs	r2, #16
 8008c10:	2100      	movs	r1, #0
 8008c12:	f000 fbe6 	bl	80093e2 <adc_inserted_channel_config>
 8008c16:	2307      	movs	r3, #7
 8008c18:	4620      	mov	r0, r4
 8008c1a:	2211      	movs	r2, #17
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	f000 fbe0 	bl	80093e2 <adc_inserted_channel_config>
 8008c22:	2201      	movs	r2, #1
 8008c24:	2102      	movs	r1, #2
 8008c26:	4620      	mov	r0, r4
 8008c28:	f000 fc1b 	bl	8009462 <adc_external_trigger_config>
 8008c2c:	f000 fbb2 	bl	8009394 <adc_tempsensor_vrefint_enable>
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 fb96 	bl	8009362 <adc_enable>
 8008c36:	2100      	movs	r1, #0
 8008c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c3c:	f000 fb38 	bl	80092b0 <udelay(unsigned int, unsigned int)>
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fb96 	bl	8009372 <adc_calibration_enable>
 8008c46:	4620      	mov	r0, r4
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	2102      	movs	r1, #2
 8008c4e:	f000 bc23 	b.w	8009498 <adc_software_trigger_enable>
 8008c52:	bf00      	nop
 8008c54:	40012400 	andmi	r2, r1, r0, lsl #8

08008c58 <gd32_adc_gettemp()>:
 8008c58:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <gd32_adc_gettemp()+0x70>)
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	f8d3 443c 	ldr.w	r4, [r3, #1084]	; 0x43c
 8008c60:	2102      	movs	r1, #2
 8008c62:	481a      	ldr	r0, [pc, #104]	; (8008ccc <gd32_adc_gettemp()+0x74>)
 8008c64:	f000 fc18 	bl	8009498 <adc_software_trigger_enable>
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7f7 ff21 	bl	8000ab0 <__aeabi_ui2d>
 8008c6e:	a310      	add	r3, pc, #64	; (adr r3, 8008cb0 <gd32_adc_gettemp()+0x58>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 ff96 	bl	8000ba4 <__aeabi_dmul>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <gd32_adc_gettemp()+0x78>)
 8008c7c:	f7f7 ff92 	bl	8000ba4 <__aeabi_dmul>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	a10c      	add	r1, pc, #48	; (adr r1, 8008cb8 <gd32_adc_gettemp()+0x60>)
 8008c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c8a:	f7f7 fdd3 	bl	8000834 <__aeabi_dsub>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4b10      	ldr	r3, [pc, #64]	; (8008cd4 <gd32_adc_gettemp()+0x7c>)
 8008c92:	f7f7 ff87 	bl	8000ba4 <__aeabi_dmul>
 8008c96:	a30a      	add	r3, pc, #40	; (adr r3, 8008cc0 <gd32_adc_gettemp()+0x68>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f8 f8ac 	bl	8000df8 <__aeabi_ddiv>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <gd32_adc_gettemp()+0x80>)
 8008ca4:	f7f7 fdc8 	bl	8000838 <__adddf3>
 8008ca8:	f7f7 fa42 	bl	8000130 <__aeabi_d2f>
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	bf00      	nop
 8008cb0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8008cb4:	400a6666 	andmi	r6, sl, r6, ror #12
 8008cb8:	ae147ae1 	vnmlage.f32	s14, s9, s3
 8008cbc:	3ff6e147 	svccc	0x00f6e147
 8008cc0:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
 8008cc4:	40113333 	andsmi	r3, r1, r3, lsr r3
 8008cc8:	40012000 	andmi	r2, r1, r0
 8008ccc:	40012400 	andmi	r2, r1, r0, lsl #8
 8008cd0:	3f300000 	svccc	0x00300000
 8008cd4:	408f4000 	addmi	r4, pc, r0
 8008cd8:	40390000 	eorsmi	r0, r9, r0

08008cdc <_stop() [clone .isra.0]>:
 8008cdc:	b508      	push	{r3, lr}
 8008cde:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <_stop() [clone .isra.0]+0x1c>)
 8008ce0:	f000 fc6a 	bl	80095b8 <i2c_stop_on_bus>
 8008ce4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008ce8:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <_stop() [clone .isra.0]+0x20>)
 8008cea:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8008cee:	0589      	lsls	r1, r1, #22
 8008cf0:	d501      	bpl.n	8008cf6 <_stop() [clone .isra.0]+0x1a>
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	d1f9      	bne.n	8008cea <_stop() [clone .isra.0]+0xe>
 8008cf6:	bd08      	pop	{r3, pc}
 8008cf8:	40005400 	andmi	r5, r0, r0, lsl #8
 8008cfc:	40005000 	andmi	r5, r0, r0

08008d00 <gd32_i2c_begin()>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	f240 7015 	movw	r0, #1813	; 0x715
 8008d06:	f7ff fc25 	bl	8008554 <rcu_periph_clock_enable>
 8008d0a:	4c12      	ldr	r4, [pc, #72]	; (8008d54 <gd32_i2c_begin()+0x54>)
 8008d0c:	f240 6003 	movw	r0, #1539	; 0x603
 8008d10:	f7ff fc20 	bl	8008554 <rcu_periph_clock_enable>
 8008d14:	f240 6003 	movw	r0, #1539	; 0x603
 8008d18:	f7ff fc1c 	bl	8008554 <rcu_periph_clock_enable>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	2340      	movs	r3, #64	; 0x40
 8008d20:	2203      	movs	r2, #3
 8008d22:	211c      	movs	r1, #28
 8008d24:	f7ff fb7a 	bl	800841c <gpio_init>
 8008d28:	2380      	movs	r3, #128	; 0x80
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8008d32:	211c      	movs	r1, #28
 8008d34:	f7ff fb72 	bl	800841c <gpio_init>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	4907      	ldr	r1, [pc, #28]	; (8008d58 <gd32_i2c_begin()+0x58>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f000 fbb9 	bl	80094b4 <i2c_clock_config>
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fc2e 	bl	80095a4 <i2c_enable>
 8008d48:	4620      	mov	r0, r4
 8008d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4e:	2101      	movs	r1, #1
 8008d50:	f000 bc0e 	b.w	8009570 <i2c_ack_config>
 8008d54:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008d58:	00061a80 	andeq	r1, r6, r0, lsl #21

08008d5c <gd32_i2c_set_baudrate(unsigned int)>:
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8008d62:	f000 bba7 	b.w	80094b4 <i2c_clock_config>
 8008d66:	bf00      	nop
 8008d68:	40005400 	andmi	r5, r0, r0, lsl #8

08008d6c <gd32_i2c_set_address(unsigned char)>:
 8008d6c:	4b01      	ldr	r3, [pc, #4]	; (8008d74 <gd32_i2c_set_address(unsigned char)+0x8>)
 8008d6e:	0040      	lsls	r0, r0, #1
 8008d70:	7018      	strb	r0, [r3, #0]
 8008d72:	4770      	bx	lr
 8008d74:	20001820 	andcs	r1, r0, r0, lsr #16

08008d78 <gd32_i2c_write(char const*, unsigned int)>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008d82:	4e2e      	ldr	r6, [pc, #184]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008d84:	f240 6101 	movw	r1, #1537	; 0x601
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f000 fc1f 	bl	80095cc <i2c_flag_get>
 8008d8e:	b138      	cbz	r0, 8008da0 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8008d90:	3d01      	subs	r5, #1
 8008d92:	d1f7      	bne.n	8008d84 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8008d94:	f7ff ffa2 	bl	8008cdc <_stop() [clone .isra.0]>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d9c:	4240      	negs	r0, r0
 8008d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da0:	4826      	ldr	r0, [pc, #152]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008da2:	f000 fc04 	bl	80095ae <i2c_start_on_bus>
 8008da6:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008daa:	4e24      	ldr	r6, [pc, #144]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008dac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008db0:	4630      	mov	r0, r6
 8008db2:	f000 fc0b 	bl	80095cc <i2c_flag_get>
 8008db6:	bb68      	cbnz	r0, 8008e14 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8008db8:	3d01      	subs	r5, #1
 8008dba:	d1f7      	bne.n	8008dac <gd32_i2c_write(char const*, unsigned int)+0x34>
 8008dbc:	e7ea      	b.n	8008d94 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8008dbe:	f240 5101 	movw	r1, #1281	; 0x501
 8008dc2:	481e      	ldr	r0, [pc, #120]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008dc4:	f000 fc0a 	bl	80095dc <i2c_flag_clear>
 8008dc8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008dcc:	4e1b      	ldr	r6, [pc, #108]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008dce:	f240 5107 	movw	r1, #1287	; 0x507
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f000 fbfa 	bl	80095cc <i2c_flag_get>
 8008dd8:	2801      	cmp	r0, #1
 8008dda:	d114      	bne.n	8008e06 <gd32_i2c_write(char const*, unsigned int)+0x8e>
 8008ddc:	4e17      	ldr	r6, [pc, #92]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008dde:	4427      	add	r7, r4
 8008de0:	42a7      	cmp	r7, r4
 8008de2:	d013      	beq.n	8008e0c <gd32_i2c_write(char const*, unsigned int)+0x94>
 8008de4:	4630      	mov	r0, r6
 8008de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dea:	f000 fbea 	bl	80095c2 <i2c_data_transmit>
 8008dee:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008df2:	f240 5102 	movw	r1, #1282	; 0x502
 8008df6:	4630      	mov	r0, r6
 8008df8:	f000 fbe8 	bl	80095cc <i2c_flag_get>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1ef      	bne.n	8008de0 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8008e00:	3d01      	subs	r5, #1
 8008e02:	d1f6      	bne.n	8008df2 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8008e04:	e7c6      	b.n	8008d94 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8008e06:	3d01      	subs	r5, #1
 8008e08:	d1e1      	bne.n	8008dce <gd32_i2c_write(char const*, unsigned int)+0x56>
 8008e0a:	e7c3      	b.n	8008d94 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8008e0c:	f7ff ff66 	bl	8008cdc <_stop() [clone .isra.0]>
 8008e10:	2000      	movs	r0, #0
 8008e12:	e7c3      	b.n	8008d9c <gd32_i2c_write(char const*, unsigned int)+0x24>
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8008e16:	f06f 0201 	mvn.w	r2, #1
 8008e1a:	7819      	ldrb	r1, [r3, #0]
 8008e1c:	4807      	ldr	r0, [pc, #28]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008e1e:	f000 fbb9 	bl	8009594 <i2c_master_addressing>
 8008e22:	f640 75ff 	movw	r5, #4095	; 0xfff
 8008e26:	4e05      	ldr	r6, [pc, #20]	; (8008e3c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8008e28:	f240 5101 	movw	r1, #1281	; 0x501
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f000 fbcd 	bl	80095cc <i2c_flag_get>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d1c3      	bne.n	8008dbe <gd32_i2c_write(char const*, unsigned int)+0x46>
 8008e36:	3d01      	subs	r5, #1
 8008e38:	d1f6      	bne.n	8008e28 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8008e3a:	e7ab      	b.n	8008d94 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8008e3c:	40005400 	andmi	r5, r0, r0, lsl #8
 8008e40:	20001820 	andcs	r1, r0, r0, lsr #16

08008e44 <gd32_i2c_read(char*, unsigned int)>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4680      	mov	r8, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008e50:	4f49      	ldr	r7, [pc, #292]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008e52:	f240 6101 	movw	r1, #1537	; 0x601
 8008e56:	4638      	mov	r0, r7
 8008e58:	f000 fbb8 	bl	80095cc <i2c_flag_get>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	b128      	cbz	r0, 8008e6c <gd32_i2c_read(char*, unsigned int)+0x28>
 8008e60:	3e01      	subs	r6, #1
 8008e62:	d1f6      	bne.n	8008e52 <gd32_i2c_read(char*, unsigned int)+0xe>
 8008e64:	f7ff ff3a 	bl	8008cdc <_stop() [clone .isra.0]>
 8008e68:	2504      	movs	r5, #4
 8008e6a:	e082      	b.n	8008f72 <gd32_i2c_read(char*, unsigned int)+0x12e>
 8008e6c:	2c02      	cmp	r4, #2
 8008e6e:	d103      	bne.n	8008e78 <gd32_i2c_read(char*, unsigned int)+0x34>
 8008e70:	4601      	mov	r1, r0
 8008e72:	4841      	ldr	r0, [pc, #260]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008e74:	f000 fb85 	bl	8009582 <i2c_ackpos_config>
 8008e78:	483f      	ldr	r0, [pc, #252]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008e7a:	f000 fb98 	bl	80095ae <i2c_start_on_bus>
 8008e7e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008e82:	4f3d      	ldr	r7, [pc, #244]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008e84:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f000 fb9f 	bl	80095cc <i2c_flag_get>
 8008e8e:	b910      	cbnz	r0, 8008e96 <gd32_i2c_read(char*, unsigned int)+0x52>
 8008e90:	3e01      	subs	r6, #1
 8008e92:	d1f7      	bne.n	8008e84 <gd32_i2c_read(char*, unsigned int)+0x40>
 8008e94:	e7e6      	b.n	8008e64 <gd32_i2c_read(char*, unsigned int)+0x20>
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <gd32_i2c_read(char*, unsigned int)+0x138>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	7819      	ldrb	r1, [r3, #0]
 8008e9c:	4836      	ldr	r0, [pc, #216]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008e9e:	f000 fb79 	bl	8009594 <i2c_master_addressing>
 8008ea2:	2c02      	cmp	r4, #2
 8008ea4:	d803      	bhi.n	8008eae <gd32_i2c_read(char*, unsigned int)+0x6a>
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4833      	ldr	r0, [pc, #204]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008eaa:	f000 fb61 	bl	8009570 <i2c_ack_config>
 8008eae:	f640 76ff 	movw	r6, #4095	; 0xfff
 8008eb2:	4f31      	ldr	r7, [pc, #196]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008eb4:	f240 5101 	movw	r1, #1281	; 0x501
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f000 fb87 	bl	80095cc <i2c_flag_get>
 8008ebe:	b910      	cbnz	r0, 8008ec6 <gd32_i2c_read(char*, unsigned int)+0x82>
 8008ec0:	3e01      	subs	r6, #1
 8008ec2:	d1f7      	bne.n	8008eb4 <gd32_i2c_read(char*, unsigned int)+0x70>
 8008ec4:	e7ce      	b.n	8008e64 <gd32_i2c_read(char*, unsigned int)+0x20>
 8008ec6:	f240 5101 	movw	r1, #1281	; 0x501
 8008eca:	482b      	ldr	r0, [pc, #172]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008ecc:	f000 fb86 	bl	80095dc <i2c_flag_clear>
 8008ed0:	2c01      	cmp	r4, #1
 8008ed2:	d102      	bne.n	8008eda <gd32_i2c_read(char*, unsigned int)+0x96>
 8008ed4:	4828      	ldr	r0, [pc, #160]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008ed6:	f000 fb6f 	bl	80095b8 <i2c_stop_on_bus>
 8008eda:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008ede:	4e26      	ldr	r6, [pc, #152]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008ee0:	b3ac      	cbz	r4, 8008f4e <gd32_i2c_read(char*, unsigned int)+0x10a>
 8008ee2:	2c03      	cmp	r4, #3
 8008ee4:	d121      	bne.n	8008f2a <gd32_i2c_read(char*, unsigned int)+0xe6>
 8008ee6:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008eea:	f240 5102 	movw	r1, #1282	; 0x502
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f000 fb6c 	bl	80095cc <i2c_flag_get>
 8008ef4:	b918      	cbnz	r0, 8008efe <gd32_i2c_read(char*, unsigned int)+0xba>
 8008ef6:	f1b9 0901 	subs.w	r9, r9, #1
 8008efa:	d1f6      	bne.n	8008eea <gd32_i2c_read(char*, unsigned int)+0xa6>
 8008efc:	e7b2      	b.n	8008e64 <gd32_i2c_read(char*, unsigned int)+0x20>
 8008efe:	2100      	movs	r1, #0
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 fb35 	bl	8009570 <i2c_ack_config>
 8008f06:	f240 5106 	movw	r1, #1286	; 0x506
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 fb5e 	bl	80095cc <i2c_flag_get>
 8008f10:	b138      	cbz	r0, 8008f22 <gd32_i2c_read(char*, unsigned int)+0xde>
 8008f12:	4630      	mov	r0, r6
 8008f14:	f000 fb57 	bl	80095c6 <i2c_data_receive>
 8008f18:	f640 77ff 	movw	r7, #4095	; 0xfff
 8008f1c:	f808 0b01 	strb.w	r0, [r8], #1
 8008f20:	3c01      	subs	r4, #1
 8008f22:	3f01      	subs	r7, #1
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	dcdb      	bgt.n	8008ee0 <gd32_i2c_read(char*, unsigned int)+0x9c>
 8008f28:	e79c      	b.n	8008e64 <gd32_i2c_read(char*, unsigned int)+0x20>
 8008f2a:	2c02      	cmp	r4, #2
 8008f2c:	d1eb      	bne.n	8008f06 <gd32_i2c_read(char*, unsigned int)+0xc2>
 8008f2e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8008f32:	f240 5102 	movw	r1, #1282	; 0x502
 8008f36:	4630      	mov	r0, r6
 8008f38:	f000 fb48 	bl	80095cc <i2c_flag_get>
 8008f3c:	b918      	cbnz	r0, 8008f46 <gd32_i2c_read(char*, unsigned int)+0x102>
 8008f3e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f42:	d1f6      	bne.n	8008f32 <gd32_i2c_read(char*, unsigned int)+0xee>
 8008f44:	e78e      	b.n	8008e64 <gd32_i2c_read(char*, unsigned int)+0x20>
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 fb36 	bl	80095b8 <i2c_stop_on_bus>
 8008f4c:	e7db      	b.n	8008f06 <gd32_i2c_read(char*, unsigned int)+0xc2>
 8008f4e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8008f52:	4a0b      	ldr	r2, [pc, #44]	; (8008f80 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8008f54:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8008f58:	0589      	lsls	r1, r1, #22
 8008f5a:	d502      	bpl.n	8008f62 <gd32_i2c_read(char*, unsigned int)+0x11e>
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	d1f9      	bne.n	8008f54 <gd32_i2c_read(char*, unsigned int)+0x110>
 8008f60:	e782      	b.n	8008e68 <gd32_i2c_read(char*, unsigned int)+0x24>
 8008f62:	2101      	movs	r1, #1
 8008f64:	4804      	ldr	r0, [pc, #16]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008f66:	f000 fb03 	bl	8009570 <i2c_ack_config>
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	4802      	ldr	r0, [pc, #8]	; (8008f78 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8008f6e:	f000 fb08 	bl	8009582 <i2c_ackpos_config>
 8008f72:	4628      	mov	r0, r5
 8008f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f78:	40005400 	andmi	r5, r0, r0, lsl #8
 8008f7c:	20001820 	andcs	r1, r0, r0, lsr #16
 8008f80:	40005000 	andmi	r5, r0, r0

08008f84 <gd32_spi_dma_begin()>:
 8008f84:	b530      	push	{r4, r5, lr}
 8008f86:	f240 6002 	movw	r0, #1538	; 0x602
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	f7ff fae2 	bl	8008554 <rcu_periph_clock_enable>
 8008f90:	f240 6003 	movw	r0, #1539	; 0x603
 8008f94:	f7ff fade 	bl	8008554 <rcu_periph_clock_enable>
 8008f98:	f240 700f 	movw	r0, #1807	; 0x70f
 8008f9c:	f7ff fada 	bl	8008554 <rcu_periph_clock_enable>
 8008fa0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8008fa4:	f7ff fad6 	bl	8008554 <rcu_periph_clock_enable>
 8008fa8:	2338      	movs	r3, #56	; 0x38
 8008faa:	2203      	movs	r2, #3
 8008fac:	2118      	movs	r1, #24
 8008fae:	4827      	ldr	r0, [pc, #156]	; (800904c <gd32_spi_dma_begin()+0xc8>)
 8008fb0:	f7ff fa34 	bl	800841c <gpio_init>
 8008fb4:	4c26      	ldr	r4, [pc, #152]	; (8009050 <gd32_spi_dma_begin()+0xcc>)
 8008fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fba:	2203      	movs	r2, #3
 8008fbc:	2118      	movs	r1, #24
 8008fbe:	4825      	ldr	r0, [pc, #148]	; (8009054 <gd32_spi_dma_begin()+0xd0>)
 8008fc0:	f7ff fa2c 	bl	800841c <gpio_init>
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4824      	ldr	r0, [pc, #144]	; (8009058 <gd32_spi_dma_begin()+0xd4>)
 8008fc8:	f7ff fa82 	bl	80084d0 <gpio_pin_remap_config>
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fb5c 	bl	800968a <i2s_disable>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4920      	ldr	r1, [pc, #128]	; (800905c <gd32_spi_dma_begin()+0xd8>)
 8008fda:	f000 fb21 	bl	8009620 <i2s_psc_config>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2210      	movs	r2, #16
 8008fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fb0b 	bl	8009602 <i2s_init>
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fb47 	bl	8009680 <i2s_enable>
 8008ff2:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 8008ff6:	f240 5001 	movw	r0, #1281	; 0x501
 8008ffa:	f7ff faab 	bl	8008554 <rcu_periph_clock_enable>
 8008ffe:	4620      	mov	r0, r4
 8009000:	2101      	movs	r1, #1
 8009002:	f7ff f907 	bl	8008214 <dma_deinit>
 8009006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800900a:	2501      	movs	r5, #1
 800900c:	9304      	str	r3, [sp, #16]
 800900e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009016:	4912      	ldr	r1, [pc, #72]	; (8009060 <gd32_spi_dma_begin()+0xdc>)
 8009018:	4620      	mov	r0, r4
 800901a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800901e:	9206      	str	r2, [sp, #24]
 8009020:	4629      	mov	r1, r5
 8009022:	aa01      	add	r2, sp, #4
 8009024:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009028:	f88d 501e 	strb.w	r5, [sp, #30]
 800902c:	f7ff f90e 	bl	800824c <dma_init>
 8009030:	4629      	mov	r1, r5
 8009032:	4620      	mov	r0, r4
 8009034:	f7ff f944 	bl	80082c0 <dma_circulation_disable>
 8009038:	4629      	mov	r1, r5
 800903a:	4620      	mov	r0, r4
 800903c:	f7ff f950 	bl	80082e0 <dma_memory_to_memory_disable>
 8009040:	2200      	movs	r2, #0
 8009042:	4b08      	ldr	r3, [pc, #32]	; (8009064 <gd32_spi_dma_begin()+0xe0>)
 8009044:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8009048:	b009      	add	sp, #36	; 0x24
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009050:	40003c00 	andmi	r3, r0, r0, lsl #24
 8009054:	40010800 	andmi	r0, r1, r0, lsl #16
 8009058:	00300400 	eorseq	r0, r0, r0, lsl #8
 800905c:	00030d40 	andeq	r0, r3, r0, asr #26
 8009060:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8009064:	40020000 	andmi	r0, r2, r0

08009068 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4c08      	ldr	r4, [pc, #32]	; (800908c <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 800906c:	4605      	mov	r5, r0
 800906e:	4620      	mov	r0, r4
 8009070:	f000 fb0b 	bl	800968a <i2s_disable>
 8009074:	2300      	movs	r3, #0
 8009076:	4620      	mov	r0, r4
 8009078:	461a      	mov	r2, r3
 800907a:	0969      	lsrs	r1, r5, #5
 800907c:	f000 fad0 	bl	8009620 <i2s_psc_config>
 8009080:	4620      	mov	r0, r4
 8009082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009086:	f000 bafb 	b.w	8009680 <i2s_enable>
 800908a:	bf00      	nop
 800908c:	40003c00 	andmi	r3, r0, r0, lsl #24

08009090 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	4801      	ldr	r0, [pc, #4]	; (800909c <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20001824 	andcs	r1, r0, r4, lsr #16

080090a0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80090a2:	3101      	adds	r1, #1
 80090a4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80090a8:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80090b4:	f043 0301 	orr.w	r3, r3, #1
 80090b8:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80090bc:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80090c0:	4803      	ldr	r0, [pc, #12]	; (80090d0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80090c2:	2100      	movs	r1, #0
 80090c4:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80090c8:	f000 bae4 	b.w	8009694 <spi_dma_enable>
 80090cc:	40020000 	andmi	r0, r2, r0
 80090d0:	40003c00 	andmi	r3, r0, r0, lsl #24

080090d4 <gd32_spi_dma_tx_is_active()>:
 80090d4:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <gd32_spi_dma_tx_is_active()+0x10>)
 80090d6:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80090da:	3800      	subs	r0, #0
 80090dc:	bf18      	it	ne
 80090de:	2001      	movne	r0, #1
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40020000 	andmi	r0, r2, r0

080090e8 <gd32_uart_begin>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	4604      	mov	r4, r0
 80090ec:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80090f0:	461d      	mov	r5, r3
 80090f2:	460f      	mov	r7, r1
 80090f4:	4616      	mov	r6, r2
 80090f6:	f7ff fa2d 	bl	8008554 <rcu_periph_clock_enable>
 80090fa:	4b5c      	ldr	r3, [pc, #368]	; (800926c <gd32_uart_begin+0x184>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	f000 8083 	beq.w	8009208 <gd32_uart_begin+0x120>
 8009102:	d857      	bhi.n	80091b4 <gd32_uart_begin+0xcc>
 8009104:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009108:	429c      	cmp	r4, r3
 800910a:	d06d      	beq.n	80091e8 <gd32_uart_begin+0x100>
 800910c:	f240 7012 	movw	r0, #1810	; 0x712
 8009110:	f7ff fa20 	bl	8008554 <rcu_periph_clock_enable>
 8009114:	f240 6004 	movw	r0, #1540	; 0x604
 8009118:	f7ff fa1c 	bl	8008554 <rcu_periph_clock_enable>
 800911c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009120:	2203      	movs	r2, #3
 8009122:	2118      	movs	r1, #24
 8009124:	4852      	ldr	r0, [pc, #328]	; (8009270 <gd32_uart_begin+0x188>)
 8009126:	f7ff f979 	bl	800841c <gpio_init>
 800912a:	2104      	movs	r1, #4
 800912c:	4850      	ldr	r0, [pc, #320]	; (8009270 <gd32_uart_begin+0x188>)
 800912e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009132:	2203      	movs	r2, #3
 8009134:	f7ff f972 	bl	800841c <gpio_init>
 8009138:	2101      	movs	r1, #1
 800913a:	484e      	ldr	r0, [pc, #312]	; (8009274 <gd32_uart_begin+0x18c>)
 800913c:	f7ff f9c8 	bl	80084d0 <gpio_pin_remap_config>
 8009140:	4620      	mov	r0, r4
 8009142:	f7ff fc75 	bl	8008a30 <usart_deinit>
 8009146:	68e3      	ldr	r3, [r4, #12]
 8009148:	4639      	mov	r1, r7
 800914a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800914e:	60e3      	str	r3, [r4, #12]
 8009150:	4620      	mov	r0, r4
 8009152:	f7ff fcad 	bl	8008ab0 <usart_baudrate_set>
 8009156:	2e09      	cmp	r6, #9
 8009158:	bf0c      	ite	eq
 800915a:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 800915e:	2100      	movne	r1, #0
 8009160:	4620      	mov	r0, r4
 8009162:	f7ff fcd5 	bl	8008b10 <usart_word_length_set>
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	4620      	mov	r0, r4
 800916a:	2b02      	cmp	r3, #2
 800916c:	bf0c      	ite	eq
 800916e:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 8009172:	2100      	movne	r1, #0
 8009174:	f7ff fcd4 	bl	8008b20 <usart_stop_bit_set>
 8009178:	2d01      	cmp	r5, #1
 800917a:	d072      	beq.n	8009262 <gd32_uart_begin+0x17a>
 800917c:	2d02      	cmp	r5, #2
 800917e:	d173      	bne.n	8009268 <gd32_uart_begin+0x180>
 8009180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009184:	4620      	mov	r0, r4
 8009186:	f7ff fcbb 	bl	8008b00 <usart_parity_config>
 800918a:	2100      	movs	r1, #0
 800918c:	4620      	mov	r0, r4
 800918e:	f7ff fcdb 	bl	8008b48 <usart_hardware_flow_rts_config>
 8009192:	2100      	movs	r1, #0
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff fcdd 	bl	8008b54 <usart_hardware_flow_cts_config>
 800919a:	2104      	movs	r1, #4
 800919c:	4620      	mov	r0, r4
 800919e:	f7ff fccd 	bl	8008b3c <usart_receive_config>
 80091a2:	2108      	movs	r1, #8
 80091a4:	4620      	mov	r0, r4
 80091a6:	f7ff fcc3 	bl	8008b30 <usart_transmit_config>
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091b0:	60e3      	str	r3, [r4, #12]
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	4b30      	ldr	r3, [pc, #192]	; (8009278 <gd32_uart_begin+0x190>)
 80091b6:	429c      	cmp	r4, r3
 80091b8:	d03b      	beq.n	8009232 <gd32_uart_begin+0x14a>
 80091ba:	f240 600e 	movw	r0, #1550	; 0x60e
 80091be:	f7ff f9c9 	bl	8008554 <rcu_periph_clock_enable>
 80091c2:	f240 6002 	movw	r0, #1538	; 0x602
 80091c6:	f7ff f9c5 	bl	8008554 <rcu_periph_clock_enable>
 80091ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ce:	2203      	movs	r2, #3
 80091d0:	2118      	movs	r1, #24
 80091d2:	482a      	ldr	r0, [pc, #168]	; (800927c <gd32_uart_begin+0x194>)
 80091d4:	f7ff f922 	bl	800841c <gpio_init>
 80091d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091dc:	2203      	movs	r2, #3
 80091de:	2104      	movs	r1, #4
 80091e0:	4826      	ldr	r0, [pc, #152]	; (800927c <gd32_uart_begin+0x194>)
 80091e2:	f7ff f91b 	bl	800841c <gpio_init>
 80091e6:	e7ab      	b.n	8009140 <gd32_uart_begin+0x58>
 80091e8:	f240 7011 	movw	r0, #1809	; 0x711
 80091ec:	f7ff f9b2 	bl	8008554 <rcu_periph_clock_enable>
 80091f0:	f240 6002 	movw	r0, #1538	; 0x602
 80091f4:	f7ff f9ae 	bl	8008554 <rcu_periph_clock_enable>
 80091f8:	2304      	movs	r3, #4
 80091fa:	2203      	movs	r2, #3
 80091fc:	2118      	movs	r1, #24
 80091fe:	481f      	ldr	r0, [pc, #124]	; (800927c <gd32_uart_begin+0x194>)
 8009200:	f7ff f90c 	bl	800841c <gpio_init>
 8009204:	2308      	movs	r3, #8
 8009206:	e7e9      	b.n	80091dc <gd32_uart_begin+0xf4>
 8009208:	f240 7013 	movw	r0, #1811	; 0x713
 800920c:	f7ff f9a2 	bl	8008554 <rcu_periph_clock_enable>
 8009210:	f240 6004 	movw	r0, #1540	; 0x604
 8009214:	f7ff f99e 	bl	8008554 <rcu_periph_clock_enable>
 8009218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800921c:	2203      	movs	r2, #3
 800921e:	2118      	movs	r1, #24
 8009220:	4813      	ldr	r0, [pc, #76]	; (8009270 <gd32_uart_begin+0x188>)
 8009222:	f7ff f8fb 	bl	800841c <gpio_init>
 8009226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800922a:	2203      	movs	r2, #3
 800922c:	2104      	movs	r1, #4
 800922e:	4810      	ldr	r0, [pc, #64]	; (8009270 <gd32_uart_begin+0x188>)
 8009230:	e7d7      	b.n	80091e2 <gd32_uart_begin+0xfa>
 8009232:	f240 7014 	movw	r0, #1812	; 0x714
 8009236:	f7ff f98d 	bl	8008554 <rcu_periph_clock_enable>
 800923a:	f240 6004 	movw	r0, #1540	; 0x604
 800923e:	f7ff f989 	bl	8008554 <rcu_periph_clock_enable>
 8009242:	f240 6005 	movw	r0, #1541	; 0x605
 8009246:	f7ff f985 	bl	8008554 <rcu_periph_clock_enable>
 800924a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800924e:	2203      	movs	r2, #3
 8009250:	2118      	movs	r1, #24
 8009252:	4807      	ldr	r0, [pc, #28]	; (8009270 <gd32_uart_begin+0x188>)
 8009254:	f7ff f8e2 	bl	800841c <gpio_init>
 8009258:	2304      	movs	r3, #4
 800925a:	2203      	movs	r2, #3
 800925c:	4619      	mov	r1, r3
 800925e:	4808      	ldr	r0, [pc, #32]	; (8009280 <gd32_uart_begin+0x198>)
 8009260:	e7bf      	b.n	80091e2 <gd32_uart_begin+0xfa>
 8009262:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009266:	e78d      	b.n	8009184 <gd32_uart_begin+0x9c>
 8009268:	2100      	movs	r1, #0
 800926a:	e78b      	b.n	8009184 <gd32_uart_begin+0x9c>
 800926c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009270:	40011000 	andmi	r1, r1, r0
 8009274:	00140010 	andseq	r0, r4, r0, lsl r0
 8009278:	40005000 	andmi	r5, r0, r0
 800927c:	40010800 	andmi	r0, r1, r0, lsl #16
 8009280:	40011400 	andmi	r1, r1, r0, lsl #8

08009284 <micros_init()>:
 8009284:	4770      	bx	lr
	...

08009288 <udelay_init()>:
 8009288:	4a07      	ldr	r2, [pc, #28]	; (80092a8 <udelay_init()+0x20>)
 800928a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800928e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009292:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009296:	2200      	movs	r2, #0
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <udelay_init()+0x24>)
 800929a:	605a      	str	r2, [r3, #4]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	f042 0201 	orr.w	r2, r2, #1
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	e000ed00 	and	lr, r0, r0, lsl #26
 80092ac:	e0001000 	and	r1, r0, r0

080092b0 <udelay(unsigned int, unsigned int)>:
 80092b0:	236c      	movs	r3, #108	; 0x6c
 80092b2:	b510      	push	{r4, lr}
 80092b4:	4358      	muls	r0, r3
 80092b6:	b909      	cbnz	r1, 80092bc <udelay(unsigned int, unsigned int)+0xc>
 80092b8:	4b08      	ldr	r3, [pc, #32]	; (80092dc <udelay(unsigned int, unsigned int)+0x2c>)
 80092ba:	6859      	ldr	r1, [r3, #4]
 80092bc:	2300      	movs	r3, #0
 80092be:	4c07      	ldr	r4, [pc, #28]	; (80092dc <udelay(unsigned int, unsigned int)+0x2c>)
 80092c0:	6862      	ldr	r2, [r4, #4]
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d0fc      	beq.n	80092c0 <udelay(unsigned int, unsigned int)+0x10>
 80092c6:	bf28      	it	cs
 80092c8:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 80092cc:	1a5b      	subs	r3, r3, r1
 80092ce:	4413      	add	r3, r2
 80092d0:	4283      	cmp	r3, r0
 80092d2:	d300      	bcc.n	80092d6 <udelay(unsigned int, unsigned int)+0x26>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	4611      	mov	r1, r2
 80092d8:	e7f2      	b.n	80092c0 <udelay(unsigned int, unsigned int)+0x10>
 80092da:	bf00      	nop
 80092dc:	e0001000 	and	r1, r0, r0

080092e0 <adc_mode_config>:
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <adc_mode_config+0x1c>)
 80092e2:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 80092e6:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 80092ea:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 80092ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80092f2:	4302      	orrs	r2, r0
 80092f4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40012000 	andmi	r2, r1, r0

08009300 <adc_special_function_config>:
 8009300:	b510      	push	{r4, lr}
 8009302:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009306:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 800930a:	f001 0102 	and.w	r1, r1, #2
 800930e:	b17a      	cbz	r2, 8009330 <adc_special_function_config+0x30>
 8009310:	b11b      	cbz	r3, 800931a <adc_special_function_config+0x1a>
 8009312:	6843      	ldr	r3, [r0, #4]
 8009314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009318:	6043      	str	r3, [r0, #4]
 800931a:	b11c      	cbz	r4, 8009324 <adc_special_function_config+0x24>
 800931c:	6843      	ldr	r3, [r0, #4]
 800931e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009322:	6043      	str	r3, [r0, #4]
 8009324:	b119      	cbz	r1, 800932e <adc_special_function_config+0x2e>
 8009326:	6883      	ldr	r3, [r0, #8]
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	6083      	str	r3, [r0, #8]
 800932e:	bd10      	pop	{r4, pc}
 8009330:	b11b      	cbz	r3, 800933a <adc_special_function_config+0x3a>
 8009332:	6843      	ldr	r3, [r0, #4]
 8009334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009338:	6043      	str	r3, [r0, #4]
 800933a:	b11c      	cbz	r4, 8009344 <adc_special_function_config+0x44>
 800933c:	6843      	ldr	r3, [r0, #4]
 800933e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009342:	6043      	str	r3, [r0, #4]
 8009344:	2900      	cmp	r1, #0
 8009346:	d0f2      	beq.n	800932e <adc_special_function_config+0x2e>
 8009348:	6883      	ldr	r3, [r0, #8]
 800934a:	f023 0302 	bic.w	r3, r3, #2
 800934e:	e7ed      	b.n	800932c <adc_special_function_config+0x2c>

08009350 <adc_data_alignment_config>:
 8009350:	6883      	ldr	r3, [r0, #8]
 8009352:	b119      	cbz	r1, 800935c <adc_data_alignment_config+0xc>
 8009354:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009358:	6083      	str	r3, [r0, #8]
 800935a:	4770      	bx	lr
 800935c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009360:	e7fa      	b.n	8009358 <adc_data_alignment_config+0x8>

08009362 <adc_enable>:
 8009362:	6883      	ldr	r3, [r0, #8]
 8009364:	07db      	lsls	r3, r3, #31
 8009366:	bf5e      	ittt	pl
 8009368:	6883      	ldrpl	r3, [r0, #8]
 800936a:	f043 0301 	orrpl.w	r3, r3, #1
 800936e:	6083      	strpl	r3, [r0, #8]
 8009370:	4770      	bx	lr

08009372 <adc_calibration_enable>:
 8009372:	6883      	ldr	r3, [r0, #8]
 8009374:	f100 0208 	add.w	r2, r0, #8
 8009378:	f043 0308 	orr.w	r3, r3, #8
 800937c:	6083      	str	r3, [r0, #8]
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	0719      	lsls	r1, r3, #28
 8009382:	d4fc      	bmi.n	800937e <adc_calibration_enable+0xc>
 8009384:	6883      	ldr	r3, [r0, #8]
 8009386:	f043 0304 	orr.w	r3, r3, #4
 800938a:	6083      	str	r3, [r0, #8]
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	075b      	lsls	r3, r3, #29
 8009390:	d4fc      	bmi.n	800938c <adc_calibration_enable+0x1a>
 8009392:	4770      	bx	lr

08009394 <adc_tempsensor_vrefint_enable>:
 8009394:	4a03      	ldr	r2, [pc, #12]	; (80093a4 <adc_tempsensor_vrefint_enable+0x10>)
 8009396:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 800939a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800939e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80093a2:	4770      	bx	lr
 80093a4:	40012000 	andmi	r2, r1, r0

080093a8 <adc_channel_length_config>:
 80093a8:	2901      	cmp	r1, #1
 80093aa:	d002      	beq.n	80093b2 <adc_channel_length_config+0xa>
 80093ac:	2902      	cmp	r1, #2
 80093ae:	d00c      	beq.n	80093ca <adc_channel_length_config+0x22>
 80093b0:	4770      	bx	lr
 80093b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80093b4:	3a01      	subs	r2, #1
 80093b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80093bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80093be:	0512      	lsls	r2, r2, #20
 80093c0:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80093c4:	431a      	orrs	r2, r3
 80093c6:	62c2      	str	r2, [r0, #44]	; 0x2c
 80093c8:	4770      	bx	lr
 80093ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093cc:	3a01      	subs	r2, #1
 80093ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80093d2:	6383      	str	r3, [r0, #56]	; 0x38
 80093d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093d6:	0512      	lsls	r2, r2, #20
 80093d8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80093dc:	431a      	orrs	r2, r3
 80093de:	6382      	str	r2, [r0, #56]	; 0x38
 80093e0:	4770      	bx	lr

080093e2 <adc_inserted_channel_config>:
 80093e2:	b530      	push	{r4, r5, lr}
 80093e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80093e6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80093e8:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80093ec:	1a61      	subs	r1, r4, r1
 80093ee:	f06f 0404 	mvn.w	r4, #4
 80093f2:	4361      	muls	r1, r4
 80093f4:	241f      	movs	r4, #31
 80093f6:	310f      	adds	r1, #15
 80093f8:	408c      	lsls	r4, r1
 80093fa:	ea25 0504 	bic.w	r5, r5, r4
 80093fe:	fa02 f101 	lsl.w	r1, r2, r1
 8009402:	4329      	orrs	r1, r5
 8009404:	2a09      	cmp	r2, #9
 8009406:	6381      	str	r1, [r0, #56]	; 0x38
 8009408:	d80b      	bhi.n	8009422 <adc_inserted_channel_config+0x40>
 800940a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800940e:	2207      	movs	r2, #7
 8009410:	6904      	ldr	r4, [r0, #16]
 8009412:	408a      	lsls	r2, r1
 8009414:	ea24 0402 	bic.w	r4, r4, r2
 8009418:	fa03 f201 	lsl.w	r2, r3, r1
 800941c:	4322      	orrs	r2, r4
 800941e:	6102      	str	r2, [r0, #16]
 8009420:	bd30      	pop	{r4, r5, pc}
 8009422:	2a11      	cmp	r2, #17
 8009424:	d8fc      	bhi.n	8009420 <adc_inserted_channel_config+0x3e>
 8009426:	2407      	movs	r4, #7
 8009428:	3a0a      	subs	r2, #10
 800942a:	68c1      	ldr	r1, [r0, #12]
 800942c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009430:	4094      	lsls	r4, r2
 8009432:	ea21 0104 	bic.w	r1, r1, r4
 8009436:	fa03 f202 	lsl.w	r2, r3, r2
 800943a:	430a      	orrs	r2, r1
 800943c:	60c2      	str	r2, [r0, #12]
 800943e:	e7ef      	b.n	8009420 <adc_inserted_channel_config+0x3e>

08009440 <adc_external_trigger_source_config>:
 8009440:	2901      	cmp	r1, #1
 8009442:	d002      	beq.n	800944a <adc_external_trigger_source_config+0xa>
 8009444:	2902      	cmp	r1, #2
 8009446:	d008      	beq.n	800945a <adc_external_trigger_source_config+0x1a>
 8009448:	4770      	bx	lr
 800944a:	6883      	ldr	r3, [r0, #8]
 800944c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009450:	6083      	str	r3, [r0, #8]
 8009452:	6883      	ldr	r3, [r0, #8]
 8009454:	431a      	orrs	r2, r3
 8009456:	6082      	str	r2, [r0, #8]
 8009458:	4770      	bx	lr
 800945a:	6883      	ldr	r3, [r0, #8]
 800945c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009460:	e7f6      	b.n	8009450 <adc_external_trigger_source_config+0x10>

08009462 <adc_external_trigger_config>:
 8009462:	f001 0301 	and.w	r3, r1, #1
 8009466:	f001 0102 	and.w	r1, r1, #2
 800946a:	b152      	cbz	r2, 8009482 <adc_external_trigger_config+0x20>
 800946c:	b11b      	cbz	r3, 8009476 <adc_external_trigger_config+0x14>
 800946e:	6883      	ldr	r3, [r0, #8]
 8009470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009474:	6083      	str	r3, [r0, #8]
 8009476:	b119      	cbz	r1, 8009480 <adc_external_trigger_config+0x1e>
 8009478:	6883      	ldr	r3, [r0, #8]
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	6083      	str	r3, [r0, #8]
 8009480:	4770      	bx	lr
 8009482:	b11b      	cbz	r3, 800948c <adc_external_trigger_config+0x2a>
 8009484:	6883      	ldr	r3, [r0, #8]
 8009486:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800948a:	6083      	str	r3, [r0, #8]
 800948c:	2900      	cmp	r1, #0
 800948e:	d0f7      	beq.n	8009480 <adc_external_trigger_config+0x1e>
 8009490:	6883      	ldr	r3, [r0, #8]
 8009492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009496:	e7f2      	b.n	800947e <adc_external_trigger_config+0x1c>

08009498 <adc_software_trigger_enable>:
 8009498:	07ca      	lsls	r2, r1, #31
 800949a:	bf42      	ittt	mi
 800949c:	6883      	ldrmi	r3, [r0, #8]
 800949e:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80094a2:	6083      	strmi	r3, [r0, #8]
 80094a4:	078b      	lsls	r3, r1, #30
 80094a6:	bf42      	ittt	mi
 80094a8:	6883      	ldrmi	r3, [r0, #8]
 80094aa:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80094ae:	6083      	strmi	r3, [r0, #8]
 80094b0:	4770      	bx	lr
	...

080094b4 <i2c_clock_config>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	4605      	mov	r5, r0
 80094b8:	2002      	movs	r0, #2
 80094ba:	460c      	mov	r4, r1
 80094bc:	4617      	mov	r7, r2
 80094be:	f7ff f8fd 	bl	80086bc <rcu_clock_freq_get>
 80094c2:	4927      	ldr	r1, [pc, #156]	; (8009560 <i2c_clock_config+0xac>)
 80094c4:	4a27      	ldr	r2, [pc, #156]	; (8009564 <i2c_clock_config+0xb0>)
 80094c6:	fbb0 f1f1 	udiv	r1, r0, r1
 80094ca:	4290      	cmp	r0, r2
 80094cc:	bf34      	ite	cc
 80094ce:	460b      	movcc	r3, r1
 80094d0:	2336      	movcs	r3, #54	; 0x36
 80094d2:	686e      	ldr	r6, [r5, #4]
 80094d4:	4a24      	ldr	r2, [pc, #144]	; (8009568 <i2c_clock_config+0xb4>)
 80094d6:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80094da:	431e      	orrs	r6, r3
 80094dc:	4294      	cmp	r4, r2
 80094de:	606e      	str	r6, [r5, #4]
 80094e0:	d816      	bhi.n	8009510 <i2c_clock_config+0x5c>
 80094e2:	3101      	adds	r1, #1
 80094e4:	2935      	cmp	r1, #53	; 0x35
 80094e6:	d90d      	bls.n	8009504 <i2c_clock_config+0x50>
 80094e8:	2336      	movs	r3, #54	; 0x36
 80094ea:	622b      	str	r3, [r5, #32]
 80094ec:	0064      	lsls	r4, r4, #1
 80094ee:	fbb0 f4f4 	udiv	r4, r0, r4
 80094f2:	2c04      	cmp	r4, #4
 80094f4:	bf38      	it	cc
 80094f6:	2404      	movcc	r4, #4
 80094f8:	69e8      	ldr	r0, [r5, #28]
 80094fa:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80094fe:	4304      	orrs	r4, r0
 8009500:	61ec      	str	r4, [r5, #28]
 8009502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009504:	2902      	cmp	r1, #2
 8009506:	d801      	bhi.n	800950c <i2c_clock_config+0x58>
 8009508:	2302      	movs	r3, #2
 800950a:	e7ee      	b.n	80094ea <i2c_clock_config+0x36>
 800950c:	6229      	str	r1, [r5, #32]
 800950e:	e7ed      	b.n	80094ec <i2c_clock_config+0x38>
 8009510:	4a16      	ldr	r2, [pc, #88]	; (800956c <i2c_clock_config+0xb8>)
 8009512:	4294      	cmp	r4, r2
 8009514:	d8f5      	bhi.n	8009502 <i2c_clock_config+0x4e>
 8009516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800951a:	4353      	muls	r3, r2
 800951c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009520:	fbb3 f3f2 	udiv	r3, r3, r2
 8009524:	3301      	adds	r3, #1
 8009526:	622b      	str	r3, [r5, #32]
 8009528:	b997      	cbnz	r7, 8009550 <i2c_clock_config+0x9c>
 800952a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800952e:	fbb0 f4f4 	udiv	r4, r0, r4
 8009532:	69eb      	ldr	r3, [r5, #28]
 8009534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009538:	61eb      	str	r3, [r5, #28]
 800953a:	f3c4 030b 	ubfx	r3, r4, #0, #12
 800953e:	b90b      	cbnz	r3, 8009544 <i2c_clock_config+0x90>
 8009540:	f044 0401 	orr.w	r4, r4, #1
 8009544:	69eb      	ldr	r3, [r5, #28]
 8009546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954a:	61eb      	str	r3, [r5, #28]
 800954c:	69e8      	ldr	r0, [r5, #28]
 800954e:	e7d6      	b.n	80094fe <i2c_clock_config+0x4a>
 8009550:	2119      	movs	r1, #25
 8009552:	434c      	muls	r4, r1
 8009554:	69eb      	ldr	r3, [r5, #28]
 8009556:	fbb0 f4f4 	udiv	r4, r0, r4
 800955a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800955e:	e7eb      	b.n	8009538 <i2c_clock_config+0x84>
 8009560:	000f4240 	andeq	r4, pc, r0, asr #4
 8009564:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8009568:	000186a0 	andeq	r8, r1, r0, lsr #13
 800956c:	00061a80 	andeq	r1, r6, r0, lsl #21

08009570 <i2c_ack_config>:
 8009570:	6803      	ldr	r3, [r0, #0]
 8009572:	2901      	cmp	r1, #1
 8009574:	bf0c      	ite	eq
 8009576:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 800957a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	4770      	bx	lr

08009582 <i2c_ackpos_config>:
 8009582:	6803      	ldr	r3, [r0, #0]
 8009584:	b919      	cbnz	r1, 800958e <i2c_ackpos_config+0xc>
 8009586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800958a:	6003      	str	r3, [r0, #0]
 800958c:	4770      	bx	lr
 800958e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009592:	e7fa      	b.n	800958a <i2c_ackpos_config+0x8>

08009594 <i2c_master_addressing>:
 8009594:	3202      	adds	r2, #2
 8009596:	bf0c      	ite	eq
 8009598:	f021 0101 	biceq.w	r1, r1, #1
 800959c:	f041 0101 	orrne.w	r1, r1, #1
 80095a0:	6101      	str	r1, [r0, #16]
 80095a2:	4770      	bx	lr

080095a4 <i2c_enable>:
 80095a4:	6803      	ldr	r3, [r0, #0]
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	6003      	str	r3, [r0, #0]
 80095ac:	4770      	bx	lr

080095ae <i2c_start_on_bus>:
 80095ae:	6803      	ldr	r3, [r0, #0]
 80095b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b4:	6003      	str	r3, [r0, #0]
 80095b6:	4770      	bx	lr

080095b8 <i2c_stop_on_bus>:
 80095b8:	6803      	ldr	r3, [r0, #0]
 80095ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095be:	6003      	str	r3, [r0, #0]
 80095c0:	4770      	bx	lr

080095c2 <i2c_data_transmit>:
 80095c2:	6101      	str	r1, [r0, #16]
 80095c4:	4770      	bx	lr

080095c6 <i2c_data_receive>:
 80095c6:	6900      	ldr	r0, [r0, #16]
 80095c8:	b2c0      	uxtb	r0, r0
 80095ca:	4770      	bx	lr

080095cc <i2c_flag_get>:
 80095cc:	098b      	lsrs	r3, r1, #6
 80095ce:	5818      	ldr	r0, [r3, r0]
 80095d0:	f001 011f 	and.w	r1, r1, #31
 80095d4:	40c8      	lsrs	r0, r1
 80095d6:	f000 0001 	and.w	r0, r0, #1
 80095da:	4770      	bx	lr

080095dc <i2c_flag_clear>:
 80095dc:	f240 5301 	movw	r3, #1281	; 0x501
 80095e0:	4299      	cmp	r1, r3
 80095e2:	b510      	push	{r4, lr}
 80095e4:	d102      	bne.n	80095ec <i2c_flag_clear+0x10>
 80095e6:	6943      	ldr	r3, [r0, #20]
 80095e8:	6983      	ldr	r3, [r0, #24]
 80095ea:	bd10      	pop	{r4, pc}
 80095ec:	2201      	movs	r2, #1
 80095ee:	098c      	lsrs	r4, r1, #6
 80095f0:	5823      	ldr	r3, [r4, r0]
 80095f2:	f001 011f 	and.w	r1, r1, #31
 80095f6:	fa02 f101 	lsl.w	r1, r2, r1
 80095fa:	ea23 0101 	bic.w	r1, r3, r1
 80095fe:	5021      	str	r1, [r4, r0]
 8009600:	e7f3      	b.n	80095ea <i2c_flag_clear+0xe>

08009602 <i2s_init>:
 8009602:	b510      	push	{r4, lr}
 8009604:	69c4      	ldr	r4, [r0, #28]
 8009606:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 800960a:	f024 0408 	bic.w	r4, r4, #8
 800960e:	0424      	lsls	r4, r4, #16
 8009610:	0c24      	lsrs	r4, r4, #16
 8009612:	431c      	orrs	r4, r3
 8009614:	4314      	orrs	r4, r2
 8009616:	430c      	orrs	r4, r1
 8009618:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800961c:	61c4      	str	r4, [r0, #28]
 800961e:	bd10      	pop	{r4, pc}

08009620 <i2s_psc_config>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	461f      	mov	r7, r3
 8009624:	2302      	movs	r3, #2
 8009626:	4605      	mov	r5, r0
 8009628:	6203      	str	r3, [r0, #32]
 800962a:	2000      	movs	r0, #0
 800962c:	460c      	mov	r4, r1
 800962e:	4616      	mov	r6, r2
 8009630:	f7ff f844 	bl	80086bc <rcu_clock_freq_get>
 8009634:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009638:	f04f 010a 	mov.w	r1, #10
 800963c:	d11b      	bne.n	8009676 <i2s_psc_config+0x56>
 800963e:	0a00      	lsrs	r0, r0, #8
 8009640:	4348      	muls	r0, r1
 8009642:	fbb0 f4f4 	udiv	r4, r0, r4
 8009646:	230a      	movs	r3, #10
 8009648:	3405      	adds	r4, #5
 800964a:	fbb4 f4f3 	udiv	r4, r4, r3
 800964e:	f004 0301 	and.w	r3, r4, #1
 8009652:	0864      	lsrs	r4, r4, #1
 8009654:	1ea2      	subs	r2, r4, #2
 8009656:	2afd      	cmp	r2, #253	; 0xfd
 8009658:	bf86      	itte	hi
 800965a:	2300      	movhi	r3, #0
 800965c:	2402      	movhi	r4, #2
 800965e:	021b      	lslls	r3, r3, #8
 8009660:	431c      	orrs	r4, r3
 8009662:	433c      	orrs	r4, r7
 8009664:	622c      	str	r4, [r5, #32]
 8009666:	69eb      	ldr	r3, [r5, #28]
 8009668:	f023 0307 	bic.w	r3, r3, #7
 800966c:	61eb      	str	r3, [r5, #28]
 800966e:	69ea      	ldr	r2, [r5, #28]
 8009670:	4316      	orrs	r6, r2
 8009672:	61ee      	str	r6, [r5, #28]
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009676:	b90e      	cbnz	r6, 800967c <i2s_psc_config+0x5c>
 8009678:	0940      	lsrs	r0, r0, #5
 800967a:	e7e1      	b.n	8009640 <i2s_psc_config+0x20>
 800967c:	0980      	lsrs	r0, r0, #6
 800967e:	e7df      	b.n	8009640 <i2s_psc_config+0x20>

08009680 <i2s_enable>:
 8009680:	69c3      	ldr	r3, [r0, #28]
 8009682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009686:	61c3      	str	r3, [r0, #28]
 8009688:	4770      	bx	lr

0800968a <i2s_disable>:
 800968a:	69c3      	ldr	r3, [r0, #28]
 800968c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009690:	61c3      	str	r3, [r0, #28]
 8009692:	4770      	bx	lr

08009694 <spi_dma_enable>:
 8009694:	6843      	ldr	r3, [r0, #4]
 8009696:	b919      	cbnz	r1, 80096a0 <spi_dma_enable+0xc>
 8009698:	f043 0302 	orr.w	r3, r3, #2
 800969c:	6043      	str	r3, [r0, #4]
 800969e:	4770      	bx	lr
 80096a0:	f043 0301 	orr.w	r3, r3, #1
 80096a4:	e7fa      	b.n	800969c <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

080096a8 <vtable for RDMResponder-0xe4>:
 80096a8:	00000003 	andeq	r0, r0, r3
 80096ac:	000000aa 	andeq	r0, r0, sl, lsr #1
 80096b0:	00000006 	andeq	r0, r0, r6
 80096b4:	00000000 	andeq	r0, r0, r0
 80096b8:	01ff0000 	mvnseq	r0, r0
 80096bc:	00000001 	andeq	r0, r0, r1
 80096c0:	00000001 	andeq	r0, r0, r1
 80096c4:	00000001 	andeq	r0, r0, r1
 80096c8:	00000000 	andeq	r0, r0, r0
 80096cc:	18002000 	stmdane	r0, {sp}
 80096d0:	00180400 	andseq	r0, r8, r0, lsl #8
 80096d4:	00000007 	andeq	r0, r0, r7
	...
 80096e0:	03020100 	movweq	r0, #8448	; 0x2100
 80096e4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 80096e8:	00000009 	andeq	r0, r0, r9
 80096ec:	03020100 	movweq	r0, #8448	; 0x2100
 80096f0:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 80096f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80096f8:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 80096fc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009700:	32310064 	eorscc	r0, r1, #100	; 0x64
 8009704:	3a37353a 	bcc	8dd6bf4 <__exidx_end+0xdcbe1c>
 8009708:	4a003531 	bmi	8016bd4 <__exidx_end+0xbdfc>
 800970c:	20206e61 	eorcs	r6, r0, r1, ror #28
 8009710:	30322038 	eorscc	r2, r2, r8, lsr r0
 8009714:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 8009718:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 800971c:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 8009720:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8009724:	6f43005d 	svcvs	0x0043005d
 8009728:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800972c:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8009734 <_etext+0x8c>
 8009730:	4f200065 	svcmi	0x00200065
 8009734:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8009738:	73252074 			; <UNDEFINED> instruction: 0x73252074
 800973c:	6554000a 	ldrbvs	r0, [r4, #-10]
 8009740:	70207473 	eorvc	r7, r0, r3, ror r4
 8009744:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009748:	3a206e72 	bcc	8825118 <__exidx_end+0x81a340>
 800974c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8009750:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 8009754:	4452000a 	ldrbmi	r0, [r2], #-10
 8009758:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 800975c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009760:	20726564 	rsbscs	r6, r2, r4, ror #10
 8009764:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8009768:	0031206c 	eorseq	r2, r1, ip, rrx
 800976c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009770:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8009774:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8009778:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 800977c:	20676966 	rsbcs	r6, r7, r6, ror #18
 8009780:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8009784:	3a732500 	bcc	9cd2b8c <__exidx_end+0x1cc7db4>
 8009788:	00007525 	andeq	r7, r0, r5, lsr #10

0800978c <vtable for RDMResponder>:
	...
 8009794:	080013c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, ip}
 8009798:	0800140d 	stmdaeq	r0, {r0, r2, r3, sl, ip}
 800979c:	08001355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, ip}
 80097a0:	080013a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, ip}

080097a4 <vtable for FactoryDefaults>:
	...
 80097ac:	080012f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, ip}
 80097b0:	0800133b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, ip}
 80097b4:	08001389 	stmdaeq	r0, {r0, r3, r7, r8, r9, ip}

080097b8 <vtable for PixelDmxStartStop>:
	...
 80097c0:	080012f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, ip}
 80097c4:	08001347 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, ip}
 80097c8:	080012fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, ip}
 80097cc:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}

080097d0 <vtable for Reboot>:
	...
 80097d8:	0800132d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, ip}
 80097dc:	0800132f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, ip}
 80097e0:	08001399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, ip}

080097e4 <SOFTWARE_VERSION>:
 80097e4:	00312e31 	eorseq	r2, r1, r1, lsr lr
 80097e8:	30322d25 	eorscc	r2, r2, r5, lsr #26
 80097ec:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 80097f0:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 80097f4:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 80097f8:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 80097fc:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 8009800:	50007335 	andpl	r7, r0, r5, lsr r3
 8009804:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 8009808:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800980c:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 8009810:	47006570 	smlsdxmi	r0, r0, r5, r6
 8009814:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8009818:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800981c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8009820:	614d0074 	hvcvs	53252	; 0xd004
 8009824:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 8009828:	50207473 	eorpl	r7, r0, r3, ror r4
 800982c:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009830:	50006e72 	andpl	r6, r0, r2, ror lr
 8009834:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 8009838:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800983c:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 8009840:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

08009845 <SOFTWARE_VERSION>:
 8009845:	00312e31 	eorseq	r2, r1, r1, lsr lr
 8009849:	00555043 	subseq	r5, r5, r3, asr #32
 800984d:	 	andeq	r0, r0, r0

08009850 <vtable for CpuTemperature>:
	...
 8009858:	08002605 	stmdaeq	r0, {r0, r2, r9, sl, sp}
 800985c:	08002615 	stmdaeq	r0, {r0, r2, r4, r9, sl, sp}
 8009860:	08002601 	stmdaeq	r0, {r0, r9, sl, sp}
 8009864:	08002607 	stmdaeq	r0, {r0, r1, r2, r9, sl, sp}

08009868 <vtable for RDMSensorBH170>:
	...
 8009870:	08002887 	stmdaeq	r0, {r0, r1, r2, r7, fp, sp}
 8009874:	08002889 	stmdaeq	r0, {r0, r3, r7, fp, sp}
 8009878:	0800273b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, r9, sl, sp}
 800987c:	08002809 	stmdaeq	r0, {r0, r3, fp, sp}

08009880 <vtable for RDMSensorMCP9808>:
	...
 8009888:	08002879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, sp}
 800988c:	0800287b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, fp, sp}
 8009890:	08002741 	stmdaeq	r0, {r0, r6, r8, r9, sl, sp}
 8009894:	080027f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, sp}

08009898 <vtable for RDMSensorHTU21DHumidity>:
	...
 80098a0:	0800286b 	stmdaeq	r0, {r0, r1, r3, r5, r6, fp, sp}
 80098a4:	0800286d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, sp}
 80098a8:	08002747 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, sp}
 80098ac:	080027e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, sp}

080098b0 <vtable for RDMSensorHTU21DTemperature>:
	...
 80098b8:	0800285d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, sp}
 80098bc:	0800285f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, sp}
 80098c0:	0800274d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, sp}
 80098c4:	080027d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, sp}

080098c8 <vtable for RDMSensorINA219Current>:
	...
 80098d0:	0800284f 	stmdaeq	r0, {r0, r1, r2, r3, r6, fp, sp}
 80098d4:	08002851 	stmdaeq	r0, {r0, r4, r6, fp, sp}
 80098d8:	08002753 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, sp}
 80098dc:	080027bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, sp}

080098e0 <vtable for RDMSensorINA219Power>:
	...
 80098e8:	08002841 	stmdaeq	r0, {r0, r6, fp, sp}
 80098ec:	08002843 	stmdaeq	r0, {r0, r1, r6, fp, sp}
 80098f0:	08002759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, sp}
 80098f4:	080027ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, sp}

080098f8 <vtable for RDMSensorINA219Voltage>:
	...
 8009900:	08002833 	stmdaeq	r0, {r0, r1, r4, r5, fp, sp}
 8009904:	08002835 	stmdaeq	r0, {r0, r2, r4, r5, fp, sp}
 8009908:	0800275f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp}
 800990c:	08002791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, sp}

08009910 <vtable for RDMSensorSI7021Humidity>:
	...
 8009918:	08002825 	stmdaeq	r0, {r0, r2, r5, fp, sp}
 800991c:	08002827 	stmdaeq	r0, {r0, r1, r2, r5, fp, sp}
 8009920:	08002765 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, sp}
 8009924:	08002781 	stmdaeq	r0, {r0, r7, r8, r9, sl, sp}

08009928 <vtable for RDMSensorSI7021Temperature>:
	...
 8009930:	08002817 	stmdaeq	r0, {r0, r1, r2, r4, fp, sp}
 8009934:	08002819 	stmdaeq	r0, {r0, r3, r4, fp, sp}
 8009938:	0800276b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, sl, sp}
 800993c:	08002771 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, sp}

08009940 <sensor::bh1750::DESCRIPTION>:
 8009940:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009944:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009948:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800994c:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800994e <sensor::htu21d::temperature::DESCRIPTION>:
 800994e:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 8009952:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009956:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800995a:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800995e:	00657275 	rsbeq	r7, r5, r5, ror r2

08009962 <sensor::htu21d::humidity::DESCRIPTION>:
 8009962:	616c6552 	cmnvs	ip, r2, asr r5
 8009966:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800996a:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800996e:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 8009972:	 	svcvs	0x00500079

08009974 <sensor::ina219::power::DESCRIPTION>:
 8009974:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 8009978:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800997a <sensor::ina219::current::DESCRIPTION>:
 800997a:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800997e:	00746e65 	rsbseq	r6, r4, r5, ror #28

08009982 <sensor::ina219::voltage::DESCRIPTION>:
 8009982:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 8009986:	00656761 	rsbeq	r6, r5, r1, ror #14

0800998a <sensor::si7021::temperature::DESCRIPTION>:
 800998a:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800998e:	20746e65 	rsbscs	r6, r4, r5, ror #28
 8009992:	706d6554 	rsbvc	r6, sp, r4, asr r5
 8009996:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800999a:	00657275 	rsbeq	r7, r5, r5, ror r2

0800999e <sensor::si7021::humidity::DESCRIPTION>:
 800999e:	616c6552 	cmnvs	ip, r2, asr r5
 80099a2:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 80099a6:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 80099aa:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 80099ae:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

080099b0 <sensor::mcp9808::DESCRIPTION>:
 80099b0:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 80099b4:	20746e65 	rsbscs	r6, r4, r5, ror #28
 80099b8:	706d6554 	rsbvc	r6, sp, r4, asr r5
 80099bc:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 80099c0:	00657275 	rsbeq	r7, r5, r5, ror r2

080099c4 <vtable for RDMSensor>:
	...
 80099d4:	08007c21 	stmdaeq	r0, {r0, r5, sl, fp, ip, sp, lr}
 80099d8:	08007c21 	stmdaeq	r0, {r0, r5, sl, fp, ip, sp, lr}
 80099dc:	204d4452 	subcs	r4, sp, r2, asr r4
 80099e0:	70736552 	rsbsvc	r6, r3, r2, asr r5
 80099e4:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 80099e8:	6f632072 	svcvs	0x00632072
 80099ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80099f0:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 80099f4:	0a6e6f69 	beq	9ba57a0 <__exidx_end+0x1b9a9c8>
 80099f8:	72502000 	subsvc	r2, r0, #0
 80099fc:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 8009a00:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 8009a04:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8009a08:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8009a0c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8009a10:	4420000a 	strtmi	r0, [r0], #-10
 8009a14:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 8009a18:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8009a1c:	20207373 	eorcs	r7, r0, r3, ror r3
 8009a20:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a24:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8009a28:	4420000a 	strtmi	r0, [r0], #-10
 8009a2c:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 8009a30:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 8009a34:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 8009a38:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a3c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8009a40:	5020000a 	eorpl	r0, r0, sl
 8009a44:	6f737265 	svcvs	0x00737265
 8009a48:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 8009a4c:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 8009a50:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 8009a54:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8009a58:	2a2e255b 	bcs	8b92fcc <__exidx_end+0xb881f4>
 8009a5c:	000a5d73 	andeq	r5, sl, r3, ror sp
 8009a60:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 8009a64:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 8009a68:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8009a6c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a70:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009a74:	000a6425 	andeq	r6, sl, r5, lsr #8
 8009a78:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8009a7c:	73726f73 	cmnvc	r2, #460	; 0x1cc
 8009a80:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a84:	20202020 	eorcs	r2, r0, r0, lsr #32
 8009a88:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8009a8c:	000a6425 	andeq	r6, sl, r5, lsr #8

08009a90 <DEVICE_LABEL>:
 8009a90:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8009a94:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 8009a98:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8009a9c:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 8009aa0:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009aa4:	00726564 	rsbseq	r6, r2, r4, ror #10

08009aa8 <vtable for RDMDeviceResponder>:
	...
 8009ab0:	08003f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, ip, sp}
 8009ab4:	08003f45 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, fp, ip, sp}
 8009ab8:	08003f1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, fp, ip, sp}
 8009abc:	08003f21 	stmdaeq	r0, {r0, r5, r8, r9, sl, fp, ip, sp}
 8009ac0:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8009ac4:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 8009ac8:	6d450052 	stclvs	0, cr0, [r5, #-328]	; 0xfffffeb8
 8009acc:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8009ad0:	00006465 	andeq	r6, r0, r5, ror #8

08009ad4 <UID_ALL>:
 8009ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8009ad8:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08009adc <RDMHandler::PID_DEFINITIONS>:
 8009adc:	00000060 	andeq	r0, r0, r0, rrx
 8009ae0:	08004489 	stmdaeq	r0, {r0, r3, r7, sl, lr}
	...
 8009af0:	01010000 	mrseq	r0, (UNDEF: 1)
 8009af4:	00000080 	andeq	r0, r0, r0, lsl #1
 8009af8:	0800458d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, lr}
	...
 8009b08:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b0c:	00000081 	andeq	r0, r0, r1, lsl #1
 8009b10:	080045a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, lr}
	...
 8009b20:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b24:	00000082 	andeq	r0, r0, r2, lsl #1
 8009b28:	080045c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, lr}
 8009b2c:	00000000 	andeq	r0, r0, r0
 8009b30:	08004fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	00000000 	andeq	r0, r0, r0
 8009b38:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b3c:	00000090 	muleq	r0, r0, r0
 8009b40:	080044f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, lr}
 8009b44:	00000000 	andeq	r0, r0, r0
 8009b48:	08004f0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, fp, lr}
 8009b4c:	00000000 	andeq	r0, r0, r0
 8009b50:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b54:	00001000 	andeq	r1, r0, r0
 8009b58:	08004629 	stmdaeq	r0, {r0, r3, r5, r9, sl, lr}
 8009b5c:	00000000 	andeq	r0, r0, r0
 8009b60:	080048a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, lr}
 8009b64:	00000000 	andeq	r0, r0, r0
 8009b68:	01010000 	mrseq	r0, (UNDEF: 1)
 8009b6c:	00001001 	andeq	r1, r0, r1
	...
 8009b78:	08004861 	stmdaeq	r0, {r0, r5, r6, fp, lr}
 8009b7c:	00000000 	andeq	r0, r0, r0
 8009b80:	01010100 	mrseq	r0, (UNDEF: 17)
 8009b84:	00000050 	andeq	r0, r0, r0, asr r0
 8009b88:	0800441d 	stmdaeq	r0, {r0, r2, r3, r4, sl, lr}
	...
 8009b98:	00010000 	andeq	r0, r1, r0
 8009b9c:	00000070 	andeq	r0, r0, r0, ror r0
 8009ba0:	08004571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, lr}
	...
 8009bb0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009bb4:	000000a0 	andeq	r0, r0, r0, lsr #1
 8009bb8:	0800463d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, lr}
	...
 8009bc8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009bcc:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009bd0:	0800463d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, lr}
 8009bd4:	00000000 	andeq	r0, r0, r0
 8009bd8:	08004925 	stmdaeq	r0, {r0, r2, r5, r8, fp, lr}
 8009bdc:	00000000 	andeq	r0, r0, r0
 8009be0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009be4:	000000c0 	andeq	r0, r0, r0, asr #1
 8009be8:	08004605 	stmdaeq	r0, {r0, r2, r9, sl, lr}
	...
 8009bf8:	00010000 	andeq	r0, r1, r0
 8009bfc:	000000c1 	andeq	r0, r0, r1, asr #1
 8009c00:	0800496d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, fp, lr}
	...
 8009c10:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c14:	000000c2 	andeq	r0, r0, r2, asr #1
 8009c18:	080047ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, lr}
	...
 8009c28:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c2c:	000000e0 	andeq	r0, r0, r0, ror #1
 8009c30:	0800465d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, lr}
 8009c34:	00000000 	andeq	r0, r0, r0
 8009c38:	0800498d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, lr}
 8009c3c:	00000000 	andeq	r0, r0, r0
 8009c40:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c44:	000000e1 	andeq	r0, r0, r1, ror #1
 8009c48:	080049dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, lr}
	...
 8009c58:	00010101 	andeq	r0, r1, r1, lsl #2
 8009c5c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009c60:	08004699 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, lr}
 8009c64:	00000000 	andeq	r0, r0, r0
 8009c68:	08004a61 	stmdaeq	r0, {r0, r5, r6, r9, fp, lr}
 8009c6c:	00000000 	andeq	r0, r0, r0
 8009c70:	00010000 	andeq	r0, r1, r0
 8009c74:	00000120 	andeq	r0, r0, r0, lsr #2
 8009c78:	080047c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, lr}
	...
 8009c88:	00010100 	andeq	r0, r1, r0, lsl #2
 8009c8c:	00000121 	andeq	r0, r0, r1, lsr #2
 8009c90:	08004e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, lr}
	...
 8009ca0:	00010102 	andeq	r0, r1, r2, lsl #2
 8009ca4:	00000200 	andeq	r0, r0, r0, lsl #4
 8009ca8:	08004ab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, lr}
	...
 8009cb8:	00010101 	andeq	r0, r1, r1, lsl #2
 8009cbc:	00000201 	andeq	r0, r0, r1, lsl #4
 8009cc0:	08004b59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, lr}
 8009cc4:	00000000 	andeq	r0, r0, r0
 8009cc8:	08004bd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp, lr}
 8009ccc:	00000000 	andeq	r0, r0, r0
 8009cd0:	00010101 	andeq	r0, r1, r1, lsl #2
 8009cd4:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 8009ce0:	08004c8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, lr}
 8009ce4:	00000000 	andeq	r0, r0, r0
 8009ce8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009cec:	00000400 	andeq	r0, r0, r0, lsl #8
 8009cf0:	080046d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, lr}
 8009cf4:	00000000 	andeq	r0, r0, r0
 8009cf8:	08004cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, lr}
 8009cfc:	00000000 	andeq	r0, r0, r0
 8009d00:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d04:	00000500 	andeq	r0, r0, r0, lsl #10
 8009d08:	080046fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, lr}
 8009d0c:	00000000 	andeq	r0, r0, r0
 8009d10:	08004ce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, lr}
 8009d14:	00000000 	andeq	r0, r0, r0
 8009d18:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d1c:	00000501 	andeq	r0, r0, r1, lsl #10
 8009d20:	08004719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, lr}
 8009d24:	00000000 	andeq	r0, r0, r0
 8009d28:	08004d2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, fp, lr}
 8009d2c:	00000000 	andeq	r0, r0, r0
 8009d30:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d34:	00000603 	andeq	r0, r0, r3, lsl #12
 8009d38:	08004735 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, lr}
 8009d3c:	00000000 	andeq	r0, r0, r0
 8009d40:	08004d75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, fp, lr}
 8009d44:	00000000 	andeq	r0, r0, r0
 8009d48:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d4c:	00001010 	andeq	r1, r0, r0, lsl r0
 8009d50:	0800477d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, lr}
 8009d54:	00000000 	andeq	r0, r0, r0
 8009d58:	08004ddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, lr}
 8009d5c:	00000000 	andeq	r0, r0, r0
 8009d60:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d64:	00001020 	andeq	r1, r0, r0, lsr #32
 8009d68:	0800478b 	stmdaeq	r0, {r0, r1, r3, r7, r8, r9, sl, lr}
 8009d6c:	00000000 	andeq	r0, r0, r0
 8009d70:	08004e0b 	stmdaeq	r0, {r0, r1, r3, r9, sl, fp, lr}
 8009d74:	00000000 	andeq	r0, r0, r0
 8009d78:	00010100 	andeq	r0, r1, r0, lsl #2
 8009d7c:	00001021 	andeq	r1, r0, r1, lsr #32
 8009d80:	08004e3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, sl, fp, lr}
	...
 8009d90:	00010101 	andeq	r0, r1, r1, lsl #2
 8009d94:	00001040 	andeq	r1, r0, r0, asr #32
 8009d98:	0800528d 	stmdaeq	r0, {r0, r2, r3, r7, r9, ip, lr}
 8009d9c:	00000000 	andeq	r0, r0, r0
 8009da0:	080052a1 	stmdaeq	r0, {r0, r5, r7, r9, ip, lr}
 8009da4:	00000000 	andeq	r0, r0, r0
 8009da8:	00010100 	andeq	r0, r1, r0, lsl #2

08009dac <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 8009dac:	00000060 	andeq	r0, r0, r0, rrx
 8009db0:	08004489 	stmdaeq	r0, {r0, r3, r7, sl, lr}
	...
 8009dc0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009dc4:	000000c0 	andeq	r0, r0, r0, asr #1
 8009dc8:	08004605 	stmdaeq	r0, {r0, r2, r9, sl, lr}
	...
 8009dd8:	00010100 	andeq	r0, r1, r0, lsl #2
 8009ddc:	00001000 	andeq	r1, r0, r0
 8009de0:	08004629 	stmdaeq	r0, {r0, r3, r5, r9, sl, lr}
 8009de4:	00000000 	andeq	r0, r0, r0
 8009de8:	080048a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, lr}
 8009dec:	00000000 	andeq	r0, r0, r0
 8009df0:	00010100 	andeq	r0, r1, r0, lsl #2
 8009df4:	00000050 	andeq	r0, r0, r0, asr r0
 8009df8:	0800441d 	stmdaeq	r0, {r0, r2, r3, r4, sl, lr}
	...
 8009e08:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e0c:	00000070 	andeq	r0, r0, r0, ror r0
 8009e10:	08004571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, lr}
	...
 8009e20:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e24:	000000e0 	andeq	r0, r0, r0, ror #1
 8009e28:	0800465d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, lr}
 8009e2c:	00000000 	andeq	r0, r0, r0
 8009e30:	0800498d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, lr}
 8009e34:	00000000 	andeq	r0, r0, r0
 8009e38:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e3c:	000000e1 	andeq	r0, r0, r1, ror #1
 8009e40:	080049dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, lr}
	...
 8009e50:	00010101 	andeq	r0, r1, r1, lsl #2
 8009e54:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e58:	08004699 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, lr}
 8009e5c:	00000000 	andeq	r0, r0, r0
 8009e60:	08004a61 	stmdaeq	r0, {r0, r5, r6, r9, fp, lr}
 8009e64:	00000000 	andeq	r0, r0, r0
 8009e68:	00010100 	andeq	r0, r1, r0, lsl #2
 8009e6c:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8009e70:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 8009e74:	6f697469 	svcvs	0x00697469
 8009e78:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 8009e7c:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 8009e80:	00797469 	rsbseq	r7, r9, r9, ror #8
 8009e84:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 8009e88:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8009e8c:	614d2079 	hvcvs	53769	; 0xd209
 8009e90:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 8009e94:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 8009e98:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 8009e9c:	6f430074 	svcvs	0x00430074
 8009ea0:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009ea4:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 8009ea8:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 8009eac:	61727462 	cmnvs	r2, r2, ror #8
 8009eb0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 8009eb4:	6f432065 	svcvs	0x00432065
 8009eb8:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009ebc:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 8009ec0:	80e22072 	rschi	r2, r2, r2, ror r0
 8009ec4:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 8009ec8:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 8009ecc:	0065756c 	rsbeq	r7, r5, ip, ror #10
 8009ed0:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 8009ed4:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 8009ed8:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009edc:	6f6c6f43 	svcvs	0x006c6f43
 8009ee0:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009ee4:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009ee8:	209380e2 	addscs	r8, r3, r2, ror #1
 8009eec:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 8009ef0:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 8009ef4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8009ef8:	62755300 	rsbsvs	r5, r5, #0, 6
 8009efc:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 8009f00:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009f04:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009e8c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 8009f08:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009f0c:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009f10:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 8009f14:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 8009f18:	41006174 	tstmi	r0, r4, ror r1
 8009f1c:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 8009f20:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009f24:	6f6c6f43 	svcvs	0x006c6f43
 8009f28:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009f2c:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009f30:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 8009f34:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 8009f38:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 8009f3c:	43206576 			; <UNDEFINED> instruction: 0x43206576
 8009f40:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009f44:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 8009f48:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 8009f4c:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 8009f50:	41006e65 	tstmi	r0, r5, ror #28
 8009f54:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 8009f58:	20657669 	rsbcs	r7, r5, r9, ror #12
 8009f5c:	6f6c6f43 	svcvs	0x006c6f43
 8009f60:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 8009f64:	20726578 	rsbscs	r6, r2, r8, ror r5
 8009f68:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 8009f6c:	43006575 	movwmi	r6, #1397	; 0x575
 8009f70:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009f74:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 8009f78:	61726570 	cmnvs	r2, r0, ror r5
 8009f7c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8009f80:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 8009f84:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8009f88:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 8009f8c:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 8009f90:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009f94:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009f1c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 8009f98:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009f9c:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009fa0:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 8009fa4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8009fa8:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 8009fac:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 8009fb0:	6f432065 	svcvs	0x00432065
 8009fb4:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 8009fb8:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 8009fbc:	202d2072 	eorcs	r2, sp, r2, ror r0
 8009fc0:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 8009fc4:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 8009fc8:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 8009fcc:	43206576 			; <UNDEFINED> instruction: 0x43206576
 8009fd0:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 8009fd4:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 8009fd8:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 8009fdc:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 8009fe0:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 8009fe4:	00657469 	rsbeq	r7, r5, r9, ror #8
 8009fe8:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 8009fec:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 8009ff0:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 8009f78 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 8009ff4:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 8009ff8:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 8009ffc:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800a000:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800a004:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a008:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800a00c:	61727462 	cmnvs	r2, r2, ror #8
 800a010:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a014:	6f432065 	svcvs	0x00432065
 800a018:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a01c:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a020:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a024:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800a028:	53006575 	movwpl	r6, #1397	; 0x575
 800a02c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800a030:	6f697461 	svcvs	0x00697461
 800a034:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a038:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a03c:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a040:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a044:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a048:	61746f52 	cmnvs	r4, r2, asr pc
 800a04c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a050:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a054:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a058:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a05c:	73697250 	cmnvc	r9, #80, 4
 800a060:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a064:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a068:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a06c:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a070:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a074:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a078:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a07c:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a080:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a084:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a088:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a08c:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a090:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a094:	6f724600 	svcvs	0x00724600
 800a098:	442f7473 	strtmi	r7, [pc], #-1139	; 800a0a0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a09c:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a0a0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a0a4:	72745300 	rsbsvc	r5, r4, #0, 6
 800a0a8:	2f65626f 	svccs	0x0065626f
 800a0ac:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a0b0:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a0b4:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 8009f54 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a0b8:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a0bc:	72460073 	subvc	r0, r6, #115	; 0x73
 800a0c0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a0c4:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a0c8:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a0cc:	72460072 	subvc	r0, r6, #114	; 0x72
 800a0d0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a0d4:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a0d8:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a0dc:	6f722072 	svcvs	0x00722072
 800a0e0:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a0e4:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a0e8:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a0ec:	61420072 	hvcvs	8194	; 0x2002
 800a0f0:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a0f4:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a0f8:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a0fc:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a100:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8009f38 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a104:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800a108:	6f697463 	svcvs	0x00697463
 800a10c:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800a110:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800a114:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800a118:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a11c:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800a120:	6e6e6168 	powvsez	f6, f6, #0.0
 800a124:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800a128:	6f726361 	svcvs	0x00726361
 800a12c:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a130:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8009f68 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800a134:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800a138:	6f207961 	svcvs	0x00207961
 800a13c:	6f702072 	svcvs	0x00702072
 800a140:	20726577 	rsbscs	r6, r2, r7, ror r5
 800a144:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a148:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a14c:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800a150:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a154:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a158:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800a15c:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800a160:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a164:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800a168:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a16c:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800a170:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800a174:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800a178:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800a17c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a180:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800a184:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800a18c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800a188:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800a18c:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800a190:	6f632079 	svcvs	0x00632079
 800a194:	6f72746e 	svcvs	0x0072746e
 800a198:	7020736c 	eorvc	r7, r0, ip, ror #6
 800a19c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a1a0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a1a4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800a1a8:	73657270 	cmnvc	r5, #112, 4
 800a1ac:	73746e65 	cmnvc	r4, #1616	; 0x650
 800a1b0:	616f4320 	cmnvs	pc, r0, lsr #6
 800a1b4:	20657372 	rsbcs	r7, r5, r2, ror r3
 800a1b8:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a1bc:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800a1c0:	70207469 	eorvc	r7, r0, r9, ror #8
 800a1c4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a1c8:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a1cc:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800a1d0:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800a1d4:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a1d8:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800a1dc:	20746962 	rsbscs	r6, r4, r2, ror #18
 800a1e0:	61726170 	cmnvs	r2, r0, ror r1
 800a1e4:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800a1e8:	53007372 	movwpl	r7, #882	; 0x372
 800a1ec:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a1f0:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a1f4:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800a1f8:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a1fc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800a200:	6f662065 	svcvs	0x00662065
 800a204:	73612072 	cmnvc	r1, #114	; 0x72
 800a208:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a20c:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a210:	72617020 	rsbvc	r7, r1, #32
 800a214:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a218:	53007265 	movwpl	r7, #613	; 0x265
 800a21c:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a220:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a224:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800a228:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800a22c:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800a230:	20797469 	rsbscs	r7, r9, r9, ror #8
 800a234:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a238:	6f737361 	svcvs	0x00737361
 800a23c:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a240:	70206465 	eorvc	r6, r0, r5, ror #8
 800a244:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a248:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a24c:	6f6c5300 	svcvs	0x006c5300
 800a250:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800a254:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800a258:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800a25c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a260:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a0ac <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800a264:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800a268:	6f666e69 	svcvs	0x00666e69
 800a26c:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a270:	72617020 	rsbvc	r7, r1, #32
 800a274:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a278:	53007265 	movwpl	r7, #613	; 0x265
 800a27c:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a280:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a284:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800a288:	70207865 	eorvc	r7, r0, r5, ror #16
 800a28c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800a290:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a294:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a298:	6f737361 	svcvs	0x00737361
 800a29c:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800a2a0:	70206465 	eorvc	r6, r0, r5, ror #8
 800a2a4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a2a8:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a2ac:	6f6c5300 	svcvs	0x006c5300
 800a2b0:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800a2b4:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800a2b8:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800a2bc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800a2c0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800a2c4:	6f662064 	svcvs	0x00662064
 800a2c8:	73612072 	cmnvc	r1, #114	; 0x72
 800a2cc:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800a2d0:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800a2d4:	72617020 	rsbvc	r7, r1, #32
 800a2d8:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800a2dc:	43007265 	movwmi	r7, #613	; 0x265
 800a2e0:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800a2e4:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800a2e8:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800a2ec:	6f722f78 	svcvs	0x00722f78
 800a2f0:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a2f4:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800a2f8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a2fc:	00006c6f 	andeq	r6, r0, pc, ror #24

0800a300 <s_tTableC2>:
 800a300:	00000001 	andeq	r0, r0, r1
 800a304:	08009e7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, ip, pc}
 800a308:	00000002 	andeq	r0, r0, r2
 800a30c:	08009e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, pc}
 800a310:	00000101 	andeq	r0, r0, r1, lsl #2
 800a314:	08009e95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, ip, pc}
 800a318:	00000102 	andeq	r0, r0, r2, lsl #2
 800a31c:	08009e99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, ip, pc}
 800a320:	00000201 	andeq	r0, r0, r1, lsl #4
 800a324:	08009e9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r9, sl, fp, ip, pc}
 800a328:	00000202 	andeq	r0, r0, r2, lsl #4
 800a32c:	08009eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, ip, pc}
 800a330:	00000203 	andeq	r0, r0, r3, lsl #4
 800a334:	08009ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, pc}
 800a338:	00000204 	andeq	r0, r0, r4, lsl #4
 800a33c:	08009ef9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 800a340:	00000205 	andeq	r0, r0, r5, lsl #4
 800a344:	08009f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, ip, pc}
 800a348:	00000206 	andeq	r0, r0, r6, lsl #4
 800a34c:	08009f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 800a350:	00000207 	andeq	r0, r0, r7, lsl #4
 800a354:	08009f53 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, fp, ip, pc}
 800a358:	00000208 	andeq	r0, r0, r8, lsl #4
 800a35c:	08009f6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, pc}
 800a360:	00000211 	andeq	r0, r0, r1, lsl r2
 800a364:	08009f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, pc}
 800a368:	00000212 	andeq	r0, r0, r2, lsl r2
 800a36c:	08009fa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, ip, pc}
 800a370:	00000213 	andeq	r0, r0, r3, lsl r2
 800a374:	08009fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, ip, pc}
 800a378:	00000214 	andeq	r0, r0, r4, lsl r2
 800a37c:	08009fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800a380:	00000215 	andeq	r0, r0, r5, lsl r2
 800a384:	0800a00a 	stmdaeq	r0, {r1, r3, sp, pc}
 800a388:	00000216 	andeq	r0, r0, r6, lsl r2
 800a38c:	0800a027 	stmdaeq	r0, {r0, r1, r2, r5, sp, pc}
 800a390:	00000217 	andeq	r0, r0, r7, lsl r2
 800a394:	0800a02b 	stmdaeq	r0, {r0, r1, r3, r5, sp, pc}
 800a398:	00000301 	andeq	r0, r0, r1, lsl #6
 800a39c:	0800a036 	stmdaeq	r0, {r1, r2, r4, r5, sp, pc}
 800a3a0:	00000302 	andeq	r0, r0, r2, lsl #6
 800a3a4:	0800a048 	stmdaeq	r0, {r3, r6, sp, pc}
 800a3a8:	00000303 	andeq	r0, r0, r3, lsl #6
 800a3ac:	0800a05c 	stmdaeq	r0, {r2, r3, r4, r6, sp, pc}
 800a3b0:	00000304 	andeq	r0, r0, r4, lsl #6
 800a3b4:	0800a068 	stmdaeq	r0, {r3, r5, r6, sp, pc}
 800a3b8:	00000401 	andeq	r0, r0, r1, lsl #8
 800a3bc:	0800a076 	stmdaeq	r0, {r1, r2, r4, r5, r6, sp, pc}
 800a3c0:	00000402 	andeq	r0, r0, r2, lsl #8
 800a3c4:	0800a085 	stmdaeq	r0, {r0, r2, r7, sp, pc}
 800a3c8:	00000403 	andeq	r0, r0, r3, lsl #8
 800a3cc:	0800a095 	stmdaeq	r0, {r0, r2, r4, r7, sp, pc}
 800a3d0:	00000404 	andeq	r0, r0, r4, lsl #8
 800a3d4:	0800a0a5 	stmdaeq	r0, {r0, r2, r5, r7, sp, pc}
 800a3d8:	00000405 	andeq	r0, r0, r5, lsl #8
 800a3dc:	0800a0b4 	stmdaeq	r0, {r2, r4, r5, r7, sp, pc}
 800a3e0:	00000406 	andeq	r0, r0, r6, lsl #8
 800a3e4:	0800a0be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, sp, pc}
 800a3e8:	00000407 	andeq	r0, r0, r7, lsl #8
 800a3ec:	0800a0ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sp, pc}
 800a3f0:	00000408 	andeq	r0, r0, r8, lsl #8
 800a3f4:	0800a0e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, sp, pc}
 800a3f8:	00000409 	andeq	r0, r0, r9, lsl #8
 800a3fc:	0800a0ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sp, pc}
 800a400:	00000501 	andeq	r0, r0, r1, lsl #10
 800a404:	0800a0f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sp, pc}
 800a408:	00000502 	andeq	r0, r0, r2, lsl #10
 800a40c:	0800a10f 	stmdaeq	r0, {r0, r1, r2, r3, r8, sp, pc}
 800a410:	00000504 	andeq	r0, r0, r4, lsl #10
 800a414:	0800a127 	stmdaeq	r0, {r0, r1, r2, r5, r8, sp, pc}
 800a418:	00000505 	andeq	r0, r0, r5, lsl #10
 800a41c:	0800a135 	stmdaeq	r0, {r0, r2, r4, r5, r8, sp, pc}
 800a420:	00000506 	andeq	r0, r0, r6, lsl #10
 800a424:	0800a14c 	stmdaeq	r0, {r2, r3, r6, r8, sp, pc}
 800a428:	00000507 	andeq	r0, r0, r7, lsl #10
 800a42c:	0800a158 	stmdaeq	r0, {r3, r4, r6, r8, sp, pc}
 800a430:	00000508 	andeq	r0, r0, r8, lsl #10
 800a434:	0800a167 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sp, pc}
 800a438:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800a43c:	08009e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, pc}
 800a440:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a444:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 800a448:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 800a44c:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800a450:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800a454:	204d4452 	subcs	r4, sp, r2, asr r4
 800a458:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800a45c:	63206563 			; <UNDEFINED> instruction: 0x63206563
 800a460:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 800a464:	61727567 	cmnvs	r2, r7, ror #10
 800a468:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800a46c:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800a470:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800a474:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800a478:	20726572 	rsbscs	r6, r2, r2, ror r5
 800a47c:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 800a480:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a484:	0a732a2e 	beq	9cd4d44 <__exidx_end+0x1cc9f6c>
 800a488:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800a48c:	6166756e 	cmnvs	r6, lr, ror #10
 800a490:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 800a494:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 800a498:	20202044 	eorcs	r2, r0, r4, asr #32
 800a49c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a4a0:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a4a4:	000a5832 	andeq	r5, sl, r2, lsr r8
 800a4a8:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 800a4ac:	206c6169 	rsbcs	r6, ip, r9, ror #2
 800a4b0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 800a4b4:	20207265 	eorcs	r7, r0, r5, ror #4
 800a4b8:	3a202020 	bcc	8812540 <__exidx_end+0x807768>
 800a4bc:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800a4c0:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a4c4:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a4c8:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800a4cc:	20000a58 	andcs	r0, r0, r8, asr sl
 800a4d0:	746f6f52 	strbtvc	r6, [pc], #-3922	; 800a4d8 <s_tTableC2+0x1d8>
 800a4d4:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 800a4d8:	20206c65 	eorcs	r6, r0, r5, ror #24
 800a4dc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a4e0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a4e4:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800a4e8:	5020000a 	eorpl	r0, r0, sl
 800a4ec:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800a4f0:	43207463 			; <UNDEFINED> instruction: 0x43207463
 800a4f4:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 800a4f8:	2079726f 	rsbscs	r7, r9, pc, ror #4
 800a4fc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800a500:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800a504:	0a58322e 	beq	9616dc4 <__exidx_end+0x160bfec>
 800a508:	72502000 	subsvc	r2, r0, #0
 800a50c:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 800a510:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 800a514:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 800a518:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a51c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800a520:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800a524:	000a5832 	andeq	r5, sl, r2, lsr r8

0800a528 <DEVICE_LABEL>:
 800a528:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a52c:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a530:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800a534:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 800a538:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

0800a53d <RDMConst::MANUFACTURER_ID>:
 800a53d:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800a53f <RDMConst::MANUFACTURER_NAME>:
 800a53f:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800a543:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800a547:	6f2e7777 	svcvs	0x002e7777
 800a54b:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800a54f:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800a553:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800a557:	0067726f 	rsbeq	r7, r7, pc, ror #4
	...

0800a55c <vtable for PixelDmxParamsRdm>:
	...
 800a564:	080055c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, ip, lr}
 800a568:	080055cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sl, ip, lr}
 800a56c:	080055b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, ip, lr}
 800a570:	080055b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, ip, lr}
 800a574:	080055ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip, lr}
 800a578:	080055a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, sl, ip, lr}
 800a57c:	080055a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, ip, lr}
 800a580:	080055a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r8, sl, ip, lr}
 800a584:	080055ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sl, ip, lr}
 800a588:	080055af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, sl, ip, lr}
 800a58c:	080055b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, ip, lr}

0800a590 <vtable for WS28xxDmx>:
	...
 800a598:	08005675 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sl, ip, lr}
 800a59c:	08005695 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, ip, lr}
 800a5a0:	080056cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, ip, lr}
 800a5a4:	08005757 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, sl, ip, lr}
 800a5a8:	08005789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, ip, lr}
 800a5ac:	080056a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r9, sl, ip, lr}
 800a5b0:	080059dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, ip, lr}
 800a5b4:	080056e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, ip, lr}
 800a5b8:	0800566d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, ip, lr}
 800a5bc:	08005671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip, lr}
 800a5c0:	08005717 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, ip, lr}
 800a5c4:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a5c8:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800a5cc:	61702058 	cmnvs	r0, r8, asr r0
 800a5d0:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800a5d4:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800a5d8:	4720000a 	strmi	r0, [r0, -sl]!
 800a5dc:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a5e0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a5e4:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 800a5e8:	203a2074 	eorscs	r2, sl, r4, ror r0
 800a5ec:	5b206425 	blpl	8823688 <__exidx_end+0x8188b0>
 800a5f0:	756f7247 	strbvc	r7, [pc, #-583]!	; 800a3b1 <s_tTableC2+0xb1>
 800a5f4:	3a207370 	bcc	88273bc <__exidx_end+0x81c5e4>
 800a5f8:	5d642520 	cfstr64pl	mvdx2, [r4, #-128]!	; 0xffffff80
 800a5fc:	6e55000a 	cdpvs	0, 5, cr0, cr5, cr10, {0}
 800a600:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 800a604:	 	svcvs	0x004e006e

0800a606 <s_patternName>:
 800a606:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800a612:	61520000 	cmpvs	r2, r0
 800a616:	6f626e69 	svcvs	0x00626e69
 800a61a:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800a61e:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800a622:	61656854 	cmnvs	r5, r4, asr r8
 800a626:	20726574 	rsbscs	r6, r2, r4, ror r5
 800a62a:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800a62e:	6f430065 	svcvs	0x00430065
 800a632:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800a636:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800a63a:	00000065 	andeq	r0, r0, r5, rrx
 800a63e:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800a642:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800a646:	00000000 	andeq	r0, r0, r0
 800a64a:	61460000 	mrsvs	r0, (UNDEF: 70)
 800a64e:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800a65a <PixelType::MAPS>:
 800a65a:	00424752 	subeq	r4, r2, r2, asr r7
 800a65e:	00474252 	subeq	r4, r7, r2, asr r2
 800a662:	00425247 	subeq	r5, r2, r7, asr #4
 800a666:	00524247 	subseq	r4, r2, r7, asr #4
 800a66a:	00475242 	subeq	r5, r7, r2, asr #4
 800a66e:	00524742 	subseq	r4, r2, r2, asr #14

0800a672 <PixelType::TYPES>:
 800a672:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a676:	00003130 	andeq	r3, r0, r0, lsr r1
 800a67a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a67e:	00003131 	andeq	r3, r0, r1, lsr r1
 800a682:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a686:	00003231 	andeq	r3, r0, r1, lsr r2
 800a68a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a68e:	00423231 	subeq	r3, r2, r1, lsr r2
 800a692:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a696:	00003331 	andeq	r3, r0, r1, lsr r3
 800a69a:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800a69e:	00003531 	andeq	r3, r0, r1, lsr r5
 800a6a2:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a6a6:	00003231 	andeq	r3, r0, r1, lsr r2
 800a6aa:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a6ae:	00573231 	subseq	r3, r7, r1, lsr r2
 800a6b2:	31534355 	cmpcc	r3, r5, asr r3
 800a6b6:	00333039 	eorseq	r3, r3, r9, lsr r0
 800a6ba:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800a6be:	00333039 	eorseq	r3, r3, r9, lsr r0
 800a6c2:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800a6c6:	00003231 	andeq	r3, r0, r1, lsr r2
 800a6ca:	31415041 	cmpcc	r1, r1, asr #32
 800a6ce:	00003230 	andeq	r3, r0, r0, lsr r2
 800a6d2:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800a6d6:	00003232 	andeq	r3, r0, r2, lsr r2
 800a6da:	31383950 	teqcc	r8, r0, asr r9
 800a6de:	00000033 	andeq	r0, r0, r3, lsr r0
 800a6e2:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a6e6:	6170206c 	cmnvs	r0, ip, rrx
 800a6ea:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800a6ee:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800a6f2:	5420000a 	strtpl	r0, [r0], #-10
 800a6f6:	20657079 	rsbcs	r7, r5, r9, ror r0
 800a6fa:	3a202020 	bcc	8812782 <__exidx_end+0x8079aa>
 800a6fe:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800a702:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 800a706:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 800a70a:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a70e:	3a202020 	bcc	8812796 <__exidx_end+0x8079be>
 800a712:	0a642520 	beq	9913b9a <__exidx_end+0x1908dc2>
 800a716:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800a71a:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 800a71e:	203a2067 	eorscs	r2, sl, r7, rrx
 800a722:	5b207325 	blpl	88273be <__exidx_end+0x81c5e6>
 800a726:	0a5d6425 	beq	97637c2 <__exidx_end+0x17589ea>
 800a72a:	30542000 	subscc	r2, r4, r0
 800a72e:	20202048 	eorcs	r2, r0, r8, asr #32
 800a732:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a736:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800a73a:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800a73e:	0a5d5825 	beq	97607da <__exidx_end+0x1755a02>
 800a742:	31542000 	cmpcc	r4, r0
 800a746:	20202048 	eorcs	r2, r0, r8, asr #32
 800a74a:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a74e:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800a752:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800a756:	0a5d5825 	beq	97607f2 <__exidx_end+0x1755a1a>
	...

0800a75c <s_aStorSize>:
 800a75c:	00000060 	andeq	r0, r0, r0, rrx
 800a760:	00000090 	muleq	r0, r0, r0
 800a764:	00000020 	andeq	r0, r0, r0, lsr #32
 800a768:	00000040 	andeq	r0, r0, r0, asr #32
 800a76c:	00000060 	andeq	r0, r0, r0, rrx
 800a770:	00000040 	andeq	r0, r0, r0, asr #32
 800a774:	00000020 	andeq	r0, r0, r0, lsr #32
 800a778:	00000020 	andeq	r0, r0, r0, lsr #32
 800a77c:	000001e0 	andeq	r0, r0, r0, ror #3
 800a780:	00000040 	andeq	r0, r0, r0, asr #32
 800a784:	00000020 	andeq	r0, r0, r0, lsr #32
 800a788:	00000060 	andeq	r0, r0, r0, rrx
 800a78c:	00000030 	andeq	r0, r0, r0, lsr r0
 800a790:	00000020 	andeq	r0, r0, r0, lsr #32
 800a794:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800a798:	00000030 	andeq	r0, r0, r0, lsr r0
 800a79c:	00000040 	andeq	r0, r0, r0, asr #32
 800a7a0:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7a4:	00000060 	andeq	r0, r0, r0, rrx
 800a7a8:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7ac:	00000400 	andeq	r0, r0, r0, lsl #8
 800a7b0:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7b4:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7b8:	00000040 	andeq	r0, r0, r0, asr #32
 800a7bc:	00000060 	andeq	r0, r0, r0, rrx
 800a7c0:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 800a7c8:	00000020 	andeq	r0, r0, r0, lsr #32

0800a7cc <vtable for StoreDisplayUdf>:
	...
 800a7d4:	080067f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800a7d8:	08006841 	stmdaeq	r0, {r0, r6, fp, sp, lr}
 800a7dc:	0800681d 	stmdaeq	r0, {r0, r2, r3, r4, fp, sp, lr}
 800a7e0:	080067fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}

0800a7e4 <vtable for StoreRDMDevice>:
	...
 800a7ec:	08006861 	stmdaeq	r0, {r0, r5, r6, fp, sp, lr}
 800a7f0:	080068d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, sp, lr}
 800a7f4:	08006869 	stmdaeq	r0, {r0, r3, r5, r6, fp, sp, lr}
 800a7f8:	080068e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, fp, sp, lr}
 800a7fc:	0800688d 	stmdaeq	r0, {r0, r2, r3, r7, fp, sp, lr}
 800a800:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800a804:	00000000 	andeq	r0, r0, r0
 800a808:	08006863 	stmdaeq	r0, {r0, r1, r5, r6, fp, sp, lr}
 800a80c:	080068dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, sp, lr}
 800a810:	080068c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, sp, lr}

0800a814 <vtable for StoreRDMSensors>:
	...
 800a81c:	0800691d 	stmdaeq	r0, {r0, r2, r3, r4, r8, fp, sp, lr}
 800a820:	08006965 	stmdaeq	r0, {r0, r2, r5, r6, r8, fp, sp, lr}
 800a824:	08006941 	stmdaeq	r0, {r0, r6, r8, fp, sp, lr}
 800a828:	08006921 	stmdaeq	r0, {r0, r5, r8, fp, sp, lr}

0800a82c <vtable for StoreRDMSubDevices>:
	...
 800a834:	08006985 	stmdaeq	r0, {r0, r2, r7, r8, fp, sp, lr}
 800a838:	080069cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, fp, sp, lr}
 800a83c:	080069a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, sp, lr}
 800a840:	08006989 	stmdaeq	r0, {r0, r3, r7, r8, fp, sp, lr}

0800a844 <vtable for StoreWS28xxDmx>:
	...
 800a84c:	080069ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 800a850:	08006b5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, fp, sp, lr}
 800a854:	080069f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, sp, lr}
 800a858:	08006b71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
 800a85c:	08006b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, sp, lr}
 800a860:	08006af5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, sp, lr}
 800a864:	08006abd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}
 800a868:	08006a85 	stmdaeq	r0, {r0, r2, r7, r9, fp, sp, lr}
 800a86c:	08006a4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, sp, lr}
 800a870:	08006a19 	stmdaeq	r0, {r0, r3, r4, r9, fp, sp, lr}
 800a874:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800a878:	00000000 	andeq	r0, r0, r0
 800a87c:	080069ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 800a880:	08006b69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, fp, sp, lr}
 800a884:	08006b55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, fp, sp, lr}
 800a888:	08006b21 	stmdaeq	r0, {r0, r5, r8, r9, fp, sp, lr}
 800a88c:	08006aed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, fp, sp, lr}
 800a890:	08006ab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp, sp, lr}
 800a894:	08006a7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, sp, lr}
 800a898:	08006a45 	stmdaeq	r0, {r0, r2, r6, r9, fp, sp, lr}
 800a89c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a8a0:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 800a8a4:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800a8a8:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800a8ac:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800a8b0:	65732068 	ldrbvs	r2, [r3, #-104]!	; 0xffffff98
 800a8b4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 800a8b8:	7a697320 	bvc	9a67540 <__exidx_end+0x1a5c768>
 800a8bc:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 800a8c0:	746f7420 	strbtvc	r7, [pc], #-1056	; 800a8c8 <vtable for StoreWS28xxDmx+0x84>
 800a8c4:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 800a8c8:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 800a8cc:	0a736574 	beq	9ce3ea4 <__exidx_end+0x1cd90cc>
 800a8d0:	006f6c00 	rsbeq	r6, pc, r0, lsl #24
 800a8d4:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 800a8d8:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 800a8dc:	2e255620 	cfmadda32cs	mvax1, mvax5, mvfx5, mvfx0
 800a8e0:	4400732a 	strmi	r7, [r0], #-810	; 0xfffffcd6
 800a8e4:	5320584d 			; <UNDEFINED> instruction: 0x5320584d
 800a8e8:	7533253a 	ldrvc	r2, [r3, #-1338]!	; 0xfffffac6
 800a8ec:	253a4620 	ldrcs	r4, [sl, #-1568]!	; 0xfffff9e0
 800a8f0:	4e007533 	mcrmi	5, 0, r7, cr0, cr3, {1}
 800a8f4:	6964206f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, sp}^
 800a8f8:	616c7073 	smcvs	50947	; 0xc703
 800a8fc:	6f662079 	svcvs	0x00662079
 800a900:	00646e75 	rsbeq	r6, r4, r5, ror lr
 800a904:	31314853 	teqcc	r1, r3, asr r8
 800a908:	53003630 	movwpl	r3, #1584	; 0x630
 800a90c:	33314453 	teqcc	r1, #1392508928	; 0x53000000
 800a910:	25003630 	strcs	r3, [r0, #-1584]	; 0xfffff9d0
 800a914:	25282073 	strcs	r2, [r8, #-115]!	; 0xffffff8d
 800a918:	64252c64 	strtvs	r2, [r5], #-3172	; 0xfffff39c
 800a91c:	40000a29 	andmi	r0, r0, r9, lsr #20
 800a920:	eeaaeeaa 	cdp	14, 10, cr14, cr10, cr10, {5}
 800a924:	00000000 	andeq	r0, r0, r0

0800a928 <_OledFont8x6>:
 800a928:	00000040 	andeq	r0, r0, r0, asr #32
 800a92c:	40000000 	andmi	r0, r0, r0
 800a930:	005f0000 	subseq	r0, pc, r0
 800a934:	00400000 	subeq	r0, r0, r0
 800a938:	00070007 	andeq	r0, r7, r7
 800a93c:	7f144000 	svcvc	0x00144000
 800a940:	00147f14 	andseq	r7, r4, r4, lsl pc
 800a944:	7f2a2440 	svcvc	0x002a2440
 800a948:	4000122a 	andmi	r1, r0, sl, lsr #4
 800a94c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800a950:	36400062 	strbcc	r0, [r0], -r2, rrx
 800a954:	50205649 	eorpl	r5, r0, r9, asr #12
 800a958:	08004000 	stmdaeq	r0, {lr}
 800a95c:	00000307 	andeq	r0, r0, r7, lsl #6
 800a960:	221c0040 	andscs	r0, ip, #64	; 0x40
 800a964:	40000041 	andmi	r0, r0, r1, asr #32
 800a968:	1c224100 	stfnes	f4, [r2], #-0
 800a96c:	2a400000 	bcs	900a974 <__exidx_end+0xfffb9c>
 800a970:	2a1c7f1c 	bcs	872a5e8 <__exidx_end+0x71f810>
 800a974:	08084000 	stmdaeq	r8, {lr}
 800a978:	0008083e 	andeq	r0, r8, lr, lsr r8
 800a97c:	70800040 	addvc	r0, r0, r0, asr #32
 800a980:	40000030 	andmi	r0, r0, r0, lsr r0
 800a984:	08080808 	stmdaeq	r8, {r3, fp}
 800a988:	00400008 	subeq	r0, r0, r8
 800a98c:	00606000 	rsbeq	r6, r0, r0
 800a990:	10204000 	eorne	r4, r0, r0
 800a994:	00020408 	andeq	r0, r2, r8, lsl #8
 800a998:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800a99c:	40003e45 	andmi	r3, r0, r5, asr #28
 800a9a0:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800a9a4:	72400000 	subvc	r0, r0, #0
 800a9a8:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800a9ac:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800a9b0:	00334d49 	eorseq	r4, r3, r9, asr #26
 800a9b4:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800a9b8:	4000107f 	andmi	r1, r0, pc, ror r0
 800a9bc:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800a9c0:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800a9c4:	3149494a 	cmpcc	r9, sl, asr #18
 800a9c8:	21414000 	mrscs	r4, (UNDEF: 65)
 800a9cc:	00070911 	andeq	r0, r7, r1, lsl r9
 800a9d0:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800a9d4:	40003649 	andmi	r3, r0, r9, asr #12
 800a9d8:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800a9dc:	0040001e 	subeq	r0, r0, lr, lsl r0
 800a9e0:	00001400 	andeq	r1, r0, r0, lsl #8
 800a9e4:	40004000 	andmi	r4, r0, r0
 800a9e8:	00000034 	andeq	r0, r0, r4, lsr r0
 800a9ec:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800a9f0:	40004122 	andmi	r4, r0, r2, lsr #2
 800a9f4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800a9f8:	00400014 	subeq	r0, r0, r4, lsl r0
 800a9fc:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800aa00:	01024000 	mrseq	r4, (UNDEF: 2)
 800aa04:	00060959 	andeq	r0, r6, r9, asr r9
 800aa08:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800aa0c:	40004e59 	andmi	r4, r0, r9, asr lr
 800aa10:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800aa14:	7f40007c 	svcvc	0x0040007c
 800aa18:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800aa1c:	413e4000 	teqmi	lr, r0
 800aa20:	00224141 	eoreq	r4, r2, r1, asr #2
 800aa24:	41417f40 	cmpmi	r1, r0, asr #30
 800aa28:	40003e41 	andmi	r3, r0, r1, asr #28
 800aa2c:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800aa30:	7f400041 	svcvc	0x00400041
 800aa34:	01090909 	tsteq	r9, r9, lsl #18
 800aa38:	413e4000 	teqmi	lr, r0
 800aa3c:	00735141 	rsbseq	r5, r3, r1, asr #2
 800aa40:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800aa44:	40007f08 	andmi	r7, r0, r8, lsl #30
 800aa48:	417f4100 	cmnmi	pc, r0, lsl #2
 800aa4c:	20400000 	subcs	r0, r0, r0
 800aa50:	013f4140 	teqeq	pc, r0, asr #2
 800aa54:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800aa58:	00412214 	subeq	r2, r1, r4, lsl r2
 800aa5c:	40407f40 	submi	r7, r0, r0, asr #30
 800aa60:	40004040 	andmi	r4, r0, r0, asr #32
 800aa64:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800aa68:	7f40007f 	svcvc	0x0040007f
 800aa6c:	7f100804 	svcvc	0x00100804
 800aa70:	413e4000 	teqmi	lr, r0
 800aa74:	003e4141 	eorseq	r4, lr, r1, asr #2
 800aa78:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800aa7c:	40000609 	andmi	r0, r0, r9, lsl #12
 800aa80:	2151413e 	cmpcs	r1, lr, lsr r1
 800aa84:	7f40005e 	svcvc	0x0040005e
 800aa88:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800aa8c:	49264000 	stmdbmi	r6!, {lr}
 800aa90:	00324949 	eorseq	r4, r2, r9, asr #18
 800aa94:	7f010340 	svcvc	0x00010340
 800aa98:	40000301 	andmi	r0, r0, r1, lsl #6
 800aa9c:	4040403f 	submi	r4, r0, pc, lsr r0
 800aaa0:	1f40003f 	svcne	0x0040003f
 800aaa4:	1f204020 	svcne	0x00204020
 800aaa8:	403f4000 	eorsmi	r4, pc, r0
 800aaac:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800aab0:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800aab4:	40006314 	andmi	r6, r0, r4, lsl r3
 800aab8:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800aabc:	61400003 	cmpvs	r0, r3
 800aac0:	434d4959 	movtmi	r4, #55641	; 0xd959
 800aac4:	7f004000 	svcvc	0x00004000
 800aac8:	00414141 	subeq	r4, r1, r1, asr #2
 800aacc:	08040240 	stmdaeq	r4, {r6, r9}
 800aad0:	40002010 	andmi	r2, r0, r0, lsl r0
 800aad4:	41414100 	mrsmi	r4, (UNDEF: 81)
 800aad8:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800aadc:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800aae0:	40404000 	submi	r4, r0, r0
 800aae4:	00404040 	subeq	r4, r0, r0, asr #32
 800aae8:	07030040 	streq	r0, [r3, -r0, asr #32]
 800aaec:	40000008 	andmi	r0, r0, r8
 800aaf0:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800aaf4:	7f400040 	svcvc	0x00400040
 800aaf8:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800aafc:	44384000 	ldrtmi	r4, [r8], #-0
 800ab00:	00284444 	eoreq	r4, r8, r4, asr #8
 800ab04:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800ab08:	40007f28 	andmi	r7, r0, r8, lsr #30
 800ab0c:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800ab10:	00400018 	subeq	r0, r0, r8, lsl r0
 800ab14:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800ab18:	a4184000 	ldrge	r4, [r8], #-0
 800ab1c:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800ab20:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800ab24:	40007804 	andmi	r7, r0, r4, lsl #16
 800ab28:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800ab2c:	20400000 	subcs	r0, r0, r0
 800ab30:	003d4040 	eorseq	r4, sp, r0, asr #32
 800ab34:	107f4000 	rsbsne	r4, pc, r0
 800ab38:	00004428 	andeq	r4, r0, r8, lsr #8
 800ab3c:	7f410040 	svcvc	0x00410040
 800ab40:	40000040 	andmi	r0, r0, r0, asr #32
 800ab44:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800ab48:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800ab4c:	78040408 	stmdavc	r4, {r3, sl}
 800ab50:	44384000 	ldrtmi	r4, [r8], #-0
 800ab54:	00384444 	eorseq	r4, r8, r4, asr #8
 800ab58:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800ab5c:	40001824 	andmi	r1, r0, r4, lsr #16
 800ab60:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800ab64:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800ab68:	08040408 	stmdaeq	r4, {r3, sl}
 800ab6c:	54484000 	strbpl	r4, [r8], #-0
 800ab70:	00245454 	eoreq	r5, r4, r4, asr r4
 800ab74:	3f040440 	svccc	0x00040440
 800ab78:	40002444 	andmi	r2, r0, r4, asr #8
 800ab7c:	2040403c 	subcs	r4, r0, ip, lsr r0
 800ab80:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800ab84:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800ab88:	403c4000 	eorsmi	r4, ip, r0
 800ab8c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800ab90:	10284440 	eorne	r4, r8, r0, asr #8
 800ab94:	40004428 	andmi	r4, r0, r8, lsr #8
 800ab98:	9090904c 	addsls	r9, r0, ip, asr #32
 800ab9c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800aba0:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800aba4:	08004000 	stmdaeq	r0, {lr}
 800aba8:	00004136 	andeq	r4, r0, r6, lsr r1
 800abac:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800abb0:	40000000 	andmi	r0, r0, r0
 800abb4:	08364100 	ldmdaeq	r6!, {r8, lr}
 800abb8:	02400000 	subeq	r0, r0, #0
 800abbc:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800abc0:	263c4000 	ldrtcs	r4, [ip], -r0
 800abc4:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800abc8 <oled_128x32_init>:
 800abc8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800abcc:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800abd0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800abd4:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800abd8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800abdc:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800abe0 <oled_128x64_init>:
 800abe0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800abe4:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800abe8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800abec:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800abf0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800abf4:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800abf8 <vtable for Ssd1306>:
	...
 800ac00:	0800729d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, ip, sp, lr}
 800ac04:	080072c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, sp, lr}
 800ac08:	080075e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, ip, sp, lr}
 800ac0c:	08007565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, ip, sp, lr}
 800ac10:	08007431 	stmdaeq	r0, {r0, r4, r5, sl, ip, sp, lr}
 800ac14:	080072e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, sp, lr}
 800ac18:	08007311 	stmdaeq	r0, {r0, r4, r8, r9, ip, sp, lr}
 800ac1c:	08007407 	stmdaeq	r0, {r0, r1, r2, sl, ip, sp, lr}
 800ac20:	080073c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, ip, sp, lr}
 800ac24:	0800729f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, ip, sp, lr}
 800ac28:	0800746d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
 800ac2c:	08007479 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, ip, sp, lr}
 800ac30:	08007493 	stmdaeq	r0, {r0, r1, r4, r7, sl, ip, sp, lr}
 800ac34:	080072a1 	stmdaeq	r0, {r0, r5, r7, r9, ip, sp, lr}
 800ac38:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800ac3c:	205d732a 	subscs	r7, sp, sl, lsr #6
 800ac40:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800ac44:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800ac48:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800ac4c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800ac50:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800ac54:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800ac58:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800ac5c:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800ac60:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800ac64:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800ac68:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800ac6c:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800ac70:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800ac74:	252f6432 	strcs	r6, [pc, #-1074]!	; 800a84a <vtable for StoreWS28xxDmx+0x6>
 800ac78:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800ac7c:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800ac80:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800ac84:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800ac88:	000a6432 	andeq	r6, sl, r2, lsr r4
 800ac8c:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800ac90:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800ac94:	33534400 	cmpcc	r3, #0, 8
 800ac98:	00313332 	eorseq	r3, r1, r2, lsr r3
 800ac9c:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800aca0:	00333635 	eorseq	r3, r3, r5, lsr r6
 800aca4:	5f434f53 	svcpl	0x00434f53
 800aca8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800acac:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800acb0:	00000000 	andeq	r0, r0, r0

0800acb4 <CSWTCH.7>:
 800acb4:	0800ac8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, pc}
 800acb8:	0800ac95 	stmdaeq	r0, {r0, r2, r4, r7, sl, fp, sp, pc}
 800acbc:	0800ac9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp, pc}
 800acc0:	0800aca4 	stmdaeq	r0, {r2, r5, r7, sl, fp, sp, pc}
 800acc4:	5f5f0030 	svcpl	0x005f0030
 800acc8:	5f617863 	svcpl	0x00617863
 800accc:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 800acd0:	7269765f 	rsbvc	r7, r9, #99614720	; 0x5f00000
 800acd4:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
 800acd8:	63727300 	cmnvs	r2, #0, 6
 800acdc:	7275702f 	rsbsvc	r7, r5, #47	; 0x2f
 800ace0:	6c616365 	stclvs	3, cr6, [r1], #-404	; 0xfffffe6c
 800ace4:	70632e6c 	rsbvc	r2, r3, ip, ror #28
 800ace8:	202c0070 	eorcs	r0, ip, r0, ror r0
 800acec:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 800acf0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800acf4:	6100203a 	tstvs	r0, sl, lsr r0
 800acf8:	72657373 	rsbvc	r7, r5, #-872415231	; 0xcc000001
 800acfc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800ad00:	73252220 			; <UNDEFINED> instruction: 0x73252220
 800ad04:	61662022 	cmnvs	r6, r2, lsr #32
 800ad08:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 800ad0c:	6966203a 	stmdbvs	r6!, {r1, r3, r4, r5, sp}^
 800ad10:	2220656c 	eorcs	r6, r0, #108, 10	; 0x1b000000
 800ad14:	2c227325 	stccs	3, cr7, [r2], #-148	; 0xffffff6c
 800ad18:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 800ad1c:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 800ad20:	73257325 			; <UNDEFINED> instruction: 0x73257325
 800ad24:	616d000a 	cmnvs	sp, sl
 800ad28:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800ad2c:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800ad30:	616d000a 	cmnvs	sp, sl
 800ad34:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800ad38:	656e203a 	strbvs	r2, [lr, #-58]!	; 0xffffffc6
 800ad3c:	3e207478 	mcrcc	4, 1, r7, cr0, cr8, {3}
 800ad40:	6f6c6220 	svcvs	0x006c6220
 800ad44:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	; <UNPREDICTABLE>
 800ad48:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
 800ad4c:	616d000a 	cmnvs	sp, sl
 800ad50:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800ad54:	4270203a 	rsbsmi	r2, r0, #58	; 0x3a
 800ad58:	6b636f6c 	blvs	98e6b10 <__exidx_end+0x18dbd38>
 800ad5c:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
 800ad60:	253d7265 	ldrcs	r7, [sp, #-613]!	; 0xfffffd9b
 800ad64:	73202c70 			; <UNDEFINED> instruction: 0x73202c70
 800ad68:	3d657a69 	vstmdbcc	r5!, {s15-s119}
 800ad6c:	202c6425 	eorcs	r6, ip, r5, lsr #8
 800ad70:	61746164 	cmnvs	r4, r4, ror #2
 800ad74:	0a70253d 	beq	9c14270 <__exidx_end+0x1c09498>
 800ad78:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
 800ad7c:	70203a65 	eorvc	r3, r0, r5, ror #20
 800ad80:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 800ad84:	6165486b 	cmnvs	r5, fp, ror #16
 800ad88:	20726564 	rsbscs	r6, r2, r4, ror #10
 800ad8c:	7025203d 	eorvc	r2, r5, sp, lsr r0
 800ad90:	4270202c 	rsbsmi	r2, r0, #44	; 0x2c
 800ad94:	6b636f6c 	blvs	98e6b4c <__exidx_end+0x18dbd74>
 800ad98:	25203d20 	strcs	r3, [r0, #-3360]!	; 0xfffff2e0
 800ad9c:	00000a70 	andeq	r0, r0, r0, ror sl

0800ada0 <days_of_month>:
 800ada0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800ada4:	0000001c 	andeq	r0, r0, ip, lsl r0
 800ada8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800adac:	0000001e 	andeq	r0, r0, lr, lsl r0
 800adb0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800adb4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800adb8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800adbc:	0000001f 	andeq	r0, r0, pc, lsl r0
 800adc0:	0000001e 	andeq	r0, r0, lr, lsl r0
 800adc4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800adc8:	0000001e 	andeq	r0, r0, lr, lsl r0
 800adcc:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800add0 <__exidx_start>:
 800add0:	7fff5784 	svcvc	0x00ff5784
 800add4:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800add8 <.ARM.attributes>:
 800add8:	00002e41 	andeq	r2, r0, r1, asr #28
 800addc:	61656100 	cmnvs	r5, r0, lsl #2
 800ade0:	01006962 	tsteq	r0, r2, ror #18
 800ade4:	00000024 	andeq	r0, r0, r4, lsr #32
 800ade8:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800adec:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800adf0:	0600334d 	streq	r3, [r0], -sp, asr #6
 800adf4:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 800adf8:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 800adfc:	17011501 	strne	r1, [r1, -r1, lsl #10]
 800ae00:	1a011803 	bne	8050e14 <__exidx_end+0x4603c>
 800ae04:	Address 0x000000000800ae04 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f3 <RDMResponder::m_IsSubDeviceActive>:
	...

200001f4 <RDMResponder::s_pThis>:
200001f4:	00000000 	andeq	r0, r0, r0

200001f8 <RDMSensors::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSubDevices::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <DMXReceiver::s_IsActive>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_pLightSet>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_bDisableOutput>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <s_RxBuffer>:
	...

2000041c <s_TxBuffer>:
	...

20000620 <sv_PortState>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <s_nUartsSending>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <sv_nRxDmxPackets>:
	...

20000638 <Dmx::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <gv_RdmDataReceiveEnd>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <RDMDeviceResponder::s_pThis>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMIdentify::m_bIsEnabled>:
	...

20000645 <RDMIdentify::m_nMode>:
20000645:	 	andeq	r0, r0, r0

20000648 <RDMIdentify::s_pThis>:
20000648:	00000000 	andeq	r0, r0, r0

2000064c <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <PixelDmxParamsRdm::s_Data>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <WS28xxDmx::s_pThis>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelPatterns::m_PortConfig>:
	...

20000678 <PixelPatterns::m_nActivePorts>:
20000678:	00000000 	andeq	r0, r0, r0

2000067c <PixelPatterns::m_pScannerColours>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_nCount>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_pOutput>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelTestPattern::s_pThis>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_Pattern>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <s_tmp>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <WS28xx::s_pThis>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <SpiFlashStore::s_nWaitMillis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <SpiFlashStore::s_SpiFlashData>:
	...

2000169c <SpiFlashStore::s_nStartAddress>:
2000169c:	00000000 	andeq	r0, r0, r0

200016a0 <SpiFlashStore::s_bHaveFlashChip>:
200016a0:	00000000 	andeq	r0, r0, r0

200016a4 <SpiFlashStore::s_nSpiFlashStoreSize>:
200016a4:	00000000 	andeq	r0, r0, r0

200016a8 <SpiFlashStore::s_State>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <SpiFlashStore::s_pThis>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <SpiFlashStore::s_bIsNew>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <StoreDisplayUdf::s_pThis>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <StoreRDMDevice::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <StoreRDMSensors::s_pThis>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreRDMSubDevices::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StoreWS28xxDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <FlashRom::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <flashrom::s_nAddress>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <flashrom::s_State>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <flashrom::s_nPage>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashrom::s_pData>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashrom::s_isBank0>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashrom::s_nLength>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <Network::s_pThis>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <DisplayUdf::s_pThis>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <Display::s_pThis>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <Display7Segment::s_pThis>:
200016f0:	00000000 	andeq	r0, r0, r0

200016f4 <_ClearBuffer>:
	...

2000177c <Ssd1306::s_pThis>:
2000177c:	00000000 	andeq	r0, r0, r0

20001780 <FirmwareVersion::s_FirmwareVersion>:
	...

20001796 <FirmwareVersion::s_Print>:
	...

200017d8 <FirmwareVersion::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <LedBlink::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <Hardware::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <HwClock::s_pThis>:
200017e4:	00000000 	andeq	r0, r0, r0

200017e8 <Tm>:
	...

20001810 <s_micros>:
	...

20001818 <set_timer>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_nSysTickMillis>:
2000181c:	00000000 	andeq	r0, r0, r0

20001820 <s_nAddress>:
20001820:	00000000 	andeq	r0, r0, r0

20001824 <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
