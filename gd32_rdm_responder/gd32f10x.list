
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08001035 	stmdaeq	r0, {r0, r2, r4, r5, ip}
 8000008:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800000c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000010:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000014:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000018:	08001081 	stmdaeq	r0, {r0, r7, ip}
	...
 800002c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000030:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800003c:	08008d41 	stmdaeq	r0, {r0, r6, r8, sl, fp, pc}
 8000040:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000044:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000048:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800004c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000050:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000054:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000058:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800005c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000060:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000064:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000068:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800006c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000070:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000074:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000078:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800007c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000080:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000084:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000088:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800008c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000090:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000094:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000098:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800009c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000a0:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000a4:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000a8:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000ac:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000b0:	08003bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, ip, sp}
 80000b4:	08003c81 	stmdaeq	r0, {r0, r7, sl, fp, ip, sp}
 80000b8:	08003ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp, ip, sp}
 80000bc:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000c0:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000c4:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000c8:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000cc:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000d0:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000d4:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000d8:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000dc:	080039dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp}
 80000e0:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000e4:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000e8:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000ec:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000f0:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000f4:	08001081 	stmdaeq	r0, {r0, r7, ip}
 80000f8:	00000000 	andeq	r0, r0, r0
 80000fc:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000100:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000104:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000108:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800010c:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000110:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000114:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000118:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800011c:	08003cfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, fp, ip, sp}
 8000120:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000124:	08001081 	stmdaeq	r0, {r0, r7, ip}
 8000128:	08001081 	stmdaeq	r0, {r0, r7, ip}
 800012c:	08001081 	stmdaeq	r0, {r0, r7, ip}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f008 fda7 	bl	8008c84 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fdd4 	bl	8008ce4 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f008 fdd1 	bl	8008ce4 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800c324 	stmdaeq	r0, {r2, r5, r8, r9, lr, pc}
 800014c:	0800c32a 	stmdaeq	r0, {r1, r3, r5, r8, r9, lr, pc}

08000150 <__aeabi_d2f>:
 8000150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000154:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000158:	bf24      	itt	cs
 800015a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800015e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000162:	d90d      	bls.n	8000180 <__aeabi_d2f+0x30>
 8000164:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000168:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800016c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000174:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000178:	bf08      	it	eq
 800017a:	f020 0001 	biceq.w	r0, r0, #1
 800017e:	4770      	bx	lr
 8000180:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000184:	d121      	bne.n	80001ca <__aeabi_d2f+0x7a>
 8000186:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800018a:	bfbc      	itt	lt
 800018c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000190:	4770      	bxlt	lr
 8000192:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000196:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800019a:	f1c2 0218 	rsb	r2, r2, #24
 800019e:	f1c2 0c20 	rsb	ip, r2, #32
 80001a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80001a6:	fa20 f002 	lsr.w	r0, r0, r2
 80001aa:	bf18      	it	ne
 80001ac:	f040 0001 	orrne.w	r0, r0, #1
 80001b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80001b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80001b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80001bc:	ea40 000c 	orr.w	r0, r0, ip
 80001c0:	fa23 f302 	lsr.w	r3, r3, r2
 80001c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001c8:	e7cc      	b.n	8000164 <__aeabi_d2f+0x14>
 80001ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80001ce:	d107      	bne.n	80001e0 <__aeabi_d2f+0x90>
 80001d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80001d4:	bf1e      	ittt	ne
 80001d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80001da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80001de:	4770      	bxne	lr
 80001e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80001e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <__aeabi_frsub>:
 80001f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__addsf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_fsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001fc <__addsf3>:
 80001fc:	0042      	lsls	r2, r0, #1
 80001fe:	bf1f      	itttt	ne
 8000200:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000204:	ea92 0f03 	teqne	r2, r3
 8000208:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800020c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000210:	d06a      	beq.n	80002e8 <__addsf3+0xec>
 8000212:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000216:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800021a:	bfc1      	itttt	gt
 800021c:	18d2      	addgt	r2, r2, r3
 800021e:	4041      	eorgt	r1, r0
 8000220:	4048      	eorgt	r0, r1
 8000222:	4041      	eorgt	r1, r0
 8000224:	bfb8      	it	lt
 8000226:	425b      	neglt	r3, r3
 8000228:	2b19      	cmp	r3, #25
 800022a:	bf88      	it	hi
 800022c:	4770      	bxhi	lr
 800022e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000232:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4240      	negne	r0, r0
 800023e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000242:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000246:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4249      	negne	r1, r1
 800024e:	ea92 0f03 	teq	r2, r3
 8000252:	d03f      	beq.n	80002d4 <__addsf3+0xd8>
 8000254:	f1a2 0201 	sub.w	r2, r2, #1
 8000258:	fa41 fc03 	asr.w	ip, r1, r3
 800025c:	eb10 000c 	adds.w	r0, r0, ip
 8000260:	f1c3 0320 	rsb	r3, r3, #32
 8000264:	fa01 f103 	lsl.w	r1, r1, r3
 8000268:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800026c:	d502      	bpl.n	8000274 <__addsf3+0x78>
 800026e:	4249      	negs	r1, r1
 8000270:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000274:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000278:	d313      	bcc.n	80002a2 <__addsf3+0xa6>
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d306      	bcc.n	800028e <__addsf3+0x92>
 8000280:	0840      	lsrs	r0, r0, #1
 8000282:	ea4f 0131 	mov.w	r1, r1, rrx
 8000286:	f102 0201 	add.w	r2, r2, #1
 800028a:	2afe      	cmp	r2, #254	; 0xfe
 800028c:	d251      	bcs.n	8000332 <__addsf3+0x136>
 800028e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	ea40 0003 	orr.w	r0, r0, r3
 80002a0:	4770      	bx	lr
 80002a2:	0049      	lsls	r1, r1, #1
 80002a4:	eb40 0000 	adc.w	r0, r0, r0
 80002a8:	3a01      	subs	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002b0:	d2ed      	bcs.n	800028e <__addsf3+0x92>
 80002b2:	fab0 fc80 	clz	ip, r0
 80002b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ba:	ebb2 020c 	subs.w	r2, r2, ip
 80002be:	fa00 f00c 	lsl.w	r0, r0, ip
 80002c2:	bfaa      	itet	ge
 80002c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002c8:	4252      	neglt	r2, r2
 80002ca:	4318      	orrge	r0, r3
 80002cc:	bfbc      	itt	lt
 80002ce:	40d0      	lsrlt	r0, r2
 80002d0:	4318      	orrlt	r0, r3
 80002d2:	4770      	bx	lr
 80002d4:	f092 0f00 	teq	r2, #0
 80002d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002dc:	bf06      	itte	eq
 80002de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002e2:	3201      	addeq	r2, #1
 80002e4:	3b01      	subne	r3, #1
 80002e6:	e7b5      	b.n	8000254 <__addsf3+0x58>
 80002e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002f0:	bf18      	it	ne
 80002f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f6:	d021      	beq.n	800033c <__addsf3+0x140>
 80002f8:	ea92 0f03 	teq	r2, r3
 80002fc:	d004      	beq.n	8000308 <__addsf3+0x10c>
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	bf08      	it	eq
 8000304:	4608      	moveq	r0, r1
 8000306:	4770      	bx	lr
 8000308:	ea90 0f01 	teq	r0, r1
 800030c:	bf1c      	itt	ne
 800030e:	2000      	movne	r0, #0
 8000310:	4770      	bxne	lr
 8000312:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000316:	d104      	bne.n	8000322 <__addsf3+0x126>
 8000318:	0040      	lsls	r0, r0, #1
 800031a:	bf28      	it	cs
 800031c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000320:	4770      	bx	lr
 8000322:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000326:	bf3c      	itt	cc
 8000328:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800032c:	4770      	bxcc	lr
 800032e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000332:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000336:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800033a:	4770      	bx	lr
 800033c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000340:	bf16      	itet	ne
 8000342:	4608      	movne	r0, r1
 8000344:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000348:	4601      	movne	r1, r0
 800034a:	0242      	lsls	r2, r0, #9
 800034c:	bf06      	itte	eq
 800034e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000352:	ea90 0f01 	teqeq	r0, r1
 8000356:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800035a:	4770      	bx	lr

0800035c <__aeabi_ui2f>:
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e004      	b.n	800036c <__aeabi_i2f+0x8>
 8000362:	bf00      	nop

08000364 <__aeabi_i2f>:
 8000364:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000368:	bf48      	it	mi
 800036a:	4240      	negmi	r0, r0
 800036c:	ea5f 0c00 	movs.w	ip, r0
 8000370:	bf08      	it	eq
 8000372:	4770      	bxeq	lr
 8000374:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000378:	4601      	mov	r1, r0
 800037a:	f04f 0000 	mov.w	r0, #0
 800037e:	e01c      	b.n	80003ba <__aeabi_l2f+0x2a>

08000380 <__aeabi_ul2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	e00a      	b.n	80003a4 <__aeabi_l2f+0x14>
 800038e:	bf00      	nop

08000390 <__aeabi_l2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800039c:	d502      	bpl.n	80003a4 <__aeabi_l2f+0x14>
 800039e:	4240      	negs	r0, r0
 80003a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003a4:	ea5f 0c01 	movs.w	ip, r1
 80003a8:	bf02      	ittt	eq
 80003aa:	4684      	moveq	ip, r0
 80003ac:	4601      	moveq	r1, r0
 80003ae:	2000      	moveq	r0, #0
 80003b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003b4:	bf08      	it	eq
 80003b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003be:	fabc f28c 	clz	r2, ip
 80003c2:	3a08      	subs	r2, #8
 80003c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003c8:	db10      	blt.n	80003ec <__aeabi_l2f+0x5c>
 80003ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ce:	4463      	add	r3, ip
 80003d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003d4:	f1c2 0220 	rsb	r2, r2, #32
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	fa20 f202 	lsr.w	r2, r0, r2
 80003e0:	eb43 0002 	adc.w	r0, r3, r2
 80003e4:	bf08      	it	eq
 80003e6:	f020 0001 	biceq.w	r0, r0, #1
 80003ea:	4770      	bx	lr
 80003ec:	f102 0220 	add.w	r2, r2, #32
 80003f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800040a:	4770      	bx	lr

0800040c <__gesf2>:
 800040c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000410:	e006      	b.n	8000420 <__cmpsf2+0x4>
 8000412:	bf00      	nop

08000414 <__lesf2>:
 8000414:	f04f 0c01 	mov.w	ip, #1
 8000418:	e002      	b.n	8000420 <__cmpsf2+0x4>
 800041a:	bf00      	nop

0800041c <__cmpsf2>:
 800041c:	f04f 0c01 	mov.w	ip, #1
 8000420:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000424:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000428:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800042c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000430:	bf18      	it	ne
 8000432:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000436:	d011      	beq.n	800045c <__cmpsf2+0x40>
 8000438:	b001      	add	sp, #4
 800043a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800043e:	bf18      	it	ne
 8000440:	ea90 0f01 	teqne	r0, r1
 8000444:	bf58      	it	pl
 8000446:	ebb2 0003 	subspl.w	r0, r2, r3
 800044a:	bf88      	it	hi
 800044c:	17c8      	asrhi	r0, r1, #31
 800044e:	bf38      	it	cc
 8000450:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000454:	bf18      	it	ne
 8000456:	f040 0001 	orrne.w	r0, r0, #1
 800045a:	4770      	bx	lr
 800045c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000460:	d102      	bne.n	8000468 <__cmpsf2+0x4c>
 8000462:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000466:	d105      	bne.n	8000474 <__cmpsf2+0x58>
 8000468:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800046c:	d1e4      	bne.n	8000438 <__cmpsf2+0x1c>
 800046e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000472:	d0e1      	beq.n	8000438 <__cmpsf2+0x1c>
 8000474:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	4608      	mov	r0, r1
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b50f      	push	{r0, r1, r2, r3, lr}
 8000486:	f7ff ffc9 	bl	800041c <__cmpsf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	bf48      	it	mi
 800048e:	f110 0f00 	cmnmi.w	r0, #0
 8000492:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000498:	f7ff fff4 	bl	8000484 <__aeabi_cfcmpeq>
 800049c:	bf0c      	ite	eq
 800049e:	2001      	moveq	r0, #1
 80004a0:	2000      	movne	r0, #0
 80004a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004a6:	bf00      	nop

080004a8 <__aeabi_fcmplt>:
 80004a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004ac:	f7ff ffea 	bl	8000484 <__aeabi_cfcmpeq>
 80004b0:	bf34      	ite	cc
 80004b2:	2001      	movcc	r0, #1
 80004b4:	2000      	movcs	r0, #0
 80004b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ba:	bf00      	nop

080004bc <__aeabi_fcmple>:
 80004bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004c0:	f7ff ffe0 	bl	8000484 <__aeabi_cfcmpeq>
 80004c4:	bf94      	ite	ls
 80004c6:	2001      	movls	r0, #1
 80004c8:	2000      	movhi	r0, #0
 80004ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ce:	bf00      	nop

080004d0 <__aeabi_fcmpge>:
 80004d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004d4:	f7ff ffd2 	bl	800047c <__aeabi_cfrcmple>
 80004d8:	bf94      	ite	ls
 80004da:	2001      	movls	r0, #1
 80004dc:	2000      	movhi	r0, #0
 80004de:	f85d fb08 	ldr.w	pc, [sp], #8
 80004e2:	bf00      	nop

080004e4 <__aeabi_fcmpgt>:
 80004e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004e8:	f7ff ffc8 	bl	800047c <__aeabi_cfrcmple>
 80004ec:	bf34      	ite	cc
 80004ee:	2001      	movcc	r0, #1
 80004f0:	2000      	movcs	r0, #0
 80004f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2iz>:
 80004f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000500:	d30f      	bcc.n	8000522 <__aeabi_f2iz+0x2a>
 8000502:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000506:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800050a:	d90d      	bls.n	8000528 <__aeabi_f2iz+0x30>
 800050c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000514:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000518:	fa23 f002 	lsr.w	r0, r3, r2
 800051c:	bf18      	it	ne
 800051e:	4240      	negne	r0, r0
 8000520:	4770      	bx	lr
 8000522:	f04f 0000 	mov.w	r0, #0
 8000526:	4770      	bx	lr
 8000528:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800052c:	d101      	bne.n	8000532 <__aeabi_f2iz+0x3a>
 800052e:	0242      	lsls	r2, r0, #9
 8000530:	d105      	bne.n	800053e <__aeabi_f2iz+0x46>
 8000532:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000536:	bf08      	it	eq
 8000538:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800053c:	4770      	bx	lr
 800053e:	f04f 0000 	mov.w	r0, #0
 8000542:	4770      	bx	lr

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000554:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000558:	f000 b80c 	b.w	8000574 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f001 fed8 	bl	8002318 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_drsub>:
 8000578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e002      	b.n	8000584 <__adddf3>
 800057e:	bf00      	nop

08000580 <__aeabi_dsub>:
 8000580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000584 <__adddf3>:
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800058a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800058e:	ea94 0f05 	teq	r4, r5
 8000592:	bf08      	it	eq
 8000594:	ea90 0f02 	teqeq	r0, r2
 8000598:	bf1f      	itttt	ne
 800059a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800059e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005aa:	f000 80e2 	beq.w	8000772 <__adddf3+0x1ee>
 80005ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005b6:	bfb8      	it	lt
 80005b8:	426d      	neglt	r5, r5
 80005ba:	dd0c      	ble.n	80005d6 <__adddf3+0x52>
 80005bc:	442c      	add	r4, r5
 80005be:	ea80 0202 	eor.w	r2, r0, r2
 80005c2:	ea81 0303 	eor.w	r3, r1, r3
 80005c6:	ea82 0000 	eor.w	r0, r2, r0
 80005ca:	ea83 0101 	eor.w	r1, r3, r1
 80005ce:	ea80 0202 	eor.w	r2, r0, r2
 80005d2:	ea81 0303 	eor.w	r3, r1, r3
 80005d6:	2d36      	cmp	r5, #54	; 0x36
 80005d8:	bf88      	it	hi
 80005da:	bd30      	pophi	{r4, r5, pc}
 80005dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005ec:	d002      	beq.n	80005f4 <__adddf3+0x70>
 80005ee:	4240      	negs	r0, r0
 80005f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000600:	d002      	beq.n	8000608 <__adddf3+0x84>
 8000602:	4252      	negs	r2, r2
 8000604:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000608:	ea94 0f05 	teq	r4, r5
 800060c:	f000 80a7 	beq.w	800075e <__adddf3+0x1da>
 8000610:	f1a4 0401 	sub.w	r4, r4, #1
 8000614:	f1d5 0e20 	rsbs	lr, r5, #32
 8000618:	db0d      	blt.n	8000636 <__adddf3+0xb2>
 800061a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800061e:	fa22 f205 	lsr.w	r2, r2, r5
 8000622:	1880      	adds	r0, r0, r2
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	fa03 f20e 	lsl.w	r2, r3, lr
 800062c:	1880      	adds	r0, r0, r2
 800062e:	fa43 f305 	asr.w	r3, r3, r5
 8000632:	4159      	adcs	r1, r3
 8000634:	e00e      	b.n	8000654 <__adddf3+0xd0>
 8000636:	f1a5 0520 	sub.w	r5, r5, #32
 800063a:	f10e 0e20 	add.w	lr, lr, #32
 800063e:	2a01      	cmp	r2, #1
 8000640:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000644:	bf28      	it	cs
 8000646:	f04c 0c02 	orrcs.w	ip, ip, #2
 800064a:	fa43 f305 	asr.w	r3, r3, r5
 800064e:	18c0      	adds	r0, r0, r3
 8000650:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000658:	d507      	bpl.n	800066a <__adddf3+0xe6>
 800065a:	f04f 0e00 	mov.w	lr, #0
 800065e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000662:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000666:	eb6e 0101 	sbc.w	r1, lr, r1
 800066a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800066e:	d31b      	bcc.n	80006a8 <__adddf3+0x124>
 8000670:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000674:	d30c      	bcc.n	8000690 <__adddf3+0x10c>
 8000676:	0849      	lsrs	r1, r1, #1
 8000678:	ea5f 0030 	movs.w	r0, r0, rrx
 800067c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000680:	f104 0401 	add.w	r4, r4, #1
 8000684:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000688:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800068c:	f080 809a 	bcs.w	80007c4 <__adddf3+0x240>
 8000690:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	ea41 0105 	orr.w	r1, r1, r5
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006ac:	4140      	adcs	r0, r0
 80006ae:	eb41 0101 	adc.w	r1, r1, r1
 80006b2:	3c01      	subs	r4, #1
 80006b4:	bf28      	it	cs
 80006b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006ba:	d2e9      	bcs.n	8000690 <__adddf3+0x10c>
 80006bc:	f091 0f00 	teq	r1, #0
 80006c0:	bf04      	itt	eq
 80006c2:	4601      	moveq	r1, r0
 80006c4:	2000      	moveq	r0, #0
 80006c6:	fab1 f381 	clz	r3, r1
 80006ca:	bf08      	it	eq
 80006cc:	3320      	addeq	r3, #32
 80006ce:	f1a3 030b 	sub.w	r3, r3, #11
 80006d2:	f1b3 0220 	subs.w	r2, r3, #32
 80006d6:	da0c      	bge.n	80006f2 <__adddf3+0x16e>
 80006d8:	320c      	adds	r2, #12
 80006da:	dd08      	ble.n	80006ee <__adddf3+0x16a>
 80006dc:	f102 0c14 	add.w	ip, r2, #20
 80006e0:	f1c2 020c 	rsb	r2, r2, #12
 80006e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80006e8:	fa21 f102 	lsr.w	r1, r1, r2
 80006ec:	e00c      	b.n	8000708 <__adddf3+0x184>
 80006ee:	f102 0214 	add.w	r2, r2, #20
 80006f2:	bfd8      	it	le
 80006f4:	f1c2 0c20 	rsble	ip, r2, #32
 80006f8:	fa01 f102 	lsl.w	r1, r1, r2
 80006fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000700:	bfdc      	itt	le
 8000702:	ea41 010c 	orrle.w	r1, r1, ip
 8000706:	4090      	lslle	r0, r2
 8000708:	1ae4      	subs	r4, r4, r3
 800070a:	bfa2      	ittt	ge
 800070c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000710:	4329      	orrge	r1, r5
 8000712:	bd30      	popge	{r4, r5, pc}
 8000714:	ea6f 0404 	mvn.w	r4, r4
 8000718:	3c1f      	subs	r4, #31
 800071a:	da1c      	bge.n	8000756 <__adddf3+0x1d2>
 800071c:	340c      	adds	r4, #12
 800071e:	dc0e      	bgt.n	800073e <__adddf3+0x1ba>
 8000720:	f104 0414 	add.w	r4, r4, #20
 8000724:	f1c4 0220 	rsb	r2, r4, #32
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f302 	lsl.w	r3, r1, r2
 8000730:	ea40 0003 	orr.w	r0, r0, r3
 8000734:	fa21 f304 	lsr.w	r3, r1, r4
 8000738:	ea45 0103 	orr.w	r1, r5, r3
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	f1c4 040c 	rsb	r4, r4, #12
 8000742:	f1c4 0220 	rsb	r2, r4, #32
 8000746:	fa20 f002 	lsr.w	r0, r0, r2
 800074a:	fa01 f304 	lsl.w	r3, r1, r4
 800074e:	ea40 0003 	orr.w	r0, r0, r3
 8000752:	4629      	mov	r1, r5
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	fa21 f004 	lsr.w	r0, r1, r4
 800075a:	4629      	mov	r1, r5
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	f094 0f00 	teq	r4, #0
 8000762:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000766:	bf06      	itte	eq
 8000768:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800076c:	3401      	addeq	r4, #1
 800076e:	3d01      	subne	r5, #1
 8000770:	e74e      	b.n	8000610 <__adddf3+0x8c>
 8000772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000776:	bf18      	it	ne
 8000778:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800077c:	d029      	beq.n	80007d2 <__adddf3+0x24e>
 800077e:	ea94 0f05 	teq	r4, r5
 8000782:	bf08      	it	eq
 8000784:	ea90 0f02 	teqeq	r0, r2
 8000788:	d005      	beq.n	8000796 <__adddf3+0x212>
 800078a:	ea54 0c00 	orrs.w	ip, r4, r0
 800078e:	bf04      	itt	eq
 8000790:	4619      	moveq	r1, r3
 8000792:	4610      	moveq	r0, r2
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	ea91 0f03 	teq	r1, r3
 800079a:	bf1e      	ittt	ne
 800079c:	2100      	movne	r1, #0
 800079e:	2000      	movne	r0, #0
 80007a0:	bd30      	popne	{r4, r5, pc}
 80007a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007a6:	d105      	bne.n	80007b4 <__adddf3+0x230>
 80007a8:	0040      	lsls	r0, r0, #1
 80007aa:	4149      	adcs	r1, r1
 80007ac:	bf28      	it	cs
 80007ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007b2:	bd30      	pop	{r4, r5, pc}
 80007b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007b8:	bf3c      	itt	cc
 80007ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007be:	bd30      	popcc	{r4, r5, pc}
 80007c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007d6:	bf1a      	itte	ne
 80007d8:	4619      	movne	r1, r3
 80007da:	4610      	movne	r0, r2
 80007dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007e0:	bf1c      	itt	ne
 80007e2:	460b      	movne	r3, r1
 80007e4:	4602      	movne	r2, r0
 80007e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007ea:	bf06      	itte	eq
 80007ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007f0:	ea91 0f03 	teqeq	r1, r3
 80007f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	bf00      	nop

080007fc <__aeabi_ui2d>:
 80007fc:	f090 0f00 	teq	r0, #0
 8000800:	bf04      	itt	eq
 8000802:	2100      	moveq	r1, #0
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000810:	f04f 0500 	mov.w	r5, #0
 8000814:	f04f 0100 	mov.w	r1, #0
 8000818:	e750      	b.n	80006bc <__adddf3+0x138>
 800081a:	bf00      	nop

0800081c <__aeabi_i2d>:
 800081c:	f090 0f00 	teq	r0, #0
 8000820:	bf04      	itt	eq
 8000822:	2100      	moveq	r1, #0
 8000824:	4770      	bxeq	lr
 8000826:	b530      	push	{r4, r5, lr}
 8000828:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000830:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000834:	bf48      	it	mi
 8000836:	4240      	negmi	r0, r0
 8000838:	f04f 0100 	mov.w	r1, #0
 800083c:	e73e      	b.n	80006bc <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_f2d>:
 8000840:	0042      	lsls	r2, r0, #1
 8000842:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000846:	ea4f 0131 	mov.w	r1, r1, rrx
 800084a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800084e:	bf1f      	itttt	ne
 8000850:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000854:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000858:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800085c:	4770      	bxne	lr
 800085e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000862:	bf08      	it	eq
 8000864:	4770      	bxeq	lr
 8000866:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800086a:	bf04      	itt	eq
 800086c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000870:	4770      	bxeq	lr
 8000872:	b530      	push	{r4, r5, lr}
 8000874:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800087c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000880:	e71c      	b.n	80006bc <__adddf3+0x138>
 8000882:	bf00      	nop

08000884 <__aeabi_ul2d>:
 8000884:	ea50 0201 	orrs.w	r2, r0, r1
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	b530      	push	{r4, r5, lr}
 800088e:	f04f 0500 	mov.w	r5, #0
 8000892:	e00a      	b.n	80008aa <__aeabi_l2d+0x16>

08000894 <__aeabi_l2d>:
 8000894:	ea50 0201 	orrs.w	r2, r0, r1
 8000898:	bf08      	it	eq
 800089a:	4770      	bxeq	lr
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008a2:	d502      	bpl.n	80008aa <__aeabi_l2d+0x16>
 80008a4:	4240      	negs	r0, r0
 80008a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008b6:	f43f aed8 	beq.w	800066a <__adddf3+0xe6>
 80008ba:	f04f 0203 	mov.w	r2, #3
 80008be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008c2:	bf18      	it	ne
 80008c4:	3203      	addne	r2, #3
 80008c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ca:	bf18      	it	ne
 80008cc:	3203      	addne	r2, #3
 80008ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008d2:	f1c2 0320 	rsb	r3, r2, #32
 80008d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80008da:	fa20 f002 	lsr.w	r0, r0, r2
 80008de:	fa01 fe03 	lsl.w	lr, r1, r3
 80008e2:	ea40 000e 	orr.w	r0, r0, lr
 80008e6:	fa21 f102 	lsr.w	r1, r1, r2
 80008ea:	4414      	add	r4, r2
 80008ec:	e6bd      	b.n	800066a <__adddf3+0xe6>
 80008ee:	bf00      	nop

080008f0 <__aeabi_dmul>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fe:	bf1d      	ittte	ne
 8000900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000904:	ea94 0f0c 	teqne	r4, ip
 8000908:	ea95 0f0c 	teqne	r5, ip
 800090c:	f000 f8de 	bleq	8000acc <__aeabi_dmul+0x1dc>
 8000910:	442c      	add	r4, r5
 8000912:	ea81 0603 	eor.w	r6, r1, r3
 8000916:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800091a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800091e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000922:	bf18      	it	ne
 8000924:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000930:	d038      	beq.n	80009a4 <__aeabi_dmul+0xb4>
 8000932:	fba0 ce02 	umull	ip, lr, r0, r2
 8000936:	f04f 0500 	mov.w	r5, #0
 800093a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800093e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000942:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000946:	f04f 0600 	mov.w	r6, #0
 800094a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800094e:	f09c 0f00 	teq	ip, #0
 8000952:	bf18      	it	ne
 8000954:	f04e 0e01 	orrne.w	lr, lr, #1
 8000958:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800095c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000960:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000964:	d204      	bcs.n	8000970 <__aeabi_dmul+0x80>
 8000966:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800096a:	416d      	adcs	r5, r5
 800096c:	eb46 0606 	adc.w	r6, r6, r6
 8000970:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000974:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000978:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800097c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000980:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000984:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000988:	bf88      	it	hi
 800098a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098e:	d81e      	bhi.n	80009ce <__aeabi_dmul+0xde>
 8000990:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000994:	bf08      	it	eq
 8000996:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009a8:	ea46 0101 	orr.w	r1, r6, r1
 80009ac:	ea40 0002 	orr.w	r0, r0, r2
 80009b0:	ea81 0103 	eor.w	r1, r1, r3
 80009b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	f300 80ab 	bgt.w	8000b28 <__aeabi_dmul+0x238>
 80009d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009d6:	bfde      	ittt	le
 80009d8:	2000      	movle	r0, #0
 80009da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009de:	bd70      	pople	{r4, r5, r6, pc}
 80009e0:	f1c4 0400 	rsb	r4, r4, #0
 80009e4:	3c20      	subs	r4, #32
 80009e6:	da35      	bge.n	8000a54 <__aeabi_dmul+0x164>
 80009e8:	340c      	adds	r4, #12
 80009ea:	dc1b      	bgt.n	8000a24 <__aeabi_dmul+0x134>
 80009ec:	f104 0414 	add.w	r4, r4, #20
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f305 	lsl.w	r3, r0, r5
 80009f8:	fa20 f004 	lsr.w	r0, r0, r4
 80009fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000a00:	ea40 0002 	orr.w	r0, r0, r2
 8000a04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a10:	fa21 f604 	lsr.w	r6, r1, r4
 8000a14:	eb42 0106 	adc.w	r1, r2, r6
 8000a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a1c:	bf08      	it	eq
 8000a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f1c4 040c 	rsb	r4, r4, #12
 8000a28:	f1c4 0520 	rsb	r5, r4, #32
 8000a2c:	fa00 f304 	lsl.w	r3, r0, r4
 8000a30:	fa20 f005 	lsr.w	r0, r0, r5
 8000a34:	fa01 f204 	lsl.w	r2, r1, r4
 8000a38:	ea40 0002 	orr.w	r0, r0, r2
 8000a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a44:	f141 0100 	adc.w	r1, r1, #0
 8000a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a4c:	bf08      	it	eq
 8000a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f1c4 0520 	rsb	r5, r4, #32
 8000a58:	fa00 f205 	lsl.w	r2, r0, r5
 8000a5c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a60:	fa20 f304 	lsr.w	r3, r0, r4
 8000a64:	fa01 f205 	lsl.w	r2, r1, r5
 8000a68:	ea43 0302 	orr.w	r3, r3, r2
 8000a6c:	fa21 f004 	lsr.w	r0, r1, r4
 8000a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a74:	fa21 f204 	lsr.w	r2, r1, r4
 8000a78:	ea20 0002 	bic.w	r0, r0, r2
 8000a7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a84:	bf08      	it	eq
 8000a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f094 0f00 	teq	r4, #0
 8000a90:	d10f      	bne.n	8000ab2 <__aeabi_dmul+0x1c2>
 8000a92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a96:	0040      	lsls	r0, r0, #1
 8000a98:	eb41 0101 	adc.w	r1, r1, r1
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000aa0:	bf08      	it	eq
 8000aa2:	3c01      	subeq	r4, #1
 8000aa4:	d0f7      	beq.n	8000a96 <__aeabi_dmul+0x1a6>
 8000aa6:	ea41 0106 	orr.w	r1, r1, r6
 8000aaa:	f095 0f00 	teq	r5, #0
 8000aae:	bf18      	it	ne
 8000ab0:	4770      	bxne	lr
 8000ab2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	eb43 0303 	adc.w	r3, r3, r3
 8000abc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ac0:	bf08      	it	eq
 8000ac2:	3d01      	subeq	r5, #1
 8000ac4:	d0f7      	beq.n	8000ab6 <__aeabi_dmul+0x1c6>
 8000ac6:	ea43 0306 	orr.w	r3, r3, r6
 8000aca:	4770      	bx	lr
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad4:	bf18      	it	ne
 8000ad6:	ea95 0f0c 	teqne	r5, ip
 8000ada:	d00c      	beq.n	8000af6 <__aeabi_dmul+0x206>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	d1d1      	bne.n	8000a8c <__aeabi_dmul+0x19c>
 8000ae8:	ea81 0103 	eor.w	r1, r1, r3
 8000aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000afa:	bf06      	itte	eq
 8000afc:	4610      	moveq	r0, r2
 8000afe:	4619      	moveq	r1, r3
 8000b00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b04:	d019      	beq.n	8000b3a <__aeabi_dmul+0x24a>
 8000b06:	ea94 0f0c 	teq	r4, ip
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dmul+0x222>
 8000b0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b10:	d113      	bne.n	8000b3a <__aeabi_dmul+0x24a>
 8000b12:	ea95 0f0c 	teq	r5, ip
 8000b16:	d105      	bne.n	8000b24 <__aeabi_dmul+0x234>
 8000b18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b1c:	bf1c      	itt	ne
 8000b1e:	4610      	movne	r0, r2
 8000b20:	4619      	movne	r1, r3
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dmul+0x24a>
 8000b24:	ea81 0103 	eor.w	r1, r1, r3
 8000b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
 8000b3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b42:	bd70      	pop	{r4, r5, r6, pc}

08000b44 <__aeabi_ddiv>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b52:	bf1d      	ittte	ne
 8000b54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b58:	ea94 0f0c 	teqne	r4, ip
 8000b5c:	ea95 0f0c 	teqne	r5, ip
 8000b60:	f000 f8a7 	bleq	8000cb2 <__aeabi_ddiv+0x16e>
 8000b64:	eba4 0405 	sub.w	r4, r4, r5
 8000b68:	ea81 0e03 	eor.w	lr, r1, r3
 8000b6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b74:	f000 8088 	beq.w	8000c88 <__aeabi_ddiv+0x144>
 8000b78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b9c:	429d      	cmp	r5, r3
 8000b9e:	bf08      	it	eq
 8000ba0:	4296      	cmpeq	r6, r2
 8000ba2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ba6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000baa:	d202      	bcs.n	8000bb2 <__aeabi_ddiv+0x6e>
 8000bac:	085b      	lsrs	r3, r3, #1
 8000bae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bb2:	1ab6      	subs	r6, r6, r2
 8000bb4:	eb65 0503 	sbc.w	r5, r5, r3
 8000bb8:	085b      	lsrs	r3, r3, #1
 8000bba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bce:	bf22      	ittt	cs
 8000bd0:	1ab6      	subcs	r6, r6, r2
 8000bd2:	4675      	movcs	r5, lr
 8000bd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bde:	ebb6 0e02 	subs.w	lr, r6, r2
 8000be2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000be6:	bf22      	ittt	cs
 8000be8:	1ab6      	subcs	r6, r6, r2
 8000bea:	4675      	movcs	r5, lr
 8000bec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bfe:	bf22      	ittt	cs
 8000c00:	1ab6      	subcs	r6, r6, r2
 8000c02:	4675      	movcs	r5, lr
 8000c04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c16:	bf22      	ittt	cs
 8000c18:	1ab6      	subcs	r6, r6, r2
 8000c1a:	4675      	movcs	r5, lr
 8000c1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c24:	d018      	beq.n	8000c58 <__aeabi_ddiv+0x114>
 8000c26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c42:	d1c0      	bne.n	8000bc6 <__aeabi_ddiv+0x82>
 8000c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c48:	d10b      	bne.n	8000c62 <__aeabi_ddiv+0x11e>
 8000c4a:	ea41 0100 	orr.w	r1, r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c56:	e7b6      	b.n	8000bc6 <__aeabi_ddiv+0x82>
 8000c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c5c:	bf04      	itt	eq
 8000c5e:	4301      	orreq	r1, r0
 8000c60:	2000      	moveq	r0, #0
 8000c62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c66:	bf88      	it	hi
 8000c68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c6c:	f63f aeaf 	bhi.w	80009ce <__aeabi_dmul+0xde>
 8000c70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c74:	bf04      	itt	eq
 8000c76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c7e:	f150 0000 	adcs.w	r0, r0, #0
 8000c82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c94:	bfc2      	ittt	gt
 8000c96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ca4:	f04f 0e00 	mov.w	lr, #0
 8000ca8:	3c01      	subs	r4, #1
 8000caa:	e690      	b.n	80009ce <__aeabi_dmul+0xde>
 8000cac:	ea45 0e06 	orr.w	lr, r5, r6
 8000cb0:	e68d      	b.n	80009ce <__aeabi_dmul+0xde>
 8000cb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cb6:	ea94 0f0c 	teq	r4, ip
 8000cba:	bf08      	it	eq
 8000cbc:	ea95 0f0c 	teqeq	r5, ip
 8000cc0:	f43f af3b 	beq.w	8000b3a <__aeabi_dmul+0x24a>
 8000cc4:	ea94 0f0c 	teq	r4, ip
 8000cc8:	d10a      	bne.n	8000ce0 <__aeabi_ddiv+0x19c>
 8000cca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cce:	f47f af34 	bne.w	8000b3a <__aeabi_dmul+0x24a>
 8000cd2:	ea95 0f0c 	teq	r5, ip
 8000cd6:	f47f af25 	bne.w	8000b24 <__aeabi_dmul+0x234>
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	e72c      	b.n	8000b3a <__aeabi_dmul+0x24a>
 8000ce0:	ea95 0f0c 	teq	r5, ip
 8000ce4:	d106      	bne.n	8000cf4 <__aeabi_ddiv+0x1b0>
 8000ce6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cea:	f43f aefd 	beq.w	8000ae8 <__aeabi_dmul+0x1f8>
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	e722      	b.n	8000b3a <__aeabi_dmul+0x24a>
 8000cf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cf8:	bf18      	it	ne
 8000cfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cfe:	f47f aec5 	bne.w	8000a8c <__aeabi_dmul+0x19c>
 8000d02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d06:	f47f af0d 	bne.w	8000b24 <__aeabi_dmul+0x234>
 8000d0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d0e:	f47f aeeb 	bne.w	8000ae8 <__aeabi_dmul+0x1f8>
 8000d12:	e712      	b.n	8000b3a <__aeabi_dmul+0x24a>

08000d14 <__aeabi_d2uiz>:
 8000d14:	004a      	lsls	r2, r1, #1
 8000d16:	d211      	bcs.n	8000d3c <__aeabi_d2uiz+0x28>
 8000d18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d1c:	d211      	bcs.n	8000d42 <__aeabi_d2uiz+0x2e>
 8000d1e:	d50d      	bpl.n	8000d3c <__aeabi_d2uiz+0x28>
 8000d20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d28:	d40e      	bmi.n	8000d48 <__aeabi_d2uiz+0x34>
 8000d2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d36:	fa23 f002 	lsr.w	r0, r3, r2
 8000d3a:	4770      	bx	lr
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	4770      	bx	lr
 8000d42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d46:	d102      	bne.n	8000d4e <__aeabi_d2uiz+0x3a>
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	4770      	bx	lr
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_fmul>:
 8000d54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d62:	ea92 0f0c 	teqne	r2, ip
 8000d66:	ea93 0f0c 	teqne	r3, ip
 8000d6a:	d06f      	beq.n	8000e4c <__aeabi_fmul+0xf8>
 8000d6c:	441a      	add	r2, r3
 8000d6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d72:	0240      	lsls	r0, r0, #9
 8000d74:	bf18      	it	ne
 8000d76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7a:	d01e      	beq.n	8000dba <__aeabi_fmul+0x66>
 8000d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d88:	fba0 3101 	umull	r3, r1, r0, r1
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d94:	bf3e      	ittt	cc
 8000d96:	0049      	lslcc	r1, r1, #1
 8000d98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	ea40 0001 	orr.w	r0, r0, r1
 8000da2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da6:	2afd      	cmp	r2, #253	; 0xfd
 8000da8:	d81d      	bhi.n	8000de6 <__aeabi_fmul+0x92>
 8000daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db2:	bf08      	it	eq
 8000db4:	f020 0001 	biceq.w	r0, r0, #1
 8000db8:	4770      	bx	lr
 8000dba:	f090 0f00 	teq	r0, #0
 8000dbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc2:	bf08      	it	eq
 8000dc4:	0249      	lsleq	r1, r1, #9
 8000dc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dce:	3a7f      	subs	r2, #127	; 0x7f
 8000dd0:	bfc2      	ittt	gt
 8000dd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dda:	4770      	bxgt	lr
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	3a01      	subs	r2, #1
 8000de6:	dc5d      	bgt.n	8000ea4 <__aeabi_fmul+0x150>
 8000de8:	f112 0f19 	cmn.w	r2, #25
 8000dec:	bfdc      	itt	le
 8000dee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	4770      	bxle	lr
 8000df4:	f1c2 0200 	rsb	r2, r2, #0
 8000df8:	0041      	lsls	r1, r0, #1
 8000dfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfe:	f1c2 0220 	rsb	r2, r2, #32
 8000e02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0a:	f140 0000 	adc.w	r0, r0, #0
 8000e0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e12:	bf08      	it	eq
 8000e14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e18:	4770      	bx	lr
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xce>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xe6>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e78f      	b.n	8000d6c <__aeabi_fmul+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	bf18      	it	ne
 8000e56:	ea93 0f0c 	teqne	r3, ip
 8000e5a:	d00a      	beq.n	8000e72 <__aeabi_fmul+0x11e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1d8      	bne.n	8000e1a <__aeabi_fmul+0xc6>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	bf17      	itett	ne
 8000e78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e7c:	4608      	moveq	r0, r1
 8000e7e:	f091 0f00 	teqne	r1, #0
 8000e82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e86:	d014      	beq.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_fmul+0x13e>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d10f      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000e92:	ea93 0f0c 	teq	r3, ip
 8000e96:	d103      	bne.n	8000ea0 <__aeabi_fmul+0x14c>
 8000e98:	024b      	lsls	r3, r1, #9
 8000e9a:	bf18      	it	ne
 8000e9c:	4608      	movne	r0, r1
 8000e9e:	d108      	bne.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ea0:	ea80 0001 	eor.w	r0, r0, r1
 8000ea4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb0:	4770      	bx	lr
 8000eb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eba:	4770      	bx	lr

08000ebc <__aeabi_fdiv>:
 8000ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec4:	bf1e      	ittt	ne
 8000ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eca:	ea92 0f0c 	teqne	r2, ip
 8000ece:	ea93 0f0c 	teqne	r3, ip
 8000ed2:	d069      	beq.n	8000fa8 <__aeabi_fdiv+0xec>
 8000ed4:	eba2 0203 	sub.w	r2, r2, r3
 8000ed8:	ea80 0c01 	eor.w	ip, r0, r1
 8000edc:	0249      	lsls	r1, r1, #9
 8000ede:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee2:	d037      	beq.n	8000f54 <__aeabi_fdiv+0x98>
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	bf38      	it	cc
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f02:	428b      	cmp	r3, r1
 8000f04:	bf24      	itt	cs
 8000f06:	1a5b      	subcs	r3, r3, r1
 8000f08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f10:	bf24      	itt	cs
 8000f12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1e:	bf24      	itt	cs
 8000f20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f2c:	bf24      	itt	cs
 8000f2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	bf18      	it	ne
 8000f3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3e:	d1e0      	bne.n	8000f02 <__aeabi_fdiv+0x46>
 8000f40:	2afd      	cmp	r2, #253	; 0xfd
 8000f42:	f63f af50 	bhi.w	8000de6 <__aeabi_fmul+0x92>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f4c:	bf08      	it	eq
 8000f4e:	f020 0001 	biceq.w	r0, r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f5c:	327f      	adds	r2, #127	; 0x7f
 8000f5e:	bfc2      	ittt	gt
 8000f60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f68:	4770      	bxgt	lr
 8000f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	3a01      	subs	r2, #1
 8000f74:	e737      	b.n	8000de6 <__aeabi_fmul+0x92>
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xc2>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xda>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e795      	b.n	8000ed4 <__aeabi_fdiv+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d108      	bne.n	8000fc4 <__aeabi_fdiv+0x108>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	f47f af7d 	bne.w	8000eb2 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	f47f af70 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e776      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fc4:	ea93 0f0c 	teq	r3, ip
 8000fc8:	d104      	bne.n	8000fd4 <__aeabi_fdiv+0x118>
 8000fca:	024b      	lsls	r3, r1, #9
 8000fcc:	f43f af4c 	beq.w	8000e68 <__aeabi_fmul+0x114>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e76e      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000fd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd8:	bf18      	it	ne
 8000fda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fde:	d1ca      	bne.n	8000f76 <__aeabi_fdiv+0xba>
 8000fe0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe4:	f47f af5c 	bne.w	8000ea0 <__aeabi_fmul+0x14c>
 8000fe8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fec:	f47f af3c 	bne.w	8000e68 <__aeabi_fmul+0x114>
 8000ff0:	e75f      	b.n	8000eb2 <__aeabi_fmul+0x15e>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_f2uiz>:
 8000ff4:	0042      	lsls	r2, r0, #1
 8000ff6:	d20e      	bcs.n	8001016 <__aeabi_f2uiz+0x22>
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30b      	bcc.n	8001016 <__aeabi_f2uiz+0x22>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d409      	bmi.n	800101c <__aeabi_f2uiz+0x28>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	fa23 f002 	lsr.w	r0, r3, r2
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr
 800101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001020:	d101      	bne.n	8001026 <__aeabi_f2uiz+0x32>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	d102      	bne.n	800102c <__aeabi_f2uiz+0x38>
 8001026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102a:	4770      	bx	lr
 800102c:	f04f 0000 	mov.w	r0, #0
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <Reset_Handler>:
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <Zerobss+0x10>)
 8001036:	4685      	mov	sp, r0
 8001038:	2100      	movs	r1, #0
 800103a:	e003      	b.n	8001044 <DataInit>

0800103c <CopyData>:
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <Zerobss+0x14>)
 800103e:	585b      	ldr	r3, [r3, r1]
 8001040:	5043      	str	r3, [r0, r1]
 8001042:	3104      	adds	r1, #4

08001044 <DataInit>:
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <Zerobss+0x18>)
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <Zerobss+0x1c>)
 8001048:	1842      	adds	r2, r0, r1
 800104a:	429a      	cmp	r2, r3
 800104c:	d3f6      	bcc.n	800103c <CopyData>
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <Zerobss+0x20>)
 8001050:	e002      	b.n	8001058 <Zerobss>

08001052 <FillZerobss>:
 8001052:	2300      	movs	r3, #0
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <Zerobss>:
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <Zerobss+0x24>)
 800105a:	429a      	cmp	r2, r3
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>
 800105e:	f007 fe77 	bl	8008d50 <SystemInit>
 8001062:	f000 f8ff 	bl	8001264 <main>
 8001066:	4770      	bx	lr
 8001068:	2000c000 	andcs	ip, r0, r0
 800106c:	0800c400 	stmdaeq	r0, {sl, lr, pc}
 8001070:	20000000 	andcs	r0, r0, r0
 8001074:	2000007c 	andcs	r0, r0, ip, ror r0
 8001078:	20000080 	andcs	r0, r0, r0, lsl #1
 800107c:	200077b4 			; <UNDEFINED> instruction: 0x200077b4

08001080 <ADC0_1_IRQHandler>:
 8001080:	e7fe      	b.n	8001080 <ADC0_1_IRQHandler>

08001082 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8001082:	4770      	bx	lr

08001084 <PixelDmxStartStop::Start()>:
 8001084:	2204      	movs	r2, #4
 8001086:	4b01      	ldr	r3, [pc, #4]	; (800108c <PixelDmxStartStop::Start()+0x8>)
 8001088:	611a      	str	r2, [r3, #16]
 800108a:	4770      	bx	lr
 800108c:	40011000 	andmi	r1, r1, r0

08001090 <PixelDmxStartStop::Stop()>:
 8001090:	2204      	movs	r2, #4
 8001092:	4b01      	ldr	r3, [pc, #4]	; (8001098 <PixelDmxStartStop::Stop()+0x8>)
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	4770      	bx	lr
 8001098:	40011000 	andmi	r1, r1, r0

0800109c <PixelDmxStartStop::~PixelDmxStartStop()>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	f007 fc1d 	bl	80088de <operator delete(void*)>
 80010a4:	4620      	mov	r0, r4
 80010a6:	bd10      	pop	{r4, pc}

080010a8 <RDMResponder::PersonalityUpdate(LightSet*)>:
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	4e0a      	ldr	r6, [pc, #40]	; (80010d4 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 80010ac:	4604      	mov	r4, r0
 80010ae:	6830      	ldr	r0, [r6, #0]
 80010b0:	460d      	mov	r5, r1
 80010b2:	4281      	cmp	r1, r0
 80010b4:	d007      	beq.n	80010c6 <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 80010b6:	6803      	ldr	r3, [r0, #0]
 80010b8:	2100      	movs	r1, #0
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4798      	blx	r3
 80010be:	2200      	movs	r2, #0
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 80010c2:	6035      	str	r5, [r6, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	4620      	mov	r0, r4
 80010c8:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80010cc:	f000 fbe8 	bl	80018a0 <RDMResponder::PersonalityUpdate(unsigned int)>
 80010d0:	bd70      	pop	{r4, r5, r6, pc}
 80010d2:	bf00      	nop
 80010d4:	200001a0 	andcs	r0, r0, r0, lsr #3
 80010d8:	2000019c 	mulcs	r0, ip, r1

080010dc <RDMResponder::DmxStartAddressUpdate()>:
 80010dc:	b508      	push	{r3, lr}
 80010de:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80010e2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 80010e6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80010ea:	b289      	uxth	r1, r1
 80010ec:	f000 fbc4 	bl	8001878 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 80010f0:	bd08      	pop	{r3, pc}

080010f2 <Display::ClearLine(unsigned int) [clone .isra.0]>:
 80010f2:	b110      	cbz	r0, 80010fa <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	4718      	bx	r3
 80010fa:	4770      	bx	lr

080010fc <RDMResponder::~RDMResponder()>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4604      	mov	r4, r0
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <RDMResponder::~RDMResponder()+0x3c>)
 8001102:	f840 3b8c 	str.w	r3, [r0], #140
 8001106:	f002 fb0d 	bl	8003724 <RDMSubDevices::~RDMSubDevices()>
 800110a:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800110e:	f001 fb2b 	bl	8002768 <RDMSensors::~RDMSensors()>
 8001112:	2300      	movs	r3, #0
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800111c:	f002 ff0c 	bl	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <RDMResponder::~RDMResponder()+0x40>)
 8001122:	2100      	movs	r1, #0
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	4798      	blx	r3
 800112c:	2200      	movs	r2, #0
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <RDMResponder::~RDMResponder()+0x44>)
 8001130:	4620      	mov	r0, r4
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	bd10      	pop	{r4, pc}
 8001136:	bf00      	nop
 8001138:	0800a83c 	stmdaeq	r0, {r2, r3, r4, r5, fp, sp, pc}
 800113c:	200001a0 	andcs	r0, r0, r0, lsr #3
 8001140:	2000019c 	mulcs	r0, ip, r1

08001144 <RDMResponder::~RDMResponder()>:
 8001144:	b510      	push	{r4, lr}
 8001146:	4604      	mov	r4, r0
 8001148:	f7ff ffd8 	bl	80010fc <RDMResponder::~RDMResponder()>
 800114c:	4620      	mov	r0, r4
 800114e:	f007 fbc6 	bl	80088de <operator delete(void*)>
 8001152:	4620      	mov	r0, r4
 8001154:	bd10      	pop	{r4, pc}

08001156 <Display::Printf(unsigned int, char const*, ...)>:
 8001156:	b40c      	push	{r2, r3}
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	6984      	ldr	r4, [r0, #24]
 800115c:	4605      	mov	r5, r0
 800115e:	460e      	mov	r6, r1
 8001160:	b08a      	sub	sp, #40	; 0x28
 8001162:	b174      	cbz	r4, 8001182 <Display::Printf(unsigned int, char const*, ...)+0x2c>
 8001164:	ab0f      	add	r3, sp, #60	; 0x3c
 8001166:	2120      	movs	r1, #32
 8001168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800116a:	a802      	add	r0, sp, #8
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f001 f8bb 	bl	80022e8 <vsnprintf>
 8001172:	4604      	mov	r4, r0
 8001174:	69a8      	ldr	r0, [r5, #24]
 8001176:	4631      	mov	r1, r6
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	aa02      	add	r2, sp, #8
 800117c:	69dd      	ldr	r5, [r3, #28]
 800117e:	4623      	mov	r3, r4
 8001180:	47a8      	blx	r5
 8001182:	4620      	mov	r0, r4
 8001184:	b00a      	add	sp, #40	; 0x28
 8001186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800118a:	b002      	add	sp, #8
 800118c:	4770      	bx	lr
	...

08001190 <Display::SetSleep(bool)>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	4604      	mov	r4, r0
 8001194:	6980      	ldr	r0, [r0, #24]
 8001196:	460d      	mov	r5, r1
 8001198:	b138      	cbz	r0, 80011aa <Display::SetSleep(bool)+0x1a>
 800119a:	6803      	ldr	r3, [r0, #0]
 800119c:	7421      	strb	r1, [r4, #16]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	4798      	blx	r3
 80011a2:	b915      	cbnz	r5, 80011aa <Display::SetSleep(bool)+0x1a>
 80011a4:	4b01      	ldr	r3, [pc, #4]	; (80011ac <Display::SetSleep(bool)+0x1c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6063      	str	r3, [r4, #4]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200017ac 	andcs	r1, r0, ip, lsr #15

080011b0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 80011b0:	2300      	movs	r3, #0
 80011b2:	b570      	push	{r4, r5, r6, lr}
 80011b4:	4604      	mov	r4, r0
 80011b6:	460e      	mov	r6, r1
 80011b8:	4615      	mov	r5, r2
 80011ba:	6043      	str	r3, [r0, #4]
 80011bc:	6283      	str	r3, [r0, #40]	; 0x28
 80011be:	b972      	cbnz	r2, 80011de <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 80011c0:	8002      	strh	r2, [r0, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	f104 0208 	add.w	r2, r4, #8
 80011c8:	1e71      	subs	r1, r6, #1
 80011ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80011ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80011d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80011d4:	b10b      	cbz	r3, 80011da <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 80011d6:	4290      	cmp	r0, r2
 80011d8:	d108      	bne.n	80011ec <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 80011da:	4620      	mov	r0, r4
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	4610      	mov	r0, r2
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	4798      	blx	r3
 80011e6:	6065      	str	r5, [r4, #4]
 80011e8:	8020      	strh	r0, [r4, #0]
 80011ea:	e7ea      	b.n	80011c2 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 80011ec:	f802 3b01 	strb.w	r3, [r2], #1
 80011f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f2:	3301      	adds	r3, #1
 80011f4:	e7eb      	b.n	80011ce <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

080011f8 <display::timeout::gpio_init()>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	f240 6003 	movw	r0, #1539	; 0x603
 80011fe:	f007 ffd9 	bl	80091b4 <rcu_periph_clock_enable>
 8001202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001206:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120a:	2203      	movs	r2, #3
 800120c:	2148      	movs	r1, #72	; 0x48
 800120e:	4801      	ldr	r0, [pc, #4]	; (8001214 <display::timeout::gpio_init()+0x1c>)
 8001210:	f007 bf3e 	b.w	8009090 <gpio_init>
 8001214:	40010c00 	andmi	r0, r1, r0, lsl #24

08001218 <display::timeout::gpio_renew()>:
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <display::timeout::gpio_renew()+0x10>)
 800121a:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800121e:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8001222:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001226:	4770      	bx	lr
 8001228:	40010000 	andmi	r0, r1, r0

0800122c <is_config_mode()>:
 800122c:	b510      	push	{r4, lr}
 800122e:	4c09      	ldr	r4, [pc, #36]	; (8001254 <is_config_mode()+0x28>)
 8001230:	f240 6002 	movw	r0, #1538	; 0x602
 8001234:	f007 ffbe 	bl	80091b4 <rcu_periph_clock_enable>
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	2203      	movs	r2, #3
 800123c:	4620      	mov	r0, r4
 800123e:	2148      	movs	r1, #72	; 0x48
 8001240:	f007 ff26 	bl	8009090 <gpio_init>
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	4620      	mov	r0, r4
 8001248:	f007 ff76 	bl	8009138 <gpio_input_bit_get>
 800124c:	fab0 f080 	clz	r0, r0
 8001250:	0940      	lsrs	r0, r0, #5
 8001252:	bd10      	pop	{r4, pc}
 8001254:	40010800 	andmi	r0, r1, r0, lsl #16

08001258 <Hardware::RebootHandler()>:
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <Hardware::RebootHandler()+0x8>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f005 bf8e 	b.w	800717c <WS28xx::Blackout()>
 8001260:	20000630 	andcs	r0, r0, r0, lsr r6

08001264 <main>:
 8001264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001268:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
 800126c:	a82a      	add	r0, sp, #168	; 0xa8
 800126e:	f007 f909 	bl	8008484 <Hardware::Hardware()>
 8001272:	a813      	add	r0, sp, #76	; 0x4c
 8001274:	f006 f814 	bl	80072a0 <Network::Network()>
 8001278:	a863      	add	r0, sp, #396	; 0x18c
 800127a:	f006 f835 	bl	80072e8 <DisplayUdf::DisplayUdf()>
 800127e:	4bb2      	ldr	r3, [pc, #712]	; (8001548 <main+0x2e4>)
 8001280:	4ab2      	ldr	r2, [pc, #712]	; (800154c <main+0x2e8>)
 8001282:	49b3      	ldr	r1, [pc, #716]	; (8001550 <main+0x2ec>)
 8001284:	a805      	add	r0, sp, #20
 8001286:	f007 f88d 	bl	80083a4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 800128a:	a807      	add	r0, sp, #28
 800128c:	f006 f9ae 	bl	80075ec <ConfigStore::ConfigStore()>
 8001290:	f7ff ffcc 	bl	800122c <is_config_mode()>
 8001294:	4606      	mov	r6, r0
 8001296:	48af      	ldr	r0, [pc, #700]	; (8001554 <main+0x2f0>)
 8001298:	f001 f836 	bl	8002308 <puts>
 800129c:	49ae      	ldr	r1, [pc, #696]	; (8001558 <main+0x2f4>)
 800129e:	48af      	ldr	r0, [pc, #700]	; (800155c <main+0x2f8>)
 80012a0:	f000 fffa 	bl	8002298 <printf>
 80012a4:	22aa      	movs	r2, #170	; 0xaa
 80012a6:	2303      	movs	r3, #3
 80012a8:	2106      	movs	r1, #6
 80012aa:	e9cd 323d 	strd	r3, r2, [sp, #244]	; 0xf4
 80012ae:	2300      	movs	r3, #0
 80012b0:	e9cd 133f 	strd	r1, r3, [sp, #252]	; 0xfc
 80012b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80012b8:	9341      	str	r3, [sp, #260]	; 0x104
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
 80012c2:	4ba7      	ldr	r3, [pc, #668]	; (8001560 <main+0x2fc>)
 80012c4:	a80d      	add	r0, sp, #52	; 0x34
 80012c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80012c8:	2301      	movs	r3, #1
 80012ca:	9246      	str	r2, [sp, #280]	; 0x118
 80012cc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80012d0:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
 80012d4:	f006 fbb8 	bl	8007a48 <StorePixelDmx::StorePixelDmx()>
 80012d8:	a90d      	add	r1, sp, #52	; 0x34
 80012da:	a81b      	add	r0, sp, #108	; 0x6c
 80012dc:	f004 fcda 	bl	8005c94 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 80012e0:	a81b      	add	r0, sp, #108	; 0x6c
 80012e2:	f004 fced 	bl	8005cc0 <PixelDmxParams::Load()>
 80012e6:	b130      	cbz	r0, 80012f6 <main+0x92>
 80012e8:	a81b      	add	r0, sp, #108	; 0x6c
 80012ea:	a93d      	add	r1, sp, #244	; 0xf4
 80012ec:	f004 fcf4 	bl	8005cd8 <PixelDmxParams::Set(PixelDmxConfiguration*)>
 80012f0:	a81b      	add	r0, sp, #108	; 0x6c
 80012f2:	f004 fd2e 	bl	8005d52 <PixelDmxParams::Dump()>
 80012f6:	ab17      	add	r3, sp, #92	; 0x5c
 80012f8:	2101      	movs	r1, #1
 80012fa:	aa08      	add	r2, sp, #32
 80012fc:	a83d      	add	r0, sp, #244	; 0xf4
 80012fe:	f004 fb21 	bl	8005944 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8001302:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001304:	2b01      	cmp	r3, #1
 8001306:	d909      	bls.n	800131c <main+0xb8>
 8001308:	9945      	ldr	r1, [sp, #276]	; 0x114
 800130a:	9a08      	ldr	r2, [sp, #32]
 800130c:	024b      	lsls	r3, r1, #9
 800130e:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8001312:	bf94      	ite	ls
 8001314:	fbb3 f3f2 	udivls	r3, r3, r2
 8001318:	23aa      	movhi	r3, #170	; 0xaa
 800131a:	933e      	str	r3, [sp, #248]	; 0xf8
 800131c:	a93d      	add	r1, sp, #244	; 0xf4
 800131e:	a878      	add	r0, sp, #480	; 0x1e0
 8001320:	f004 fc7e 	bl	8005c20 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8001324:	4f8f      	ldr	r7, [pc, #572]	; (8001564 <main+0x300>)
 8001326:	4b90      	ldr	r3, [pc, #576]	; (8001568 <main+0x304>)
 8001328:	f240 6004 	movw	r0, #1540	; 0x604
 800132c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8001330:	9309      	str	r3, [sp, #36]	; 0x24
 8001332:	f8cd 9230 	str.w	r9, [sp, #560]	; 0x230
 8001336:	f007 ff3d 	bl	80091b4 <rcu_periph_clock_enable>
 800133a:	2304      	movs	r3, #4
 800133c:	2203      	movs	r2, #3
 800133e:	2110      	movs	r1, #16
 8001340:	4638      	mov	r0, r7
 8001342:	f007 fea5 	bl	8009090 <gpio_init>
 8001346:	2304      	movs	r3, #4
 8001348:	ac09      	add	r4, sp, #36	; 0x24
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	2101      	movs	r1, #1
 800134e:	948d      	str	r4, [sp, #564]	; 0x234
 8001350:	a806      	add	r0, sp, #24
 8001352:	f89d 4080 	ldrb.w	r4, [sp, #128]	; 0x80
 8001356:	f004 fef1 	bl	800613c <PixelPatterns::PixelPatterns(unsigned int)>
 800135a:	4b84      	ldr	r3, [pc, #528]	; (800156c <main+0x308>)
 800135c:	2c05      	cmp	r4, #5
 800135e:	601c      	str	r4, [r3, #0]
 8001360:	f340 81dd 	ble.w	800171e <main+0x4ba>
 8001364:	4649      	mov	r1, r9
 8001366:	a80a      	add	r0, sp, #40	; 0x28
 8001368:	f004 fd10 	bl	8005d8c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>
 800136c:	983d      	ldr	r0, [sp, #244]	; 0xf4
 800136e:	f004 fe5f 	bl	8006030 <PixelType::GetType(pixel::Type)>
 8001372:	4605      	mov	r5, r0
 8001374:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8001376:	f8dd 80f8 	ldr.w	r8, [sp, #248]	; 0xf8
 800137a:	f8dd 9114 	ldr.w	r9, [sp, #276]	; 0x114
 800137e:	f004 fe63 	bl	8006048 <PixelType::GetMap(pixel::Map)>
 8001382:	462b      	mov	r3, r5
 8001384:	211f      	movs	r1, #31
 8001386:	4a7a      	ldr	r2, [pc, #488]	; (8001570 <main+0x30c>)
 8001388:	e9cd 9001 	strd	r9, r0, [sp, #4]
 800138c:	f8cd 8000 	str.w	r8, [sp]
 8001390:	a822      	add	r0, sp, #136	; 0x88
 8001392:	f000 ff91 	bl	80022b8 <snprintf>
 8001396:	202c      	movs	r0, #44	; 0x2c
 8001398:	f007 faa5 	bl	80088e6 <operator new(unsigned int)>
 800139c:	4605      	mov	r5, r0
 800139e:	aa78      	add	r2, sp, #480	; 0x1e0
 80013a0:	a922      	add	r1, sp, #136	; 0x88
 80013a2:	f7ff ff05 	bl	80011b0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013a6:	202c      	movs	r0, #44	; 0x2c
 80013a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80013aa:	f007 fa9c 	bl	80088e6 <operator new(unsigned int)>
 80013ae:	4605      	mov	r5, r0
 80013b0:	4970      	ldr	r1, [pc, #448]	; (8001574 <main+0x310>)
 80013b2:	aa0a      	add	r2, sp, #40	; 0x28
 80013b4:	f7ff fefc 	bl	80011b0 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80013ba:	a8c2      	add	r0, sp, #776	; 0x308
 80013bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80013c0:	9510      	str	r5, [sp, #64]	; 0x40
 80013c2:	f002 fde7 	bl	8003f94 <Dmx::Dmx()>
 80013c6:	ad8f      	add	r5, sp, #572	; 0x23c
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <main+0x314>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	a90f      	add	r1, sp, #60	; 0x3c
 80013ce:	4628      	mov	r0, r5
 80013d0:	f8c3 8000 	str.w	r8, [r3]
 80013d4:	f002 fff6 	bl	80043c4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 80013d8:	2101      	movs	r1, #1
 80013da:	a8c9      	add	r0, sp, #804	; 0x324
 80013dc:	f003 f9dc 	bl	8004798 <RDMHandler::RDMHandler(bool)>
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <main+0x318>)
 80013e2:	a80b      	add	r0, sp, #44	; 0x2c
 80013e4:	938f      	str	r3, [sp, #572]	; 0x23c
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <main+0x31c>)
 80013e8:	601d      	str	r5, [r3, #0]
 80013ea:	f006 fbc5 	bl	8007b78 <StoreRDMSensors::StoreRDMSensors()>
 80013ee:	a90b      	add	r1, sp, #44	; 0x2c
 80013f0:	a855      	add	r0, sp, #340	; 0x154
 80013f2:	f001 fb5b 	bl	8002aac <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 80013f6:	a855      	add	r0, sp, #340	; 0x154
 80013f8:	f001 fb62 	bl	8002ac0 <RDMSensorsParams::Load()>
 80013fc:	b128      	cbz	r0, 800140a <main+0x1a6>
 80013fe:	a855      	add	r0, sp, #340	; 0x154
 8001400:	f001 fb8c 	bl	8002b1c <RDMSensorsParams::Set()>
 8001404:	a855      	add	r0, sp, #340	; 0x154
 8001406:	f001 fb71 	bl	8002aec <RDMSensorsParams::Dump()>
 800140a:	4628      	mov	r0, r5
 800140c:	f003 f828 	bl	8004460 <RDMDeviceResponder::Init()>
 8001410:	a811      	add	r0, sp, #68	; 0x44
 8001412:	f006 fb79 	bl	8007b08 <StoreRDMDevice::StoreRDMDevice()>
 8001416:	a911      	add	r1, sp, #68	; 0x44
 8001418:	a849      	add	r0, sp, #292	; 0x124
 800141a:	f002 ff61 	bl	80042e0 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 800141e:	a849      	add	r0, sp, #292	; 0x124
 8001420:	f002 ff73 	bl	800430a <RDMDeviceParams::Load()>
 8001424:	b130      	cbz	r0, 8001434 <main+0x1d0>
 8001426:	a849      	add	r0, sp, #292	; 0x124
 8001428:	a990      	add	r1, sp, #576	; 0x240
 800142a:	f002 ff79 	bl	8004320 <RDMDeviceParams::Set(RDMDevice*)>
 800142e:	a849      	add	r0, sp, #292	; 0x124
 8001430:	f002 ffab 	bl	800438a <RDMDeviceParams::Dump()>
 8001434:	ab12      	add	r3, sp, #72	; 0x48
 8001436:	93ae      	str	r3, [sp, #696]	; 0x2b8
 8001438:	2301      	movs	r3, #1
 800143a:	2100      	movs	r1, #0
 800143c:	461a      	mov	r2, r3
 800143e:	a8c2      	add	r0, sp, #776	; 0x308
 8001440:	f002 fd7a 	bl	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8001444:	2e00      	cmp	r6, #0
 8001446:	f040 814b 	bne.w	80016e0 <main+0x47c>
 800144a:	1e23      	subs	r3, r4, #0
 800144c:	bf18      	it	ne
 800144e:	2301      	movne	r3, #1
 8001450:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8001584 <main+0x320>
 8001454:	4628      	mov	r0, r5
 8001456:	f888 3000 	strb.w	r3, [r8]
 800145a:	f003 f895 	bl	8004588 <RDMDeviceResponder::Print()>
 800145e:	f898 1000 	ldrb.w	r1, [r8]
 8001462:	4a49      	ldr	r2, [pc, #292]	; (8001588 <main+0x324>)
 8001464:	4b49      	ldr	r3, [pc, #292]	; (800158c <main+0x328>)
 8001466:	484a      	ldr	r0, [pc, #296]	; (8001590 <main+0x32c>)
 8001468:	2900      	cmp	r1, #0
 800146a:	bf14      	ite	ne
 800146c:	4611      	movne	r1, r2
 800146e:	4619      	moveq	r1, r3
 8001470:	f000 ff12 	bl	8002298 <printf>
 8001474:	2e00      	cmp	r6, #0
 8001476:	f040 814e 	bne.w	8001716 <main+0x4b2>
 800147a:	a879      	add	r0, sp, #484	; 0x1e4
 800147c:	f004 faa2 	bl	80059c4 <PixelDmxConfiguration::Print()>
 8001480:	b13c      	cbz	r4, 8001492 <main+0x22e>
 8001482:	4620      	mov	r0, r4
 8001484:	f004 fe7a 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001488:	4622      	mov	r2, r4
 800148a:	4601      	mov	r1, r0
 800148c:	4841      	ldr	r0, [pc, #260]	; (8001594 <main+0x330>)
 800148e:	f000 ff03 	bl	8002298 <printf>
 8001492:	4941      	ldr	r1, [pc, #260]	; (8001598 <main+0x334>)
 8001494:	a863      	add	r0, sp, #396	; 0x18c
 8001496:	f005 ff3b 	bl	8007310 <DisplayUdf::SetTitle(char const*, ...)>
 800149a:	2203      	movs	r2, #3
 800149c:	2102      	movs	r1, #2
 800149e:	a863      	add	r0, sp, #396	; 0x18c
 80014a0:	f005 ff49 	bl	8007336 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 80014a4:	220d      	movs	r2, #13
 80014a6:	2106      	movs	r1, #6
 80014a8:	a863      	add	r0, sp, #396	; 0x18c
 80014aa:	f005 ff44 	bl	8007336 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 80014ae:	983d      	ldr	r0, [sp, #244]	; 0xf4
 80014b0:	f004 fdbe 	bl	8006030 <PixelType::GetType(pixel::Type)>
 80014b4:	4680      	mov	r8, r0
 80014b6:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80014b8:	f8dd 90f8 	ldr.w	r9, [sp, #248]	; 0xf8
 80014bc:	f8dd a114 	ldr.w	sl, [sp, #276]	; 0x114
 80014c0:	f004 fdc2 	bl	8006048 <PixelType::GetMap(pixel::Map)>
 80014c4:	4643      	mov	r3, r8
 80014c6:	2107      	movs	r1, #7
 80014c8:	4a34      	ldr	r2, [pc, #208]	; (800159c <main+0x338>)
 80014ca:	e9cd a001 	strd	sl, r0, [sp, #4]
 80014ce:	f8cd 9000 	str.w	r9, [sp]
 80014d2:	a863      	add	r0, sp, #396	; 0x18c
 80014d4:	f7ff fe3f 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 80014d8:	a80c      	add	r0, sp, #48	; 0x30
 80014da:	f006 f9b1 	bl	8007840 <StoreDisplayUdf::StoreDisplayUdf()>
 80014de:	a90c      	add	r1, sp, #48	; 0x30
 80014e0:	a833      	add	r0, sp, #204	; 0xcc
 80014e2:	f005 ff95 	bl	8007410 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80014e6:	a833      	add	r0, sp, #204	; 0xcc
 80014e8:	f005 ff9f 	bl	800742a <DisplayUdfParams::Load()>
 80014ec:	b130      	cbz	r0, 80014fc <main+0x298>
 80014ee:	a833      	add	r0, sp, #204	; 0xcc
 80014f0:	f005 ffda 	bl	80074a8 <DisplayUdfParams::Dump()>
 80014f4:	a963      	add	r1, sp, #396	; 0x18c
 80014f6:	a833      	add	r0, sp, #204	; 0xcc
 80014f8:	f005 ffa3 	bl	8007442 <DisplayUdfParams::Set(DisplayUdf*)>
 80014fc:	a863      	add	r0, sp, #396	; 0x18c
 80014fe:	f005 ff35 	bl	800736c <DisplayUdf::Show()>
 8001502:	2e00      	cmp	r6, #0
 8001504:	f000 80ee 	beq.w	80016e4 <main+0x480>
 8001508:	2103      	movs	r1, #3
 800150a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800150c:	f7ff fdf1 	bl	80010f2 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001510:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8001512:	2104      	movs	r1, #4
 8001514:	f7ff fded 	bl	80010f2 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001518:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 800151a:	b178      	cbz	r0, 800153c <main+0x2d8>
 800151c:	2300      	movs	r3, #0
 800151e:	6844      	ldr	r4, [r0, #4]
 8001520:	491f      	ldr	r1, [pc, #124]	; (80015a0 <main+0x33c>)
 8001522:	429c      	cmp	r4, r3
 8001524:	f103 0301 	add.w	r3, r3, #1
 8001528:	d903      	bls.n	8001532 <main+0x2ce>
 800152a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800152e:	2a00      	cmp	r2, #0
 8001530:	d1f7      	bne.n	8001522 <main+0x2be>
 8001532:	6802      	ldr	r2, [r0, #0]
 8001534:	2104      	movs	r1, #4
 8001536:	69d4      	ldr	r4, [r2, #28]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <main+0x33c>)
 800153a:	47a0      	blx	r4
 800153c:	2105      	movs	r1, #5
 800153e:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8001540:	f7ff fdd7 	bl	80010f2 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001544:	e02e      	b.n	80015a4 <main+0x340>
 8001546:	bf00      	nop
 8001548:	0800a392 	stmdaeq	r0, {r1, r4, r7, r8, r9, sp, pc}
 800154c:	0800a39b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, sp, pc}
 8001550:	0800a45c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp, pc}
 8001554:	2000172a 	andcs	r1, r0, sl, lsr #14
 8001558:	0800a3a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r8, r9, sp, pc}
 800155c:	0800a3b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sp, pc}
 8001560:	0800a460 	stmdaeq	r0, {r5, r6, sl, sp, pc}
 8001564:	40011000 	andmi	r1, r1, r0
 8001568:	0800a44c 	stmdaeq	r0, {r2, r3, r6, sl, sp, pc}
 800156c:	20000628 	andcs	r0, r0, r8, lsr #12
 8001570:	0800a3c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sp, pc}
 8001574:	0800a3d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sp, pc}
 8001578:	200001a0 	andcs	r0, r0, r0, lsr #3
 800157c:	0800a434 	stmdaeq	r0, {r2, r4, r5, sl, sp, pc}
 8001580:	20000190 	mulcs	r0, r0, r1
 8001584:	200001a4 	andcs	r0, r0, r4, lsr #3
 8001588:	0800a375 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, sp, pc}
 800158c:	0800a37e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sp, pc}
 8001590:	0800a3dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sp, pc}
 8001594:	0800a3e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sp, pc}
 8001598:	0800a401 	stmdaeq	r0, {r0, sl, sp, pc}
 800159c:	0800a417 	stmdaeq	r0, {r0, r1, r2, r4, sl, sp, pc}
 80015a0:	0800a386 	stmdaeq	r0, {r1, r2, r7, r8, r9, sp, pc}
 80015a4:	2102      	movs	r1, #2
 80015a6:	a82a      	add	r0, sp, #168	; 0xa8
 80015a8:	f006 ff36 	bl	8008418 <Hardware::SetMode(hardware::ledblink::Mode)>
 80015ac:	2102      	movs	r1, #2
 80015ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015b2:	f007 fd43 	bl	800903c <fwdgt_config>
 80015b6:	2801      	cmp	r0, #1
 80015b8:	bf0c      	ite	eq
 80015ba:	2301      	moveq	r3, #1
 80015bc:	2300      	movne	r3, #0
 80015be:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
 80015c2:	d101      	bne.n	80015c8 <main+0x364>
 80015c4:	f007 fd2a 	bl	800901c <fwdgt_enable>
 80015c8:	4e5e      	ldr	r6, [pc, #376]	; (8001744 <main+0x4e0>)
 80015ca:	4c5f      	ldr	r4, [pc, #380]	; (8001748 <main+0x4e4>)
 80015cc:	f007 fd2e 	bl	800902c <fwdgt_counter_reload>
 80015d0:	4628      	mov	r0, r5
 80015d2:	f001 f86d 	bl	80026b0 <RDMResponder::Run()>
 80015d6:	a807      	add	r0, sp, #28
 80015d8:	f006 f8b0 	bl	800773c <ConfigStore::Flash()>
 80015dc:	6833      	ldr	r3, [r6, #0]
 80015de:	b113      	cbz	r3, 80015e6 <main+0x382>
 80015e0:	a806      	add	r0, sp, #24
 80015e2:	f004 ffe5 	bl	80065b0 <PixelPatterns::Run()>
 80015e6:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
 80015e8:	b16a      	cbz	r2, 8001606 <main+0x3a2>
 80015ea:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 808a 	bne.w	8001708 <main+0x4a4>
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	9964      	ldr	r1, [sp, #400]	; 0x190
 80015f8:	1a5b      	subs	r3, r3, r1
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d203      	bcs.n	8001606 <main+0x3a2>
 80015fe:	2101      	movs	r1, #1
 8001600:	a863      	add	r0, sp, #396	; 0x18c
 8001602:	f7ff fdc5 	bl	8001190 <Display::SetSleep(bool)>
 8001606:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8001608:	2a00      	cmp	r2, #0
 800160a:	d0df      	beq.n	80015cc <main+0x368>
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8001610:	1a5b      	subs	r3, r3, r1
 8001612:	429a      	cmp	r2, r3
 8001614:	d8da      	bhi.n	80015cc <main+0x368>
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	9332      	str	r3, [sp, #200]	; 0xc8
 800161a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800161c:	2b01      	cmp	r3, #1
 800161e:	f083 0201 	eor.w	r2, r3, #1
 8001622:	bf18      	it	ne
 8001624:	2301      	movne	r3, #1
 8001626:	9231      	str	r2, [sp, #196]	; 0xc4
 8001628:	bf14      	ite	ne
 800162a:	613b      	strne	r3, [r7, #16]
 800162c:	617b      	streq	r3, [r7, #20]
 800162e:	e7cd      	b.n	80015cc <main+0x368>
 8001630:	2300      	movs	r3, #0
 8001632:	2264      	movs	r2, #100	; 0x64
 8001634:	4619      	mov	r1, r3
 8001636:	a806      	add	r0, sp, #24
 8001638:	f004 fdac 	bl	8006194 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 800163c:	e692      	b.n	8001364 <main+0x100>
 800163e:	2200      	movs	r2, #0
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	4611      	mov	r1, r2
 8001644:	e9cd 3200 	strd	r3, r2, [sp]
 8001648:	a806      	add	r0, sp, #24
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <main+0x4e8>)
 800164c:	f004 fdb6 	bl	80061bc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001650:	e688      	b.n	8001364 <main+0x100>
 8001652:	2100      	movs	r1, #0
 8001654:	2364      	movs	r3, #100	; 0x64
 8001656:	4a3d      	ldr	r2, [pc, #244]	; (800174c <main+0x4e8>)
 8001658:	9100      	str	r1, [sp, #0]
 800165a:	a806      	add	r0, sp, #24
 800165c:	f004 fdca 	bl	80061f4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001660:	e680      	b.n	8001364 <main+0x100>
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001668:	2100      	movs	r1, #0
 800166a:	a806      	add	r0, sp, #24
 800166c:	f004 fddc 	bl	8006228 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001670:	e678      	b.n	8001364 <main+0x100>
 8001672:	2200      	movs	r2, #0
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800167a:	230a      	movs	r3, #10
 800167c:	4611      	mov	r1, r2
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	a806      	add	r0, sp, #24
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <main+0x4e8>)
 8001684:	f004 fe02 	bl	800628c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001688:	e66c      	b.n	8001364 <main+0x100>
 800168a:	2500      	movs	r5, #0
 800168c:	46a8      	mov	r8, r5
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <main+0x4ec>)
 8001690:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8001754 <main+0x4f0>
 8001694:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8001758 <main+0x4f4>
 8001698:	61dd      	str	r5, [r3, #28]
 800169a:	f8da 3000 	ldr.w	r3, [sl]
 800169e:	429d      	cmp	r5, r3
 80016a0:	d308      	bcc.n	80016b4 <main+0x450>
 80016a2:	f008 fb49 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d1fb      	bne.n	80016a2 <main+0x43e>
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <main+0x4f4>)
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	f005 fd49 	bl	8007144 <WS28xx::Update()>
 80016b2:	e657      	b.n	8001364 <main+0x100>
 80016b4:	f8db 0000 	ldr.w	r0, [fp]
 80016b8:	6803      	ldr	r3, [r0, #0]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d008      	beq.n	80016d0 <main+0x46c>
 80016be:	2300      	movs	r3, #0
 80016c0:	4629      	mov	r1, r5
 80016c2:	461a      	mov	r2, r3
 80016c4:	f8cd 8000 	str.w	r8, [sp]
 80016c8:	f004 ff9a 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80016cc:	3501      	adds	r5, #1
 80016ce:	e7e4      	b.n	800169a <main+0x436>
 80016d0:	2300      	movs	r3, #0
 80016d2:	4629      	mov	r1, r5
 80016d4:	461a      	mov	r2, r3
 80016d6:	e9cd 8800 	strd	r8, r8, [sp]
 80016da:	f005 fbc3 	bl	8006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80016de:	e7f5      	b.n	80016cc <main+0x468>
 80016e0:	2300      	movs	r3, #0
 80016e2:	e6b5      	b.n	8001450 <main+0x1ec>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	f43f af5d 	beq.w	80015a4 <main+0x340>
 80016ea:	2106      	movs	r1, #6
 80016ec:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 80016ee:	f7ff fd00 	bl	80010f2 <Display::ClearLine(unsigned int) [clone .isra.0]>
 80016f2:	4620      	mov	r0, r4
 80016f4:	f004 fd42 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80016f8:	2106      	movs	r1, #6
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <main+0x4f8>)
 80016fe:	9400      	str	r4, [sp, #0]
 8001700:	a863      	add	r0, sp, #396	; 0x18c
 8001702:	f7ff fd28 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 8001706:	e74d      	b.n	80015a4 <main+0x340>
 8001708:	f7ff fd86 	bl	8001218 <display::timeout::gpio_renew()>
 800170c:	2800      	cmp	r0, #0
 800170e:	f43f af7a 	beq.w	8001606 <main+0x3a2>
 8001712:	2100      	movs	r1, #0
 8001714:	e774      	b.n	8001600 <main+0x39c>
 8001716:	4812      	ldr	r0, [pc, #72]	; (8001760 <main+0x4fc>)
 8001718:	f000 fdf6 	bl	8002308 <puts>
 800171c:	e6b9      	b.n	8001492 <main+0x22e>
 800171e:	2c05      	cmp	r4, #5
 8001720:	f63f ae20 	bhi.w	8001364 <main+0x100>
 8001724:	a301      	add	r3, pc, #4	; (adr r3, 800172c <main+0x4c8>)
 8001726:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800172a:	bf00      	nop
 800172c:	0800168b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sl, ip}
 8001730:	08001631 	stmdaeq	r0, {r0, r4, r5, r9, sl, ip}
 8001734:	0800163f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, sl, ip}
 8001738:	08001653 	stmdaeq	r0, {r0, r1, r4, r6, r9, sl, ip}
 800173c:	08001663 	stmdaeq	r0, {r0, r1, r5, r6, r9, sl, ip}
 8001740:	08001673 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sl, ip}
 8001744:	20000628 	andcs	r0, r0, r8, lsr #12
 8001748:	200017ac 	andcs	r1, r0, ip, lsr #15
 800174c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001750:	200005f4 	strdcs	r0, [r0], -r4
 8001754:	2000061c 	andcs	r0, r0, ip, lsl r6
 8001758:	20000620 	andcs	r0, r0, r0, lsr #12
 800175c:	0800a424 	stmdaeq	r0, {r2, r5, sl, sp, pc}
 8001760:	0800a3d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, sp, pc}

08001764 <Display::ClearLine(unsigned int) [clone .isra.0]>:
 8001764:	b110      	cbz	r0, 800176c <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 8001766:	6803      	ldr	r3, [r0, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	4718      	bx	r3
 800176c:	4770      	bx	lr

0800176e <Display::TextStatus(char const*)>:
 800176e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001772:	4604      	mov	r4, r0
 8001774:	6980      	ldr	r0, [r0, #24]
 8001776:	460d      	mov	r5, r1
 8001778:	b368      	cbz	r0, 80017d6 <Display::TextStatus(char const*)+0x68>
 800177a:	e9d0 8701 	ldrd	r8, r7, [r0, #4]
 800177e:	6803      	ldr	r3, [r0, #0]
 8001780:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 8001784:	464a      	mov	r2, r9
 8001786:	2100      	movs	r1, #0
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4798      	blx	r3
 800178c:	2600      	movs	r6, #0
 800178e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001792:	45b0      	cmp	r8, r6
 8001794:	69a0      	ldr	r0, [r4, #24]
 8001796:	d817      	bhi.n	80017c8 <Display::TextStatus(char const*)+0x5a>
 8001798:	b120      	cbz	r0, 80017a4 <Display::TextStatus(char const*)+0x36>
 800179a:	6803      	ldr	r3, [r0, #0]
 800179c:	464a      	mov	r2, r9
 800179e:	2100      	movs	r1, #0
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4798      	blx	r3
 80017a4:	69a0      	ldr	r0, [r4, #24]
 80017a6:	b1b0      	cbz	r0, 80017d6 <Display::TextStatus(char const*)+0x68>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6841      	ldr	r1, [r0, #4]
 80017ac:	5cea      	ldrb	r2, [r5, r3]
 80017ae:	b11a      	cbz	r2, 80017b8 <Display::TextStatus(char const*)+0x4a>
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	4299      	cmp	r1, r3
 80017b4:	4613      	mov	r3, r2
 80017b6:	d8f9      	bhi.n	80017ac <Display::TextStatus(char const*)+0x3e>
 80017b8:	6802      	ldr	r2, [r0, #0]
 80017ba:	4639      	mov	r1, r7
 80017bc:	69d4      	ldr	r4, [r2, #28]
 80017be:	462a      	mov	r2, r5
 80017c0:	46a4      	mov	ip, r4
 80017c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c6:	4760      	bx	ip
 80017c8:	b118      	cbz	r0, 80017d2 <Display::TextStatus(char const*)+0x64>
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	2120      	movs	r1, #32
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4798      	blx	r3
 80017d2:	3601      	adds	r6, #1
 80017d4:	e7dd      	b.n	8001792 <Display::TextStatus(char const*)+0x24>
 80017d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080017dc <PixelDmxParamsRdm::Display(unsigned char const*)>:
 80017dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017e0:	4d20      	ldr	r5, [pc, #128]	; (8001864 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 80017e2:	7908      	ldrb	r0, [r1, #4]
 80017e4:	460c      	mov	r4, r1
 80017e6:	682e      	ldr	r6, [r5, #0]
 80017e8:	b085      	sub	sp, #20
 80017ea:	bb40      	cbnz	r0, 800183e <PixelDmxParamsRdm::Display(unsigned char const*)+0x62>
 80017ec:	2106      	movs	r1, #6
 80017ee:	69b0      	ldr	r0, [r6, #24]
 80017f0:	f7ff ffb8 	bl	8001764 <Display::ClearLine(unsigned int) [clone .isra.0]>
 80017f4:	7820      	ldrb	r0, [r4, #0]
 80017f6:	682f      	ldr	r7, [r5, #0]
 80017f8:	f004 fc1a 	bl	8006030 <PixelType::GetType(pixel::Type)>
 80017fc:	4606      	mov	r6, r0
 80017fe:	78e0      	ldrb	r0, [r4, #3]
 8001800:	f894 8001 	ldrb.w	r8, [r4, #1]
 8001804:	f894 9002 	ldrb.w	r9, [r4, #2]
 8001808:	f004 fc1e 	bl	8006048 <PixelType::GetMap(pixel::Map)>
 800180c:	4633      	mov	r3, r6
 800180e:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001812:	2107      	movs	r1, #7
 8001814:	4638      	mov	r0, r7
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8001818:	f8cd 8000 	str.w	r8, [sp]
 800181c:	f7ff fc9b 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 8001820:	7963      	ldrb	r3, [r4, #5]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8001826:	d113      	bne.n	8001850 <PixelDmxParamsRdm::Display(unsigned char const*)+0x74>
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	b92a      	cbnz	r2, 8001838 <PixelDmxParamsRdm::Display(unsigned char const*)+0x5c>
 800182c:	2201      	movs	r2, #1
 800182e:	4910      	ldr	r1, [pc, #64]	; (8001870 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8001830:	6828      	ldr	r0, [r5, #0]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	f7ff ff9b 	bl	800176e <Display::TextStatus(char const*)>
 8001838:	b005      	add	sp, #20
 800183a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800183e:	f004 fc9d 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001842:	2106      	movs	r1, #6
 8001844:	4603      	mov	r3, r0
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <PixelDmxParamsRdm::Display(unsigned char const*)+0x98>)
 8001848:	4630      	mov	r0, r6
 800184a:	f7ff fc84 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 800184e:	e7d1      	b.n	80017f4 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001850:	2200      	movs	r2, #0
 8001852:	2108      	movs	r1, #8
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	682b      	ldr	r3, [r5, #0]
 8001858:	6998      	ldr	r0, [r3, #24]
 800185a:	b005      	add	sp, #20
 800185c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001860:	f7ff bf80 	b.w	8001764 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001864:	20000638 	andcs	r0, r0, r8, lsr r6
 8001868:	0800a566 	stmdaeq	r0, {r1, r2, r5, r6, r8, sl, sp, pc}
 800186c:	20000080 	andcs	r0, r0, r0, lsl #1
 8001870:	0800a57b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, sl, sp, pc}
 8001874:	0800a560 	stmdaeq	r0, {r5, r6, r8, sl, sp, pc}

08001878 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001878:	4b01      	ldr	r3, [pc, #4]	; (8001880 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	f005 bd76 	b.w	800736c <DisplayUdf::Show()>
 8001880:	20000638 	andcs	r0, r0, r8, lsr r6

08001884 <rdm::device::responder::factorydefaults()>:
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <rdm::device::responder::factorydefaults()+0xc>)
 8001886:	210b      	movs	r1, #11
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f005 bed3 	b.w	8007634 <ConfigStore::ResetSetList(configstore::Store)>
 800188e:	bf00      	nop
 8001890:	20001650 	andcs	r1, r0, r0, asr r6

08001894 <Display::ClearLine(unsigned int) [clone .isra.0]>:
 8001894:	b110      	cbz	r0, 800189c <Display::ClearLine(unsigned int) [clone .isra.0]+0x8>
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4718      	bx	r3
 800189c:	4770      	bx	lr
	...

080018a0 <RDMResponder::PersonalityUpdate(unsigned int)>:
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a4:	4c30      	ldr	r4, [pc, #192]	; (8001968 <RDMResponder::PersonalityUpdate(unsigned int)+0xc8>)
 80018a6:	4f31      	ldr	r7, [pc, #196]	; (800196c <RDMResponder::PersonalityUpdate(unsigned int)+0xcc>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	b085      	sub	sp, #20
 80018ac:	6998      	ldr	r0, [r3, #24]
 80018ae:	460d      	mov	r5, r1
 80018b0:	2107      	movs	r1, #7
 80018b2:	f7ff ffef 	bl	8001894 <Display::ClearLine(unsigned int) [clone .isra.0]>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f8d4 8000 	ldr.w	r8, [r4]
 80018bc:	6858      	ldr	r0, [r3, #4]
 80018be:	f004 fbb7 	bl	8006030 <PixelType::GetType(pixel::Type)>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4606      	mov	r6, r0
 80018c6:	68d8      	ldr	r0, [r3, #12]
 80018c8:	689f      	ldr	r7, [r3, #8]
 80018ca:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 80018ce:	f004 fbbb 	bl	8006048 <PixelType::GetMap(pixel::Map)>
 80018d2:	4633      	mov	r3, r6
 80018d4:	2107      	movs	r1, #7
 80018d6:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 80018dc:	4640      	mov	r0, r8
 80018de:	9700      	str	r7, [sp, #0]
 80018e0:	f7ff fc39 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 80018e4:	6820      	ldr	r0, [r4, #0]
 80018e6:	f005 fd41 	bl	800736c <DisplayUdf::Show()>
 80018ea:	2d01      	cmp	r5, #1
 80018ec:	d115      	bne.n	800191a <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 80018f0:	681d      	ldr	r5, [r3, #0]
 80018f2:	b17d      	cbz	r5, 8001914 <RDMResponder::PersonalityUpdate(unsigned int)+0x74>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	2106      	movs	r1, #6
 80018f8:	6998      	ldr	r0, [r3, #24]
 80018fa:	f7ff ffcb 	bl	8001894 <Display::ClearLine(unsigned int) [clone .isra.0]>
 80018fe:	4628      	mov	r0, r5
 8001900:	6824      	ldr	r4, [r4, #0]
 8001902:	f004 fc3b 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001906:	2106      	movs	r1, #6
 8001908:	4603      	mov	r3, r0
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 800190c:	4620      	mov	r0, r4
 800190e:	9500      	str	r5, [sp, #0]
 8001910:	f7ff fc21 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 8001914:	b005      	add	sp, #20
 8001916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800191a:	2d02      	cmp	r5, #2
 800191c:	d1fa      	bne.n	8001914 <RDMResponder::PersonalityUpdate(unsigned int)+0x74>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	2103      	movs	r1, #3
 8001922:	6998      	ldr	r0, [r3, #24]
 8001924:	f7ff ffb6 	bl	8001894 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	2104      	movs	r1, #4
 800192c:	6998      	ldr	r0, [r3, #24]
 800192e:	f7ff ffb1 	bl	8001894 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	6998      	ldr	r0, [r3, #24]
 8001936:	b178      	cbz	r0, 8001958 <RDMResponder::PersonalityUpdate(unsigned int)+0xb8>
 8001938:	2300      	movs	r3, #0
 800193a:	6845      	ldr	r5, [r0, #4]
 800193c:	490f      	ldr	r1, [pc, #60]	; (800197c <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 800193e:	42ab      	cmp	r3, r5
 8001940:	f103 0301 	add.w	r3, r3, #1
 8001944:	d203      	bcs.n	800194e <RDMResponder::PersonalityUpdate(unsigned int)+0xae>
 8001946:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800194a:	2a00      	cmp	r2, #0
 800194c:	d1f7      	bne.n	800193e <RDMResponder::PersonalityUpdate(unsigned int)+0x9e>
 800194e:	6802      	ldr	r2, [r0, #0]
 8001950:	2104      	movs	r1, #4
 8001952:	69d5      	ldr	r5, [r2, #28]
 8001954:	4a09      	ldr	r2, [pc, #36]	; (800197c <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8001956:	47a8      	blx	r5
 8001958:	2105      	movs	r1, #5
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	6998      	ldr	r0, [r3, #24]
 800195e:	b005      	add	sp, #20
 8001960:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001964:	f7ff bf96 	b.w	8001894 <Display::ClearLine(unsigned int) [clone .isra.0]>
 8001968:	20000638 	andcs	r0, r0, r8, lsr r6
 800196c:	200005e8 	andcs	r0, r0, r8, ror #11
 8001970:	0800a417 	stmdaeq	r0, {r0, r1, r2, r4, sl, sp, pc}
 8001974:	20000628 	andcs	r0, r0, r8, lsr #12
 8001978:	0800a424 	stmdaeq	r0, {r2, r5, sl, sp, pc}
 800197c:	0800a386 	stmdaeq	r0, {r1, r2, r7, r8, r9, sp, pc}

08001980 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	2905      	cmp	r1, #5
 8001984:	b085      	sub	sp, #20
 8001986:	dc57      	bgt.n	8001a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>
 8001988:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 800198a:	6019      	str	r1, [r3, #0]
 800198c:	2905      	cmp	r1, #5
 800198e:	d809      	bhi.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001990:	e8df f001 	tbb	[pc, r1]
 8001994:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001998:	2300211a 	movwcs	r2, #282	; 0x11a
 800199c:	2264      	movs	r2, #100	; 0x64
 800199e:	4619      	mov	r1, r3
 80019a0:	f004 fbf8 	bl	8006194 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80019a4:	2001      	movs	r0, #1
 80019a6:	e048      	b.n	8001a3a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xba>
 80019a8:	2200      	movs	r2, #0
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	4611      	mov	r1, r2
 80019ae:	e9cd 3200 	strd	r3, r2, [sp]
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80019b4:	f004 fc02 	bl	80061bc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019b8:	e7f4      	b.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019ba:	2100      	movs	r1, #0
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80019c0:	9100      	str	r1, [sp, #0]
 80019c2:	f004 fc17 	bl	80061f4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019c6:	e7ed      	b.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019c8:	2364      	movs	r3, #100	; 0x64
 80019ca:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80019ce:	2100      	movs	r1, #0
 80019d0:	f004 fc2a 	bl	8006228 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80019d4:	e7e6      	b.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019d6:	2200      	movs	r2, #0
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80019de:	230a      	movs	r3, #10
 80019e0:	4611      	mov	r1, r2
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80019e6:	f004 fc51 	bl	800628c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019ea:	e7db      	b.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019ec:	2400      	movs	r4, #0
 80019ee:	4625      	mov	r5, r4
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc8>)
 80019f2:	4e16      	ldr	r6, [pc, #88]	; (8001a4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xcc>)
 80019f4:	4f16      	ldr	r7, [pc, #88]	; (8001a50 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80019f6:	61dc      	str	r4, [r3, #28]
 80019f8:	6833      	ldr	r3, [r6, #0]
 80019fa:	429c      	cmp	r4, r3
 80019fc:	d308      	bcc.n	8001a10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80019fe:	f008 f99b 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d1fb      	bne.n	80019fe <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	f005 fb9b 	bl	8007144 <WS28xx::Update()>
 8001a0e:	e7c9      	b.n	80019a4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001a10:	6838      	ldr	r0, [r7, #0]
 8001a12:	6803      	ldr	r3, [r0, #0]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d007      	beq.n	8001a28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	9500      	str	r5, [sp, #0]
 8001a20:	f004 fdee 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001a24:	3401      	adds	r4, #1
 8001a26:	e7e7      	b.n	80019f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	e9cd 5500 	strd	r5, r5, [sp]
 8001a32:	f005 fa17 	bl	8006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001a36:	e7f5      	b.n	8001a24 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001a38:	2000      	movs	r0, #0
 8001a3a:	b005      	add	sp, #20
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000628 	andcs	r0, r0, r8, lsr #12
 8001a44:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001a48:	200005f4 	strdcs	r0, [r0], -r4
 8001a4c:	2000061c 	andcs	r0, r0, ip, lsl r6
 8001a50:	20000620 	andcs	r0, r0, r0, lsr #12

08001a54 <rdm::selftest::Get()>:
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <rdm::selftest::Get()+0x8>)
 8001a56:	7818      	ldrb	r0, [r3, #0]
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000628 	andcs	r0, r0, r8, lsr #12

08001a60 <rdm::selftest::Set(unsigned char)>:
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <rdm::selftest::Set(unsigned char)+0x54>)
 8001a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a64:	4601      	mov	r1, r0
 8001a66:	4604      	mov	r4, r0
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	f7ff ff89 	bl	8001980 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001a6e:	4605      	mov	r5, r0
 8001a70:	b1b0      	cbz	r0, 8001aa0 <rdm::selftest::Set(unsigned char)+0x40>
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <rdm::selftest::Set(unsigned char)+0x58>)
 8001a74:	b1bc      	cbz	r4, 8001aa6 <rdm::selftest::Set(unsigned char)+0x46>
 8001a76:	2201      	movs	r2, #1
 8001a78:	4e10      	ldr	r6, [pc, #64]	; (8001abc <rdm::selftest::Set(unsigned char)+0x5c>)
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	6833      	ldr	r3, [r6, #0]
 8001a7e:	6998      	ldr	r0, [r3, #24]
 8001a80:	b118      	cbz	r0, 8001a8a <rdm::selftest::Set(unsigned char)+0x2a>
 8001a82:	6803      	ldr	r3, [r0, #0]
 8001a84:	2106      	movs	r1, #6
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4798      	blx	r3
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	6836      	ldr	r6, [r6, #0]
 8001a8e:	f004 fb75 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001a92:	2106      	movs	r1, #6
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <rdm::selftest::Set(unsigned char)+0x60>)
 8001a98:	4630      	mov	r0, r6
 8001a9a:	9400      	str	r4, [sp, #0]
 8001a9c:	f7ff fb5b 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	701c      	strb	r4, [r3, #0]
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <rdm::selftest::Set(unsigned char)+0x64>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f005 fc5e 	bl	800736c <DisplayUdf::Show()>
 8001ab0:	e7f6      	b.n	8001aa0 <rdm::selftest::Set(unsigned char)+0x40>
 8001ab2:	bf00      	nop
 8001ab4:	20000624 	andcs	r0, r0, r4, lsr #12
 8001ab8:	200001a4 	andcs	r0, r0, r4, lsr #3
 8001abc:	20001684 	andcs	r1, r0, r4, lsl #13
 8001ac0:	0800a424 	stmdaeq	r0, {r2, r5, sl, sp, pc}
 8001ac4:	20000638 	andcs	r0, r0, r8, lsr r6

08001ac8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	460c      	mov	r4, r1
 8001acc:	f004 fb56 	bl	800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001ad0:	b140      	cbz	r0, 8001ae4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	7819      	ldrb	r1, [r3, #0]
 8001ad8:	3201      	adds	r2, #1
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d1fa      	bne.n	8001ad4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001ade:	1a1b      	subs	r3, r3, r0
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	bd10      	pop	{r4, pc}
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	e7fb      	b.n	8001ae0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

08001ae8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	2905      	cmp	r1, #5
 8001aec:	b085      	sub	sp, #20
 8001aee:	dc18      	bgt.n	8001b22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc4>)
 8001af2:	6019      	str	r1, [r3, #0]
 8001af4:	2905      	cmp	r1, #5
 8001af6:	d814      	bhi.n	8001b22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001af8:	e8df f001 	tbb	[pc, r1]
 8001afc:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001b00:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001b04:	2264      	movs	r2, #100	; 0x64
 8001b06:	4619      	mov	r1, r3
 8001b08:	b005      	add	sp, #20
 8001b0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b0e:	f004 bb41 	b.w	8006194 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b12:	2364      	movs	r3, #100	; 0x64
 8001b14:	2200      	movs	r2, #0
 8001b16:	e9cd 3200 	strd	r3, r2, [sp]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b1e:	f004 fb4d 	bl	80061bc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b22:	b005      	add	sp, #20
 8001b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b26:	2100      	movs	r1, #0
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b2c:	9100      	str	r1, [sp, #0]
 8001b2e:	f004 fb61 	bl	80061f4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b32:	e7f6      	b.n	8001b22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	b005      	add	sp, #20
 8001b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b42:	f004 bb71 	b.w	8006228 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001b46:	2200      	movs	r2, #0
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b4e:	230a      	movs	r3, #10
 8001b50:	4611      	mov	r1, r2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b56:	f004 fb99 	bl	800628c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b5a:	e7e2      	b.n	8001b22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	4625      	mov	r5, r4
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xcc>)
 8001b62:	4e15      	ldr	r6, [pc, #84]	; (8001bb8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd0>)
 8001b64:	4f15      	ldr	r7, [pc, #84]	; (8001bbc <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001b66:	61dc      	str	r4, [r3, #28]
 8001b68:	6833      	ldr	r3, [r6, #0]
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	d30a      	bcc.n	8001b84 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 8001b6e:	f008 f8e3 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1fb      	bne.n	8001b6e <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	b005      	add	sp, #20
 8001b7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b80:	f005 bae0 	b.w	8007144 <WS28xx::Update()>
 8001b84:	6838      	ldr	r0, [r7, #0]
 8001b86:	6803      	ldr	r3, [r0, #0]
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d007      	beq.n	8001b9c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4621      	mov	r1, r4
 8001b90:	461a      	mov	r2, r3
 8001b92:	9500      	str	r5, [sp, #0]
 8001b94:	f004 fd34 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001b98:	3401      	adds	r4, #1
 8001b9a:	e7e5      	b.n	8001b68 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	e9cd 5500 	strd	r5, r5, [sp]
 8001ba6:	f005 f95d 	bl	8006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001baa:	e7f5      	b.n	8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>
 8001bac:	20000628 	andcs	r0, r0, r8, lsr #12
 8001bb0:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001bb4:	200005f4 	strdcs	r0, [r0], -r4
 8001bb8:	2000061c 	andcs	r0, r0, ip, lsl r6
 8001bbc:	20000620 	andcs	r0, r0, r0, lsr #12

08001bc0 <RDMIdentify::On(rdm::identify::Mode)>:
 8001bc0:	29ff      	cmp	r1, #255	; 0xff
 8001bc2:	b510      	push	{r4, lr}
 8001bc4:	d10f      	bne.n	8001be6 <RDMIdentify::On(rdm::identify::Mode)+0x26>
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	b962      	cbnz	r2, 8001be6 <RDMIdentify::On(rdm::identify::Mode)+0x26>
 8001bcc:	2401      	movs	r4, #1
 8001bce:	701c      	strb	r4, [r3, #0]
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <RDMIdentify::On(rdm::identify::Mode)+0x34>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f7ff ff83 	bl	8001ae8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <RDMIdentify::On(rdm::identify::Mode)+0x38>)
 8001be4:	701c      	strb	r4, [r3, #0]
 8001be6:	bd10      	pop	{r4, pc}
 8001be8:	20000081 	andcs	r0, r0, r1, lsl #1
 8001bec:	20000628 	andcs	r0, r0, r8, lsr #12
 8001bf0:	20000084 	andcs	r0, r0, r4, lsl #1
 8001bf4:	20000624 	andcs	r0, r0, r4, lsr #12
 8001bf8:	200001a4 	andcs	r0, r0, r4, lsr #3

08001bfc <RDMIdentify::Off(rdm::identify::Mode)>:
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <RDMIdentify::Off(rdm::identify::Mode)+0x28>)
 8001bfe:	b510      	push	{r4, lr}
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	b16a      	cbz	r2, 8001c20 <RDMIdentify::Off(rdm::identify::Mode)+0x24>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4c08      	ldr	r4, [pc, #32]	; (8001c28 <RDMIdentify::Off(rdm::identify::Mode)+0x2c>)
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <RDMIdentify::Off(rdm::identify::Mode)+0x30>)
 8001c0c:	6821      	ldr	r1, [r4, #0]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f7ff ff6a 	bl	8001ae8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <RDMIdentify::Off(rdm::identify::Mode)+0x34>)
 8001c18:	3b00      	subs	r3, #0
 8001c1a:	bf18      	it	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	7013      	strb	r3, [r2, #0]
 8001c20:	bd10      	pop	{r4, pc}
 8001c22:	bf00      	nop
 8001c24:	20000081 	andcs	r0, r0, r1, lsl #1
 8001c28:	20000084 	andcs	r0, r0, r4, lsl #1
 8001c2c:	20000624 	andcs	r0, r0, r4, lsr #12
 8001c30:	200001a4 	andcs	r0, r0, r4, lsr #3

08001c34 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001c34:	2805      	cmp	r0, #5
 8001c36:	d814      	bhi.n	8001c62 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 8001c38:	e8df f000 	tbb	[pc, r0]
 8001c3c:	0a071603 	beq	81c7450 <__exidx_end+0x1bb050>
 8001c40:	2304100d 	movwcs	r1, #16397	; 0x400d
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x3c>)
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	4770      	bx	lr
 8001c4a:	230e      	movs	r3, #14
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 8001c4e:	e7fa      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c50:	2303      	movs	r3, #3
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 8001c54:	e7f7      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c56:	230c      	movs	r3, #12
 8001c58:	4808      	ldr	r0, [pc, #32]	; (8001c7c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001c5a:	e7f4      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	4808      	ldr	r0, [pc, #32]	; (8001c80 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001c60:	e7f1      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c62:	2309      	movs	r3, #9
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001c66:	e7ee      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c68:	2305      	movs	r3, #5
 8001c6a:	4807      	ldr	r0, [pc, #28]	; (8001c88 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001c6c:	e7eb      	b.n	8001c46 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c6e:	bf00      	nop
 8001c70:	0800a586 	stmdaeq	r0, {r1, r2, r7, r8, sl, sp, pc}
 8001c74:	0800a58b 	stmdaeq	r0, {r0, r1, r3, r7, r8, sl, sp, pc}
 8001c78:	0800a59a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, sp, pc}
 8001c7c:	0800a59e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, sp, pc}
 8001c80:	0800a5ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, sl, sp, pc}
 8001c84:	0800a5b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, sp, pc}
 8001c88:	0800a594 	stmdaeq	r0, {r2, r4, r7, r8, sl, sp, pc}

08001c8c <RDMSoftwareVersion::GetVersion()>:
 8001c8c:	4800      	ldr	r0, [pc, #0]	; (8001c90 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001c8e:	4770      	bx	lr
 8001c90:	0800a5bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, sp, pc}

08001c94 <RDMSoftwareVersion::GetVersionLength()>:
 8001c94:	2003      	movs	r0, #3
 8001c96:	4770      	bx	lr

08001c98 <RDMSoftwareVersion::GetVersionId()>:
 8001c98:	4800      	ldr	r0, [pc, #0]	; (8001c9c <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001c9a:	4770      	bx	lr
 8001c9c:	641721f1 	ldrvs	r2, [r7], #-497	; 0xfffffe0f

08001ca0 <_itostr>:
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	0fc7      	lsrs	r7, r0, #31
 8001ca4:	b091      	sub	sp, #68	; 0x44
 8001ca6:	bf18      	it	ne
 8001ca8:	4240      	negne	r0, r0
 8001caa:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8001cae:	b9c8      	cbnz	r0, 8001ce4 <_itostr+0x44>
 8001cb0:	2330      	movs	r3, #48	; 0x30
 8001cb2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001cb6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001cba:	b132      	cbz	r2, 8001cca <_itostr+0x2a>
 8001cbc:	4668      	mov	r0, sp
 8001cbe:	2530      	movs	r5, #48	; 0x30
 8001cc0:	1ae6      	subs	r6, r4, r3
 8001cc2:	4296      	cmp	r6, r2
 8001cc4:	da01      	bge.n	8001cca <_itostr+0x2a>
 8001cc6:	4283      	cmp	r3, r0
 8001cc8:	d81c      	bhi.n	8001d04 <_itostr+0x64>
 8001cca:	b117      	cbz	r7, 8001cd2 <_itostr+0x32>
 8001ccc:	222d      	movs	r2, #45	; 0x2d
 8001cce:	f803 2901 	strb.w	r2, [r3], #-1
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	1ae0      	subs	r0, r4, r3
 8001cd6:	3901      	subs	r1, #1
 8001cd8:	aa10      	add	r2, sp, #64	; 0x40
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d315      	bcc.n	8001d0a <_itostr+0x6a>
 8001cde:	3001      	adds	r0, #1
 8001ce0:	b011      	add	sp, #68	; 0x44
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	250a      	movs	r5, #10
 8001ce8:	46ec      	mov	ip, sp
 8001cea:	fb90 f6f5 	sdiv	r6, r0, r5
 8001cee:	fb05 0016 	mls	r0, r5, r6, r0
 8001cf2:	3030      	adds	r0, #48	; 0x30
 8001cf4:	f803 0901 	strb.w	r0, [r3], #-1
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	d0dd      	beq.n	8001cba <_itostr+0x1a>
 8001cfe:	4563      	cmp	r3, ip
 8001d00:	d1f3      	bne.n	8001cea <_itostr+0x4a>
 8001d02:	e7da      	b.n	8001cba <_itostr+0x1a>
 8001d04:	f803 5901 	strb.w	r5, [r3], #-1
 8001d08:	e7da      	b.n	8001cc0 <_itostr+0x20>
 8001d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d0e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001d12:	e7e1      	b.n	8001cd8 <_itostr+0x38>

08001d14 <_xputch>:
 8001d14:	4603      	mov	r3, r0
 8001d16:	b410      	push	{r4}
 8001d18:	4c08      	ldr	r4, [pc, #32]	; (8001d3c <_xputch+0x28>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	6821      	ldr	r1, [r4, #0]
 8001d20:	3201      	adds	r2, #1
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	b139      	cbz	r1, 8001d36 <_xputch+0x22>
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	da02      	bge.n	8001d32 <_xputch+0x1e>
 8001d2c:	1c4b      	adds	r3, r1, #1
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	7008      	strb	r0, [r1, #0]
 8001d32:	bc10      	pop	{r4}
 8001d34:	4770      	bx	lr
 8001d36:	bc10      	pop	{r4}
 8001d38:	f006 bb30 	b.w	800839c <console_putc>
 8001d3c:	20000088 	andcs	r0, r0, r8, lsl #1

08001d40 <_format_int>:
 8001d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d44:	4698      	mov	r8, r3
 8001d46:	b091      	sub	sp, #68	; 0x44
 8001d48:	ea52 0308 	orrs.w	r3, r2, r8
 8001d4c:	4606      	mov	r6, r0
 8001d4e:	4617      	mov	r7, r2
 8001d50:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001d54:	d133      	bne.n	8001dbe <_format_int+0x7e>
 8001d56:	2330      	movs	r3, #48	; 0x30
 8001d58:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001d5c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001d60:	6833      	ldr	r3, [r6, #0]
 8001d62:	07d8      	lsls	r0, r3, #31
 8001d64:	d507      	bpl.n	8001d76 <_format_int+0x36>
 8001d66:	466a      	mov	r2, sp
 8001d68:	2030      	movs	r0, #48	; 0x30
 8001d6a:	6871      	ldr	r1, [r6, #4]
 8001d6c:	1b2f      	subs	r7, r5, r4
 8001d6e:	428f      	cmp	r7, r1
 8001d70:	da01      	bge.n	8001d76 <_format_int+0x36>
 8001d72:	4294      	cmp	r4, r2
 8001d74:	d839      	bhi.n	8001dea <_format_int+0xaa>
 8001d76:	0699      	lsls	r1, r3, #26
 8001d78:	d507      	bpl.n	8001d8a <_format_int+0x4a>
 8001d7a:	466a      	mov	r2, sp
 8001d7c:	2030      	movs	r0, #48	; 0x30
 8001d7e:	68b1      	ldr	r1, [r6, #8]
 8001d80:	1b2f      	subs	r7, r5, r4
 8001d82:	428f      	cmp	r7, r1
 8001d84:	da01      	bge.n	8001d8a <_format_int+0x4a>
 8001d86:	4294      	cmp	r4, r2
 8001d88:	d832      	bhi.n	8001df0 <_format_int+0xb0>
 8001d8a:	071a      	lsls	r2, r3, #28
 8001d8c:	bf44      	itt	mi
 8001d8e:	222d      	movmi	r2, #45	; 0x2d
 8001d90:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001d94:	065b      	lsls	r3, r3, #25
 8001d96:	d407      	bmi.n	8001da8 <_format_int+0x68>
 8001d98:	466b      	mov	r3, sp
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	68b2      	ldr	r2, [r6, #8]
 8001d9e:	1b28      	subs	r0, r5, r4
 8001da0:	4290      	cmp	r0, r2
 8001da2:	da01      	bge.n	8001da8 <_format_int+0x68>
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d826      	bhi.n	8001df6 <_format_int+0xb6>
 8001da8:	1b2d      	subs	r5, r5, r4
 8001daa:	3401      	adds	r4, #1
 8001dac:	ab10      	add	r3, sp, #64	; 0x40
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d324      	bcc.n	8001dfc <_format_int+0xbc>
 8001db2:	68b3      	ldr	r3, [r6, #8]
 8001db4:	42ab      	cmp	r3, r5
 8001db6:	dc27      	bgt.n	8001e08 <_format_int+0xc8>
 8001db8:	b011      	add	sp, #68	; 0x44
 8001dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dbe:	462c      	mov	r4, r5
 8001dc0:	46e9      	mov	r9, sp
 8001dc2:	4638      	mov	r0, r7
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	220a      	movs	r2, #10
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f7fe fbbb 	bl	8000544 <__aeabi_uldivmod>
 8001dce:	3230      	adds	r2, #48	; 0x30
 8001dd0:	f804 2901 	strb.w	r2, [r4], #-1
 8001dd4:	463a      	mov	r2, r7
 8001dd6:	4643      	mov	r3, r8
 8001dd8:	2a0a      	cmp	r2, #10
 8001dda:	f173 0300 	sbcs.w	r3, r3, #0
 8001dde:	4607      	mov	r7, r0
 8001de0:	4688      	mov	r8, r1
 8001de2:	d3bd      	bcc.n	8001d60 <_format_int+0x20>
 8001de4:	454c      	cmp	r4, r9
 8001de6:	d1ec      	bne.n	8001dc2 <_format_int+0x82>
 8001de8:	e7ba      	b.n	8001d60 <_format_int+0x20>
 8001dea:	f804 0901 	strb.w	r0, [r4], #-1
 8001dee:	e7bd      	b.n	8001d6c <_format_int+0x2c>
 8001df0:	f804 0901 	strb.w	r0, [r4], #-1
 8001df4:	e7c4      	b.n	8001d80 <_format_int+0x40>
 8001df6:	f804 1901 	strb.w	r1, [r4], #-1
 8001dfa:	e7d0      	b.n	8001d9e <_format_int+0x5e>
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e02:	f7ff ff87 	bl	8001d14 <_xputch>
 8001e06:	e7d1      	b.n	8001dac <_format_int+0x6c>
 8001e08:	2120      	movs	r1, #32
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f7ff ff82 	bl	8001d14 <_xputch>
 8001e10:	3501      	adds	r5, #1
 8001e12:	e7ce      	b.n	8001db2 <_format_int+0x72>

08001e14 <_format_hex>:
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	b091      	sub	sp, #68	; 0x44
 8001e18:	4606      	mov	r6, r0
 8001e1a:	6804      	ldr	r4, [r0, #0]
 8001e1c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001e20:	bb61      	cbnz	r1, 8001e7c <_format_hex+0x68>
 8001e22:	2330      	movs	r3, #48	; 0x30
 8001e24:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001e28:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001e2c:	07e5      	lsls	r5, r4, #31
 8001e2e:	d507      	bpl.n	8001e40 <_format_hex+0x2c>
 8001e30:	4669      	mov	r1, sp
 8001e32:	2530      	movs	r5, #48	; 0x30
 8001e34:	6870      	ldr	r0, [r6, #4]
 8001e36:	1ad7      	subs	r7, r2, r3
 8001e38:	4287      	cmp	r7, r0
 8001e3a:	da01      	bge.n	8001e40 <_format_hex+0x2c>
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d831      	bhi.n	8001ea4 <_format_hex+0x90>
 8001e40:	06a0      	lsls	r0, r4, #26
 8001e42:	d507      	bpl.n	8001e54 <_format_hex+0x40>
 8001e44:	4669      	mov	r1, sp
 8001e46:	2530      	movs	r5, #48	; 0x30
 8001e48:	68b0      	ldr	r0, [r6, #8]
 8001e4a:	1ad7      	subs	r7, r2, r3
 8001e4c:	4287      	cmp	r7, r0
 8001e4e:	da01      	bge.n	8001e54 <_format_hex+0x40>
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d82a      	bhi.n	8001eaa <_format_hex+0x96>
 8001e54:	0661      	lsls	r1, r4, #25
 8001e56:	d407      	bmi.n	8001e68 <_format_hex+0x54>
 8001e58:	4669      	mov	r1, sp
 8001e5a:	2420      	movs	r4, #32
 8001e5c:	68b0      	ldr	r0, [r6, #8]
 8001e5e:	1ad5      	subs	r5, r2, r3
 8001e60:	4285      	cmp	r5, r0
 8001e62:	da01      	bge.n	8001e68 <_format_hex+0x54>
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d823      	bhi.n	8001eb0 <_format_hex+0x9c>
 8001e68:	1ad5      	subs	r5, r2, r3
 8001e6a:	1c5c      	adds	r4, r3, #1
 8001e6c:	ab10      	add	r3, sp, #64	; 0x40
 8001e6e:	429c      	cmp	r4, r3
 8001e70:	d321      	bcc.n	8001eb6 <_format_hex+0xa2>
 8001e72:	68b3      	ldr	r3, [r6, #8]
 8001e74:	429d      	cmp	r5, r3
 8001e76:	db24      	blt.n	8001ec2 <_format_hex+0xae>
 8001e78:	b011      	add	sp, #68	; 0x44
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7c:	f014 0f02 	tst.w	r4, #2
 8001e80:	bf0c      	ite	eq
 8001e82:	2757      	moveq	r7, #87	; 0x57
 8001e84:	2737      	movne	r7, #55	; 0x37
 8001e86:	4613      	mov	r3, r2
 8001e88:	466d      	mov	r5, sp
 8001e8a:	f001 000f 	and.w	r0, r1, #15
 8001e8e:	2809      	cmp	r0, #9
 8001e90:	bf94      	ite	ls
 8001e92:	3030      	addls	r0, #48	; 0x30
 8001e94:	19c0      	addhi	r0, r0, r7
 8001e96:	0909      	lsrs	r1, r1, #4
 8001e98:	f803 0901 	strb.w	r0, [r3], #-1
 8001e9c:	d0c6      	beq.n	8001e2c <_format_hex+0x18>
 8001e9e:	42ab      	cmp	r3, r5
 8001ea0:	d1f3      	bne.n	8001e8a <_format_hex+0x76>
 8001ea2:	e7c3      	b.n	8001e2c <_format_hex+0x18>
 8001ea4:	f803 5901 	strb.w	r5, [r3], #-1
 8001ea8:	e7c5      	b.n	8001e36 <_format_hex+0x22>
 8001eaa:	f803 5901 	strb.w	r5, [r3], #-1
 8001eae:	e7cc      	b.n	8001e4a <_format_hex+0x36>
 8001eb0:	f803 4901 	strb.w	r4, [r3], #-1
 8001eb4:	e7d3      	b.n	8001e5e <_format_hex+0x4a>
 8001eb6:	4630      	mov	r0, r6
 8001eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ebc:	f7ff ff2a 	bl	8001d14 <_xputch>
 8001ec0:	e7d4      	b.n	8001e6c <_format_hex+0x58>
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7ff ff25 	bl	8001d14 <_xputch>
 8001eca:	3501      	adds	r5, #1
 8001ecc:	e7d1      	b.n	8001e72 <_format_hex+0x5e>
	...

08001ed0 <_vprintf>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	f04f 0800 	mov.w	r8, #0
 8001ede:	b099      	sub	sp, #100	; 0x64
 8001ee0:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8001ee4:	af08      	add	r7, sp, #32
 8001ee6:	7819      	ldrb	r1, [r3, #0]
 8001ee8:	b919      	cbnz	r1, 8001ef2 <_vprintf+0x22>
 8001eea:	9806      	ldr	r0, [sp, #24]
 8001eec:	b019      	add	sp, #100	; 0x64
 8001eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef2:	2925      	cmp	r1, #37	; 0x25
 8001ef4:	f103 0601 	add.w	r6, r3, #1
 8001ef8:	d004      	beq.n	8001f04 <_vprintf+0x34>
 8001efa:	a803      	add	r0, sp, #12
 8001efc:	f7ff ff0a 	bl	8001d14 <_xputch>
 8001f00:	4633      	mov	r3, r6
 8001f02:	e7f0      	b.n	8001ee6 <_vprintf+0x16>
 8001f04:	2200      	movs	r2, #0
 8001f06:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8001f0a:	9205      	str	r2, [sp, #20]
 8001f0c:	785a      	ldrb	r2, [r3, #1]
 8001f0e:	2a30      	cmp	r2, #48	; 0x30
 8001f10:	d129      	bne.n	8001f66 <_vprintf+0x96>
 8001f12:	2220      	movs	r2, #32
 8001f14:	9203      	str	r2, [sp, #12]
 8001f16:	1c9e      	adds	r6, r3, #2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4635      	mov	r5, r6
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	f04f 0c0a 	mov.w	ip, #10
 8001f22:	7829      	ldrb	r1, [r5, #0]
 8001f24:	462e      	mov	r6, r5
 8001f26:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001f2a:	2809      	cmp	r0, #9
 8001f2c:	f105 0501 	add.w	r5, r5, #1
 8001f30:	d91d      	bls.n	8001f6e <_vprintf+0x9e>
 8001f32:	b12a      	cbz	r2, 8001f40 <_vprintf+0x70>
 8001f34:	9305      	str	r3, [sp, #20]
 8001f36:	b11b      	cbz	r3, 8001f40 <_vprintf+0x70>
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	292e      	cmp	r1, #46	; 0x2e
 8001f42:	d123      	bne.n	8001f8c <_vprintf+0xbc>
 8001f44:	7873      	ldrb	r3, [r6, #1]
 8001f46:	2b2a      	cmp	r3, #42	; 0x2a
 8001f48:	d015      	beq.n	8001f76 <_vprintf+0xa6>
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	250a      	movs	r5, #10
 8001f4e:	460a      	mov	r2, r1
 8001f50:	1c70      	adds	r0, r6, #1
 8001f52:	7803      	ldrb	r3, [r0, #0]
 8001f54:	4606      	mov	r6, r0
 8001f56:	3b30      	subs	r3, #48	; 0x30
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	f100 0001 	add.w	r0, r0, #1
 8001f5e:	d959      	bls.n	8002014 <_vprintf+0x144>
 8001f60:	b181      	cbz	r1, 8001f84 <_vprintf+0xb4>
 8001f62:	9204      	str	r2, [sp, #16]
 8001f64:	e00e      	b.n	8001f84 <_vprintf+0xb4>
 8001f66:	2a2d      	cmp	r2, #45	; 0x2d
 8001f68:	d1d6      	bne.n	8001f18 <_vprintf+0x48>
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	e7d2      	b.n	8001f14 <_vprintf+0x44>
 8001f6e:	2201      	movs	r2, #1
 8001f70:	fb0c 0303 	mla	r3, ip, r3, r0
 8001f74:	e7d5      	b.n	8001f22 <_vprintf+0x52>
 8001f76:	f854 3b04 	ldr.w	r3, [r4], #4
 8001f7a:	3602      	adds	r6, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfb8      	it	lt
 8001f80:	425b      	neglt	r3, r3
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	9b03      	ldr	r3, [sp, #12]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	7833      	ldrb	r3, [r6, #0]
 8001f8e:	2b6c      	cmp	r3, #108	; 0x6c
 8001f90:	bf04      	itt	eq
 8001f92:	9b03      	ldreq	r3, [sp, #12]
 8001f94:	3601      	addeq	r6, #1
 8001f96:	7831      	ldrb	r1, [r6, #0]
 8001f98:	bf04      	itt	eq
 8001f9a:	f043 0304 	orreq.w	r3, r3, #4
 8001f9e:	9303      	streq	r3, [sp, #12]
 8001fa0:	2958      	cmp	r1, #88	; 0x58
 8001fa2:	f000 8171 	beq.w	8002288 <_vprintf+0x3b8>
 8001fa6:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	2a15      	cmp	r2, #21
 8001fae:	d8a4      	bhi.n	8001efa <_vprintf+0x2a>
 8001fb0:	2b15      	cmp	r3, #21
 8001fb2:	d8a2      	bhi.n	8001efa <_vprintf+0x2a>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <_vprintf+0xec>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	0800201d 	stmdaeq	r0, {r0, r2, r3, r4, sp}
 8001fc0:	0800202f 	stmdaeq	r0, {r0, r1, r2, r3, r5, sp}
 8001fc4:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fc8:	08002065 	stmdaeq	r0, {r0, r2, r5, r6, sp}
 8001fcc:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fd0:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fd4:	0800202f 	stmdaeq	r0, {r0, r1, r2, r3, r5, sp}
 8001fd8:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fdc:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fe0:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fe4:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fe8:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001fec:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001ff0:	080021cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sp}
 8001ff4:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001ff8:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001ffc:	080021f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, sp}
 8002000:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8002004:	08002269 	stmdaeq	r0, {r0, r3, r5, r6, r9, sp}
 8002008:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 800200c:	08001efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8002010:	08002291 	stmdaeq	r0, {r0, r4, r7, r9, sp}
 8002014:	2101      	movs	r1, #1
 8002016:	fb05 3202 	mla	r2, r5, r2, r3
 800201a:	e79a      	b.n	8001f52 <_vprintf+0x82>
 800201c:	4625      	mov	r5, r4
 800201e:	a803      	add	r0, sp, #12
 8002020:	f855 1b04 	ldr.w	r1, [r5], #4
 8002024:	f7ff fe76 	bl	8001d14 <_xputch>
 8002028:	462c      	mov	r4, r5
 800202a:	3601      	adds	r6, #1
 800202c:	e768      	b.n	8001f00 <_vprintf+0x30>
 800202e:	9903      	ldr	r1, [sp, #12]
 8002030:	074d      	lsls	r5, r1, #29
 8002032:	bf51      	iteee	pl
 8002034:	4625      	movpl	r5, r4
 8002036:	3407      	addmi	r4, #7
 8002038:	f024 0407 	bicmi.w	r4, r4, #7
 800203c:	4625      	movmi	r5, r4
 800203e:	bf55      	itete	pl
 8002040:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8002044:	6863      	ldrmi	r3, [r4, #4]
 8002046:	17d3      	asrpl	r3, r2, #31
 8002048:	f855 2b08 	ldrmi.w	r2, [r5], #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	da05      	bge.n	800205c <_vprintf+0x18c>
 8002050:	f041 0108 	orr.w	r1, r1, #8
 8002054:	4252      	negs	r2, r2
 8002056:	9103      	str	r1, [sp, #12]
 8002058:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800205c:	a803      	add	r0, sp, #12
 800205e:	f7ff fe6f 	bl	8001d40 <_format_int>
 8002062:	e7e1      	b.n	8002028 <_vprintf+0x158>
 8002064:	3407      	adds	r4, #7
 8002066:	f024 0507 	bic.w	r5, r4, #7
 800206a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800206e:	f7fe f86f 	bl	8000150 <__aeabi_d2f>
 8002072:	9b03      	ldr	r3, [sp, #12]
 8002074:	4641      	mov	r1, r8
 8002076:	07dc      	lsls	r4, r3, #31
 8002078:	bf54      	ite	pl
 800207a:	f04f 0a06 	movpl.w	sl, #6
 800207e:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8002082:	4681      	mov	r9, r0
 8002084:	f7fe fa10 	bl	80004a8 <__aeabi_fcmplt>
 8002088:	2800      	cmp	r0, #0
 800208a:	d063      	beq.n	8002154 <_vprintf+0x284>
 800208c:	232d      	movs	r3, #45	; 0x2d
 800208e:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8002092:	f88d 3020 	strb.w	r3, [sp, #32]
 8002096:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 800209a:	4648      	mov	r0, r9
 800209c:	f7fe fa2c 	bl	80004f8 <__aeabi_f2iz>
 80020a0:	4659      	mov	r1, fp
 80020a2:	2200      	movs	r2, #0
 80020a4:	4604      	mov	r4, r0
 80020a6:	f7ff fdfb 	bl	8001ca0 <_itostr>
 80020aa:	eb0b 0200 	add.w	r2, fp, r0
 80020ae:	e9cd 2000 	strd	r2, r0, [sp]
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe f956 	bl	8000364 <__aeabi_i2f>
 80020b8:	4601      	mov	r1, r0
 80020ba:	4648      	mov	r0, r9
 80020bc:	f7fe f89c 	bl	80001f8 <__aeabi_fsub>
 80020c0:	222e      	movs	r2, #46	; 0x2e
 80020c2:	4601      	mov	r1, r0
 80020c4:	200a      	movs	r0, #10
 80020c6:	9b00      	ldr	r3, [sp, #0]
 80020c8:	f10a 0901 	add.w	r9, sl, #1
 80020cc:	1c5c      	adds	r4, r3, #1
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	f80b 2003 	strb.w	r2, [fp, r3]
 80020d4:	4603      	mov	r3, r0
 80020d6:	f1ba 0f00 	cmp.w	sl, #0
 80020da:	dc3d      	bgt.n	8002158 <_vprintf+0x288>
 80020dc:	9100      	str	r1, [sp, #0]
 80020de:	f7fe f941 	bl	8000364 <__aeabi_i2f>
 80020e2:	9900      	ldr	r1, [sp, #0]
 80020e4:	f7fe fe36 	bl	8000d54 <__aeabi_fmul>
 80020e8:	f7fe fa06 	bl	80004f8 <__aeabi_f2iz>
 80020ec:	464a      	mov	r2, r9
 80020ee:	4621      	mov	r1, r4
 80020f0:	f7ff fdd6 	bl	8001ca0 <_itostr>
 80020f4:	4404      	add	r4, r0
 80020f6:	1be0      	subs	r0, r4, r7
 80020f8:	1e44      	subs	r4, r0, #1
 80020fa:	5d3b      	ldrb	r3, [r7, r4]
 80020fc:	193a      	adds	r2, r7, r4
 80020fe:	2b34      	cmp	r3, #52	; 0x34
 8002100:	d910      	bls.n	8002124 <_vprintf+0x254>
 8002102:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8002106:	1e53      	subs	r3, r2, #1
 8002108:	292e      	cmp	r1, #46	; 0x2e
 800210a:	d02c      	beq.n	8002166 <_vprintf+0x296>
 800210c:	469c      	mov	ip, r3
 800210e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002112:	4663      	mov	r3, ip
 8002114:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8002118:	2939      	cmp	r1, #57	; 0x39
 800211a:	d021      	beq.n	8002160 <_vprintf+0x290>
 800211c:	292e      	cmp	r1, #46	; 0x2e
 800211e:	d022      	beq.n	8002166 <_vprintf+0x296>
 8002120:	3101      	adds	r1, #1
 8002122:	7019      	strb	r1, [r3, #0]
 8002124:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8002128:	446b      	add	r3, sp
 800212a:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 800212e:	2b2e      	cmp	r3, #46	; 0x2e
 8002130:	bf08      	it	eq
 8002132:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002136:	46a1      	mov	r9, r4
 8002138:	9b05      	ldr	r3, [sp, #20]
 800213a:	4599      	cmp	r9, r3
 800213c:	db3e      	blt.n	80021bc <_vprintf+0x2ec>
 800213e:	46b9      	mov	r9, r7
 8002140:	2c00      	cmp	r4, #0
 8002142:	f77f af71 	ble.w	8002028 <_vprintf+0x158>
 8002146:	f819 1b01 	ldrb.w	r1, [r9], #1
 800214a:	a803      	add	r0, sp, #12
 800214c:	f7ff fde2 	bl	8001d14 <_xputch>
 8002150:	3c01      	subs	r4, #1
 8002152:	e7f5      	b.n	8002140 <_vprintf+0x270>
 8002154:	46bb      	mov	fp, r7
 8002156:	e7a0      	b.n	800209a <_vprintf+0x1ca>
 8002158:	4358      	muls	r0, r3
 800215a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800215e:	e7ba      	b.n	80020d6 <_vprintf+0x206>
 8002160:	f88c e001 	strb.w	lr, [ip, #1]
 8002164:	e7d5      	b.n	8002112 <_vprintf+0x242>
 8002166:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800216a:	3b01      	subs	r3, #1
 800216c:	7819      	ldrb	r1, [r3, #0]
 800216e:	2939      	cmp	r1, #57	; 0x39
 8002170:	d112      	bne.n	8002198 <_vprintf+0x2c8>
 8002172:	42bb      	cmp	r3, r7
 8002174:	d20d      	bcs.n	8002192 <_vprintf+0x2c2>
 8002176:	1c5c      	adds	r4, r3, #1
 8002178:	1c99      	adds	r1, r3, #2
 800217a:	428c      	cmp	r4, r1
 800217c:	eba2 0203 	sub.w	r2, r2, r3
 8002180:	d913      	bls.n	80021aa <_vprintf+0x2da>
 8002182:	4619      	mov	r1, r3
 8002184:	441a      	add	r2, r3
 8002186:	428a      	cmp	r2, r1
 8002188:	d10b      	bne.n	80021a2 <_vprintf+0x2d2>
 800218a:	2231      	movs	r2, #49	; 0x31
 800218c:	4604      	mov	r4, r0
 800218e:	705a      	strb	r2, [r3, #1]
 8002190:	e7c8      	b.n	8002124 <_vprintf+0x254>
 8002192:	f803 c901 	strb.w	ip, [r3], #-1
 8002196:	e7e9      	b.n	800216c <_vprintf+0x29c>
 8002198:	42bb      	cmp	r3, r7
 800219a:	d3ec      	bcc.n	8002176 <_vprintf+0x2a6>
 800219c:	292d      	cmp	r1, #45	; 0x2d
 800219e:	d0ea      	beq.n	8002176 <_vprintf+0x2a6>
 80021a0:	e7be      	b.n	8002120 <_vprintf+0x250>
 80021a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80021a6:	704c      	strb	r4, [r1, #1]
 80021a8:	e7ed      	b.n	8002186 <_vprintf+0x2b6>
 80021aa:	4414      	add	r4, r2
 80021ac:	440a      	add	r2, r1
 80021ae:	428a      	cmp	r2, r1
 80021b0:	d0eb      	beq.n	800218a <_vprintf+0x2ba>
 80021b2:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 80021b6:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80021ba:	e7f8      	b.n	80021ae <_vprintf+0x2de>
 80021bc:	2120      	movs	r1, #32
 80021be:	a803      	add	r0, sp, #12
 80021c0:	f7ff fda8 	bl	8001d14 <_xputch>
 80021c4:	f109 0901 	add.w	r9, r9, #1
 80021c8:	e7b6      	b.n	8002138 <_vprintf+0x268>
 80021ca:	2308      	movs	r3, #8
 80021cc:	4625      	mov	r5, r4
 80021ce:	9305      	str	r3, [sp, #20]
 80021d0:	2320      	movs	r3, #32
 80021d2:	2130      	movs	r1, #48	; 0x30
 80021d4:	f855 4b04 	ldr.w	r4, [r5], #4
 80021d8:	a803      	add	r0, sp, #12
 80021da:	9303      	str	r3, [sp, #12]
 80021dc:	f7ff fd9a 	bl	8001d14 <_xputch>
 80021e0:	2178      	movs	r1, #120	; 0x78
 80021e2:	a803      	add	r0, sp, #12
 80021e4:	f7ff fd96 	bl	8001d14 <_xputch>
 80021e8:	4621      	mov	r1, r4
 80021ea:	a803      	add	r0, sp, #12
 80021ec:	f7ff fe12 	bl	8001e14 <_format_hex>
 80021f0:	e71a      	b.n	8002028 <_vprintf+0x158>
 80021f2:	4625      	mov	r5, r4
 80021f4:	2400      	movs	r4, #0
 80021f6:	f855 9b04 	ldr.w	r9, [r5], #4
 80021fa:	f819 3004 	ldrb.w	r3, [r9, r4]
 80021fe:	b993      	cbnz	r3, 8002226 <_vprintf+0x356>
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	07d9      	lsls	r1, r3, #31
 8002204:	d503      	bpl.n	800220e <_vprintf+0x33e>
 8002206:	9b04      	ldr	r3, [sp, #16]
 8002208:	429c      	cmp	r4, r3
 800220a:	bfa8      	it	ge
 800220c:	461c      	movge	r4, r3
 800220e:	9b03      	ldr	r3, [sp, #12]
 8002210:	f104 0a01 	add.w	sl, r4, #1
 8002214:	065a      	lsls	r2, r3, #25
 8002216:	d403      	bmi.n	8002220 <_vprintf+0x350>
 8002218:	9b05      	ldr	r3, [sp, #20]
 800221a:	429c      	cmp	r4, r3
 800221c:	db05      	blt.n	800222a <_vprintf+0x35a>
 800221e:	4654      	mov	r4, sl
 8002220:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002224:	e00d      	b.n	8002242 <_vprintf+0x372>
 8002226:	3401      	adds	r4, #1
 8002228:	e7e7      	b.n	80021fa <_vprintf+0x32a>
 800222a:	2120      	movs	r1, #32
 800222c:	a803      	add	r0, sp, #12
 800222e:	f7ff fd71 	bl	8001d14 <_xputch>
 8002232:	4654      	mov	r4, sl
 8002234:	e7eb      	b.n	800220e <_vprintf+0x33e>
 8002236:	a803      	add	r0, sp, #12
 8002238:	f7ff fd6c 	bl	8001d14 <_xputch>
 800223c:	9b04      	ldr	r3, [sp, #16]
 800223e:	3b01      	subs	r3, #1
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	9b03      	ldr	r3, [sp, #12]
 8002244:	07db      	lsls	r3, r3, #31
 8002246:	d501      	bpl.n	800224c <_vprintf+0x37c>
 8002248:	9b04      	ldr	r3, [sp, #16]
 800224a:	b11b      	cbz	r3, 8002254 <_vprintf+0x384>
 800224c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002250:	2900      	cmp	r1, #0
 8002252:	d1f0      	bne.n	8002236 <_vprintf+0x366>
 8002254:	9b05      	ldr	r3, [sp, #20]
 8002256:	429c      	cmp	r4, r3
 8002258:	f6bf aee6 	bge.w	8002028 <_vprintf+0x158>
 800225c:	2120      	movs	r1, #32
 800225e:	a803      	add	r0, sp, #12
 8002260:	f7ff fd58 	bl	8001d14 <_xputch>
 8002264:	3401      	adds	r4, #1
 8002266:	e7f5      	b.n	8002254 <_vprintf+0x384>
 8002268:	9b03      	ldr	r3, [sp, #12]
 800226a:	f013 0304 	ands.w	r3, r3, #4
 800226e:	bf1d      	ittte	ne
 8002270:	3407      	addne	r4, #7
 8002272:	f024 0407 	bicne.w	r4, r4, #7
 8002276:	4625      	movne	r5, r4
 8002278:	4625      	moveq	r5, r4
 800227a:	bf1a      	itte	ne
 800227c:	f855 2b08 	ldrne.w	r2, [r5], #8
 8002280:	6863      	ldrne	r3, [r4, #4]
 8002282:	f855 2b04 	ldreq.w	r2, [r5], #4
 8002286:	e6e9      	b.n	800205c <_vprintf+0x18c>
 8002288:	9b03      	ldr	r3, [sp, #12]
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	9303      	str	r3, [sp, #12]
 8002290:	4625      	mov	r5, r4
 8002292:	f855 1b04 	ldr.w	r1, [r5], #4
 8002296:	e7a8      	b.n	80021ea <_vprintf+0x31a>

08002298 <printf>:
 8002298:	b40f      	push	{r0, r1, r2, r3}
 800229a:	b507      	push	{r0, r1, r2, lr}
 800229c:	aa04      	add	r2, sp, #16
 800229e:	f852 1b04 	ldr.w	r1, [r2], #4
 80022a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80022a6:	9201      	str	r2, [sp, #4]
 80022a8:	f7ff fe12 	bl	8001ed0 <_vprintf>
 80022ac:	b003      	add	sp, #12
 80022ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80022b2:	b004      	add	sp, #16
 80022b4:	4770      	bx	lr
	...

080022b8 <snprintf>:
 80022b8:	b40c      	push	{r2, r3}
 80022ba:	460b      	mov	r3, r1
 80022bc:	b513      	push	{r0, r1, r4, lr}
 80022be:	4c09      	ldr	r4, [pc, #36]	; (80022e4 <snprintf+0x2c>)
 80022c0:	aa04      	add	r2, sp, #16
 80022c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80022c6:	6020      	str	r0, [r4, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	9201      	str	r2, [sp, #4]
 80022cc:	f7ff fe00 	bl	8001ed0 <_vprintf>
 80022d0:	2300      	movs	r3, #0
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	7013      	strb	r3, [r2, #0]
 80022d8:	b002      	add	sp, #8
 80022da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022de:	b002      	add	sp, #8
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000088 	andcs	r0, r0, r8, lsl #1

080022e8 <vsnprintf>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4605      	mov	r5, r0
 80022ec:	4c05      	ldr	r4, [pc, #20]	; (8002304 <vsnprintf+0x1c>)
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	461a      	mov	r2, r3
 80022f4:	6025      	str	r5, [r4, #0]
 80022f6:	f7ff fdeb 	bl	8001ed0 <_vprintf>
 80022fa:	2300      	movs	r3, #0
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	7013      	strb	r3, [r2, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000088 	andcs	r0, r0, r8, lsl #1

08002308 <puts>:
 8002308:	b508      	push	{r3, lr}
 800230a:	f006 f849 	bl	80083a0 <console_puts>
 800230e:	200a      	movs	r0, #10
 8002310:	f006 f844 	bl	800839c <console_putc>
 8002314:	2001      	movs	r0, #1
 8002316:	bd08      	pop	{r3, pc}

08002318 <__udivmoddi4>:
 8002318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800231c:	9e08      	ldr	r6, [sp, #32]
 800231e:	460d      	mov	r5, r1
 8002320:	4604      	mov	r4, r0
 8002322:	468e      	mov	lr, r1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d14c      	bne.n	80023c2 <__udivmoddi4+0xaa>
 8002328:	428a      	cmp	r2, r1
 800232a:	4694      	mov	ip, r2
 800232c:	d967      	bls.n	80023fe <__udivmoddi4+0xe6>
 800232e:	fab2 f382 	clz	r3, r2
 8002332:	b153      	cbz	r3, 800234a <__udivmoddi4+0x32>
 8002334:	fa02 fc03 	lsl.w	ip, r2, r3
 8002338:	f1c3 0220 	rsb	r2, r3, #32
 800233c:	fa01 fe03 	lsl.w	lr, r1, r3
 8002340:	fa20 f202 	lsr.w	r2, r0, r2
 8002344:	ea42 0e0e 	orr.w	lr, r2, lr
 8002348:	409c      	lsls	r4, r3
 800234a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800234e:	fbbe f1f7 	udiv	r1, lr, r7
 8002352:	fa1f f58c 	uxth.w	r5, ip
 8002356:	fb07 ee11 	mls	lr, r7, r1, lr
 800235a:	fb01 f005 	mul.w	r0, r1, r5
 800235e:	0c22      	lsrs	r2, r4, #16
 8002360:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8002364:	4290      	cmp	r0, r2
 8002366:	d90a      	bls.n	800237e <__udivmoddi4+0x66>
 8002368:	eb1c 0202 	adds.w	r2, ip, r2
 800236c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8002370:	f080 8119 	bcs.w	80025a6 <__udivmoddi4+0x28e>
 8002374:	4290      	cmp	r0, r2
 8002376:	f240 8116 	bls.w	80025a6 <__udivmoddi4+0x28e>
 800237a:	3902      	subs	r1, #2
 800237c:	4462      	add	r2, ip
 800237e:	1a12      	subs	r2, r2, r0
 8002380:	fbb2 f0f7 	udiv	r0, r2, r7
 8002384:	fb07 2210 	mls	r2, r7, r0, r2
 8002388:	fb00 f505 	mul.w	r5, r0, r5
 800238c:	b2a4      	uxth	r4, r4
 800238e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002392:	42a5      	cmp	r5, r4
 8002394:	d90a      	bls.n	80023ac <__udivmoddi4+0x94>
 8002396:	eb1c 0404 	adds.w	r4, ip, r4
 800239a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800239e:	f080 8104 	bcs.w	80025aa <__udivmoddi4+0x292>
 80023a2:	42a5      	cmp	r5, r4
 80023a4:	f240 8101 	bls.w	80025aa <__udivmoddi4+0x292>
 80023a8:	4464      	add	r4, ip
 80023aa:	3802      	subs	r0, #2
 80023ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80023b0:	2100      	movs	r1, #0
 80023b2:	1b64      	subs	r4, r4, r5
 80023b4:	b11e      	cbz	r6, 80023be <__udivmoddi4+0xa6>
 80023b6:	40dc      	lsrs	r4, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	e9c6 4300 	strd	r4, r3, [r6]
 80023be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023c2:	428b      	cmp	r3, r1
 80023c4:	d908      	bls.n	80023d8 <__udivmoddi4+0xc0>
 80023c6:	2e00      	cmp	r6, #0
 80023c8:	f000 80ea 	beq.w	80025a0 <__udivmoddi4+0x288>
 80023cc:	2100      	movs	r1, #0
 80023ce:	e9c6 0500 	strd	r0, r5, [r6]
 80023d2:	4608      	mov	r0, r1
 80023d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d8:	fab3 f183 	clz	r1, r3
 80023dc:	2900      	cmp	r1, #0
 80023de:	d148      	bne.n	8002472 <__udivmoddi4+0x15a>
 80023e0:	42ab      	cmp	r3, r5
 80023e2:	d302      	bcc.n	80023ea <__udivmoddi4+0xd2>
 80023e4:	4282      	cmp	r2, r0
 80023e6:	f200 80f8 	bhi.w	80025da <__udivmoddi4+0x2c2>
 80023ea:	1a84      	subs	r4, r0, r2
 80023ec:	eb65 0203 	sbc.w	r2, r5, r3
 80023f0:	2001      	movs	r0, #1
 80023f2:	4696      	mov	lr, r2
 80023f4:	2e00      	cmp	r6, #0
 80023f6:	d0e2      	beq.n	80023be <__udivmoddi4+0xa6>
 80023f8:	e9c6 4e00 	strd	r4, lr, [r6]
 80023fc:	e7df      	b.n	80023be <__udivmoddi4+0xa6>
 80023fe:	b902      	cbnz	r2, 8002402 <__udivmoddi4+0xea>
 8002400:	deff      	udf	#255	; 0xff
 8002402:	fab2 f382 	clz	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 808e 	bne.w	8002528 <__udivmoddi4+0x210>
 800240c:	1a88      	subs	r0, r1, r2
 800240e:	2101      	movs	r1, #1
 8002410:	0c17      	lsrs	r7, r2, #16
 8002412:	fa1f fe82 	uxth.w	lr, r2
 8002416:	fbb0 f5f7 	udiv	r5, r0, r7
 800241a:	fb07 0015 	mls	r0, r7, r5, r0
 800241e:	0c22      	lsrs	r2, r4, #16
 8002420:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002424:	fb0e f005 	mul.w	r0, lr, r5
 8002428:	4290      	cmp	r0, r2
 800242a:	d908      	bls.n	800243e <__udivmoddi4+0x126>
 800242c:	eb1c 0202 	adds.w	r2, ip, r2
 8002430:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8002434:	d202      	bcs.n	800243c <__udivmoddi4+0x124>
 8002436:	4290      	cmp	r0, r2
 8002438:	f200 80cc 	bhi.w	80025d4 <__udivmoddi4+0x2bc>
 800243c:	4645      	mov	r5, r8
 800243e:	1a12      	subs	r2, r2, r0
 8002440:	fbb2 f0f7 	udiv	r0, r2, r7
 8002444:	fb07 2210 	mls	r2, r7, r0, r2
 8002448:	fb0e fe00 	mul.w	lr, lr, r0
 800244c:	b2a4      	uxth	r4, r4
 800244e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002452:	45a6      	cmp	lr, r4
 8002454:	d908      	bls.n	8002468 <__udivmoddi4+0x150>
 8002456:	eb1c 0404 	adds.w	r4, ip, r4
 800245a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800245e:	d202      	bcs.n	8002466 <__udivmoddi4+0x14e>
 8002460:	45a6      	cmp	lr, r4
 8002462:	f200 80b4 	bhi.w	80025ce <__udivmoddi4+0x2b6>
 8002466:	4610      	mov	r0, r2
 8002468:	eba4 040e 	sub.w	r4, r4, lr
 800246c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002470:	e7a0      	b.n	80023b4 <__udivmoddi4+0x9c>
 8002472:	f1c1 0720 	rsb	r7, r1, #32
 8002476:	408b      	lsls	r3, r1
 8002478:	fa22 fc07 	lsr.w	ip, r2, r7
 800247c:	ea4c 0c03 	orr.w	ip, ip, r3
 8002480:	fa25 fa07 	lsr.w	sl, r5, r7
 8002484:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002488:	fbba f8f9 	udiv	r8, sl, r9
 800248c:	408d      	lsls	r5, r1
 800248e:	fa20 f307 	lsr.w	r3, r0, r7
 8002492:	fb09 aa18 	mls	sl, r9, r8, sl
 8002496:	fa1f fe8c 	uxth.w	lr, ip
 800249a:	432b      	orrs	r3, r5
 800249c:	fa00 f501 	lsl.w	r5, r0, r1
 80024a0:	fb08 f00e 	mul.w	r0, r8, lr
 80024a4:	0c1c      	lsrs	r4, r3, #16
 80024a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80024aa:	42a0      	cmp	r0, r4
 80024ac:	fa02 f201 	lsl.w	r2, r2, r1
 80024b0:	d90b      	bls.n	80024ca <__udivmoddi4+0x1b2>
 80024b2:	eb1c 0404 	adds.w	r4, ip, r4
 80024b6:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80024ba:	f080 8086 	bcs.w	80025ca <__udivmoddi4+0x2b2>
 80024be:	42a0      	cmp	r0, r4
 80024c0:	f240 8083 	bls.w	80025ca <__udivmoddi4+0x2b2>
 80024c4:	f1a8 0802 	sub.w	r8, r8, #2
 80024c8:	4464      	add	r4, ip
 80024ca:	1a24      	subs	r4, r4, r0
 80024cc:	b298      	uxth	r0, r3
 80024ce:	fbb4 f3f9 	udiv	r3, r4, r9
 80024d2:	fb09 4413 	mls	r4, r9, r3, r4
 80024d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80024da:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80024de:	45a6      	cmp	lr, r4
 80024e0:	d908      	bls.n	80024f4 <__udivmoddi4+0x1dc>
 80024e2:	eb1c 0404 	adds.w	r4, ip, r4
 80024e6:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80024ea:	d26a      	bcs.n	80025c2 <__udivmoddi4+0x2aa>
 80024ec:	45a6      	cmp	lr, r4
 80024ee:	d968      	bls.n	80025c2 <__udivmoddi4+0x2aa>
 80024f0:	3b02      	subs	r3, #2
 80024f2:	4464      	add	r4, ip
 80024f4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80024f8:	fba0 9302 	umull	r9, r3, r0, r2
 80024fc:	eba4 040e 	sub.w	r4, r4, lr
 8002500:	429c      	cmp	r4, r3
 8002502:	46c8      	mov	r8, r9
 8002504:	469e      	mov	lr, r3
 8002506:	d354      	bcc.n	80025b2 <__udivmoddi4+0x29a>
 8002508:	d051      	beq.n	80025ae <__udivmoddi4+0x296>
 800250a:	2e00      	cmp	r6, #0
 800250c:	d067      	beq.n	80025de <__udivmoddi4+0x2c6>
 800250e:	ebb5 0308 	subs.w	r3, r5, r8
 8002512:	eb64 040e 	sbc.w	r4, r4, lr
 8002516:	40cb      	lsrs	r3, r1
 8002518:	fa04 f707 	lsl.w	r7, r4, r7
 800251c:	431f      	orrs	r7, r3
 800251e:	40cc      	lsrs	r4, r1
 8002520:	e9c6 7400 	strd	r7, r4, [r6]
 8002524:	2100      	movs	r1, #0
 8002526:	e74a      	b.n	80023be <__udivmoddi4+0xa6>
 8002528:	fa02 fc03 	lsl.w	ip, r2, r3
 800252c:	f1c3 0020 	rsb	r0, r3, #32
 8002530:	40c1      	lsrs	r1, r0
 8002532:	409d      	lsls	r5, r3
 8002534:	fa24 f000 	lsr.w	r0, r4, r0
 8002538:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800253c:	4328      	orrs	r0, r5
 800253e:	fbb1 f5f7 	udiv	r5, r1, r7
 8002542:	fb07 1115 	mls	r1, r7, r5, r1
 8002546:	fa1f fe8c 	uxth.w	lr, ip
 800254a:	0c02      	lsrs	r2, r0, #16
 800254c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002550:	fb05 f10e 	mul.w	r1, r5, lr
 8002554:	4291      	cmp	r1, r2
 8002556:	fa04 f403 	lsl.w	r4, r4, r3
 800255a:	d908      	bls.n	800256e <__udivmoddi4+0x256>
 800255c:	eb1c 0202 	adds.w	r2, ip, r2
 8002560:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8002564:	d22f      	bcs.n	80025c6 <__udivmoddi4+0x2ae>
 8002566:	4291      	cmp	r1, r2
 8002568:	d92d      	bls.n	80025c6 <__udivmoddi4+0x2ae>
 800256a:	3d02      	subs	r5, #2
 800256c:	4462      	add	r2, ip
 800256e:	1a52      	subs	r2, r2, r1
 8002570:	fbb2 f1f7 	udiv	r1, r2, r7
 8002574:	fb07 2211 	mls	r2, r7, r1, r2
 8002578:	b280      	uxth	r0, r0
 800257a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800257e:	fb01 f20e 	mul.w	r2, r1, lr
 8002582:	4282      	cmp	r2, r0
 8002584:	d908      	bls.n	8002598 <__udivmoddi4+0x280>
 8002586:	eb1c 0000 	adds.w	r0, ip, r0
 800258a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800258e:	d216      	bcs.n	80025be <__udivmoddi4+0x2a6>
 8002590:	4282      	cmp	r2, r0
 8002592:	d914      	bls.n	80025be <__udivmoddi4+0x2a6>
 8002594:	3902      	subs	r1, #2
 8002596:	4460      	add	r0, ip
 8002598:	1a80      	subs	r0, r0, r2
 800259a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800259e:	e73a      	b.n	8002416 <__udivmoddi4+0xfe>
 80025a0:	4631      	mov	r1, r6
 80025a2:	4630      	mov	r0, r6
 80025a4:	e70b      	b.n	80023be <__udivmoddi4+0xa6>
 80025a6:	4671      	mov	r1, lr
 80025a8:	e6e9      	b.n	800237e <__udivmoddi4+0x66>
 80025aa:	4610      	mov	r0, r2
 80025ac:	e6fe      	b.n	80023ac <__udivmoddi4+0x94>
 80025ae:	454d      	cmp	r5, r9
 80025b0:	d2ab      	bcs.n	800250a <__udivmoddi4+0x1f2>
 80025b2:	ebb9 0802 	subs.w	r8, r9, r2
 80025b6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80025ba:	3801      	subs	r0, #1
 80025bc:	e7a5      	b.n	800250a <__udivmoddi4+0x1f2>
 80025be:	4641      	mov	r1, r8
 80025c0:	e7ea      	b.n	8002598 <__udivmoddi4+0x280>
 80025c2:	4603      	mov	r3, r0
 80025c4:	e796      	b.n	80024f4 <__udivmoddi4+0x1dc>
 80025c6:	4645      	mov	r5, r8
 80025c8:	e7d1      	b.n	800256e <__udivmoddi4+0x256>
 80025ca:	46d0      	mov	r8, sl
 80025cc:	e77d      	b.n	80024ca <__udivmoddi4+0x1b2>
 80025ce:	4464      	add	r4, ip
 80025d0:	3802      	subs	r0, #2
 80025d2:	e749      	b.n	8002468 <__udivmoddi4+0x150>
 80025d4:	3d02      	subs	r5, #2
 80025d6:	4462      	add	r2, ip
 80025d8:	e731      	b.n	800243e <__udivmoddi4+0x126>
 80025da:	4608      	mov	r0, r1
 80025dc:	e70a      	b.n	80023f4 <__udivmoddi4+0xdc>
 80025de:	4631      	mov	r1, r6
 80025e0:	e6ed      	b.n	80023be <__udivmoddi4+0xa6>
 80025e2:	bf00      	nop

080025e4 <DMXReceiver::Run(short&)>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <DMXReceiver::Run(short&)+0x8c>)
 80025e8:	4607      	mov	r7, r0
 80025ea:	781e      	ldrb	r6, [r3, #0]
 80025ec:	460d      	mov	r5, r1
 80025ee:	b11e      	cbz	r6, 80025f8 <DMXReceiver::Run(short&)+0x14>
 80025f0:	2400      	movs	r4, #0
 80025f2:	802c      	strh	r4, [r5, #0]
 80025f4:	4620      	mov	r0, r4
 80025f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f8:	4631      	mov	r1, r6
 80025fa:	f001 fdbd 	bl	8004178 <Dmx::GetUpdatesPerSecond(unsigned int)>
 80025fe:	4604      	mov	r4, r0
 8002600:	b998      	cbnz	r0, 800262a <DMXReceiver::Run(short&)+0x46>
 8002602:	4e1c      	ldr	r6, [pc, #112]	; (8002674 <DMXReceiver::Run(short&)+0x90>)
 8002604:	7833      	ldrb	r3, [r6, #0]
 8002606:	b15b      	cbz	r3, 8002620 <DMXReceiver::Run(short&)+0x3c>
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <DMXReceiver::Run(short&)+0x94>)
 800260a:	4621      	mov	r1, r4
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	6803      	ldr	r3, [r0, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4798      	blx	r3
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <DMXReceiver::Run(short&)+0x98>)
 8002616:	2102      	movs	r1, #2
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	7034      	strb	r4, [r6, #0]
 800261c:	f005 fefc 	bl	8008418 <Hardware::SetMode(hardware::ledblink::Mode)>
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	2400      	movs	r4, #0
 8002626:	802b      	strh	r3, [r5, #0]
 8002628:	e7e4      	b.n	80025f4 <DMXReceiver::Run(short&)+0x10>
 800262a:	4631      	mov	r1, r6
 800262c:	4638      	mov	r0, r7
 800262e:	f001 fd8f 	bl	8004150 <Dmx::GetDmxAvailable(unsigned int)>
 8002632:	2800      	cmp	r0, #0
 8002634:	d0dc      	beq.n	80025f0 <DMXReceiver::Run(short&)+0xc>
 8002636:	4f10      	ldr	r7, [pc, #64]	; (8002678 <DMXReceiver::Run(short&)+0x94>)
 8002638:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800263c:	1c44      	adds	r4, r0, #1
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	802b      	strh	r3, [r5, #0]
 8002642:	6802      	ldr	r2, [r0, #0]
 8002644:	4631      	mov	r1, r6
 8002646:	6915      	ldr	r5, [r2, #16]
 8002648:	b29b      	uxth	r3, r3
 800264a:	4622      	mov	r2, r4
 800264c:	47a8      	blx	r5
 800264e:	4d09      	ldr	r5, [pc, #36]	; (8002674 <DMXReceiver::Run(short&)+0x90>)
 8002650:	7829      	ldrb	r1, [r5, #0]
 8002652:	2900      	cmp	r1, #0
 8002654:	d1ce      	bne.n	80025f4 <DMXReceiver::Run(short&)+0x10>
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	6803      	ldr	r3, [r0, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4798      	blx	r3
 800265e:	2301      	movs	r3, #1
 8002660:	702b      	strb	r3, [r5, #0]
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <DMXReceiver::Run(short&)+0x98>)
 8002664:	2103      	movs	r1, #3
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f005 fed6 	bl	8008418 <Hardware::SetMode(hardware::ledblink::Mode)>
 800266c:	e7c2      	b.n	80025f4 <DMXReceiver::Run(short&)+0x10>
 800266e:	bf00      	nop
 8002670:	200001a4 	andcs	r0, r0, r4, lsr #3
 8002674:	2000019c 	mulcs	r0, ip, r1
 8002678:	200001a0 	andcs	r0, r0, r0, lsr #3
 800267c:	20001770 	andcs	r1, r0, r0, ror r7

08002680 <RDMResponder::HandleResponse(unsigned char*)>:
 8002680:	780a      	ldrb	r2, [r1, #0]
 8002682:	b510      	push	{r4, lr}
 8002684:	2acc      	cmp	r2, #204	; 0xcc
 8002686:	d107      	bne.n	8002698 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002688:	788c      	ldrb	r4, [r1, #2]
 800268a:	2000      	movs	r0, #0
 800268c:	3402      	adds	r4, #2
 800268e:	4622      	mov	r2, r4
 8002690:	f001 fdd2 	bl	8004238 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8002694:	4620      	mov	r0, r4
 8002696:	bd10      	pop	{r4, pc}
 8002698:	2afe      	cmp	r2, #254	; 0xfe
 800269a:	d105      	bne.n	80026a8 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 800269c:	2218      	movs	r2, #24
 800269e:	2000      	movs	r0, #0
 80026a0:	f001 fddc 	bl	800425c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 80026a4:	2418      	movs	r4, #24
 80026a6:	e7f5      	b.n	8002694 <RDMResponder::HandleResponse(unsigned char*)+0x14>
 80026a8:	f06f 0402 	mvn.w	r4, #2
 80026ac:	e7f2      	b.n	8002694 <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

080026b0 <RDMResponder::Run()>:
 80026b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	f10d 0106 	add.w	r1, sp, #6
 80026b8:	30cc      	adds	r0, #204	; 0xcc
 80026ba:	f7ff ff93 	bl	80025e4 <DMXReceiver::Run(short&)>
 80026be:	4e1f      	ldr	r6, [pc, #124]	; (800273c <RDMResponder::Run()+0x8c>)
 80026c0:	4601      	mov	r1, r0
 80026c2:	6830      	ldr	r0, [r6, #0]
 80026c4:	8883      	ldrh	r3, [r0, #4]
 80026c6:	b153      	cbz	r3, 80026de <RDMResponder::Run()+0x2e>
 80026c8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80026cc:	1c53      	adds	r3, r2, #1
 80026ce:	d120      	bne.n	8002712 <RDMResponder::Run()+0x62>
 80026d0:	4d1b      	ldr	r5, [pc, #108]	; (8002740 <RDMResponder::Run()+0x90>)
 80026d2:	782b      	ldrb	r3, [r5, #0]
 80026d4:	b11b      	cbz	r3, 80026de <RDMResponder::Run()+0x2e>
 80026d6:	f001 f8a6 	bl	8003826 <RDMSubDevices::Stop()>
 80026da:	2300      	movs	r3, #0
 80026dc:	702b      	strb	r3, [r5, #0]
 80026de:	2000      	movs	r0, #0
 80026e0:	f001 f954 	bl	800398c <Rdm::Receive(unsigned int)>
 80026e4:	b198      	cbz	r0, 800270e <RDMResponder::Run()+0x5e>
 80026e6:	7803      	ldrb	r3, [r0, #0]
 80026e8:	2bcc      	cmp	r3, #204	; 0xcc
 80026ea:	d120      	bne.n	800272e <RDMResponder::Run()+0x7e>
 80026ec:	7d03      	ldrb	r3, [r0, #20]
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d003      	beq.n	80026fa <RDMResponder::Run()+0x4a>
 80026f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d11c      	bne.n	8002734 <RDMResponder::Run()+0x84>
 80026fa:	1c41      	adds	r1, r0, #1
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <RDMResponder::Run()+0x94>)
 80026fe:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8002702:	f002 ff23 	bl	800554c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 8002706:	4620      	mov	r0, r4
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <RDMResponder::Run()+0x94>)
 800270a:	f7ff ffb9 	bl	8002680 <RDMResponder::HandleResponse(unsigned char*)>
 800270e:	b002      	add	sp, #8
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	2900      	cmp	r1, #0
 8002714:	d0e3      	beq.n	80026de <RDMResponder::Run()+0x2e>
 8002716:	4d0a      	ldr	r5, [pc, #40]	; (8002740 <RDMResponder::Run()+0x90>)
 8002718:	b292      	uxth	r2, r2
 800271a:	f001 f894 	bl	8003846 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 800271e:	782b      	ldrb	r3, [r5, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1dc      	bne.n	80026de <RDMResponder::Run()+0x2e>
 8002724:	6830      	ldr	r0, [r6, #0]
 8002726:	f001 f86e 	bl	8003806 <RDMSubDevices::Start()>
 800272a:	2301      	movs	r3, #1
 800272c:	e7d6      	b.n	80026dc <RDMResponder::Run()+0x2c>
 800272e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002732:	e7ec      	b.n	800270e <RDMResponder::Run()+0x5e>
 8002734:	f06f 0001 	mvn.w	r0, #1
 8002738:	e7e9      	b.n	800270e <RDMResponder::Run()+0x5e>
 800273a:	bf00      	nop
 800273c:	20000198 	mulcs	r0, r8, r1
 8002740:	2000018d 	andcs	r0, r0, sp, lsl #3
 8002744:	2000008c 	andcs	r0, r0, ip, lsl #1

08002748 <CpuTemperature::Initialize()>:
 8002748:	2001      	movs	r0, #1
 800274a:	4770      	bx	lr

0800274c <CpuTemperature::~CpuTemperature()>:
 800274c:	4770      	bx	lr

0800274e <CpuTemperature::GetValue()>:
 800274e:	b508      	push	{r3, lr}
 8002750:	f007 f8a6 	bl	80098a0 <gd32_adc_gettemp()>
 8002754:	f7fd fed0 	bl	80004f8 <__aeabi_f2iz>
 8002758:	b200      	sxth	r0, r0
 800275a:	bd08      	pop	{r3, pc}

0800275c <CpuTemperature::~CpuTemperature()>:
 800275c:	b510      	push	{r4, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	f006 f8bd 	bl	80088de <operator delete(void*)>
 8002764:	4620      	mov	r0, r4
 8002766:	bd10      	pop	{r4, pc}

08002768 <RDMSensors::~RDMSensors()>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2500      	movs	r5, #0
 800276c:	4604      	mov	r4, r0
 800276e:	462e      	mov	r6, r5
 8002770:	7923      	ldrb	r3, [r4, #4]
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	42ab      	cmp	r3, r5
 8002776:	d804      	bhi.n	8002782 <RDMSensors::~RDMSensors()+0x1a>
 8002778:	b108      	cbz	r0, 800277e <RDMSensors::~RDMSensors()+0x16>
 800277a:	f006 f8b2 	bl	80088e2 <operator delete[](void*)>
 800277e:	4620      	mov	r0, r4
 8002780:	bd70      	pop	{r4, r5, r6, pc}
 8002782:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002786:	b128      	cbz	r0, 8002794 <RDMSensors::~RDMSensors()+0x2c>
 8002788:	6803      	ldr	r3, [r0, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4798      	blx	r3
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8002794:	3501      	adds	r5, #1
 8002796:	e7eb      	b.n	8002770 <RDMSensors::~RDMSensors()+0x8>

08002798 <RDMSensors::GetDefintion(unsigned char)>:
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800279e:	3006      	adds	r0, #6
 80027a0:	4770      	bx	lr

080027a2 <RDMSensors::GetValues(unsigned char)>:
 80027a2:	6803      	ldr	r3, [r0, #0]
 80027a4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027a8:	f000 bb8a 	b.w	8002ec0 <RDMSensor::GetValues()>

080027ac <RDMSensors::SetValues(unsigned char)>:
 80027ac:	29ff      	cmp	r1, #255	; 0xff
 80027ae:	b538      	push	{r3, r4, r5, lr}
 80027b0:	4604      	mov	r4, r0
 80027b2:	d010      	beq.n	80027d6 <RDMSensors::SetValues(unsigned char)+0x2a>
 80027b4:	6803      	ldr	r3, [r0, #0]
 80027b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027be:	f000 bb94 	b.w	8002eea <RDMSensor::SetValues()>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80027c8:	f000 fb8f 	bl	8002eea <RDMSensor::SetValues()>
 80027cc:	3501      	adds	r5, #1
 80027ce:	7923      	ldrb	r3, [r4, #4]
 80027d0:	42ab      	cmp	r3, r5
 80027d2:	d8f6      	bhi.n	80027c2 <RDMSensors::SetValues(unsigned char)+0x16>
 80027d4:	bd38      	pop	{r3, r4, r5, pc}
 80027d6:	2500      	movs	r5, #0
 80027d8:	e7f9      	b.n	80027ce <RDMSensors::SetValues(unsigned char)+0x22>

080027da <RDMSensors::SetRecord(unsigned char)>:
 80027da:	29ff      	cmp	r1, #255	; 0xff
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4604      	mov	r4, r0
 80027e0:	d010      	beq.n	8002804 <RDMSensors::SetRecord(unsigned char)+0x2a>
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ec:	f000 bb87 	b.w	8002efe <RDMSensor::Record()>
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80027f6:	f000 fb82 	bl	8002efe <RDMSensor::Record()>
 80027fa:	3501      	adds	r5, #1
 80027fc:	7923      	ldrb	r3, [r4, #4]
 80027fe:	42ab      	cmp	r3, r5
 8002800:	d8f6      	bhi.n	80027f0 <RDMSensors::SetRecord(unsigned char)+0x16>
 8002802:	bd38      	pop	{r3, r4, r5, pc}
 8002804:	2500      	movs	r5, #0
 8002806:	e7f9      	b.n	80027fc <RDMSensors::SetRecord(unsigned char)+0x22>

08002808 <RDMSensors::Add(RDMSensor*)>:
 8002808:	4603      	mov	r3, r0
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	b510      	push	{r4, lr}
 800280e:	b148      	cbz	r0, 8002824 <RDMSensors::Add(RDMSensor*)+0x1c>
 8002810:	791a      	ldrb	r2, [r3, #4]
 8002812:	2a10      	cmp	r2, #16
 8002814:	bf1b      	ittet	ne
 8002816:	1c54      	addne	r4, r2, #1
 8002818:	711c      	strbne	r4, [r3, #4]
 800281a:	2000      	moveq	r0, #0
 800281c:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
 8002820:	bf18      	it	ne
 8002822:	2001      	movne	r0, #1
 8002824:	bd10      	pop	{r4, pc}
	...

08002828 <RDMSensors::RDMSensors()>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	2600      	movs	r6, #0
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <RDMSensors::RDMSensors()+0x4c>)
 800282e:	4604      	mov	r4, r0
 8002830:	6018      	str	r0, [r3, #0]
 8002832:	6006      	str	r6, [r0, #0]
 8002834:	7106      	strb	r6, [r0, #4]
 8002836:	2040      	movs	r0, #64	; 0x40
 8002838:	f006 f857 	bl	80088ea <operator new[](unsigned int)>
 800283c:	6020      	str	r0, [r4, #0]
 800283e:	2040      	movs	r0, #64	; 0x40
 8002840:	f006 f851 	bl	80088e6 <operator new(unsigned int)>
 8002844:	4605      	mov	r5, r0
 8002846:	7921      	ldrb	r1, [r4, #4]
 8002848:	f000 fb1a 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RDMSensors::RDMSensors()+0x50>)
 800284e:	4628      	mov	r0, r5
 8002850:	602b      	str	r3, [r5, #0]
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <RDMSensors::RDMSensors()+0x54>)
 8002854:	490a      	ldr	r1, [pc, #40]	; (8002880 <RDMSensors::RDMSensors()+0x58>)
 8002856:	60ab      	str	r3, [r5, #8]
 8002858:	3354      	adds	r3, #84	; 0x54
 800285a:	60eb      	str	r3, [r5, #12]
 800285c:	2355      	movs	r3, #85	; 0x55
 800285e:	71ee      	strb	r6, [r5, #7]
 8002860:	822b      	strh	r3, [r5, #16]
 8002862:	f000 fb1f 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002866:	4629      	mov	r1, r5
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff ffcd 	bl	8002808 <RDMSensors::Add(RDMSensor*)>
 800286e:	4620      	mov	r0, r4
 8002870:	bd70      	pop	{r4, r5, r6, pc}
 8002872:	bf00      	nop
 8002874:	20000194 	mulcs	r0, r4, r1
 8002878:	0800a5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, sp, pc}
 800287c:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002880:	0800a5c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, sp, pc}

08002884 <RDMSensorBH170::Initialize()>:
 8002884:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002888:	4770      	bx	lr

0800288a <RDMSensorMCP9808::Initialize()>:
 800288a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800288e:	4770      	bx	lr

08002890 <RDMSensorHTU21DHumidity::Initialize()>:
 8002890:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002894:	4770      	bx	lr

08002896 <RDMSensorHTU21DTemperature::Initialize()>:
 8002896:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800289a:	4770      	bx	lr

0800289c <RDMSensorINA219Current::Initialize()>:
 800289c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028a0:	4770      	bx	lr

080028a2 <RDMSensorINA219Power::Initialize()>:
 80028a2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028a6:	4770      	bx	lr

080028a8 <RDMSensorINA219Voltage::Initialize()>:
 80028a8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028ac:	4770      	bx	lr

080028ae <RDMSensorSI7021Humidity::Initialize()>:
 80028ae:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028b2:	4770      	bx	lr

080028b4 <RDMSensorSI7021Temperature::Initialize()>:
 80028b4:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028b8:	4770      	bx	lr

080028ba <RDMSensorThermistor::Initialize()>:
 80028ba:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80028be:	4770      	bx	lr

080028c0 <RDMSensorThermistor::GetValue()>:
 80028c0:	b508      	push	{r3, lr}
 80028c2:	3040      	adds	r0, #64	; 0x40
 80028c4:	7e01      	ldrb	r1, [r0, #24]
 80028c6:	f000 fe11 	bl	80034ec <MCP3424::GetVoltage(unsigned char)>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	a112      	add	r1, pc, #72	; (adr r1, 8002918 <RDMSensorThermistor::GetValue()+0x58>)
 80028d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028d4:	f7fe f936 	bl	8000b44 <__aeabi_ddiv>
 80028d8:	f7fe fa1c 	bl	8000d14 <__aeabi_d2uiz>
 80028dc:	f5a0 4083 	sub.w	r0, r0, #16768	; 0x4180
 80028e0:	3820      	subs	r0, #32
 80028e2:	f7fd fd3b 	bl	800035c <__aeabi_ui2f>
 80028e6:	490e      	ldr	r1, [pc, #56]	; (8002920 <RDMSensorThermistor::GetValue()+0x60>)
 80028e8:	f7fe fae8 	bl	8000ebc <__aeabi_fdiv>
 80028ec:	f006 f83c 	bl	8008968 <logf>
 80028f0:	490c      	ldr	r1, [pc, #48]	; (8002924 <RDMSensorThermistor::GetValue()+0x64>)
 80028f2:	f7fe fae3 	bl	8000ebc <__aeabi_fdiv>
 80028f6:	490c      	ldr	r1, [pc, #48]	; (8002928 <RDMSensorThermistor::GetValue()+0x68>)
 80028f8:	f7fd fc80 	bl	80001fc <__addsf3>
 80028fc:	4601      	mov	r1, r0
 80028fe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002902:	f7fe fadb 	bl	8000ebc <__aeabi_fdiv>
 8002906:	4909      	ldr	r1, [pc, #36]	; (800292c <RDMSensorThermistor::GetValue()+0x6c>)
 8002908:	f7fd fc76 	bl	80001f8 <__aeabi_fsub>
 800290c:	f7fd fdf4 	bl	80004f8 <__aeabi_f2iz>
 8002910:	b200      	sxth	r0, r0
 8002912:	bd08      	pop	{r3, pc}
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	andeq	r0, r0, r0
 800291c:	40e09a00 	rscmi	r9, r0, r0, lsl #20
 8002920:	461c4000 	ldrmi	r4, [ip], -r0
 8002924:	4576e000 	ldrbmi	lr, [r6, #-0]!
 8002928:	3b5bcf0f 	blcc	96f656c <__exidx_end+0x16ea16c>
 800292c:	43889333 	orrmi	r9, r8, #-872415232	; 0xcc000000

08002930 <RDMSensorSI7021Temperature::GetValue()>:
 8002930:	b508      	push	{r3, lr}
 8002932:	3040      	adds	r0, #64	; 0x40
 8002934:	f000 fec2 	bl	80036bc <sensor::SI7021::GetTemperature()>
 8002938:	f7fd fdde 	bl	80004f8 <__aeabi_f2iz>
 800293c:	b200      	sxth	r0, r0
 800293e:	bd08      	pop	{r3, pc}

08002940 <RDMSensorSI7021Humidity::GetValue()>:
 8002940:	b508      	push	{r3, lr}
 8002942:	3040      	adds	r0, #64	; 0x40
 8002944:	f000 fed0 	bl	80036e8 <sensor::SI7021::GetHumidity()>
 8002948:	f7fd fdd6 	bl	80004f8 <__aeabi_f2iz>
 800294c:	b200      	sxth	r0, r0
 800294e:	bd08      	pop	{r3, pc}

08002950 <RDMSensorINA219Voltage::GetValue()>:
 8002950:	b508      	push	{r3, lr}
 8002952:	3040      	adds	r0, #64	; 0x40
 8002954:	f000 fcea 	bl	800332c <sensor::INA219::GetBusVoltage()>
 8002958:	4903      	ldr	r1, [pc, #12]	; (8002968 <RDMSensorINA219Voltage::GetValue()+0x18>)
 800295a:	f7fe f9fb 	bl	8000d54 <__aeabi_fmul>
 800295e:	f7fd fdcb 	bl	80004f8 <__aeabi_f2iz>
 8002962:	b200      	sxth	r0, r0
 8002964:	bd08      	pop	{r3, pc}
 8002966:	bf00      	nop
 8002968:	447a0000 	ldrbtmi	r0, [sl], #-0

0800296c <RDMSensorINA219Power::GetValue()>:
 800296c:	b508      	push	{r3, lr}
 800296e:	3040      	adds	r0, #64	; 0x40
 8002970:	f000 fce8 	bl	8003344 <sensor::INA219::GetBusPower()>
 8002974:	f7fd fdc0 	bl	80004f8 <__aeabi_f2iz>
 8002978:	b200      	sxth	r0, r0
 800297a:	bd08      	pop	{r3, pc}

0800297c <RDMSensorINA219Current::GetValue()>:
 800297c:	b508      	push	{r3, lr}
 800297e:	3040      	adds	r0, #64	; 0x40
 8002980:	f000 fcbc 	bl	80032fc <sensor::INA219::GetShuntCurrent()>
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <RDMSensorINA219Current::GetValue()+0x18>)
 8002986:	f7fe f9e5 	bl	8000d54 <__aeabi_fmul>
 800298a:	f7fd fdb5 	bl	80004f8 <__aeabi_f2iz>
 800298e:	b200      	sxth	r0, r0
 8002990:	bd08      	pop	{r3, pc}
 8002992:	bf00      	nop
 8002994:	447a0000 	ldrbtmi	r0, [sl], #-0

08002998 <RDMSensorHTU21DTemperature::GetValue()>:
 8002998:	b508      	push	{r3, lr}
 800299a:	3040      	adds	r0, #64	; 0x40
 800299c:	f000 fb8a 	bl	80030b4 <sensor::HTU21D::GetTemperature()>
 80029a0:	f7fd fdaa 	bl	80004f8 <__aeabi_f2iz>
 80029a4:	b200      	sxth	r0, r0
 80029a6:	bd08      	pop	{r3, pc}

080029a8 <RDMSensorHTU21DHumidity::GetValue()>:
 80029a8:	b508      	push	{r3, lr}
 80029aa:	3040      	adds	r0, #64	; 0x40
 80029ac:	f000 fb98 	bl	80030e0 <sensor::HTU21D::GetHumidity()>
 80029b0:	f7fd fda2 	bl	80004f8 <__aeabi_f2iz>
 80029b4:	b200      	sxth	r0, r0
 80029b6:	bd08      	pop	{r3, pc}

080029b8 <RDMSensorMCP9808::GetValue()>:
 80029b8:	b508      	push	{r3, lr}
 80029ba:	3040      	adds	r0, #64	; 0x40
 80029bc:	f000 fe04 	bl	80035c8 <sensor::MCP9808::Get()>
 80029c0:	f7fd fd9a 	bl	80004f8 <__aeabi_f2iz>
 80029c4:	b200      	sxth	r0, r0
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <RDMSensorBH170::GetValue()>:
 80029c8:	b508      	push	{r3, lr}
 80029ca:	3040      	adds	r0, #64	; 0x40
 80029cc:	f000 faf0 	bl	8002fb0 <sensor::BH170::Get()>
 80029d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80029d4:	bd08      	pop	{r3, pc}

080029d6 <RDMSensorThermistor::~RDMSensorThermistor()>:
 80029d6:	4770      	bx	lr

080029d8 <RDMSensorThermistor::~RDMSensorThermistor()>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f005 ff7f 	bl	80088de <operator delete(void*)>
 80029e0:	4620      	mov	r0, r4
 80029e2:	bd10      	pop	{r4, pc}

080029e4 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 80029e4:	4770      	bx	lr

080029e6 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 80029e6:	b510      	push	{r4, lr}
 80029e8:	4604      	mov	r4, r0
 80029ea:	f005 ff78 	bl	80088de <operator delete(void*)>
 80029ee:	4620      	mov	r0, r4
 80029f0:	bd10      	pop	{r4, pc}

080029f2 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 80029f2:	4770      	bx	lr

080029f4 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4604      	mov	r4, r0
 80029f8:	f005 ff71 	bl	80088de <operator delete(void*)>
 80029fc:	4620      	mov	r0, r4
 80029fe:	bd10      	pop	{r4, pc}

08002a00 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002a00:	4770      	bx	lr

08002a02 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002a02:	b510      	push	{r4, lr}
 8002a04:	4604      	mov	r4, r0
 8002a06:	f005 ff6a 	bl	80088de <operator delete(void*)>
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	bd10      	pop	{r4, pc}

08002a0e <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002a0e:	4770      	bx	lr

08002a10 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002a10:	b510      	push	{r4, lr}
 8002a12:	4604      	mov	r4, r0
 8002a14:	f005 ff63 	bl	80088de <operator delete(void*)>
 8002a18:	4620      	mov	r0, r4
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002a1c:	4770      	bx	lr

08002a1e <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	4604      	mov	r4, r0
 8002a22:	f005 ff5c 	bl	80088de <operator delete(void*)>
 8002a26:	4620      	mov	r0, r4
 8002a28:	bd10      	pop	{r4, pc}

08002a2a <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8002a2a:	4770      	bx	lr

08002a2c <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	f005 ff55 	bl	80088de <operator delete(void*)>
 8002a34:	4620      	mov	r0, r4
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8002a38:	4770      	bx	lr

08002a3a <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	f005 ff4e 	bl	80088de <operator delete(void*)>
 8002a42:	4620      	mov	r0, r4
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002a46:	4770      	bx	lr

08002a48 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	f005 ff47 	bl	80088de <operator delete(void*)>
 8002a50:	4620      	mov	r0, r4
 8002a52:	bd10      	pop	{r4, pc}

08002a54 <RDMSensorBH170::~RDMSensorBH170()>:
 8002a54:	4770      	bx	lr

08002a56 <RDMSensorBH170::~RDMSensorBH170()>:
 8002a56:	b510      	push	{r4, lr}
 8002a58:	4604      	mov	r4, r0
 8002a5a:	f005 ff40 	bl	80088de <operator delete(void*)>
 8002a5e:	4620      	mov	r0, r4
 8002a60:	bd10      	pop	{r4, pc}
	...

08002a64 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	4604      	mov	r4, r0
 8002a68:	4616      	mov	r6, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	f000 fa08 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002a70:	4631      	mov	r1, r6
 8002a72:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002a76:	f000 fca7 	bl	80033c8 <MCP3424::MCP3424(unsigned char)>
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x3c>)
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	6023      	str	r3, [r4, #0]
 8002a80:	2300      	movs	r3, #0
 8002a82:	71e3      	strb	r3, [r4, #7]
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x40>)
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)+0x44>)
 8002a88:	60a3      	str	r3, [r4, #8]
 8002a8a:	337c      	adds	r3, #124	; 0x7c
 8002a8c:	60e3      	str	r3, [r4, #12]
 8002a8e:	237d      	movs	r3, #125	; 0x7d
 8002a90:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8002a94:	8223      	strh	r3, [r4, #16]
 8002a96:	f000 fa05 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	bf00      	nop
 8002aa0:	0800a6c0 	stmdaeq	r0, {r6, r7, r9, sl, sp, pc}
 8002aa4:	ffc90001 			; <UNDEFINED> instruction: 0xffc90001
 8002aa8:	0800a6d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, sp, pc}

08002aac <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 8002aac:	b510      	push	{r4, lr}
 8002aae:	4604      	mov	r4, r0
 8002ab0:	2234      	movs	r2, #52	; 0x34
 8002ab2:	f840 1b04 	str.w	r1, [r0], #4
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f005 ffbf 	bl	8008a3a <memset>
 8002abc:	4620      	mov	r0, r4
 8002abe:	bd10      	pop	{r4, pc}

08002ac0 <RDMSensorsParams::Load()>:
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	6046      	str	r6, [r0, #4]
 8002ac8:	6800      	ldr	r0, [r0, #0]
 8002aca:	b140      	cbz	r0, 8002ade <RDMSensorsParams::Load()+0x1e>
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	1d25      	adds	r5, r4, #4
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	4798      	blx	r3
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	2b0f      	cmp	r3, #15
 8002ada:	d801      	bhi.n	8002ae0 <RDMSensorsParams::Load()+0x20>
 8002adc:	2001      	movs	r0, #1
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	2234      	movs	r2, #52	; 0x34
 8002ae2:	4631      	mov	r1, r6
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f005 ffa8 	bl	8008a3a <memset>
 8002aea:	e7f7      	b.n	8002adc <RDMSensorsParams::Load()+0x1c>

08002aec <RDMSensorsParams::Dump()>:
 8002aec:	4770      	bx	lr
	...

08002af0 <RDMSensorsParams::Add(RDMSensor*)>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	680b      	ldr	r3, [r1, #0]
 8002af4:	4608      	mov	r0, r1
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	460c      	mov	r4, r1
 8002afa:	4798      	blx	r3
 8002afc:	4605      	mov	r5, r0
 8002afe:	b130      	cbz	r0, 8002b0e <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 8002b02:	4621      	mov	r1, r4
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	f7ff fe7f 	bl	8002808 <RDMSensors::Add(RDMSensor*)>
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	bd38      	pop	{r3, r4, r5, pc}
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	4620      	mov	r0, r4
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4798      	blx	r3
 8002b16:	e7f8      	b.n	8002b0a <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8002b18:	20000194 	mulcs	r0, r4, r1

08002b1c <RDMSensorsParams::Set()>:
 8002b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b20:	4605      	mov	r5, r0
 8002b22:	4607      	mov	r7, r0
 8002b24:	f04f 0800 	mov.w	r8, #0
 8002b28:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8002e14 <RDMSensorsParams::Set()+0x2f8>
 8002b2c:	686b      	ldr	r3, [r5, #4]
 8002b2e:	4543      	cmp	r3, r8
 8002b30:	d801      	bhi.n	8002b36 <RDMSensorsParams::Set()+0x1a>
 8002b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b36:	4bb8      	ldr	r3, [pc, #736]	; (8002e18 <RDMSensorsParams::Set()+0x2fc>)
 8002b38:	7a7e      	ldrb	r6, [r7, #9]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	791c      	ldrb	r4, [r3, #4]
 8002b3e:	7a3b      	ldrb	r3, [r7, #8]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d868      	bhi.n	8002c16 <RDMSensorsParams::Set()+0xfa>
 8002b44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b48:	00250006 	eoreq	r0, r5, r6
 8002b4c:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8002b50:	012e00f0 	strdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
 8002b54:	204c      	movs	r0, #76	; 0x4c
 8002b56:	f005 fec6 	bl	80088e6 <operator new(unsigned int)>
 8002b5a:	4681      	mov	r9, r0
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f000 f98f 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002b62:	4631      	mov	r1, r6
 8002b64:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002b68:	f000 f9ee 	bl	8002f48 <sensor::BH170::BH170(unsigned char)>
 8002b6c:	4bab      	ldr	r3, [pc, #684]	; (8002e1c <RDMSensorsParams::Set()+0x300>)
 8002b6e:	241a      	movs	r4, #26
 8002b70:	f8c9 3000 	str.w	r3, [r9]
 8002b74:	2318      	movs	r3, #24
 8002b76:	f889 3007 	strb.w	r3, [r9, #7]
 8002b7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002b7e:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8002b82:	49a7      	ldr	r1, [pc, #668]	; (8002e20 <RDMSensorsParams::Set()+0x304>)
 8002b84:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002b88:	4648      	mov	r0, r9
 8002b8a:	f000 f98b 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002b8e:	4649      	mov	r1, r9
 8002b90:	e03e      	b.n	8002c10 <RDMSensorsParams::Set()+0xf4>
 8002b92:	204c      	movs	r0, #76	; 0x4c
 8002b94:	f005 fea7 	bl	80088e6 <operator new(unsigned int)>
 8002b98:	4682      	mov	sl, r0
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	f000 f970 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002ba0:	4631      	mov	r1, r6
 8002ba2:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002ba6:	f000 fa23 	bl	8002ff0 <sensor::HTU21D::HTU21D(unsigned char)>
 8002baa:	4a9e      	ldr	r2, [pc, #632]	; (8002e24 <RDMSensorsParams::Set()+0x308>)
 8002bac:	f04f 0900 	mov.w	r9, #0
 8002bb0:	f8ca 2000 	str.w	r2, [sl]
 8002bb4:	221f      	movs	r2, #31
 8002bb6:	f88a 2007 	strb.w	r2, [sl, #7]
 8002bba:	2264      	movs	r2, #100	; 0x64
 8002bbc:	4650      	mov	r0, sl
 8002bbe:	499a      	ldr	r1, [pc, #616]	; (8002e28 <RDMSensorsParams::Set()+0x30c>)
 8002bc0:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002bc4:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002bc8:	f000 f96c 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002bcc:	4651      	mov	r1, sl
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f7ff ff8e 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002bd4:	b1f8      	cbz	r0, 8002c16 <RDMSensorsParams::Set()+0xfa>
 8002bd6:	204c      	movs	r0, #76	; 0x4c
 8002bd8:	f005 fe85 	bl	80088e6 <operator new(unsigned int)>
 8002bdc:	4682      	mov	sl, r0
 8002bde:	1c61      	adds	r1, r4, #1
 8002be0:	b2c9      	uxtb	r1, r1
 8002be2:	f000 f94d 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002be6:	4631      	mov	r1, r6
 8002be8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002bec:	f000 fa00 	bl	8002ff0 <sensor::HTU21D::HTU21D(unsigned char)>
 8002bf0:	4a8e      	ldr	r2, [pc, #568]	; (8002e2c <RDMSensorsParams::Set()+0x310>)
 8002bf2:	4b8f      	ldr	r3, [pc, #572]	; (8002e30 <RDMSensorsParams::Set()+0x314>)
 8002bf4:	f8ca 2000 	str.w	r2, [sl]
 8002bf8:	227d      	movs	r2, #125	; 0x7d
 8002bfa:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002bfe:	498d      	ldr	r1, [pc, #564]	; (8002e34 <RDMSensorsParams::Set()+0x318>)
 8002c00:	f88a 9007 	strb.w	r9, [sl, #7]
 8002c04:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002c08:	4650      	mov	r0, sl
 8002c0a:	f000 f94b 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002c0e:	4651      	mov	r1, sl
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7ff ff6d 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002c16:	f108 0801 	add.w	r8, r8, #1
 8002c1a:	3703      	adds	r7, #3
 8002c1c:	e786      	b.n	8002b2c <RDMSensorsParams::Set()+0x10>
 8002c1e:	2060      	movs	r0, #96	; 0x60
 8002c20:	f005 fe61 	bl	80088e6 <operator new(unsigned int)>
 8002c24:	4682      	mov	sl, r0
 8002c26:	4621      	mov	r1, r4
 8002c28:	f000 f92a 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002c2c:	4631      	mov	r1, r6
 8002c2e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002c32:	f000 fb23 	bl	800327c <sensor::INA219::INA219(unsigned char)>
 8002c36:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <RDMSensorsParams::Set()+0x31c>)
 8002c38:	f04f 0902 	mov.w	r9, #2
 8002c3c:	f8ca 2000 	str.w	r2, [sl]
 8002c40:	4a7e      	ldr	r2, [pc, #504]	; (8002e3c <RDMSensorsParams::Set()+0x320>)
 8002c42:	4650      	mov	r0, sl
 8002c44:	f8ca 2008 	str.w	r2, [sl, #8]
 8002c48:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002c4c:	f8ca 200c 	str.w	r2, [sl, #12]
 8002c50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c54:	497a      	ldr	r1, [pc, #488]	; (8002e40 <RDMSensorsParams::Set()+0x324>)
 8002c56:	f88a 9007 	strb.w	r9, [sl, #7]
 8002c5a:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002c5e:	f000 f921 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002c62:	4651      	mov	r1, sl
 8002c64:	4628      	mov	r0, r5
 8002c66:	f7ff ff43 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d0d3      	beq.n	8002c16 <RDMSensorsParams::Set()+0xfa>
 8002c6e:	2060      	movs	r0, #96	; 0x60
 8002c70:	f005 fe39 	bl	80088e6 <operator new(unsigned int)>
 8002c74:	4682      	mov	sl, r0
 8002c76:	1c61      	adds	r1, r4, #1
 8002c78:	b2c9      	uxtb	r1, r1
 8002c7a:	f000 f901 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002c7e:	4631      	mov	r1, r6
 8002c80:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002c84:	f000 fafa 	bl	800327c <sensor::INA219::INA219(unsigned char)>
 8002c88:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002c8c:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <RDMSensorsParams::Set()+0x328>)
 8002c8e:	4650      	mov	r0, sl
 8002c90:	f8ca 2000 	str.w	r2, [sl]
 8002c94:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <RDMSensorsParams::Set()+0x32c>)
 8002c96:	f88a 9007 	strb.w	r9, [sl, #7]
 8002c9a:	f8ca 2008 	str.w	r2, [sl, #8]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f8ca 200c 	str.w	r2, [sl, #12]
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	4969      	ldr	r1, [pc, #420]	; (8002e4c <RDMSensorsParams::Set()+0x330>)
 8002ca8:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002cac:	f000 f8fa 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f7ff ff1c 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002cb8:	2060      	movs	r0, #96	; 0x60
 8002cba:	f005 fe14 	bl	80088e6 <operator new(unsigned int)>
 8002cbe:	4682      	mov	sl, r0
 8002cc0:	eb04 0109 	add.w	r1, r4, r9
 8002cc4:	b2c9      	uxtb	r1, r1
 8002cc6:	f000 f8db 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002cca:	4631      	mov	r1, r6
 8002ccc:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002cd0:	f000 fad4 	bl	800327c <sensor::INA219::INA219(unsigned char)>
 8002cd4:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <RDMSensorsParams::Set()+0x334>)
 8002cd6:	485f      	ldr	r0, [pc, #380]	; (8002e54 <RDMSensorsParams::Set()+0x338>)
 8002cd8:	f8ca 2000 	str.w	r2, [sl]
 8002cdc:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <RDMSensorsParams::Set()+0x33c>)
 8002cde:	495f      	ldr	r1, [pc, #380]	; (8002e5c <RDMSensorsParams::Set()+0x340>)
 8002ce0:	e9ca 0202 	strd	r0, r2, [sl, #8]
 8002ce4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002ce8:	f88a 9007 	strb.w	r9, [sl, #7]
 8002cec:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002cf0:	e78a      	b.n	8002c08 <RDMSensorsParams::Set()+0xec>
 8002cf2:	204c      	movs	r0, #76	; 0x4c
 8002cf4:	f005 fdf7 	bl	80088e6 <operator new(unsigned int)>
 8002cf8:	4681      	mov	r9, r0
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	f000 f8c0 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002d00:	4631      	mov	r1, r6
 8002d02:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002d06:	f000 fc21 	bl	800354c <sensor::MCP9808::MCP9808(unsigned char)>
 8002d0a:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <RDMSensorsParams::Set()+0x344>)
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <RDMSensorsParams::Set()+0x348>)
 8002d0e:	f8c9 3000 	str.w	r3, [r9]
 8002d12:	2300      	movs	r3, #0
 8002d14:	f889 3007 	strb.w	r3, [r9, #7]
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <RDMSensorsParams::Set()+0x34c>)
 8002d1a:	4954      	ldr	r1, [pc, #336]	; (8002e6c <RDMSensorsParams::Set()+0x350>)
 8002d1c:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8002d20:	2328      	movs	r3, #40	; 0x28
 8002d22:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002d26:	e72f      	b.n	8002b88 <RDMSensorsParams::Set()+0x6c>
 8002d28:	204c      	movs	r0, #76	; 0x4c
 8002d2a:	f005 fddc 	bl	80088e6 <operator new(unsigned int)>
 8002d2e:	4682      	mov	sl, r0
 8002d30:	4621      	mov	r1, r4
 8002d32:	f000 f8a5 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002d36:	4631      	mov	r1, r6
 8002d38:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002d3c:	f000 fc5c 	bl	80035f8 <sensor::SI7021::SI7021(unsigned char)>
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <RDMSensorsParams::Set()+0x354>)
 8002d42:	f04f 0900 	mov.w	r9, #0
 8002d46:	f8ca 2000 	str.w	r2, [sl]
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	f88a 2007 	strb.w	r2, [sl, #7]
 8002d50:	2264      	movs	r2, #100	; 0x64
 8002d52:	4650      	mov	r0, sl
 8002d54:	4947      	ldr	r1, [pc, #284]	; (8002e74 <RDMSensorsParams::Set()+0x358>)
 8002d56:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002d5a:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002d5e:	f000 f8a1 	bl	8002ea4 <RDMSensor::SetDescription(char const*)>
 8002d62:	4651      	mov	r1, sl
 8002d64:	4628      	mov	r0, r5
 8002d66:	f7ff fec3 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	f43f af53 	beq.w	8002c16 <RDMSensorsParams::Set()+0xfa>
 8002d70:	204c      	movs	r0, #76	; 0x4c
 8002d72:	f005 fdb8 	bl	80088e6 <operator new(unsigned int)>
 8002d76:	4682      	mov	sl, r0
 8002d78:	1c61      	adds	r1, r4, #1
 8002d7a:	b2c9      	uxtb	r1, r1
 8002d7c:	f000 f880 	bl	8002e80 <RDMSensor::RDMSensor(unsigned char)>
 8002d80:	4631      	mov	r1, r6
 8002d82:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002d86:	f000 fc37 	bl	80035f8 <sensor::SI7021::SI7021(unsigned char)>
 8002d8a:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <RDMSensorsParams::Set()+0x35c>)
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <RDMSensorsParams::Set()+0x314>)
 8002d8e:	f8ca 2000 	str.w	r2, [sl]
 8002d92:	227d      	movs	r2, #125	; 0x7d
 8002d94:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002d98:	4938      	ldr	r1, [pc, #224]	; (8002e7c <RDMSensorsParams::Set()+0x360>)
 8002d9a:	f88a 9007 	strb.w	r9, [sl, #7]
 8002d9e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002da2:	e731      	b.n	8002c08 <RDMSensorsParams::Set()+0xec>
 8002da4:	2060      	movs	r0, #96	; 0x60
 8002da6:	f005 fd9e 	bl	80088e6 <operator new(unsigned int)>
 8002daa:	4681      	mov	r9, r0
 8002dac:	4621      	mov	r1, r4
 8002dae:	2300      	movs	r3, #0
 8002db0:	4632      	mov	r2, r6
 8002db2:	f7ff fe57 	bl	8002a64 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 8002db6:	4649      	mov	r1, r9
 8002db8:	4628      	mov	r0, r5
 8002dba:	f7ff fe99 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f43f af29 	beq.w	8002c16 <RDMSensorsParams::Set()+0xfa>
 8002dc4:	2060      	movs	r0, #96	; 0x60
 8002dc6:	f005 fd8e 	bl	80088e6 <operator new(unsigned int)>
 8002dca:	4681      	mov	r9, r0
 8002dcc:	1c61      	adds	r1, r4, #1
 8002dce:	4632      	mov	r2, r6
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	b2c9      	uxtb	r1, r1
 8002dd4:	f7ff fe46 	bl	8002a64 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 8002dd8:	4649      	mov	r1, r9
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f7ff fe88 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002de0:	2060      	movs	r0, #96	; 0x60
 8002de2:	f005 fd80 	bl	80088e6 <operator new(unsigned int)>
 8002de6:	4681      	mov	r9, r0
 8002de8:	1ca1      	adds	r1, r4, #2
 8002dea:	4632      	mov	r2, r6
 8002dec:	2302      	movs	r3, #2
 8002dee:	b2c9      	uxtb	r1, r1
 8002df0:	f7ff fe38 	bl	8002a64 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 8002df4:	4649      	mov	r1, r9
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7ff fe7a 	bl	8002af0 <RDMSensorsParams::Add(RDMSensor*)>
 8002dfc:	2060      	movs	r0, #96	; 0x60
 8002dfe:	f005 fd72 	bl	80088e6 <operator new(unsigned int)>
 8002e02:	1ce1      	adds	r1, r4, #3
 8002e04:	2303      	movs	r3, #3
 8002e06:	4632      	mov	r2, r6
 8002e08:	b2c9      	uxtb	r1, r1
 8002e0a:	4681      	mov	r9, r0
 8002e0c:	f7ff fe2a 	bl	8002a64 <RDMSensorThermistor::RDMSensorThermistor(unsigned char, unsigned char, unsigned char)>
 8002e10:	e6bd      	b.n	8002b8e <RDMSensorsParams::Set()+0x72>
 8002e12:	bf00      	nop
 8002e14:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d
 8002e18:	20000194 	mulcs	r0, r4, r1
 8002e1c:	0800a5e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, sp, pc}
 8002e20:	0800a6e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, sp, pc}
 8002e24:	0800a618 	stmdaeq	r0, {r3, r4, r9, sl, sp, pc}
 8002e28:	0800a706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp, pc}
 8002e2c:	0800a630 	stmdaeq	r0, {r4, r5, r9, sl, sp, pc}
 8002e30:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002e34:	0800a6f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, sp, pc}
 8002e38:	0800a648 	stmdaeq	r0, {r3, r6, r9, sl, sp, pc}
 8002e3c:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002e40:	0800a71e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, sp, pc}
 8002e44:	0800a660 	stmdaeq	r0, {r5, r6, r9, sl, sp, pc}
 8002e48:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002e4c:	0800a718 	stmdaeq	r0, {r3, r4, r8, r9, sl, sp, pc}
 8002e50:	0800a678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, sp, pc}
 8002e54:	83000305 	movwhi	r0, #773	; 0x305
 8002e58:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002e5c:	0800a726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, sp, pc}
 8002e60:	0800a600 	stmdaeq	r0, {r9, sl, sp, pc}
 8002e64:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002e68:	00120064 	andseq	r0, r2, r4, rrx
 8002e6c:	0800a754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, sp, pc}
 8002e70:	0800a690 	stmdaeq	r0, {r4, r7, r9, sl, sp, pc}
 8002e74:	0800a742 	stmdaeq	r0, {r1, r6, r8, r9, sl, sp, pc}
 8002e78:	0800a6a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, sp, pc}
 8002e7c:	0800a72e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, sp, pc}

08002e80 <RDMSensor::RDMSensor(unsigned char)>:
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002e82:	7101      	strb	r1, [r0, #4]
 8002e84:	6002      	str	r2, [r0, #0]
 8002e86:	2203      	movs	r2, #3
 8002e88:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002e8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e90:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e96:	7181      	strb	r1, [r0, #6]
 8002e98:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002e9c:	8702      	strh	r2, [r0, #56]	; 0x38
 8002e9e:	4770      	bx	lr
 8002ea0:	0800a770 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, sp, pc}

08002ea4 <RDMSensor::SetDescription(char const*)>:
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	f100 0411 	add.w	r4, r0, #17
 8002eac:	5cca      	ldrb	r2, [r1, r3]
 8002eae:	b122      	cbz	r2, 8002eba <RDMSensor::SetDescription(char const*)+0x16>
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002eb8:	d1f8      	bne.n	8002eac <RDMSensor::SetDescription(char const*)+0x8>
 8002eba:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002ebe:	bd10      	pop	{r4, pc}

08002ec0 <RDMSensor::GetValues()>:
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	b510      	push	{r4, lr}
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4798      	blx	r3
 8002eca:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002ece:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002ed0:	4283      	cmp	r3, r0
 8002ed2:	bfa8      	it	ge
 8002ed4:	4603      	movge	r3, r0
 8002ed6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002ed8:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002edc:	4283      	cmp	r3, r0
 8002ede:	bfb8      	it	lt
 8002ee0:	4603      	movlt	r3, r0
 8002ee2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002ee6:	8723      	strh	r3, [r4, #56]	; 0x38
 8002ee8:	bd10      	pop	{r4, pc}

08002eea <RDMSensor::SetValues()>:
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	b510      	push	{r4, lr}
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4798      	blx	r3
 8002ef4:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002ef6:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002ef8:	8720      	strh	r0, [r4, #56]	; 0x38
 8002efa:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002efc:	bd10      	pop	{r4, pc}

08002efe <RDMSensor::Record()>:
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4798      	blx	r3
 8002f08:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002f0c:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002f0e:	4283      	cmp	r3, r0
 8002f10:	bfa8      	it	ge
 8002f12:	4603      	movge	r3, r0
 8002f14:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002f16:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002f1a:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002f1c:	4283      	cmp	r3, r0
 8002f1e:	bfb8      	it	lt
 8002f20:	4603      	movlt	r3, r0
 8002f22:	8723      	strh	r3, [r4, #56]	; 0x38
 8002f24:	bd10      	pop	{r4, pc}

08002f26 <HAL_I2C::Write(char)>:
 8002f26:	b513      	push	{r0, r1, r4, lr}
 8002f28:	4604      	mov	r4, r0
 8002f2a:	7800      	ldrb	r0, [r0, #0]
 8002f2c:	f88d 1007 	strb.w	r1, [sp, #7]
 8002f30:	f006 fd46 	bl	80099c0 <gd32_i2c_set_address>
 8002f34:	6860      	ldr	r0, [r4, #4]
 8002f36:	f006 fd3b 	bl	80099b0 <gd32_i2c_set_baudrate>
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	f10d 0007 	add.w	r0, sp, #7
 8002f40:	f006 fd44 	bl	80099cc <gd32_i2c_write>
 8002f44:	b002      	add	sp, #8
 8002f46:	bd10      	pop	{r4, pc}

08002f48 <sensor::BH170::BH170(unsigned char)>:
 8002f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f4a:	1e0c      	subs	r4, r1, #0
 8002f4c:	bf08      	it	eq
 8002f4e:	2423      	moveq	r4, #35	; 0x23
 8002f50:	2600      	movs	r6, #0
 8002f52:	4f16      	ldr	r7, [pc, #88]	; (8002fac <sensor::BH170::BH170(unsigned char)+0x64>)
 8002f54:	7004      	strb	r4, [r0, #0]
 8002f56:	6047      	str	r7, [r0, #4]
 8002f58:	7206      	strb	r6, [r0, #8]
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f006 fd2f 	bl	80099c0 <gd32_i2c_set_address>
 8002f62:	4638      	mov	r0, r7
 8002f64:	f006 fd24 	bl	80099b0 <gd32_i2c_set_baudrate>
 8002f68:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d902      	bls.n	8002f76 <sensor::BH170::BH170(unsigned char)+0x2e>
 8002f70:	3c50      	subs	r4, #80	; 0x50
 8002f72:	2c0f      	cmp	r4, #15
 8002f74:	d814      	bhi.n	8002fa0 <sensor::BH170::BH170(unsigned char)+0x58>
 8002f76:	2101      	movs	r1, #1
 8002f78:	f10d 0007 	add.w	r0, sp, #7
 8002f7c:	f006 fd8c 	bl	8009a98 <gd32_i2c_read>
 8002f80:	fab0 f080 	clz	r0, r0
 8002f84:	0940      	lsrs	r0, r0, #5
 8002f86:	7228      	strb	r0, [r5, #8]
 8002f88:	b138      	cbz	r0, 8002f9a <sensor::BH170::BH170(unsigned char)+0x52>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7ff ffca 	bl	8002f26 <HAL_I2C::Write(char)>
 8002f92:	2110      	movs	r1, #16
 8002f94:	4628      	mov	r0, r5
 8002f96:	f7ff ffc6 	bl	8002f26 <HAL_I2C::Write(char)>
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	b003      	add	sp, #12
 8002f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa0:	4631      	mov	r1, r6
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f006 fd12 	bl	80099cc <gd32_i2c_write>
 8002fa8:	e7ea      	b.n	8002f80 <sensor::BH170::BH170(unsigned char)+0x38>
 8002faa:	bf00      	nop
 8002fac:	00061a80 	andeq	r1, r6, r0, lsl #21

08002fb0 <sensor::BH170::Get()>:
 8002fb0:	b513      	push	{r0, r1, r4, lr}
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	7800      	ldrb	r0, [r0, #0]
 8002fb8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002fbc:	f006 fd00 	bl	80099c0 <gd32_i2c_set_address>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	f006 fcf5 	bl	80099b0 <gd32_i2c_set_baudrate>
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	a801      	add	r0, sp, #4
 8002fca:	f006 fd65 	bl	8009a98 <gd32_i2c_read>
 8002fce:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002fd2:	ba40      	rev16	r0, r0
 8002fd4:	b280      	uxth	r0, r0
 8002fd6:	f7fd f9c1 	bl	800035c <__aeabi_ui2f>
 8002fda:	4904      	ldr	r1, [pc, #16]	; (8002fec <sensor::BH170::Get()+0x3c>)
 8002fdc:	f7fd ff6e 	bl	8000ebc <__aeabi_fdiv>
 8002fe0:	f7fe f808 	bl	8000ff4 <__aeabi_f2uiz>
 8002fe4:	b280      	uxth	r0, r0
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	bf00      	nop
 8002fec:	3f99999a 	svccc	0x0099999a

08002ff0 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ff2:	1e0c      	subs	r4, r1, #0
 8002ff4:	bf08      	it	eq
 8002ff6:	2440      	moveq	r4, #64	; 0x40
 8002ff8:	2600      	movs	r6, #0
 8002ffa:	4f11      	ldr	r7, [pc, #68]	; (8003040 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002ffc:	7004      	strb	r4, [r0, #0]
 8002ffe:	6047      	str	r7, [r0, #4]
 8003000:	7206      	strb	r6, [r0, #8]
 8003002:	4605      	mov	r5, r0
 8003004:	4620      	mov	r0, r4
 8003006:	f006 fcdb 	bl	80099c0 <gd32_i2c_set_address>
 800300a:	4638      	mov	r0, r7
 800300c:	f006 fcd0 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003010:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003014:	2b07      	cmp	r3, #7
 8003016:	d902      	bls.n	800301e <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8003018:	3c50      	subs	r4, #80	; 0x50
 800301a:	2c0f      	cmp	r4, #15
 800301c:	d80b      	bhi.n	8003036 <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 800301e:	2101      	movs	r1, #1
 8003020:	f10d 0007 	add.w	r0, sp, #7
 8003024:	f006 fd38 	bl	8009a98 <gd32_i2c_read>
 8003028:	fab0 f380 	clz	r3, r0
 800302c:	4628      	mov	r0, r5
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	722b      	strb	r3, [r5, #8]
 8003032:	b003      	add	sp, #12
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003036:	4631      	mov	r1, r6
 8003038:	4630      	mov	r0, r6
 800303a:	f006 fcc7 	bl	80099cc <gd32_i2c_write>
 800303e:	e7f3      	b.n	8003028 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8003040:	00061a80 	andeq	r1, r6, r0, lsl #21

08003044 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8003044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003046:	4604      	mov	r4, r0
 8003048:	7800      	ldrb	r0, [r0, #0]
 800304a:	f88d 1004 	strb.w	r1, [sp, #4]
 800304e:	f006 fcb7 	bl	80099c0 <gd32_i2c_set_address>
 8003052:	6860      	ldr	r0, [r4, #4]
 8003054:	f006 fcac 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003058:	2101      	movs	r1, #1
 800305a:	a801      	add	r0, sp, #4
 800305c:	f006 fcb6 	bl	80099cc <gd32_i2c_write>
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8003062:	2508      	movs	r5, #8
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f8ad 3004 	strh.w	r3, [sp, #4]
 800306a:	2300      	movs	r3, #0
 800306c:	f88d 3006 	strb.w	r3, [sp, #6]
 8003070:	2100      	movs	r1, #0
 8003072:	f242 7010 	movw	r0, #10000	; 0x2710
 8003076:	f006 ff69 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 800307a:	7820      	ldrb	r0, [r4, #0]
 800307c:	f006 fca0 	bl	80099c0 <gd32_i2c_set_address>
 8003080:	6860      	ldr	r0, [r4, #4]
 8003082:	f006 fc95 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003086:	2103      	movs	r1, #3
 8003088:	a801      	add	r0, sp, #4
 800308a:	f006 fd05 	bl	8009a98 <gd32_i2c_read>
 800308e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d001      	beq.n	800309e <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 800309a:	3d01      	subs	r5, #1
 800309c:	d1e8      	bne.n	8003070 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 800309e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80030a2:	ba40      	rev16	r0, r0
 80030a4:	f020 0003 	bic.w	r0, r0, #3
 80030a8:	b280      	uxth	r0, r0
 80030aa:	b003      	add	sp, #12
 80030ac:	bd30      	pop	{r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	0800a34c 	stmdaeq	r0, {r2, r3, r6, r8, r9, sp, pc}

080030b4 <sensor::HTU21D::GetTemperature()>:
 80030b4:	b508      	push	{r3, lr}
 80030b6:	21f3      	movs	r1, #243	; 0xf3
 80030b8:	f7ff ffc4 	bl	8003044 <sensor::HTU21D::ReadRaw(unsigned char)>
 80030bc:	f7fd f94e 	bl	800035c <__aeabi_ui2f>
 80030c0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80030c4:	f7fd fe46 	bl	8000d54 <__aeabi_fmul>
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <sensor::HTU21D::GetTemperature()+0x24>)
 80030ca:	f7fd fe43 	bl	8000d54 <__aeabi_fmul>
 80030ce:	4903      	ldr	r1, [pc, #12]	; (80030dc <sensor::HTU21D::GetTemperature()+0x28>)
 80030d0:	f7fd f892 	bl	80001f8 <__aeabi_fsub>
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 80030dc:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

080030e0 <sensor::HTU21D::GetHumidity()>:
 80030e0:	b508      	push	{r3, lr}
 80030e2:	21f5      	movs	r1, #245	; 0xf5
 80030e4:	f7ff ffae 	bl	8003044 <sensor::HTU21D::ReadRaw(unsigned char)>
 80030e8:	f7fd f938 	bl	800035c <__aeabi_ui2f>
 80030ec:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80030f0:	f7fd fe30 	bl	8000d54 <__aeabi_fmul>
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <sensor::HTU21D::GetHumidity()+0x24>)
 80030f6:	f7fd fe2d 	bl	8000d54 <__aeabi_fmul>
 80030fa:	4903      	ldr	r1, [pc, #12]	; (8003108 <sensor::HTU21D::GetHumidity()+0x28>)
 80030fc:	f7fd f87c 	bl	80001f8 <__aeabi_fsub>
 8003100:	bd08      	pop	{r3, pc}
 8003102:	bf00      	nop
 8003104:	42fa0000 	rscsmi	r0, sl, #0
 8003108:	40c00000 	sbcmi	r0, r0, r0

0800310c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 800310c:	b513      	push	{r0, r1, r4, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	0a13      	lsrs	r3, r2, #8
 8003112:	7800      	ldrb	r0, [r0, #0]
 8003114:	f88d 1004 	strb.w	r1, [sp, #4]
 8003118:	f88d 3005 	strb.w	r3, [sp, #5]
 800311c:	f88d 2006 	strb.w	r2, [sp, #6]
 8003120:	f006 fc4e 	bl	80099c0 <gd32_i2c_set_address>
 8003124:	6860      	ldr	r0, [r4, #4]
 8003126:	f006 fc43 	bl	80099b0 <gd32_i2c_set_baudrate>
 800312a:	2103      	movs	r1, #3
 800312c:	a801      	add	r0, sp, #4
 800312e:	f006 fc4d 	bl	80099cc <gd32_i2c_write>
 8003132:	b002      	add	sp, #8
 8003134:	bd10      	pop	{r4, pc}

08003136 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8003136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003138:	4604      	mov	r4, r0
 800313a:	2600      	movs	r6, #0
 800313c:	4615      	mov	r5, r2
 800313e:	7800      	ldrb	r0, [r0, #0]
 8003140:	f8ad 6004 	strh.w	r6, [sp, #4]
 8003144:	f88d 1004 	strb.w	r1, [sp, #4]
 8003148:	f006 fc3a 	bl	80099c0 <gd32_i2c_set_address>
 800314c:	6860      	ldr	r0, [r4, #4]
 800314e:	f006 fc2f 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003152:	2101      	movs	r1, #1
 8003154:	a801      	add	r0, sp, #4
 8003156:	f006 fc39 	bl	80099cc <gd32_i2c_write>
 800315a:	4631      	mov	r1, r6
 800315c:	4628      	mov	r0, r5
 800315e:	f006 fef5 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 8003162:	2102      	movs	r1, #2
 8003164:	a801      	add	r0, sp, #4
 8003166:	f006 fc97 	bl	8009a98 <gd32_i2c_read>
 800316a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800316e:	ba40      	rev16	r0, r0
 8003170:	b280      	uxth	r0, r0
 8003172:	b002      	add	sp, #8
 8003174:	bd70      	pop	{r4, r5, r6, pc}
	...

08003178 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8003178:	880b      	ldrh	r3, [r1, #0]
 800317a:	b510      	push	{r4, lr}
 800317c:	b1d3      	cbz	r3, 80031b4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d102      	bne.n	800318a <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8003184:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8003188:	6182      	str	r2, [r0, #24]
 800318a:	884a      	ldrh	r2, [r1, #2]
 800318c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003190:	d019      	beq.n	80031c6 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8003192:	d812      	bhi.n	80031ba <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8003194:	b1da      	cbz	r2, 80031ce <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8003196:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800319a:	d016      	beq.n	80031ca <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 800319c:	431a      	orrs	r2, r3
 800319e:	888b      	ldrh	r3, [r1, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	88cb      	ldrh	r3, [r1, #6]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	890b      	ldrh	r3, [r1, #8]
 80031a8:	2100      	movs	r1, #0
 80031aa:	431a      	orrs	r2, r3
 80031ac:	b292      	uxth	r2, r2
 80031ae:	f7ff ffad 	bl	800310c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80031b2:	bd10      	pop	{r4, pc}
 80031b4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80031b8:	e7e6      	b.n	8003188 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 80031ba:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80031be:	d1ed      	bne.n	800319c <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 80031c0:	4c04      	ldr	r4, [pc, #16]	; (80031d4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 80031c2:	6144      	str	r4, [r0, #20]
 80031c4:	e7ea      	b.n	800319c <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 80031c6:	4c04      	ldr	r4, [pc, #16]	; (80031d8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 80031c8:	e7fb      	b.n	80031c2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 80031ca:	4c04      	ldr	r4, [pc, #16]	; (80031dc <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 80031cc:	e7f9      	b.n	80031c2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 80031ce:	4c04      	ldr	r4, [pc, #16]	; (80031e0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 80031d0:	e7f7      	b.n	80031c2 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 80031d2:	bf00      	nop
 80031d4:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 80031d8:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 80031dc:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 80031e0:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

080031e4 <sensor::INA219::Calibrate(float, float)>:
 80031e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e8:	61c1      	str	r1, [r0, #28]
 80031ea:	4605      	mov	r5, r0
 80031ec:	460e      	mov	r6, r1
 80031ee:	4610      	mov	r0, r2
 80031f0:	491d      	ldr	r1, [pc, #116]	; (8003268 <sensor::INA219::Calibrate(float, float)+0x84>)
 80031f2:	f7fd fe63 	bl	8000ebc <__aeabi_fdiv>
 80031f6:	491d      	ldr	r1, [pc, #116]	; (800326c <sensor::INA219::Calibrate(float, float)+0x88>)
 80031f8:	f7fd fdac 	bl	8000d54 <__aeabi_fmul>
 80031fc:	f7fd fefa 	bl	8000ff4 <__aeabi_f2uiz>
 8003200:	b280      	uxth	r0, r0
 8003202:	f7fd f8ab 	bl	800035c <__aeabi_ui2f>
 8003206:	4919      	ldr	r1, [pc, #100]	; (800326c <sensor::INA219::Calibrate(float, float)+0x88>)
 8003208:	f7fd fe58 	bl	8000ebc <__aeabi_fdiv>
 800320c:	4918      	ldr	r1, [pc, #96]	; (8003270 <sensor::INA219::Calibrate(float, float)+0x8c>)
 800320e:	f7fd fe55 	bl	8000ebc <__aeabi_fdiv>
 8003212:	4680      	mov	r8, r0
 8003214:	f7fd f970 	bl	80004f8 <__aeabi_f2iz>
 8003218:	4607      	mov	r7, r0
 800321a:	f7fd f8a3 	bl	8000364 <__aeabi_i2f>
 800321e:	4604      	mov	r4, r0
 8003220:	4601      	mov	r1, r0
 8003222:	4640      	mov	r0, r8
 8003224:	f7fd f936 	bl	8000494 <__aeabi_fcmpeq>
 8003228:	b918      	cbnz	r0, 8003232 <sensor::INA219::Calibrate(float, float)+0x4e>
 800322a:	1c78      	adds	r0, r7, #1
 800322c:	f7fd f89a 	bl	8000364 <__aeabi_i2f>
 8003230:	4604      	mov	r4, r0
 8003232:	4620      	mov	r0, r4
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8003236:	f7fd fd8d 	bl	8000d54 <__aeabi_fmul>
 800323a:	490e      	ldr	r1, [pc, #56]	; (8003274 <sensor::INA219::Calibrate(float, float)+0x90>)
 800323c:	60e8      	str	r0, [r5, #12]
 800323e:	4604      	mov	r4, r0
 8003240:	f7fd fd88 	bl	8000d54 <__aeabi_fmul>
 8003244:	4631      	mov	r1, r6
 8003246:	6128      	str	r0, [r5, #16]
 8003248:	4620      	mov	r0, r4
 800324a:	f7fd fd83 	bl	8000d54 <__aeabi_fmul>
 800324e:	4601      	mov	r1, r0
 8003250:	4809      	ldr	r0, [pc, #36]	; (8003278 <sensor::INA219::Calibrate(float, float)+0x94>)
 8003252:	f7fd fe33 	bl	8000ebc <__aeabi_fdiv>
 8003256:	f7fd fecd 	bl	8000ff4 <__aeabi_f2uiz>
 800325a:	2105      	movs	r1, #5
 800325c:	b282      	uxth	r2, r0
 800325e:	4628      	mov	r0, r5
 8003260:	f7ff ff54 	bl	800310c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8003264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003268:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 800326c:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8003270:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8003274:	41a00000 	movmi	r0, r0
 8003278:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

0800327c <sensor::INA219::INA219(unsigned char)>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	1e0c      	subs	r4, r1, #0
 8003280:	bf08      	it	eq
 8003282:	2440      	moveq	r4, #64	; 0x40
 8003284:	2600      	movs	r6, #0
 8003286:	4f1a      	ldr	r7, [pc, #104]	; (80032f0 <sensor::INA219::INA219(unsigned char)+0x74>)
 8003288:	b085      	sub	sp, #20
 800328a:	7004      	strb	r4, [r0, #0]
 800328c:	6047      	str	r7, [r0, #4]
 800328e:	7206      	strb	r6, [r0, #8]
 8003290:	4605      	mov	r5, r0
 8003292:	4620      	mov	r0, r4
 8003294:	f006 fb94 	bl	80099c0 <gd32_i2c_set_address>
 8003298:	4638      	mov	r0, r7
 800329a:	f006 fb89 	bl	80099b0 <gd32_i2c_set_baudrate>
 800329e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	d902      	bls.n	80032ac <sensor::INA219::INA219(unsigned char)+0x30>
 80032a6:	3c50      	subs	r4, #80	; 0x50
 80032a8:	2c0f      	cmp	r4, #15
 80032aa:	d81c      	bhi.n	80032e6 <sensor::INA219::INA219(unsigned char)+0x6a>
 80032ac:	2101      	movs	r1, #1
 80032ae:	a801      	add	r0, sp, #4
 80032b0:	f006 fbf2 	bl	8009a98 <gd32_i2c_read>
 80032b4:	fab0 f080 	clz	r0, r0
 80032b8:	0940      	lsrs	r0, r0, #5
 80032ba:	7228      	strb	r0, [r5, #8]
 80032bc:	b180      	cbz	r0, 80032e0 <sensor::INA219::INA219(unsigned char)+0x64>
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <sensor::INA219::INA219(unsigned char)+0x78>)
 80032c0:	ab01      	add	r3, sp, #4
 80032c2:	6810      	ldr	r0, [r2, #0]
 80032c4:	6851      	ldr	r1, [r2, #4]
 80032c6:	8912      	ldrh	r2, [r2, #8]
 80032c8:	c303      	stmia	r3!, {r0, r1}
 80032ca:	4628      	mov	r0, r5
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	a901      	add	r1, sp, #4
 80032d0:	f7ff ff52 	bl	8003178 <sensor::INA219::Configure(sensor::ina219::Config&)>
 80032d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032d8:	4628      	mov	r0, r5
 80032da:	4907      	ldr	r1, [pc, #28]	; (80032f8 <sensor::INA219::INA219(unsigned char)+0x7c>)
 80032dc:	f7ff ff82 	bl	80031e4 <sensor::INA219::Calibrate(float, float)>
 80032e0:	4628      	mov	r0, r5
 80032e2:	b005      	add	sp, #20
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e6:	4631      	mov	r1, r6
 80032e8:	4630      	mov	r0, r6
 80032ea:	f006 fb6f 	bl	80099cc <gd32_i2c_write>
 80032ee:	e7e1      	b.n	80032b4 <sensor::INA219::INA219(unsigned char)+0x38>
 80032f0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80032f4:	0800a350 	stmdaeq	r0, {r4, r6, r8, r9, sp, pc}
 80032f8:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

080032fc <sensor::INA219::GetShuntCurrent()>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	4604      	mov	r4, r0
 8003300:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003304:	2104      	movs	r1, #4
 8003306:	f7ff ff16 	bl	8003136 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 800330a:	f7fd f82b 	bl	8000364 <__aeabi_i2f>
 800330e:	68e1      	ldr	r1, [r4, #12]
 8003310:	f7fd fd20 	bl	8000d54 <__aeabi_fmul>
 8003314:	bd10      	pop	{r4, pc}

08003316 <sensor::INA219::GetBusVoltageRaw()>:
 8003316:	f44f 7248 	mov.w	r2, #800	; 0x320
 800331a:	2102      	movs	r1, #2
 800331c:	b508      	push	{r3, lr}
 800331e:	f7ff ff0a 	bl	8003136 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8003322:	f340 004f 	sbfx	r0, r0, #1, #16
 8003326:	f020 0003 	bic.w	r0, r0, #3
 800332a:	bd08      	pop	{r3, pc}

0800332c <sensor::INA219::GetBusVoltage()>:
 800332c:	b508      	push	{r3, lr}
 800332e:	f7ff fff2 	bl	8003316 <sensor::INA219::GetBusVoltageRaw()>
 8003332:	f7fd f817 	bl	8000364 <__aeabi_i2f>
 8003336:	4902      	ldr	r1, [pc, #8]	; (8003340 <sensor::INA219::GetBusVoltage()+0x14>)
 8003338:	f7fd fd0c 	bl	8000d54 <__aeabi_fmul>
 800333c:	bd08      	pop	{r3, pc}
 800333e:	bf00      	nop
 8003340:	3a83126f 	bcc	60c7d04 <__heap_size+0x60c6d04>

08003344 <sensor::INA219::GetBusPower()>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
 8003348:	f44f 7248 	mov.w	r2, #800	; 0x320
 800334c:	2103      	movs	r1, #3
 800334e:	f7ff fef2 	bl	8003136 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8003352:	f7fd f807 	bl	8000364 <__aeabi_i2f>
 8003356:	6921      	ldr	r1, [r4, #16]
 8003358:	f7fd fcfc 	bl	8000d54 <__aeabi_fmul>
 800335c:	bd10      	pop	{r4, pc}
	...

08003360 <MCP3424::SetResolution(adc::mcp3424::Resolution)>:
 8003360:	7a42      	ldrb	r2, [r0, #9]
 8003362:	008b      	lsls	r3, r1, #2
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	f022 020c 	bic.w	r2, r2, #12
 800336c:	b530      	push	{r4, r5, lr}
 800336e:	4313      	orrs	r3, r2
 8003370:	2903      	cmp	r1, #3
 8003372:	d80a      	bhi.n	800338a <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x2a>
 8003374:	e8df f001 	tbb	[pc, r1]
 8003378:	0902110d 	stmdbeq	r2, {r0, r2, r3, r8, ip}
 800337c:	a50a      	add	r5, pc, #40	; (adr r5, 80033a8 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x48>)
 800337e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003382:	e9c0 4504 	strd	r4, r5, [r0, #16]
 8003386:	7243      	strb	r3, [r0, #9]
 8003388:	bd30      	pop	{r4, r5, pc}
 800338a:	a509      	add	r5, pc, #36	; (adr r5, 80033b0 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x50>)
 800338c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003390:	e7f7      	b.n	8003382 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 8003392:	a509      	add	r5, pc, #36	; (adr r5, 80033b8 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x58>)
 8003394:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003398:	e7f3      	b.n	8003382 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 800339a:	a509      	add	r5, pc, #36	; (adr r5, 80033c0 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x60>)
 800339c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80033a0:	e7ef      	b.n	8003382 <MCP3424::SetResolution(adc::mcp3424::Resolution)+0x22>
 80033a2:	bf00      	nop
 80033a4:	f3af 8000 	nop.w
 80033a8:	d2f1a9fc 	rscsle	sl, r1, #252, 18	; 0x3f0000
 80033ac:	3f00624d 	svccc	0x0000624d
 80033b0:	d2f1a9fc 	rscsle	sl, r1, #252, 18	; 0x3f0000
 80033b4:	3ee0624d 	cdpcc	2, 14, cr6, cr0, cr13, {2}
 80033b8:	d2f1a9fc 	rscsle	sl, r1, #252, 18	; 0x3f0000
 80033bc:	3f40624d 	svccc	0x0040624d
 80033c0:	d2f1a9fc 	rscsle	sl, r1, #252, 18	; 0x3f0000
 80033c4:	3f20624d 	svccc	0x0020624d

080033c8 <MCP3424::MCP3424(unsigned char)>:
 80033c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033ca:	1e0d      	subs	r5, r1, #0
 80033cc:	bf08      	it	eq
 80033ce:	2568      	moveq	r5, #104	; 0x68
 80033d0:	2600      	movs	r6, #0
 80033d2:	7a43      	ldrb	r3, [r0, #9]
 80033d4:	4f17      	ldr	r7, [pc, #92]	; (8003434 <MCP3424::MCP3424(unsigned char)+0x6c>)
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	4631      	mov	r1, r6
 80033dc:	7243      	strb	r3, [r0, #9]
 80033de:	7005      	strb	r5, [r0, #0]
 80033e0:	6047      	str	r7, [r0, #4]
 80033e2:	7206      	strb	r6, [r0, #8]
 80033e4:	f7ff ffbc 	bl	8003360 <MCP3424::SetResolution(adc::mcp3424::Resolution)>
 80033e8:	7a43      	ldrb	r3, [r0, #9]
 80033ea:	4604      	mov	r4, r0
 80033ec:	f023 0310 	bic.w	r3, r3, #16
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	7243      	strb	r3, [r0, #9]
 80033f6:	4628      	mov	r0, r5
 80033f8:	f006 fae2 	bl	80099c0 <gd32_i2c_set_address>
 80033fc:	4638      	mov	r0, r7
 80033fe:	f006 fad7 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003402:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003406:	2b07      	cmp	r3, #7
 8003408:	d902      	bls.n	8003410 <MCP3424::MCP3424(unsigned char)+0x48>
 800340a:	3d50      	subs	r5, #80	; 0x50
 800340c:	2d0f      	cmp	r5, #15
 800340e:	d80b      	bhi.n	8003428 <MCP3424::MCP3424(unsigned char)+0x60>
 8003410:	2101      	movs	r1, #1
 8003412:	f10d 0007 	add.w	r0, sp, #7
 8003416:	f006 fb3f 	bl	8009a98 <gd32_i2c_read>
 800341a:	fab0 f080 	clz	r0, r0
 800341e:	0940      	lsrs	r0, r0, #5
 8003420:	7220      	strb	r0, [r4, #8]
 8003422:	4620      	mov	r0, r4
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	4631      	mov	r1, r6
 800342a:	4630      	mov	r0, r6
 800342c:	f006 face 	bl	80099cc <gd32_i2c_write>
 8003430:	e7f3      	b.n	800341a <MCP3424::MCP3424(unsigned char)+0x52>
 8003432:	bf00      	nop
 8003434:	00061a80 	andeq	r1, r6, r0, lsl #21

08003438 <MCP3424::GetRaw(unsigned char)>:
 8003438:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800343a:	7a43      	ldrb	r3, [r0, #9]
 800343c:	0149      	lsls	r1, r1, #5
 800343e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003442:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8003446:	430b      	orrs	r3, r1
 8003448:	7243      	strb	r3, [r0, #9]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	4604      	mov	r4, r0
 8003452:	bf14      	ite	ne
 8003454:	2603      	movne	r6, #3
 8003456:	2604      	moveq	r6, #4
 8003458:	f641 7541 	movw	r5, #8001	; 0x1f41
 800345c:	7a63      	ldrb	r3, [r4, #9]
 800345e:	7820      	ldrb	r0, [r4, #0]
 8003460:	f88d 3003 	strb.w	r3, [sp, #3]
 8003464:	f006 faac 	bl	80099c0 <gd32_i2c_set_address>
 8003468:	6860      	ldr	r0, [r4, #4]
 800346a:	f006 faa1 	bl	80099b0 <gd32_i2c_set_baudrate>
 800346e:	2101      	movs	r1, #1
 8003470:	f10d 0003 	add.w	r0, sp, #3
 8003474:	f006 faaa 	bl	80099cc <gd32_i2c_write>
 8003478:	7820      	ldrb	r0, [r4, #0]
 800347a:	f006 faa1 	bl	80099c0 <gd32_i2c_set_address>
 800347e:	6860      	ldr	r0, [r4, #4]
 8003480:	f006 fa96 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003484:	4631      	mov	r1, r6
 8003486:	a801      	add	r0, sp, #4
 8003488:	f006 fb06 	bl	8009a98 <gd32_i2c_read>
 800348c:	2e04      	cmp	r6, #4
 800348e:	bf0c      	ite	eq
 8003490:	f99d 3007 	ldrsbeq.w	r3, [sp, #7]
 8003494:	f99d 3006 	ldrsbne.w	r3, [sp, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da04      	bge.n	80034a6 <MCP3424::GetRaw(unsigned char)+0x6e>
 800349c:	3d01      	subs	r5, #1
 800349e:	d1dd      	bne.n	800345c <MCP3424::GetRaw(unsigned char)+0x24>
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a4:	e013      	b.n	80034ce <MCP3424::GetRaw(unsigned char)+0x96>
 80034a6:	7a62      	ldrb	r2, [r4, #9]
 80034a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034ac:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80034b0:	2a02      	cmp	r2, #2
 80034b2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80034b6:	d00c      	beq.n	80034d2 <MCP3424::GetRaw(unsigned char)+0x9a>
 80034b8:	2a03      	cmp	r2, #3
 80034ba:	d00f      	beq.n	80034dc <MCP3424::GetRaw(unsigned char)+0xa4>
 80034bc:	2a01      	cmp	r2, #1
 80034be:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80034c2:	bf14      	ite	ne
 80034c4:	f403 6370 	andne.w	r3, r3, #3840	; 0xf00
 80034c8:	f403 537c 	andeq.w	r3, r3, #16128	; 0x3f00
 80034cc:	4318      	orrs	r0, r3
 80034ce:	b002      	add	sp, #8
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
 80034d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80034d6:	ba40      	rev16	r0, r0
 80034d8:	b280      	uxth	r0, r0
 80034da:	e7f8      	b.n	80034ce <MCP3424::GetRaw(unsigned char)+0x96>
 80034dc:	f8bd 0005 	ldrh.w	r0, [sp, #5]
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	ba40      	rev16	r0, r0
 80034e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e8:	b280      	uxth	r0, r0
 80034ea:	e7ef      	b.n	80034cc <MCP3424::GetRaw(unsigned char)+0x94>

080034ec <MCP3424::GetVoltage(unsigned char)>:
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	f7ff ffa2 	bl	8003438 <MCP3424::GetRaw(unsigned char)>
 80034f4:	f7fd f982 	bl	80007fc <__aeabi_ui2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	f7fd f842 	bl	8000584 <__adddf3>
 8003500:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8003504:	f7fd f9f4 	bl	80008f0 <__aeabi_dmul>
 8003508:	bd10      	pop	{r4, pc}

0800350a <HAL_I2C::ReadRegister16(unsigned char)>:
 800350a:	b513      	push	{r0, r1, r4, lr}
 800350c:	4604      	mov	r4, r0
 800350e:	7800      	ldrb	r0, [r0, #0]
 8003510:	f88d 1000 	strb.w	r1, [sp]
 8003514:	f006 fa54 	bl	80099c0 <gd32_i2c_set_address>
 8003518:	6860      	ldr	r0, [r4, #4]
 800351a:	f006 fa49 	bl	80099b0 <gd32_i2c_set_baudrate>
 800351e:	2101      	movs	r1, #1
 8003520:	4668      	mov	r0, sp
 8003522:	f006 fa53 	bl	80099cc <gd32_i2c_write>
 8003526:	2300      	movs	r3, #0
 8003528:	7820      	ldrb	r0, [r4, #0]
 800352a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800352e:	f006 fa47 	bl	80099c0 <gd32_i2c_set_address>
 8003532:	6860      	ldr	r0, [r4, #4]
 8003534:	f006 fa3c 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003538:	2102      	movs	r1, #2
 800353a:	a801      	add	r0, sp, #4
 800353c:	f006 faac 	bl	8009a98 <gd32_i2c_read>
 8003540:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003544:	ba40      	rev16	r0, r0
 8003546:	b280      	uxth	r0, r0
 8003548:	b002      	add	sp, #8
 800354a:	bd10      	pop	{r4, pc}

0800354c <sensor::MCP9808::MCP9808(unsigned char)>:
 800354c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800354e:	1e0d      	subs	r5, r1, #0
 8003550:	bf08      	it	eq
 8003552:	2518      	moveq	r5, #24
 8003554:	2600      	movs	r6, #0
 8003556:	4f1b      	ldr	r7, [pc, #108]	; (80035c4 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 8003558:	7005      	strb	r5, [r0, #0]
 800355a:	6047      	str	r7, [r0, #4]
 800355c:	7206      	strb	r6, [r0, #8]
 800355e:	4604      	mov	r4, r0
 8003560:	4628      	mov	r0, r5
 8003562:	f006 fa2d 	bl	80099c0 <gd32_i2c_set_address>
 8003566:	4638      	mov	r0, r7
 8003568:	f006 fa22 	bl	80099b0 <gd32_i2c_set_baudrate>
 800356c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003570:	2b07      	cmp	r3, #7
 8003572:	d902      	bls.n	800357a <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8003574:	3d50      	subs	r5, #80	; 0x50
 8003576:	2d0f      	cmp	r5, #15
 8003578:	d81f      	bhi.n	80035ba <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 800357a:	2101      	movs	r1, #1
 800357c:	f10d 0007 	add.w	r0, sp, #7
 8003580:	f006 fa8a 	bl	8009a98 <gd32_i2c_read>
 8003584:	fab0 f080 	clz	r0, r0
 8003588:	0940      	lsrs	r0, r0, #5
 800358a:	7220      	strb	r0, [r4, #8]
 800358c:	b190      	cbz	r0, 80035b4 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800358e:	2106      	movs	r1, #6
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff ffba 	bl	800350a <HAL_I2C::ReadRegister16(unsigned char)>
 8003596:	2854      	cmp	r0, #84	; 0x54
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	7223      	strb	r3, [r4, #8]
 80035a0:	d108      	bne.n	80035b4 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 80035a2:	2107      	movs	r1, #7
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff ffb0 	bl	800350a <HAL_I2C::ReadRegister16(unsigned char)>
 80035aa:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80035ae:	4258      	negs	r0, r3
 80035b0:	4158      	adcs	r0, r3
 80035b2:	7220      	strb	r0, [r4, #8]
 80035b4:	4620      	mov	r0, r4
 80035b6:	b003      	add	sp, #12
 80035b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ba:	4631      	mov	r1, r6
 80035bc:	4630      	mov	r0, r6
 80035be:	f006 fa05 	bl	80099cc <gd32_i2c_write>
 80035c2:	e7df      	b.n	8003584 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 80035c4:	00061a80 	andeq	r1, r6, r0, lsl #21

080035c8 <sensor::MCP9808::Get()>:
 80035c8:	b510      	push	{r4, lr}
 80035ca:	2105      	movs	r1, #5
 80035cc:	f7ff ff9d 	bl	800350a <HAL_I2C::ReadRegister16(unsigned char)>
 80035d0:	4604      	mov	r4, r0
 80035d2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80035d6:	f7fc fec5 	bl	8000364 <__aeabi_i2f>
 80035da:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80035de:	f7fd fbb9 	bl	8000d54 <__aeabi_fmul>
 80035e2:	04e2      	lsls	r2, r4, #19
 80035e4:	4603      	mov	r3, r0
 80035e6:	d504      	bpl.n	80035f2 <sensor::MCP9808::Get()+0x2a>
 80035e8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80035ec:	f7fc fe04 	bl	80001f8 <__aeabi_fsub>
 80035f0:	4603      	mov	r3, r0
 80035f2:	4618      	mov	r0, r3
 80035f4:	bd10      	pop	{r4, pc}
	...

080035f8 <sensor::SI7021::SI7021(unsigned char)>:
 80035f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fa:	1e0c      	subs	r4, r1, #0
 80035fc:	bf08      	it	eq
 80035fe:	2440      	moveq	r4, #64	; 0x40
 8003600:	2600      	movs	r6, #0
 8003602:	4f11      	ldr	r7, [pc, #68]	; (8003648 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 8003604:	7004      	strb	r4, [r0, #0]
 8003606:	6047      	str	r7, [r0, #4]
 8003608:	7206      	strb	r6, [r0, #8]
 800360a:	4605      	mov	r5, r0
 800360c:	4620      	mov	r0, r4
 800360e:	f006 f9d7 	bl	80099c0 <gd32_i2c_set_address>
 8003612:	4638      	mov	r0, r7
 8003614:	f006 f9cc 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003618:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800361c:	2b07      	cmp	r3, #7
 800361e:	d902      	bls.n	8003626 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 8003620:	3c50      	subs	r4, #80	; 0x50
 8003622:	2c0f      	cmp	r4, #15
 8003624:	d80b      	bhi.n	800363e <sensor::SI7021::SI7021(unsigned char)+0x46>
 8003626:	2101      	movs	r1, #1
 8003628:	f10d 0007 	add.w	r0, sp, #7
 800362c:	f006 fa34 	bl	8009a98 <gd32_i2c_read>
 8003630:	fab0 f380 	clz	r3, r0
 8003634:	4628      	mov	r0, r5
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	722b      	strb	r3, [r5, #8]
 800363a:	b003      	add	sp, #12
 800363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800363e:	4631      	mov	r1, r6
 8003640:	4630      	mov	r0, r6
 8003642:	f006 f9c3 	bl	80099cc <gd32_i2c_write>
 8003646:	e7f3      	b.n	8003630 <sensor::SI7021::SI7021(unsigned char)+0x38>
 8003648:	00061a80 	andeq	r1, r6, r0, lsl #21

0800364c <sensor::SI7021::ReadRaw(unsigned char)>:
 800364c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	7800      	ldrb	r0, [r0, #0]
 8003652:	f88d 1004 	strb.w	r1, [sp, #4]
 8003656:	f006 f9b3 	bl	80099c0 <gd32_i2c_set_address>
 800365a:	6860      	ldr	r0, [r4, #4]
 800365c:	f006 f9a8 	bl	80099b0 <gd32_i2c_set_baudrate>
 8003660:	2101      	movs	r1, #1
 8003662:	a801      	add	r0, sp, #4
 8003664:	f006 f9b2 	bl	80099cc <gd32_i2c_write>
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 800366a:	2508      	movs	r5, #8
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003672:	2300      	movs	r3, #0
 8003674:	f88d 3006 	strb.w	r3, [sp, #6]
 8003678:	2100      	movs	r1, #0
 800367a:	f242 7010 	movw	r0, #10000	; 0x2710
 800367e:	f006 fc65 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 8003682:	7820      	ldrb	r0, [r4, #0]
 8003684:	f006 f99c 	bl	80099c0 <gd32_i2c_set_address>
 8003688:	6860      	ldr	r0, [r4, #4]
 800368a:	f006 f991 	bl	80099b0 <gd32_i2c_set_baudrate>
 800368e:	2103      	movs	r1, #3
 8003690:	a801      	add	r0, sp, #4
 8003692:	f006 fa01 	bl	8009a98 <gd32_i2c_read>
 8003696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d001      	beq.n	80036a6 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 80036a2:	3d01      	subs	r5, #1
 80036a4:	d1e8      	bne.n	8003678 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 80036a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80036aa:	ba40      	rev16	r0, r0
 80036ac:	f020 0003 	bic.w	r0, r0, #3
 80036b0:	b280      	uxth	r0, r0
 80036b2:	b003      	add	sp, #12
 80036b4:	bd30      	pop	{r4, r5, pc}
 80036b6:	bf00      	nop
 80036b8:	0800a35a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sp, pc}

080036bc <sensor::SI7021::GetTemperature()>:
 80036bc:	b508      	push	{r3, lr}
 80036be:	21f3      	movs	r1, #243	; 0xf3
 80036c0:	f7ff ffc4 	bl	800364c <sensor::SI7021::ReadRaw(unsigned char)>
 80036c4:	f7fc fe4a 	bl	800035c <__aeabi_ui2f>
 80036c8:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80036cc:	f7fd fb42 	bl	8000d54 <__aeabi_fmul>
 80036d0:	4903      	ldr	r1, [pc, #12]	; (80036e0 <sensor::SI7021::GetTemperature()+0x24>)
 80036d2:	f7fd fb3f 	bl	8000d54 <__aeabi_fmul>
 80036d6:	4903      	ldr	r1, [pc, #12]	; (80036e4 <sensor::SI7021::GetTemperature()+0x28>)
 80036d8:	f7fc fd8e 	bl	80001f8 <__aeabi_fsub>
 80036dc:	bd08      	pop	{r3, pc}
 80036de:	bf00      	nop
 80036e0:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 80036e4:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

080036e8 <sensor::SI7021::GetHumidity()>:
 80036e8:	b508      	push	{r3, lr}
 80036ea:	21f5      	movs	r1, #245	; 0xf5
 80036ec:	f7ff ffae 	bl	800364c <sensor::SI7021::ReadRaw(unsigned char)>
 80036f0:	f7fc fe34 	bl	800035c <__aeabi_ui2f>
 80036f4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80036f8:	f7fd fb2c 	bl	8000d54 <__aeabi_fmul>
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <sensor::SI7021::GetHumidity()+0x24>)
 80036fe:	f7fd fb29 	bl	8000d54 <__aeabi_fmul>
 8003702:	4903      	ldr	r1, [pc, #12]	; (8003710 <sensor::SI7021::GetHumidity()+0x28>)
 8003704:	f7fc fd78 	bl	80001f8 <__aeabi_fsub>
 8003708:	bd08      	pop	{r3, pc}
 800370a:	bf00      	nop
 800370c:	42fa0000 	rscsmi	r0, sl, #0
 8003710:	40c00000 	sbcmi	r0, r0, r0

08003714 <RDMSubDevices::RDMSubDevices()>:
 8003714:	2200      	movs	r2, #0
 8003716:	6002      	str	r2, [r0, #0]
 8003718:	8082      	strh	r2, [r0, #4]
 800371a:	4a01      	ldr	r2, [pc, #4]	; (8003720 <RDMSubDevices::RDMSubDevices()+0xc>)
 800371c:	6010      	str	r0, [r2, #0]
 800371e:	4770      	bx	lr
 8003720:	20000198 	mulcs	r0, r8, r1

08003724 <RDMSubDevices::~RDMSubDevices()>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	2500      	movs	r5, #0
 8003728:	4604      	mov	r4, r0
 800372a:	462e      	mov	r6, r5
 800372c:	88a3      	ldrh	r3, [r4, #4]
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	42ab      	cmp	r3, r5
 8003732:	d804      	bhi.n	800373e <RDMSubDevices::~RDMSubDevices()+0x1a>
 8003734:	b108      	cbz	r0, 800373a <RDMSubDevices::~RDMSubDevices()+0x16>
 8003736:	f005 f8d4 	bl	80088e2 <operator delete[](void*)>
 800373a:	4620      	mov	r0, r4
 800373c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8003742:	00af      	lsls	r7, r5, #2
 8003744:	b110      	cbz	r0, 800374c <RDMSubDevices::~RDMSubDevices()+0x28>
 8003746:	6803      	ldr	r3, [r0, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4798      	blx	r3
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	3501      	adds	r5, #1
 8003750:	51de      	str	r6, [r3, r7]
 8003752:	e7eb      	b.n	800372c <RDMSubDevices::~RDMSubDevices()+0x8>

08003754 <RDMSubDevices::GetInfo(unsigned short)>:
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800375a:	3901      	subs	r1, #1
 800375c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003760:	3010      	adds	r0, #16
 8003762:	4770      	bx	lr

08003764 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003764:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003768:	6800      	ldr	r0, [r0, #0]
 800376a:	3b01      	subs	r3, #1
 800376c:	4611      	mov	r1, r2
 800376e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003772:	f000 b8b1 	b.w	80038d8 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08003776 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8003776:	b410      	push	{r4}
 8003778:	460c      	mov	r4, r1
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003780:	3c01      	subs	r4, #1
 8003782:	4611      	mov	r1, r2
 8003784:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003788:	461a      	mov	r2, r3
 800378a:	bc10      	pop	{r4}
 800378c:	f000 b8b9 	b.w	8003902 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003790 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003796:	3901      	subs	r1, #1
 8003798:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800379c:	8a58      	ldrh	r0, [r3, #18]
 800379e:	4770      	bx	lr

080037a0 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 80037a0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	4611      	mov	r1, r2
 80037aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80037ae:	f000 b887 	b.w	80038c0 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

080037b2 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 80037b2:	6803      	ldr	r3, [r0, #0]
 80037b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80037b8:	3901      	subs	r1, #1
 80037ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037be:	8a18      	ldrh	r0, [r3, #16]
 80037c0:	4770      	bx	lr

080037c2 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 80037c2:	6803      	ldr	r3, [r0, #0]
 80037c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80037c8:	3901      	subs	r1, #1
 80037ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037ce:	7d18      	ldrb	r0, [r3, #20]
 80037d0:	4770      	bx	lr

080037d2 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80037d2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	4611      	mov	r1, r2
 80037dc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80037e0:	f000 b89e 	b.w	8003920 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

080037e4 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 80037e4:	6803      	ldr	r3, [r0, #0]
 80037e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80037ea:	3901      	subs	r1, #1
 80037ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80037f0:	7d58      	ldrb	r0, [r3, #21]
 80037f2:	4770      	bx	lr

080037f4 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80037f4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80037f8:	6800      	ldr	r0, [r0, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4611      	mov	r1, r2
 80037fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003802:	f000 b862 	b.w	80038ca <RDMSubDevice::GetPersonality(unsigned char)>

08003806 <RDMSubDevices::Start()>:
 8003806:	b538      	push	{r3, r4, r5, lr}
 8003808:	4605      	mov	r5, r0
 800380a:	2400      	movs	r4, #0
 800380c:	88ab      	ldrh	r3, [r5, #4]
 800380e:	42a3      	cmp	r3, r4
 8003810:	d800      	bhi.n	8003814 <RDMSubDevices::Start()+0xe>
 8003812:	bd38      	pop	{r3, r4, r5, pc}
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800381a:	b110      	cbz	r0, 8003822 <RDMSubDevices::Start()+0x1c>
 800381c:	6803      	ldr	r3, [r0, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4798      	blx	r3
 8003822:	3401      	adds	r4, #1
 8003824:	e7f2      	b.n	800380c <RDMSubDevices::Start()+0x6>

08003826 <RDMSubDevices::Stop()>:
 8003826:	b538      	push	{r3, r4, r5, lr}
 8003828:	4605      	mov	r5, r0
 800382a:	2400      	movs	r4, #0
 800382c:	88ab      	ldrh	r3, [r5, #4]
 800382e:	42a3      	cmp	r3, r4
 8003830:	d800      	bhi.n	8003834 <RDMSubDevices::Stop()+0xe>
 8003832:	bd38      	pop	{r3, r4, r5, pc}
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800383a:	b110      	cbz	r0, 8003842 <RDMSubDevices::Stop()+0x1c>
 800383c:	6803      	ldr	r3, [r0, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	4798      	blx	r3
 8003842:	3401      	adds	r4, #1
 8003844:	e7f2      	b.n	800382c <RDMSubDevices::Stop()+0x6>

08003846 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 8003846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003848:	4605      	mov	r5, r0
 800384a:	460f      	mov	r7, r1
 800384c:	4616      	mov	r6, r2
 800384e:	2400      	movs	r4, #0
 8003850:	88ab      	ldrh	r3, [r5, #4]
 8003852:	42a3      	cmp	r3, r4
 8003854:	d800      	bhi.n	8003858 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 8003856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800385e:	b158      	cbz	r0, 8003878 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003860:	8a43      	ldrh	r3, [r0, #18]
 8003862:	8a02      	ldrh	r2, [r0, #16]
 8003864:	4413      	add	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	42b3      	cmp	r3, r6
 800386c:	d804      	bhi.n	8003878 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 800386e:	6803      	ldr	r3, [r0, #0]
 8003870:	4632      	mov	r2, r6
 8003872:	4639      	mov	r1, r7
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4798      	blx	r3
 8003878:	3401      	adds	r4, #1
 800387a:	e7e9      	b.n	8003850 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

0800387c <RDMSubDevices::GetFactoryDefaults()>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4605      	mov	r5, r0
 8003880:	2400      	movs	r4, #0
 8003882:	88ab      	ldrh	r3, [r5, #4]
 8003884:	42a3      	cmp	r3, r4
 8003886:	d801      	bhi.n	800388c <RDMSubDevices::GetFactoryDefaults()+0x10>
 8003888:	2001      	movs	r0, #1
 800388a:	e009      	b.n	80038a0 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003892:	b908      	cbnz	r0, 8003898 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 8003894:	3401      	adds	r4, #1
 8003896:	e7f4      	b.n	8003882 <RDMSubDevices::GetFactoryDefaults()+0x6>
 8003898:	f000 f86a 	bl	8003970 <RDMSubDevice::GetFactoryDefaults()>
 800389c:	2800      	cmp	r0, #0
 800389e:	d1f9      	bne.n	8003894 <RDMSubDevices::GetFactoryDefaults()+0x18>
 80038a0:	bd38      	pop	{r3, r4, r5, pc}

080038a2 <RDMSubDevices::SetFactoryDefaults()>:
 80038a2:	b538      	push	{r3, r4, r5, lr}
 80038a4:	4605      	mov	r5, r0
 80038a6:	2400      	movs	r4, #0
 80038a8:	88ab      	ldrh	r3, [r5, #4]
 80038aa:	42a3      	cmp	r3, r4
 80038ac:	d800      	bhi.n	80038b0 <RDMSubDevices::SetFactoryDefaults()+0xe>
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80038b6:	b108      	cbz	r0, 80038bc <RDMSubDevices::SetFactoryDefaults()+0x1a>
 80038b8:	f000 f834 	bl	8003924 <RDMSubDevice::SetFactoryDefaults()>
 80038bc:	3401      	adds	r4, #1
 80038be:	e7f3      	b.n	80038a8 <RDMSubDevices::SetFactoryDefaults()+0x6>

080038c0 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 80038c0:	6803      	ldr	r3, [r0, #0]
 80038c2:	8241      	strh	r1, [r0, #18]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2100      	movs	r1, #0
 80038c8:	4718      	bx	r3

080038ca <RDMSubDevice::GetPersonality(unsigned char)>:
 80038ca:	6843      	ldr	r3, [r0, #4]
 80038cc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80038d0:	3901      	subs	r1, #1
 80038d2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80038d6:	4770      	bx	lr

080038d8 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80038d8:	f100 0316 	add.w	r3, r0, #22
 80038dc:	600b      	str	r3, [r1, #0]
 80038de:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80038e2:	710b      	strb	r3, [r1, #4]
 80038e4:	4770      	bx	lr

080038e6 <RDMSubDevice::SetLabel(char const*)>:
 80038e6:	2300      	movs	r3, #0
 80038e8:	b510      	push	{r4, lr}
 80038ea:	f100 0415 	add.w	r4, r0, #21
 80038ee:	5cca      	ldrb	r2, [r1, r3]
 80038f0:	b122      	cbz	r2, 80038fc <RDMSubDevice::SetLabel(char const*)+0x16>
 80038f2:	3301      	adds	r3, #1
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80038fa:	d1f8      	bne.n	80038ee <RDMSubDevice::SetLabel(char const*)+0x8>
 80038fc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8003900:	bd10      	pop	{r4, pc}

08003902 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 8003902:	2300      	movs	r3, #0
 8003904:	b530      	push	{r4, r5, lr}
 8003906:	f100 0415 	add.w	r4, r0, #21
 800390a:	429a      	cmp	r2, r3
 800390c:	d905      	bls.n	800391a <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800390e:	5ccd      	ldrb	r5, [r1, r3]
 8003910:	3301      	adds	r3, #1
 8003912:	2b20      	cmp	r3, #32
 8003914:	f804 5f01 	strb.w	r5, [r4, #1]!
 8003918:	d1f7      	bne.n	800390a <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800391a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800391e:	bd30      	pop	{r4, r5, pc}

08003920 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 8003920:	7501      	strb	r1, [r0, #20]
 8003922:	4770      	bx	lr

08003924 <RDMSubDevice::SetFactoryDefaults()>:
 8003924:	7a03      	ldrb	r3, [r0, #8]
 8003926:	b510      	push	{r4, lr}
 8003928:	b94b      	cbnz	r3, 800393e <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800392a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800392e:	f7ff ffda 	bl	80038e6 <RDMSubDevice::SetLabel(char const*)>
 8003932:	8983      	ldrh	r3, [r0, #12]
 8003934:	8243      	strh	r3, [r0, #18]
 8003936:	7b83      	ldrb	r3, [r0, #14]
 8003938:	7503      	strb	r3, [r0, #20]
 800393a:	2301      	movs	r3, #1
 800393c:	7203      	strb	r3, [r0, #8]
 800393e:	bd10      	pop	{r4, pc}

08003940 <RDMSubDevice::CalculateChecksum()>:
 8003940:	4602      	mov	r2, r0
 8003942:	b510      	push	{r4, lr}
 8003944:	8a43      	ldrh	r3, [r0, #18]
 8003946:	7d01      	ldrb	r1, [r0, #20]
 8003948:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 800394c:	440b      	add	r3, r1
 800394e:	b298      	uxth	r0, r3
 8003950:	f102 0315 	add.w	r3, r2, #21
 8003954:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003958:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800395c:	32eb      	adds	r2, #235	; 0xeb
 800395e:	18d1      	adds	r1, r2, r3
 8003960:	428c      	cmp	r4, r1
 8003962:	d800      	bhi.n	8003966 <RDMSubDevice::CalculateChecksum()+0x26>
 8003964:	bd10      	pop	{r4, pc}
 8003966:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800396a:	4408      	add	r0, r1
 800396c:	b280      	uxth	r0, r0
 800396e:	e7f6      	b.n	800395e <RDMSubDevice::CalculateChecksum()+0x1e>

08003970 <RDMSubDevice::GetFactoryDefaults()>:
 8003970:	7a03      	ldrb	r3, [r0, #8]
 8003972:	b510      	push	{r4, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	b133      	cbz	r3, 8003986 <RDMSubDevice::GetFactoryDefaults()+0x16>
 8003978:	f7ff ffe2 	bl	8003940 <RDMSubDevice::CalculateChecksum()>
 800397c:	8963      	ldrh	r3, [r4, #10]
 800397e:	4283      	cmp	r3, r0
 8003980:	bf1c      	itt	ne
 8003982:	2300      	movne	r3, #0
 8003984:	7223      	strbne	r3, [r4, #8]
 8003986:	7a20      	ldrb	r0, [r4, #8]
 8003988:	bd10      	pop	{r4, pc}
	...

0800398c <Rdm::Receive(unsigned int)>:
 800398c:	4b02      	ldr	r3, [pc, #8]	; (8003998 <Rdm::Receive(unsigned int)+0xc>)
 800398e:	4601      	mov	r1, r0
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	f000 bc3f 	b.w	8004214 <Dmx::RdmReceive(unsigned int)>
 8003996:	bf00      	nop
 8003998:	200005d4 	ldrdcs	r0, [r0], -r4

0800399c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800399c:	2300      	movs	r3, #0
 800399e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a2:	4604      	mov	r4, r0
 80039a4:	460e      	mov	r6, r1
 80039a6:	4617      	mov	r7, r2
 80039a8:	4d0b      	ldr	r5, [pc, #44]	; (80039d8 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 80039aa:	461a      	mov	r2, r3
 80039ac:	4601      	mov	r1, r0
 80039ae:	6828      	ldr	r0, [r5, #0]
 80039b0:	f000 fac2 	bl	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80039b4:	463b      	mov	r3, r7
 80039b6:	4632      	mov	r2, r6
 80039b8:	4621      	mov	r1, r4
 80039ba:	6828      	ldr	r0, [r5, #0]
 80039bc:	f000 fbe4 	bl	8004188 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 80039c0:	2100      	movs	r1, #0
 80039c2:	2004      	movs	r0, #4
 80039c4:	f006 fac2 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4621      	mov	r1, r4
 80039cc:	6828      	ldr	r0, [r5, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039d4:	f000 bab0 	b.w	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80039d8:	200005d4 	ldrdcs	r0, [r0], -r4

080039dc <USART2_IRQHandler>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	2408      	movs	r4, #8
 80039e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80039e4:	4975      	ldr	r1, [pc, #468]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 80039e6:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 80039ea:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80039ee:	f013 0f02 	tst.w	r3, #2
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <USART2_IRQHandler+0x1e4>)
 80039f4:	d018      	beq.n	8003a28 <USART2_IRQHandler+0x4c>
 80039f6:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 80039fa:	f020 0002 	bic.w	r0, r0, #2
 80039fe:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 8003a02:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8003a06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a0a:	b962      	cbnz	r2, 8003a26 <USART2_IRQHandler+0x4a>
 8003a0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a10:	2201      	movs	r2, #1
 8003a12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003a16:	2310      	movs	r3, #16
 8003a18:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 8003a1c:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8003a20:	2320      	movs	r3, #32
 8003a22:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8003a26:	bd10      	pop	{r4, pc}
 8003a28:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8003a2c:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a34:	2807      	cmp	r0, #7
 8003a36:	f200 80bc 	bhi.w	8003bb2 <USART2_IRQHandler+0x1d6>
 8003a3a:	e8df f000 	tbb	[pc, r0]
 8003a3e:	41ba1804 			; <UNDEFINED> instruction: 0x41ba1804
 8003a42:	a1807056 	orrge	r7, r0, r6, asr r0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	2107      	movs	r1, #7
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a58:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <USART2_IRQHandler+0x1e8>)
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8193      	strh	r3, [r2, #12]
 8003a62:	2210      	movs	r2, #16
 8003a64:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 8003a66:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	e017      	b.n	8003a9e <USART2_IRQHandler+0xc2>
 8003a6e:	b11a      	cbz	r2, 8003a78 <USART2_IRQHandler+0x9c>
 8003a70:	2acc      	cmp	r2, #204	; 0xcc
 8003a72:	d01b      	beq.n	8003aac <USART2_IRQHandler+0xd0>
 8003a74:	2200      	movs	r2, #0
 8003a76:	e05f      	b.n	8003b38 <USART2_IRQHandler+0x15c>
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003a80:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <USART2_IRQHandler+0x1e8>)
 8003a82:	6851      	ldr	r1, [r2, #4]
 8003a84:	3101      	adds	r1, #1
 8003a86:	6051      	str	r1, [r2, #4]
 8003a88:	2103      	movs	r1, #3
 8003a8a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a92:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8193      	strh	r3, [r2, #12]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 8003a9e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 8003aa6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003aaa:	e7bc      	b.n	8003a26 <USART2_IRQHandler+0x4a>
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ab8:	2204      	movs	r2, #4
 8003aba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003abe:	e7ec      	b.n	8003a9a <USART2_IRQHandler+0xbe>
 8003ac0:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003ac4:	545a      	strb	r2, [r3, r1]
 8003ac6:	1c4a      	adds	r2, r1, #1
 8003ac8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003acc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ad0:	d95e      	bls.n	8003b90 <USART2_IRQHandler+0x1b4>
 8003ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 8003ae4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003ae8:	e7db      	b.n	8003aa2 <USART2_IRQHandler+0xc6>
 8003aea:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003aee:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8003af2:	545a      	strb	r2, [r3, r1]
 8003af4:	1c48      	adds	r0, r1, #1
 8003af6:	3917      	subs	r1, #23
 8003af8:	4422      	add	r2, r4
 8003afa:	29e9      	cmp	r1, #233	; 0xe9
 8003afc:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003b00:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003b04:	d807      	bhi.n	8003b16 <USART2_IRQHandler+0x13a>
 8003b06:	789a      	ldrb	r2, [r3, #2]
 8003b08:	4290      	cmp	r0, r2
 8003b0a:	d104      	bne.n	8003b16 <USART2_IRQHandler+0x13a>
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003b12:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <USART2_IRQHandler+0x1e0>)
 8003b14:	e7a9      	b.n	8003a6a <USART2_IRQHandler+0x8e>
 8003b16:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8003b1a:	d3c2      	bcc.n	8003aa2 <USART2_IRQHandler+0xc6>
 8003b1c:	e7aa      	b.n	8003a74 <USART2_IRQHandler+0x98>
 8003b1e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003b22:	545a      	strb	r2, [r3, r1]
 8003b24:	3101      	adds	r1, #1
 8003b26:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 8003b2a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8003b2e:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8003b32:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003b36:	2206      	movs	r2, #6
 8003b38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003b3c:	e7b1      	b.n	8003aa2 <USART2_IRQHandler+0xc6>
 8003b3e:	2020      	movs	r0, #32
 8003b40:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 8003b44:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8003b48:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003b4c:	541a      	strb	r2, [r3, r0]
 8003b4e:	1aa2      	subs	r2, r4, r2
 8003b50:	b292      	uxth	r2, r2
 8003b52:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003b56:	b912      	cbnz	r2, 8003b5e <USART2_IRQHandler+0x182>
 8003b58:	785a      	ldrb	r2, [r3, #1]
 8003b5a:	2a01      	cmp	r2, #1
 8003b5c:	d003      	beq.n	8003b66 <USART2_IRQHandler+0x18a>
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b64:	e786      	b.n	8003a74 <USART2_IRQHandler+0x98>
 8003b66:	3001      	adds	r0, #1
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <USART2_IRQHandler+0x1ec>)
 8003b6a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8003b6e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003b72:	6850      	ldr	r0, [r2, #4]
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <USART2_IRQHandler+0x1f0>)
 8003b76:	6010      	str	r0, [r2, #0]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 8003b7e:	e779      	b.n	8003a74 <USART2_IRQHandler+0x98>
 8003b80:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003b84:	2917      	cmp	r1, #23
 8003b86:	bf9e      	ittt	ls
 8003b88:	545a      	strbls	r2, [r3, r1]
 8003b8a:	3101      	addls	r1, #1
 8003b8c:	f8c3 1204 	strls.w	r1, [r3, #516]	; 0x204
 8003b90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003b94:	480b      	ldr	r0, [pc, #44]	; (8003bc4 <USART2_IRQHandler+0x1e8>)
 8003b96:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 8003b9a:	8983      	ldrh	r3, [r0, #12]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f1c3 0304 	rsb	r3, r3, #4
 8003ba4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8182      	strh	r2, [r0, #12]
 8003bac:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 8003bb0:	e777      	b.n	8003aa2 <USART2_IRQHandler+0xc6>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003bb8:	e7be      	b.n	8003b38 <USART2_IRQHandler+0x15c>
 8003bba:	bf00      	nop
 8003bbc:	40010000 	andmi	r0, r1, r0
 8003bc0:	200001a8 	andcs	r0, r0, r8, lsr #3
 8003bc4:	200005c0 	andcs	r0, r0, r0, asr #11
 8003bc8:	e0001000 	and	r1, r0, r0
 8003bcc:	200005d8 	ldrdcs	r0, [r0], -r8

08003bd0 <TIMER1_IRQHandler>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bd6:	2008      	movs	r0, #8
 8003bd8:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <TIMER1_IRQHandler+0x98>)
 8003bda:	691c      	ldr	r4, [r3, #16]
 8003bdc:	4923      	ldr	r1, [pc, #140]	; (8003c6c <TIMER1_IRQHandler+0x9c>)
 8003bde:	8813      	ldrh	r3, [r2, #0]
 8003be0:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 8003be4:	07a1      	lsls	r1, r4, #30
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	d51b      	bpl.n	8003c22 <TIMER1_IRQHandler+0x52>
 8003bea:	07dd      	lsls	r5, r3, #31
 8003bec:	d50f      	bpl.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003bee:	8813      	ldrh	r3, [r2, #0]
 8003bf0:	4d1f      	ldr	r5, [pc, #124]	; (8003c70 <TIMER1_IRQHandler+0xa0>)
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	8013      	strh	r3, [r2, #0]
 8003bfa:	2110      	movs	r1, #16
 8003bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c00:	2203      	movs	r2, #3
 8003c02:	4628      	mov	r0, r5
 8003c04:	f005 fa44 	bl	8009090 <gpio_init>
 8003c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c0c:	616b      	str	r3, [r5, #20]
 8003c0e:	4621      	mov	r1, r4
 8003c10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c14:	f005 fd27 	bl	8009666 <timer_interrupt_flag_clear>
 8003c18:	2208      	movs	r2, #8
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <TIMER1_IRQHandler+0x9c>)
 8003c1c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	0760      	lsls	r0, r4, #29
 8003c24:	d509      	bpl.n	8003c3a <TIMER1_IRQHandler+0x6a>
 8003c26:	05d9      	lsls	r1, r3, #23
 8003c28:	d5f1      	bpl.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c2e:	2203      	movs	r2, #3
 8003c30:	2118      	movs	r1, #24
 8003c32:	480f      	ldr	r0, [pc, #60]	; (8003c70 <TIMER1_IRQHandler+0xa0>)
 8003c34:	f005 fa2c 	bl	8009090 <gpio_init>
 8003c38:	e7e9      	b.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003c3a:	0722      	lsls	r2, r4, #28
 8003c3c:	d5e7      	bpl.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003c3e:	05db      	lsls	r3, r3, #23
 8003c40:	d5e5      	bpl.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <TIMER1_IRQHandler+0xa4>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <TIMER1_IRQHandler+0xa8>)
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	61da      	str	r2, [r3, #28]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <TIMER1_IRQHandler+0xac>)
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
 8003c54:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8003c58:	621a      	str	r2, [r3, #32]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	61da      	str	r2, [r3, #28]
 8003c62:	f005 fd9f 	bl	80097a4 <usart_dma_transmit_config>
 8003c66:	e7d2      	b.n	8003c0e <TIMER1_IRQHandler+0x3e>
 8003c68:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8003c6c:	40010000 	andmi	r0, r1, r0
 8003c70:	40011000 	andmi	r1, r1, r0
 8003c74:	40020000 	andmi	r0, r2, r0
 8003c78:	40004800 	andmi	r4, r0, r0, lsl #16
 8003c7c:	200003b8 			; <UNDEFINED> instruction: 0x200003b8

08003c80 <TIMER2_IRQHandler>:
 8003c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c84:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8003c88:	078b      	lsls	r3, r1, #30
 8003c8a:	d511      	bpl.n	8003cb0 <TIMER2_IRQHandler+0x30>
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <TIMER2_IRQHandler+0x5c>)
 8003c8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003c92:	2a03      	cmp	r2, #3
 8003c94:	d10f      	bne.n	8003cb6 <TIMER2_IRQHandler+0x36>
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ca8:	2210      	movs	r2, #16
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <TIMER2_IRQHandler+0x60>)
 8003cac:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003cb0:	480c      	ldr	r0, [pc, #48]	; (8003ce4 <TIMER2_IRQHandler+0x64>)
 8003cb2:	f005 bcd8 	b.w	8009666 <timer_interrupt_flag_clear>
 8003cb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cba:	2a07      	cmp	r2, #7
 8003cbc:	d1f8      	bne.n	8003cb0 <TIMER2_IRQHandler+0x30>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ccc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <TIMER2_IRQHandler+0x60>)
 8003cd4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003cd8:	2220      	movs	r2, #32
 8003cda:	e7e7      	b.n	8003cac <TIMER2_IRQHandler+0x2c>
 8003cdc:	200001a8 	andcs	r0, r0, r8, lsr #3
 8003ce0:	40010000 	andmi	r0, r1, r0
 8003ce4:	40000400 	andmi	r0, r0, r0, lsl #8

08003ce8 <TIMER3_IRQHandler>:
 8003ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <TIMER3_IRQHandler+0x10>)
 8003cee:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8003cf2:	f005 bcb8 	b.w	8009666 <timer_interrupt_flag_clear>
 8003cf6:	bf00      	nop
 8003cf8:	40000800 	andmi	r0, r0, r0, lsl #16

08003cfc <TIMER6_IRQHandler>:
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <TIMER6_IRQHandler+0x18>)
 8003cfe:	4806      	ldr	r0, [pc, #24]	; (8003d18 <TIMER6_IRQHandler+0x1c>)
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	1a52      	subs	r2, r2, r1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	f005 bcaa 	b.w	8009666 <timer_interrupt_flag_clear>
 8003d12:	bf00      	nop
 8003d14:	200005c0 	andcs	r0, r0, r0, asr #11
 8003d18:	40001400 	andmi	r1, r0, r0, lsl #8

08003d1c <Dmx::ClearData(unsigned int)>:
 8003d1c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003d20:	b510      	push	{r4, lr}
 8003d22:	2400      	movs	r4, #0
 8003d24:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <Dmx::ClearData(unsigned int)+0x2c>)
 8003d26:	fb03 2301 	mla	r3, r3, r1, r2
 8003d2a:	f203 2002 	addw	r0, r3, #514	; 0x202
 8003d2e:	f823 4b02 	strh.w	r4, [r3], #2
 8003d32:	4283      	cmp	r3, r0
 8003d34:	d1fb      	bne.n	8003d2e <Dmx::ClearData(unsigned int)+0x12>
 8003d36:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003d3a:	fb03 2201 	mla	r2, r3, r1, r2
 8003d3e:	f240 2301 	movw	r3, #513	; 0x201
 8003d42:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	200003b8 			; <UNDEFINED> instruction: 0x200003b8

08003d4c <Dmx::StartData(unsigned int, unsigned int)>:
 8003d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003d52:	6943      	ldr	r3, [r0, #20]
 8003d54:	460c      	mov	r4, r1
 8003d56:	4615      	mov	r5, r2
 8003d58:	b085      	sub	sp, #20
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d16c      	bne.n	8003e38 <Dmx::StartData(unsigned int, unsigned int)+0xec>
 8003d5e:	4e48      	ldr	r6, [pc, #288]	; (8003e80 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 8003d60:	8834      	ldrh	r4, [r6, #0]
 8003d62:	b2a4      	uxth	r4, r4
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	d15b      	bne.n	8003e20 <Dmx::StartData(unsigned int, unsigned int)+0xd4>
 8003d68:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8003d6c:	f005 fa22 	bl	80091b4 <rcu_periph_clock_enable>
 8003d70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d74:	f005 fb80 	bl	8009478 <timer_deinit>
 8003d78:	236b      	movs	r3, #107	; 0x6b
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 8003d7e:	4669      	mov	r1, sp
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	f8ad 4004 	strh.w	r4, [sp, #4]
 8003d8c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003d90:	f88d 400e 	strb.w	r4, [sp, #14]
 8003d94:	f005 fbd2 	bl	800953c <timer_init>
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003da0:	f005 fc64 	bl	800966c <timer_flag_clear>
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003da8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dac:	f005 fc5b 	bl	8009666 <timer_interrupt_flag_clear>
 8003db0:	2210      	movs	r2, #16
 8003db2:	4621      	mov	r1, r4
 8003db4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003db8:	f005 fc1d 	bl	80095f6 <timer_channel_output_mode_config>
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dc4:	f005 fc17 	bl	80095f6 <timer_channel_output_mode_config>
 8003dc8:	4f2f      	ldr	r7, [pc, #188]	; (8003e88 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003dca:	2210      	movs	r2, #16
 8003dcc:	2102      	movs	r1, #2
 8003dce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dd2:	f005 fc10 	bl	80095f6 <timer_channel_output_mode_config>
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	4621      	mov	r1, r4
 8003dda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dde:	f005 fc30 	bl	8009642 <timer_channel_output_pulse_value_config>
 8003de2:	2101      	movs	r1, #1
 8003de4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003de8:	883a      	ldrh	r2, [r7, #0]
 8003dea:	f005 fc2a 	bl	8009642 <timer_channel_output_pulse_value_config>
 8003dee:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2102      	movs	r1, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003dfe:	f005 fc20 	bl	8009642 <timer_channel_output_pulse_value_config>
 8003e02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e06:	210e      	movs	r1, #14
 8003e08:	f005 fc29 	bl	800965e <timer_interrupt_enable>
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	4b1f      	ldr	r3, [pc, #124]	; (8003e90 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 8003e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003e16:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f005 fbe6 	bl	80095ec <timer_enable>
 8003e20:	2201      	movs	r2, #1
 8003e22:	8831      	ldrh	r1, [r6, #0]
 8003e24:	fa02 f305 	lsl.w	r3, r2, r5
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	8033      	strh	r3, [r6, #0]
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003e30:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e34:	b005      	add	sp, #20
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e38:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003e3c:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 8003e3e:	fb02 3305 	mla	r3, r2, r5, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003e48:	2107      	movs	r1, #7
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f005 fcb0 	bl	80097b0 <usart_flag_get>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d0f9      	beq.n	8003e48 <Dmx::StartData(unsigned int, unsigned int)+0xfc>
 8003e54:	4620      	mov	r0, r4
 8003e56:	4911      	ldr	r1, [pc, #68]	; (8003e9c <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 8003e58:	f005 fccc 	bl	80097f4 <usart_interrupt_flag_clear>
 8003e5c:	f240 3105 	movw	r1, #773	; 0x305
 8003e60:	4620      	mov	r0, r4
 8003e62:	f005 fcb0 	bl	80097c6 <usart_interrupt_enable>
 8003e66:	2202      	movs	r2, #2
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003e6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003e6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e72:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003e76:	f043 0302 	orr.w	r3, r3, #2
 8003e7a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003e7e:	e7d9      	b.n	8003e34 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 8003e80:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8003e84:	20000000 	andcs	r0, r0, r0
 8003e88:	20000008 	andcs	r0, r0, r8
 8003e8c:	20000004 	andcs	r0, r0, r4
 8003e90:	e000e100 	and	lr, r0, r0, lsl #2
 8003e94:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8003e98:	200001a8 	andcs	r0, r0, r8, lsr #3
 8003e9c:	00050305 	andeq	r0, r5, r5, lsl #6

08003ea0 <Dmx::StopData(unsigned int, unsigned int)>:
 8003ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea4:	4f21      	ldr	r7, [pc, #132]	; (8003f2c <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 8003ea6:	4688      	mov	r8, r1
 8003ea8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8003eac:	4614      	mov	r4, r2
 8003eae:	b323      	cbz	r3, 8003efa <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 8003eb0:	6943      	ldr	r3, [r0, #20]
 8003eb2:	bb23      	cbnz	r3, 8003efe <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 8003eb4:	2601      	movs	r6, #1
 8003eb6:	4d1e      	ldr	r5, [pc, #120]	; (8003f30 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 8003eb8:	fa06 f202 	lsl.w	r2, r6, r2
 8003ebc:	882b      	ldrh	r3, [r5, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	ea23 0302 	bic.w	r3, r3, r2
 8003ec4:	802b      	strh	r3, [r5, #0]
 8003ec6:	f3bf 8f5f 	dmb	sy
 8003eca:	882b      	ldrh	r3, [r5, #0]
 8003ecc:	f104 0208 	add.w	r2, r4, #8
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4096      	lsls	r6, r2
 8003ed4:	ea36 0303 	bics.w	r3, r6, r3
 8003ed8:	d105      	bne.n	8003ee6 <Dmx::StopData(unsigned int, unsigned int)+0x46>
 8003eda:	2107      	movs	r1, #7
 8003edc:	4640      	mov	r0, r8
 8003ede:	f005 fc67 	bl	80097b0 <usart_flag_get>
 8003ee2:	2801      	cmp	r0, #1
 8003ee4:	d1f9      	bne.n	8003eda <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 8003ee6:	882b      	ldrh	r3, [r5, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	ea23 0306 	bic.w	r3, r3, r6
 8003eee:	802b      	strh	r3, [r5, #0]
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 8003efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003efe:	f240 3105 	movw	r1, #773	; 0x305
 8003f02:	4640      	mov	r0, r8
 8003f04:	f005 fc6a 	bl	80097dc <usart_interrupt_disable>
 8003f08:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 8003f0e:	fb02 3304 	mla	r3, r2, r4, r3
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003f18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f1c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003f20:	f023 0302 	bic.w	r3, r3, #2
 8003f24:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003f28:	e7e4      	b.n	8003ef4 <Dmx::StopData(unsigned int, unsigned int)+0x54>
 8003f2a:	bf00      	nop
 8003f2c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8003f30:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8003f34:	200001a8 	andcs	r0, r0, r8, lsr #3

08003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	6943      	ldr	r3, [r0, #20]
 8003f3e:	4606      	mov	r6, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	4614      	mov	r4, r2
 8003f44:	d014      	beq.n	8003f70 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 8003f46:	6142      	str	r2, [r0, #20]
 8003f48:	4910      	ldr	r1, [pc, #64]	; (8003f8c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f7ff ffa8 	bl	8003ea0 <Dmx::StopData(unsigned int, unsigned int)>
 8003f50:	b934      	cbnz	r4, 8003f60 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 8003f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003f58:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003f5c:	b94d      	cbnz	r5, 8003f72 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	2c01      	cmp	r4, #1
 8003f62:	d1fb      	bne.n	8003f5c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003f64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003f6a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003f6e:	e7f5      	b.n	8003f5c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003f70:	b135      	cbz	r5, 8003f80 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 8003f72:	4630      	mov	r0, r6
 8003f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4904      	ldr	r1, [pc, #16]	; (8003f8c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003f7c:	f7ff bee6 	b.w	8003d4c <Dmx::StartData(unsigned int, unsigned int)>
 8003f80:	462a      	mov	r2, r5
 8003f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f86:	4901      	ldr	r1, [pc, #4]	; (8003f8c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003f88:	f7ff bf8a 	b.w	8003ea0 <Dmx::StopData(unsigned int, unsigned int)>
 8003f8c:	40004800 	andmi	r4, r0, r0, lsl #16
 8003f90:	40010000 	andmi	r0, r1, r0

08003f94 <Dmx::Dmx()>:
 8003f94:	225c      	movs	r2, #92	; 0x5c
 8003f96:	230c      	movs	r3, #12
 8003f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f9c:	e9c0 2300 	strd	r2, r3, [r0]
 8003fa0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003fa4:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fac:	2400      	movs	r4, #0
 8003fae:	4605      	mov	r5, r0
 8003fb0:	8203      	strh	r3, [r0, #16]
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <Dmx::Dmx()+0x194>)
 8003fb4:	b08b      	sub	sp, #44	; 0x2c
 8003fb6:	6018      	str	r0, [r3, #0]
 8003fb8:	4b5c      	ldr	r3, [pc, #368]	; (800412c <Dmx::Dmx()+0x198>)
 8003fba:	2203      	movs	r2, #3
 8003fbc:	801c      	strh	r4, [r3, #0]
 8003fbe:	2110      	movs	r1, #16
 8003fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc4:	485a      	ldr	r0, [pc, #360]	; (8004130 <Dmx::Dmx()+0x19c>)
 8003fc6:	f005 f863 	bl	8009090 <gpio_init>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f7ff fea5 	bl	8003d1c <Dmx::ClearData(unsigned int)>
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <Dmx::Dmx()+0x1a0>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	601c      	str	r4, [r3, #0]
 8003fda:	4623      	mov	r3, r4
 8003fdc:	f7ff ffac 	bl	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003fe0:	4b55      	ldr	r3, [pc, #340]	; (8004138 <Dmx::Dmx()+0x1a4>)
 8003fe2:	4e56      	ldr	r6, [pc, #344]	; (800413c <Dmx::Dmx()+0x1a8>)
 8003fe4:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003fe8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003fec:	f005 f8e2 	bl	80091b4 <rcu_periph_clock_enable>
 8003ff0:	f240 5001 	movw	r0, #1281	; 0x501
 8003ff4:	f005 f8de 	bl	80091b4 <rcu_periph_clock_enable>
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	f004 ff3e 	bl	8008e7c <dma_deinit>
 8004000:	4b4f      	ldr	r3, [pc, #316]	; (8004140 <Dmx::Dmx()+0x1ac>)
 8004002:	2701      	movs	r7, #1
 8004004:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8004008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800400c:	9308      	str	r3, [sp, #32]
 800400e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004012:	aa03      	add	r2, sp, #12
 8004014:	4639      	mov	r1, r7
 8004016:	4630      	mov	r0, r6
 8004018:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800401c:	9406      	str	r4, [sp, #24]
 800401e:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8004022:	f004 ff51 	bl	8008ec8 <dma_init>
 8004026:	4639      	mov	r1, r7
 8004028:	4630      	mov	r0, r6
 800402a:	f004 ff87 	bl	8008f3c <dma_circulation_disable>
 800402e:	4639      	mov	r1, r7
 8004030:	4630      	mov	r0, r6
 8004032:	f004 ff93 	bl	8008f5c <dma_memory_to_memory_disable>
 8004036:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800403a:	f240 7001 	movw	r0, #1793	; 0x701
 800403e:	f005 f8b9 	bl	80091b4 <rcu_periph_clock_enable>
 8004042:	4630      	mov	r0, r6
 8004044:	f005 fa18 	bl	8009478 <timer_deinit>
 8004048:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800404c:	236b      	movs	r3, #107	; 0x6b
 800404e:	4630      	mov	r0, r6
 8004050:	a903      	add	r1, sp, #12
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	f8ad 4010 	strh.w	r4, [sp, #16]
 8004058:	f8cd 9014 	str.w	r9, [sp, #20]
 800405c:	f8ad 4018 	strh.w	r4, [sp, #24]
 8004060:	f88d 401a 	strb.w	r4, [sp, #26]
 8004064:	f005 fa6a 	bl	800953c <timer_init>
 8004068:	4649      	mov	r1, r9
 800406a:	4630      	mov	r0, r6
 800406c:	f005 fafe 	bl	800966c <timer_flag_clear>
 8004070:	4649      	mov	r1, r9
 8004072:	4630      	mov	r0, r6
 8004074:	f005 faf7 	bl	8009666 <timer_interrupt_flag_clear>
 8004078:	4621      	mov	r1, r4
 800407a:	4630      	mov	r0, r6
 800407c:	2210      	movs	r2, #16
 800407e:	f005 faba 	bl	80095f6 <timer_channel_output_mode_config>
 8004082:	4639      	mov	r1, r7
 8004084:	4630      	mov	r0, r6
 8004086:	2210      	movs	r2, #16
 8004088:	f005 fab5 	bl	80095f6 <timer_channel_output_mode_config>
 800408c:	4630      	mov	r0, r6
 800408e:	2210      	movs	r2, #16
 8004090:	2102      	movs	r1, #2
 8004092:	f005 fab0 	bl	80095f6 <timer_channel_output_mode_config>
 8004096:	2210      	movs	r2, #16
 8004098:	2103      	movs	r1, #3
 800409a:	4630      	mov	r0, r6
 800409c:	f005 faab 	bl	80095f6 <timer_channel_output_mode_config>
 80040a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80040a4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004144 <Dmx::Dmx()+0x1b0>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 80040ae:	f8c8 3000 	str.w	r3, [r8]
 80040b2:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 80040b6:	f005 fa99 	bl	80095ec <timer_enable>
 80040ba:	f240 7005 	movw	r0, #1797	; 0x705
 80040be:	f005 f879 	bl	80091b4 <rcu_periph_clock_enable>
 80040c2:	4630      	mov	r0, r6
 80040c4:	f005 f9d8 	bl	8009478 <timer_deinit>
 80040c8:	f642 232f 	movw	r3, #10799	; 0x2a2f
 80040cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80040d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80040d4:	4630      	mov	r0, r6
 80040d6:	a903      	add	r1, sp, #12
 80040d8:	9305      	str	r3, [sp, #20]
 80040da:	f005 fa2f 	bl	800953c <timer_init>
 80040de:	4649      	mov	r1, r9
 80040e0:	4630      	mov	r0, r6
 80040e2:	f005 fac3 	bl	800966c <timer_flag_clear>
 80040e6:	4649      	mov	r1, r9
 80040e8:	4630      	mov	r0, r6
 80040ea:	f005 fabc 	bl	8009666 <timer_interrupt_flag_clear>
 80040ee:	4639      	mov	r1, r7
 80040f0:	4630      	mov	r0, r6
 80040f2:	f005 fab4 	bl	800965e <timer_interrupt_enable>
 80040f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80040fa:	4630      	mov	r0, r6
 80040fc:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8004100:	f8c8 3004 	str.w	r3, [r8, #4]
 8004104:	f005 fa72 	bl	80095ec <timer_enable>
 8004108:	2302      	movs	r3, #2
 800410a:	2208      	movs	r2, #8
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	490e      	ldr	r1, [pc, #56]	; (8004148 <Dmx::Dmx()+0x1b4>)
 8004110:	4623      	mov	r3, r4
 8004112:	480e      	ldr	r0, [pc, #56]	; (800414c <Dmx::Dmx()+0x1b8>)
 8004114:	f005 fe1a 	bl	8009d4c <gd32_uart_begin>
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	4628      	mov	r0, r5
 800411c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004120:	b00b      	add	sp, #44	; 0x2c
 8004122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004126:	bf00      	nop
 8004128:	200005d4 	ldrdcs	r0, [r0], -r4
 800412c:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8004130:	40010c00 	andmi	r0, r1, r0, lsl #24
 8004134:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 8004138:	200001a8 	andcs	r0, r0, r8, lsr #3
 800413c:	40020000 	andmi	r0, r2, r0
 8004140:	40004804 	andmi	r4, r0, r4, lsl #16
 8004144:	e000e100 	and	lr, r0, r0, lsl #2
 8004148:	0003d090 	muleq	r3, r0, r0
 800414c:	40004800 	andmi	r4, r0, r0, lsl #16

08004150 <Dmx::GetDmxAvailable(unsigned int)>:
 8004150:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8004156:	fb02 3101 	mla	r1, r2, r1, r3
 800415a:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800415e:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8004162:	bf1f      	itttt	ne
 8004164:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8004168:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800416c:	4608      	movne	r0, r1
 800416e:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8004172:	4770      	bx	lr
 8004174:	200001a8 	andcs	r0, r0, r8, lsr #3

08004178 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8004178:	f3bf 8f5f 	dmb	sy
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800417e:	0109      	lsls	r1, r1, #4
 8004180:	5858      	ldr	r0, [r3, r1]
 8004182:	4770      	bx	lr
 8004184:	200005c0 	andcs	r0, r0, r0, asr #11

08004188 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	4614      	mov	r4, r2
 800418c:	461d      	mov	r5, r3
 800418e:	4e1f      	ldr	r6, [pc, #124]	; (800420c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8004190:	2106      	movs	r1, #6
 8004192:	4630      	mov	r0, r6
 8004194:	f005 fb0c 	bl	80097b0 <usart_flag_get>
 8004198:	2800      	cmp	r0, #0
 800419a:	d0f9      	beq.n	8004190 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800419c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80041a0:	4e1b      	ldr	r6, [pc, #108]	; (8004210 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 80041a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a6:	2203      	movs	r2, #3
 80041a8:	4630      	mov	r0, r6
 80041aa:	2110      	movs	r1, #16
 80041ac:	f004 ff70 	bl	8009090 <gpio_init>
 80041b0:	6177      	str	r7, [r6, #20]
 80041b2:	2100      	movs	r1, #0
 80041b4:	20b0      	movs	r0, #176	; 0xb0
 80041b6:	f005 fec9 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 80041ba:	463b      	mov	r3, r7
 80041bc:	4630      	mov	r0, r6
 80041be:	2203      	movs	r2, #3
 80041c0:	2118      	movs	r1, #24
 80041c2:	f004 ff65 	bl	8009090 <gpio_init>
 80041c6:	2100      	movs	r1, #0
 80041c8:	200c      	movs	r0, #12
 80041ca:	f005 febf 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 80041ce:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 80041d2:	4425      	add	r5, r4
 80041d4:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 80041d8:	42ac      	cmp	r4, r5
 80041da:	d109      	bne.n	80041f0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 80041dc:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 80041e0:	4c0a      	ldr	r4, [pc, #40]	; (800420c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 80041e2:	2106      	movs	r1, #6
 80041e4:	4620      	mov	r0, r4
 80041e6:	f005 fae3 	bl	80097b0 <usart_flag_get>
 80041ea:	2801      	cmp	r0, #1
 80041ec:	d10b      	bne.n	8004206 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	2107      	movs	r1, #7
 80041f2:	4630      	mov	r0, r6
 80041f4:	f005 fadc 	bl	80097b0 <usart_flag_get>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d0f9      	beq.n	80041f0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 80041fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004200:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004204:	e7e8      	b.n	80041d8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 8004206:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800420a:	e7ea      	b.n	80041e2 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800420c:	40004800 	andmi	r4, r0, r0, lsl #16
 8004210:	40011000 	andmi	r1, r1, r0

08004214 <Dmx::RdmReceive(unsigned int)>:
 8004214:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <Dmx::RdmReceive(unsigned int)+0x20>)
 800421a:	fb02 3101 	mla	r1, r2, r1, r3
 800421e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8004222:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 8004226:	bf1e      	ittt	ne
 8004228:	2300      	movne	r3, #0
 800422a:	4608      	movne	r0, r1
 800422c:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200001a8 	andcs	r0, r0, r8, lsr #3

08004238 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4604      	mov	r4, r0
 800423c:	460d      	mov	r5, r1
 800423e:	4616      	mov	r6, r2
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 8004242:	20c8      	movs	r0, #200	; 0xc8
 8004244:	6819      	ldr	r1, [r3, #0]
 8004246:	f005 fe81 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 800424a:	4632      	mov	r2, r6
 800424c:	4629      	mov	r1, r5
 800424e:	4620      	mov	r0, r4
 8004250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004254:	f7ff bba2 	b.w	800399c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8004258:	200005d8 	ldrdcs	r0, [r0], -r8

0800425c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	20c8      	movs	r0, #200	; 0xc8
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	4615      	mov	r5, r2
 800426c:	f005 fe6e 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 8004270:	2300      	movs	r3, #0
 8004272:	4f19      	ldr	r7, [pc, #100]	; (80042d8 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8004274:	4631      	mov	r1, r6
 8004276:	461a      	mov	r2, r3
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f7ff fe5d 	bl	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800427e:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 8004282:	4e16      	ldr	r6, [pc, #88]	; (80042dc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8004284:	4425      	add	r5, r4
 8004286:	42ac      	cmp	r4, r5
 8004288:	d115      	bne.n	80042b6 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800428a:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 800428e:	4d13      	ldr	r5, [pc, #76]	; (80042dc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8004290:	2106      	movs	r1, #6
 8004292:	4628      	mov	r0, r5
 8004294:	f005 fa8c 	bl	80097b0 <usart_flag_get>
 8004298:	2801      	cmp	r0, #1
 800429a:	4604      	mov	r4, r0
 800429c:	d116      	bne.n	80042cc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 800429e:	2100      	movs	r1, #0
 80042a0:	2004      	movs	r0, #4
 80042a2:	f005 fe53 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 80042a6:	4623      	mov	r3, r4
 80042a8:	4622      	mov	r2, r4
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b2:	f7ff be41 	b.w	8003f38 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80042b6:	2107      	movs	r1, #7
 80042b8:	4630      	mov	r0, r6
 80042ba:	f005 fa79 	bl	80097b0 <usart_flag_get>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0f9      	beq.n	80042b6 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 80042c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042c6:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 80042ca:	e7dc      	b.n	8004286 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 80042cc:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 80042d0:	e7de      	b.n	8004290 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 80042d2:	bf00      	nop
 80042d4:	200005d8 	ldrdcs	r0, [r0], -r8
 80042d8:	200005d4 	ldrdcs	r0, [r0], -r4
 80042dc:	40004800 	andmi	r4, r0, r0, lsl #16

080042e0 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	2225      	movs	r2, #37	; 0x25
 80042e4:	4604      	mov	r4, r0
 80042e6:	f840 1b04 	str.w	r1, [r0], #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	f004 fba5 	bl	8008a3a <memset>
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042f4:	237f      	movs	r3, #127	; 0x7f
 80042f6:	4620      	mov	r0, r4
 80042f8:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 80042fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8004300:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 8004304:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8004308:	bd10      	pop	{r4, pc}

0800430a <RDMDeviceParams::Load()>:
 800430a:	4601      	mov	r1, r0
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	b130      	cbz	r0, 800431e <RDMDeviceParams::Load()+0x14>
 8004310:	b508      	push	{r3, lr}
 8004312:	6803      	ldr	r3, [r0, #0]
 8004314:	3104      	adds	r1, #4
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4798      	blx	r3
 800431a:	2001      	movs	r0, #1
 800431c:	bd08      	pop	{r3, pc}
 800431e:	4770      	bx	lr

08004320 <RDMDeviceParams::Set(RDMDevice*)>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	6843      	ldr	r3, [r0, #4]
 8004324:	460c      	mov	r4, r1
 8004326:	07d9      	lsls	r1, r3, #31
 8004328:	4605      	mov	r5, r0
 800432a:	d518      	bpl.n	800435e <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800432c:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8004330:	7823      	ldrb	r3, [r4, #0]
 8004332:	2e20      	cmp	r6, #32
 8004334:	bf28      	it	cs
 8004336:	2620      	movcs	r6, #32
 8004338:	f100 0108 	add.w	r1, r0, #8
 800433c:	b1eb      	cbz	r3, 800437a <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800433e:	f104 030b 	add.w	r3, r4, #11
 8004342:	4618      	mov	r0, r3
 8004344:	4632      	mov	r2, r6
 8004346:	f004 fb61 	bl	8008a0c <memmove>
 800434a:	4603      	mov	r3, r0
 800434c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800434e:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8004352:	b120      	cbz	r0, 800435e <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	6897      	ldr	r7, [r2, #8]
 800435a:	4632      	mov	r2, r6
 800435c:	47b8      	blx	r7
 800435e:	686b      	ldr	r3, [r5, #4]
 8004360:	079a      	lsls	r2, r3, #30
 8004362:	bf44      	itt	mi
 8004364:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8004368:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 800436c:	075b      	lsls	r3, r3, #29
 800436e:	bf44      	itt	mi
 8004370:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8004374:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 8004378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437a:	4632      	mov	r2, r6
 800437c:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8004380:	f004 fb44 	bl	8008a0c <memmove>
 8004384:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 8004388:	e7e9      	b.n	800435e <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800438a <RDMDeviceParams::Dump()>:
 800438a:	4770      	bx	lr

0800438c <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800438c:	4770      	bx	lr

0800438e <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800438e:	4770      	bx	lr

08004390 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4604      	mov	r4, r0
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8004396:	f840 3b8c 	str.w	r3, [r0], #140
 800439a:	f7ff f9c3 	bl	8003724 <RDMSubDevices::~RDMSubDevices()>
 800439e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80043a2:	f7fe f9e1 	bl	8002768 <RDMSensors::~RDMSensors()>
 80043a6:	4620      	mov	r0, r4
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	bf00      	nop
 80043ac:	0800a83c 	stmdaeq	r0, {r2, r3, r4, r5, fp, sp, pc}

080043b0 <RDMDeviceResponder::~RDMDeviceResponder()>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4604      	mov	r4, r0
 80043b4:	f7ff ffec 	bl	8004390 <RDMDeviceResponder::~RDMDeviceResponder()>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f004 fa90 	bl	80088de <operator delete(void*)>
 80043be:	4620      	mov	r0, r4
 80043c0:	bd10      	pop	{r4, pc}
	...

080043c4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4604      	mov	r4, r0
 80043c8:	3004      	adds	r0, #4
 80043ca:	460e      	mov	r6, r1
 80043cc:	4615      	mov	r5, r2
 80043ce:	f001 fa03 	bl	80057d8 <RDMDevice::RDMDevice()>
 80043d2:	4620      	mov	r0, r4
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 80043d6:	f840 3b80 	str.w	r3, [r0], #128
 80043da:	f001 f9bd 	bl	8005758 <RDMIdentify::RDMIdentify()>
 80043de:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80043e2:	f7fe fa21 	bl	8002828 <RDMSensors::RDMSensors()>
 80043e6:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80043ea:	f7ff f993 	bl	8003714 <RDMSubDevices::RDMSubDevices()>
 80043ee:	4b1b      	ldr	r3, [pc, #108]	; (800445c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 80043f0:	2100      	movs	r1, #0
 80043f2:	601c      	str	r4, [r3, #0]
 80043f4:	2365      	movs	r3, #101	; 0x65
 80043f6:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 80043fa:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80043fe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8004402:	2301      	movs	r3, #1
 8004404:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8004408:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 800440c:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8004410:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004414:	4293      	cmp	r3, r2
 8004416:	d119      	bne.n	800444c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 8004418:	2100      	movs	r1, #0
 800441a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 800441e:	4293      	cmp	r3, r2
 8004420:	d117      	bne.n	8004452 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 8004422:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 8004426:	f7fd fc31 	bl	8001c8c <RDMSoftwareVersion::GetVersion()>
 800442a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 800442e:	f7fd fc31 	bl	8001c94 <RDMSoftwareVersion::GetVersionLength()>
 8004432:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004436:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	b91b      	cbnz	r3, 8004448 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 8004440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004444:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8004448:	4620      	mov	r0, r4
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f803 1b01 	strb.w	r1, [r3], #1
 8004450:	e7e0      	b.n	8004414 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7e2      	b.n	800441e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 8004458:	0800a83c 	stmdaeq	r0, {r2, r3, r4, r5, fp, sp, pc}
 800445c:	200005dc 	ldrdcs	r0, [r0], -ip

08004460 <RDMDeviceResponder::Init()>:
 8004460:	2301      	movs	r3, #1
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	7103      	strb	r3, [r0, #4]
 8004468:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 800446c:	3056      	adds	r0, #86	; 0x56
 800446e:	2a20      	cmp	r2, #32
 8004470:	bf28      	it	cs
 8004472:	2220      	movcs	r2, #32
 8004474:	4613      	mov	r3, r2
 8004476:	f104 010f 	add.w	r1, r4, #15
 800447a:	3b01      	subs	r3, #1
 800447c:	d25d      	bcs.n	800453a <RDMDeviceResponder::Init()+0xda>
 800447e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004480:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8004484:	b110      	cbz	r0, 800448c <RDMDeviceResponder::Init()+0x2c>
 8004486:	6803      	ldr	r3, [r0, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4798      	blx	r3
 800448c:	f06f 050d 	mvn.w	r5, #13
 8004490:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004494:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8004498:	f104 020e 	add.w	r2, r4, #14
 800449c:	1b2d      	subs	r5, r5, r4
 800449e:	18a9      	adds	r1, r5, r2
 80044a0:	4288      	cmp	r0, r1
 80044a2:	d84f      	bhi.n	8004544 <RDMDeviceResponder::Init()+0xe4>
 80044a4:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80044a8:	f7fd fbf6 	bl	8001c98 <RDMSoftwareVersion::GetVersionId()>
 80044ac:	2201      	movs	r2, #1
 80044ae:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80044b8:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 80044bc:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 80044c0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80044c4:	0a1a      	lsrs	r2, r3, #8
 80044c6:	0e03      	lsrs	r3, r0, #24
 80044c8:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80044cc:	0c03      	lsrs	r3, r0, #16
 80044ce:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80044d2:	0a03      	lsrs	r3, r0, #8
 80044d4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80044d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80044dc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 80044e0:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 80044ea:	685d      	ldr	r5, [r3, #4]
 80044ec:	bb7d      	cbnz	r5, 800454e <RDMDeviceResponder::Init()+0xee>
 80044ee:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 80044f2:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80044f6:	0a03      	lsrs	r3, r0, #8
 80044f8:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80044fc:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 8004500:	2301      	movs	r3, #1
 8004502:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8004506:	0a33      	lsrs	r3, r6, #8
 8004508:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800450c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8004510:	b2c0      	uxtb	r0, r0
 8004512:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 8004516:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800451a:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 800451e:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004522:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8004526:	4293      	cmp	r3, r2
 8004528:	d12a      	bne.n	8004580 <RDMDeviceResponder::Init()+0x120>
 800452a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 800452e:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004532:	4413      	add	r3, r2
 8004534:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800453e:	f800 5c48 	strb.w	r5, [r0, #-72]
 8004542:	e79a      	b.n	800447a <RDMDeviceResponder::Init()+0x1a>
 8004544:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004548:	440b      	add	r3, r1
 800454a:	b29b      	uxth	r3, r3
 800454c:	e7a7      	b.n	800449e <RDMDeviceResponder::Init()+0x3e>
 800454e:	682b      	ldr	r3, [r5, #0]
 8004550:	4628      	mov	r0, r5
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	4798      	blx	r3
 8004556:	0a00      	lsrs	r0, r0, #8
 8004558:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	4628      	mov	r0, r5
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	4798      	blx	r3
 8004564:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	4628      	mov	r0, r5
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	4798      	blx	r3
 8004570:	0a00      	lsrs	r0, r0, #8
 8004572:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	4628      	mov	r0, r5
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	4798      	blx	r3
 800457e:	e7bf      	b.n	8004500 <RDMDeviceResponder::Init()+0xa0>
 8004580:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004584:	7499      	strb	r1, [r3, #18]
 8004586:	e7ce      	b.n	8004526 <RDMDeviceResponder::Init()+0xc6>

08004588 <RDMDeviceResponder::Print()>:
 8004588:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800458a:	4604      	mov	r4, r0
 800458c:	3004      	adds	r0, #4
 800458e:	f001 f997 	bl	80058c0 <RDMDevice::Print()>
 8004592:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004596:	481c      	ldr	r0, [pc, #112]	; (8004608 <RDMDeviceResponder::Print()+0x80>)
 8004598:	681d      	ldr	r5, [r3, #0]
 800459a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800459c:	f7fd fe7c 	bl	8002298 <printf>
 80045a0:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 80045a4:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 80045a8:	4818      	ldr	r0, [pc, #96]	; (800460c <RDMDeviceResponder::Print()+0x84>)
 80045aa:	f7fd fe75 	bl	8002298 <printf>
 80045ae:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80045b2:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80045b6:	4816      	ldr	r0, [pc, #88]	; (8004610 <RDMDeviceResponder::Print()+0x88>)
 80045b8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80045bc:	f7fd fe6c 	bl	8002298 <printf>
 80045c0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80045c4:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 80045c8:	3508      	adds	r5, #8
 80045ca:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80045ce:	4811      	ldr	r0, [pc, #68]	; (8004614 <RDMDeviceResponder::Print()+0x8c>)
 80045d0:	f7fd fe62 	bl	8002298 <printf>
 80045d4:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 80045d8:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80045dc:	b2f3      	uxtb	r3, r6
 80045de:	9500      	str	r5, [sp, #0]
 80045e0:	480d      	ldr	r0, [pc, #52]	; (8004618 <RDMDeviceResponder::Print()+0x90>)
 80045e2:	f7fd fe59 	bl	8002298 <printf>
 80045e6:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80045ea:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80045ee:	480b      	ldr	r0, [pc, #44]	; (800461c <RDMDeviceResponder::Print()+0x94>)
 80045f0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80045f4:	f7fd fe50 	bl	8002298 <printf>
 80045f8:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 80045fc:	4808      	ldr	r0, [pc, #32]	; (8004620 <RDMDeviceResponder::Print()+0x98>)
 80045fe:	b002      	add	sp, #8
 8004600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004604:	f7fd be48 	b.w	8002298 <printf>
 8004608:	0800a780 	stmdaeq	r0, {r7, r8, r9, sl, sp, pc}
 800460c:	0800a79d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, sp, pc}
 8004610:	0800a7b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, sp, pc}
 8004614:	0800a7ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, sp, pc}
 8004618:	0800a7e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, sp, pc}
 800461c:	0800a804 	stmdaeq	r0, {r2, fp, sp, pc}
 8004620:	0800a81c 	stmdaeq	r0, {r2, r3, r4, fp, sp, pc}

08004624 <memcmp>:
 8004624:	b510      	push	{r4, lr}
 8004626:	3901      	subs	r1, #1
 8004628:	4402      	add	r2, r0
 800462a:	4290      	cmp	r0, r2
 800462c:	d101      	bne.n	8004632 <memcmp+0xe>
 800462e:	2000      	movs	r0, #0
 8004630:	e005      	b.n	800463e <memcmp+0x1a>
 8004632:	7803      	ldrb	r3, [r0, #0]
 8004634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004638:	42a3      	cmp	r3, r4
 800463a:	d001      	beq.n	8004640 <memcmp+0x1c>
 800463c:	1b18      	subs	r0, r3, r4
 800463e:	bd10      	pop	{r4, pc}
 8004640:	3001      	adds	r0, #1
 8004642:	e7f2      	b.n	800462a <memcmp+0x6>

08004644 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 8004644:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8004648:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800464c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004650:	3b01      	subs	r3, #1
 8004652:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004656:	6858      	ldr	r0, [r3, #4]
 8004658:	6803      	ldr	r3, [r0, #0]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4718      	bx	r3

0800465e <memcpy.isra.0>:
 800465e:	3801      	subs	r0, #1
 8004660:	440a      	add	r2, r1
 8004662:	4291      	cmp	r1, r2
 8004664:	d100      	bne.n	8004668 <memcpy.isra.0+0xa>
 8004666:	4770      	bx	lr
 8004668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800466c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004670:	e7f7      	b.n	8004662 <memcpy.isra.0+0x4>

08004672 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8004672:	b570      	push	{r4, r5, r6, lr}
 8004674:	790d      	ldrb	r5, [r1, #4]
 8004676:	7803      	ldrb	r3, [r0, #0]
 8004678:	2d20      	cmp	r5, #32
 800467a:	4604      	mov	r4, r0
 800467c:	bf28      	it	cs
 800467e:	2520      	movcs	r5, #32
 8004680:	6809      	ldr	r1, [r1, #0]
 8004682:	b183      	cbz	r3, 80046a6 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x34>
 8004684:	f100 060b 	add.w	r6, r0, #11
 8004688:	4630      	mov	r0, r6
 800468a:	462a      	mov	r2, r5
 800468c:	f7ff ffe7 	bl	800465e <memcpy.isra.0>
 8004690:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004692:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 8004696:	b160      	cbz	r0, 80046b2 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x40>
 8004698:	6803      	ldr	r3, [r0, #0]
 800469a:	462a      	mov	r2, r5
 800469c:	4631      	mov	r1, r6
 800469e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4718      	bx	r3
 80046a6:	462a      	mov	r2, r5
 80046a8:	3052      	adds	r0, #82	; 0x52
 80046aa:	f7ff ffd8 	bl	800465e <memcpy.isra.0>
 80046ae:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 80046b2:	bd70      	pop	{r4, r5, r6, pc}

080046b4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4604      	mov	r4, r0
 80046b8:	1e50      	subs	r0, r2, #1
 80046ba:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80046be:	4615      	mov	r5, r2
 80046c0:	d221      	bcs.n	8004706 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80046c2:	b129      	cbz	r1, 80046d0 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 80046c4:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80046c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046cc:	f7ff b868 	b.w	80037a0 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 80046d0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80046d4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80046d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	3b01      	subs	r3, #1
 80046de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e2:	6858      	ldr	r0, [r3, #4]
 80046e4:	b178      	cbz	r0, 8004706 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80046e6:	6803      	ldr	r3, [r0, #0]
 80046e8:	4629      	mov	r1, r5
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4798      	blx	r3
 80046ee:	b120      	cbz	r0, 80046fa <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 80046f0:	0a2b      	lsrs	r3, r5, #8
 80046f2:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80046f6:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	4620      	mov	r0, r4
 80046fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4718      	bx	r3
 8004706:	bd70      	pop	{r4, r5, r6, pc}

08004708 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 8004708:	b111      	cbz	r1, 8004710 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 800470a:	308c      	adds	r0, #140	; 0x8c
 800470c:	f7ff b872 	b.w	80037f4 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 8004710:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004714:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004718:	3a01      	subs	r2, #1
 800471a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800471e:	4770      	bx	lr

08004720 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 8004720:	b111      	cbz	r1, 8004728 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 8004722:	308c      	adds	r0, #140	; 0x8c
 8004724:	f7ff b85e 	b.w	80037e4 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 8004728:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 800472c:	4770      	bx	lr

0800472e <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 800472e:	b570      	push	{r4, r5, r6, lr}
 8004730:	4604      	mov	r4, r0
 8004732:	b121      	cbz	r1, 800473e <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 8004734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004738:	308c      	adds	r0, #140	; 0x8c
 800473a:	f7ff b84a 	b.w	80037d2 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 800473e:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8004742:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004746:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800474a:	3a01      	subs	r2, #1
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	685d      	ldr	r5, [r3, #4]
 8004752:	b305      	cbz	r5, 8004796 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	4628      	mov	r0, r5
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	4798      	blx	r3
 800475c:	0a00      	lsrs	r0, r0, #8
 800475e:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	4628      	mov	r0, r5
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	4798      	blx	r3
 800476a:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	4628      	mov	r0, r5
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	4798      	blx	r3
 8004776:	0a00      	lsrs	r0, r0, #8
 8004778:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	4628      	mov	r0, r5
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	4798      	blx	r3
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800478a:	4629      	mov	r1, r5
 800478c:	4620      	mov	r0, r4
 800478e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4718      	bx	r3
 8004796:	bd70      	pop	{r4, r5, r6, pc}

08004798 <RDMHandler::RDMHandler(bool)>:
 8004798:	2200      	movs	r2, #0
 800479a:	7001      	strb	r1, [r0, #0]
 800479c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80047a0:	7042      	strb	r2, [r0, #1]
 80047a2:	4770      	bx	lr

080047a4 <RDMHandler::HandleString(char const*, unsigned int)>:
 80047a4:	6883      	ldr	r3, [r0, #8]
 80047a6:	f803 2f17 	strb.w	r2, [r3, #23]!
 80047aa:	440a      	add	r2, r1
 80047ac:	4291      	cmp	r1, r2
 80047ae:	d100      	bne.n	80047b2 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 80047b0:	4770      	bx	lr
 80047b2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80047b6:	f803 0f01 	strb.w	r0, [r3, #1]!
 80047ba:	e7f7      	b.n	80047ac <RDMHandler::HandleString(char const*, unsigned int)+0x8>

080047bc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80047c2:	25cc      	movs	r5, #204	; 0xcc
 80047c4:	701d      	strb	r5, [r3, #0]
 80047c6:	7825      	ldrb	r5, [r4, #0]
 80047c8:	705d      	strb	r5, [r3, #1]
 80047ca:	7ba5      	ldrb	r5, [r4, #14]
 80047cc:	73dd      	strb	r5, [r3, #15]
 80047ce:	2500      	movs	r5, #0
 80047d0:	745d      	strb	r5, [r3, #17]
 80047d2:	7c65      	ldrb	r5, [r4, #17]
 80047d4:	749d      	strb	r5, [r3, #18]
 80047d6:	7ca5      	ldrb	r5, [r4, #18]
 80047d8:	74dd      	strb	r5, [r3, #19]
 80047da:	7ce5      	ldrb	r5, [r4, #19]
 80047dc:	3501      	adds	r5, #1
 80047de:	751d      	strb	r5, [r3, #20]
 80047e0:	7d25      	ldrb	r5, [r4, #20]
 80047e2:	755d      	strb	r5, [r3, #21]
 80047e4:	7d65      	ldrb	r5, [r4, #21]
 80047e6:	759d      	strb	r5, [r3, #22]
 80047e8:	b119      	cbz	r1, 80047f2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 80047ea:	1e4d      	subs	r5, r1, #1
 80047ec:	2d01      	cmp	r5, #1
 80047ee:	d921      	bls.n	8004834 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	7dda      	ldrb	r2, [r3, #23]
 80047f4:	7419      	strb	r1, [r3, #16]
 80047f6:	3218      	adds	r2, #24
 80047f8:	709a      	strb	r2, [r3, #2]
 80047fa:	4a15      	ldr	r2, [pc, #84]	; (8004850 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 80047fc:	1de1      	adds	r1, r4, #7
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	1c9d      	adds	r5, r3, #2
 8004802:	3204      	adds	r2, #4
 8004804:	340d      	adds	r4, #13
 8004806:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800480a:	f805 6f01 	strb.w	r6, [r5, #1]!
 800480e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004812:	42a1      	cmp	r1, r4
 8004814:	71ae      	strb	r6, [r5, #6]
 8004816:	d1f6      	bne.n	8004806 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 8004818:	2200      	movs	r2, #0
 800481a:	7899      	ldrb	r1, [r3, #2]
 800481c:	4613      	mov	r3, r2
 800481e:	6884      	ldr	r4, [r0, #8]
 8004820:	428a      	cmp	r2, r1
 8004822:	eb04 0502 	add.w	r5, r4, r2
 8004826:	d30e      	bcc.n	8004846 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 8004828:	0a1a      	lsrs	r2, r3, #8
 800482a:	702a      	strb	r2, [r5, #0]
 800482c:	6882      	ldr	r2, [r0, #8]
 800482e:	440a      	add	r2, r1
 8004830:	7053      	strb	r3, [r2, #1]
 8004832:	e7dd      	b.n	80047f0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8004834:	7419      	strb	r1, [r3, #16]
 8004836:	2102      	movs	r1, #2
 8004838:	251a      	movs	r5, #26
 800483a:	75d9      	strb	r1, [r3, #23]
 800483c:	0a11      	lsrs	r1, r2, #8
 800483e:	709d      	strb	r5, [r3, #2]
 8004840:	7619      	strb	r1, [r3, #24]
 8004842:	765a      	strb	r2, [r3, #25]
 8004844:	e7d9      	b.n	80047fa <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 8004846:	5ca5      	ldrb	r5, [r4, r2]
 8004848:	3201      	adds	r2, #1
 800484a:	442b      	add	r3, r5
 800484c:	b29b      	uxth	r3, r3
 800484e:	e7e7      	b.n	8004820 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 8004850:	200005dc 	ldrdcs	r0, [r0], -ip

08004854 <RDMHandler::RespondMessageAck()>:
 8004854:	6843      	ldr	r3, [r0, #4]
 8004856:	7d9a      	ldrb	r2, [r3, #22]
 8004858:	b90a      	cbnz	r2, 800485e <RDMHandler::RespondMessageAck()+0xa>
 800485a:	2218      	movs	r2, #24
 800485c:	705a      	strb	r2, [r3, #1]
 800485e:	2200      	movs	r2, #0
 8004860:	4611      	mov	r1, r2
 8004862:	f7ff bfab 	b.w	80047bc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08004868 <RDMHandler::GetSupportedParameters(unsigned short)>:
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 800486a:	2900      	cmp	r1, #0
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 800486e:	bf08      	it	eq
 8004870:	461a      	moveq	r2, r3
 8004872:	b4f0      	push	{r4, r5, r6, r7}
 8004874:	bf14      	ite	ne
 8004876:	2108      	movne	r1, #8
 8004878:	211e      	moveq	r1, #30
 800487a:	2518      	movs	r5, #24
 800487c:	4614      	mov	r4, r2
 800487e:	2300      	movs	r3, #0
 8004880:	fb05 2501 	mla	r5, r5, r1, r2
 8004884:	7d66      	ldrb	r6, [r4, #21]
 8004886:	b10e      	cbz	r6, 800488c <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 8004888:	3301      	adds	r3, #1
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3418      	adds	r4, #24
 800488e:	42ac      	cmp	r4, r5
 8004890:	d1f8      	bne.n	8004884 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 8004892:	6886      	ldr	r6, [r0, #8]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	75f3      	strb	r3, [r6, #23]
 8004898:	230c      	movs	r3, #12
 800489a:	4359      	muls	r1, r3
 800489c:	2300      	movs	r3, #0
 800489e:	461c      	mov	r4, r3
 80048a0:	f102 0c15 	add.w	ip, r2, #21
 80048a4:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 80048a8:	b14d      	cbz	r5, 80048be <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 80048aa:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80048ae:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80048b2:	0a2d      	lsrs	r5, r5, #8
 80048b4:	763d      	strb	r5, [r7, #24]
 80048b6:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80048ba:	3401      	adds	r4, #1
 80048bc:	767d      	strb	r5, [r7, #25]
 80048be:	330c      	adds	r3, #12
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d1ef      	bne.n	80048a4 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 80048c4:	bcf0      	pop	{r4, r5, r6, r7}
 80048c6:	f7ff bfc5 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80048ca:	bf00      	nop
 80048cc:	0800a868 	stmdaeq	r0, {r3, r5, r6, fp, sp, pc}
 80048d0:	0800ab38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, sp, pc}

080048d4 <RDMHandler::GetDeviceInfo(unsigned short)>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4b18      	ldr	r3, [pc, #96]	; (8004938 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 80048d8:	4605      	mov	r5, r0
 80048da:	681c      	ldr	r4, [r3, #0]
 80048dc:	b349      	cbz	r1, 8004932 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 80048de:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80048e2:	f7fe ff37 	bl	8003754 <RDMSubDevices::GetInfo(unsigned short)>
 80048e6:	b1b8      	cbz	r0, 8004918 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 80048e8:	8803      	ldrh	r3, [r0, #0]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 80048f0:	8803      	ldrh	r3, [r0, #0]
 80048f2:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 80048f6:	7903      	ldrb	r3, [r0, #4]
 80048f8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80048fc:	7943      	ldrb	r3, [r0, #5]
 80048fe:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 8004902:	8843      	ldrh	r3, [r0, #2]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 800490a:	8843      	ldrh	r3, [r0, #2]
 800490c:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 8004910:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8004914:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 8004918:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 800491c:	2213      	movs	r2, #19
 800491e:	68a8      	ldr	r0, [r5, #8]
 8004920:	75c2      	strb	r2, [r0, #23]
 8004922:	3018      	adds	r0, #24
 8004924:	f7ff fe9b 	bl	800465e <memcpy.isra.0>
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492e:	f7ff bf91 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004932:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8004936:	e7f1      	b.n	800491c <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8004938:	200005dc 	ldrdcs	r0, [r0], -ip

0800493c <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	2301      	movs	r3, #1
 8004940:	6886      	ldr	r6, [r0, #8]
 8004942:	4605      	mov	r5, r0
 8004944:	75f3      	strb	r3, [r6, #23]
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800494e:	b37b      	cbz	r3, 80049b0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8004950:	f06f 0c0d 	mvn.w	ip, #13
 8004954:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 8004958:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800495c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8004960:	f104 020e 	add.w	r2, r4, #14
 8004964:	ebac 0c04 	sub.w	ip, ip, r4
 8004968:	eb0c 0702 	add.w	r7, ip, r2
 800496c:	4287      	cmp	r7, r0
 800496e:	d30a      	bcc.n	8004986 <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 8004970:	4299      	cmp	r1, r3
 8004972:	d00d      	beq.n	8004990 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8004974:	2300      	movs	r3, #0
 8004976:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800497a:	7633      	strb	r3, [r6, #24]
 800497c:	4628      	mov	r0, r5
 800497e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004982:	f7ff bf67 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004986:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800498a:	443b      	add	r3, r7
 800498c:	b29b      	uxth	r3, r3
 800498e:	e7eb      	b.n	8004968 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8004990:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004994:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8004998:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 800499c:	440b      	add	r3, r1
 800499e:	429a      	cmp	r2, r3
 80049a0:	d1e8      	bne.n	8004974 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 80049a2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80049a6:	f7fe ff69 	bl	800387c <RDMSubDevices::GetFactoryDefaults()>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d0e2      	beq.n	8004976 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80049b0:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80049b4:	e7e1      	b.n	800497a <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80049b6:	bf00      	nop
 80049b8:	200005dc 	ldrdcs	r0, [r0], -ip

080049bc <RDMHandler::GetProductDetailIdList(unsigned short)>:
 80049bc:	2102      	movs	r1, #2
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80049c6:	6883      	ldr	r3, [r0, #8]
 80049c8:	75d9      	strb	r1, [r3, #23]
 80049ca:	0a11      	lsrs	r1, r2, #8
 80049cc:	7619      	strb	r1, [r3, #24]
 80049ce:	765a      	strb	r2, [r3, #25]
 80049d0:	f7ff bf40 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80049d4:	200005dc 	ldrdcs	r0, [r0], -ip

080049d8 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
 80049dc:	220a      	movs	r2, #10
 80049de:	4904      	ldr	r1, [pc, #16]	; (80049f0 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 80049e0:	f7ff fee0 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 80049e4:	4620      	mov	r0, r4
 80049e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ea:	f7ff bf33 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80049ee:	bf00      	nop
 80049f0:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}

080049f4 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4604      	mov	r4, r0
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 80049fa:	6819      	ldr	r1, [r3, #0]
 80049fc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 8004a00:	3130      	adds	r1, #48	; 0x30
 8004a02:	f7ff fecf 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 8004a06:	4620      	mov	r0, r4
 8004a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a0c:	f7ff bf22 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004a10:	200005dc 	ldrdcs	r0, [r0], -ip

08004a14 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 8004a16:	b513      	push	{r0, r1, r4, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	b171      	cbz	r1, 8004a3c <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8004a1e:	466a      	mov	r2, sp
 8004a20:	308c      	adds	r0, #140	; 0x8c
 8004a22:	f7fe fe9f 	bl	8003764 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 8004a26:	4620      	mov	r0, r4
 8004a28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004a2c:	9900      	ldr	r1, [sp, #0]
 8004a2e:	f7ff feb9 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7ff ff0e 	bl	8004854 <RDMHandler::RespondMessageAck()>
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd10      	pop	{r4, pc}
 8004a3c:	f100 030f 	add.w	r3, r0, #15
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004a46:	f88d 3004 	strb.w	r3, [sp, #4]
 8004a4a:	e7ec      	b.n	8004a26 <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8004a4c:	200005dc 	ldrdcs	r0, [r0], -ip

08004a50 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8004a50:	b510      	push	{r4, lr}
 8004a52:	4604      	mov	r4, r0
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004a5c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004a60:	f7ff fea0 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 8004a64:	4620      	mov	r0, r4
 8004a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a6a:	f7ff bef3 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004a6e:	bf00      	nop
 8004a70:	200005dc 	ldrdcs	r0, [r0], -ip

08004a74 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8004a74:	2201      	movs	r2, #1
 8004a76:	6883      	ldr	r3, [r0, #8]
 8004a78:	75da      	strb	r2, [r3, #23]
 8004a7a:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	761a      	strb	r2, [r3, #24]
 8004a80:	f7ff bee8 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004a84:	200005e0 	andcs	r0, r0, r0, ror #11

08004a88 <RDMHandler::GetLanguage(unsigned short)>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8004a8e:	2202      	movs	r2, #2
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	31c3      	adds	r1, #195	; 0xc3
 8004a94:	f7ff fe86 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9e:	f7ff bed9 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004aa2:	bf00      	nop
 8004aa4:	200005dc 	ldrdcs	r0, [r0], -ip

08004aa8 <RDMHandler::GetPersonality(unsigned short)>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	4f0d      	ldr	r7, [pc, #52]	; (8004ae0 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8004aac:	4604      	mov	r4, r0
 8004aae:	460e      	mov	r6, r1
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	b189      	cbz	r1, 8004ad8 <RDMHandler::GetPersonality(unsigned short)+0x30>
 8004ab4:	308c      	adds	r0, #140	; 0x8c
 8004ab6:	f7fe fe84 	bl	80037c2 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 8004aba:	4605      	mov	r5, r0
 8004abc:	4631      	mov	r1, r6
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f7ff fe2e 	bl	8004720 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	7658      	strb	r0, [r3, #25]
 8004aca:	75da      	strb	r2, [r3, #23]
 8004acc:	761d      	strb	r5, [r3, #24]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ad4:	f7ff bebe 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004ad8:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 8004adc:	e7ee      	b.n	8004abc <RDMHandler::GetPersonality(unsigned short)+0x14>
 8004ade:	bf00      	nop
 8004ae0:	200005dc 	ldrdcs	r0, [r0], -ip

08004ae4 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 8004ae6:	b510      	push	{r4, lr}
 8004ae8:	4604      	mov	r4, r0
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	b169      	cbz	r1, 8004b0a <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8004aee:	308c      	adds	r0, #140	; 0x8c
 8004af0:	f7fe fe4e 	bl	8003790 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 8004af4:	2202      	movs	r2, #2
 8004af6:	68a3      	ldr	r3, [r4, #8]
 8004af8:	75da      	strb	r2, [r3, #23]
 8004afa:	0a02      	lsrs	r2, r0, #8
 8004afc:	7658      	strb	r0, [r3, #25]
 8004afe:	761a      	strb	r2, [r3, #24]
 8004b00:	4620      	mov	r0, r4
 8004b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b06:	f7ff bea5 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004b0a:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8004b0e:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8004b12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004b16:	b298      	uxth	r0, r3
 8004b18:	e7ec      	b.n	8004af4 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 8004b1a:	bf00      	nop
 8004b1c:	200005dc 	ldrdcs	r0, [r0], -ip

08004b20 <RDMHandler::GetDeviceHours(unsigned short)>:
 8004b20:	2104      	movs	r1, #4
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 8004b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b2c:	6883      	ldr	r3, [r0, #8]
 8004b2e:	75d9      	strb	r1, [r3, #23]
 8004b30:	2100      	movs	r1, #0
 8004b32:	7619      	strb	r1, [r3, #24]
 8004b34:	7659      	strb	r1, [r3, #25]
 8004b36:	0a11      	lsrs	r1, r2, #8
 8004b38:	7699      	strb	r1, [r3, #26]
 8004b3a:	76da      	strb	r2, [r3, #27]
 8004b3c:	f7ff be8a 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004b40:	200017ac 	andcs	r1, r0, ip, lsr #15
 8004b44:	0036ee80 	eorseq	lr, r6, r0, lsl #29

08004b48 <RDMHandler::GetDisplayInvert(unsigned short)>:
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6882      	ldr	r2, [r0, #8]
 8004b4c:	75d3      	strb	r3, [r2, #23]
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	b103      	cbz	r3, 8004b58 <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 8004b56:	7b5b      	ldrb	r3, [r3, #13]
 8004b58:	7613      	strb	r3, [r2, #24]
 8004b5a:	f7ff be7b 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004b5e:	bf00      	nop
 8004b60:	20001684 	andcs	r1, r0, r4, lsl #13

08004b64 <RDMHandler::GetDisplayLevel(unsigned short)>:
 8004b64:	2301      	movs	r3, #1
 8004b66:	6882      	ldr	r2, [r0, #8]
 8004b68:	75d3      	strb	r3, [r2, #23]
 8004b6a:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	b103      	cbz	r3, 8004b74 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8004b72:	7b1b      	ldrb	r3, [r3, #12]
 8004b74:	7613      	strb	r3, [r2, #24]
 8004b76:	f7ff be6d 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004b7a:	bf00      	nop
 8004b7c:	20001684 	andcs	r1, r0, r4, lsl #13

08004b80 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	a901      	add	r1, sp, #4
 8004b8c:	f003 fd03 	bl	8008596 <Hardware::GetTime(tm*)>
 8004b90:	9a06      	ldr	r2, [sp, #24]
 8004b92:	68a3      	ldr	r3, [r4, #8]
 8004b94:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 8004b98:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004b9c:	765a      	strb	r2, [r3, #25]
 8004b9e:	9a05      	ldr	r2, [sp, #20]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	3201      	adds	r2, #1
 8004ba4:	769a      	strb	r2, [r3, #26]
 8004ba6:	9a04      	ldr	r2, [sp, #16]
 8004ba8:	7619      	strb	r1, [r3, #24]
 8004baa:	76da      	strb	r2, [r3, #27]
 8004bac:	9a03      	ldr	r2, [sp, #12]
 8004bae:	771a      	strb	r2, [r3, #28]
 8004bb0:	9a02      	ldr	r2, [sp, #8]
 8004bb2:	775a      	strb	r2, [r3, #29]
 8004bb4:	9a01      	ldr	r2, [sp, #4]
 8004bb6:	779a      	strb	r2, [r3, #30]
 8004bb8:	2207      	movs	r2, #7
 8004bba:	75da      	strb	r2, [r3, #23]
 8004bbc:	f7ff fe4a 	bl	8004854 <RDMHandler::RespondMessageAck()>
 8004bc0:	b00a      	add	sp, #40	; 0x28
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	20001770 	andcs	r1, r0, r0, ror r7

08004bc8 <RDMHandler::GetPowerState(unsigned short)>:
 8004bc8:	2201      	movs	r2, #1
 8004bca:	6883      	ldr	r3, [r0, #8]
 8004bcc:	75da      	strb	r2, [r3, #23]
 8004bce:	22ff      	movs	r2, #255	; 0xff
 8004bd0:	761a      	strb	r2, [r3, #24]
 8004bd2:	f7ff be3f 	b.w	8004854 <RDMHandler::RespondMessageAck()>

08004bd6 <RDMHandler::GetPerformSelfTest(unsigned short)>:
 8004bd6:	b538      	push	{r3, r4, r5, lr}
 8004bd8:	2301      	movs	r3, #1
 8004bda:	6885      	ldr	r5, [r0, #8]
 8004bdc:	4604      	mov	r4, r0
 8004bde:	75eb      	strb	r3, [r5, #23]
 8004be0:	f7fc ff38 	bl	8001a54 <rdm::selftest::Get()>
 8004be4:	3800      	subs	r0, #0
 8004be6:	bf18      	it	ne
 8004be8:	2001      	movne	r0, #1
 8004bea:	7628      	strb	r0, [r5, #24]
 8004bec:	4620      	mov	r0, r4
 8004bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf2:	f7ff be2f 	b.w	8004854 <RDMHandler::RespondMessageAck()>
	...

08004bf8 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	4904      	ldr	r1, [pc, #16]	; (8004c10 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8004c00:	f7ff fdd0 	bl	80047a4 <RDMHandler::HandleString(char const*, unsigned int)>
 8004c04:	4620      	mov	r0, r4
 8004c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c0a:	f7ff be23 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004c0e:	bf00      	nop
 8004c10:	0800a857 	stmdaeq	r0, {r0, r1, r2, r4, r6, fp, sp, pc}

08004c14 <RDMHandler::GetSlotInfo(unsigned short)>:
 8004c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004ca0 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	6887      	ldr	r7, [r0, #8]
 8004c20:	4689      	mov	r9, r1
 8004c22:	f8d8 0000 	ldr.w	r0, [r8]
 8004c26:	b1b9      	cbz	r1, 8004c58 <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 8004c28:	308c      	adds	r0, #140	; 0x8c
 8004c2a:	f7fe fdc2 	bl	80037b2 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 8004c2e:	f04f 0a00 	mov.w	sl, #0
 8004c32:	282e      	cmp	r0, #46	; 0x2e
 8004c34:	bf28      	it	cs
 8004c36:	202e      	movcs	r0, #46	; 0x2e
 8004c38:	4654      	mov	r4, sl
 8004c3a:	b285      	uxth	r5, r0
 8004c3c:	fa1f f18a 	uxth.w	r1, sl
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d311      	bcc.n	8004c68 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 8004c44:	b2e4      	uxtb	r4, r4
 8004c46:	75fc      	strb	r4, [r7, #23]
 8004c48:	3418      	adds	r4, #24
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	70bc      	strb	r4, [r7, #2]
 8004c4e:	f7ff fe01 	bl	8004854 <RDMHandler::RespondMessageAck()>
 8004c52:	b002      	add	sp, #8
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004c5c:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 8004c60:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 8004c64:	b298      	uxth	r0, r3
 8004c66:	e7e2      	b.n	8004c2e <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8004c68:	f1b9 0f00 	cmp.w	r9, #0
 8004c6c:	d115      	bne.n	8004c9a <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8004c6e:	f8d8 0000 	ldr.w	r0, [r8]
 8004c72:	aa01      	add	r2, sp, #4
 8004c74:	f7ff fce6 	bl	8004644 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004c78:	b178      	cbz	r0, 8004c9a <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8004c7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004c7e:	193a      	adds	r2, r7, r4
 8004c80:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004c84:	7693      	strb	r3, [r2, #26]
 8004c86:	1d23      	adds	r3, r4, #4
 8004c88:	0a08      	lsrs	r0, r1, #8
 8004c8a:	443b      	add	r3, r7
 8004c8c:	f882 9018 	strb.w	r9, [r2, #24]
 8004c90:	f882 a019 	strb.w	sl, [r2, #25]
 8004c94:	76d0      	strb	r0, [r2, #27]
 8004c96:	3405      	adds	r4, #5
 8004c98:	7619      	strb	r1, [r3, #24]
 8004c9a:	f10a 0a01 	add.w	sl, sl, #1
 8004c9e:	e7cd      	b.n	8004c3c <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8004ca0:	200005dc 	ldrdcs	r0, [r0], -ip

08004ca4 <RDMHandler::RespondMessageNack(unsigned short)>:
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	f7ff bd88 	b.w	80047bc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08004cac <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	6843      	ldr	r3, [r0, #4]
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	7d9a      	ldrb	r2, [r3, #22]
 8004cb4:	2a01      	cmp	r2, #1
 8004cb6:	d004      	beq.n	8004cc2 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 8004cb8:	2101      	movs	r1, #1
 8004cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbe:	f7ff bff1 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cc2:	7ddb      	ldrb	r3, [r3, #23]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d003      	beq.n	8004cd0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004cc8:	2bff      	cmp	r3, #255	; 0xff
 8004cca:	d001      	beq.n	8004cd0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004ccc:	2106      	movs	r1, #6
 8004cce:	e7f4      	b.n	8004cba <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	68a2      	ldr	r2, [r4, #8]
 8004cd4:	2bff      	cmp	r3, #255	; 0xff
 8004cd6:	75d1      	strb	r1, [r2, #23]
 8004cd8:	d102      	bne.n	8004ce0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8004cda:	2104      	movs	r1, #4
 8004cdc:	4620      	mov	r0, r4
 8004cde:	e7ec      	b.n	8004cba <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f003 fc6e 	bl	80085c4 <Hardware::Reboot()>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0f6      	beq.n	8004cda <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8004cec:	bd10      	pop	{r4, pc}
 8004cee:	bf00      	nop
 8004cf0:	20001770 	andcs	r1, r0, r0, ror r7

08004cf4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	6843      	ldr	r3, [r0, #4]
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	7d9a      	ldrb	r2, [r3, #22]
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	2a01      	cmp	r2, #1
 8004d00:	d004      	beq.n	8004d0c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 8004d02:	2101      	movs	r1, #1
 8004d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d08:	f7ff bfcc 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d0c:	7ddb      	ldrb	r3, [r3, #23]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d901      	bls.n	8004d16 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 8004d12:	2106      	movs	r1, #6
 8004d14:	e7f6      	b.n	8004d04 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8004d16:	4912      	ldr	r1, [pc, #72]	; (8004d60 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8004d18:	4f12      	ldr	r7, [pc, #72]	; (8004d64 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8004d1a:	680e      	ldr	r6, [r1, #0]
 8004d1c:	4912      	ldr	r1, [pc, #72]	; (8004d68 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8004d1e:	6808      	ldr	r0, [r1, #0]
 8004d20:	4912      	ldr	r1, [pc, #72]	; (8004d6c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 8004d22:	b98b      	cbnz	r3, 8004d48 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x54>
 8004d24:	700b      	strb	r3, [r1, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	2102      	movs	r1, #2
 8004d2a:	f003 fba1 	bl	8008470 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 8004d2e:	7839      	ldrb	r1, [r7, #0]
 8004d30:	b111      	cbz	r1, 8004d38 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7fc ff62 	bl	8001bfc <RDMIdentify::Off(rdm::identify::Mode)>
 8004d38:	b98d      	cbnz	r5, 8004d5e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6a>
 8004d3a:	68a3      	ldr	r3, [r4, #8]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	75dd      	strb	r5, [r3, #23]
 8004d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d44:	f7ff bd86 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004d48:	700a      	strb	r2, [r1, #0]
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	f003 fb90 	bl	8008470 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
 8004d50:	7839      	ldrb	r1, [r7, #0]
 8004d52:	2900      	cmp	r1, #0
 8004d54:	d0f0      	beq.n	8004d38 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7fc ff32 	bl	8001bc0 <RDMIdentify::On(rdm::identify::Mode)>
 8004d5c:	e7ec      	b.n	8004d38 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x44>
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	200005e4 	andcs	r0, r0, r4, ror #11
 8004d64:	200005e1 	andcs	r0, r0, r1, ror #11
 8004d68:	20001770 	andcs	r1, r0, r0, ror r7
 8004d6c:	200005e0 	andcs	r0, r0, r0, ror #11

08004d70 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004d70:	b470      	push	{r4, r5, r6}
 8004d72:	6842      	ldr	r2, [r0, #4]
 8004d74:	4603      	mov	r3, r0
 8004d76:	7d94      	ldrb	r4, [r2, #22]
 8004d78:	2c02      	cmp	r4, #2
 8004d7a:	d003      	beq.n	8004d84 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	bc70      	pop	{r4, r5, r6}
 8004d80:	f7ff bf90 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d84:	4c0b      	ldr	r4, [pc, #44]	; (8004db4 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8004d86:	7dd6      	ldrb	r6, [r2, #23]
 8004d88:	6824      	ldr	r4, [r4, #0]
 8004d8a:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 8004d8e:	42ae      	cmp	r6, r5
 8004d90:	d104      	bne.n	8004d9c <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8004d92:	7e15      	ldrb	r5, [r2, #24]
 8004d94:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 8004d98:	4295      	cmp	r5, r2
 8004d9a:	d002      	beq.n	8004da2 <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004d9c:	2106      	movs	r1, #6
 8004d9e:	4618      	mov	r0, r3
 8004da0:	e7ed      	b.n	8004d7e <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8004da2:	b921      	cbnz	r1, 8004dae <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004da4:	6883      	ldr	r3, [r0, #8]
 8004da6:	75d9      	strb	r1, [r3, #23]
 8004da8:	bc70      	pop	{r4, r5, r6}
 8004daa:	f7ff bd53 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004dae:	bc70      	pop	{r4, r5, r6}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	200005dc 	ldrdcs	r0, [r0], -ip

08004db8 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 8004db8:	6842      	ldr	r2, [r0, #4]
 8004dba:	7d92      	ldrb	r2, [r2, #22]
 8004dbc:	b112      	cbz	r2, 8004dc4 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	f7ff bf70 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	6883      	ldr	r3, [r0, #8]
 8004dc8:	75d9      	strb	r1, [r3, #23]
 8004dca:	761a      	strb	r2, [r3, #24]
 8004dcc:	765a      	strb	r2, [r3, #25]
 8004dce:	769a      	strb	r2, [r3, #26]
 8004dd0:	76da      	strb	r2, [r3, #27]
 8004dd2:	f7ff bd3f 	b.w	8004854 <RDMHandler::RespondMessageAck()>
	...

08004dd8 <RDMHandler::SetPersonality(bool, unsigned short)>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	6843      	ldr	r3, [r0, #4]
 8004ddc:	4615      	mov	r5, r2
 8004dde:	7d9a      	ldrb	r2, [r3, #22]
 8004de0:	4604      	mov	r4, r0
 8004de2:	2a01      	cmp	r2, #1
 8004de4:	d004      	beq.n	8004df0 <RDMHandler::SetPersonality(bool, unsigned short)+0x18>
 8004de6:	2101      	movs	r1, #1
 8004de8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004dec:	f7ff bf5a 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004df0:	4f0c      	ldr	r7, [pc, #48]	; (8004e24 <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>)
 8004df2:	7dde      	ldrb	r6, [r3, #23]
 8004df4:	4629      	mov	r1, r5
 8004df6:	6838      	ldr	r0, [r7, #0]
 8004df8:	f7ff fc92 	bl	8004720 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004dfc:	b10e      	cbz	r6, 8004e02 <RDMHandler::SetPersonality(bool, unsigned short)+0x2a>
 8004dfe:	4286      	cmp	r6, r0
 8004e00:	d902      	bls.n	8004e08 <RDMHandler::SetPersonality(bool, unsigned short)+0x30>
 8004e02:	2106      	movs	r1, #6
 8004e04:	4620      	mov	r0, r4
 8004e06:	e7ef      	b.n	8004de8 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8004e08:	4632      	mov	r2, r6
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7ff fc8e 	bl	800472e <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004e12:	2200      	movs	r2, #0
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	4620      	mov	r0, r4
 8004e18:	75da      	strb	r2, [r3, #23]
 8004e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e1e:	f7ff bd19 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004e22:	bf00      	nop
 8004e24:	200005dc 	ldrdcs	r0, [r0], -ip

08004e28 <RDMHandler::GetPersonalityDescription(unsigned short)>:
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	6843      	ldr	r3, [r0, #4]
 8004e2e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004ea8 <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 8004e32:	7dde      	ldrb	r6, [r3, #23]
 8004e34:	4604      	mov	r4, r0
 8004e36:	f8d9 0000 	ldr.w	r0, [r9]
 8004e3a:	460f      	mov	r7, r1
 8004e3c:	f7ff fc70 	bl	8004720 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004e40:	b10e      	cbz	r6, 8004e46 <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 8004e42:	4286      	cmp	r6, r0
 8004e44:	d905      	bls.n	8004e52 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 8004e46:	4620      	mov	r0, r4
 8004e48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	2106      	movs	r1, #6
 8004e4e:	f7ff bf29 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e52:	4632      	mov	r2, r6
 8004e54:	4639      	mov	r1, r7
 8004e56:	f8d9 0000 	ldr.w	r0, [r9]
 8004e5a:	f7ff fc55 	bl	8004708 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004e5e:	8803      	ldrh	r3, [r0, #0]
 8004e60:	68a5      	ldr	r5, [r4, #8]
 8004e62:	0a1a      	lsrs	r2, r3, #8
 8004e64:	4639      	mov	r1, r7
 8004e66:	766a      	strb	r2, [r5, #25]
 8004e68:	76ab      	strb	r3, [r5, #26]
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	f8d9 0000 	ldr.w	r0, [r9]
 8004e70:	762e      	strb	r6, [r5, #24]
 8004e72:	f7ff fc49 	bl	8004708 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f105 081b 	add.w	r8, r5, #27
 8004e7c:	1dc1      	adds	r1, r0, #7
 8004e7e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	42b3      	cmp	r3, r6
 8004e84:	d203      	bcs.n	8004e8e <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 8004e86:	3301      	adds	r3, #1
 8004e88:	2b21      	cmp	r3, #33	; 0x21
 8004e8a:	d107      	bne.n	8004e9c <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	3203      	adds	r2, #3
 8004e90:	75ea      	strb	r2, [r5, #23]
 8004e92:	4620      	mov	r0, r4
 8004e94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e98:	f7ff bcdc 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004e9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004ea0:	f808 2b01 	strb.w	r2, [r8], #1
 8004ea4:	e7eb      	b.n	8004e7e <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 8004ea6:	bf00      	nop
 8004ea8:	200005dc 	ldrdcs	r0, [r0], -ip

08004eac <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	6843      	ldr	r3, [r0, #4]
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	7d9a      	ldrb	r2, [r3, #22]
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2a02      	cmp	r2, #2
 8004eba:	d004      	beq.n	8004ec6 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec2:	f7ff beef 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ec6:	7dda      	ldrb	r2, [r3, #23]
 8004ec8:	7e1b      	ldrb	r3, [r3, #24]
 8004eca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	1e53      	subs	r3, r2, #1
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed6:	d301      	bcc.n	8004edc <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8004ed8:	2106      	movs	r1, #6
 8004eda:	e7f0      	b.n	8004ebe <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f7ff fbe8 	bl	80046b4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004ee4:	b935      	cbnz	r5, 8004ef4 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	4620      	mov	r0, r4
 8004eea:	75dd      	strb	r5, [r3, #23]
 8004eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef0:	f7ff bcb0 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	200005dc 	ldrdcs	r0, [r0], -ip

08004efc <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	6843      	ldr	r3, [r0, #4]
 8004f00:	4605      	mov	r5, r0
 8004f02:	7dde      	ldrb	r6, [r3, #23]
 8004f04:	2eff      	cmp	r6, #255	; 0xff
 8004f06:	d004      	beq.n	8004f12 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <RDMHandler::GetSensorDefinition(unsigned short)+0xac>)
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	7903      	ldrb	r3, [r0, #4]
 8004f0e:	42b3      	cmp	r3, r6
 8004f10:	d805      	bhi.n	8004f1e <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004f12:	4628      	mov	r0, r5
 8004f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f18:	2106      	movs	r1, #6
 8004f1a:	f7ff bec3 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f1e:	4631      	mov	r1, r6
 8004f20:	68ac      	ldr	r4, [r5, #8]
 8004f22:	f7fd fc39 	bl	8002798 <RDMSensors::GetDefintion(unsigned char)>
 8004f26:	7802      	ldrb	r2, [r0, #0]
 8004f28:	4603      	mov	r3, r0
 8004f2a:	42b2      	cmp	r2, r6
 8004f2c:	d1f1      	bne.n	8004f12 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004f2e:	7622      	strb	r2, [r4, #24]
 8004f30:	7842      	ldrb	r2, [r0, #1]
 8004f32:	4621      	mov	r1, r4
 8004f34:	7662      	strb	r2, [r4, #25]
 8004f36:	7882      	ldrb	r2, [r0, #2]
 8004f38:	300b      	adds	r0, #11
 8004f3a:	76a2      	strb	r2, [r4, #26]
 8004f3c:	f810 2c08 	ldrb.w	r2, [r0, #-8]
 8004f40:	76e2      	strb	r2, [r4, #27]
 8004f42:	f910 2c06 	ldrsb.w	r2, [r0, #-6]
 8004f46:	7722      	strb	r2, [r4, #28]
 8004f48:	f830 2c07 	ldrh.w	r2, [r0, #-7]
 8004f4c:	7762      	strb	r2, [r4, #29]
 8004f4e:	f910 2c04 	ldrsb.w	r2, [r0, #-4]
 8004f52:	77a2      	strb	r2, [r4, #30]
 8004f54:	f830 2c05 	ldrh.w	r2, [r0, #-5]
 8004f58:	77e2      	strb	r2, [r4, #31]
 8004f5a:	f910 2c02 	ldrsb.w	r2, [r0, #-2]
 8004f5e:	f884 2020 	strb.w	r2, [r4, #32]
 8004f62:	f830 2c03 	ldrh.w	r2, [r0, #-3]
 8004f66:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004f6a:	f990 2000 	ldrsb.w	r2, [r0]
 8004f6e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8004f72:	f830 2c01 	ldrh.w	r2, [r0, #-1]
 8004f76:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004f7a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004f7e:	f801 2f24 	strb.w	r2, [r1, #36]!
 8004f82:	220d      	movs	r2, #13
 8004f84:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 8004f88:	f1a2 060d 	sub.w	r6, r2, #13
 8004f8c:	42b7      	cmp	r7, r6
 8004f8e:	dc05      	bgt.n	8004f9c <RDMHandler::GetSensorDefinition(unsigned short)+0xa0>
 8004f90:	75e2      	strb	r2, [r4, #23]
 8004f92:	4628      	mov	r0, r5
 8004f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f98:	f7ff bc5c 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8004f9c:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8004fa0:	3201      	adds	r2, #1
 8004fa2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fa6:	e7ed      	b.n	8004f84 <RDMHandler::GetSensorDefinition(unsigned short)+0x88>
 8004fa8:	20000194 	mulcs	r0, r4, r1

08004fac <RDMHandler::GetSensorValue(unsigned short)>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	6843      	ldr	r3, [r0, #4]
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	7d9a      	ldrb	r2, [r3, #22]
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	d004      	beq.n	8004fc2 <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004fb8:	2101      	movs	r1, #1
 8004fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fbe:	f7ff be71 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8004fc2:	7dde      	ldrb	r6, [r3, #23]
 8004fc4:	2eff      	cmp	r6, #255	; 0xff
 8004fc6:	d004      	beq.n	8004fd2 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004fc8:	4b17      	ldr	r3, [pc, #92]	; (8005028 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	7903      	ldrb	r3, [r0, #4]
 8004fce:	42b3      	cmp	r3, r6
 8004fd0:	d802      	bhi.n	8004fd8 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004fd2:	2106      	movs	r1, #6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	e7f0      	b.n	8004fba <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004fd8:	4631      	mov	r1, r6
 8004fda:	68ac      	ldr	r4, [r5, #8]
 8004fdc:	f7fd fbe1 	bl	80027a2 <RDMSensors::GetValues(unsigned char)>
 8004fe0:	7a03      	ldrb	r3, [r0, #8]
 8004fe2:	42b3      	cmp	r3, r6
 8004fe4:	d1f5      	bne.n	8004fd2 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004fe6:	2309      	movs	r3, #9
 8004fe8:	75e3      	strb	r3, [r4, #23]
 8004fea:	2321      	movs	r3, #33	; 0x21
 8004fec:	70a3      	strb	r3, [r4, #2]
 8004fee:	7a03      	ldrb	r3, [r0, #8]
 8004ff0:	7623      	strb	r3, [r4, #24]
 8004ff2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004ff6:	7663      	strb	r3, [r4, #25]
 8004ff8:	8803      	ldrh	r3, [r0, #0]
 8004ffa:	76a3      	strb	r3, [r4, #26]
 8004ffc:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8005000:	76e3      	strb	r3, [r4, #27]
 8005002:	8843      	ldrh	r3, [r0, #2]
 8005004:	7723      	strb	r3, [r4, #28]
 8005006:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800500a:	7763      	strb	r3, [r4, #29]
 800500c:	8883      	ldrh	r3, [r0, #4]
 800500e:	77a3      	strb	r3, [r4, #30]
 8005010:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8005014:	77e3      	strb	r3, [r4, #31]
 8005016:	88c3      	ldrh	r3, [r0, #6]
 8005018:	4628      	mov	r0, r5
 800501a:	f884 3020 	strb.w	r3, [r4, #32]
 800501e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005022:	f7ff bc17 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8005026:	bf00      	nop
 8005028:	20000194 	mulcs	r0, r4, r1

0800502c <RDMHandler::SetSensorValue(bool, unsigned short)>:
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	6843      	ldr	r3, [r0, #4]
 8005032:	4606      	mov	r6, r0
 8005034:	7d9a      	ldrb	r2, [r3, #22]
 8005036:	460d      	mov	r5, r1
 8005038:	2a01      	cmp	r2, #1
 800503a:	d004      	beq.n	8005046 <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 800503c:	2101      	movs	r1, #1
 800503e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005042:	f7ff be2f 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005046:	7ddf      	ldrb	r7, [r3, #23]
 8005048:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80050dc <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 800504c:	2fff      	cmp	r7, #255	; 0xff
 800504e:	f8d8 3000 	ldr.w	r3, [r8]
 8005052:	d004      	beq.n	800505e <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8005054:	791a      	ldrb	r2, [r3, #4]
 8005056:	42ba      	cmp	r2, r7
 8005058:	d801      	bhi.n	800505e <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 800505a:	2106      	movs	r1, #6
 800505c:	e7ef      	b.n	800503e <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 800505e:	4639      	mov	r1, r7
 8005060:	4618      	mov	r0, r3
 8005062:	f7fd fba3 	bl	80027ac <RDMSensors::SetValues(unsigned char)>
 8005066:	bbb5      	cbnz	r5, 80050d6 <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8005068:	2fff      	cmp	r7, #255	; 0xff
 800506a:	68b4      	ldr	r4, [r6, #8]
 800506c:	d112      	bne.n	8005094 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 800506e:	2309      	movs	r3, #9
 8005070:	75e3      	strb	r3, [r4, #23]
 8005072:	2321      	movs	r3, #33	; 0x21
 8005074:	7625      	strb	r5, [r4, #24]
 8005076:	70a3      	strb	r3, [r4, #2]
 8005078:	7665      	strb	r5, [r4, #25]
 800507a:	76a5      	strb	r5, [r4, #26]
 800507c:	76e5      	strb	r5, [r4, #27]
 800507e:	7725      	strb	r5, [r4, #28]
 8005080:	7765      	strb	r5, [r4, #29]
 8005082:	77a5      	strb	r5, [r4, #30]
 8005084:	77e5      	strb	r5, [r4, #31]
 8005086:	f884 5020 	strb.w	r5, [r4, #32]
 800508a:	4630      	mov	r0, r6
 800508c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005090:	f7ff bbe0 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8005094:	4639      	mov	r1, r7
 8005096:	f8d8 0000 	ldr.w	r0, [r8]
 800509a:	f7fd fb82 	bl	80027a2 <RDMSensors::GetValues(unsigned char)>
 800509e:	2309      	movs	r3, #9
 80050a0:	75e3      	strb	r3, [r4, #23]
 80050a2:	2321      	movs	r3, #33	; 0x21
 80050a4:	70a3      	strb	r3, [r4, #2]
 80050a6:	7a03      	ldrb	r3, [r0, #8]
 80050a8:	7623      	strb	r3, [r4, #24]
 80050aa:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80050ae:	7663      	strb	r3, [r4, #25]
 80050b0:	8803      	ldrh	r3, [r0, #0]
 80050b2:	76a3      	strb	r3, [r4, #26]
 80050b4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80050b8:	76e3      	strb	r3, [r4, #27]
 80050ba:	8843      	ldrh	r3, [r0, #2]
 80050bc:	7723      	strb	r3, [r4, #28]
 80050be:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80050c2:	7763      	strb	r3, [r4, #29]
 80050c4:	8883      	ldrh	r3, [r0, #4]
 80050c6:	77a3      	strb	r3, [r4, #30]
 80050c8:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80050cc:	77e3      	strb	r3, [r4, #31]
 80050ce:	88c3      	ldrh	r3, [r0, #6]
 80050d0:	f884 3020 	strb.w	r3, [r4, #32]
 80050d4:	e7d9      	b.n	800508a <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 80050d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050da:	bf00      	nop
 80050dc:	20000194 	mulcs	r0, r4, r1

080050e0 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	6843      	ldr	r3, [r0, #4]
 80050e4:	4604      	mov	r4, r0
 80050e6:	7d9a      	ldrb	r2, [r3, #22]
 80050e8:	460d      	mov	r5, r1
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	d004      	beq.n	80050f8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 80050ee:	2101      	movs	r1, #1
 80050f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f4:	f7ff bdd6 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 80050f8:	7dd9      	ldrb	r1, [r3, #23]
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 80050fc:	29ff      	cmp	r1, #255	; 0xff
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	7903      	ldrb	r3, [r0, #4]
 8005102:	d103      	bne.n	800510c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8005104:	b923      	cbnz	r3, 8005110 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8005106:	2106      	movs	r1, #6
 8005108:	4620      	mov	r0, r4
 800510a:	e7f1      	b.n	80050f0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 800510c:	4299      	cmp	r1, r3
 800510e:	d2fa      	bcs.n	8005106 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8005110:	f7fd fb63 	bl	80027da <RDMSensors::SetRecord(unsigned char)>
 8005114:	b935      	cbnz	r5, 8005124 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	4620      	mov	r0, r4
 800511a:	75dd      	strb	r5, [r3, #23]
 800511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005120:	f7ff bb98 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	bf00      	nop
 8005128:	20000194 	mulcs	r0, r4, r1

0800512c <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 800512c:	2104      	movs	r1, #4
 800512e:	f7ff bdb9 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08005134 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	6843      	ldr	r3, [r0, #4]
 8005138:	4604      	mov	r4, r0
 800513a:	7d9a      	ldrb	r2, [r3, #22]
 800513c:	2a01      	cmp	r2, #1
 800513e:	d004      	beq.n	800514a <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8005140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005144:	2101      	movs	r1, #1
 8005146:	f7ff bdad 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 800514a:	7ddd      	ldrb	r5, [r3, #23]
 800514c:	2d02      	cmp	r5, #2
 800514e:	d102      	bne.n	8005156 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8005150:	2106      	movs	r1, #6
 8005152:	f7ff fda7 	bl	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005156:	1e6b      	subs	r3, r5, #1
 8005158:	4259      	negs	r1, r3
 800515a:	4159      	adcs	r1, r3
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6998      	ldr	r0, [r3, #24]
 8005162:	b110      	cbz	r0, 800516a <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8005164:	6803      	ldr	r3, [r0, #0]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	4798      	blx	r3
 800516a:	2200      	movs	r2, #0
 800516c:	68a3      	ldr	r3, [r4, #8]
 800516e:	4620      	mov	r0, r4
 8005170:	75da      	strb	r2, [r3, #23]
 8005172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005176:	f7ff bb6d 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 800517a:	bf00      	nop
 800517c:	20001684 	andcs	r1, r0, r4, lsl #13

08005180 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	6843      	ldr	r3, [r0, #4]
 8005184:	4604      	mov	r4, r0
 8005186:	7d99      	ldrb	r1, [r3, #22]
 8005188:	2901      	cmp	r1, #1
 800518a:	d004      	beq.n	8005196 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 800518c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005190:	2101      	movs	r1, #1
 8005192:	f7ff bd87 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005196:	4e0b      	ldr	r6, [pc, #44]	; (80051c4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8005198:	7ddd      	ldrb	r5, [r3, #23]
 800519a:	6830      	ldr	r0, [r6, #0]
 800519c:	b105      	cbz	r5, 80051a0 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 800519e:	2100      	movs	r1, #0
 80051a0:	f7fb fff6 	bl	8001190 <Display::SetSleep(bool)>
 80051a4:	6833      	ldr	r3, [r6, #0]
 80051a6:	6998      	ldr	r0, [r3, #24]
 80051a8:	b118      	cbz	r0, 80051b2 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 80051aa:	6803      	ldr	r3, [r0, #0]
 80051ac:	4629      	mov	r1, r5
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4798      	blx	r3
 80051b2:	2200      	movs	r2, #0
 80051b4:	68a3      	ldr	r3, [r4, #8]
 80051b6:	4620      	mov	r0, r4
 80051b8:	75da      	strb	r2, [r3, #23]
 80051ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051be:	f7ff bb49 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80051c2:	bf00      	nop
 80051c4:	20001684 	andcs	r1, r0, r4, lsl #13

080051c8 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	6843      	ldr	r3, [r0, #4]
 80051cc:	4604      	mov	r4, r0
 80051ce:	7d9a      	ldrb	r2, [r3, #22]
 80051d0:	b08a      	sub	sp, #40	; 0x28
 80051d2:	2a07      	cmp	r2, #7
 80051d4:	d005      	beq.n	80051e2 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 80051d6:	2101      	movs	r1, #1
 80051d8:	b00a      	add	sp, #40	; 0x28
 80051da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051de:	f7ff bd61 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 80051e2:	7dd8      	ldrb	r0, [r3, #23]
 80051e4:	7e1a      	ldrb	r2, [r3, #24]
 80051e6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80051ea:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 80051ee:	9206      	str	r2, [sp, #24]
 80051f0:	7e5a      	ldrb	r2, [r3, #25]
 80051f2:	3a01      	subs	r2, #1
 80051f4:	9205      	str	r2, [sp, #20]
 80051f6:	7e9a      	ldrb	r2, [r3, #26]
 80051f8:	9204      	str	r2, [sp, #16]
 80051fa:	7eda      	ldrb	r2, [r3, #27]
 80051fc:	9203      	str	r2, [sp, #12]
 80051fe:	7f1a      	ldrb	r2, [r3, #28]
 8005200:	7f5b      	ldrb	r3, [r3, #29]
 8005202:	9202      	str	r2, [sp, #8]
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	b979      	cbnz	r1, 8005228 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 800520a:	a901      	add	r1, sp, #4
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f003 f9ad 	bl	800856c <Hardware::SetTime(tm const*)>
 8005212:	b918      	cbnz	r0, 800521c <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8005214:	2104      	movs	r1, #4
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff fd44 	bl	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 800521c:	2200      	movs	r2, #0
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	4620      	mov	r0, r4
 8005222:	75da      	strb	r2, [r3, #23]
 8005224:	f7ff fb16 	bl	8004854 <RDMHandler::RespondMessageAck()>
 8005228:	b00a      	add	sp, #40	; 0x28
 800522a:	bd10      	pop	{r4, pc}
 800522c:	20001770 	andcs	r1, r0, r0, ror r7

08005230 <RDMHandler::SetPowerState(bool, unsigned short)>:
 8005230:	6842      	ldr	r2, [r0, #4]
 8005232:	7d91      	ldrb	r1, [r2, #22]
 8005234:	2901      	cmp	r1, #1
 8005236:	d002      	beq.n	800523e <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8005238:	2101      	movs	r1, #1
 800523a:	f7ff bd33 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 800523e:	7dd1      	ldrb	r1, [r2, #23]
 8005240:	1eca      	subs	r2, r1, #3
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	2afb      	cmp	r2, #251	; 0xfb
 8005246:	d801      	bhi.n	800524c <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8005248:	2106      	movs	r1, #6
 800524a:	e7f6      	b.n	800523a <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 800524c:	29ff      	cmp	r1, #255	; 0xff
 800524e:	6883      	ldr	r3, [r0, #8]
 8005250:	d103      	bne.n	800525a <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8005252:	2200      	movs	r2, #0
 8005254:	75da      	strb	r2, [r3, #23]
 8005256:	f7ff bafd 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 800525a:	2104      	movs	r1, #4
 800525c:	e7ed      	b.n	800523a <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

0800525e <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 800525e:	b510      	push	{r4, lr}
 8005260:	6843      	ldr	r3, [r0, #4]
 8005262:	4604      	mov	r4, r0
 8005264:	7d9a      	ldrb	r2, [r3, #22]
 8005266:	2a01      	cmp	r2, #1
 8005268:	d004      	beq.n	8005274 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 800526a:	2101      	movs	r1, #1
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005270:	f7ff bd18 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005274:	7dd8      	ldrb	r0, [r3, #23]
 8005276:	f7fc fbf3 	bl	8001a60 <rdm::selftest::Set(unsigned char)>
 800527a:	b910      	cbnz	r0, 8005282 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 800527c:	2106      	movs	r1, #6
 800527e:	4620      	mov	r0, r4
 8005280:	e7f4      	b.n	800526c <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8005282:	2200      	movs	r2, #0
 8005284:	68a3      	ldr	r3, [r4, #8]
 8005286:	4620      	mov	r0, r4
 8005288:	75da      	strb	r2, [r3, #23]
 800528a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800528e:	f7ff bae1 	b.w	8004854 <RDMHandler::RespondMessageAck()>

08005292 <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8005292:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005294:	6845      	ldr	r5, [r0, #4]
 8005296:	4604      	mov	r4, r0
 8005298:	a901      	add	r1, sp, #4
 800529a:	7de8      	ldrb	r0, [r5, #23]
 800529c:	f7fc fc14 	bl	8001ac8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 80052a0:	4603      	mov	r3, r0
 80052a2:	b928      	cbnz	r0, 80052b0 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 80052a4:	2106      	movs	r1, #6
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff fcfc 	bl	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 80052ac:	b003      	add	sp, #12
 80052ae:	bd30      	pop	{r4, r5, pc}
 80052b0:	9a01      	ldr	r2, [sp, #4]
 80052b2:	2a20      	cmp	r2, #32
 80052b4:	bf84      	itt	hi
 80052b6:	2220      	movhi	r2, #32
 80052b8:	9201      	strhi	r2, [sp, #4]
 80052ba:	9901      	ldr	r1, [sp, #4]
 80052bc:	68a2      	ldr	r2, [r4, #8]
 80052be:	1c48      	adds	r0, r1, #1
 80052c0:	75d0      	strb	r0, [r2, #23]
 80052c2:	7de8      	ldrb	r0, [r5, #23]
 80052c4:	4419      	add	r1, r3
 80052c6:	f802 0f18 	strb.w	r0, [r2, #24]!
 80052ca:	428b      	cmp	r3, r1
 80052cc:	d103      	bne.n	80052d6 <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff fac0 	bl	8004854 <RDMHandler::RespondMessageAck()>
 80052d4:	e7ea      	b.n	80052ac <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 80052d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052da:	f802 0f01 	strb.w	r0, [r2, #1]!
 80052de:	e7f4      	b.n	80052ca <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

080052e0 <RDMHandler::GetSlotDescription(unsigned short)>:
 80052e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052e2:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 80052e4:	6846      	ldr	r6, [r0, #4]
 80052e6:	4604      	mov	r4, r0
 80052e8:	7df3      	ldrb	r3, [r6, #23]
 80052ea:	7e35      	ldrb	r5, [r6, #24]
 80052ec:	6810      	ldr	r0, [r2, #0]
 80052ee:	b939      	cbnz	r1, 8005300 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 80052f0:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 80052f4:	b2ad      	uxth	r5, r5
 80052f6:	466a      	mov	r2, sp
 80052f8:	4629      	mov	r1, r5
 80052fa:	f7ff f9a3 	bl	8004644 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 80052fe:	b928      	cbnz	r0, 800530c <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8005300:	2106      	movs	r1, #6
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff fcce 	bl	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005308:	b002      	add	sp, #8
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	4628      	mov	r0, r5
 800530e:	f8bd 1000 	ldrh.w	r1, [sp]
 8005312:	aa01      	add	r2, sp, #4
 8005314:	f000 fa3e 	bl	8005794 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 8005318:	4603      	mov	r3, r0
 800531a:	2800      	cmp	r0, #0
 800531c:	d0f0      	beq.n	8005300 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 800531e:	9a01      	ldr	r2, [sp, #4]
 8005320:	2a20      	cmp	r2, #32
 8005322:	bf84      	itt	hi
 8005324:	2220      	movhi	r2, #32
 8005326:	9201      	strhi	r2, [sp, #4]
 8005328:	9901      	ldr	r1, [sp, #4]
 800532a:	68a2      	ldr	r2, [r4, #8]
 800532c:	1c88      	adds	r0, r1, #2
 800532e:	75d0      	strb	r0, [r2, #23]
 8005330:	7df0      	ldrb	r0, [r6, #23]
 8005332:	4419      	add	r1, r3
 8005334:	7610      	strb	r0, [r2, #24]
 8005336:	7e30      	ldrb	r0, [r6, #24]
 8005338:	f802 0f19 	strb.w	r0, [r2, #25]!
 800533c:	428b      	cmp	r3, r1
 800533e:	d103      	bne.n	8005348 <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 8005340:	4620      	mov	r0, r4
 8005342:	f7ff fa87 	bl	8004854 <RDMHandler::RespondMessageAck()>
 8005346:	e7df      	b.n	8005308 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8005348:	f813 0b01 	ldrb.w	r0, [r3], #1
 800534c:	f802 0f01 	strb.w	r0, [r2, #1]!
 8005350:	e7f4      	b.n	800533c <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 8005352:	bf00      	nop
 8005354:	200005dc 	ldrdcs	r0, [r0], -ip

08005358 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8005358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535a:	6843      	ldr	r3, [r0, #4]
 800535c:	4605      	mov	r5, r0
 800535e:	7d9b      	ldrb	r3, [r3, #22]
 8005360:	460e      	mov	r6, r1
 8005362:	b12b      	cbz	r3, 8005370 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8005364:	2101      	movs	r1, #1
 8005366:	b003      	add	sp, #12
 8005368:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800536c:	f7ff bc9a 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005370:	f06f 070d 	mvn.w	r7, #13
 8005374:	4b25      	ldr	r3, [pc, #148]	; (800540c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb4>)
 8005376:	4669      	mov	r1, sp
 8005378:	681c      	ldr	r4, [r3, #0]
 800537a:	f104 0356 	add.w	r3, r4, #86	; 0x56
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005384:	1d20      	adds	r0, r4, #4
 8005386:	f88d 3004 	strb.w	r3, [sp, #4]
 800538a:	f7ff f972 	bl	8004672 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800538e:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005392:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8005396:	f104 020e 	add.w	r2, r4, #14
 800539a:	1b3f      	subs	r7, r7, r4
 800539c:	18b9      	adds	r1, r7, r2
 800539e:	4288      	cmp	r0, r1
 80053a0:	d82c      	bhi.n	80053fc <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 80053a2:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 80053a6:	2201      	movs	r2, #1
 80053a8:	2100      	movs	r1, #0
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7ff f9bf 	bl	800472e <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 80053b0:	2100      	movs	r1, #0
 80053b2:	4620      	mov	r0, r4
 80053b4:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 80053b8:	f7ff f97c 	bl	80046b4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 80053bc:	2213      	movs	r2, #19
 80053be:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80053c2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80053c6:	f7ff f94a 	bl	800465e <memcpy.isra.0>
 80053ca:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80053ce:	f7fe fa68 	bl	80038a2 <RDMSubDevices::SetFactoryDefaults()>
 80053d2:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80053d6:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 80053da:	4413      	add	r3, r2
 80053dc:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 80053e0:	2301      	movs	r3, #1
 80053e2:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 80053e6:	f7fc fa4d 	bl	8001884 <rdm::device::responder::factorydefaults()>
 80053ea:	b966      	cbnz	r6, 8005406 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xae>
 80053ec:	4628      	mov	r0, r5
 80053ee:	68ab      	ldr	r3, [r5, #8]
 80053f0:	75de      	strb	r6, [r3, #23]
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80053f8:	f7ff ba2c 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80053fc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005400:	440b      	add	r3, r1
 8005402:	b29b      	uxth	r3, r3
 8005404:	e7ca      	b.n	800539c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8005406:	b003      	add	sp, #12
 8005408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540a:	bf00      	nop
 800540c:	200005dc 	ldrdcs	r0, [r0], -ip

08005410 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8005410:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005412:	6845      	ldr	r5, [r0, #4]
 8005414:	460e      	mov	r6, r1
 8005416:	7dab      	ldrb	r3, [r5, #22]
 8005418:	4604      	mov	r4, r0
 800541a:	2b20      	cmp	r3, #32
 800541c:	4611      	mov	r1, r2
 800541e:	d905      	bls.n	800542c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8005420:	2101      	movs	r1, #1
 8005422:	b002      	add	sp, #8
 8005424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005428:	f7ff bc3c 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 800542c:	4a0d      	ldr	r2, [pc, #52]	; (8005464 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 800542e:	6810      	ldr	r0, [r2, #0]
 8005430:	f105 0217 	add.w	r2, r5, #23
 8005434:	b159      	cbz	r1, 800544e <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8005436:	308c      	adds	r0, #140	; 0x8c
 8005438:	f7fe f99d 	bl	8003776 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 800543c:	b97e      	cbnz	r6, 800545e <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 800543e:	4620      	mov	r0, r4
 8005440:	68a3      	ldr	r3, [r4, #8]
 8005442:	75de      	strb	r6, [r3, #23]
 8005444:	b002      	add	sp, #8
 8005446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800544a:	f7ff ba03 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 800544e:	4669      	mov	r1, sp
 8005450:	3004      	adds	r0, #4
 8005452:	9200      	str	r2, [sp, #0]
 8005454:	f88d 3004 	strb.w	r3, [sp, #4]
 8005458:	f7ff f90b 	bl	8004672 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800545c:	e7ee      	b.n	800543c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 800545e:	b002      	add	sp, #8
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	bf00      	nop
 8005464:	200005dc 	ldrdcs	r0, [r0], -ip

08005468 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8005468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800546c:	4616      	mov	r6, r2
 800546e:	2700      	movs	r7, #0
 8005470:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 8005474:	2c20      	cmp	r4, #32
 8005476:	46be      	mov	lr, r7
 8005478:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800547c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005480:	d004      	beq.n	800548c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 8005482:	2105      	movs	r1, #5
 8005484:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005488:	f7ff bc0c 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 800548c:	4c2d      	ldr	r4, [pc, #180]	; (8005544 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 800548e:	6824      	ldr	r4, [r4, #0]
 8005490:	88a4      	ldrh	r4, [r4, #4]
 8005492:	4294      	cmp	r4, r2
 8005494:	d205      	bcs.n	80054a2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8005496:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800549a:	42a2      	cmp	r2, r4
 800549c:	d001      	beq.n	80054a2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800549e:	2109      	movs	r1, #9
 80054a0:	e7f0      	b.n	8005484 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80054a2:	f04f 0c1e 	mov.w	ip, #30
 80054a6:	2400      	movs	r4, #0
 80054a8:	4d27      	ldr	r5, [pc, #156]	; (8005548 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 80054aa:	f8b5 9000 	ldrh.w	r9, [r5]
 80054ae:	4599      	cmp	r9, r3
 80054b0:	bf02      	ittt	eq
 80054b2:	462c      	moveq	r4, r5
 80054b4:	7daf      	ldrbeq	r7, [r5, #22]
 80054b6:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 80054ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80054be:	f105 0518 	add.w	r5, r5, #24
 80054c2:	d1f2      	bne.n	80054aa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 80054c4:	b90c      	cbnz	r4, 80054ca <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 80054c6:	2100      	movs	r1, #0
 80054c8:	e7dc      	b.n	8005484 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80054ca:	7803      	ldrb	r3, [r0, #0]
 80054cc:	b19b      	cbz	r3, 80054f6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	d0f9      	beq.n	80054c6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 80054d2:	2e20      	cmp	r6, #32
 80054d4:	d121      	bne.n	800551a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d131      	bne.n	800553e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 80054da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054de:	429a      	cmp	r2, r3
 80054e0:	d0dd      	beq.n	800549e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 80054e2:	6863      	ldr	r3, [r4, #4]
 80054e4:	b913      	cbnz	r3, 80054ec <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 80054e6:	68a1      	ldr	r1, [r4, #8]
 80054e8:	07cd      	lsls	r5, r1, #31
 80054ea:	d5ca      	bpl.n	8005482 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 80054ec:	7d21      	ldrb	r1, [r4, #20]
 80054ee:	4541      	cmp	r1, r8
 80054f0:	d005      	beq.n	80054fe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 80054f2:	2101      	movs	r1, #1
 80054f4:	e7c6      	b.n	8005484 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80054f6:	f1be 0f00 	cmp.w	lr, #0
 80054fa:	d1ea      	bne.n	80054d2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 80054fc:	e7e3      	b.n	80054c6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 80054fe:	68a1      	ldr	r1, [r4, #8]
 8005500:	eb00 0461 	add.w	r4, r0, r1, asr #1
 8005504:	104d      	asrs	r5, r1, #1
 8005506:	07c9      	lsls	r1, r1, #31
 8005508:	bf48      	it	mi
 800550a:	5941      	ldrmi	r1, [r0, r5]
 800550c:	4620      	mov	r0, r4
 800550e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005512:	bf48      	it	mi
 8005514:	58cb      	ldrmi	r3, [r1, r3]
 8005516:	4611      	mov	r1, r2
 8005518:	4718      	bx	r3
 800551a:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800551e:	f003 0401 	and.w	r4, r3, #1
 8005522:	b90d      	cbnz	r5, 8005528 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8005524:	2c00      	cmp	r4, #0
 8005526:	d0ac      	beq.n	8005482 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 8005528:	105e      	asrs	r6, r3, #1
 800552a:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800552e:	b10c      	cbz	r4, 8005534 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8005530:	5980      	ldr	r0, [r0, r6]
 8005532:	5945      	ldr	r5, [r0, r5]
 8005534:	4618      	mov	r0, r3
 8005536:	462b      	mov	r3, r5
 8005538:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800553c:	4718      	bx	r3
 800553e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005542:	bf00      	nop
 8005544:	20000198 	mulcs	r0, r8, r1
 8005548:	0800a868 	stmdaeq	r0, {r3, r5, r6, fp, sp, pc}

0800554c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800554c:	23ff      	movs	r3, #255	; 0xff
 800554e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005552:	7013      	strb	r3, [r2, #0]
 8005554:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005558:	7ccb      	ldrb	r3, [r1, #19]
 800555a:	b085      	sub	sp, #20
 800555c:	7d4f      	ldrb	r7, [r1, #21]
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	7d0b      	ldrb	r3, [r1, #20]
 8005562:	f101 0a02 	add.w	sl, r1, #2
 8005566:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 800556a:	4b5b      	ldr	r3, [pc, #364]	; (80056d8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x18c>)
 800556c:	4606      	mov	r6, r0
 800556e:	460d      	mov	r5, r1
 8005570:	4614      	mov	r4, r2
 8005572:	495a      	ldr	r1, [pc, #360]	; (80056dc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8005574:	2206      	movs	r2, #6
 8005576:	4650      	mov	r0, sl
 8005578:	f8d3 8000 	ldr.w	r8, [r3]
 800557c:	f7ff f852 	bl	8004624 <memcmp>
 8005580:	f108 0905 	add.w	r9, r8, #5
 8005584:	4683      	mov	fp, r0
 8005586:	2202      	movs	r2, #2
 8005588:	4649      	mov	r1, r9
 800558a:	4650      	mov	r0, sl
 800558c:	b2bf      	uxth	r7, r7
 800558e:	f7ff f849 	bl	8004624 <memcmp>
 8005592:	b928      	cbnz	r0, 80055a0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 8005594:	2204      	movs	r2, #4
 8005596:	4951      	ldr	r1, [pc, #324]	; (80056dc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8005598:	18a8      	adds	r0, r5, r2
 800559a:	f7ff f843 	bl	8004624 <memcmp>
 800559e:	b160      	cbz	r0, 80055ba <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 80055a0:	4649      	mov	r1, r9
 80055a2:	2206      	movs	r2, #6
 80055a4:	4650      	mov	r0, sl
 80055a6:	f7ff f83d 	bl	8004624 <memcmp>
 80055aa:	4601      	mov	r1, r0
 80055ac:	b130      	cbz	r0, 80055bc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80055ae:	f1bb 0f00 	cmp.w	fp, #0
 80055b2:	d04a      	beq.n	800564a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 80055b4:	b005      	add	sp, #20
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	2101      	movs	r1, #1
 80055bc:	2301      	movs	r3, #1
 80055be:	9a03      	ldr	r2, [sp, #12]
 80055c0:	2a10      	cmp	r2, #16
 80055c2:	d176      	bne.n	80056b2 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 80055c4:	2f01      	cmp	r7, #1
 80055c6:	d143      	bne.n	8005650 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 80055c8:	7873      	ldrb	r3, [r6, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f2      	bne.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80055ce:	2206      	movs	r2, #6
 80055d0:	4649      	mov	r1, r9
 80055d2:	f105 0017 	add.w	r0, r5, #23
 80055d6:	f7ff f825 	bl	8004624 <memcmp>
 80055da:	2800      	cmp	r0, #0
 80055dc:	dcea      	bgt.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80055de:	2206      	movs	r2, #6
 80055e0:	4648      	mov	r0, r9
 80055e2:	f105 011d 	add.w	r1, r5, #29
 80055e6:	f7ff f81d 	bl	8004624 <memcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	dce2      	bgt.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80055ee:	23fe      	movs	r3, #254	; 0xfe
 80055f0:	7023      	strb	r3, [r4, #0]
 80055f2:	7063      	strb	r3, [r4, #1]
 80055f4:	70a3      	strb	r3, [r4, #2]
 80055f6:	70e3      	strb	r3, [r4, #3]
 80055f8:	7123      	strb	r3, [r4, #4]
 80055fa:	7163      	strb	r3, [r4, #5]
 80055fc:	71a3      	strb	r3, [r4, #6]
 80055fe:	23aa      	movs	r3, #170	; 0xaa
 8005600:	4621      	mov	r1, r4
 8005602:	71e3      	strb	r3, [r4, #7]
 8005604:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005608:	f108 0204 	add.w	r2, r8, #4
 800560c:	f108 080a 	add.w	r8, r8, #10
 8005610:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005614:	3102      	adds	r1, #2
 8005616:	f060 0055 	orn	r0, r0, #85	; 0x55
 800561a:	7188      	strb	r0, [r1, #6]
 800561c:	7810      	ldrb	r0, [r2, #0]
 800561e:	4542      	cmp	r2, r8
 8005620:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 8005624:	71c8      	strb	r0, [r1, #7]
 8005626:	7810      	ldrb	r0, [r2, #0]
 8005628:	4403      	add	r3, r0
 800562a:	b29b      	uxth	r3, r3
 800562c:	d1f0      	bne.n	8005610 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc4>
 800562e:	0a1a      	lsrs	r2, r3, #8
 8005630:	f062 0155 	orn	r1, r2, #85	; 0x55
 8005634:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8005638:	7562      	strb	r2, [r4, #21]
 800563a:	f063 0255 	orn	r2, r3, #85	; 0x55
 800563e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8005642:	7521      	strb	r1, [r4, #20]
 8005644:	75a2      	strb	r2, [r4, #22]
 8005646:	75e3      	strb	r3, [r4, #23]
 8005648:	e7b4      	b.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800564a:	4659      	mov	r1, fp
 800564c:	465b      	mov	r3, fp
 800564e:	e7b6      	b.n	80055be <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 8005650:	2f03      	cmp	r7, #3
 8005652:	d11a      	bne.n	800568a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 8005654:	7daa      	ldrb	r2, [r5, #22]
 8005656:	2a00      	cmp	r2, #0
 8005658:	d1ac      	bne.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800565a:	7072      	strb	r2, [r6, #1]
 800565c:	f1bb 0f00 	cmp.w	fp, #0
 8005660:	d0a8      	beq.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0a6      	beq.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005666:	2302      	movs	r3, #2
 8005668:	75e3      	strb	r3, [r4, #23]
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800566c:	7622      	strb	r2, [r4, #24]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	7662      	strb	r2, [r4, #25]
 8005672:	889b      	ldrh	r3, [r3, #4]
 8005674:	3b00      	subs	r3, #0
 8005676:	bf18      	it	ne
 8005678:	2301      	movne	r3, #1
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4630      	mov	r0, r6
 800567e:	7663      	strb	r3, [r4, #25]
 8005680:	b005      	add	sp, #20
 8005682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	f7ff b8e5 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 800568a:	2f02      	cmp	r7, #2
 800568c:	d192      	bne.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800568e:	7daa      	ldrb	r2, [r5, #22]
 8005690:	2a00      	cmp	r2, #0
 8005692:	d18f      	bne.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005694:	2101      	movs	r1, #1
 8005696:	7071      	strb	r1, [r6, #1]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d08b      	beq.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800569c:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800569e:	75e7      	strb	r7, [r4, #23]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	7622      	strb	r2, [r4, #24]
 80056a4:	7662      	strb	r2, [r4, #25]
 80056a6:	889b      	ldrh	r3, [r3, #4]
 80056a8:	3b00      	subs	r3, #0
 80056aa:	bf18      	it	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	408b      	lsls	r3, r1
 80056b0:	e7e4      	b.n	800567c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 80056b2:	7c6a      	ldrb	r2, [r5, #17]
 80056b4:	7cab      	ldrb	r3, [r5, #18]
 80056b6:	f1bb 0f00 	cmp.w	fp, #0
 80056ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056be:	b29b      	uxth	r3, r3
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	7dab      	ldrb	r3, [r5, #22]
 80056c4:	bf08      	it	eq
 80056c6:	2101      	moveq	r1, #1
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4630      	mov	r0, r6
 80056cc:	463b      	mov	r3, r7
 80056ce:	9a03      	ldr	r2, [sp, #12]
 80056d0:	f7ff feca 	bl	8005468 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 80056d4:	e76e      	b.n	80055b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80056d6:	bf00      	nop
 80056d8:	200005dc 	ldrdcs	r0, [r0], -ip
 80056dc:	0800a860 	stmdaeq	r0, {r5, r6, fp, sp, pc}
 80056e0:	20000198 	mulcs	r0, r8, r1

080056e4 <RDMHandler::GetIdentifyMode(unsigned short)>:
 80056e4:	2201      	movs	r2, #1
 80056e6:	6883      	ldr	r3, [r0, #8]
 80056e8:	75da      	strb	r2, [r3, #23]
 80056ea:	4a02      	ldr	r2, [pc, #8]	; (80056f4 <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	761a      	strb	r2, [r3, #24]
 80056f0:	f7ff b8b0 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 80056f4:	200005e1 	andcs	r0, r0, r1, ror #11

080056f8 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	6843      	ldr	r3, [r0, #4]
 80056fc:	4604      	mov	r4, r0
 80056fe:	7d9a      	ldrb	r2, [r3, #22]
 8005700:	460d      	mov	r5, r1
 8005702:	2a01      	cmp	r2, #1
 8005704:	d004      	beq.n	8005710 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 8005706:	2101      	movs	r1, #1
 8005708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800570c:	f7ff baca 	b.w	8004ca4 <RDMHandler::RespondMessageNack(unsigned short)>
 8005710:	7dd9      	ldrb	r1, [r3, #23]
 8005712:	1e4b      	subs	r3, r1, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2bfd      	cmp	r3, #253	; 0xfd
 8005718:	d801      	bhi.n	800571e <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 800571a:	2106      	movs	r1, #6
 800571c:	e7f4      	b.n	8005708 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 8005724:	7019      	strb	r1, [r3, #0]
 8005726:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	b15b      	cbz	r3, 8005744 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 800572c:	b151      	cbz	r1, 8005744 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 800572e:	21ff      	movs	r1, #255	; 0xff
 8005730:	f7fc fa46 	bl	8001bc0 <RDMIdentify::On(rdm::identify::Mode)>
 8005734:	b94d      	cbnz	r5, 800574a <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	4620      	mov	r0, r4
 800573a:	75dd      	strb	r5, [r3, #23]
 800573c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005740:	f7ff b888 	b.w	8004854 <RDMHandler::RespondMessageAck()>
 8005744:	f7fc fa5a 	bl	8001bfc <RDMIdentify::Off(rdm::identify::Mode)>
 8005748:	e7f4      	b.n	8005734 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	200005e4 	andcs	r0, r0, r4, ror #11
 8005750:	200005e1 	andcs	r0, r0, r1, ror #11
 8005754:	200005e0 	andcs	r0, r0, r0, ror #11

08005758 <RDMIdentify::RDMIdentify()>:
 8005758:	4b01      	ldr	r3, [pc, #4]	; (8005760 <RDMIdentify::RDMIdentify()+0x8>)
 800575a:	6018      	str	r0, [r3, #0]
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	200005e4 	andcs	r0, r0, r4, ror #11

08005764 <RDMSlotInfo::bsearch(unsigned short)>:
 8005764:	b530      	push	{r4, r5, lr}
 8005766:	2128      	movs	r1, #40	; 0x28
 8005768:	4604      	mov	r4, r0
 800576a:	2200      	movs	r2, #0
 800576c:	4d08      	ldr	r5, [pc, #32]	; (8005790 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 800576e:	1a8b      	subs	r3, r1, r2
 8005770:	eb02 0063 	add.w	r0, r2, r3, asr #1
 8005774:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
 8005778:	42a3      	cmp	r3, r4
 800577a:	d205      	bcs.n	8005788 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 800577c:	1c42      	adds	r2, r0, #1
 800577e:	428a      	cmp	r2, r1
 8005780:	ddf5      	ble.n	800576e <RDMSlotInfo::bsearch(unsigned short)+0xa>
 8005782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005786:	bd30      	pop	{r4, r5, pc}
 8005788:	d9fd      	bls.n	8005786 <RDMSlotInfo::bsearch(unsigned short)+0x22>
 800578a:	1e41      	subs	r1, r0, #1
 800578c:	e7f7      	b.n	800577e <RDMSlotInfo::bsearch(unsigned short)+0x1a>
 800578e:	bf00      	nop
 8005790:	0800b08c 	stmdaeq	r0, {r2, r3, r7, ip, sp, pc}

08005794 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 8005794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005798:	4299      	cmp	r1, r3
 800579a:	b510      	push	{r4, lr}
 800579c:	4614      	mov	r4, r2
 800579e:	d103      	bne.n	80057a8 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 80057a0:	4611      	mov	r1, r2
 80057a2:	f7fc fa47 	bl	8001c34 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 80057a6:	bd10      	pop	{r4, pc}
 80057a8:	4608      	mov	r0, r1
 80057aa:	f7ff ffdb 	bl	8005764 <RDMSlotInfo::bsearch(unsigned short)>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	da02      	bge.n	80057b8 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 80057b2:	2000      	movs	r0, #0
 80057b4:	6020      	str	r0, [r4, #0]
 80057b6:	e7f6      	b.n	80057a6 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 80057ba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80057be:	6858      	ldr	r0, [r3, #4]
 80057c0:	4602      	mov	r2, r0
 80057c2:	4613      	mov	r3, r2
 80057c4:	7819      	ldrb	r1, [r3, #0]
 80057c6:	3201      	adds	r2, #1
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d1fa      	bne.n	80057c2 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 80057cc:	1a1b      	subs	r3, r3, r0
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	e7e8      	b.n	80057a6 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80057d4:	0800b08c 	stmdaeq	r0, {r2, r3, r7, ip, sp, pc}

080057d8 <RDMDevice::RDMDevice()>:
 80057d8:	4a34      	ldr	r2, [pc, #208]	; (80058ac <RDMDevice::RDMDevice()+0xd4>)
 80057da:	2300      	movs	r3, #0
 80057dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057de:	4604      	mov	r4, r0
 80057e0:	4611      	mov	r1, r2
 80057e2:	7003      	strb	r3, [r0, #0]
 80057e4:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 80057e8:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 80057ec:	6783      	str	r3, [r0, #120]	; 0x78
 80057ee:	4613      	mov	r3, r2
 80057f0:	7818      	ldrb	r0, [r3, #0]
 80057f2:	3201      	adds	r2, #1
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1fa      	bne.n	80057ee <RDMDevice::RDMDevice()+0x16>
 80057f8:	1a5b      	subs	r3, r3, r1
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	bf28      	it	cs
 80057fe:	2320      	movcs	r3, #32
 8005800:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 8005804:	4629      	mov	r1, r5
 8005806:	461a      	mov	r2, r3
 8005808:	4828      	ldr	r0, [pc, #160]	; (80058ac <RDMDevice::RDMDevice()+0xd4>)
 800580a:	3a01      	subs	r2, #1
 800580c:	d23e      	bcs.n	800588c <RDMDevice::RDMDevice()+0xb4>
 800580e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8005812:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <RDMDevice::RDMDevice()+0xd8>)
 8005814:	4669      	mov	r1, sp
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	7062      	strb	r2, [r4, #1]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	70a3      	strb	r3, [r4, #2]
 800581e:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <RDMDevice::RDMDevice()+0xdc>)
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	f001 fd4d 	bl	80072c0 <Network::MacAddressCopyTo(unsigned char*)>
 8005826:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800582a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800582e:	70e3      	strb	r3, [r4, #3]
 8005830:	72a3      	strb	r3, [r4, #10]
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <RDMDevice::RDMDevice()+0xe0>)
 8005834:	7122      	strb	r2, [r4, #4]
 8005836:	7262      	strb	r2, [r4, #9]
 8005838:	461a      	mov	r2, r3
 800583a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800583e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005842:	7161      	strb	r1, [r4, #5]
 8005844:	71a0      	strb	r0, [r4, #6]
 8005846:	71e0      	strb	r0, [r4, #7]
 8005848:	7221      	strb	r1, [r4, #8]
 800584a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800584e:	2900      	cmp	r1, #0
 8005850:	d1fb      	bne.n	800584a <RDMDevice::RDMDevice()+0x72>
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	2b20      	cmp	r3, #32
 8005856:	bf28      	it	cs
 8005858:	2320      	movcs	r3, #32
 800585a:	461a      	mov	r2, r3
 800585c:	4916      	ldr	r1, [pc, #88]	; (80058b8 <RDMDevice::RDMDevice()+0xe0>)
 800585e:	3a01      	subs	r2, #1
 8005860:	d219      	bcs.n	8005896 <RDMDevice::RDMDevice()+0xbe>
 8005862:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8005866:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800586a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800586e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8005872:	2315      	movs	r3, #21
 8005874:	4a11      	ldr	r2, [pc, #68]	; (80058bc <RDMDevice::RDMDevice()+0xe4>)
 8005876:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 800587a:	f104 0166 	add.w	r1, r4, #102	; 0x66
 800587e:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8005882:	4299      	cmp	r1, r3
 8005884:	d10c      	bne.n	80058a0 <RDMDevice::RDMDevice()+0xc8>
 8005886:	4620      	mov	r0, r4
 8005888:	b002      	add	sp, #8
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f810 6b01 	ldrb.w	r6, [r0], #1
 8005890:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005894:	e7b9      	b.n	800580a <RDMDevice::RDMDevice()+0x32>
 8005896:	f811 0b01 	ldrb.w	r0, [r1], #1
 800589a:	f805 0f01 	strb.w	r0, [r5, #1]!
 800589e:	e7de      	b.n	800585e <RDMDevice::RDMDevice()+0x86>
 80058a0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80058a4:	f803 0f01 	strb.w	r0, [r3, #1]!
 80058a8:	e7eb      	b.n	8005882 <RDMDevice::RDMDevice()+0xaa>
 80058aa:	bf00      	nop
 80058ac:	0800b2cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, ip, sp, pc}
 80058b0:	0800b2cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, ip, sp, pc}
 80058b4:	20000634 	andcs	r0, r0, r4, lsr r6
 80058b8:	0800b1cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, ip, sp, pc}
 80058bc:	0800b2b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, ip, sp, pc}

080058c0 <RDMDevice::Print()>:
 80058c0:	b513      	push	{r0, r1, r4, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	4818      	ldr	r0, [pc, #96]	; (8005928 <RDMDevice::Print()+0x68>)
 80058c6:	f7fc fce7 	bl	8002298 <printf>
 80058ca:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 80058ce:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80058d2:	4816      	ldr	r0, [pc, #88]	; (800592c <RDMDevice::Print()+0x6c>)
 80058d4:	f7fc fce0 	bl	8002298 <printf>
 80058d8:	78a2      	ldrb	r2, [r4, #2]
 80058da:	7861      	ldrb	r1, [r4, #1]
 80058dc:	4814      	ldr	r0, [pc, #80]	; (8005930 <RDMDevice::Print()+0x70>)
 80058de:	f7fc fcdb 	bl	8002298 <printf>
 80058e2:	79e3      	ldrb	r3, [r4, #7]
 80058e4:	7a62      	ldrb	r2, [r4, #9]
 80058e6:	7aa1      	ldrb	r1, [r4, #10]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4812      	ldr	r0, [pc, #72]	; (8005934 <RDMDevice::Print()+0x74>)
 80058ec:	7a23      	ldrb	r3, [r4, #8]
 80058ee:	f7fc fcd3 	bl	8002298 <printf>
 80058f2:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80058f6:	f104 020b 	add.w	r2, r4, #11
 80058fa:	480f      	ldr	r0, [pc, #60]	; (8005938 <RDMDevice::Print()+0x78>)
 80058fc:	f7fc fccc 	bl	8002298 <printf>
 8005900:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8005904:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8005908:	0a09      	lsrs	r1, r1, #8
 800590a:	480c      	ldr	r0, [pc, #48]	; (800593c <RDMDevice::Print()+0x7c>)
 800590c:	f7fc fcc4 	bl	8002298 <printf>
 8005910:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8005914:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8005918:	4809      	ldr	r0, [pc, #36]	; (8005940 <RDMDevice::Print()+0x80>)
 800591a:	0a09      	lsrs	r1, r1, #8
 800591c:	b002      	add	sp, #8
 800591e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005922:	f7fc bcb9 	b.w	8002298 <printf>
 8005926:	bf00      	nop
 8005928:	0800b1e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, ip, sp, pc}
 800592c:	0800b1fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, ip, sp, pc}
 8005930:	0800b216 	stmdaeq	r0, {r1, r2, r4, r9, ip, sp, pc}
 8005934:	0800b235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip, sp, pc}
 8005938:	0800b25c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip, sp, pc}
 800593c:	0800b277 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, ip, sp, pc}
 8005940:	0800b296 	stmdaeq	r0, {r1, r2, r4, r7, r9, ip, sp, pc}

08005944 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	4604      	mov	r4, r0
 8005948:	460e      	mov	r6, r1
 800594a:	4611      	mov	r1, r2
 800594c:	4617      	mov	r7, r2
 800594e:	461d      	mov	r5, r3
 8005950:	f000 fa74 	bl	8005e3c <PixelConfiguration::Validate(unsigned int&)>
 8005954:	7d62      	ldrb	r2, [r4, #21]
 8005956:	b94a      	cbnz	r2, 800596c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	b11b      	cbz	r3, 8005964 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x20>
 800595c:	3b0b      	subs	r3, #11
 800595e:	2b01      	cmp	r3, #1
 8005960:	bf88      	it	hi
 8005962:	6022      	strhi	r2, [r4, #0]
 8005964:	4639      	mov	r1, r7
 8005966:	4620      	mov	r0, r4
 8005968:	f000 fa68 	bl	8005e3c <PixelConfiguration::Validate(unsigned int&)>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	2b07      	cmp	r3, #7
 8005970:	bf15      	itete	ne
 8005972:	f44f 71aa 	movne.w	r1, #340	; 0x154
 8005976:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800597a:	23aa      	movne	r3, #170	; 0xaa
 800597c:	2380      	moveq	r3, #128	; 0x80
 800597e:	bf14      	ite	ne
 8005980:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 8005984:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8005988:	e9c5 3100 	strd	r3, r1, [r5]
 800598c:	6a21      	ldr	r1, [r4, #32]
 800598e:	60aa      	str	r2, [r5, #8]
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	b109      	cbz	r1, 8005998 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 8005994:	4291      	cmp	r1, r2
 8005996:	d900      	bls.n	800599a <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 8005998:	6222      	str	r2, [r4, #32]
 800599a:	6a21      	ldr	r1, [r4, #32]
 800599c:	69e0      	ldr	r0, [r4, #28]
 800599e:	fbb2 f2f1 	udiv	r2, r2, r1
 80059a2:	3301      	adds	r3, #1
 80059a4:	6262      	str	r2, [r4, #36]	; 0x24
 80059a6:	42b0      	cmp	r0, r6
 80059a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ac:	bf28      	it	cs
 80059ae:	4630      	movcs	r0, r6
 80059b0:	1c53      	adds	r3, r2, #1
 80059b2:	2e01      	cmp	r6, #1
 80059b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80059b6:	bf1c      	itt	ne
 80059b8:	4343      	mulne	r3, r0
 80059ba:	f103 32ff 	addne.w	r2, r3, #4294967295	; 0xffffffff
 80059be:	61e0      	str	r0, [r4, #28]
 80059c0:	60ea      	str	r2, [r5, #12]
 80059c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059c4 <PixelDmxConfiguration::Print()>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	4604      	mov	r4, r0
 80059c8:	f000 face 	bl	8005f68 <PixelConfiguration::Print()>
 80059cc:	4806      	ldr	r0, [pc, #24]	; (80059e8 <PixelDmxConfiguration::Print()+0x24>)
 80059ce:	f7fc fc63 	bl	8002298 <printf>
 80059d2:	69e1      	ldr	r1, [r4, #28]
 80059d4:	4805      	ldr	r0, [pc, #20]	; (80059ec <PixelDmxConfiguration::Print()+0x28>)
 80059d6:	f7fc fc5f 	bl	8002298 <printf>
 80059da:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80059de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e2:	4803      	ldr	r0, [pc, #12]	; (80059f0 <PixelDmxConfiguration::Print()+0x2c>)
 80059e4:	f7fc bc58 	b.w	8002298 <printf>
 80059e8:	0800b2e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, sp, pc}
 80059ec:	0800b302 	stmdaeq	r0, {r1, r8, r9, ip, sp, pc}
 80059f0:	0800b311 	stmdaeq	r0, {r0, r4, r8, r9, ip, sp, pc}

080059f4 <WS28xxDmx::GetDmxStartAddress()>:
 80059f4:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 80059f8:	4770      	bx	lr

080059fa <WS28xxDmx::GetDmxFootprint()>:
 80059fa:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 80059fe:	4770      	bx	lr

08005a00 <WS28xxDmx::~WS28xxDmx()>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8005a04:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8005a06:	4604      	mov	r4, r0
 8005a08:	6003      	str	r3, [r0, #0]
 8005a0a:	b12d      	cbz	r5, 8005a18 <WS28xxDmx::~WS28xxDmx()+0x18>
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f001 fb37 	bl	8007080 <WS28xx::~WS28xx()>
 8005a12:	4628      	mov	r0, r5
 8005a14:	f002 ff63 	bl	80088de <operator delete(void*)>
 8005a18:	4620      	mov	r0, r4
 8005a1a:	bd38      	pop	{r3, r4, r5, pc}
 8005a1c:	0800b340 	stmdaeq	r0, {r6, r8, r9, ip, sp, pc}

08005a20 <WS28xxDmx::~WS28xxDmx()>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	f7ff ffec 	bl	8005a00 <WS28xxDmx::~WS28xxDmx()>
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f002 ff58 	bl	80088de <operator delete(void*)>
 8005a2e:	4620      	mov	r0, r4
 8005a30:	bd10      	pop	{r4, pc}

08005a32 <WS28xxDmx::Blackout(bool)>:
 8005a32:	b538      	push	{r3, r4, r5, lr}
 8005a34:	4605      	mov	r5, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 8005a3c:	f004 f97c 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d1fb      	bne.n	8005a3c <WS28xxDmx::Blackout(bool)+0xa>
 8005a44:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005a46:	b11c      	cbz	r4, 8005a50 <WS28xxDmx::Blackout(bool)+0x1e>
 8005a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a4c:	f001 bb96 	b.w	800717c <WS28xx::Blackout()>
 8005a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a54:	f001 bb76 	b.w	8007144 <WS28xx::Update()>

08005a58 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	4607      	mov	r7, r0
 8005a60:	4692      	mov	sl, r2
 8005a62:	9104      	str	r1, [sp, #16]
 8005a64:	9303      	str	r3, [sp, #12]
 8005a66:	f004 f967 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d171      	bne.n	8005b52 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	9c03      	ldr	r4, [sp, #12]
 8005a72:	f003 0103 	and.w	r1, r3, #3
 8005a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a78:	2902      	cmp	r1, #2
 8005a7a:	fbb4 f6f3 	udiv	r6, r4, r3
 8005a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a80:	d026      	beq.n	8005ad0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 8005a82:	2903      	cmp	r1, #3
 8005a84:	d02b      	beq.n	8005ade <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 8005a86:	2901      	cmp	r1, #1
 8005a88:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8005a8a:	d022      	beq.n	8005ad2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8005a8c:	4296      	cmp	r6, r2
 8005a8e:	bf28      	it	cs
 8005a90:	4616      	movcs	r6, r2
 8005a92:	4295      	cmp	r5, r2
 8005a94:	d925      	bls.n	8005ae2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 8005a96:	4605      	mov	r5, r0
 8005a98:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8005a9a:	3c01      	subs	r4, #1
 8005a9c:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	fb09 f805 	mul.w	r8, r9, r5
 8005aa6:	4454      	add	r4, sl
 8005aa8:	eb08 0b09 	add.w	fp, r8, r9
 8005aac:	d035      	beq.n	8005b1a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 8005aae:	42ae      	cmp	r6, r5
 8005ab0:	d935      	bls.n	8005b1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8005ab2:	9a03      	ldr	r2, [sp, #12]
 8005ab4:	eba4 030a 	sub.w	r3, r4, sl
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d930      	bls.n	8005b1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8005abc:	4641      	mov	r1, r8
 8005abe:	f894 f000 	pld	[r4]
 8005ac2:	458b      	cmp	fp, r1
 8005ac4:	d138      	bne.n	8005b38 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	44c8      	add	r8, r9
 8005aca:	44cb      	add	fp, r9
 8005acc:	3404      	adds	r4, #4
 8005ace:	e7ee      	b.n	8005aae <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 8005ad0:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8005ad2:	442e      	add	r6, r5
 8005ad4:	4296      	cmp	r6, r2
 8005ad6:	bf28      	it	cs
 8005ad8:	4616      	movcs	r6, r2
 8005ada:	4604      	mov	r4, r0
 8005adc:	e7de      	b.n	8005a9c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 8005ade:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8005ae0:	e7f7      	b.n	8005ad2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	e7d9      	b.n	8005a9c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 8005ae8:	78a2      	ldrb	r2, [r4, #2]
 8005aea:	7863      	ldrb	r3, [r4, #1]
 8005aec:	9200      	str	r2, [sp, #0]
 8005aee:	7822      	ldrb	r2, [r4, #0]
 8005af0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005af2:	9105      	str	r1, [sp, #20]
 8005af4:	f000 fd84 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005af8:	9905      	ldr	r1, [sp, #20]
 8005afa:	3101      	adds	r1, #1
 8005afc:	e007      	b.n	8005b0e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 8005afe:	9a03      	ldr	r2, [sp, #12]
 8005b00:	eba4 030a 	sub.w	r3, r4, sl
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d90a      	bls.n	8005b1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 8005b08:	4641      	mov	r1, r8
 8005b0a:	f894 f000 	pld	[r4]
 8005b0e:	458b      	cmp	fp, r1
 8005b10:	d1ea      	bne.n	8005ae8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8005b12:	3501      	adds	r5, #1
 8005b14:	44c8      	add	r8, r9
 8005b16:	44cb      	add	fp, r9
 8005b18:	3403      	adds	r4, #3
 8005b1a:	42ae      	cmp	r6, r5
 8005b1c:	d8ef      	bhi.n	8005afe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d115      	bne.n	8005b52 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005b26:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8005b2a:	b993      	cbnz	r3, 8005b52 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005b2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005b2e:	b007      	add	sp, #28
 8005b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	f001 bb06 	b.w	8007144 <WS28xx::Update()>
 8005b38:	78e2      	ldrb	r2, [r4, #3]
 8005b3a:	7863      	ldrb	r3, [r4, #1]
 8005b3c:	9201      	str	r2, [sp, #4]
 8005b3e:	78a2      	ldrb	r2, [r4, #2]
 8005b40:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005b42:	9200      	str	r2, [sp, #0]
 8005b44:	7822      	ldrb	r2, [r4, #0]
 8005b46:	9105      	str	r1, [sp, #20]
 8005b48:	f001 f98c 	bl	8006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005b4c:	9905      	ldr	r1, [sp, #20]
 8005b4e:	3101      	adds	r1, #1
 8005b50:	e7b7      	b.n	8005ac2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005b52:	b007      	add	sp, #28
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b58 <WS28xxDmx::FullOn()>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	f004 f8ec 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d1fb      	bne.n	8005b5c <WS28xxDmx::FullOn()+0x4>
 8005b64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6a:	f001 bb4e 	b.w	800720a <WS28xx::FullOn()>

08005b6e <WS28xxDmx::Print()>:
 8005b6e:	3004      	adds	r0, #4
 8005b70:	f7ff bf28 	b.w	80059c4 <PixelDmxConfiguration::Print()>

08005b74 <WS28xxDmx::Start(unsigned int)>:
 8005b74:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005b78:	b93b      	cbnz	r3, 8005b8a <WS28xxDmx::Start(unsigned int)+0x16>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8005b80:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8005b82:	b110      	cbz	r0, 8005b8a <WS28xxDmx::Start(unsigned int)+0x16>
 8005b84:	6803      	ldr	r3, [r0, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4718      	bx	r3
 8005b8a:	4770      	bx	lr

08005b8c <WS28xxDmx::Stop(unsigned int)>:
 8005b8c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005b90:	b13b      	cbz	r3, 8005ba2 <WS28xxDmx::Stop(unsigned int)+0x16>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8005b98:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8005b9a:	b110      	cbz	r0, 8005ba2 <WS28xxDmx::Stop(unsigned int)+0x16>
 8005b9c:	6803      	ldr	r3, [r0, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4718      	bx	r3
 8005ba2:	4770      	bx	lr

08005ba4 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8005ba4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 8005ba8:	b508      	push	{r3, lr}
 8005baa:	428a      	cmp	r2, r1
 8005bac:	d101      	bne.n	8005bb2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 8005bae:	2001      	movs	r0, #1
 8005bb0:	bd08      	pop	{r3, pc}
 8005bb2:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005bbc:	dc0c      	bgt.n	8005bd8 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 8005bbe:	1e4a      	subs	r2, r1, #1
 8005bc0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005bc4:	d208      	bcs.n	8005bd8 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 8005bc6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 8005bca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d0ee      	beq.n	8005bae <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 8005bd0:	6803      	ldr	r3, [r0, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4798      	blx	r3
 8005bd6:	e7ea      	b.n	8005bae <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e7e9      	b.n	8005bb0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

08005bdc <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 8005be2:	4288      	cmp	r0, r1
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	d30f      	bcc.n	8005c0a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2e>
 8005bea:	7090      	strb	r0, [r2, #2]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	fbb1 f0f3 	udiv	r0, r1, r3
 8005bf2:	fb03 1110 	mls	r1, r3, r0, r1
 8005bf6:	2903      	cmp	r1, #3
 8005bf8:	d80e      	bhi.n	8005c18 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3c>
 8005bfa:	e8df f001 	tbb	[pc, r1]
 8005bfe:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 8005c02:	f240 2305 	movw	r3, #517	; 0x205
 8005c06:	2001      	movs	r0, #1
 8005c08:	8013      	strh	r3, [r2, #0]
 8005c0a:	4770      	bx	lr
 8005c0c:	f240 2306 	movw	r3, #518	; 0x206
 8005c10:	e7f9      	b.n	8005c06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 8005c12:	f240 2307 	movw	r3, #519	; 0x207
 8005c16:	e7f6      	b.n	8005c06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 8005c18:	f240 2312 	movw	r3, #530	; 0x212
 8005c1c:	e7f3      	b.n	8005c06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
	...

08005c20 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	460e      	mov	r6, r1
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	f845 3b04 	str.w	r3, [r5], #4
 8005c2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8005c44:	6563      	str	r3, [r4, #84]	; 0x54
 8005c46:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 8005c4c:	1d26      	adds	r6, r4, #4
 8005c4e:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8005c52:	2101      	movs	r1, #1
 8005c54:	4630      	mov	r0, r6
 8005c56:	601c      	str	r4, [r3, #0]
 8005c58:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005c5c:	f7ff fe72 	bl	8005944 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8005c60:	2028      	movs	r0, #40	; 0x28
 8005c62:	f002 fe40 	bl	80088e6 <operator new(unsigned int)>
 8005c66:	4605      	mov	r5, r0
 8005c68:	4631      	mov	r1, r6
 8005c6a:	f001 fa27 	bl	80070bc <WS28xx::WS28xx(PixelConfiguration&)>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005c72:	f001 fa83 	bl	800717c <WS28xx::Blackout()>
 8005c76:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005c78:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005c7a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8005c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c80:	4620      	mov	r0, r4
 8005c82:	4353      	muls	r3, r2
 8005c84:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0800b340 	stmdaeq	r0, {r6, r8, r9, ip, sp, pc}
 8005c90:	200005e8 	andcs	r0, r0, r8, ror #11

08005c94 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8005c94:	6001      	str	r1, [r0, #0]
 8005c96:	2100      	movs	r1, #0
 8005c98:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 8005c9c:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 8005c9e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005ca2:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 8005ca4:	4905      	ldr	r1, [pc, #20]	; (8005cbc <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 8005ca6:	e9c0 c203 	strd	ip, r2, [r0, #12]
 8005caa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cae:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8005cb2:	4770      	bx	lr
 8005cb4:	0100aa03 	tsteq	r0, r3, lsl #20
 8005cb8:	01ff003d 	mvnseq	r0, sp, lsr r0
 8005cbc:	06000100 	streq	r0, [r0], -r0, lsl #2

08005cc0 <PixelDmxParams::Load()>:
 8005cc0:	b508      	push	{r3, lr}
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	6043      	str	r3, [r0, #4]
 8005cc8:	6800      	ldr	r0, [r0, #0]
 8005cca:	b120      	cbz	r0, 8005cd6 <PixelDmxParams::Load()+0x16>
 8005ccc:	6803      	ldr	r3, [r0, #0]
 8005cce:	3104      	adds	r1, #4
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4798      	blx	r3
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	bd08      	pop	{r3, pc}

08005cd8 <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 8005cd8:	6843      	ldr	r3, [r0, #4]
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	bf44      	itt	mi
 8005cde:	7a02      	ldrbmi	r2, [r0, #8]
 8005ce0:	600a      	strmi	r2, [r1, #0]
 8005ce2:	079a      	lsls	r2, r3, #30
 8005ce4:	d505      	bpl.n	8005cf2 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8005ce6:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	bf08      	it	eq
 8005cee:	22aa      	moveq	r2, #170	; 0xaa
 8005cf0:	604a      	str	r2, [r1, #4]
 8005cf2:	059a      	lsls	r2, r3, #22
 8005cf4:	bf44      	itt	mi
 8005cf6:	7dc2      	ldrbmi	r2, [r0, #23]
 8005cf8:	608a      	strmi	r2, [r1, #8]
 8005cfa:	055a      	lsls	r2, r3, #21
 8005cfc:	bf44      	itt	mi
 8005cfe:	7e02      	ldrbmi	r2, [r0, #24]
 8005d00:	740a      	strbmi	r2, [r1, #16]
 8005d02:	051a      	lsls	r2, r3, #20
 8005d04:	bf44      	itt	mi
 8005d06:	7e42      	ldrbmi	r2, [r0, #25]
 8005d08:	744a      	strbmi	r2, [r1, #17]
 8005d0a:	06da      	lsls	r2, r3, #27
 8005d0c:	bf44      	itt	mi
 8005d0e:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8005d12:	60ca      	strmi	r2, [r1, #12]
 8005d14:	069a      	lsls	r2, r3, #26
 8005d16:	bf44      	itt	mi
 8005d18:	7c82      	ldrbmi	r2, [r0, #18]
 8005d1a:	748a      	strbmi	r2, [r1, #18]
 8005d1c:	061a      	lsls	r2, r3, #24
 8005d1e:	d504      	bpl.n	8005d2a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005d20:	2201      	movs	r2, #1
 8005d22:	750a      	strb	r2, [r1, #20]
 8005d24:	7b42      	ldrb	r2, [r0, #13]
 8005d26:	b102      	cbz	r2, 8005d2a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005d28:	74ca      	strb	r2, [r1, #19]
 8005d2a:	075a      	lsls	r2, r3, #29
 8005d2c:	d50b      	bpl.n	8005d46 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 8005d2e:	7ac2      	ldrb	r2, [r0, #11]
 8005d30:	b510      	push	{r4, lr}
 8005d32:	7b04      	ldrb	r4, [r0, #12]
 8005d34:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005d38:	858a      	strh	r2, [r1, #44]	; 0x2c
 8005d3a:	05da      	lsls	r2, r3, #23
 8005d3c:	bf44      	itt	mi
 8005d3e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005d42:	620b      	strmi	r3, [r1, #32]
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	05db      	lsls	r3, r3, #23
 8005d48:	bf44      	itt	mi
 8005d4a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005d4e:	620b      	strmi	r3, [r1, #32]
 8005d50:	4770      	bx	lr

08005d52 <PixelDmxParams::Dump()>:
 8005d52:	4770      	bx	lr

08005d54 <LightSet::Blackout(bool)>:
 8005d54:	4770      	bx	lr

08005d56 <LightSet::FullOn()>:
 8005d56:	4770      	bx	lr

08005d58 <LightSet::Print()>:
 8005d58:	4770      	bx	lr

08005d5a <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	4770      	bx	lr

08005d5e <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8005d5e:	2001      	movs	r0, #1
 8005d60:	4770      	bx	lr

08005d62 <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005d62:	2006      	movs	r0, #6
 8005d64:	4770      	bx	lr

08005d66 <PixelDmxParamsRdm::Stop(unsigned int)>:
 8005d66:	4770      	bx	lr

08005d68 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005d68:	2905      	cmp	r1, #5
 8005d6a:	f04f 0000 	mov.w	r0, #0
 8005d6e:	bf9f      	itttt	ls
 8005d70:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005d74:	7090      	strbls	r0, [r2, #2]
 8005d76:	8013      	strhls	r3, [r2, #0]
 8005d78:	2001      	movls	r0, #1
 8005d7a:	4770      	bx	lr

08005d7c <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005d7c:	4770      	bx	lr

08005d7e <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	f002 fdac 	bl	80088de <operator delete(void*)>
 8005d86:	4620      	mov	r0, r4
 8005d88:	bd10      	pop	{r4, pc}
	...

08005d8c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>:
 8005d8c:	4b02      	ldr	r3, [pc, #8]	; (8005d98 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0xc>)
 8005d8e:	6003      	str	r3, [r0, #0]
 8005d90:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0x10>)
 8005d92:	6019      	str	r1, [r3, #0]
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	0800b378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, sp, pc}
 8005d9c:	200005ec 	andcs	r0, r0, ip, ror #11

08005da0 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	4606      	mov	r6, r0
 8005da6:	4614      	mov	r4, r2
 8005da8:	d934      	bls.n	8005e14 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005daa:	7953      	ldrb	r3, [r2, #5]
 8005dac:	b933      	cbnz	r3, 8005dbc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 8005dae:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005db0:	7013      	strb	r3, [r2, #0]
 8005db2:	4621      	mov	r1, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7fb fd11 	bl	80017dc <PixelDmxParamsRdm::Display(unsigned char const*)>
 8005dba:	e02b      	b.n	8005e14 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005dbc:	2bff      	cmp	r3, #255	; 0xff
 8005dbe:	d124      	bne.n	8005e0a <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005dc2:	7811      	ldrb	r1, [r2, #0]
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	d1f4      	bne.n	8005db2 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005dc8:	4d14      	ldr	r5, [pc, #80]	; (8005e1c <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8005dca:	7013      	strb	r3, [r2, #0]
 8005dcc:	6828      	ldr	r0, [r5, #0]
 8005dce:	7821      	ldrb	r1, [r4, #0]
 8005dd0:	6803      	ldr	r3, [r0, #0]
 8005dd2:	290e      	cmp	r1, #14
 8005dd4:	bf28      	it	cs
 8005dd6:	210e      	movcs	r1, #14
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	4798      	blx	r3
 8005ddc:	6828      	ldr	r0, [r5, #0]
 8005dde:	7861      	ldrb	r1, [r4, #1]
 8005de0:	6803      	ldr	r3, [r0, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4798      	blx	r3
 8005de6:	6828      	ldr	r0, [r5, #0]
 8005de8:	78a1      	ldrb	r1, [r4, #2]
 8005dea:	6803      	ldr	r3, [r0, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	4798      	blx	r3
 8005df0:	6828      	ldr	r0, [r5, #0]
 8005df2:	78e1      	ldrb	r1, [r4, #3]
 8005df4:	6803      	ldr	r3, [r0, #0]
 8005df6:	2906      	cmp	r1, #6
 8005df8:	bf28      	it	cs
 8005dfa:	2106      	movcs	r1, #6
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4798      	blx	r3
 8005e00:	6828      	ldr	r0, [r5, #0]
 8005e02:	7921      	ldrb	r1, [r4, #4]
 8005e04:	6803      	ldr	r3, [r0, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4798      	blx	r3
 8005e0a:	7963      	ldrb	r3, [r4, #5]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2bfd      	cmp	r3, #253	; 0xfd
 8005e12:	d8ce      	bhi.n	8005db2 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	bf00      	nop
 8005e18:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8005e1c:	200005ec 	andcs	r0, r0, ip, ror #11

08005e20 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005e20:	23c0      	movs	r3, #192	; 0xc0
 8005e22:	2803      	cmp	r0, #3
 8005e24:	700b      	strb	r3, [r1, #0]
 8005e26:	d006      	beq.n	8005e36 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005e28:	3808      	subs	r0, #8
 8005e2a:	2803      	cmp	r0, #3
 8005e2c:	bf34      	ite	cc
 8005e2e:	23fc      	movcc	r3, #252	; 0xfc
 8005e30:	23f0      	movcs	r3, #240	; 0xf0
 8005e32:	7013      	strb	r3, [r2, #0]
 8005e34:	4770      	bx	lr
 8005e36:	23f8      	movs	r3, #248	; 0xf8
 8005e38:	e7fb      	b.n	8005e32 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

08005e3c <PixelConfiguration::Validate(unsigned int&)>:
 8005e3c:	b513      	push	{r0, r1, r4, lr}
 8005e3e:	4604      	mov	r4, r0
 8005e40:	6800      	ldr	r0, [r0, #0]
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	2807      	cmp	r0, #7
 8005e46:	68a2      	ldr	r2, [r4, #8]
 8005e48:	d128      	bne.n	8005e9c <PixelConfiguration::Validate(unsigned int&)+0x60>
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	bf28      	it	cs
 8005e50:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	2304      	movs	r3, #4
 8005e58:	600b      	str	r3, [r1, #0]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	2a06      	cmp	r2, #6
 8005e5e:	7563      	strb	r3, [r4, #21]
 8005e60:	d102      	bne.n	8005e68 <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8005e62:	f000 f8fd 	bl	8006060 <PixelType::GetMap(pixel::Type)>
 8005e66:	60a0      	str	r0, [r4, #8]
 8005e68:	7c63      	ldrb	r3, [r4, #17]
 8005e6a:	7c22      	ldrb	r2, [r4, #16]
 8005e6c:	6820      	ldr	r0, [r4, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf28      	it	cs
 8005e72:	2300      	movcs	r3, #0
 8005e74:	f10d 0207 	add.w	r2, sp, #7
 8005e78:	bf28      	it	cs
 8005e7a:	8223      	strhcs	r3, [r4, #16]
 8005e7c:	f10d 0106 	add.w	r1, sp, #6
 8005e80:	f7ff ffce 	bl	8005e20 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8005e84:	7c23      	ldrb	r3, [r4, #16]
 8005e86:	b913      	cbnz	r3, 8005e8e <PixelConfiguration::Validate(unsigned int&)+0x52>
 8005e88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005e8c:	7423      	strb	r3, [r4, #16]
 8005e8e:	7c63      	ldrb	r3, [r4, #17]
 8005e90:	b913      	cbnz	r3, 8005e98 <PixelConfiguration::Validate(unsigned int&)+0x5c>
 8005e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e96:	7463      	strb	r3, [r4, #17]
 8005e98:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 8005e9a:	e01e      	b.n	8005eda <PixelConfiguration::Validate(unsigned int&)+0x9e>
 8005e9c:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8005ea0:	bf28      	it	cs
 8005ea2:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005ea6:	6063      	str	r3, [r4, #4]
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	600b      	str	r3, [r1, #0]
 8005eac:	f1a0 030b 	sub.w	r3, r0, #11
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d806      	bhi.n	8005ec2 <PixelConfiguration::Validate(unsigned int&)+0x86>
 8005eb4:	7ca3      	ldrb	r3, [r4, #18]
 8005eb6:	2b1f      	cmp	r3, #31
 8005eb8:	d83d      	bhi.n	8005f36 <PixelConfiguration::Validate(unsigned int&)+0xfa>
 8005eba:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005ebe:	74a3      	strb	r3, [r4, #18]
 8005ec0:	e001      	b.n	8005ec6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d139      	bne.n	8005f3a <PixelConfiguration::Validate(unsigned int&)+0xfe>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2a06      	cmp	r2, #6
 8005eca:	bf08      	it	eq
 8005ecc:	60a3      	streq	r3, [r4, #8]
 8005ece:	280d      	cmp	r0, #13
 8005ed0:	7563      	strb	r3, [r4, #21]
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	d119      	bne.n	8005f0a <PixelConfiguration::Validate(unsigned int&)+0xce>
 8005ed6:	b913      	cbnz	r3, 8005ede <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8005ed8:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 8005eda:	60e3      	str	r3, [r4, #12]
 8005edc:	e003      	b.n	8005ee6 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d900      	bls.n	8005ee6 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005ee4:	60e2      	str	r2, [r4, #12]
 8005ee6:	7d23      	ldrb	r3, [r4, #20]
 8005ee8:	b31b      	cbz	r3, 8005f32 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8005eea:	7ce3      	ldrb	r3, [r4, #19]
 8005eec:	b9ab      	cbnz	r3, 8005f1a <PixelConfiguration::Validate(unsigned int&)+0xde>
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	b17a      	cbz	r2, 8005f12 <PixelConfiguration::Validate(unsigned int&)+0xd6>
 8005ef2:	f1a2 030b 	sub.w	r3, r2, #11
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d90d      	bls.n	8005f16 <PixelConfiguration::Validate(unsigned int&)+0xda>
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <PixelConfiguration::Validate(unsigned int&)+0x110>)
 8005efc:	4914      	ldr	r1, [pc, #80]	; (8005f50 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8005efe:	2a0d      	cmp	r2, #13
 8005f00:	bf08      	it	eq
 8005f02:	460b      	moveq	r3, r1
 8005f04:	61a3      	str	r3, [r4, #24]
 8005f06:	b002      	add	sp, #8
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0e4      	beq.n	8005ed8 <PixelConfiguration::Validate(unsigned int&)+0x9c>
 8005f0e:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 8005f10:	e7e6      	b.n	8005ee0 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 8005f14:	e7f6      	b.n	8005f04 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <PixelConfiguration::Validate(unsigned int&)+0x120>)
 8005f18:	e7f4      	b.n	8005f04 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005f1a:	f1a3 0214 	sub.w	r2, r3, #20
 8005f1e:	2a05      	cmp	r2, #5
 8005f20:	d807      	bhi.n	8005f32 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8005f22:	3b15      	subs	r3, #21
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	bf96      	itet	ls
 8005f28:	4a0d      	ldrls	r2, [pc, #52]	; (8005f60 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 8005f2a:	4b0e      	ldrhi	r3, [pc, #56]	; (8005f64 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 8005f2c:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8005f30:	e7e8      	b.n	8005f04 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8005f34:	e7e6      	b.n	8005f04 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005f36:	23ff      	movs	r3, #255	; 0xff
 8005f38:	e7c1      	b.n	8005ebe <PixelConfiguration::Validate(unsigned int&)+0x82>
 8005f3a:	280d      	cmp	r0, #13
 8005f3c:	d18d      	bne.n	8005e5a <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8005f3e:	e7c2      	b.n	8005ec6 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005f40:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005f44:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005f48:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8005f4c:	0800b77c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp, pc}
 8005f50:	0800b47c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, ip, sp, pc}
 8005f54:	017d7840 	cmneq	sp, r0, asr #16
 8005f58:	0800ba7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, ip, sp, pc}
 8005f5c:	0800bb7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, fp, ip, sp, pc}
 8005f60:	0800b468 	stmdaeq	r0, {r3, r5, r6, sl, ip, sp, pc}
 8005f64:	0800b57c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, ip, sp, pc}

08005f68 <PixelConfiguration::Print()>:
 8005f68:	b513      	push	{r0, r1, r4, lr}
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4825      	ldr	r0, [pc, #148]	; (8006004 <PixelConfiguration::Print()+0x9c>)
 8005f6e:	f7fc f993 	bl	8002298 <printf>
 8005f72:	6820      	ldr	r0, [r4, #0]
 8005f74:	f000 f85c 	bl	8006030 <PixelType::GetType(pixel::Type)>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	4822      	ldr	r0, [pc, #136]	; (8006008 <PixelConfiguration::Print()+0xa0>)
 8005f7e:	f7fc f98b 	bl	8002298 <printf>
 8005f82:	6861      	ldr	r1, [r4, #4]
 8005f84:	4821      	ldr	r0, [pc, #132]	; (800600c <PixelConfiguration::Print()+0xa4>)
 8005f86:	f7fc f987 	bl	8002298 <printf>
 8005f8a:	7d63      	ldrb	r3, [r4, #21]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d030      	beq.n	8005ff2 <PixelConfiguration::Print()+0x8a>
 8005f90:	68a0      	ldr	r0, [r4, #8]
 8005f92:	f000 f859 	bl	8006048 <PixelType::GetMap(pixel::Map)>
 8005f96:	68a2      	ldr	r2, [r4, #8]
 8005f98:	4601      	mov	r1, r0
 8005f9a:	481d      	ldr	r0, [pc, #116]	; (8006010 <PixelConfiguration::Print()+0xa8>)
 8005f9c:	f7fc f97c 	bl	8002298 <printf>
 8005fa0:	7c20      	ldrb	r0, [r4, #16]
 8005fa2:	f000 f867 	bl	8006074 <PixelType::ConvertTxH(unsigned char)>
 8005fa6:	f7fa fc4b 	bl	8000840 <__aeabi_f2d>
 8005faa:	460b      	mov	r3, r1
 8005fac:	7c21      	ldrb	r1, [r4, #16]
 8005fae:	4602      	mov	r2, r0
 8005fb0:	9100      	str	r1, [sp, #0]
 8005fb2:	4818      	ldr	r0, [pc, #96]	; (8006014 <PixelConfiguration::Print()+0xac>)
 8005fb4:	f7fc f970 	bl	8002298 <printf>
 8005fb8:	7c60      	ldrb	r0, [r4, #17]
 8005fba:	f000 f85b 	bl	8006074 <PixelType::ConvertTxH(unsigned char)>
 8005fbe:	f7fa fc3f 	bl	8000840 <__aeabi_f2d>
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	7c61      	ldrb	r1, [r4, #17]
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	9100      	str	r1, [sp, #0]
 8005fca:	4813      	ldr	r0, [pc, #76]	; (8006018 <PixelConfiguration::Print()+0xb0>)
 8005fcc:	f7fc f964 	bl	8002298 <printf>
 8005fd0:	7d21      	ldrb	r1, [r4, #20]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <PixelConfiguration::Print()+0xb4>)
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <PixelConfiguration::Print()+0xb8>)
 8005fd6:	4813      	ldr	r0, [pc, #76]	; (8006024 <PixelConfiguration::Print()+0xbc>)
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	bf14      	ite	ne
 8005fdc:	4611      	movne	r1, r2
 8005fde:	4619      	moveq	r1, r3
 8005fe0:	f7fc f95a 	bl	8002298 <printf>
 8005fe4:	68e1      	ldr	r1, [r4, #12]
 8005fe6:	4810      	ldr	r0, [pc, #64]	; (8006028 <PixelConfiguration::Print()+0xc0>)
 8005fe8:	b002      	add	sp, #8
 8005fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fee:	f7fc b953 	b.w	8002298 <printf>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	3b0b      	subs	r3, #11
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d8ea      	bhi.n	8005fd0 <PixelConfiguration::Print()+0x68>
 8005ffa:	7ca1      	ldrb	r1, [r4, #18]
 8005ffc:	480b      	ldr	r0, [pc, #44]	; (800602c <PixelConfiguration::Print()+0xc4>)
 8005ffe:	f7fc f94b 	bl	8002298 <printf>
 8006002:	e7e5      	b.n	8005fd0 <PixelConfiguration::Print()+0x68>
 8006004:	0800b3af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, r9, ip, sp, pc}
 8006008:	0800b3c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, sp, pc}
 800600c:	0800b3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, pc}
 8006010:	0800b3e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, r9, ip, sp, pc}
 8006014:	0800b3fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 8006018:	0800b413 	stmdaeq	r0, {r0, r1, r4, sl, ip, sp, pc}
 800601c:	0800b3a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp, pc}
 8006020:	0800b3ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp, pc}
 8006024:	0800b442 	stmdaeq	r0, {r1, r6, sl, ip, sp, pc}
 8006028:	0800b458 	stmdaeq	r0, {r3, r4, r6, sl, ip, sp, pc}
 800602c:	0800b42b 	stmdaeq	r0, {r0, r1, r3, r5, sl, ip, sp, pc}

08006030 <PixelType::GetType(pixel::Type)>:
 8006030:	280d      	cmp	r0, #13
 8006032:	bfda      	itte	le
 8006034:	4b02      	ldrle	r3, [pc, #8]	; (8006040 <PixelType::GetType(pixel::Type)+0x10>)
 8006036:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800603a:	4802      	ldrgt	r0, [pc, #8]	; (8006044 <PixelType::GetType(pixel::Type)+0x14>)
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	0800bca6 	stmdaeq	r0, {r1, r2, r5, r7, sl, fp, ip, sp, pc}
 8006044:	0800bc7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp, pc}

08006048 <PixelType::GetMap(pixel::Map)>:
 8006048:	2805      	cmp	r0, #5
 800604a:	bfda      	itte	le
 800604c:	4b02      	ldrle	r3, [pc, #8]	; (8006058 <PixelType::GetMap(pixel::Map)+0x10>)
 800604e:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8006052:	4802      	ldrgt	r0, [pc, #8]	; (800605c <PixelType::GetMap(pixel::Map)+0x14>)
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	0800bc8e 	stmdaeq	r0, {r1, r2, r3, r7, sl, fp, ip, sp, pc}
 800605c:	0800a5b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, sp, pc}

08006060 <PixelType::GetMap(pixel::Type)>:
 8006060:	3801      	subs	r0, #1
 8006062:	2809      	cmp	r0, #9
 8006064:	bf9a      	itte	ls
 8006066:	4b02      	ldrls	r3, [pc, #8]	; (8006070 <PixelType::GetMap(pixel::Type)+0x10>)
 8006068:	5618      	ldrsbls	r0, [r3, r0]
 800606a:	2002      	movhi	r0, #2
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	0800bc84 	stmdaeq	r0, {r2, r7, sl, fp, ip, sp, pc}

08006074 <PixelType::ConvertTxH(unsigned char)>:
 8006074:	28f0      	cmp	r0, #240	; 0xf0
 8006076:	d010      	beq.n	800609a <PixelType::ConvertTxH(unsigned char)+0x26>
 8006078:	d807      	bhi.n	800608a <PixelType::ConvertTxH(unsigned char)+0x16>
 800607a:	28c0      	cmp	r0, #192	; 0xc0
 800607c:	d00f      	beq.n	800609e <PixelType::ConvertTxH(unsigned char)+0x2a>
 800607e:	28e0      	cmp	r0, #224	; 0xe0
 8006080:	d00f      	beq.n	80060a2 <PixelType::ConvertTxH(unsigned char)+0x2e>
 8006082:	2880      	cmp	r0, #128	; 0x80
 8006084:	d113      	bne.n	80060ae <PixelType::ConvertTxH(unsigned char)+0x3a>
 8006086:	480b      	ldr	r0, [pc, #44]	; (80060b4 <PixelType::ConvertTxH(unsigned char)+0x40>)
 8006088:	4770      	bx	lr
 800608a:	28fc      	cmp	r0, #252	; 0xfc
 800608c:	d00b      	beq.n	80060a6 <PixelType::ConvertTxH(unsigned char)+0x32>
 800608e:	28fe      	cmp	r0, #254	; 0xfe
 8006090:	d00b      	beq.n	80060aa <PixelType::ConvertTxH(unsigned char)+0x36>
 8006092:	28f8      	cmp	r0, #248	; 0xf8
 8006094:	d10b      	bne.n	80060ae <PixelType::ConvertTxH(unsigned char)+0x3a>
 8006096:	4808      	ldr	r0, [pc, #32]	; (80060b8 <PixelType::ConvertTxH(unsigned char)+0x44>)
 8006098:	4770      	bx	lr
 800609a:	4808      	ldr	r0, [pc, #32]	; (80060bc <PixelType::ConvertTxH(unsigned char)+0x48>)
 800609c:	4770      	bx	lr
 800609e:	4808      	ldr	r0, [pc, #32]	; (80060c0 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 80060a0:	4770      	bx	lr
 80060a2:	4808      	ldr	r0, [pc, #32]	; (80060c4 <PixelType::ConvertTxH(unsigned char)+0x50>)
 80060a4:	4770      	bx	lr
 80060a6:	4808      	ldr	r0, [pc, #32]	; (80060c8 <PixelType::ConvertTxH(unsigned char)+0x54>)
 80060a8:	4770      	bx	lr
 80060aa:	4808      	ldr	r0, [pc, #32]	; (80060cc <PixelType::ConvertTxH(unsigned char)+0x58>)
 80060ac:	4770      	bx	lr
 80060ae:	2000      	movs	r0, #0
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 80060b8:	3f480000 	svccc	0x00480000
 80060bc:	3f200000 	svccc	0x00200000
 80060c0:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 80060c4:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 80060c8:	3f700000 	svccc	0x00700000
 80060cc:	3f8c0000 	svccc	0x008c0000

080060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 80060d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80060d6:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80060da:	b2cc      	uxtb	r4, r1
 80060dc:	490e      	ldr	r1, [pc, #56]	; (8006118 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 80060de:	4605      	mov	r5, r0
 80060e0:	6808      	ldr	r0, [r1, #0]
 80060e2:	6801      	ldr	r1, [r0, #0]
 80060e4:	2907      	cmp	r1, #7
 80060e6:	d005      	beq.n	80060f4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 80060e8:	4629      	mov	r1, r5
 80060ea:	9400      	str	r4, [sp, #0]
 80060ec:	f000 fa88 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80060f0:	b003      	add	sp, #12
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	429a      	cmp	r2, r3
 80060f6:	f04f 0100 	mov.w	r1, #0
 80060fa:	d109      	bne.n	8006110 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 80060fc:	42a2      	cmp	r2, r4
 80060fe:	d107      	bne.n	8006110 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 8006100:	e9cd 1200 	strd	r1, r2, [sp]
 8006104:	460b      	mov	r3, r1
 8006106:	460a      	mov	r2, r1
 8006108:	4629      	mov	r1, r5
 800610a:	f000 feab 	bl	8006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800610e:	e7ef      	b.n	80060f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 8006110:	e9cd 4100 	strd	r4, r1, [sp]
 8006114:	e7f8      	b.n	8006108 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 8006116:	bf00      	nop
 8006118:	20000620 	andcs	r0, r0, r0, lsr #12

0800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	2400      	movs	r4, #0
 8006120:	4d05      	ldr	r5, [pc, #20]	; (8006138 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	429c      	cmp	r4, r3
 8006126:	d300      	bcc.n	800612a <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	4620      	mov	r0, r4
 800612c:	2100      	movs	r1, #0
 800612e:	f7ff ffcf 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006132:	3401      	adds	r4, #1
 8006134:	e7f5      	b.n	8006122 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8006136:	bf00      	nop
 8006138:	2000061c 	andcs	r0, r0, ip, lsl r6

0800613c <PixelPatterns::PixelPatterns(unsigned int)>:
 800613c:	2901      	cmp	r1, #1
 800613e:	bf28      	it	cs
 8006140:	2101      	movcs	r1, #1
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8006144:	4a08      	ldr	r2, [pc, #32]	; (8006168 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800614c:	6011      	str	r1, [r2, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800615c:	61da      	str	r2, [r3, #28]
 800615e:	6019      	str	r1, [r3, #0]
 8006160:	619a      	str	r2, [r3, #24]
 8006162:	4770      	bx	lr
 8006164:	20000630 	andcs	r0, r0, r0, lsr r6
 8006168:	20000620 	andcs	r0, r0, r0, lsr #12
 800616c:	20000614 	andcs	r0, r0, r4, lsl r6
 8006170:	2000061c 	andcs	r0, r0, ip, lsl r6
 8006174:	200017ac 	andcs	r1, r0, ip, lsr #15
 8006178:	200005f4 	strdcs	r0, [r0], -r4

0800617c <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800617c:	2805      	cmp	r0, #5
 800617e:	bfdd      	ittte	le
 8006180:	220e      	movle	r2, #14
 8006182:	4b02      	ldrle	r3, [pc, #8]	; (800618c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8006184:	fb02 3000 	mlale	r0, r2, r0, r3
 8006188:	4801      	ldrgt	r0, [pc, #4]	; (8006190 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800618a:	4770      	bx	lr
 800618c:	0800bd16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, ip, sp, pc}
 8006190:	0800bc7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp, pc}

08006194 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	460e      	mov	r6, r1
 8006198:	4615      	mov	r5, r2
 800619a:	461c      	mov	r4, r3
 800619c:	f7ff ffbe 	bl	800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4905      	ldr	r1, [pc, #20]	; (80061b8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 80061a4:	22ff      	movs	r2, #255	; 0xff
 80061a6:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80061aa:	61cb      	str	r3, [r1, #28]
 80061ac:	2300      	movs	r3, #0
 80061ae:	604d      	str	r5, [r1, #4]
 80061b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80061b4:	618c      	str	r4, [r1, #24]
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	200005f4 	strdcs	r0, [r0], -r4

080061bc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	460e      	mov	r6, r1
 80061c0:	461c      	mov	r4, r3
 80061c2:	4615      	mov	r5, r2
 80061c4:	f7ff ffaa 	bl	800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80061c8:	2302      	movs	r3, #2
 80061ca:	4908      	ldr	r1, [pc, #32]	; (80061ec <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 80061cc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80061d0:	61cb      	str	r3, [r1, #28]
 80061d2:	9b04      	ldr	r3, [sp, #16]
 80061d4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 80061d8:	604b      	str	r3, [r1, #4]
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	610b      	str	r3, [r1, #16]
 80061e0:	2300      	movs	r3, #0
 80061e2:	614b      	str	r3, [r1, #20]
 80061e4:	9b05      	ldr	r3, [sp, #20]
 80061e6:	618b      	str	r3, [r1, #24]
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	bf00      	nop
 80061ec:	200005f4 	strdcs	r0, [r0], -r4
 80061f0:	2000061c 	andcs	r0, r0, ip, lsl r6

080061f4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460e      	mov	r6, r1
 80061f8:	461d      	mov	r5, r3
 80061fa:	4614      	mov	r4, r2
 80061fc:	f7ff ff8e 	bl	800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8006200:	2303      	movs	r3, #3
 8006202:	4907      	ldr	r1, [pc, #28]	; (8006220 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8006204:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8006208:	61cb      	str	r3, [r1, #28]
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800620c:	604d      	str	r5, [r1, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	608c      	str	r4, [r1, #8]
 8006212:	610b      	str	r3, [r1, #16]
 8006214:	2300      	movs	r3, #0
 8006216:	614b      	str	r3, [r1, #20]
 8006218:	9b04      	ldr	r3, [sp, #16]
 800621a:	618b      	str	r3, [r1, #24]
 800621c:	bd70      	pop	{r4, r5, r6, pc}
 800621e:	bf00      	nop
 8006220:	200005f4 	strdcs	r0, [r0], -r4
 8006224:	2000061c 	andcs	r0, r0, ip, lsl r6

08006228 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	460e      	mov	r6, r1
 800622c:	461d      	mov	r5, r3
 800622e:	4614      	mov	r4, r2
 8006230:	f7ff ff74 	bl	800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8006234:	2304      	movs	r3, #4
 8006236:	4912      	ldr	r1, [pc, #72]	; (8006280 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8006238:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800623c:	604d      	str	r5, [r1, #4]
 800623e:	4d11      	ldr	r5, [pc, #68]	; (8006284 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8006240:	61cb      	str	r3, [r1, #28]
 8006242:	6828      	ldr	r0, [r5, #0]
 8006244:	608c      	str	r4, [r1, #8]
 8006246:	1e43      	subs	r3, r0, #1
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b29b      	uxth	r3, r3
 800624c:	610b      	str	r3, [r1, #16]
 800624e:	2300      	movs	r3, #0
 8006250:	4c0d      	ldr	r4, [pc, #52]	; (8006288 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8006252:	614b      	str	r3, [r1, #20]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	b97b      	cbnz	r3, 8006278 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8006258:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800625c:	4298      	cmp	r0, r3
 800625e:	bf2c      	ite	cs
 8006260:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8006264:	0080      	lslcc	r0, r0, #2
 8006266:	f002 fb40 	bl	80088ea <operator new[](unsigned int)>
 800626a:	2200      	movs	r2, #0
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	6020      	str	r0, [r4, #0]
 8006270:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006274:	4298      	cmp	r0, r3
 8006276:	d100      	bne.n	800627a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8006278:	bd70      	pop	{r4, r5, r6, pc}
 800627a:	f840 2b04 	str.w	r2, [r0], #4
 800627e:	e7f9      	b.n	8006274 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8006280:	200005f4 	strdcs	r0, [r0], -r4
 8006284:	2000061c 	andcs	r0, r0, ip, lsl r6
 8006288:	20000618 	andcs	r0, r0, r8, lsl r6

0800628c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	461c      	mov	r4, r3
 8006292:	4615      	mov	r5, r2
 8006294:	f7ff ff42 	bl	800611c <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8006298:	2305      	movs	r3, #5
 800629a:	4907      	ldr	r1, [pc, #28]	; (80062b8 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800629c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 80062a0:	61cb      	str	r3, [r1, #28]
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	e9c1 5402 	strd	r5, r4, [r1, #8]
 80062a8:	604b      	str	r3, [r1, #4]
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	610b      	str	r3, [r1, #16]
 80062ae:	2300      	movs	r3, #0
 80062b0:	614b      	str	r3, [r1, #20]
 80062b2:	9b06      	ldr	r3, [sp, #24]
 80062b4:	618b      	str	r3, [r1, #24]
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	200005f4 	strdcs	r0, [r0], -r4

080062bc <PixelPatterns::Wheel(unsigned char)>:
 80062bc:	43cb      	mvns	r3, r1
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b54      	cmp	r3, #84	; 0x54
 80062c2:	d809      	bhi.n	80062d8 <PixelPatterns::Wheel(unsigned char)+0x1c>
 80062c4:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	1e5a      	subs	r2, r3, #1
 80062cc:	4258      	negs	r0, r3
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	b2c0      	uxtb	r0, r0
 80062d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80062d6:	4770      	bx	lr
 80062d8:	2ba9      	cmp	r3, #169	; 0xa9
 80062da:	d809      	bhi.n	80062f0 <PixelPatterns::Wheel(unsigned char)+0x34>
 80062dc:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 80062e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80062e4:	b2c9      	uxtb	r1, r1
 80062e6:	43c8      	mvns	r0, r1
 80062e8:	b2c0      	uxtb	r0, r0
 80062ea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80062ee:	4770      	bx	lr
 80062f0:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 80062f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80062f8:	b2c9      	uxtb	r1, r1
 80062fa:	0208      	lsls	r0, r1, #8
 80062fc:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8006300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8006304:	4770      	bx	lr
	...

08006308 <PixelPatterns::Increment(unsigned int)>:
 8006308:	4a0d      	ldr	r2, [pc, #52]	; (8006340 <PixelPatterns::Increment(unsigned int)+0x38>)
 800630a:	b510      	push	{r4, lr}
 800630c:	014c      	lsls	r4, r1, #5
 800630e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8006312:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8006316:	b930      	cbnz	r0, 8006326 <PixelPatterns::Increment(unsigned int)+0x1e>
 8006318:	690a      	ldr	r2, [r1, #16]
 800631a:	3301      	adds	r3, #1
 800631c:	4293      	cmp	r3, r2
 800631e:	bf18      	it	ne
 8006320:	4618      	movne	r0, r3
 8006322:	6148      	str	r0, [r1, #20]
 8006324:	bd10      	pop	{r4, pc}
 8006326:	b92b      	cbnz	r3, 8006334 <PixelPatterns::Increment(unsigned int)+0x2c>
 8006328:	4422      	add	r2, r4
 800632a:	6913      	ldr	r3, [r2, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	b29b      	uxth	r3, r3
 8006330:	6153      	str	r3, [r2, #20]
 8006332:	e7f7      	b.n	8006324 <PixelPatterns::Increment(unsigned int)+0x1c>
 8006334:	3b01      	subs	r3, #1
 8006336:	614b      	str	r3, [r1, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f3      	bne.n	8006324 <PixelPatterns::Increment(unsigned int)+0x1c>
 800633c:	e7f4      	b.n	8006328 <PixelPatterns::Increment(unsigned int)+0x20>
 800633e:	bf00      	nop
 8006340:	200005f4 	strdcs	r0, [r0], -r4

08006344 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	2700      	movs	r7, #0
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8006350:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8006394 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8006354:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006358:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800635c:	f8d8 2000 	ldr.w	r2, [r8]
 8006360:	b2be      	uxth	r6, r7
 8006362:	42b2      	cmp	r2, r6
 8006364:	f107 0701 	add.w	r7, r7, #1
 8006368:	d805      	bhi.n	8006376 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800636a:	4629      	mov	r1, r5
 800636c:	4620      	mov	r0, r4
 800636e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006372:	f7ff bfc9 	b.w	8006308 <PixelPatterns::Increment(unsigned int)>
 8006376:	0233      	lsls	r3, r6, #8
 8006378:	fbb3 f3f2 	udiv	r3, r3, r2
 800637c:	444b      	add	r3, r9
 800637e:	b2d9      	uxtb	r1, r3
 8006380:	4620      	mov	r0, r4
 8006382:	f7ff ff9b 	bl	80062bc <PixelPatterns::Wheel(unsigned char)>
 8006386:	4601      	mov	r1, r0
 8006388:	4630      	mov	r0, r6
 800638a:	f7ff fea1 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800638e:	e7e5      	b.n	800635c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8006390:	200005f4 	strdcs	r0, [r0], -r4
 8006394:	2000061c 	andcs	r0, r0, ip, lsl r6

08006398 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8006398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	f04f 0b00 	mov.w	fp, #0
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 80063a6:	4e12      	ldr	r6, [pc, #72]	; (80063f0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 80063a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80063ac:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80063b0:	f8df a040 	ldr.w	sl, [pc, #64]	; 80063f4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 80063b4:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 80063b8:	6833      	ldr	r3, [r6, #0]
 80063ba:	fa1f f08b 	uxth.w	r0, fp
 80063be:	4283      	cmp	r3, r0
 80063c0:	d805      	bhi.n	80063ce <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ca:	f7ff bf9d 	b.w	8006308 <PixelPatterns::Increment(unsigned int)>
 80063ce:	eb09 0300 	add.w	r3, r9, r0
 80063d2:	fb0a f303 	mul.w	r3, sl, r3
 80063d6:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80063da:	bf94      	ite	ls
 80063dc:	4639      	movls	r1, r7
 80063de:	4641      	movhi	r1, r8
 80063e0:	f7ff fe76 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80063e4:	f10b 0b01 	add.w	fp, fp, #1
 80063e8:	e7e6      	b.n	80063b8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 80063ea:	bf00      	nop
 80063ec:	200005f4 	strdcs	r0, [r0], -r4
 80063f0:	2000061c 	andcs	r0, r0, ip, lsl r6
 80063f4:	aaaaaaab 	bge	6ab0ea8 <__heap_size+0x6aafea8>

080063f8 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4605      	mov	r5, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 8006400:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006404:	6899      	ldr	r1, [r3, #8]
 8006406:	6958      	ldr	r0, [r3, #20]
 8006408:	f7ff fe62 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800640c:	4621      	mov	r1, r4
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006414:	f7ff bf78 	b.w	8006308 <PixelPatterns::Increment(unsigned int)>
 8006418:	200005f4 	strdcs	r0, [r0], -r4

0800641c <PixelPatterns::ScannerUpdate(unsigned int)>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	460d      	mov	r5, r1
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 8006428:	b085      	sub	sp, #20
 800642a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800642e:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8006432:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8006436:	00b3      	lsls	r3, r6, #2
 8006438:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80064c8 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800643c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80064cc <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	1bbf      	subs	r7, r7, r6
 8006446:	f8da 1000 	ldr.w	r1, [sl]
 800644a:	fa1f f489 	uxth.w	r4, r9
 800644e:	42a1      	cmp	r1, r4
 8006450:	d806      	bhi.n	8006460 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 8006452:	4629      	mov	r1, r5
 8006454:	9802      	ldr	r0, [sp, #8]
 8006456:	b005      	add	sp, #20
 8006458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	f7ff bf54 	b.w	8006308 <PixelPatterns::Increment(unsigned int)>
 8006460:	42a6      	cmp	r6, r4
 8006462:	d10b      	bne.n	800647c <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8006464:	4659      	mov	r1, fp
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff fe32 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800646c:	f8d8 1000 	ldr.w	r1, [r8]
 8006470:	9b01      	ldr	r3, [sp, #4]
 8006472:	f841 b003 	str.w	fp, [r1, r3]
 8006476:	f109 0901 	add.w	r9, r9, #1
 800647a:	e7e4      	b.n	8006446 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800647c:	42a7      	cmp	r7, r4
 800647e:	d108      	bne.n	8006492 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 8006480:	4659      	mov	r1, fp
 8006482:	4638      	mov	r0, r7
 8006484:	f7ff fe24 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006488:	f8d8 1000 	ldr.w	r1, [r8]
 800648c:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8006490:	e7f1      	b.n	8006476 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 8006492:	f8d8 1000 	ldr.w	r1, [r8]
 8006496:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800649a:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800649e:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 80064a2:	0209      	lsls	r1, r1, #8
 80064a4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80064a8:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80064ac:	4301      	orrs	r1, r0
 80064ae:	4620      	mov	r0, r4
 80064b0:	9103      	str	r1, [sp, #12]
 80064b2:	f7ff fe0d 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80064b6:	f8d8 0000 	ldr.w	r0, [r8]
 80064ba:	9903      	ldr	r1, [sp, #12]
 80064bc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80064c0:	e7d9      	b.n	8006476 <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 80064c2:	bf00      	nop
 80064c4:	200005f4 	strdcs	r0, [r0], -r4
 80064c8:	2000061c 	andcs	r0, r0, ip, lsl r6
 80064cc:	20000618 	andcs	r0, r0, r8, lsl r6

080064d0 <PixelPatterns::FadeUpdate(unsigned int)>:
 80064d0:	4a21      	ldr	r2, [pc, #132]	; (8006558 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80064da:	4605      	mov	r5, r0
 80064dc:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 80064e0:	460c      	mov	r4, r1
 80064e2:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 80064e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80064ea:	437a      	muls	r2, r7
 80064ec:	1bc6      	subs	r6, r0, r7
 80064ee:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80064f2:	fb06 220c 	mla	r2, r6, ip, r2
 80064f6:	fbb2 f2f0 	udiv	r2, r2, r0
 80064fa:	0212      	lsls	r2, r2, #8
 80064fc:	fa1f fc82 	uxth.w	ip, r2
 8006500:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006504:	437a      	muls	r2, r7
 8006506:	b2db      	uxtb	r3, r3
 8006508:	437b      	muls	r3, r7
 800650a:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800650e:	fb06 220e 	mla	r2, r6, lr, r2
 8006512:	b2c9      	uxtb	r1, r1
 8006514:	fb06 3301 	mla	r3, r6, r1, r3
 8006518:	fbb2 f2f0 	udiv	r2, r2, r0
 800651c:	fbb3 f3f0 	udiv	r3, r3, r0
 8006520:	2700      	movs	r7, #0
 8006522:	0412      	lsls	r2, r2, #16
 8006524:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8006528:	ea4c 0202 	orr.w	r2, ip, r2
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800655c <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8006532:	ea42 0603 	orr.w	r6, r2, r3
 8006536:	f8d8 3000 	ldr.w	r3, [r8]
 800653a:	429f      	cmp	r7, r3
 800653c:	d305      	bcc.n	800654a <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800653e:	4621      	mov	r1, r4
 8006540:	4628      	mov	r0, r5
 8006542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	f7ff bedf 	b.w	8006308 <PixelPatterns::Increment(unsigned int)>
 800654a:	4638      	mov	r0, r7
 800654c:	4631      	mov	r1, r6
 800654e:	f7ff fdbf 	bl	80060d0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006552:	3701      	adds	r7, #1
 8006554:	e7ef      	b.n	8006536 <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 8006556:	bf00      	nop
 8006558:	200005f4 	strdcs	r0, [r0], -r4
 800655c:	2000061c 	andcs	r0, r0, ip, lsl r6

08006560 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8006564:	014e      	lsls	r6, r1, #5
 8006566:	599c      	ldr	r4, [r3, r6]
 8006568:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800656c:	686f      	ldr	r7, [r5, #4]
 800656e:	1b14      	subs	r4, r2, r4
 8006570:	42bc      	cmp	r4, r7
 8006572:	d319      	bcc.n	80065a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8006574:	519a      	str	r2, [r3, r6]
 8006576:	69eb      	ldr	r3, [r5, #28]
 8006578:	3b01      	subs	r3, #1
 800657a:	2b04      	cmp	r3, #4
 800657c:	d814      	bhi.n	80065a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800657e:	e8df f003 	tbb	[pc, r3]
 8006582:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8006586:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800658a:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006590:	f7ff ff02 	bl	8006398 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8006594:	e7fa      	b.n	800658c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8006596:	f7ff ff2f 	bl	80063f8 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800659a:	e7f7      	b.n	800658c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800659c:	f7ff ff3e 	bl	800641c <PixelPatterns::ScannerUpdate(unsigned int)>
 80065a0:	e7f4      	b.n	800658c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80065a2:	f7ff ff95 	bl	80064d0 <PixelPatterns::FadeUpdate(unsigned int)>
 80065a6:	e7f1      	b.n	800658c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80065a8:	2000      	movs	r0, #0
 80065aa:	e7f0      	b.n	800658e <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 80065ac:	200005f4 	strdcs	r0, [r0], -r4

080065b0 <PixelPatterns::Run()>:
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	4606      	mov	r6, r0
 80065b6:	f003 fbbf 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 80065ba:	4604      	mov	r4, r0
 80065bc:	b9c0      	cbnz	r0, 80065f0 <PixelPatterns::Run()+0x40>
 80065be:	4605      	mov	r5, r0
 80065c0:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <PixelPatterns::Run()+0x44>)
 80065c2:	4f0d      	ldr	r7, [pc, #52]	; (80065f8 <PixelPatterns::Run()+0x48>)
 80065c4:	f8d3 8000 	ldr.w	r8, [r3]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	b2e9      	uxtb	r1, r5
 80065cc:	428b      	cmp	r3, r1
 80065ce:	f105 0501 	add.w	r5, r5, #1
 80065d2:	d806      	bhi.n	80065e2 <PixelPatterns::Run()+0x32>
 80065d4:	b164      	cbz	r4, 80065f0 <PixelPatterns::Run()+0x40>
 80065d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065da:	4b08      	ldr	r3, [pc, #32]	; (80065fc <PixelPatterns::Run()+0x4c>)
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f000 bdb1 	b.w	8007144 <WS28xx::Update()>
 80065e2:	4642      	mov	r2, r8
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7ff ffbb 	bl	8006560 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 80065ea:	4304      	orrs	r4, r0
 80065ec:	b2e4      	uxtb	r4, r4
 80065ee:	e7eb      	b.n	80065c8 <PixelPatterns::Run()+0x18>
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	200017ac 	andcs	r1, r0, ip, lsr #15
 80065f8:	20000614 	andcs	r0, r0, r4, lsl r6
 80065fc:	20000620 	andcs	r0, r0, r0, lsr #12

08006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	6984      	ldr	r4, [r0, #24]
 8006604:	f89d e010 	ldrb.w	lr, [sp, #16]
 8006608:	f814 c003 	ldrb.w	ip, [r4, r3]
 800660c:	7d43      	ldrb	r3, [r0, #21]
 800660e:	5ca2      	ldrb	r2, [r4, r2]
 8006610:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006614:	b993      	cbnz	r3, 800663c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 8006616:	6803      	ldr	r3, [r0, #0]
 8006618:	f1a3 040b 	sub.w	r4, r3, #11
 800661c:	2c01      	cmp	r4, #1
 800661e:	d93e      	bls.n	800669e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 8006620:	b9db      	cbnz	r3, 800665a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 8006622:	6a03      	ldr	r3, [r0, #32]
 8006624:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006628:	545a      	strb	r2, [r3, r1]
 800662a:	6a03      	ldr	r3, [r0, #32]
 800662c:	440b      	add	r3, r1
 800662e:	f883 c001 	strb.w	ip, [r3, #1]
 8006632:	6a03      	ldr	r3, [r0, #32]
 8006634:	440b      	add	r3, r1
 8006636:	f883 e002 	strb.w	lr, [r3, #2]
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006640:	00cb      	lsls	r3, r1, #3
 8006642:	6881      	ldr	r1, [r0, #8]
 8006644:	2905      	cmp	r1, #5
 8006646:	f200 80ff 	bhi.w	8006848 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 800664a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800664e:	028400fd 	addeq	r0, r4, #253	; 0xfd
 8006652:	038b030b 	orreq	r0, fp, #738197504	; 0x2c000000
 8006656:	01c1003c 	biceq	r0, r1, ip, lsr r0
 800665a:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 800665e:	ea6f 151c 	mvn.w	r5, ip, lsr #4
 8006662:	f082 06c0 	eor.w	r6, r2, #192	; 0xc0
 8006666:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800666a:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
 800666e:	f005 050c 	and.w	r5, r5, #12
 8006672:	6a04      	ldr	r4, [r0, #32]
 8006674:	432b      	orrs	r3, r5
 8006676:	3101      	adds	r1, #1
 8006678:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800667c:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 8006680:	6a03      	ldr	r3, [r0, #32]
 8006682:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006686:	f883 e001 	strb.w	lr, [r3, #1]
 800668a:	6a03      	ldr	r3, [r0, #32]
 800668c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006690:	f883 c002 	strb.w	ip, [r3, #2]
 8006694:	6a03      	ldr	r3, [r0, #32]
 8006696:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800669a:	70da      	strb	r2, [r3, #3]
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	6a03      	ldr	r3, [r0, #32]
 80066a0:	7c84      	ldrb	r4, [r0, #18]
 80066a2:	3101      	adds	r1, #1
 80066a4:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 80066a8:	6a03      	ldr	r3, [r0, #32]
 80066aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80066ae:	705a      	strb	r2, [r3, #1]
 80066b0:	6a03      	ldr	r3, [r0, #32]
 80066b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80066b6:	f883 c002 	strb.w	ip, [r3, #2]
 80066ba:	6a03      	ldr	r3, [r0, #32]
 80066bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80066c0:	f883 e003 	strb.w	lr, [r3, #3]
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	7c01      	ldrb	r1, [r0, #16]
 80066c8:	7c44      	ldrb	r4, [r0, #17]
 80066ca:	6a05      	ldr	r5, [r0, #32]
 80066cc:	1c5e      	adds	r6, r3, #1
 80066ce:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80066d2:	bf0c      	ite	eq
 80066d4:	55a9      	strbeq	r1, [r5, r6]
 80066d6:	55ac      	strbne	r4, [r5, r6]
 80066d8:	6a05      	ldr	r5, [r0, #32]
 80066da:	1c9e      	adds	r6, r3, #2
 80066dc:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80066e0:	bf0c      	ite	eq
 80066e2:	55a9      	strbeq	r1, [r5, r6]
 80066e4:	55ac      	strbne	r4, [r5, r6]
 80066e6:	6a05      	ldr	r5, [r0, #32]
 80066e8:	1cde      	adds	r6, r3, #3
 80066ea:	f01e 0f20 	tst.w	lr, #32
 80066ee:	bf0c      	ite	eq
 80066f0:	55a9      	strbeq	r1, [r5, r6]
 80066f2:	55ac      	strbne	r4, [r5, r6]
 80066f4:	6a05      	ldr	r5, [r0, #32]
 80066f6:	1d1e      	adds	r6, r3, #4
 80066f8:	f01e 0f10 	tst.w	lr, #16
 80066fc:	bf0c      	ite	eq
 80066fe:	55a9      	strbeq	r1, [r5, r6]
 8006700:	55ac      	strbne	r4, [r5, r6]
 8006702:	6a05      	ldr	r5, [r0, #32]
 8006704:	1d5e      	adds	r6, r3, #5
 8006706:	f01e 0f08 	tst.w	lr, #8
 800670a:	bf0c      	ite	eq
 800670c:	55a9      	strbeq	r1, [r5, r6]
 800670e:	55ac      	strbne	r4, [r5, r6]
 8006710:	6a05      	ldr	r5, [r0, #32]
 8006712:	1d9e      	adds	r6, r3, #6
 8006714:	f01e 0f04 	tst.w	lr, #4
 8006718:	bf0c      	ite	eq
 800671a:	55a9      	strbeq	r1, [r5, r6]
 800671c:	55ac      	strbne	r4, [r5, r6]
 800671e:	6a05      	ldr	r5, [r0, #32]
 8006720:	1dde      	adds	r6, r3, #7
 8006722:	f01e 0f02 	tst.w	lr, #2
 8006726:	bf0c      	ite	eq
 8006728:	55a9      	strbeq	r1, [r5, r6]
 800672a:	55ac      	strbne	r4, [r5, r6]
 800672c:	f01e 0f01 	tst.w	lr, #1
 8006730:	bf14      	ite	ne
 8006732:	6a01      	ldrne	r1, [r0, #32]
 8006734:	6a04      	ldreq	r4, [r0, #32]
 8006736:	f103 0508 	add.w	r5, r3, #8
 800673a:	bf14      	ite	ne
 800673c:	554c      	strbne	r4, [r1, r5]
 800673e:	5561      	strbeq	r1, [r4, r5]
 8006740:	7c01      	ldrb	r1, [r0, #16]
 8006742:	7c44      	ldrb	r4, [r0, #17]
 8006744:	6a06      	ldr	r6, [r0, #32]
 8006746:	f012 0f80 	tst.w	r2, #128	; 0x80
 800674a:	f103 0509 	add.w	r5, r3, #9
 800674e:	bf0c      	ite	eq
 8006750:	5571      	strbeq	r1, [r6, r5]
 8006752:	5574      	strbne	r4, [r6, r5]
 8006754:	6a06      	ldr	r6, [r0, #32]
 8006756:	f012 0f40 	tst.w	r2, #64	; 0x40
 800675a:	f103 050a 	add.w	r5, r3, #10
 800675e:	bf0c      	ite	eq
 8006760:	5571      	strbeq	r1, [r6, r5]
 8006762:	5574      	strbne	r4, [r6, r5]
 8006764:	6a06      	ldr	r6, [r0, #32]
 8006766:	f012 0f20 	tst.w	r2, #32
 800676a:	f103 050b 	add.w	r5, r3, #11
 800676e:	bf0c      	ite	eq
 8006770:	5571      	strbeq	r1, [r6, r5]
 8006772:	5574      	strbne	r4, [r6, r5]
 8006774:	6a06      	ldr	r6, [r0, #32]
 8006776:	f012 0f10 	tst.w	r2, #16
 800677a:	f103 050c 	add.w	r5, r3, #12
 800677e:	bf0c      	ite	eq
 8006780:	5571      	strbeq	r1, [r6, r5]
 8006782:	5574      	strbne	r4, [r6, r5]
 8006784:	6a06      	ldr	r6, [r0, #32]
 8006786:	f012 0f08 	tst.w	r2, #8
 800678a:	f103 050d 	add.w	r5, r3, #13
 800678e:	bf0c      	ite	eq
 8006790:	5571      	strbeq	r1, [r6, r5]
 8006792:	5574      	strbne	r4, [r6, r5]
 8006794:	6a06      	ldr	r6, [r0, #32]
 8006796:	f012 0f04 	tst.w	r2, #4
 800679a:	f103 050e 	add.w	r5, r3, #14
 800679e:	bf0c      	ite	eq
 80067a0:	5571      	strbeq	r1, [r6, r5]
 80067a2:	5574      	strbne	r4, [r6, r5]
 80067a4:	6a06      	ldr	r6, [r0, #32]
 80067a6:	f012 0f02 	tst.w	r2, #2
 80067aa:	f103 050f 	add.w	r5, r3, #15
 80067ae:	bf0c      	ite	eq
 80067b0:	5571      	strbeq	r1, [r6, r5]
 80067b2:	5574      	strbne	r4, [r6, r5]
 80067b4:	f012 0f01 	tst.w	r2, #1
 80067b8:	6a02      	ldr	r2, [r0, #32]
 80067ba:	f103 0510 	add.w	r5, r3, #16
 80067be:	bf14      	ite	ne
 80067c0:	5554      	strbne	r4, [r2, r5]
 80067c2:	5551      	strbeq	r1, [r2, r5]
 80067c4:	6a05      	ldr	r5, [r0, #32]
 80067c6:	7c02      	ldrb	r2, [r0, #16]
 80067c8:	7c41      	ldrb	r1, [r0, #17]
 80067ca:	f103 0411 	add.w	r4, r3, #17
 80067ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80067d2:	bf0c      	ite	eq
 80067d4:	552a      	strbeq	r2, [r5, r4]
 80067d6:	5529      	strbne	r1, [r5, r4]
 80067d8:	6a05      	ldr	r5, [r0, #32]
 80067da:	f103 0412 	add.w	r4, r3, #18
 80067de:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80067e2:	bf0c      	ite	eq
 80067e4:	552a      	strbeq	r2, [r5, r4]
 80067e6:	5529      	strbne	r1, [r5, r4]
 80067e8:	6a05      	ldr	r5, [r0, #32]
 80067ea:	f103 0413 	add.w	r4, r3, #19
 80067ee:	f01c 0f20 	tst.w	ip, #32
 80067f2:	bf0c      	ite	eq
 80067f4:	552a      	strbeq	r2, [r5, r4]
 80067f6:	5529      	strbne	r1, [r5, r4]
 80067f8:	6a05      	ldr	r5, [r0, #32]
 80067fa:	f103 0414 	add.w	r4, r3, #20
 80067fe:	f01c 0f10 	tst.w	ip, #16
 8006802:	bf0c      	ite	eq
 8006804:	552a      	strbeq	r2, [r5, r4]
 8006806:	5529      	strbne	r1, [r5, r4]
 8006808:	6a05      	ldr	r5, [r0, #32]
 800680a:	f103 0415 	add.w	r4, r3, #21
 800680e:	f01c 0f08 	tst.w	ip, #8
 8006812:	bf0c      	ite	eq
 8006814:	552a      	strbeq	r2, [r5, r4]
 8006816:	5529      	strbne	r1, [r5, r4]
 8006818:	6a05      	ldr	r5, [r0, #32]
 800681a:	f103 0416 	add.w	r4, r3, #22
 800681e:	f01c 0f04 	tst.w	ip, #4
 8006822:	bf0c      	ite	eq
 8006824:	552a      	strbeq	r2, [r5, r4]
 8006826:	5529      	strbne	r1, [r5, r4]
 8006828:	6a05      	ldr	r5, [r0, #32]
 800682a:	f103 0417 	add.w	r4, r3, #23
 800682e:	f01c 0f02 	tst.w	ip, #2
 8006832:	bf0c      	ite	eq
 8006834:	552a      	strbeq	r2, [r5, r4]
 8006836:	5529      	strbne	r1, [r5, r4]
 8006838:	3318      	adds	r3, #24
 800683a:	f01c 0f01 	tst.w	ip, #1
 800683e:	f000 830d 	beq.w	8006e5c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x85c>
 8006842:	6a02      	ldr	r2, [r0, #32]
 8006844:	54d1      	strb	r1, [r2, r3]
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	7c01      	ldrb	r1, [r0, #16]
 800684a:	7c44      	ldrb	r4, [r0, #17]
 800684c:	6a05      	ldr	r5, [r0, #32]
 800684e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006852:	f103 0601 	add.w	r6, r3, #1
 8006856:	bf14      	ite	ne
 8006858:	55ac      	strbne	r4, [r5, r6]
 800685a:	55a9      	strbeq	r1, [r5, r6]
 800685c:	6a05      	ldr	r5, [r0, #32]
 800685e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006862:	f103 0602 	add.w	r6, r3, #2
 8006866:	bf14      	ite	ne
 8006868:	55ac      	strbne	r4, [r5, r6]
 800686a:	55a9      	strbeq	r1, [r5, r6]
 800686c:	6a05      	ldr	r5, [r0, #32]
 800686e:	f012 0f20 	tst.w	r2, #32
 8006872:	f103 0603 	add.w	r6, r3, #3
 8006876:	bf14      	ite	ne
 8006878:	55ac      	strbne	r4, [r5, r6]
 800687a:	55a9      	strbeq	r1, [r5, r6]
 800687c:	6a05      	ldr	r5, [r0, #32]
 800687e:	f012 0f10 	tst.w	r2, #16
 8006882:	f103 0604 	add.w	r6, r3, #4
 8006886:	bf14      	ite	ne
 8006888:	55ac      	strbne	r4, [r5, r6]
 800688a:	55a9      	strbeq	r1, [r5, r6]
 800688c:	6a05      	ldr	r5, [r0, #32]
 800688e:	f012 0f08 	tst.w	r2, #8
 8006892:	f103 0605 	add.w	r6, r3, #5
 8006896:	bf14      	ite	ne
 8006898:	55ac      	strbne	r4, [r5, r6]
 800689a:	55a9      	strbeq	r1, [r5, r6]
 800689c:	6a05      	ldr	r5, [r0, #32]
 800689e:	f012 0f04 	tst.w	r2, #4
 80068a2:	f103 0606 	add.w	r6, r3, #6
 80068a6:	bf14      	ite	ne
 80068a8:	55ac      	strbne	r4, [r5, r6]
 80068aa:	55a9      	strbeq	r1, [r5, r6]
 80068ac:	6a05      	ldr	r5, [r0, #32]
 80068ae:	f012 0f02 	tst.w	r2, #2
 80068b2:	f103 0607 	add.w	r6, r3, #7
 80068b6:	bf14      	ite	ne
 80068b8:	55ac      	strbne	r4, [r5, r6]
 80068ba:	55a9      	strbeq	r1, [r5, r6]
 80068bc:	f012 0f01 	tst.w	r2, #1
 80068c0:	6a02      	ldr	r2, [r0, #32]
 80068c2:	f103 0508 	add.w	r5, r3, #8
 80068c6:	bf14      	ite	ne
 80068c8:	5554      	strbne	r4, [r2, r5]
 80068ca:	5551      	strbeq	r1, [r2, r5]
 80068cc:	7c41      	ldrb	r1, [r0, #17]
 80068ce:	7c02      	ldrb	r2, [r0, #16]
 80068d0:	6a05      	ldr	r5, [r0, #32]
 80068d2:	f103 0409 	add.w	r4, r3, #9
 80068d6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80068da:	bf0c      	ite	eq
 80068dc:	552a      	strbeq	r2, [r5, r4]
 80068de:	5529      	strbne	r1, [r5, r4]
 80068e0:	6a05      	ldr	r5, [r0, #32]
 80068e2:	f103 040a 	add.w	r4, r3, #10
 80068e6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80068ea:	bf0c      	ite	eq
 80068ec:	552a      	strbeq	r2, [r5, r4]
 80068ee:	5529      	strbne	r1, [r5, r4]
 80068f0:	6a05      	ldr	r5, [r0, #32]
 80068f2:	f103 040b 	add.w	r4, r3, #11
 80068f6:	f01c 0f20 	tst.w	ip, #32
 80068fa:	bf0c      	ite	eq
 80068fc:	552a      	strbeq	r2, [r5, r4]
 80068fe:	5529      	strbne	r1, [r5, r4]
 8006900:	6a05      	ldr	r5, [r0, #32]
 8006902:	f103 040c 	add.w	r4, r3, #12
 8006906:	f01c 0f10 	tst.w	ip, #16
 800690a:	bf0c      	ite	eq
 800690c:	552a      	strbeq	r2, [r5, r4]
 800690e:	5529      	strbne	r1, [r5, r4]
 8006910:	6a05      	ldr	r5, [r0, #32]
 8006912:	f103 040d 	add.w	r4, r3, #13
 8006916:	f01c 0f08 	tst.w	ip, #8
 800691a:	bf0c      	ite	eq
 800691c:	552a      	strbeq	r2, [r5, r4]
 800691e:	5529      	strbne	r1, [r5, r4]
 8006920:	6a05      	ldr	r5, [r0, #32]
 8006922:	f103 040e 	add.w	r4, r3, #14
 8006926:	f01c 0f04 	tst.w	ip, #4
 800692a:	bf0c      	ite	eq
 800692c:	552a      	strbeq	r2, [r5, r4]
 800692e:	5529      	strbne	r1, [r5, r4]
 8006930:	6a05      	ldr	r5, [r0, #32]
 8006932:	f103 040f 	add.w	r4, r3, #15
 8006936:	f01c 0f02 	tst.w	ip, #2
 800693a:	bf0c      	ite	eq
 800693c:	552a      	strbeq	r2, [r5, r4]
 800693e:	5529      	strbne	r1, [r5, r4]
 8006940:	f01c 0f01 	tst.w	ip, #1
 8006944:	bf14      	ite	ne
 8006946:	6a02      	ldrne	r2, [r0, #32]
 8006948:	6a01      	ldreq	r1, [r0, #32]
 800694a:	f103 0410 	add.w	r4, r3, #16
 800694e:	bf14      	ite	ne
 8006950:	5511      	strbne	r1, [r2, r4]
 8006952:	550a      	strbeq	r2, [r1, r4]
 8006954:	6a05      	ldr	r5, [r0, #32]
 8006956:	7c02      	ldrb	r2, [r0, #16]
 8006958:	7c41      	ldrb	r1, [r0, #17]
 800695a:	f103 0411 	add.w	r4, r3, #17
 800695e:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006962:	bf0c      	ite	eq
 8006964:	552a      	strbeq	r2, [r5, r4]
 8006966:	5529      	strbne	r1, [r5, r4]
 8006968:	6a05      	ldr	r5, [r0, #32]
 800696a:	f103 0412 	add.w	r4, r3, #18
 800696e:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006972:	bf0c      	ite	eq
 8006974:	552a      	strbeq	r2, [r5, r4]
 8006976:	5529      	strbne	r1, [r5, r4]
 8006978:	6a05      	ldr	r5, [r0, #32]
 800697a:	f103 0413 	add.w	r4, r3, #19
 800697e:	f01e 0f20 	tst.w	lr, #32
 8006982:	bf0c      	ite	eq
 8006984:	552a      	strbeq	r2, [r5, r4]
 8006986:	5529      	strbne	r1, [r5, r4]
 8006988:	6a05      	ldr	r5, [r0, #32]
 800698a:	f103 0414 	add.w	r4, r3, #20
 800698e:	f01e 0f10 	tst.w	lr, #16
 8006992:	bf0c      	ite	eq
 8006994:	552a      	strbeq	r2, [r5, r4]
 8006996:	5529      	strbne	r1, [r5, r4]
 8006998:	6a05      	ldr	r5, [r0, #32]
 800699a:	f103 0415 	add.w	r4, r3, #21
 800699e:	f01e 0f08 	tst.w	lr, #8
 80069a2:	bf0c      	ite	eq
 80069a4:	552a      	strbeq	r2, [r5, r4]
 80069a6:	5529      	strbne	r1, [r5, r4]
 80069a8:	6a05      	ldr	r5, [r0, #32]
 80069aa:	f103 0416 	add.w	r4, r3, #22
 80069ae:	f01e 0f04 	tst.w	lr, #4
 80069b2:	bf0c      	ite	eq
 80069b4:	552a      	strbeq	r2, [r5, r4]
 80069b6:	5529      	strbne	r1, [r5, r4]
 80069b8:	6a05      	ldr	r5, [r0, #32]
 80069ba:	f103 0417 	add.w	r4, r3, #23
 80069be:	f01e 0f02 	tst.w	lr, #2
 80069c2:	bf0c      	ite	eq
 80069c4:	552a      	strbeq	r2, [r5, r4]
 80069c6:	5529      	strbne	r1, [r5, r4]
 80069c8:	3318      	adds	r3, #24
 80069ca:	f01e 0f01 	tst.w	lr, #1
 80069ce:	e736      	b.n	800683e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 80069d0:	7c01      	ldrb	r1, [r0, #16]
 80069d2:	7c44      	ldrb	r4, [r0, #17]
 80069d4:	6a05      	ldr	r5, [r0, #32]
 80069d6:	1c5e      	adds	r6, r3, #1
 80069d8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80069dc:	bf0c      	ite	eq
 80069de:	55a9      	strbeq	r1, [r5, r6]
 80069e0:	55ac      	strbne	r4, [r5, r6]
 80069e2:	6a05      	ldr	r5, [r0, #32]
 80069e4:	1c9e      	adds	r6, r3, #2
 80069e6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80069ea:	bf0c      	ite	eq
 80069ec:	55a9      	strbeq	r1, [r5, r6]
 80069ee:	55ac      	strbne	r4, [r5, r6]
 80069f0:	6a05      	ldr	r5, [r0, #32]
 80069f2:	1cde      	adds	r6, r3, #3
 80069f4:	f01e 0f20 	tst.w	lr, #32
 80069f8:	bf0c      	ite	eq
 80069fa:	55a9      	strbeq	r1, [r5, r6]
 80069fc:	55ac      	strbne	r4, [r5, r6]
 80069fe:	6a05      	ldr	r5, [r0, #32]
 8006a00:	1d1e      	adds	r6, r3, #4
 8006a02:	f01e 0f10 	tst.w	lr, #16
 8006a06:	bf0c      	ite	eq
 8006a08:	55a9      	strbeq	r1, [r5, r6]
 8006a0a:	55ac      	strbne	r4, [r5, r6]
 8006a0c:	6a05      	ldr	r5, [r0, #32]
 8006a0e:	1d5e      	adds	r6, r3, #5
 8006a10:	f01e 0f08 	tst.w	lr, #8
 8006a14:	bf0c      	ite	eq
 8006a16:	55a9      	strbeq	r1, [r5, r6]
 8006a18:	55ac      	strbne	r4, [r5, r6]
 8006a1a:	6a05      	ldr	r5, [r0, #32]
 8006a1c:	1d9e      	adds	r6, r3, #6
 8006a1e:	f01e 0f04 	tst.w	lr, #4
 8006a22:	bf0c      	ite	eq
 8006a24:	55a9      	strbeq	r1, [r5, r6]
 8006a26:	55ac      	strbne	r4, [r5, r6]
 8006a28:	6a05      	ldr	r5, [r0, #32]
 8006a2a:	1dde      	adds	r6, r3, #7
 8006a2c:	f01e 0f02 	tst.w	lr, #2
 8006a30:	bf0c      	ite	eq
 8006a32:	55a9      	strbeq	r1, [r5, r6]
 8006a34:	55ac      	strbne	r4, [r5, r6]
 8006a36:	f01e 0f01 	tst.w	lr, #1
 8006a3a:	bf14      	ite	ne
 8006a3c:	6a01      	ldrne	r1, [r0, #32]
 8006a3e:	6a04      	ldreq	r4, [r0, #32]
 8006a40:	f103 0508 	add.w	r5, r3, #8
 8006a44:	bf14      	ite	ne
 8006a46:	554c      	strbne	r4, [r1, r5]
 8006a48:	5561      	strbeq	r1, [r4, r5]
 8006a4a:	7c01      	ldrb	r1, [r0, #16]
 8006a4c:	7c44      	ldrb	r4, [r0, #17]
 8006a4e:	6a06      	ldr	r6, [r0, #32]
 8006a50:	f103 0509 	add.w	r5, r3, #9
 8006a54:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006a58:	bf0c      	ite	eq
 8006a5a:	5571      	strbeq	r1, [r6, r5]
 8006a5c:	5574      	strbne	r4, [r6, r5]
 8006a5e:	6a06      	ldr	r6, [r0, #32]
 8006a60:	f103 050a 	add.w	r5, r3, #10
 8006a64:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006a68:	bf0c      	ite	eq
 8006a6a:	5571      	strbeq	r1, [r6, r5]
 8006a6c:	5574      	strbne	r4, [r6, r5]
 8006a6e:	6a06      	ldr	r6, [r0, #32]
 8006a70:	f103 050b 	add.w	r5, r3, #11
 8006a74:	f01c 0f20 	tst.w	ip, #32
 8006a78:	bf0c      	ite	eq
 8006a7a:	5571      	strbeq	r1, [r6, r5]
 8006a7c:	5574      	strbne	r4, [r6, r5]
 8006a7e:	6a06      	ldr	r6, [r0, #32]
 8006a80:	f103 050c 	add.w	r5, r3, #12
 8006a84:	f01c 0f10 	tst.w	ip, #16
 8006a88:	bf0c      	ite	eq
 8006a8a:	5571      	strbeq	r1, [r6, r5]
 8006a8c:	5574      	strbne	r4, [r6, r5]
 8006a8e:	6a06      	ldr	r6, [r0, #32]
 8006a90:	f103 050d 	add.w	r5, r3, #13
 8006a94:	f01c 0f08 	tst.w	ip, #8
 8006a98:	bf0c      	ite	eq
 8006a9a:	5571      	strbeq	r1, [r6, r5]
 8006a9c:	5574      	strbne	r4, [r6, r5]
 8006a9e:	6a06      	ldr	r6, [r0, #32]
 8006aa0:	f103 050e 	add.w	r5, r3, #14
 8006aa4:	f01c 0f04 	tst.w	ip, #4
 8006aa8:	bf0c      	ite	eq
 8006aaa:	5571      	strbeq	r1, [r6, r5]
 8006aac:	5574      	strbne	r4, [r6, r5]
 8006aae:	6a06      	ldr	r6, [r0, #32]
 8006ab0:	f103 050f 	add.w	r5, r3, #15
 8006ab4:	f01c 0f02 	tst.w	ip, #2
 8006ab8:	bf0c      	ite	eq
 8006aba:	5571      	strbeq	r1, [r6, r5]
 8006abc:	5574      	strbne	r4, [r6, r5]
 8006abe:	f103 0510 	add.w	r5, r3, #16
 8006ac2:	f01c 0f01 	tst.w	ip, #1
 8006ac6:	bf15      	itete	ne
 8006ac8:	6a01      	ldrne	r1, [r0, #32]
 8006aca:	6a04      	ldreq	r4, [r0, #32]
 8006acc:	554c      	strbne	r4, [r1, r5]
 8006ace:	5561      	strbeq	r1, [r4, r5]
 8006ad0:	6a06      	ldr	r6, [r0, #32]
 8006ad2:	7c01      	ldrb	r1, [r0, #16]
 8006ad4:	7c44      	ldrb	r4, [r0, #17]
 8006ad6:	f103 0511 	add.w	r5, r3, #17
 8006ada:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ade:	bf0c      	ite	eq
 8006ae0:	5571      	strbeq	r1, [r6, r5]
 8006ae2:	5574      	strbne	r4, [r6, r5]
 8006ae4:	6a06      	ldr	r6, [r0, #32]
 8006ae6:	f103 0512 	add.w	r5, r3, #18
 8006aea:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006aee:	bf0c      	ite	eq
 8006af0:	5571      	strbeq	r1, [r6, r5]
 8006af2:	5574      	strbne	r4, [r6, r5]
 8006af4:	6a06      	ldr	r6, [r0, #32]
 8006af6:	f103 0513 	add.w	r5, r3, #19
 8006afa:	f012 0f20 	tst.w	r2, #32
 8006afe:	bf0c      	ite	eq
 8006b00:	5571      	strbeq	r1, [r6, r5]
 8006b02:	5574      	strbne	r4, [r6, r5]
 8006b04:	6a06      	ldr	r6, [r0, #32]
 8006b06:	f103 0514 	add.w	r5, r3, #20
 8006b0a:	f012 0f10 	tst.w	r2, #16
 8006b0e:	bf0c      	ite	eq
 8006b10:	5571      	strbeq	r1, [r6, r5]
 8006b12:	5574      	strbne	r4, [r6, r5]
 8006b14:	6a06      	ldr	r6, [r0, #32]
 8006b16:	f103 0515 	add.w	r5, r3, #21
 8006b1a:	f012 0f08 	tst.w	r2, #8
 8006b1e:	bf0c      	ite	eq
 8006b20:	5571      	strbeq	r1, [r6, r5]
 8006b22:	5574      	strbne	r4, [r6, r5]
 8006b24:	6a06      	ldr	r6, [r0, #32]
 8006b26:	f103 0516 	add.w	r5, r3, #22
 8006b2a:	f012 0f04 	tst.w	r2, #4
 8006b2e:	bf0c      	ite	eq
 8006b30:	5571      	strbeq	r1, [r6, r5]
 8006b32:	5574      	strbne	r4, [r6, r5]
 8006b34:	6a06      	ldr	r6, [r0, #32]
 8006b36:	f012 0f02 	tst.w	r2, #2
 8006b3a:	f103 0517 	add.w	r5, r3, #23
 8006b3e:	bf0c      	ite	eq
 8006b40:	5571      	strbeq	r1, [r6, r5]
 8006b42:	5574      	strbne	r4, [r6, r5]
 8006b44:	f012 0f01 	tst.w	r2, #1
 8006b48:	f103 0318 	add.w	r3, r3, #24
 8006b4c:	6a02      	ldr	r2, [r0, #32]
 8006b4e:	f43f ae79 	beq.w	8006844 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 8006b52:	54d4      	strb	r4, [r2, r3]
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	7c01      	ldrb	r1, [r0, #16]
 8006b58:	7c44      	ldrb	r4, [r0, #17]
 8006b5a:	6a05      	ldr	r5, [r0, #32]
 8006b5c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006b60:	f103 0601 	add.w	r6, r3, #1
 8006b64:	bf14      	ite	ne
 8006b66:	55ac      	strbne	r4, [r5, r6]
 8006b68:	55a9      	strbeq	r1, [r5, r6]
 8006b6a:	6a05      	ldr	r5, [r0, #32]
 8006b6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006b70:	f103 0602 	add.w	r6, r3, #2
 8006b74:	bf14      	ite	ne
 8006b76:	55ac      	strbne	r4, [r5, r6]
 8006b78:	55a9      	strbeq	r1, [r5, r6]
 8006b7a:	6a05      	ldr	r5, [r0, #32]
 8006b7c:	f012 0f20 	tst.w	r2, #32
 8006b80:	f103 0603 	add.w	r6, r3, #3
 8006b84:	bf14      	ite	ne
 8006b86:	55ac      	strbne	r4, [r5, r6]
 8006b88:	55a9      	strbeq	r1, [r5, r6]
 8006b8a:	6a05      	ldr	r5, [r0, #32]
 8006b8c:	f012 0f10 	tst.w	r2, #16
 8006b90:	f103 0604 	add.w	r6, r3, #4
 8006b94:	bf14      	ite	ne
 8006b96:	55ac      	strbne	r4, [r5, r6]
 8006b98:	55a9      	strbeq	r1, [r5, r6]
 8006b9a:	6a05      	ldr	r5, [r0, #32]
 8006b9c:	f012 0f08 	tst.w	r2, #8
 8006ba0:	f103 0605 	add.w	r6, r3, #5
 8006ba4:	bf14      	ite	ne
 8006ba6:	55ac      	strbne	r4, [r5, r6]
 8006ba8:	55a9      	strbeq	r1, [r5, r6]
 8006baa:	6a05      	ldr	r5, [r0, #32]
 8006bac:	f012 0f04 	tst.w	r2, #4
 8006bb0:	f103 0606 	add.w	r6, r3, #6
 8006bb4:	bf14      	ite	ne
 8006bb6:	55ac      	strbne	r4, [r5, r6]
 8006bb8:	55a9      	strbeq	r1, [r5, r6]
 8006bba:	6a05      	ldr	r5, [r0, #32]
 8006bbc:	f012 0f02 	tst.w	r2, #2
 8006bc0:	f103 0607 	add.w	r6, r3, #7
 8006bc4:	bf14      	ite	ne
 8006bc6:	55ac      	strbne	r4, [r5, r6]
 8006bc8:	55a9      	strbeq	r1, [r5, r6]
 8006bca:	f012 0f01 	tst.w	r2, #1
 8006bce:	6a02      	ldr	r2, [r0, #32]
 8006bd0:	f103 0508 	add.w	r5, r3, #8
 8006bd4:	bf14      	ite	ne
 8006bd6:	5554      	strbne	r4, [r2, r5]
 8006bd8:	5551      	strbeq	r1, [r2, r5]
 8006bda:	7c41      	ldrb	r1, [r0, #17]
 8006bdc:	7c02      	ldrb	r2, [r0, #16]
 8006bde:	6a05      	ldr	r5, [r0, #32]
 8006be0:	f103 0409 	add.w	r4, r3, #9
 8006be4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006be8:	bf0c      	ite	eq
 8006bea:	552a      	strbeq	r2, [r5, r4]
 8006bec:	5529      	strbne	r1, [r5, r4]
 8006bee:	6a05      	ldr	r5, [r0, #32]
 8006bf0:	f103 040a 	add.w	r4, r3, #10
 8006bf4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006bf8:	bf0c      	ite	eq
 8006bfa:	552a      	strbeq	r2, [r5, r4]
 8006bfc:	5529      	strbne	r1, [r5, r4]
 8006bfe:	6a05      	ldr	r5, [r0, #32]
 8006c00:	f103 040b 	add.w	r4, r3, #11
 8006c04:	f01e 0f20 	tst.w	lr, #32
 8006c08:	bf0c      	ite	eq
 8006c0a:	552a      	strbeq	r2, [r5, r4]
 8006c0c:	5529      	strbne	r1, [r5, r4]
 8006c0e:	6a05      	ldr	r5, [r0, #32]
 8006c10:	f103 040c 	add.w	r4, r3, #12
 8006c14:	f01e 0f10 	tst.w	lr, #16
 8006c18:	bf0c      	ite	eq
 8006c1a:	552a      	strbeq	r2, [r5, r4]
 8006c1c:	5529      	strbne	r1, [r5, r4]
 8006c1e:	6a05      	ldr	r5, [r0, #32]
 8006c20:	f103 040d 	add.w	r4, r3, #13
 8006c24:	f01e 0f08 	tst.w	lr, #8
 8006c28:	bf0c      	ite	eq
 8006c2a:	552a      	strbeq	r2, [r5, r4]
 8006c2c:	5529      	strbne	r1, [r5, r4]
 8006c2e:	6a05      	ldr	r5, [r0, #32]
 8006c30:	f103 040e 	add.w	r4, r3, #14
 8006c34:	f01e 0f04 	tst.w	lr, #4
 8006c38:	bf0c      	ite	eq
 8006c3a:	552a      	strbeq	r2, [r5, r4]
 8006c3c:	5529      	strbne	r1, [r5, r4]
 8006c3e:	6a05      	ldr	r5, [r0, #32]
 8006c40:	f103 040f 	add.w	r4, r3, #15
 8006c44:	f01e 0f02 	tst.w	lr, #2
 8006c48:	bf0c      	ite	eq
 8006c4a:	552a      	strbeq	r2, [r5, r4]
 8006c4c:	5529      	strbne	r1, [r5, r4]
 8006c4e:	f01e 0f01 	tst.w	lr, #1
 8006c52:	bf14      	ite	ne
 8006c54:	6a02      	ldrne	r2, [r0, #32]
 8006c56:	6a01      	ldreq	r1, [r0, #32]
 8006c58:	f103 0410 	add.w	r4, r3, #16
 8006c5c:	bf14      	ite	ne
 8006c5e:	5511      	strbne	r1, [r2, r4]
 8006c60:	550a      	strbeq	r2, [r1, r4]
 8006c62:	e5af      	b.n	80067c4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 8006c64:	7c01      	ldrb	r1, [r0, #16]
 8006c66:	7c44      	ldrb	r4, [r0, #17]
 8006c68:	6a05      	ldr	r5, [r0, #32]
 8006c6a:	1c5e      	adds	r6, r3, #1
 8006c6c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006c70:	bf0c      	ite	eq
 8006c72:	55a9      	strbeq	r1, [r5, r6]
 8006c74:	55ac      	strbne	r4, [r5, r6]
 8006c76:	6a05      	ldr	r5, [r0, #32]
 8006c78:	1c9e      	adds	r6, r3, #2
 8006c7a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006c7e:	bf0c      	ite	eq
 8006c80:	55a9      	strbeq	r1, [r5, r6]
 8006c82:	55ac      	strbne	r4, [r5, r6]
 8006c84:	6a05      	ldr	r5, [r0, #32]
 8006c86:	1cde      	adds	r6, r3, #3
 8006c88:	f01c 0f20 	tst.w	ip, #32
 8006c8c:	bf0c      	ite	eq
 8006c8e:	55a9      	strbeq	r1, [r5, r6]
 8006c90:	55ac      	strbne	r4, [r5, r6]
 8006c92:	6a05      	ldr	r5, [r0, #32]
 8006c94:	1d1e      	adds	r6, r3, #4
 8006c96:	f01c 0f10 	tst.w	ip, #16
 8006c9a:	bf0c      	ite	eq
 8006c9c:	55a9      	strbeq	r1, [r5, r6]
 8006c9e:	55ac      	strbne	r4, [r5, r6]
 8006ca0:	6a05      	ldr	r5, [r0, #32]
 8006ca2:	1d5e      	adds	r6, r3, #5
 8006ca4:	f01c 0f08 	tst.w	ip, #8
 8006ca8:	bf0c      	ite	eq
 8006caa:	55a9      	strbeq	r1, [r5, r6]
 8006cac:	55ac      	strbne	r4, [r5, r6]
 8006cae:	6a05      	ldr	r5, [r0, #32]
 8006cb0:	1d9e      	adds	r6, r3, #6
 8006cb2:	f01c 0f04 	tst.w	ip, #4
 8006cb6:	bf0c      	ite	eq
 8006cb8:	55a9      	strbeq	r1, [r5, r6]
 8006cba:	55ac      	strbne	r4, [r5, r6]
 8006cbc:	6a05      	ldr	r5, [r0, #32]
 8006cbe:	1dde      	adds	r6, r3, #7
 8006cc0:	f01c 0f02 	tst.w	ip, #2
 8006cc4:	bf0c      	ite	eq
 8006cc6:	55a9      	strbeq	r1, [r5, r6]
 8006cc8:	55ac      	strbne	r4, [r5, r6]
 8006cca:	f01c 0f01 	tst.w	ip, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	6a01      	ldrne	r1, [r0, #32]
 8006cd2:	6a04      	ldreq	r4, [r0, #32]
 8006cd4:	f103 0508 	add.w	r5, r3, #8
 8006cd8:	bf14      	ite	ne
 8006cda:	554c      	strbne	r4, [r1, r5]
 8006cdc:	5561      	strbeq	r1, [r4, r5]
 8006cde:	7c01      	ldrb	r1, [r0, #16]
 8006ce0:	7c44      	ldrb	r4, [r0, #17]
 8006ce2:	6a06      	ldr	r6, [r0, #32]
 8006ce4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ce8:	f103 0509 	add.w	r5, r3, #9
 8006cec:	bf0c      	ite	eq
 8006cee:	5571      	strbeq	r1, [r6, r5]
 8006cf0:	5574      	strbne	r4, [r6, r5]
 8006cf2:	6a06      	ldr	r6, [r0, #32]
 8006cf4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006cf8:	f103 050a 	add.w	r5, r3, #10
 8006cfc:	bf0c      	ite	eq
 8006cfe:	5571      	strbeq	r1, [r6, r5]
 8006d00:	5574      	strbne	r4, [r6, r5]
 8006d02:	6a06      	ldr	r6, [r0, #32]
 8006d04:	f012 0f20 	tst.w	r2, #32
 8006d08:	f103 050b 	add.w	r5, r3, #11
 8006d0c:	bf0c      	ite	eq
 8006d0e:	5571      	strbeq	r1, [r6, r5]
 8006d10:	5574      	strbne	r4, [r6, r5]
 8006d12:	6a06      	ldr	r6, [r0, #32]
 8006d14:	f012 0f10 	tst.w	r2, #16
 8006d18:	f103 050c 	add.w	r5, r3, #12
 8006d1c:	bf0c      	ite	eq
 8006d1e:	5571      	strbeq	r1, [r6, r5]
 8006d20:	5574      	strbne	r4, [r6, r5]
 8006d22:	6a06      	ldr	r6, [r0, #32]
 8006d24:	f012 0f08 	tst.w	r2, #8
 8006d28:	f103 050d 	add.w	r5, r3, #13
 8006d2c:	bf0c      	ite	eq
 8006d2e:	5571      	strbeq	r1, [r6, r5]
 8006d30:	5574      	strbne	r4, [r6, r5]
 8006d32:	6a06      	ldr	r6, [r0, #32]
 8006d34:	f012 0f04 	tst.w	r2, #4
 8006d38:	f103 050e 	add.w	r5, r3, #14
 8006d3c:	bf0c      	ite	eq
 8006d3e:	5571      	strbeq	r1, [r6, r5]
 8006d40:	5574      	strbne	r4, [r6, r5]
 8006d42:	6a06      	ldr	r6, [r0, #32]
 8006d44:	f012 0f02 	tst.w	r2, #2
 8006d48:	f103 050f 	add.w	r5, r3, #15
 8006d4c:	bf0c      	ite	eq
 8006d4e:	5571      	strbeq	r1, [r6, r5]
 8006d50:	5574      	strbne	r4, [r6, r5]
 8006d52:	f012 0f01 	tst.w	r2, #1
 8006d56:	6a02      	ldr	r2, [r0, #32]
 8006d58:	f103 0510 	add.w	r5, r3, #16
 8006d5c:	bf14      	ite	ne
 8006d5e:	5554      	strbne	r4, [r2, r5]
 8006d60:	5551      	strbeq	r1, [r2, r5]
 8006d62:	e5f7      	b.n	8006954 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x354>
 8006d64:	7c01      	ldrb	r1, [r0, #16]
 8006d66:	7c44      	ldrb	r4, [r0, #17]
 8006d68:	6a05      	ldr	r5, [r0, #32]
 8006d6a:	1c5e      	adds	r6, r3, #1
 8006d6c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006d70:	bf0c      	ite	eq
 8006d72:	55a9      	strbeq	r1, [r5, r6]
 8006d74:	55ac      	strbne	r4, [r5, r6]
 8006d76:	6a05      	ldr	r5, [r0, #32]
 8006d78:	1c9e      	adds	r6, r3, #2
 8006d7a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006d7e:	bf0c      	ite	eq
 8006d80:	55a9      	strbeq	r1, [r5, r6]
 8006d82:	55ac      	strbne	r4, [r5, r6]
 8006d84:	6a05      	ldr	r5, [r0, #32]
 8006d86:	1cde      	adds	r6, r3, #3
 8006d88:	f01c 0f20 	tst.w	ip, #32
 8006d8c:	bf0c      	ite	eq
 8006d8e:	55a9      	strbeq	r1, [r5, r6]
 8006d90:	55ac      	strbne	r4, [r5, r6]
 8006d92:	6a05      	ldr	r5, [r0, #32]
 8006d94:	1d1e      	adds	r6, r3, #4
 8006d96:	f01c 0f10 	tst.w	ip, #16
 8006d9a:	bf0c      	ite	eq
 8006d9c:	55a9      	strbeq	r1, [r5, r6]
 8006d9e:	55ac      	strbne	r4, [r5, r6]
 8006da0:	6a05      	ldr	r5, [r0, #32]
 8006da2:	1d5e      	adds	r6, r3, #5
 8006da4:	f01c 0f08 	tst.w	ip, #8
 8006da8:	bf0c      	ite	eq
 8006daa:	55a9      	strbeq	r1, [r5, r6]
 8006dac:	55ac      	strbne	r4, [r5, r6]
 8006dae:	6a05      	ldr	r5, [r0, #32]
 8006db0:	1d9e      	adds	r6, r3, #6
 8006db2:	f01c 0f04 	tst.w	ip, #4
 8006db6:	bf0c      	ite	eq
 8006db8:	55a9      	strbeq	r1, [r5, r6]
 8006dba:	55ac      	strbne	r4, [r5, r6]
 8006dbc:	6a05      	ldr	r5, [r0, #32]
 8006dbe:	1dde      	adds	r6, r3, #7
 8006dc0:	f01c 0f02 	tst.w	ip, #2
 8006dc4:	bf0c      	ite	eq
 8006dc6:	55a9      	strbeq	r1, [r5, r6]
 8006dc8:	55ac      	strbne	r4, [r5, r6]
 8006dca:	f01c 0f01 	tst.w	ip, #1
 8006dce:	bf14      	ite	ne
 8006dd0:	6a01      	ldrne	r1, [r0, #32]
 8006dd2:	6a04      	ldreq	r4, [r0, #32]
 8006dd4:	f103 0508 	add.w	r5, r3, #8
 8006dd8:	bf14      	ite	ne
 8006dda:	554c      	strbne	r4, [r1, r5]
 8006ddc:	5561      	strbeq	r1, [r4, r5]
 8006dde:	7c01      	ldrb	r1, [r0, #16]
 8006de0:	7c44      	ldrb	r4, [r0, #17]
 8006de2:	6a06      	ldr	r6, [r0, #32]
 8006de4:	f103 0509 	add.w	r5, r3, #9
 8006de8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006dec:	bf0c      	ite	eq
 8006dee:	5571      	strbeq	r1, [r6, r5]
 8006df0:	5574      	strbne	r4, [r6, r5]
 8006df2:	6a06      	ldr	r6, [r0, #32]
 8006df4:	f103 050a 	add.w	r5, r3, #10
 8006df8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006dfc:	bf0c      	ite	eq
 8006dfe:	5571      	strbeq	r1, [r6, r5]
 8006e00:	5574      	strbne	r4, [r6, r5]
 8006e02:	6a06      	ldr	r6, [r0, #32]
 8006e04:	f103 050b 	add.w	r5, r3, #11
 8006e08:	f01e 0f20 	tst.w	lr, #32
 8006e0c:	bf0c      	ite	eq
 8006e0e:	5571      	strbeq	r1, [r6, r5]
 8006e10:	5574      	strbne	r4, [r6, r5]
 8006e12:	6a06      	ldr	r6, [r0, #32]
 8006e14:	f103 050c 	add.w	r5, r3, #12
 8006e18:	f01e 0f10 	tst.w	lr, #16
 8006e1c:	bf0c      	ite	eq
 8006e1e:	5571      	strbeq	r1, [r6, r5]
 8006e20:	5574      	strbne	r4, [r6, r5]
 8006e22:	6a06      	ldr	r6, [r0, #32]
 8006e24:	f103 050d 	add.w	r5, r3, #13
 8006e28:	f01e 0f08 	tst.w	lr, #8
 8006e2c:	bf0c      	ite	eq
 8006e2e:	5571      	strbeq	r1, [r6, r5]
 8006e30:	5574      	strbne	r4, [r6, r5]
 8006e32:	6a06      	ldr	r6, [r0, #32]
 8006e34:	f103 050e 	add.w	r5, r3, #14
 8006e38:	f01e 0f04 	tst.w	lr, #4
 8006e3c:	bf0c      	ite	eq
 8006e3e:	5571      	strbeq	r1, [r6, r5]
 8006e40:	5574      	strbne	r4, [r6, r5]
 8006e42:	6a06      	ldr	r6, [r0, #32]
 8006e44:	f103 050f 	add.w	r5, r3, #15
 8006e48:	f01e 0f02 	tst.w	lr, #2
 8006e4c:	bf0c      	ite	eq
 8006e4e:	5571      	strbeq	r1, [r6, r5]
 8006e50:	5574      	strbne	r4, [r6, r5]
 8006e52:	f103 0510 	add.w	r5, r3, #16
 8006e56:	f01e 0f01 	tst.w	lr, #1
 8006e5a:	e634      	b.n	8006ac6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4c6>
 8006e5c:	6a01      	ldr	r1, [r0, #32]
 8006e5e:	54ca      	strb	r2, [r1, r3]
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	bf00      	nop

08006e64 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8006e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e66:	6984      	ldr	r4, [r0, #24]
 8006e68:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8006e6c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8006e70:	f814 c006 	ldrb.w	ip, [r4, r6]
 8006e74:	56e6      	ldrsb	r6, [r4, r3]
 8006e76:	0149      	lsls	r1, r1, #5
 8006e78:	f814 e002 	ldrb.w	lr, [r4, r2]
 8006e7c:	5ce3      	ldrb	r3, [r4, r3]
 8006e7e:	5d62      	ldrb	r2, [r4, r5]
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	7c05      	ldrb	r5, [r0, #16]
 8006e84:	7c44      	ldrb	r4, [r0, #17]
 8006e86:	6a06      	ldr	r6, [r0, #32]
 8006e88:	f101 0701 	add.w	r7, r1, #1
 8006e8c:	bfac      	ite	ge
 8006e8e:	55f5      	strbge	r5, [r6, r7]
 8006e90:	55f4      	strblt	r4, [r6, r7]
 8006e92:	6a07      	ldr	r7, [r0, #32]
 8006e94:	1c8e      	adds	r6, r1, #2
 8006e96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e9a:	bf0c      	ite	eq
 8006e9c:	55bd      	strbeq	r5, [r7, r6]
 8006e9e:	55bc      	strbne	r4, [r7, r6]
 8006ea0:	6a07      	ldr	r7, [r0, #32]
 8006ea2:	1cce      	adds	r6, r1, #3
 8006ea4:	f013 0f20 	tst.w	r3, #32
 8006ea8:	bf0c      	ite	eq
 8006eaa:	55bd      	strbeq	r5, [r7, r6]
 8006eac:	55bc      	strbne	r4, [r7, r6]
 8006eae:	6a07      	ldr	r7, [r0, #32]
 8006eb0:	1d0e      	adds	r6, r1, #4
 8006eb2:	f013 0f10 	tst.w	r3, #16
 8006eb6:	bf0c      	ite	eq
 8006eb8:	55bd      	strbeq	r5, [r7, r6]
 8006eba:	55bc      	strbne	r4, [r7, r6]
 8006ebc:	6a07      	ldr	r7, [r0, #32]
 8006ebe:	1d4e      	adds	r6, r1, #5
 8006ec0:	f013 0f08 	tst.w	r3, #8
 8006ec4:	bf0c      	ite	eq
 8006ec6:	55bd      	strbeq	r5, [r7, r6]
 8006ec8:	55bc      	strbne	r4, [r7, r6]
 8006eca:	6a07      	ldr	r7, [r0, #32]
 8006ecc:	1d8e      	adds	r6, r1, #6
 8006ece:	f013 0f04 	tst.w	r3, #4
 8006ed2:	bf0c      	ite	eq
 8006ed4:	55bd      	strbeq	r5, [r7, r6]
 8006ed6:	55bc      	strbne	r4, [r7, r6]
 8006ed8:	6a07      	ldr	r7, [r0, #32]
 8006eda:	1dce      	adds	r6, r1, #7
 8006edc:	f013 0f02 	tst.w	r3, #2
 8006ee0:	bf0c      	ite	eq
 8006ee2:	55bd      	strbeq	r5, [r7, r6]
 8006ee4:	55bc      	strbne	r4, [r7, r6]
 8006ee6:	f013 0f01 	tst.w	r3, #1
 8006eea:	6a03      	ldr	r3, [r0, #32]
 8006eec:	f101 0608 	add.w	r6, r1, #8
 8006ef0:	bf14      	ite	ne
 8006ef2:	559c      	strbne	r4, [r3, r6]
 8006ef4:	559d      	strbeq	r5, [r3, r6]
 8006ef6:	7c03      	ldrb	r3, [r0, #16]
 8006ef8:	7c44      	ldrb	r4, [r0, #17]
 8006efa:	6a05      	ldr	r5, [r0, #32]
 8006efc:	f101 0609 	add.w	r6, r1, #9
 8006f00:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006f04:	bf0c      	ite	eq
 8006f06:	55ab      	strbeq	r3, [r5, r6]
 8006f08:	55ac      	strbne	r4, [r5, r6]
 8006f0a:	6a05      	ldr	r5, [r0, #32]
 8006f0c:	f101 060a 	add.w	r6, r1, #10
 8006f10:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006f14:	bf0c      	ite	eq
 8006f16:	55ab      	strbeq	r3, [r5, r6]
 8006f18:	55ac      	strbne	r4, [r5, r6]
 8006f1a:	6a05      	ldr	r5, [r0, #32]
 8006f1c:	f101 060b 	add.w	r6, r1, #11
 8006f20:	f01e 0f20 	tst.w	lr, #32
 8006f24:	bf0c      	ite	eq
 8006f26:	55ab      	strbeq	r3, [r5, r6]
 8006f28:	55ac      	strbne	r4, [r5, r6]
 8006f2a:	6a05      	ldr	r5, [r0, #32]
 8006f2c:	f101 060c 	add.w	r6, r1, #12
 8006f30:	f01e 0f10 	tst.w	lr, #16
 8006f34:	bf0c      	ite	eq
 8006f36:	55ab      	strbeq	r3, [r5, r6]
 8006f38:	55ac      	strbne	r4, [r5, r6]
 8006f3a:	6a05      	ldr	r5, [r0, #32]
 8006f3c:	f101 060d 	add.w	r6, r1, #13
 8006f40:	f01e 0f08 	tst.w	lr, #8
 8006f44:	bf0c      	ite	eq
 8006f46:	55ab      	strbeq	r3, [r5, r6]
 8006f48:	55ac      	strbne	r4, [r5, r6]
 8006f4a:	6a05      	ldr	r5, [r0, #32]
 8006f4c:	f101 060e 	add.w	r6, r1, #14
 8006f50:	f01e 0f04 	tst.w	lr, #4
 8006f54:	bf0c      	ite	eq
 8006f56:	55ab      	strbeq	r3, [r5, r6]
 8006f58:	55ac      	strbne	r4, [r5, r6]
 8006f5a:	6a05      	ldr	r5, [r0, #32]
 8006f5c:	f101 060f 	add.w	r6, r1, #15
 8006f60:	f01e 0f02 	tst.w	lr, #2
 8006f64:	bf0c      	ite	eq
 8006f66:	55ab      	strbeq	r3, [r5, r6]
 8006f68:	55ac      	strbne	r4, [r5, r6]
 8006f6a:	f01e 0f01 	tst.w	lr, #1
 8006f6e:	bf14      	ite	ne
 8006f70:	6a03      	ldrne	r3, [r0, #32]
 8006f72:	6a04      	ldreq	r4, [r0, #32]
 8006f74:	f101 0510 	add.w	r5, r1, #16
 8006f78:	bf14      	ite	ne
 8006f7a:	555c      	strbne	r4, [r3, r5]
 8006f7c:	5563      	strbeq	r3, [r4, r5]
 8006f7e:	7c03      	ldrb	r3, [r0, #16]
 8006f80:	7c44      	ldrb	r4, [r0, #17]
 8006f82:	6a06      	ldr	r6, [r0, #32]
 8006f84:	f101 0511 	add.w	r5, r1, #17
 8006f88:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006f8c:	bf0c      	ite	eq
 8006f8e:	5573      	strbeq	r3, [r6, r5]
 8006f90:	5574      	strbne	r4, [r6, r5]
 8006f92:	6a06      	ldr	r6, [r0, #32]
 8006f94:	f101 0512 	add.w	r5, r1, #18
 8006f98:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006f9c:	bf0c      	ite	eq
 8006f9e:	5573      	strbeq	r3, [r6, r5]
 8006fa0:	5574      	strbne	r4, [r6, r5]
 8006fa2:	6a06      	ldr	r6, [r0, #32]
 8006fa4:	f101 0513 	add.w	r5, r1, #19
 8006fa8:	f01c 0f20 	tst.w	ip, #32
 8006fac:	bf0c      	ite	eq
 8006fae:	5573      	strbeq	r3, [r6, r5]
 8006fb0:	5574      	strbne	r4, [r6, r5]
 8006fb2:	6a06      	ldr	r6, [r0, #32]
 8006fb4:	f101 0514 	add.w	r5, r1, #20
 8006fb8:	f01c 0f10 	tst.w	ip, #16
 8006fbc:	bf0c      	ite	eq
 8006fbe:	5573      	strbeq	r3, [r6, r5]
 8006fc0:	5574      	strbne	r4, [r6, r5]
 8006fc2:	6a06      	ldr	r6, [r0, #32]
 8006fc4:	f101 0515 	add.w	r5, r1, #21
 8006fc8:	f01c 0f08 	tst.w	ip, #8
 8006fcc:	bf0c      	ite	eq
 8006fce:	5573      	strbeq	r3, [r6, r5]
 8006fd0:	5574      	strbne	r4, [r6, r5]
 8006fd2:	6a06      	ldr	r6, [r0, #32]
 8006fd4:	f101 0516 	add.w	r5, r1, #22
 8006fd8:	f01c 0f04 	tst.w	ip, #4
 8006fdc:	bf0c      	ite	eq
 8006fde:	5573      	strbeq	r3, [r6, r5]
 8006fe0:	5574      	strbne	r4, [r6, r5]
 8006fe2:	6a06      	ldr	r6, [r0, #32]
 8006fe4:	f101 0517 	add.w	r5, r1, #23
 8006fe8:	f01c 0f02 	tst.w	ip, #2
 8006fec:	bf0c      	ite	eq
 8006fee:	5573      	strbeq	r3, [r6, r5]
 8006ff0:	5574      	strbne	r4, [r6, r5]
 8006ff2:	f01c 0f01 	tst.w	ip, #1
 8006ff6:	bf14      	ite	ne
 8006ff8:	6a03      	ldrne	r3, [r0, #32]
 8006ffa:	6a04      	ldreq	r4, [r0, #32]
 8006ffc:	f101 0518 	add.w	r5, r1, #24
 8007000:	bf14      	ite	ne
 8007002:	555c      	strbne	r4, [r3, r5]
 8007004:	5563      	strbeq	r3, [r4, r5]
 8007006:	7c03      	ldrb	r3, [r0, #16]
 8007008:	7c44      	ldrb	r4, [r0, #17]
 800700a:	6a06      	ldr	r6, [r0, #32]
 800700c:	0617      	lsls	r7, r2, #24
 800700e:	f101 0519 	add.w	r5, r1, #25
 8007012:	bf54      	ite	pl
 8007014:	5573      	strbpl	r3, [r6, r5]
 8007016:	5574      	strbmi	r4, [r6, r5]
 8007018:	6a06      	ldr	r6, [r0, #32]
 800701a:	0657      	lsls	r7, r2, #25
 800701c:	f101 051a 	add.w	r5, r1, #26
 8007020:	bf54      	ite	pl
 8007022:	5573      	strbpl	r3, [r6, r5]
 8007024:	5574      	strbmi	r4, [r6, r5]
 8007026:	6a06      	ldr	r6, [r0, #32]
 8007028:	0697      	lsls	r7, r2, #26
 800702a:	f101 051b 	add.w	r5, r1, #27
 800702e:	bf54      	ite	pl
 8007030:	5573      	strbpl	r3, [r6, r5]
 8007032:	5574      	strbmi	r4, [r6, r5]
 8007034:	6a06      	ldr	r6, [r0, #32]
 8007036:	06d7      	lsls	r7, r2, #27
 8007038:	f101 051c 	add.w	r5, r1, #28
 800703c:	bf54      	ite	pl
 800703e:	5573      	strbpl	r3, [r6, r5]
 8007040:	5574      	strbmi	r4, [r6, r5]
 8007042:	6a06      	ldr	r6, [r0, #32]
 8007044:	0717      	lsls	r7, r2, #28
 8007046:	f101 051d 	add.w	r5, r1, #29
 800704a:	bf54      	ite	pl
 800704c:	5573      	strbpl	r3, [r6, r5]
 800704e:	5574      	strbmi	r4, [r6, r5]
 8007050:	6a06      	ldr	r6, [r0, #32]
 8007052:	0757      	lsls	r7, r2, #29
 8007054:	f101 051e 	add.w	r5, r1, #30
 8007058:	bf54      	ite	pl
 800705a:	5573      	strbpl	r3, [r6, r5]
 800705c:	5574      	strbmi	r4, [r6, r5]
 800705e:	6a06      	ldr	r6, [r0, #32]
 8007060:	0797      	lsls	r7, r2, #30
 8007062:	f101 051f 	add.w	r5, r1, #31
 8007066:	bf54      	ite	pl
 8007068:	5573      	strbpl	r3, [r6, r5]
 800706a:	5574      	strbmi	r4, [r6, r5]
 800706c:	07d2      	lsls	r2, r2, #31
 800706e:	bf4c      	ite	mi
 8007070:	6a03      	ldrmi	r3, [r0, #32]
 8007072:	6a02      	ldrpl	r2, [r0, #32]
 8007074:	f101 0120 	add.w	r1, r1, #32
 8007078:	bf4c      	ite	mi
 800707a:	545c      	strbmi	r4, [r3, r1]
 800707c:	5453      	strbpl	r3, [r2, r1]
 800707e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007080 <WS28xx::~WS28xx()>:
 8007080:	2200      	movs	r2, #0
 8007082:	4b01      	ldr	r3, [pc, #4]	; (8007088 <WS28xx::~WS28xx()+0x8>)
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	4770      	bx	lr
 8007088:	20000630 	andcs	r0, r0, r0, lsr r6

0800708c <WS28xx::SetupBuffers()>:
 800708c:	b513      	push	{r0, r1, r4, lr}
 800708e:	4604      	mov	r4, r0
 8007090:	a801      	add	r0, sp, #4
 8007092:	f002 fe2f 	bl	8009cf4 <gd32_spi_dma_tx_prepare(unsigned int*)>
 8007096:	9b01      	ldr	r3, [sp, #4]
 8007098:	4a07      	ldr	r2, [pc, #28]	; (80070b8 <WS28xx::SetupBuffers()+0x2c>)
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	6220      	str	r0, [r4, #32]
 80070a2:	4418      	add	r0, r3
 80070a4:	69e3      	ldr	r3, [r4, #28]
 80070a6:	6260      	str	r0, [r4, #36]	; 0x24
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	3303      	adds	r3, #3
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	61e3      	str	r3, [r4, #28]
 80070b2:	b002      	add	sp, #8
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	2000062c 	andcs	r0, r0, ip, lsr #12

080070bc <WS28xx::WS28xx(PixelConfiguration&)>:
 80070bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070be:	23aa      	movs	r3, #170	; 0xaa
 80070c0:	2203      	movs	r2, #3
 80070c2:	e9c0 2300 	strd	r2, r3, [r0]
 80070c6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80070ca:	460f      	mov	r7, r1
 80070cc:	6102      	str	r2, [r0, #16]
 80070ce:	2300      	movs	r3, #0
 80070d0:	2106      	movs	r1, #6
 80070d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070d6:	4605      	mov	r5, r0
 80070d8:	463e      	mov	r6, r7
 80070da:	4604      	mov	r4, r0
 80070dc:	8282      	strh	r2, [r0, #20]
 80070de:	e9c0 1302 	strd	r1, r3, [r0, #8]
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 80070e4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 80070ea:	6182      	str	r2, [r0, #24]
 80070ec:	6018      	str	r0, [r3, #0]
 80070ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80070f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80070f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80070fa:	a901      	add	r1, sp, #4
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7fe fe9d 	bl	8005e3c <PixelConfiguration::Validate(unsigned int&)>
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	7d61      	ldrb	r1, [r4, #21]
 8007108:	4353      	muls	r3, r2
 800710a:	61e3      	str	r3, [r4, #28]
 800710c:	b111      	cbz	r1, 8007114 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	3301      	adds	r3, #1
 8007112:	61e3      	str	r3, [r4, #28]
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	4620      	mov	r0, r4
 8007118:	3b0b      	subs	r3, #11
 800711a:	2b02      	cmp	r3, #2
 800711c:	bf9f      	itttt	ls
 800711e:	69e3      	ldrls	r3, [r4, #28]
 8007120:	18d2      	addls	r2, r2, r3
 8007122:	3208      	addls	r2, #8
 8007124:	61e2      	strls	r2, [r4, #28]
 8007126:	f7ff ffb1 	bl	800708c <WS28xx::SetupBuffers()>
 800712a:	f002 fd59 	bl	8009be0 <gd32_spi_dma_begin()>
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f002 fdcc 	bl	8009ccc <gd32_spi_dma_set_speed_hz(unsigned int)>
 8007134:	4620      	mov	r0, r4
 8007136:	b003      	add	sp, #12
 8007138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713a:	bf00      	nop
 800713c:	0800bd6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, fp, ip, sp, pc}
 8007140:	20000630 	andcs	r0, r0, r0, lsr r6

08007144 <WS28xx::Update()>:
 8007144:	2200      	movs	r2, #0
 8007146:	b430      	push	{r4, r5}
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <WS28xx::Update()+0x34>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 8007150:	4299      	cmp	r1, r3
 8007152:	d807      	bhi.n	8007164 <WS28xx::Update()+0x20>
 8007154:	2300      	movs	r3, #0
 8007156:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007158:	084d      	lsrs	r5, r1, #1
 800715a:	42ab      	cmp	r3, r5
 800715c:	d105      	bne.n	800716a <WS28xx::Update()+0x26>
 800715e:	bc30      	pop	{r4, r5}
 8007160:	f002 bdd0 	b.w	8009d04 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8007164:	54e2      	strb	r2, [r4, r3]
 8007166:	3301      	adds	r3, #1
 8007168:	e7f0      	b.n	800714c <WS28xx::Update()+0x8>
 800716a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800716e:	ba52      	rev16	r2, r2
 8007170:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8007174:	3301      	adds	r3, #1
 8007176:	e7f0      	b.n	800715a <WS28xx::Update()+0x16>
 8007178:	2000062c 	andcs	r0, r0, ip, lsr #12

0800717c <WS28xx::Blackout()>:
 800717c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4604      	mov	r4, r0
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f002 fdd7 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 800718a:	2800      	cmp	r0, #0
 800718c:	d1f9      	bne.n	8007182 <WS28xx::Blackout()+0x6>
 800718e:	e9d4 2800 	ldrd	r2, r8, [r4]
 8007192:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8007196:	f1a2 070b 	sub.w	r7, r2, #11
 800719a:	2f02      	cmp	r7, #2
 800719c:	6223      	str	r3, [r4, #32]
 800719e:	7018      	strb	r0, [r3, #0]
 80071a0:	d829      	bhi.n	80071f6 <WS28xx::Blackout()+0x7a>
 80071a2:	4605      	mov	r5, r0
 80071a4:	4681      	mov	r9, r0
 80071a6:	7058      	strb	r0, [r3, #1]
 80071a8:	7098      	strb	r0, [r3, #2]
 80071aa:	70d8      	strb	r0, [r3, #3]
 80071ac:	4545      	cmp	r5, r8
 80071ae:	d118      	bne.n	80071e2 <WS28xx::Blackout()+0x66>
 80071b0:	2f02      	cmp	r7, #2
 80071b2:	bf14      	ite	ne
 80071b4:	21ff      	movne	r1, #255	; 0xff
 80071b6:	2100      	moveq	r1, #0
 80071b8:	69e2      	ldr	r2, [r4, #28]
 80071ba:	6a20      	ldr	r0, [r4, #32]
 80071bc:	3a04      	subs	r2, #4
 80071be:	1883      	adds	r3, r0, r2
 80071c0:	5481      	strb	r1, [r0, r2]
 80071c2:	7059      	strb	r1, [r3, #1]
 80071c4:	7099      	strb	r1, [r3, #2]
 80071c6:	70d9      	strb	r1, [r3, #3]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff ffbb 	bl	8007144 <WS28xx::Update()>
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f002 fdb1 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d1f9      	bne.n	80071ce <WS28xx::Blackout()+0x52>
 80071da:	6226      	str	r6, [r4, #32]
 80071dc:	b003      	add	sp, #12
 80071de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071e2:	2300      	movs	r3, #0
 80071e4:	4629      	mov	r1, r5
 80071e6:	461a      	mov	r2, r3
 80071e8:	4620      	mov	r0, r4
 80071ea:	f8cd 9000 	str.w	r9, [sp]
 80071ee:	f7ff fa07 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80071f2:	3501      	adds	r5, #1
 80071f4:	e7da      	b.n	80071ac <WS28xx::Blackout()+0x30>
 80071f6:	6a23      	ldr	r3, [r4, #32]
 80071f8:	b102      	cbz	r2, 80071fc <WS28xx::Blackout()+0x80>
 80071fa:	7c22      	ldrb	r2, [r4, #16]
 80071fc:	69e1      	ldr	r1, [r4, #28]
 80071fe:	4419      	add	r1, r3
 8007200:	4299      	cmp	r1, r3
 8007202:	d0e1      	beq.n	80071c8 <WS28xx::Blackout()+0x4c>
 8007204:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007208:	e7fa      	b.n	8007200 <WS28xx::Blackout()+0x84>

0800720a <WS28xx::FullOn()>:
 800720a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800720e:	4604      	mov	r4, r0
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f002 fd90 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8007218:	2800      	cmp	r0, #0
 800721a:	d1f9      	bne.n	8007210 <WS28xx::FullOn()+0x6>
 800721c:	e9d4 2800 	ldrd	r2, r8, [r4]
 8007220:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8007224:	f1a2 070b 	sub.w	r7, r2, #11
 8007228:	2f02      	cmp	r7, #2
 800722a:	6223      	str	r3, [r4, #32]
 800722c:	7018      	strb	r0, [r3, #0]
 800722e:	d82a      	bhi.n	8007286 <WS28xx::FullOn()+0x7c>
 8007230:	4605      	mov	r5, r0
 8007232:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8007236:	7058      	strb	r0, [r3, #1]
 8007238:	7098      	strb	r0, [r3, #2]
 800723a:	70d8      	strb	r0, [r3, #3]
 800723c:	4545      	cmp	r5, r8
 800723e:	d118      	bne.n	8007272 <WS28xx::FullOn()+0x68>
 8007240:	2f02      	cmp	r7, #2
 8007242:	bf14      	ite	ne
 8007244:	21ff      	movne	r1, #255	; 0xff
 8007246:	2100      	moveq	r1, #0
 8007248:	69e2      	ldr	r2, [r4, #28]
 800724a:	6a20      	ldr	r0, [r4, #32]
 800724c:	3a04      	subs	r2, #4
 800724e:	1883      	adds	r3, r0, r2
 8007250:	5481      	strb	r1, [r0, r2]
 8007252:	7059      	strb	r1, [r3, #1]
 8007254:	7099      	strb	r1, [r3, #2]
 8007256:	70d9      	strb	r1, [r3, #3]
 8007258:	4620      	mov	r0, r4
 800725a:	f7ff ff73 	bl	8007144 <WS28xx::Update()>
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f002 fd69 	bl	8009d38 <gd32_spi_dma_tx_is_active()>
 8007266:	2800      	cmp	r0, #0
 8007268:	d1f9      	bne.n	800725e <WS28xx::FullOn()+0x54>
 800726a:	6226      	str	r6, [r4, #32]
 800726c:	b003      	add	sp, #12
 800726e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007272:	23ff      	movs	r3, #255	; 0xff
 8007274:	4629      	mov	r1, r5
 8007276:	461a      	mov	r2, r3
 8007278:	4620      	mov	r0, r4
 800727a:	f8cd 9000 	str.w	r9, [sp]
 800727e:	f7ff f9bf 	bl	8006600 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8007282:	3501      	adds	r5, #1
 8007284:	e7da      	b.n	800723c <WS28xx::FullOn()+0x32>
 8007286:	6a23      	ldr	r3, [r4, #32]
 8007288:	b13a      	cbz	r2, 800729a <WS28xx::FullOn()+0x90>
 800728a:	7c61      	ldrb	r1, [r4, #17]
 800728c:	69e2      	ldr	r2, [r4, #28]
 800728e:	441a      	add	r2, r3
 8007290:	429a      	cmp	r2, r3
 8007292:	d0e1      	beq.n	8007258 <WS28xx::FullOn()+0x4e>
 8007294:	f803 1f01 	strb.w	r1, [r3, #1]!
 8007298:	e7fa      	b.n	8007290 <WS28xx::FullOn()+0x86>
 800729a:	21ff      	movs	r1, #255	; 0xff
 800729c:	e7f6      	b.n	800728c <WS28xx::FullOn()+0x82>
	...

080072a0 <Network::Network()>:
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <Network::Network()+0x18>)
 80072a2:	4906      	ldr	r1, [pc, #24]	; (80072bc <Network::Network()+0x1c>)
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	1e42      	subs	r2, r0, #1
 80072a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ac:	f802 3f01 	strb.w	r3, [r2, #1]!
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f9      	bne.n	80072a8 <Network::Network()+0x8>
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000634 	andcs	r0, r0, r4, lsr r6
 80072bc:	0800be6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, fp, ip, sp, pc}

080072c0 <Network::MacAddressCopyTo(unsigned char*)>:
 80072c0:	4608      	mov	r0, r1
 80072c2:	f002 be1b 	b.w	8009efc <mac_address_get(unsigned char*)>

080072c6 <Display::Write(unsigned int, char const*) [clone .isra.0]>:
 80072c6:	b430      	push	{r4, r5}
 80072c8:	b160      	cbz	r0, 80072e4 <Display::Write(unsigned int, char const*) [clone .isra.0]+0x1e>
 80072ca:	2300      	movs	r3, #0
 80072cc:	6845      	ldr	r5, [r0, #4]
 80072ce:	5cd4      	ldrb	r4, [r2, r3]
 80072d0:	b11c      	cbz	r4, 80072da <Display::Write(unsigned int, char const*) [clone .isra.0]+0x14>
 80072d2:	1c5c      	adds	r4, r3, #1
 80072d4:	429d      	cmp	r5, r3
 80072d6:	4623      	mov	r3, r4
 80072d8:	d8f9      	bhi.n	80072ce <Display::Write(unsigned int, char const*) [clone .isra.0]+0x8>
 80072da:	6804      	ldr	r4, [r0, #0]
 80072dc:	69e4      	ldr	r4, [r4, #28]
 80072de:	46a4      	mov	ip, r4
 80072e0:	bc30      	pop	{r4, r5}
 80072e2:	4760      	bx	ip
 80072e4:	bc30      	pop	{r4, r5}
 80072e6:	4770      	bx	lr

080072e8 <DisplayUdf::DisplayUdf()>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4604      	mov	r4, r0
 80072ec:	f000 fe34 	bl	8007f58 <Display::Display()>
 80072f0:	2300      	movs	r3, #0
 80072f2:	6523      	str	r3, [r4, #80]	; 0x50
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <DisplayUdf::DisplayUdf()+0x24>)
 80072f6:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 80072fa:	601c      	str	r4, [r3, #0]
 80072fc:	2301      	movs	r3, #1
 80072fe:	f802 3f01 	strb.w	r3, [r2, #1]!
 8007302:	3301      	adds	r3, #1
 8007304:	2b15      	cmp	r3, #21
 8007306:	d1fa      	bne.n	80072fe <DisplayUdf::DisplayUdf()+0x16>
 8007308:	4620      	mov	r0, r4
 800730a:	bd10      	pop	{r4, pc}
 800730c:	20000638 	andcs	r0, r0, r8, lsr r6

08007310 <DisplayUdf::SetTitle(char const*, ...)>:
 8007310:	b40e      	push	{r1, r2, r3}
 8007312:	b517      	push	{r0, r1, r2, r4, lr}
 8007314:	ab05      	add	r3, sp, #20
 8007316:	f853 2b04 	ldr.w	r2, [r3], #4
 800731a:	4604      	mov	r4, r0
 800731c:	211f      	movs	r1, #31
 800731e:	301c      	adds	r0, #28
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	f7fa ffe1 	bl	80022e8 <vsnprintf>
 8007326:	2300      	movs	r3, #0
 8007328:	4404      	add	r4, r0
 800732a:	7723      	strb	r3, [r4, #28]
 800732c:	b003      	add	sp, #12
 800732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007332:	b003      	add	sp, #12
 8007334:	4770      	bx	lr

08007336 <DisplayUdf::Set(unsigned int, displayudf::Labels)>:
 8007336:	1e4b      	subs	r3, r1, #1
 8007338:	2b05      	cmp	r3, #5
 800733a:	b530      	push	{r4, r5, lr}
 800733c:	d810      	bhi.n	8007360 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x2a>
 800733e:	2300      	movs	r3, #0
 8007340:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8007344:	b2c9      	uxtb	r1, r1
 8007346:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800734a:	428d      	cmp	r5, r1
 800734c:	d109      	bne.n	8007362 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x2c>
 800734e:	1884      	adds	r4, r0, r2
 8007350:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8007354:	4403      	add	r3, r0
 8007356:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 800735a:	4410      	add	r0, r2
 800735c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8007360:	bd30      	pop	{r4, r5, pc}
 8007362:	3301      	adds	r3, #1
 8007364:	2b14      	cmp	r3, #20
 8007366:	d1ee      	bne.n	8007346 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x10>
 8007368:	e7f7      	b.n	800735a <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x24>
	...

0800736c <DisplayUdf::Show()>:
 800736c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800736e:	4604      	mov	r4, r0
 8007370:	21ff      	movs	r1, #255	; 0xff
 8007372:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8007376:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 800737a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800737e:	2806      	cmp	r0, #6
 8007380:	bf88      	it	hi
 8007382:	7019      	strbhi	r1, [r3, #0]
 8007384:	4293      	cmp	r3, r2
 8007386:	d1f8      	bne.n	800737a <DisplayUdf::Show()+0xe>
 8007388:	2501      	movs	r5, #1
 800738a:	69a0      	ldr	r0, [r4, #24]
 800738c:	b118      	cbz	r0, 8007396 <DisplayUdf::Show()+0x2a>
 800738e:	6803      	ldr	r3, [r0, #0]
 8007390:	4629      	mov	r1, r5
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	4798      	blx	r3
 8007396:	3501      	adds	r5, #1
 8007398:	2d06      	cmp	r5, #6
 800739a:	d1f6      	bne.n	800738a <DisplayUdf::Show()+0x1e>
 800739c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80073a0:	69a0      	ldr	r0, [r4, #24]
 80073a2:	f104 021c 	add.w	r2, r4, #28
 80073a6:	f7ff ff8e 	bl	80072c6 <Display::Write(unsigned int, char const*) [clone .isra.0]>
 80073aa:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80073ae:	69a0      	ldr	r0, [r4, #24]
 80073b0:	4a12      	ldr	r2, [pc, #72]	; (80073fc <DisplayUdf::Show()+0x90>)
 80073b2:	f7ff ff88 	bl	80072c6 <Display::Write(unsigned int, char const*) [clone .isra.0]>
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <DisplayUdf::Show()+0x94>)
 80073b8:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4620      	mov	r0, r4
 80073c0:	2303      	movs	r3, #3
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <DisplayUdf::Show()+0x98>)
 80073c4:	f7f9 fec7 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <DisplayUdf::Show()+0x9c>)
 80073ca:	4620      	mov	r0, r4
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	f892 10ab 	ldrb.w	r1, [r2, #171]	; 0xab
 80073d2:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 80073d6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80073da:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 80073de:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80073e8:	b292      	uxth	r2, r2
 80073ea:	9200      	str	r2, [sp, #0]
 80073ec:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 80073f0:	4a06      	ldr	r2, [pc, #24]	; (800740c <DisplayUdf::Show()+0xa0>)
 80073f2:	f7f9 feb0 	bl	8001156 <Display::Printf(unsigned int, char const*, ...)>
 80073f6:	b003      	add	sp, #12
 80073f8:	bd30      	pop	{r4, r5, pc}
 80073fa:	bf00      	nop
 80073fc:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
 8007400:	20001714 	andcs	r1, r0, r4, lsl r7
 8007404:	0800be6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, pc}
 8007408:	20000190 	mulcs	r0, r0, r1
 800740c:	0800be7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, sp, pc}

08007410 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8007410:	b510      	push	{r4, lr}
 8007412:	2220      	movs	r2, #32
 8007414:	4604      	mov	r4, r0
 8007416:	f840 1b04 	str.w	r1, [r0], #4
 800741a:	2100      	movs	r1, #0
 800741c:	f001 fb0d 	bl	8008a3a <memset>
 8007420:	f647 7305 	movw	r3, #32517	; 0x7f05
 8007424:	4620      	mov	r0, r4
 8007426:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007428:	bd10      	pop	{r4, pc}

0800742a <DisplayUdfParams::Load()>:
 800742a:	b508      	push	{r3, lr}
 800742c:	2300      	movs	r3, #0
 800742e:	4601      	mov	r1, r0
 8007430:	6043      	str	r3, [r0, #4]
 8007432:	6800      	ldr	r0, [r0, #0]
 8007434:	b120      	cbz	r0, 8007440 <DisplayUdfParams::Load()+0x16>
 8007436:	6803      	ldr	r3, [r0, #0]
 8007438:	3104      	adds	r1, #4
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4798      	blx	r3
 800743e:	2001      	movs	r0, #1
 8007440:	bd08      	pop	{r3, pc}

08007442 <DisplayUdfParams::Set(DisplayUdf*)>:
 8007442:	6843      	ldr	r3, [r0, #4]
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	009a      	lsls	r2, r3, #2
 800744a:	4604      	mov	r4, r0
 800744c:	460e      	mov	r6, r1
 800744e:	d506      	bpl.n	800745e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007450:	6988      	ldr	r0, [r1, #24]
 8007452:	b120      	cbz	r0, 800745e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007454:	6803      	ldr	r3, [r0, #0]
 8007456:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4798      	blx	r3
 800745e:	6863      	ldr	r3, [r4, #4]
 8007460:	69b0      	ldr	r0, [r6, #24]
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	bf41      	itttt	mi
 8007466:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 800746a:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 800746e:	4353      	mulmi	r3, r2
 8007470:	6173      	strmi	r3, [r6, #20]
 8007472:	6861      	ldr	r1, [r4, #4]
 8007474:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8007478:	b110      	cbz	r0, 8007480 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4798      	blx	r3
 8007480:	2500      	movs	r5, #0
 8007482:	2701      	movs	r7, #1
 8007484:	f104 0808 	add.w	r8, r4, #8
 8007488:	6862      	ldr	r2, [r4, #4]
 800748a:	fa07 f305 	lsl.w	r3, r7, r5
 800748e:	4393      	bics	r3, r2
 8007490:	d105      	bne.n	800749e <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8007492:	462a      	mov	r2, r5
 8007494:	4630      	mov	r0, r6
 8007496:	f818 1005 	ldrb.w	r1, [r8, r5]
 800749a:	f7ff ff4c 	bl	8007336 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
 800749e:	3501      	adds	r5, #1
 80074a0:	2d14      	cmp	r5, #20
 80074a2:	d1f1      	bne.n	8007488 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80074a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074a8 <DisplayUdfParams::Dump()>:
 80074a8:	4770      	bx	lr
	...

080074ac <ConfigStore::GetStoreOffset(configstore::Store)>:
 80074ac:	2300      	movs	r3, #0
 80074ae:	2020      	movs	r0, #32
 80074b0:	b510      	push	{r4, lr}
 80074b2:	4a04      	ldr	r2, [pc, #16]	; (80074c4 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 80074b4:	428b      	cmp	r3, r1
 80074b6:	d100      	bne.n	80074ba <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	f852 4b04 	ldr.w	r4, [r2], #4
 80074be:	3301      	adds	r3, #1
 80074c0:	4420      	add	r0, r4
 80074c2:	e7f7      	b.n	80074b4 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 80074c4:	0800be8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp, pc}

080074c8 <ConfigStore::Init()>:
 80074c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074cc:	b085      	sub	sp, #20
 80074ce:	4607      	mov	r7, r0
 80074d0:	f000 f9ca 	bl	8007868 <StoreDevice::GetSectorSize() const>
 80074d4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80074d8:	4605      	mov	r5, r0
 80074da:	d004      	beq.n	80074e6 <ConfigStore::Init()+0x1e>
 80074dc:	2500      	movs	r5, #0
 80074de:	4628      	mov	r0, r5
 80074e0:	b005      	add	sp, #20
 80074e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e6:	4638      	mov	r0, r7
 80074e8:	f000 f9bc 	bl	8007864 <StoreDevice::GetSize() const>
 80074ec:	4b3a      	ldr	r3, [pc, #232]	; (80075d8 <ConfigStore::Init()+0x110>)
 80074ee:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80074f2:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80074f6:	6019      	str	r1, [r3, #0]
 80074f8:	2e00      	cmp	r6, #0
 80074fa:	d1ef      	bne.n	80074dc <ConfigStore::Init()+0x14>
 80074fc:	4c37      	ldr	r4, [pc, #220]	; (80075dc <ConfigStore::Init()+0x114>)
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	462a      	mov	r2, r5
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4638      	mov	r0, r7
 8007506:	4623      	mov	r3, r4
 8007508:	f000 f9b0 	bl	800786c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 800750c:	7823      	ldrb	r3, [r4, #0]
 800750e:	2b41      	cmp	r3, #65	; 0x41
 8007510:	bf1c      	itt	ne
 8007512:	2341      	movne	r3, #65	; 0x41
 8007514:	7023      	strbne	r3, [r4, #0]
 8007516:	7863      	ldrb	r3, [r4, #1]
 8007518:	bf14      	ite	ne
 800751a:	4635      	movne	r5, r6
 800751c:	2501      	moveq	r5, #1
 800751e:	2b76      	cmp	r3, #118	; 0x76
 8007520:	bf1c      	itt	ne
 8007522:	2376      	movne	r3, #118	; 0x76
 8007524:	7063      	strbne	r3, [r4, #1]
 8007526:	78a3      	ldrb	r3, [r4, #2]
 8007528:	bf18      	it	ne
 800752a:	2500      	movne	r5, #0
 800752c:	2b56      	cmp	r3, #86	; 0x56
 800752e:	bf1c      	itt	ne
 8007530:	2356      	movne	r3, #86	; 0x56
 8007532:	70a3      	strbne	r3, [r4, #2]
 8007534:	78e3      	ldrb	r3, [r4, #3]
 8007536:	bf18      	it	ne
 8007538:	2500      	movne	r5, #0
 800753a:	2b10      	cmp	r3, #16
 800753c:	d01f      	beq.n	800757e <ConfigStore::Init()+0xb6>
 800753e:	2310      	movs	r3, #16
 8007540:	70e3      	strb	r3, [r4, #3]
 8007542:	2201      	movs	r2, #1
 8007544:	2500      	movs	r5, #0
 8007546:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800754a:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <ConfigStore::Init()+0x118>)
 800754c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80075e4 <ConfigStore::Init()+0x11c>
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	4631      	mov	r1, r6
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff ffa9 	bl	80074ac <ConfigStore::GetStoreOffset(configstore::Store)>
 800755a:	1823      	adds	r3, r4, r0
 800755c:	5425      	strb	r5, [r4, r0]
 800755e:	705d      	strb	r5, [r3, #1]
 8007560:	709d      	strb	r5, [r3, #2]
 8007562:	70dd      	strb	r5, [r3, #3]
 8007564:	f858 3b04 	ldr.w	r3, [r8], #4
 8007568:	1d02      	adds	r2, r0, #4
 800756a:	4403      	add	r3, r0
 800756c:	429a      	cmp	r2, r3
 800756e:	d32f      	bcc.n	80075d0 <ConfigStore::Init()+0x108>
 8007570:	3601      	adds	r6, #1
 8007572:	2e1c      	cmp	r6, #28
 8007574:	d1ed      	bne.n	8007552 <ConfigStore::Init()+0x8a>
 8007576:	2501      	movs	r5, #1
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <ConfigStore::Init()+0x120>)
 800757a:	601d      	str	r5, [r3, #0]
 800757c:	e7af      	b.n	80074de <ConfigStore::Init()+0x16>
 800757e:	2d00      	cmp	r5, #0
 8007580:	d0df      	beq.n	8007542 <ConfigStore::Init()+0x7a>
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	46c8      	mov	r8, r9
 8007588:	4631      	mov	r1, r6
 800758a:	4638      	mov	r0, r7
 800758c:	f7ff ff8e 	bl	80074ac <ConfigStore::GetStoreOffset(configstore::Store)>
 8007590:	5c23      	ldrb	r3, [r4, r0]
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d112      	bne.n	80075bc <ConfigStore::Init()+0xf4>
 8007596:	1823      	adds	r3, r4, r0
 8007598:	785a      	ldrb	r2, [r3, #1]
 800759a:	2aff      	cmp	r2, #255	; 0xff
 800759c:	d10e      	bne.n	80075bc <ConfigStore::Init()+0xf4>
 800759e:	789a      	ldrb	r2, [r3, #2]
 80075a0:	2aff      	cmp	r2, #255	; 0xff
 80075a2:	d10b      	bne.n	80075bc <ConfigStore::Init()+0xf4>
 80075a4:	78da      	ldrb	r2, [r3, #3]
 80075a6:	2aff      	cmp	r2, #255	; 0xff
 80075a8:	d108      	bne.n	80075bc <ConfigStore::Init()+0xf4>
 80075aa:	46a9      	mov	r9, r5
 80075ac:	f804 8000 	strb.w	r8, [r4, r0]
 80075b0:	f883 8001 	strb.w	r8, [r3, #1]
 80075b4:	f883 8002 	strb.w	r8, [r3, #2]
 80075b8:	f883 8003 	strb.w	r8, [r3, #3]
 80075bc:	3601      	adds	r6, #1
 80075be:	2e1c      	cmp	r6, #28
 80075c0:	d1e2      	bne.n	8007588 <ConfigStore::Init()+0xc0>
 80075c2:	f1b9 0f00 	cmp.w	r9, #0
 80075c6:	d08a      	beq.n	80074de <ConfigStore::Init()+0x16>
 80075c8:	2201      	movs	r2, #1
 80075ca:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <ConfigStore::Init()+0x120>)
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e786      	b.n	80074de <ConfigStore::Init()+0x16>
 80075d0:	f804 9002 	strb.w	r9, [r4, r2]
 80075d4:	3201      	adds	r2, #1
 80075d6:	e7c9      	b.n	800756c <ConfigStore::Init()+0xa4>
 80075d8:	20001640 	andcs	r1, r0, r0, asr #12
 80075dc:	20000640 	andcs	r0, r0, r0, asr #12
 80075e0:	20001654 	andcs	r1, r0, r4, asr r6
 80075e4:	0800be8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp, pc}
 80075e8:	2000164c 	andcs	r1, r0, ip, asr #12

080075ec <ConfigStore::ConfigStore()>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	f000 f930 	bl	8007854 <StoreDevice::StoreDevice()>
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <ConfigStore::ConfigStore()+0x38>)
 80075f6:	4d0c      	ldr	r5, [pc, #48]	; (8007628 <ConfigStore::ConfigStore()+0x3c>)
 80075f8:	601c      	str	r4, [r3, #0]
 80075fa:	7863      	ldrb	r3, [r4, #1]
 80075fc:	b11b      	cbz	r3, 8007606 <ConfigStore::ConfigStore()+0x1a>
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff ff62 	bl	80074c8 <ConfigStore::Init()>
 8007604:	7028      	strb	r0, [r5, #0]
 8007606:	782b      	ldrb	r3, [r5, #0]
 8007608:	b153      	cbz	r3, 8007620 <ConfigStore::ConfigStore()+0x34>
 800760a:	2320      	movs	r3, #32
 800760c:	2200      	movs	r2, #0
 800760e:	4907      	ldr	r1, [pc, #28]	; (800762c <ConfigStore::ConfigStore()+0x40>)
 8007610:	f851 0b04 	ldr.w	r0, [r1], #4
 8007614:	3201      	adds	r2, #1
 8007616:	2a1c      	cmp	r2, #28
 8007618:	4403      	add	r3, r0
 800761a:	d1f9      	bne.n	8007610 <ConfigStore::ConfigStore()+0x24>
 800761c:	4a04      	ldr	r2, [pc, #16]	; (8007630 <ConfigStore::ConfigStore()+0x44>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	4620      	mov	r0, r4
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	20001650 	andcs	r1, r0, r0, asr r6
 8007628:	20001644 	andcs	r1, r0, r4, asr #12
 800762c:	0800be8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp, ip, sp, pc}
 8007630:	20001648 	andcs	r1, r0, r8, asr #12

08007634 <ConfigStore::ResetSetList(configstore::Store)>:
 8007634:	b508      	push	{r3, lr}
 8007636:	f7ff ff39 	bl	80074ac <ConfigStore::GetStoreOffset(configstore::Store)>
 800763a:	2300      	movs	r3, #0
 800763c:	4904      	ldr	r1, [pc, #16]	; (8007650 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 800763e:	1842      	adds	r2, r0, r1
 8007640:	540b      	strb	r3, [r1, r0]
 8007642:	7053      	strb	r3, [r2, #1]
 8007644:	7093      	strb	r3, [r2, #2]
 8007646:	70d3      	strb	r3, [r2, #3]
 8007648:	2201      	movs	r2, #1
 800764a:	4b02      	ldr	r3, [pc, #8]	; (8007654 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	bd08      	pop	{r3, pc}
 8007650:	20000640 	andcs	r0, r0, r0, asr #12
 8007654:	2000164c 	andcs	r1, r0, ip, asr #12

08007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8007658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765c:	461c      	mov	r4, r3
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8007660:	4616      	mov	r6, r2
 8007662:	781f      	ldrb	r7, [r3, #0]
 8007664:	9d07      	ldr	r5, [sp, #28]
 8007666:	b307      	cbz	r7, 80076aa <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007668:	f7ff ff20 	bl	80074ac <ConfigStore::GetStoreOffset(configstore::Store)>
 800766c:	f04f 0c00 	mov.w	ip, #0
 8007670:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8007672:	1831      	adds	r1, r6, r0
 8007674:	1e63      	subs	r3, r4, #1
 8007676:	9c06      	ldr	r4, [sp, #24]
 8007678:	4411      	add	r1, r2
 800767a:	440c      	add	r4, r1
 800767c:	42a1      	cmp	r1, r4
 800767e:	d116      	bne.n	80076ae <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8007680:	f1bc 0f00 	cmp.w	ip, #0
 8007684:	d011      	beq.n	80076aa <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007686:	4b11      	ldr	r3, [pc, #68]	; (80076cc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8007688:	6819      	ldr	r1, [r3, #0]
 800768a:	b109      	cbz	r1, 8007690 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800768c:	2906      	cmp	r1, #6
 800768e:	d101      	bne.n	8007694 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8007690:	2101      	movs	r1, #1
 8007692:	6019      	str	r1, [r3, #0]
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800769a:	6019      	str	r1, [r3, #0]
 800769c:	b12e      	cbz	r6, 80076aa <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800769e:	b125      	cbz	r5, 80076aa <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	4418      	add	r0, r3
 80076a4:	5813      	ldr	r3, [r2, r0]
 80076a6:	432b      	orrs	r3, r5
 80076a8:	5013      	str	r3, [r2, r0]
 80076aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ae:	f891 8000 	ldrb.w	r8, [r1]
 80076b2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80076b6:	3101      	adds	r1, #1
 80076b8:	45f0      	cmp	r8, lr
 80076ba:	bf1c      	itt	ne
 80076bc:	f801 ec01 	strbne.w	lr, [r1, #-1]
 80076c0:	46bc      	movne	ip, r7
 80076c2:	e7db      	b.n	800767c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 80076c4:	20001644 	andcs	r1, r0, r4, asr #12
 80076c8:	20000640 	andcs	r0, r0, r0, asr #12
 80076cc:	2000164c 	andcs	r1, r0, ip, asr #12
 80076d0:	200017ac 	andcs	r1, r0, ip, lsr #15
 80076d4:	2000063c 	andcs	r0, r0, ip, lsr r6

080076d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 80076d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076dc:	461d      	mov	r5, r3
 80076de:	4b15      	ldr	r3, [pc, #84]	; (8007734 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 80076e0:	b085      	sub	sp, #20
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4607      	mov	r7, r0
 80076e6:	4614      	mov	r4, r2
 80076e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80076ec:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80076f0:	b193      	cbz	r3, 8007718 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80076f2:	f7ff fedb 	bl	80074ac <ConfigStore::GetStoreOffset(configstore::Store)>
 80076f6:	4a10      	ldr	r2, [pc, #64]	; (8007738 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 80076f8:	eb08 0600 	add.w	r6, r8, r0
 80076fc:	18b3      	adds	r3, r6, r2
 80076fe:	f1b9 0f00 	cmp.w	r9, #0
 8007702:	d013      	beq.n	800772c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8007704:	5990      	ldr	r0, [r2, r6]
 8007706:	b988      	cbnz	r0, 800772c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8007708:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800770c:	4623      	mov	r3, r4
 800770e:	4642      	mov	r2, r8
 8007710:	4638      	mov	r0, r7
 8007712:	9500      	str	r5, [sp, #0]
 8007714:	f7ff ffa0 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007718:	b005      	add	sp, #20
 800771a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800771e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007722:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007726:	429d      	cmp	r5, r3
 8007728:	d1f9      	bne.n	800771e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 800772a:	e7f5      	b.n	8007718 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800772c:	3c01      	subs	r4, #1
 800772e:	441d      	add	r5, r3
 8007730:	e7f9      	b.n	8007726 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8007732:	bf00      	nop
 8007734:	20001644 	andcs	r1, r0, r4, asr #12
 8007738:	20000640 	andcs	r0, r0, r0, asr #12

0800773c <ConfigStore::Flash()>:
 800773c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800773e:	4c24      	ldr	r4, [pc, #144]	; (80077d0 <ConfigStore::Flash()+0x94>)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d041      	beq.n	80077ca <ConfigStore::Flash()+0x8e>
 8007746:	3b01      	subs	r3, #1
 8007748:	2b05      	cmp	r3, #5
 800774a:	d82f      	bhi.n	80077ac <ConfigStore::Flash()+0x70>
 800774c:	e8df f003 	tbb	[pc, r3]
 8007750:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8007754:	4b1f2e23 	blmi	87d2fe8 <__exidx_end+0x7c6be8>
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b1f      	ldr	r3, [pc, #124]	; (80077d8 <ConfigStore::Flash()+0x9c>)
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	2302      	movs	r3, #2
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	2001      	movs	r0, #1
 8007764:	e02f      	b.n	80077c6 <ConfigStore::Flash()+0x8a>
 8007766:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <ConfigStore::Flash()+0x98>)
 8007768:	4a1b      	ldr	r2, [pc, #108]	; (80077d8 <ConfigStore::Flash()+0x9c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6812      	ldr	r2, [r2, #0]
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	2b63      	cmp	r3, #99	; 0x63
 8007772:	d9f6      	bls.n	8007762 <ConfigStore::Flash()+0x26>
 8007774:	2303      	movs	r3, #3
 8007776:	e7f3      	b.n	8007760 <ConfigStore::Flash()+0x24>
 8007778:	4918      	ldr	r1, [pc, #96]	; (80077dc <ConfigStore::Flash()+0xa0>)
 800777a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800777e:	6809      	ldr	r1, [r1, #0]
 8007780:	ab03      	add	r3, sp, #12
 8007782:	f000 f87d 	bl	8007880 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 8007786:	2800      	cmp	r0, #0
 8007788:	d0eb      	beq.n	8007762 <ConfigStore::Flash()+0x26>
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <ConfigStore::Flash()+0x98>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <ConfigStore::Flash()+0x9c>)
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	2305      	movs	r3, #5
 8007794:	e7e4      	b.n	8007760 <ConfigStore::Flash()+0x24>
 8007796:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <ConfigStore::Flash()+0x98>)
 8007798:	4a0f      	ldr	r2, [pc, #60]	; (80077d8 <ConfigStore::Flash()+0x9c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	2b63      	cmp	r3, #99	; 0x63
 80077a2:	d9de      	bls.n	8007762 <ConfigStore::Flash()+0x26>
 80077a4:	2304      	movs	r3, #4
 80077a6:	e7db      	b.n	8007760 <ConfigStore::Flash()+0x24>
 80077a8:	2306      	movs	r3, #6
 80077aa:	e7d9      	b.n	8007760 <ConfigStore::Flash()+0x24>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <ConfigStore::Flash()+0xa4>)
 80077b0:	490a      	ldr	r1, [pc, #40]	; (80077dc <ConfigStore::Flash()+0xa0>)
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <ConfigStore::Flash()+0xa8>)
 80077b8:	6809      	ldr	r1, [r1, #0]
 80077ba:	f000 f86a 	bl	8007892 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d0cf      	beq.n	8007762 <ConfigStore::Flash()+0x26>
 80077c2:	2000      	movs	r0, #0
 80077c4:	6020      	str	r0, [r4, #0]
 80077c6:	b004      	add	sp, #16
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	4618      	mov	r0, r3
 80077cc:	e7fb      	b.n	80077c6 <ConfigStore::Flash()+0x8a>
 80077ce:	bf00      	nop
 80077d0:	2000164c 	andcs	r1, r0, ip, asr #12
 80077d4:	200017ac 	andcs	r1, r0, ip, lsr #15
 80077d8:	2000063c 	andcs	r0, r0, ip, lsr r6
 80077dc:	20001640 	andcs	r1, r0, r0, asr #12
 80077e0:	20001648 	andcs	r1, r0, r8, asr #12
 80077e4:	20000640 	andcs	r0, r0, r0, asr #12

080077e8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80077e8:	4770      	bx	lr
	...

080077ec <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80077ec:	b507      	push	{r0, r1, r2, lr}
 80077ee:	2300      	movs	r3, #0
 80077f0:	460a      	mov	r2, r1
 80077f2:	2101      	movs	r1, #1
 80077f4:	e9cd 3100 	strd	r3, r1, [sp]
 80077f8:	4804      	ldr	r0, [pc, #16]	; (800780c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 80077fa:	2322      	movs	r3, #34	; 0x22
 80077fc:	210f      	movs	r1, #15
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	f7ff ff6a 	bl	80076d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8007804:	b003      	add	sp, #12
 8007806:	f85d fb04 	ldr.w	pc, [sp], #4
 800780a:	bf00      	nop
 800780c:	20001650 	andcs	r1, r0, r0, asr r6

08007810 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8007810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007812:	2200      	movs	r2, #0
 8007814:	460b      	mov	r3, r1
 8007816:	2122      	movs	r1, #34	; 0x22
 8007818:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800781c:	4804      	ldr	r0, [pc, #16]	; (8007830 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800781e:	9100      	str	r1, [sp, #0]
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	210f      	movs	r1, #15
 8007824:	f7ff ff18 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007828:	b005      	add	sp, #20
 800782a:	f85d fb04 	ldr.w	pc, [sp], #4
 800782e:	bf00      	nop
 8007830:	20001650 	andcs	r1, r0, r0, asr r6

08007834 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	f001 f851 	bl	80088de <operator delete(void*)>
 800783c:	4620      	mov	r0, r4
 800783e:	bd10      	pop	{r4, pc}

08007840 <StoreDisplayUdf::StoreDisplayUdf()>:
 8007840:	4a02      	ldr	r2, [pc, #8]	; (800784c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8007842:	6002      	str	r2, [r0, #0]
 8007844:	4a02      	ldr	r2, [pc, #8]	; (8007850 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8007846:	6010      	str	r0, [r2, #0]
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	0800bf04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, sp, pc}
 8007850:	20001658 	andcs	r1, r0, r8, asr r6

08007854 <StoreDevice::StoreDevice()>:
 8007854:	b510      	push	{r4, lr}
 8007856:	4604      	mov	r4, r0
 8007858:	f000 f998 	bl	8007b8c <FlashCode::FlashCode()>
 800785c:	7823      	ldrb	r3, [r4, #0]
 800785e:	4620      	mov	r0, r4
 8007860:	7063      	strb	r3, [r4, #1]
 8007862:	bd10      	pop	{r4, pc}

08007864 <StoreDevice::GetSize() const>:
 8007864:	f000 b9ac 	b.w	8007bc0 <FlashCode::GetSize() const>

08007868 <StoreDevice::GetSectorSize() const>:
 8007868:	f000 b9b2 	b.w	8007bd0 <FlashCode::GetSectorSize() const>

0800786c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 800786c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800786e:	ac03      	add	r4, sp, #12
 8007870:	9400      	str	r4, [sp, #0]
 8007872:	f000 f9b0 	bl	8007bd6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 8007876:	9b06      	ldr	r3, [sp, #24]
 8007878:	9a03      	ldr	r2, [sp, #12]
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	b004      	add	sp, #16
 800787e:	bd10      	pop	{r4, pc}

08007880 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	461c      	mov	r4, r3
 8007884:	ab01      	add	r3, sp, #4
 8007886:	f000 f9b5 	bl	8007bf4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	b002      	add	sp, #8
 8007890:	bd10      	pop	{r4, pc}

08007892 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8007892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007894:	ac03      	add	r4, sp, #12
 8007896:	9400      	str	r4, [sp, #0]
 8007898:	f000 fa4c 	bl	8007d34 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 800789c:	9b06      	ldr	r3, [sp, #24]
 800789e:	9a03      	ldr	r2, [sp, #12]
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	b004      	add	sp, #16
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <StorePixelDmx::~StorePixelDmx()>:
 80078a6:	4770      	bx	lr

080078a8 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 80078a8:	3804      	subs	r0, #4
 80078aa:	4770      	bx	lr

080078ac <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 80078ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ae:	2200      	movs	r2, #0
 80078b0:	460b      	mov	r3, r1
 80078b2:	2118      	movs	r1, #24
 80078b4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80078b8:	4804      	ldr	r0, [pc, #16]	; (80078cc <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 80078ba:	9100      	str	r1, [sp, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	2103      	movs	r1, #3
 80078c0:	f7ff feca 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80078c4:	b005      	add	sp, #20
 80078c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ca:	bf00      	nop
 80078cc:	20001650 	andcs	r1, r0, r0, asr r6

080078d0 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80078d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078d2:	2304      	movs	r3, #4
 80078d4:	2200      	movs	r2, #0
 80078d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80078da:	2302      	movs	r3, #2
 80078dc:	4806      	ldr	r0, [pc, #24]	; (80078f8 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80078e4:	2207      	movs	r2, #7
 80078e6:	2103      	movs	r1, #3
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f10d 0316 	add.w	r3, sp, #22
 80078ee:	f7ff feb3 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80078f2:	b007      	add	sp, #28
 80078f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80078f8:	20001650 	andcs	r1, r0, r0, asr r6

080078fc <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80078fc:	f1a0 0004 	sub.w	r0, r0, #4
 8007900:	e7e6      	b.n	80078d0 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8007902:	bf00      	nop

08007904 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8007904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007906:	2308      	movs	r3, #8
 8007908:	2200      	movs	r2, #0
 800790a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800790e:	2301      	movs	r3, #1
 8007910:	4806      	ldr	r0, [pc, #24]	; (800792c <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	f88d 1017 	strb.w	r1, [sp, #23]
 8007918:	2210      	movs	r2, #16
 800791a:	2103      	movs	r1, #3
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f10d 0317 	add.w	r3, sp, #23
 8007922:	f7ff fe99 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007926:	b007      	add	sp, #28
 8007928:	f85d fb04 	ldr.w	pc, [sp], #4
 800792c:	20001650 	andcs	r1, r0, r0, asr r6

08007930 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8007930:	f1a0 0004 	sub.w	r0, r0, #4
 8007934:	e7e6      	b.n	8007904 <StorePixelDmx::SaveTestPattern(unsigned char)>
 8007936:	bf00      	nop

08007938 <StorePixelDmx::SaveMap(unsigned char)>:
 8007938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800793a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793e:	2200      	movs	r2, #0
 8007940:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007944:	2301      	movs	r3, #1
 8007946:	4807      	ldr	r0, [pc, #28]	; (8007964 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	f88d 1017 	strb.w	r1, [sp, #23]
 800794e:	2213      	movs	r2, #19
 8007950:	2103      	movs	r1, #3
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	f10d 0317 	add.w	r3, sp, #23
 8007958:	f7ff fe7e 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800795c:	b007      	add	sp, #28
 800795e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007962:	bf00      	nop
 8007964:	20001650 	andcs	r1, r0, r0, asr r6

08007968 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8007968:	f1a0 0004 	sub.w	r0, r0, #4
 800796c:	e7e4      	b.n	8007938 <StorePixelDmx::SaveMap(unsigned char)>
 800796e:	bf00      	nop

08007970 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007976:	2200      	movs	r2, #0
 8007978:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800797c:	2302      	movs	r3, #2
 800797e:	4807      	ldr	r0, [pc, #28]	; (800799c <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007986:	2211      	movs	r2, #17
 8007988:	2103      	movs	r1, #3
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	f10d 0316 	add.w	r3, sp, #22
 8007990:	f7ff fe62 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007994:	b007      	add	sp, #28
 8007996:	f85d fb04 	ldr.w	pc, [sp], #4
 800799a:	bf00      	nop
 800799c:	20001650 	andcs	r1, r0, r0, asr r6

080079a0 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 80079a0:	f1a0 0004 	sub.w	r0, r0, #4
 80079a4:	e7e4      	b.n	8007970 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 80079a6:	bf00      	nop

080079a8 <StorePixelDmx::SaveCount(unsigned short)>:
 80079a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80079aa:	2302      	movs	r3, #2
 80079ac:	2200      	movs	r2, #0
 80079ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80079b2:	4807      	ldr	r0, [pc, #28]	; (80079d0 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80079ba:	2205      	movs	r2, #5
 80079bc:	2103      	movs	r1, #3
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	f10d 0316 	add.w	r3, sp, #22
 80079c4:	f7ff fe48 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80079c8:	b007      	add	sp, #28
 80079ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ce:	bf00      	nop
 80079d0:	20001650 	andcs	r1, r0, r0, asr r6

080079d4 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 80079d4:	f1a0 0004 	sub.w	r0, r0, #4
 80079d8:	e7e6      	b.n	80079a8 <StorePixelDmx::SaveCount(unsigned short)>
 80079da:	bf00      	nop

080079dc <StorePixelDmx::SaveType(unsigned char)>:
 80079dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80079de:	2301      	movs	r3, #1
 80079e0:	2200      	movs	r2, #0
 80079e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80079e6:	4807      	ldr	r0, [pc, #28]	; (8007a04 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	f88d 1017 	strb.w	r1, [sp, #23]
 80079ee:	2204      	movs	r2, #4
 80079f0:	2103      	movs	r1, #3
 80079f2:	6800      	ldr	r0, [r0, #0]
 80079f4:	f10d 0317 	add.w	r3, sp, #23
 80079f8:	f7ff fe2e 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80079fc:	b007      	add	sp, #28
 80079fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a02:	bf00      	nop
 8007a04:	20001650 	andcs	r1, r0, r0, asr r6

08007a08 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 8007a08:	f1a0 0004 	sub.w	r0, r0, #4
 8007a0c:	e7e6      	b.n	80079dc <StorePixelDmx::SaveType(unsigned char)>
 8007a0e:	bf00      	nop

08007a10 <StorePixelDmx::~StorePixelDmx()>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4604      	mov	r4, r0
 8007a14:	f000 ff63 	bl	80088de <operator delete(void*)>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8007a1c:	f1a0 0004 	sub.w	r0, r0, #4
 8007a20:	e7f6      	b.n	8007a10 <StorePixelDmx::~StorePixelDmx()>
	...

08007a24 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8007a24:	b507      	push	{r0, r1, r2, lr}
 8007a26:	2300      	movs	r3, #0
 8007a28:	460a      	mov	r2, r1
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	e9cd 3100 	strd	r3, r1, [sp]
 8007a30:	4804      	ldr	r0, [pc, #16]	; (8007a44 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8007a32:	2318      	movs	r3, #24
 8007a34:	2103      	movs	r1, #3
 8007a36:	6800      	ldr	r0, [r0, #0]
 8007a38:	f7ff fe4e 	bl	80076d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8007a3c:	b003      	add	sp, #12
 8007a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a42:	bf00      	nop
 8007a44:	20001650 	andcs	r1, r0, r0, asr r6

08007a48 <StorePixelDmx::StorePixelDmx()>:
 8007a48:	4a03      	ldr	r2, [pc, #12]	; (8007a58 <StorePixelDmx::StorePixelDmx()+0x10>)
 8007a4a:	6002      	str	r2, [r0, #0]
 8007a4c:	3230      	adds	r2, #48	; 0x30
 8007a4e:	6042      	str	r2, [r0, #4]
 8007a50:	4a02      	ldr	r2, [pc, #8]	; (8007a5c <StorePixelDmx::StorePixelDmx()+0x14>)
 8007a52:	6010      	str	r0, [r2, #0]
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	0800bf1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp, ip, sp, pc}
 8007a5c:	2000165c 	andcs	r1, r0, ip, asr r6

08007a60 <StoreRDMDevice::~StoreRDMDevice()>:
 8007a60:	4770      	bx	lr

08007a62 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007a62:	3804      	subs	r0, #4
 8007a64:	4770      	bx	lr
	...

08007a68 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)>:
 8007a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	2129      	movs	r1, #41	; 0x29
 8007a70:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007a74:	4804      	ldr	r0, [pc, #16]	; (8007a88 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)+0x20>)
 8007a76:	9100      	str	r1, [sp, #0]
 8007a78:	6800      	ldr	r0, [r0, #0]
 8007a7a:	210b      	movs	r1, #11
 8007a7c:	f7ff fdec 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007a80:	b005      	add	sp, #20
 8007a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a86:	bf00      	nop
 8007a88:	20001650 	andcs	r1, r0, r0, asr r6

08007a8c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	2401      	movs	r4, #1
 8007a90:	2600      	movs	r6, #0
 8007a92:	4d0c      	ldr	r5, [pc, #48]	; (8007ac4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8007a94:	b086      	sub	sp, #24
 8007a96:	460b      	mov	r3, r1
 8007a98:	6828      	ldr	r0, [r5, #0]
 8007a9a:	f88d 2017 	strb.w	r2, [sp, #23]
 8007a9e:	9200      	str	r2, [sp, #0]
 8007aa0:	210b      	movs	r1, #11
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007aa8:	f7ff fdd6 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007aac:	2224      	movs	r2, #36	; 0x24
 8007aae:	210b      	movs	r1, #11
 8007ab0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007ab4:	6828      	ldr	r0, [r5, #0]
 8007ab6:	9400      	str	r4, [sp, #0]
 8007ab8:	f10d 0317 	add.w	r3, sp, #23
 8007abc:	f7ff fdcc 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007ac0:	b006      	add	sp, #24
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	20001650 	andcs	r1, r0, r0, asr r6

08007ac8 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8007ac8:	f1a0 0004 	sub.w	r0, r0, #4
 8007acc:	e7de      	b.n	8007a8c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8007ace:	bf00      	nop

08007ad0 <StoreRDMDevice::~StoreRDMDevice()>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	f000 ff03 	bl	80088de <operator delete(void*)>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	bd10      	pop	{r4, pc}

08007adc <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007adc:	f1a0 0004 	sub.w	r0, r0, #4
 8007ae0:	e7f6      	b.n	8007ad0 <StoreRDMDevice::~StoreRDMDevice()>
	...

08007ae4 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)>:
 8007ae4:	b507      	push	{r0, r1, r2, lr}
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	460a      	mov	r2, r1
 8007aea:	2101      	movs	r1, #1
 8007aec:	e9cd 3100 	strd	r3, r1, [sp]
 8007af0:	4804      	ldr	r0, [pc, #16]	; (8007b04 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)+0x20>)
 8007af2:	2329      	movs	r3, #41	; 0x29
 8007af4:	210b      	movs	r1, #11
 8007af6:	6800      	ldr	r0, [r0, #0]
 8007af8:	f7ff fdee 	bl	80076d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8007afc:	b003      	add	sp, #12
 8007afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b02:	bf00      	nop
 8007b04:	20001650 	andcs	r1, r0, r0, asr r6

08007b08 <StoreRDMDevice::StoreRDMDevice()>:
 8007b08:	4a03      	ldr	r2, [pc, #12]	; (8007b18 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8007b0a:	6002      	str	r2, [r0, #0]
 8007b0c:	321c      	adds	r2, #28
 8007b0e:	6042      	str	r2, [r0, #4]
 8007b10:	4a02      	ldr	r2, [pc, #8]	; (8007b1c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8007b12:	6010      	str	r0, [r2, #0]
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	0800bf74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 8007b1c:	20001660 	andcs	r1, r0, r0, ror #12

08007b20 <StoreRDMSensors::~StoreRDMSensors()>:
 8007b20:	4770      	bx	lr
	...

08007b24 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)>:
 8007b24:	b507      	push	{r0, r1, r2, lr}
 8007b26:	2300      	movs	r3, #0
 8007b28:	460a      	mov	r2, r1
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	e9cd 3100 	strd	r3, r1, [sp]
 8007b30:	4804      	ldr	r0, [pc, #16]	; (8007b44 <StoreRDMSensors::Copy(rdm::sensorsparams::Params*)+0x20>)
 8007b32:	2334      	movs	r3, #52	; 0x34
 8007b34:	2117      	movs	r1, #23
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	f7ff fdce 	bl	80076d8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8007b3c:	b003      	add	sp, #12
 8007b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b42:	bf00      	nop
 8007b44:	20001650 	andcs	r1, r0, r0, asr r6

08007b48 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)>:
 8007b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	2134      	movs	r1, #52	; 0x34
 8007b50:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007b54:	4804      	ldr	r0, [pc, #16]	; (8007b68 <StoreRDMSensors::Update(rdm::sensorsparams::Params const*)+0x20>)
 8007b56:	9100      	str	r1, [sp, #0]
 8007b58:	6800      	ldr	r0, [r0, #0]
 8007b5a:	2117      	movs	r1, #23
 8007b5c:	f7ff fd7c 	bl	8007658 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007b60:	b005      	add	sp, #20
 8007b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b66:	bf00      	nop
 8007b68:	20001650 	andcs	r1, r0, r0, asr r6

08007b6c <StoreRDMSensors::~StoreRDMSensors()>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	f000 feb5 	bl	80088de <operator delete(void*)>
 8007b74:	4620      	mov	r0, r4
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <StoreRDMSensors::StoreRDMSensors()>:
 8007b78:	4a02      	ldr	r2, [pc, #8]	; (8007b84 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 8007b7a:	6002      	str	r2, [r0, #0]
 8007b7c:	4a02      	ldr	r2, [pc, #8]	; (8007b88 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 8007b7e:	6010      	str	r0, [r2, #0]
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	0800bfa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, sp, pc}
 8007b88:	20001664 	andcs	r1, r0, r4, ror #12

08007b8c <FlashCode::FlashCode()>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <FlashCode::FlashCode()+0x28>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	6018      	str	r0, [r3, #0]
 8007b94:	2301      	movs	r3, #1
 8007b96:	7003      	strb	r3, [r0, #0]
 8007b98:	f000 f812 	bl	8007bc0 <FlashCode::GetSize() const>
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f000 f80e 	bl	8007bc0 <FlashCode::GetSize() const>
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	0a83      	lsrs	r3, r0, #10
 8007ba8:	4903      	ldr	r1, [pc, #12]	; (8007bb8 <FlashCode::FlashCode()+0x2c>)
 8007baa:	4804      	ldr	r0, [pc, #16]	; (8007bbc <FlashCode::FlashCode()+0x30>)
 8007bac:	f7fa fb74 	bl	8002298 <printf>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	20001668 	andcs	r1, r0, r8, ror #12
 8007bb8:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
 8007bbc:	0800bfb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, pc}

08007bc0 <FlashCode::GetSize() const>:
 8007bc0:	4b02      	ldr	r3, [pc, #8]	; (8007bcc <FlashCode::GetSize() const+0xc>)
 8007bc2:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8007bc6:	0280      	lsls	r0, r0, #10
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	1ffff700 	svcne	0x00fff700

08007bd0 <FlashCode::GetSectorSize() const>:
 8007bd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007bd4:	4770      	bx	lr

08007bd6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 8007bd6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007bda:	441a      	add	r2, r3
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d104      	bne.n	8007bea <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 8007be0:	2200      	movs	r2, #0
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	2001      	movs	r0, #1
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	4770      	bx	lr
 8007bea:	f851 0b04 	ldr.w	r0, [r1], #4
 8007bee:	f843 0b04 	str.w	r0, [r3], #4
 8007bf2:	e7f3      	b.n	8007bdc <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

08007bf4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	b538      	push	{r3, r4, r5, lr}
 8007bf8:	4c47      	ldr	r4, [pc, #284]	; (8007d18 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 8007bfa:	6018      	str	r0, [r3, #0]
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	f200 8082 	bhi.w	8007d08 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8007c04:	e8df f003 	tbb	[pc, r3]
 8007c08:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8007c0c:	4b430080 	blmi	90c7e14 <__exidx_end+0x10bba14>
 8007c10:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	4b42      	ldr	r3, [pc, #264]	; (8007d20 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 8007c1c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	4b40      	ldr	r3, [pc, #256]	; (8007d28 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007c26:	d807      	bhi.n	8007c38 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 8007c28:	2201      	movs	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	f001 f9a6 	bl	8008f7c <fmc_bank0_unlock>
 8007c30:	2301      	movs	r3, #1
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	2000      	movs	r0, #0
 8007c36:	e026      	b.n	8007c86 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8007c38:	4a3c      	ldr	r2, [pc, #240]	; (8007d2c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	d3f4      	bcc.n	8007c28 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	f001 f9a9 	bl	8008f98 <fmc_bank1_unlock>
 8007c46:	e7f3      	b.n	8007c30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8007c48:	4d37      	ldr	r5, [pc, #220]	; (8007d28 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007c4a:	782b      	ldrb	r3, [r5, #0]
 8007c4c:	b15b      	cbz	r3, 8007c66 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 8007c4e:	f001 f9c1 	bl	8008fd4 <fmc_bank0_state_get>
 8007c52:	2801      	cmp	r0, #1
 8007c54:	d0ee      	beq.n	8007c34 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 8007c56:	7829      	ldrb	r1, [r5, #0]
 8007c58:	4b35      	ldr	r3, [pc, #212]	; (8007d30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007c5a:	b939      	cbnz	r1, 8007c6c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 8007c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c5e:	f022 0202 	bic.w	r2, r2, #2
 8007c62:	651a      	str	r2, [r3, #80]	; 0x50
 8007c64:	e006      	b.n	8007c74 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 8007c66:	f001 f9c7 	bl	8008ff8 <fmc_bank1_state_get>
 8007c6a:	e7f2      	b.n	8007c52 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	f022 0202 	bic.w	r2, r2, #2
 8007c72:	611a      	str	r2, [r3, #16]
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	b94b      	cbnz	r3, 8007c8e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 8007c7a:	b129      	cbz	r1, 8007c88 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 8007c7c:	f001 f99a 	bl	8008fb4 <fmc_bank0_lock>
 8007c80:	2300      	movs	r3, #0
 8007c82:	2001      	movs	r0, #1
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	f001 f99c 	bl	8008fc4 <fmc_bank1_lock>
 8007c8c:	e7f8      	b.n	8007c80 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e7cf      	b.n	8007c32 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 8007c92:	4923      	ldr	r1, [pc, #140]	; (8007d20 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007c94:	680b      	ldr	r3, [r1, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0ca      	beq.n	8007c30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8007c9a:	4b23      	ldr	r3, [pc, #140]	; (8007d28 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007c9c:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 8007c9e:	7818      	ldrb	r0, [r3, #0]
 8007ca0:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007ca2:	b190      	cbz	r0, 8007cca <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 8007ca4:	6918      	ldr	r0, [r3, #16]
 8007ca6:	f040 0002 	orr.w	r0, r0, #2
 8007caa:	6118      	str	r0, [r3, #16]
 8007cac:	6810      	ldr	r0, [r2, #0]
 8007cae:	6158      	str	r0, [r3, #20]
 8007cb0:	6918      	ldr	r0, [r3, #16]
 8007cb2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007cb6:	6118      	str	r0, [r3, #16]
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007cbe:	600b      	str	r3, [r1, #0]
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	e7b2      	b.n	8007c30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8007cca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007ccc:	f040 0002 	orr.w	r0, r0, #2
 8007cd0:	6518      	str	r0, [r3, #80]	; 0x50
 8007cd2:	6810      	ldr	r0, [r2, #0]
 8007cd4:	6558      	str	r0, [r3, #84]	; 0x54
 8007cd6:	69dd      	ldr	r5, [r3, #28]
 8007cd8:	07ad      	lsls	r5, r5, #30
 8007cda:	bf48      	it	mi
 8007cdc:	6158      	strmi	r0, [r3, #20]
 8007cde:	4814      	ldr	r0, [pc, #80]	; (8007d30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007ce0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce6:	6503      	str	r3, [r0, #80]	; 0x50
 8007ce8:	680b      	ldr	r3, [r1, #0]
 8007cea:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007cee:	600b      	str	r3, [r1, #0]
 8007cf0:	6813      	ldr	r3, [r2, #0]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	e7e6      	b.n	8007cc6 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007cfe:	b132      	cbz	r2, 8007d0e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 8007d00:	691a      	ldr	r2, [r3, #16]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	611a      	str	r2, [r3, #16]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	6020      	str	r0, [r4, #0]
 8007d0c:	e7bb      	b.n	8007c86 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8007d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d10:	f022 0201 	bic.w	r2, r2, #1
 8007d14:	651a      	str	r2, [r3, #80]	; 0x50
 8007d16:	e7f7      	b.n	8007d08 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8007d18:	20001670 	andcs	r1, r0, r0, ror r6
 8007d1c:	20001674 	andcs	r1, r0, r4, ror r6
 8007d20:	20001680 	andcs	r1, r0, r0, lsl #13
 8007d24:	1ffff700 	svcne	0x00fff700
 8007d28:	2000167c 	andcs	r1, r0, ip, ror r6
 8007d2c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007d30:	40022000 	andmi	r2, r2, r0

08007d34 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	2400      	movs	r4, #0
 8007d38:	9804      	ldr	r0, [sp, #16]
 8007d3a:	6004      	str	r4, [r0, #0]
 8007d3c:	4c48      	ldr	r4, [pc, #288]	; (8007e60 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	2804      	cmp	r0, #4
 8007d42:	d848      	bhi.n	8007dd6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 8007d44:	e8df f000 	tbb	[pc, r0]
 8007d48:	22847c03 	addcs	r7, r4, #768	; 0x300
 8007d4c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8007d50:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007d54:	6001      	str	r1, [r0, #0]
 8007d56:	4844      	ldr	r0, [pc, #272]	; (8007e68 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	4b44      	ldr	r3, [pc, #272]	; (8007e6c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	4b44      	ldr	r3, [pc, #272]	; (8007e70 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 8007d60:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d68:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007d6a:	d807      	bhi.n	8007d7c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	f001 f904 	bl	8008f7c <fmc_bank0_unlock>
 8007d74:	2303      	movs	r3, #3
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e026      	b.n	8007dca <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007d7c:	4a3e      	ldr	r2, [pc, #248]	; (8007e78 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	d3f4      	bcc.n	8007d6c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	f001 f907 	bl	8008f98 <fmc_bank1_unlock>
 8007d8a:	e7f3      	b.n	8007d74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007d8c:	4d39      	ldr	r5, [pc, #228]	; (8007e74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007d8e:	782b      	ldrb	r3, [r5, #0]
 8007d90:	b15b      	cbz	r3, 8007daa <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 8007d92:	f001 f91f 	bl	8008fd4 <fmc_bank0_state_get>
 8007d96:	2801      	cmp	r0, #1
 8007d98:	d0ee      	beq.n	8007d78 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 8007d9a:	7829      	ldrb	r1, [r5, #0]
 8007d9c:	4b37      	ldr	r3, [pc, #220]	; (8007e7c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007d9e:	b939      	cbnz	r1, 8007db0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 8007da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	651a      	str	r2, [r3, #80]	; 0x50
 8007da8:	e006      	b.n	8007db8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 8007daa:	f001 f925 	bl	8008ff8 <fmc_bank1_state_get>
 8007dae:	e7f2      	b.n	8007d96 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	611a      	str	r2, [r3, #16]
 8007db8:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	b94b      	cbnz	r3, 8007dd2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 8007dbe:	b129      	cbz	r1, 8007dcc <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 8007dc0:	f001 f8f8 	bl	8008fb4 <fmc_bank0_lock>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
 8007dcc:	f001 f8fa 	bl	8008fc4 <fmc_bank1_lock>
 8007dd0:	e7f8      	b.n	8007dc4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 8007dd2:	2304      	movs	r3, #4
 8007dd4:	e7cf      	b.n	8007d76 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 8007dd6:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007dd8:	6813      	ldr	r3, [r2, #0]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d91a      	bls.n	8007e14 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 8007dde:	4b25      	ldr	r3, [pc, #148]	; (8007e74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007de0:	7819      	ldrb	r1, [r3, #0]
 8007de2:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007de4:	b189      	cbz	r1, 8007e0a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 8007de6:	6919      	ldr	r1, [r3, #16]
 8007de8:	f041 0101 	orr.w	r1, r1, #1
 8007dec:	6119      	str	r1, [r3, #16]
 8007dee:	4d1e      	ldr	r5, [pc, #120]	; (8007e68 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007df0:	481c      	ldr	r0, [pc, #112]	; (8007e64 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8007df2:	6829      	ldr	r1, [r5, #0]
 8007df4:	6803      	ldr	r3, [r0, #0]
 8007df6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dfa:	f843 6b04 	str.w	r6, [r3], #4
 8007dfe:	6003      	str	r3, [r0, #0]
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	6029      	str	r1, [r5, #0]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e7b4      	b.n	8007d74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007e0a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007e0c:	f041 0101 	orr.w	r1, r1, #1
 8007e10:	6519      	str	r1, [r3, #80]	; 0x50
 8007e12:	e7ec      	b.n	8007dee <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0ad      	beq.n	8007d74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007e18:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007e1e:	b152      	cbz	r2, 8007e36 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	611a      	str	r2, [r3, #16]
 8007e28:	4a0f      	ldr	r2, [pc, #60]	; (8007e68 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e79e      	b.n	8007d74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e3e:	e7f3      	b.n	8007e28 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007e46:	b132      	cbz	r2, 8007e56 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	f022 0202 	bic.w	r2, r2, #2
 8007e4e:	611a      	str	r2, [r3, #16]
 8007e50:	2000      	movs	r0, #0
 8007e52:	6020      	str	r0, [r4, #0]
 8007e54:	e7b9      	b.n	8007dca <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e58:	f022 0202 	bic.w	r2, r2, #2
 8007e5c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e5e:	e7f7      	b.n	8007e50 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 8007e60:	20001670 	andcs	r1, r0, r0, ror r6
 8007e64:	2000166c 	andcs	r1, r0, ip, ror #12
 8007e68:	20001678 	andcs	r1, r0, r8, ror r6
 8007e6c:	20001680 	andcs	r1, r0, r0, lsl #13
 8007e70:	1ffff700 	svcne	0x00fff700
 8007e74:	2000167c 	andcs	r1, r0, ip, ror r6
 8007e78:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007e7c:	40022000 	andmi	r2, r2, r0

08007e80 <Display::PrintInfo() [clone .isra.0]>:
 8007e80:	b910      	cbnz	r0, 8007e88 <Display::PrintInfo() [clone .isra.0]+0x8>
 8007e82:	4803      	ldr	r0, [pc, #12]	; (8007e90 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8007e84:	f7fa ba40 	b.w	8002308 <puts>
 8007e88:	6803      	ldr	r3, [r0, #0]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8c:	4718      	bx	r3
 8007e8e:	bf00      	nop
 8007e90:	0800bfe2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}

08007e94 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8007e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e96:	460d      	mov	r5, r1
 8007e98:	4604      	mov	r4, r0
 8007e9a:	f001 fd91 	bl	80099c0 <gd32_i2c_set_address>
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f001 fd86 	bl	80099b0 <gd32_i2c_set_baudrate>
 8007ea4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d902      	bls.n	8007eb2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8007eac:	3c50      	subs	r4, #80	; 0x50
 8007eae:	2c0f      	cmp	r4, #15
 8007eb0:	d809      	bhi.n	8007ec6 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	f10d 0007 	add.w	r0, sp, #7
 8007eb8:	f001 fdee 	bl	8009a98 <gd32_i2c_read>
 8007ebc:	fab0 f080 	clz	r0, r0
 8007ec0:	0940      	lsrs	r0, r0, #5
 8007ec2:	b003      	add	sp, #12
 8007ec4:	bd30      	pop	{r4, r5, pc}
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	f001 fd7f 	bl	80099cc <gd32_i2c_write>
 8007ece:	e7f5      	b.n	8007ebc <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08007ed0 <Display::Detect7Segment()>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	68c1      	ldr	r1, [r0, #12]
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	7a00      	ldrb	r0, [r0, #8]
 8007ed8:	f7ff ffdc 	bl	8007e94 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8007edc:	7460      	strb	r0, [r4, #17]
 8007ede:	b170      	cbz	r0, 8007efe <Display::Detect7Segment()+0x2e>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f104 0508 	add.w	r5, r4, #8
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f7fb f90f 	bl	800310c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007eee:	7c63      	ldrb	r3, [r4, #17]
 8007ef0:	b12b      	cbz	r3, 8007efe <Display::Detect7Segment()+0x2e>
 8007ef2:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8007ef6:	2112      	movs	r1, #18
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7fb f907 	bl	800310c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007efe:	bd38      	pop	{r3, r4, r5, pc}

08007f00 <Display::Detect(display::Type)>:
 8007f00:	2902      	cmp	r1, #2
 8007f02:	b538      	push	{r3, r4, r5, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	d014      	beq.n	8007f32 <Display::Detect(display::Type)+0x32>
 8007f08:	2904      	cmp	r1, #4
 8007f0a:	d01b      	beq.n	8007f44 <Display::Detect(display::Type)+0x44>
 8007f0c:	69a0      	ldr	r0, [r4, #24]
 8007f0e:	b168      	cbz	r0, 8007f2c <Display::Detect(display::Type)+0x2c>
 8007f10:	6803      	ldr	r3, [r0, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4798      	blx	r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	69a0      	ldr	r0, [r4, #24]
 8007f1a:	b9ab      	cbnz	r3, 8007f48 <Display::Detect(display::Type)+0x48>
 8007f1c:	b110      	cbz	r0, 8007f24 <Display::Detect(display::Type)+0x24>
 8007f1e:	6803      	ldr	r3, [r0, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4798      	blx	r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	61a3      	str	r3, [r4, #24]
 8007f28:	2304      	movs	r3, #4
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	6163      	str	r3, [r4, #20]
 8007f30:	e010      	b.n	8007f54 <Display::Detect(display::Type)+0x54>
 8007f32:	2020      	movs	r0, #32
 8007f34:	f000 fcd7 	bl	80088e6 <operator new(unsigned int)>
 8007f38:	4605      	mov	r5, r0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	f000 f89e 	bl	800807c <Ssd1306::Ssd1306(TOledPanel)>
 8007f40:	61a5      	str	r5, [r4, #24]
 8007f42:	e7e3      	b.n	8007f0c <Display::Detect(display::Type)+0xc>
 8007f44:	6001      	str	r1, [r0, #0]
 8007f46:	e7e1      	b.n	8007f0c <Display::Detect(display::Type)+0xc>
 8007f48:	6803      	ldr	r3, [r0, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4798      	blx	r3
 8007f4e:	69a3      	ldr	r3, [r4, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0eb      	beq.n	8007f2c <Display::Detect(display::Type)+0x2c>
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
	...

08007f58 <Display::Display()>:
 8007f58:	2304      	movs	r3, #4
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	6003      	str	r3, [r0, #0]
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <Display::Display()+0x44>)
 8007f60:	4604      	mov	r4, r0
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0e      	ldr	r2, [pc, #56]	; (8007fa0 <Display::Display()+0x48>)
 8007f66:	6043      	str	r3, [r0, #4]
 8007f68:	2321      	movs	r3, #33	; 0x21
 8007f6a:	7203      	strb	r3, [r0, #8]
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <Display::Display()+0x4c>)
 8007f6e:	2102      	movs	r1, #2
 8007f70:	60c3      	str	r3, [r0, #12]
 8007f72:	2300      	movs	r3, #0
 8007f74:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007f78:	8203      	strh	r3, [r0, #16]
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <Display::Display()+0x50>)
 8007f7c:	6018      	str	r0, [r3, #0]
 8007f7e:	f7ff ffbf 	bl	8007f00 <Display::Detect(display::Type)>
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff ffa4 	bl	8007ed0 <Display::Detect7Segment()>
 8007f88:	69a3      	ldr	r3, [r4, #24]
 8007f8a:	b10b      	cbz	r3, 8007f90 <Display::Display()+0x38>
 8007f8c:	f7f9 f934 	bl	80011f8 <display::timeout::gpio_init()>
 8007f90:	69a0      	ldr	r0, [r4, #24]
 8007f92:	f7ff ff75 	bl	8007e80 <Display::PrintInfo() [clone .isra.0]>
 8007f96:	4620      	mov	r0, r4
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8007fa0:	000493e0 	andeq	r9, r4, r0, ror #7
 8007fa4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007fa8:	20001684 	andcs	r1, r0, r4, lsl #13

08007fac <Ssd1306::~Ssd1306()>:
 8007fac:	4770      	bx	lr

08007fae <Ssd1306::SetCursor(unsigned int)>:
 8007fae:	4770      	bx	lr

08007fb0 <Ssd1306::PrintInfo()>:
 8007fb0:	b410      	push	{r4}
 8007fb2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8007fb6:	7e44      	ldrb	r4, [r0, #25]
 8007fb8:	4904      	ldr	r1, [pc, #16]	; (8007fcc <Ssd1306::PrintInfo()+0x1c>)
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <Ssd1306::PrintInfo()+0x20>)
 8007fbc:	2c00      	cmp	r4, #0
 8007fbe:	bf08      	it	eq
 8007fc0:	4601      	moveq	r1, r0
 8007fc2:	4804      	ldr	r0, [pc, #16]	; (8007fd4 <Ssd1306::PrintInfo()+0x24>)
 8007fc4:	bc10      	pop	{r4}
 8007fc6:	f7fa b967 	b.w	8002298 <printf>
 8007fca:	bf00      	nop
 8007fcc:	0800bff3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 8007fd0:	0800bffa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 8007fd4:	0800c002 	stmdaeq	r0, {r1, lr, pc}

08007fd8 <Ssd1306::~Ssd1306()>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	f000 fc7f 	bl	80088de <operator delete(void*)>
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd10      	pop	{r4, pc}

08007fe4 <HAL_I2C::Setup()>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	7800      	ldrb	r0, [r0, #0]
 8007fea:	f001 fce9 	bl	80099c0 <gd32_i2c_set_address>
 8007fee:	6860      	ldr	r0, [r4, #4]
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f001 bcdc 	b.w	80099b0 <gd32_i2c_set_baudrate>

08007ff8 <Ssd1306::PutChar(int)>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	f1a1 0420 	sub.w	r4, r1, #32
 8007ffe:	2c5f      	cmp	r4, #95	; 0x5f
 8008000:	bf88      	it	hi
 8008002:	2400      	movhi	r4, #0
 8008004:	3010      	adds	r0, #16
 8008006:	f7ff ffed 	bl	8007fe4 <HAL_I2C::Setup()>
 800800a:	4804      	ldr	r0, [pc, #16]	; (800801c <Ssd1306::PutChar(int)+0x24>)
 800800c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8008010:	4420      	add	r0, r4
 8008012:	2107      	movs	r1, #7
 8008014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008018:	f001 bcd8 	b.w	80099cc <gd32_i2c_write>
 800801c:	0800c014 	stmdaeq	r0, {r2, r4, lr, pc}

08008020 <Ssd1306::PutString(char const*)>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4605      	mov	r5, r0
 8008024:	1e4c      	subs	r4, r1, #1
 8008026:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800802a:	b901      	cbnz	r1, 800802e <Ssd1306::PutString(char const*)+0xe>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	4628      	mov	r0, r5
 8008030:	f7ff ffe2 	bl	8007ff8 <Ssd1306::PutChar(int)>
 8008034:	e7f7      	b.n	8008026 <Ssd1306::PutString(char const*)+0x6>

08008036 <Ssd1306::Text(char const*, unsigned int)>:
 8008036:	6843      	ldr	r3, [r0, #4]
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4605      	mov	r5, r0
 800803c:	460c      	mov	r4, r1
 800803e:	429a      	cmp	r2, r3
 8008040:	bf94      	ite	ls
 8008042:	188e      	addls	r6, r1, r2
 8008044:	18ce      	addhi	r6, r1, r3
 8008046:	42b4      	cmp	r4, r6
 8008048:	d100      	bne.n	800804c <Ssd1306::Text(char const*, unsigned int)+0x16>
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	4628      	mov	r0, r5
 800804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008052:	f7ff ffd1 	bl	8007ff8 <Ssd1306::PutChar(int)>
 8008056:	e7f6      	b.n	8008046 <Ssd1306::Text(char const*, unsigned int)+0x10>

08008058 <Ssd1306::InitMembers()>:
 8008058:	7e03      	ldrb	r3, [r0, #24]
 800805a:	b14b      	cbz	r3, 8008070 <Ssd1306::InitMembers()+0x18>
 800805c:	3b01      	subs	r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d909      	bls.n	8008076 <Ssd1306::InitMembers()+0x1e>
 8008062:	2308      	movs	r3, #8
 8008064:	2204      	movs	r2, #4
 8008066:	2115      	movs	r1, #21
 8008068:	61c2      	str	r2, [r0, #28]
 800806a:	e9c0 1301 	strd	r1, r3, [r0, #4]
 800806e:	4770      	bx	lr
 8008070:	2308      	movs	r3, #8
 8008072:	461a      	mov	r2, r3
 8008074:	e7f7      	b.n	8008066 <Ssd1306::InitMembers()+0xe>
 8008076:	2304      	movs	r3, #4
 8008078:	e7fb      	b.n	8008072 <Ssd1306::InitMembers()+0x1a>
	...

0800807c <Ssd1306::Ssd1306(TOledPanel)>:
 800807c:	227f      	movs	r2, #127	; 0x7f
 800807e:	8182      	strh	r2, [r0, #12]
 8008080:	4a07      	ldr	r2, [pc, #28]	; (80080a0 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8008082:	b508      	push	{r3, lr}
 8008084:	6002      	str	r2, [r0, #0]
 8008086:	223c      	movs	r2, #60	; 0x3c
 8008088:	7402      	strb	r2, [r0, #16]
 800808a:	4a06      	ldr	r2, [pc, #24]	; (80080a4 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 800808c:	7601      	strb	r1, [r0, #24]
 800808e:	6142      	str	r2, [r0, #20]
 8008090:	2200      	movs	r2, #0
 8008092:	7642      	strb	r2, [r0, #25]
 8008094:	4a04      	ldr	r2, [pc, #16]	; (80080a8 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8008096:	6010      	str	r0, [r2, #0]
 8008098:	f7ff ffde 	bl	8008058 <Ssd1306::InitMembers()>
 800809c:	bd08      	pop	{r3, pc}
 800809e:	bf00      	nop
 80080a0:	0800c2ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, lr, pc}
 80080a4:	00061a80 	andeq	r1, r6, r0, lsl #21
 80080a8:	20001710 	andcs	r1, r0, r0, lsl r7

080080ac <Ssd1306::SendCommand(unsigned char)>:
 80080ac:	2300      	movs	r3, #0
 80080ae:	b507      	push	{r0, r1, r2, lr}
 80080b0:	3010      	adds	r0, #16
 80080b2:	f88d 3004 	strb.w	r3, [sp, #4]
 80080b6:	f88d 1005 	strb.w	r1, [sp, #5]
 80080ba:	f7ff ff93 	bl	8007fe4 <HAL_I2C::Setup()>
 80080be:	2102      	movs	r1, #2
 80080c0:	a801      	add	r0, sp, #4
 80080c2:	f001 fc83 	bl	80099cc <gd32_i2c_write>
 80080c6:	b003      	add	sp, #12
 80080c8:	f85d fb04 	ldr.w	pc, [sp], #4

080080cc <Ssd1306::SetCursorPos(unsigned int, unsigned int)>:
 80080cc:	2914      	cmp	r1, #20
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	4605      	mov	r5, r0
 80080d2:	4616      	mov	r6, r2
 80080d4:	d81d      	bhi.n	8008112 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x46>
 80080d6:	6883      	ldr	r3, [r0, #8]
 80080d8:	4293      	cmp	r3, r2
 80080da:	d91a      	bls.n	8008112 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x46>
 80080dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80080e0:	7e43      	ldrb	r3, [r0, #25]
 80080e2:	004c      	lsls	r4, r1, #1
 80080e4:	b2e4      	uxtb	r4, r4
 80080e6:	b10b      	cbz	r3, 80080ec <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x20>
 80080e8:	3404      	adds	r4, #4
 80080ea:	b2e4      	uxtb	r4, r4
 80080ec:	4628      	mov	r0, r5
 80080ee:	f004 010e 	and.w	r1, r4, #14
 80080f2:	f7ff ffdb 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80080f6:	0921      	lsrs	r1, r4, #4
 80080f8:	4628      	mov	r0, r5
 80080fa:	f041 0110 	orr.w	r1, r1, #16
 80080fe:	f7ff ffd5 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008102:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8008106:	4628      	mov	r0, r5
 8008108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800810c:	b2c9      	uxtb	r1, r1
 800810e:	f7ff bfcd 	b.w	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	461e      	mov	r6, r3
 8008118:	6883      	ldr	r3, [r0, #8]
 800811a:	4604      	mov	r4, r0
 800811c:	428b      	cmp	r3, r1
 800811e:	4615      	mov	r5, r2
 8008120:	d30b      	bcc.n	800813a <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x26>
 8008122:	3901      	subs	r1, #1
 8008124:	b2ca      	uxtb	r2, r1
 8008126:	2100      	movs	r1, #0
 8008128:	f7ff ffd0 	bl	80080cc <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 800812c:	4632      	mov	r2, r6
 800812e:	4629      	mov	r1, r5
 8008130:	4620      	mov	r0, r4
 8008132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008136:	f7ff bf7e 	b.w	8008036 <Ssd1306::Text(char const*, unsigned int)>
 800813a:	bd70      	pop	{r4, r5, r6, pc}

0800813c <Ssd1306::ClearLine(unsigned int)>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	6883      	ldr	r3, [r0, #8]
 8008140:	4605      	mov	r5, r0
 8008142:	428b      	cmp	r3, r1
 8008144:	d314      	bcc.n	8008170 <Ssd1306::ClearLine(unsigned int)+0x34>
 8008146:	3901      	subs	r1, #1
 8008148:	b2cc      	uxtb	r4, r1
 800814a:	4622      	mov	r2, r4
 800814c:	2100      	movs	r1, #0
 800814e:	f7ff ffbd 	bl	80080cc <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 8008152:	f105 0010 	add.w	r0, r5, #16
 8008156:	f7ff ff45 	bl	8007fe4 <HAL_I2C::Setup()>
 800815a:	2181      	movs	r1, #129	; 0x81
 800815c:	4805      	ldr	r0, [pc, #20]	; (8008174 <Ssd1306::ClearLine(unsigned int)+0x38>)
 800815e:	f001 fc35 	bl	80099cc <gd32_i2c_write>
 8008162:	4622      	mov	r2, r4
 8008164:	4628      	mov	r0, r5
 8008166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800816a:	2100      	movs	r1, #0
 800816c:	f7ff bfae 	b.w	80080cc <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	20001688 	andcs	r1, r0, r8, lsl #13

08008178 <Ssd1306::SetSleep(bool)>:
 8008178:	b111      	cbz	r1, 8008180 <Ssd1306::SetSleep(bool)+0x8>
 800817a:	21ae      	movs	r1, #174	; 0xae
 800817c:	f7ff bf96 	b.w	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008180:	21af      	movs	r1, #175	; 0xaf
 8008182:	e7fb      	b.n	800817c <Ssd1306::SetSleep(bool)+0x4>

08008184 <Ssd1306::SetContrast(unsigned char)>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	460d      	mov	r5, r1
 800818a:	7301      	strb	r1, [r0, #12]
 800818c:	2181      	movs	r1, #129	; 0x81
 800818e:	f7ff ff8d 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008192:	4629      	mov	r1, r5
 8008194:	4620      	mov	r0, r4
 8008196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800819a:	f7ff bf87 	b.w	80080ac <Ssd1306::SendCommand(unsigned char)>

0800819e <Ssd1306::SetFlipVertically(bool)>:
 800819e:	b510      	push	{r4, lr}
 80081a0:	4604      	mov	r4, r0
 80081a2:	7341      	strb	r1, [r0, #13]
 80081a4:	b141      	cbz	r1, 80081b8 <Ssd1306::SetFlipVertically(bool)+0x1a>
 80081a6:	21c0      	movs	r1, #192	; 0xc0
 80081a8:	f7ff ff80 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081ac:	21a0      	movs	r1, #160	; 0xa0
 80081ae:	4620      	mov	r0, r4
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	f7ff bf7a 	b.w	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081b8:	21c8      	movs	r1, #200	; 0xc8
 80081ba:	f7ff ff77 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081be:	21a1      	movs	r1, #161	; 0xa1
 80081c0:	e7f5      	b.n	80081ae <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080081c4 <Ssd1306::CheckSH1106()>:
 80081c4:	b530      	push	{r4, r5, lr}
 80081c6:	4604      	mov	r4, r0
 80081c8:	b087      	sub	sp, #28
 80081ca:	2100      	movs	r1, #0
 80081cc:	f7ff ff6e 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081d0:	2190      	movs	r1, #144	; 0x90
 80081d2:	4620      	mov	r0, r4
 80081d4:	f7ff ff6a 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081d8:	21b0      	movs	r1, #176	; 0xb0
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff ff66 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80081e0:	4b22      	ldr	r3, [pc, #136]	; (800826c <Ssd1306::CheckSH1106()+0xa8>)
 80081e2:	f104 0510 	add.w	r5, r4, #16
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	9002      	str	r0, [sp, #8]
 80081ec:	4628      	mov	r0, r5
 80081ee:	f88d 300c 	strb.w	r3, [sp, #12]
 80081f2:	f7ff fef7 	bl	8007fe4 <HAL_I2C::Setup()>
 80081f6:	2105      	movs	r1, #5
 80081f8:	a802      	add	r0, sp, #8
 80081fa:	f001 fbe7 	bl	80099cc <gd32_i2c_write>
 80081fe:	2100      	movs	r1, #0
 8008200:	4620      	mov	r0, r4
 8008202:	f7ff ff53 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008206:	2190      	movs	r1, #144	; 0x90
 8008208:	4620      	mov	r0, r4
 800820a:	f7ff ff4f 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 800820e:	21b0      	movs	r1, #176	; 0xb0
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff ff4b 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008216:	2300      	movs	r3, #0
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	f88d 3014 	strb.w	r3, [sp, #20]
 800821e:	2340      	movs	r3, #64	; 0x40
 8008220:	4628      	mov	r0, r5
 8008222:	f88d 3007 	strb.w	r3, [sp, #7]
 8008226:	f7ff fedd 	bl	8007fe4 <HAL_I2C::Setup()>
 800822a:	2101      	movs	r1, #1
 800822c:	f10d 0007 	add.w	r0, sp, #7
 8008230:	f001 fbcc 	bl	80099cc <gd32_i2c_write>
 8008234:	4628      	mov	r0, r5
 8008236:	f7ff fed5 	bl	8007fe4 <HAL_I2C::Setup()>
 800823a:	2105      	movs	r1, #5
 800823c:	a804      	add	r0, sp, #16
 800823e:	f001 fc2b 	bl	8009a98 <gd32_i2c_read>
 8008242:	2004      	movs	r0, #4
 8008244:	aa02      	add	r2, sp, #8
 8008246:	a904      	add	r1, sp, #16
 8008248:	3801      	subs	r0, #1
 800824a:	d201      	bcs.n	8008250 <Ssd1306::CheckSH1106()+0x8c>
 800824c:	2300      	movs	r3, #0
 800824e:	e006      	b.n	800825e <Ssd1306::CheckSH1106()+0x9a>
 8008250:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008254:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008258:	42ab      	cmp	r3, r5
 800825a:	d0f5      	beq.n	8008248 <Ssd1306::CheckSH1106()+0x84>
 800825c:	1b5b      	subs	r3, r3, r5
 800825e:	fab3 f383 	clz	r3, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	7663      	strb	r3, [r4, #25]
 8008266:	b007      	add	sp, #28
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	bf00      	nop
 800826c:	0800c00e 	stmdaeq	r0, {r1, r2, r3, lr, pc}

08008270 <Ssd1306::Cls()>:
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	4604      	mov	r4, r0
 8008276:	2600      	movs	r6, #0
 8008278:	7e45      	ldrb	r5, [r0, #25]
 800827a:	00ad      	lsls	r5, r5, #2
 800827c:	b2ed      	uxtb	r5, r5
 800827e:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8008282:	f045 0810 	orr.w	r8, r5, #16
 8008286:	b2ff      	uxtb	r7, r7
 8008288:	69e3      	ldr	r3, [r4, #28]
 800828a:	4629      	mov	r1, r5
 800828c:	42b3      	cmp	r3, r6
 800828e:	4620      	mov	r0, r4
 8008290:	d80b      	bhi.n	80082aa <Ssd1306::Cls()+0x3a>
 8008292:	f7ff ff0b 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008296:	4641      	mov	r1, r8
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff ff07 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 800829e:	4620      	mov	r0, r4
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	21b0      	movs	r1, #176	; 0xb0
 80082a6:	f7ff bf01 	b.w	80080ac <Ssd1306::SendCommand(unsigned char)>
 80082aa:	f7ff feff 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80082ae:	4641      	mov	r1, r8
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fefb 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80082b6:	f066 014f 	orn	r1, r6, #79	; 0x4f
 80082ba:	4620      	mov	r0, r4
 80082bc:	b2c9      	uxtb	r1, r1
 80082be:	f7ff fef5 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 80082c2:	7e23      	ldrb	r3, [r4, #24]
 80082c4:	b123      	cbz	r3, 80082d0 <Ssd1306::Cls()+0x60>
 80082c6:	3b01      	subs	r3, #1
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d901      	bls.n	80082d0 <Ssd1306::Cls()+0x60>
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7db      	b.n	8008288 <Ssd1306::Cls()+0x18>
 80082d0:	f104 0010 	add.w	r0, r4, #16
 80082d4:	f7ff fe86 	bl	8007fe4 <HAL_I2C::Setup()>
 80082d8:	4639      	mov	r1, r7
 80082da:	4802      	ldr	r0, [pc, #8]	; (80082e4 <Ssd1306::Cls()+0x74>)
 80082dc:	f001 fb76 	bl	80099cc <gd32_i2c_write>
 80082e0:	e7f4      	b.n	80082cc <Ssd1306::Cls()+0x5c>
 80082e2:	bf00      	nop
 80082e4:	20001688 	andcs	r1, r0, r8, lsl #13

080082e8 <Ssd1306::Start()>:
 80082e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ea:	7c04      	ldrb	r4, [r0, #16]
 80082ec:	6946      	ldr	r6, [r0, #20]
 80082ee:	4605      	mov	r5, r0
 80082f0:	4620      	mov	r0, r4
 80082f2:	f001 fb65 	bl	80099c0 <gd32_i2c_set_address>
 80082f6:	4630      	mov	r0, r6
 80082f8:	f001 fb5a 	bl	80099b0 <gd32_i2c_set_baudrate>
 80082fc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008300:	2b07      	cmp	r3, #7
 8008302:	d902      	bls.n	800830a <Ssd1306::Start()+0x22>
 8008304:	3c50      	subs	r4, #80	; 0x50
 8008306:	2c0f      	cmp	r4, #15
 8008308:	d80f      	bhi.n	800832a <Ssd1306::Start()+0x42>
 800830a:	2101      	movs	r1, #1
 800830c:	f10d 0007 	add.w	r0, sp, #7
 8008310:	f001 fbc2 	bl	8009a98 <gd32_i2c_read>
 8008314:	fab0 f480 	clz	r4, r0
 8008318:	0964      	lsrs	r4, r4, #5
 800831a:	b35c      	cbz	r4, 8008374 <Ssd1306::Start()+0x8c>
 800831c:	7e2e      	ldrb	r6, [r5, #24]
 800831e:	b14e      	cbz	r6, 8008334 <Ssd1306::Start()+0x4c>
 8008320:	3e01      	subs	r6, #1
 8008322:	2e01      	cmp	r6, #1
 8008324:	d929      	bls.n	800837a <Ssd1306::Start()+0x92>
 8008326:	2400      	movs	r4, #0
 8008328:	e024      	b.n	8008374 <Ssd1306::Start()+0x8c>
 800832a:	2100      	movs	r1, #0
 800832c:	4608      	mov	r0, r1
 800832e:	f001 fb4d 	bl	80099cc <gd32_i2c_write>
 8008332:	e7ef      	b.n	8008314 <Ssd1306::Start()+0x2c>
 8008334:	4f16      	ldr	r7, [pc, #88]	; (8008390 <Ssd1306::Start()+0xa8>)
 8008336:	4628      	mov	r0, r5
 8008338:	f817 1b01 	ldrb.w	r1, [r7], #1
 800833c:	3601      	adds	r6, #1
 800833e:	f7ff feb5 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008342:	2e18      	cmp	r6, #24
 8008344:	d1f7      	bne.n	8008336 <Ssd1306::Start()+0x4e>
 8008346:	2300      	movs	r3, #0
 8008348:	4a12      	ldr	r2, [pc, #72]	; (8008394 <Ssd1306::Start()+0xac>)
 800834a:	4618      	mov	r0, r3
 800834c:	4611      	mov	r1, r2
 800834e:	3301      	adds	r3, #1
 8008350:	2b86      	cmp	r3, #134	; 0x86
 8008352:	f802 0b01 	strb.w	r0, [r2], #1
 8008356:	d1fa      	bne.n	800834e <Ssd1306::Start()+0x66>
 8008358:	2340      	movs	r3, #64	; 0x40
 800835a:	4628      	mov	r0, r5
 800835c:	700b      	strb	r3, [r1, #0]
 800835e:	f7ff ff31 	bl	80081c4 <Ssd1306::CheckSH1106()>
 8008362:	4628      	mov	r0, r5
 8008364:	f7ff ff84 	bl	8008270 <Ssd1306::Cls()>
 8008368:	21af      	movs	r1, #175	; 0xaf
 800836a:	4628      	mov	r0, r5
 800836c:	f7ff fe9e 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 8008370:	2301      	movs	r3, #1
 8008372:	736b      	strb	r3, [r5, #13]
 8008374:	4620      	mov	r0, r4
 8008376:	b003      	add	sp, #12
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	2600      	movs	r6, #0
 800837c:	4f06      	ldr	r7, [pc, #24]	; (8008398 <Ssd1306::Start()+0xb0>)
 800837e:	4628      	mov	r0, r5
 8008380:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008384:	3601      	adds	r6, #1
 8008386:	f7ff fe91 	bl	80080ac <Ssd1306::SendCommand(unsigned char)>
 800838a:	2e18      	cmp	r6, #24
 800838c:	d1f7      	bne.n	800837e <Ssd1306::Start()+0x96>
 800838e:	e7da      	b.n	8008346 <Ssd1306::Start()+0x5e>
 8008390:	0800c2cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr, pc}
 8008394:	20001688 	andcs	r1, r0, r8, lsl #13
 8008398:	0800c2b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, lr, pc}

0800839c <console_putc>:
 800839c:	f000 bc82 	b.w	8008ca4 <uart0_putc>

080083a0 <console_puts>:
 80083a0:	f000 bca0 	b.w	8008ce4 <uart0_puts>

080083a4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	4617      	mov	r7, r2
 80083aa:	461e      	mov	r6, r3
 80083ac:	4d14      	ldr	r5, [pc, #80]	; (8008400 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80083b0:	b086      	sub	sp, #24
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	4604      	mov	r4, r0
 80083b6:	f105 0803 	add.w	r8, r5, #3
 80083ba:	2203      	movs	r2, #3
 80083bc:	4628      	mov	r0, r5
 80083be:	f000 fb25 	bl	8008a0c <memmove>
 80083c2:	4639      	mov	r1, r7
 80083c4:	220b      	movs	r2, #11
 80083c6:	4640      	mov	r0, r8
 80083c8:	f000 fb20 	bl	8008a0c <memmove>
 80083cc:	f105 030e 	add.w	r3, r5, #14
 80083d0:	4631      	mov	r1, r6
 80083d2:	2208      	movs	r2, #8
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb19 	bl	8008a0c <memmove>
 80083da:	2308      	movs	r3, #8
 80083dc:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80083e0:	230b      	movs	r3, #11
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	4b08      	ldr	r3, [pc, #32]	; (8008408 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80083e6:	9005      	str	r0, [sp, #20]
 80083e8:	e9cd 5300 	strd	r5, r3, [sp]
 80083ec:	213f      	movs	r1, #63	; 0x3f
 80083ee:	2303      	movs	r3, #3
 80083f0:	4a06      	ldr	r2, [pc, #24]	; (800840c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80083f2:	4807      	ldr	r0, [pc, #28]	; (8008410 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80083f4:	f7f9 ff60 	bl	80022b8 <snprintf>
 80083f8:	4620      	mov	r0, r4
 80083fa:	b006      	add	sp, #24
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	20001714 	andcs	r1, r0, r4, lsl r7
 8008404:	2000176c 	andcs	r1, r0, ip, ror #14
 8008408:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
 800840c:	0800c330 	stmdaeq	r0, {r4, r5, r8, r9, lr, pc}
 8008410:	2000172a 	andcs	r1, r0, sl, lsr #14

08008414 <hardware::ledblink::display(unsigned int)>:
 8008414:	4770      	bx	lr
	...

08008418 <Hardware::SetMode(hardware::ledblink::Mode)>:
 8008418:	b508      	push	{r3, lr}
 800841a:	4603      	mov	r3, r0
 800841c:	7d1a      	ldrb	r2, [r3, #20]
 800841e:	4608      	mov	r0, r1
 8008420:	b98a      	cbnz	r2, 8008446 <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	428a      	cmp	r2, r1
 8008426:	d00e      	beq.n	8008446 <Hardware::SetMode(hardware::ledblink::Mode)+0x2e>
 8008428:	6119      	str	r1, [r3, #16]
 800842a:	2905      	cmp	r1, #5
 800842c:	d817      	bhi.n	800845e <Hardware::SetMode(hardware::ledblink::Mode)+0x46>
 800842e:	e8df f001 	tbb	[pc, r1]
 8008432:	0f0b0316 	svceq	0x000b0316
 8008436:	22001412 	andcs	r1, r0, #301989888	; 0x12000000
 800843a:	619a      	str	r2, [r3, #24]
 800843c:	2201      	movs	r2, #1
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <Hardware::SetMode(hardware::ledblink::Mode)+0x54>)
 8008440:	611a      	str	r2, [r3, #16]
 8008442:	f7ff ffe7 	bl	8008414 <hardware::ledblink::display(unsigned int)>
 8008446:	bd08      	pop	{r3, pc}
 8008448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800844c:	619a      	str	r2, [r3, #24]
 800844e:	e7f8      	b.n	8008442 <Hardware::SetMode(hardware::ledblink::Mode)+0x2a>
 8008450:	f240 124d 	movw	r2, #333	; 0x14d
 8008454:	e7fa      	b.n	800844c <Hardware::SetMode(hardware::ledblink::Mode)+0x34>
 8008456:	22c8      	movs	r2, #200	; 0xc8
 8008458:	e7f8      	b.n	800844c <Hardware::SetMode(hardware::ledblink::Mode)+0x34>
 800845a:	227d      	movs	r2, #125	; 0x7d
 800845c:	e7f6      	b.n	800844c <Hardware::SetMode(hardware::ledblink::Mode)+0x34>
 800845e:	2200      	movs	r2, #0
 8008460:	619a      	str	r2, [r3, #24]
 8008462:	2201      	movs	r2, #1
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <Hardware::SetMode(hardware::ledblink::Mode)+0x54>)
 8008466:	615a      	str	r2, [r3, #20]
 8008468:	e7eb      	b.n	8008442 <Hardware::SetMode(hardware::ledblink::Mode)+0x2a>
 800846a:	bf00      	nop
 800846c:	40011000 	andmi	r1, r1, r0

08008470 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	2300      	movs	r3, #0
 8008474:	4604      	mov	r4, r0
 8008476:	4615      	mov	r5, r2
 8008478:	7503      	strb	r3, [r0, #20]
 800847a:	f7ff ffcd 	bl	8008418 <Hardware::SetMode(hardware::ledblink::Mode)>
 800847e:	7525      	strb	r5, [r4, #20]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
	...

08008484 <Hardware::Hardware()>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	b090      	sub	sp, #64	; 0x40
 8008488:	4604      	mov	r4, r0
 800848a:	f000 f8e9 	bl	8008660 <HwClock::HwClock()>
 800848e:	2306      	movs	r3, #6
 8008490:	2500      	movs	r5, #0
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008498:	e9c4 3506 	strd	r3, r5, [r4, #24]
 800849c:	4b31      	ldr	r3, [pc, #196]	; (8008564 <Hardware::Hardware()+0xe0>)
 800849e:	7325      	strb	r5, [r4, #12]
 80084a0:	7525      	strb	r5, [r4, #20]
 80084a2:	6225      	str	r5, [r4, #32]
 80084a4:	601c      	str	r4, [r3, #0]
 80084a6:	f7f7 fe43 	bl	8000130 <console_init>
 80084aa:	f000 fc2b 	bl	8008d04 <systick_config>
 80084ae:	f001 fd39 	bl	8009f24 <udelay_init()>
 80084b2:	f001 fd35 	bl	8009f20 <micros_init()>
 80084b6:	f240 701b 	movw	r0, #1819	; 0x71b
 80084ba:	f000 fe7b 	bl	80091b4 <rcu_periph_clock_enable>
 80084be:	f240 701c 	movw	r0, #1820	; 0x71c
 80084c2:	f000 fe77 	bl	80091b4 <rcu_periph_clock_enable>
 80084c6:	4e28      	ldr	r6, [pc, #160]	; (8008568 <Hardware::Hardware()+0xe4>)
 80084c8:	f000 fe6c 	bl	80091a4 <pmu_backup_write_enable>
 80084cc:	4629      	mov	r1, r5
 80084ce:	2002      	movs	r0, #2
 80084d0:	f000 fca6 	bl	8008e20 <bkp_data_write>
 80084d4:	f240 7004 	movw	r0, #1796	; 0x704
 80084d8:	f000 fe6c 	bl	80091b4 <rcu_periph_clock_enable>
 80084dc:	4630      	mov	r0, r6
 80084de:	f000 ffcb 	bl	8009478 <timer_deinit>
 80084e2:	236b      	movs	r3, #107	; 0x6b
 80084e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ec:	a903      	add	r1, sp, #12
 80084ee:	4630      	mov	r0, r6
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	f001 f823 	bl	800953c <timer_init>
 80084f6:	4630      	mov	r0, r6
 80084f8:	f001 f878 	bl	80095ec <timer_enable>
 80084fc:	f001 f986 	bl	800980c <gd32_adc_init()>
 8008500:	2213      	movs	r2, #19
 8008502:	2302      	movs	r3, #2
 8008504:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008508:	237b      	movs	r3, #123	; 0x7b
 800850a:	a807      	add	r0, sp, #28
 800850c:	930c      	str	r3, [sp, #48]	; 0x30
 800850e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008512:	9507      	str	r5, [sp, #28]
 8008514:	950f      	str	r5, [sp, #60]	; 0x3c
 8008516:	f000 fb1b 	bl	8008b50 <mktime>
 800851a:	4629      	mov	r1, r5
 800851c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8008520:	a801      	add	r0, sp, #4
 8008522:	f000 fb8b 	bl	8008c3c <settimeofday>
 8008526:	f001 fa0f 	bl	8009948 <gd32_i2c_begin>
 800852a:	4620      	mov	r0, r4
 800852c:	f000 f990 	bl	8008850 <HwClock::RtcProbe()>
 8008530:	4620      	mov	r0, r4
 8008532:	f000 f8a1 	bl	8008678 <HwClock::Print()>
 8008536:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800853a:	4620      	mov	r0, r4
 800853c:	f000 f8d0 	bl	80086e0 <HwClock::HcToSys()>
 8008540:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
 8008544:	f240 6004 	movw	r0, #1540	; 0x604
 8008548:	f000 fe34 	bl	80091b4 <rcu_periph_clock_enable>
 800854c:	4628      	mov	r0, r5
 800854e:	2301      	movs	r3, #1
 8008550:	2203      	movs	r2, #3
 8008552:	2110      	movs	r1, #16
 8008554:	f000 fd9c 	bl	8009090 <gpio_init>
 8008558:	2301      	movs	r3, #1
 800855a:	4620      	mov	r0, r4
 800855c:	616b      	str	r3, [r5, #20]
 800855e:	b010      	add	sp, #64	; 0x40
 8008560:	bd70      	pop	{r4, r5, r6, pc}
 8008562:	bf00      	nop
 8008564:	20001770 	andcs	r1, r0, r0, ror r7
 8008568:	40001000 	andmi	r1, r0, r0

0800856c <Hardware::SetTime(tm const*)>:
 800856c:	b500      	push	{lr}
 800856e:	680b      	ldr	r3, [r1, #0]
 8008570:	b08b      	sub	sp, #44	; 0x2c
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	684b      	ldr	r3, [r1, #4]
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	688b      	ldr	r3, [r1, #8]
 800857a:	9303      	str	r3, [sp, #12]
 800857c:	68cb      	ldr	r3, [r1, #12]
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	690b      	ldr	r3, [r1, #16]
 8008582:	9305      	str	r3, [sp, #20]
 8008584:	694b      	ldr	r3, [r1, #20]
 8008586:	a901      	add	r1, sp, #4
 8008588:	9306      	str	r3, [sp, #24]
 800858a:	f000 f909 	bl	80087a0 <HwClock::Set(rtc_time const*)>
 800858e:	2001      	movs	r0, #1
 8008590:	b00b      	add	sp, #44	; 0x2c
 8008592:	f85d fb04 	ldr.w	pc, [sp], #4

08008596 <Hardware::GetTime(tm*)>:
 8008596:	b513      	push	{r0, r1, r4, lr}
 8008598:	2000      	movs	r0, #0
 800859a:	460c      	mov	r4, r1
 800859c:	f000 fb66 	bl	8008c6c <time>
 80085a0:	9001      	str	r0, [sp, #4]
 80085a2:	a801      	add	r0, sp, #4
 80085a4:	f000 fa90 	bl	8008ac8 <localtime>
 80085a8:	6943      	ldr	r3, [r0, #20]
 80085aa:	6163      	str	r3, [r4, #20]
 80085ac:	6903      	ldr	r3, [r0, #16]
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	68c3      	ldr	r3, [r0, #12]
 80085b2:	60e3      	str	r3, [r4, #12]
 80085b4:	6883      	ldr	r3, [r0, #8]
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	6843      	ldr	r3, [r0, #4]
 80085ba:	6063      	str	r3, [r4, #4]
 80085bc:	6803      	ldr	r3, [r0, #0]
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	b002      	add	sp, #8
 80085c2:	bd10      	pop	{r4, pc}

080085c4 <Hardware::Reboot()>:
 80085c4:	b508      	push	{r3, lr}
 80085c6:	4604      	mov	r4, r0
 80085c8:	4819      	ldr	r0, [pc, #100]	; (8008630 <Hardware::Reboot()+0x6c>)
 80085ca:	f7f9 fe65 	bl	8002298 <printf>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2104      	movs	r1, #4
 80085d2:	7323      	strb	r3, [r4, #12]
 80085d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80085d8:	f000 fd30 	bl	800903c <fwdgt_config>
 80085dc:	4620      	mov	r0, r4
 80085de:	f7f8 fe3b 	bl	8001258 <Hardware::RebootHandler()>
 80085e2:	2102      	movs	r1, #2
 80085e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80085e8:	f000 fd28 	bl	800903c <fwdgt_config>
 80085ec:	2801      	cmp	r0, #1
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	7323      	strb	r3, [r4, #12]
 80085f6:	d101      	bne.n	80085fc <Hardware::Reboot()+0x38>
 80085f8:	f000 fd10 	bl	800901c <fwdgt_enable>
 80085fc:	2501      	movs	r5, #1
 80085fe:	2105      	movs	r1, #5
 8008600:	4620      	mov	r0, r4
 8008602:	f7ff ff09 	bl	8008418 <Hardware::SetMode(hardware::ledblink::Mode)>
 8008606:	490b      	ldr	r1, [pc, #44]	; (8008634 <Hardware::Reboot()+0x70>)
 8008608:	4a0b      	ldr	r2, [pc, #44]	; (8008638 <Hardware::Reboot()+0x74>)
 800860a:	69a0      	ldr	r0, [r4, #24]
 800860c:	b900      	cbnz	r0, 8008610 <Hardware::Reboot()+0x4c>
 800860e:	e7fe      	b.n	800860e <Hardware::Reboot()+0x4a>
 8008610:	680b      	ldr	r3, [r1, #0]
 8008612:	6a26      	ldr	r6, [r4, #32]
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	4298      	cmp	r0, r3
 8008618:	d8f8      	bhi.n	800860c <Hardware::Reboot()+0x48>
 800861a:	680b      	ldr	r3, [r1, #0]
 800861c:	6223      	str	r3, [r4, #32]
 800861e:	69e3      	ldr	r3, [r4, #28]
 8008620:	2b01      	cmp	r3, #1
 8008622:	f083 0001 	eor.w	r0, r3, #1
 8008626:	61e0      	str	r0, [r4, #28]
 8008628:	bf14      	ite	ne
 800862a:	6115      	strne	r5, [r2, #16]
 800862c:	6153      	streq	r3, [r2, #20]
 800862e:	e7ec      	b.n	800860a <Hardware::Reboot()+0x46>
 8008630:	0800c354 	stmdaeq	r0, {r2, r4, r6, r8, r9, lr, pc}
 8008634:	200017ac 	andcs	r1, r0, ip, lsr #15
 8008638:	40011000 	andmi	r1, r1, r0

0800863c <Hardware::WatchdogInit()>:
 800863c:	b510      	push	{r4, lr}
 800863e:	2102      	movs	r1, #2
 8008640:	4604      	mov	r4, r0
 8008642:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008646:	f000 fcf9 	bl	800903c <fwdgt_config>
 800864a:	2801      	cmp	r0, #1
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	7323      	strb	r3, [r4, #12]
 8008654:	d103      	bne.n	800865e <Hardware::WatchdogInit()+0x22>
 8008656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800865a:	f000 bcdf 	b.w	800901c <fwdgt_enable>
 800865e:	bd10      	pop	{r4, pc}

08008660 <HwClock::HwClock()>:
 8008660:	2200      	movs	r2, #0
 8008662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008666:	e9c0 2200 	strd	r2, r2, [r0]
 800866a:	7282      	strb	r2, [r0, #10]
 800866c:	4a01      	ldr	r2, [pc, #4]	; (8008674 <HwClock::HwClock()+0x14>)
 800866e:	8101      	strh	r1, [r0, #8]
 8008670:	6010      	str	r0, [r2, #0]
 8008672:	4770      	bx	lr
 8008674:	20001774 	andcs	r1, r0, r4, ror r7

08008678 <HwClock::Print()>:
 8008678:	b510      	push	{r4, lr}
 800867a:	7a83      	ldrb	r3, [r0, #10]
 800867c:	4604      	mov	r4, r0
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	b92b      	cbnz	r3, 800868e <HwClock::Print()+0x16>
 8008682:	4812      	ldr	r0, [pc, #72]	; (80086cc <HwClock::Print()+0x54>)
 8008684:	b00e      	add	sp, #56	; 0x38
 8008686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868a:	f7f9 be3d 	b.w	8002308 <puts>
 800868e:	7a43      	ldrb	r3, [r0, #9]
 8008690:	480f      	ldr	r0, [pc, #60]	; (80086d0 <HwClock::Print()+0x58>)
 8008692:	2b03      	cmp	r3, #3
 8008694:	bf96      	itet	ls
 8008696:	4a0f      	ldrls	r2, [pc, #60]	; (80086d4 <HwClock::Print()+0x5c>)
 8008698:	490f      	ldrhi	r1, [pc, #60]	; (80086d8 <HwClock::Print()+0x60>)
 800869a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 800869e:	f7f9 fdfb 	bl	8002298 <printf>
 80086a2:	a905      	add	r1, sp, #20
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 f905 	bl	80088b4 <HwClock::RtcGet(rtc_time*)>
 80086aa:	9b05      	ldr	r3, [sp, #20]
 80086ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086ae:	9302      	str	r3, [sp, #8]
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	9b07      	ldr	r3, [sp, #28]
 80086ba:	4808      	ldr	r0, [pc, #32]	; (80086dc <HwClock::Print()+0x64>)
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80086c2:	3201      	adds	r2, #1
 80086c4:	f7f9 fde8 	bl	8002298 <printf>
 80086c8:	b00e      	add	sp, #56	; 0x38
 80086ca:	bd10      	pop	{r4, pc}
 80086cc:	0800c363 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, lr, pc}
 80086d0:	0800b454 	stmdaeq	r0, {r2, r4, r6, sl, ip, sp, pc}
 80086d4:	0800c3b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, lr, pc}
 80086d8:	0800bc7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, sp, pc}
 80086dc:	0800c374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, lr, pc}

080086e0 <HwClock::HcToSys()>:
 80086e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e4:	7a83      	ldrb	r3, [r0, #10]
 80086e6:	4604      	mov	r4, r0
 80086e8:	b0a3      	sub	sp, #140	; 0x8c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d04c      	beq.n	8008788 <HwClock::HcToSys()+0xa8>
 80086ee:	4f2a      	ldr	r7, [pc, #168]	; (8008798 <HwClock::HcToSys()+0xb8>)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	7b1e      	ldrb	r6, [r3, #12]
 80086f4:	b136      	cbz	r6, 8008704 <HwClock::HcToSys()+0x24>
 80086f6:	2200      	movs	r2, #0
 80086f8:	2104      	movs	r1, #4
 80086fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80086fe:	731a      	strb	r2, [r3, #12]
 8008700:	f000 fc9c 	bl	800903c <fwdgt_config>
 8008704:	f04f 083c 	mov.w	r8, #60	; 0x3c
 8008708:	a907      	add	r1, sp, #28
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f8d2 	bl	80088b4 <HwClock::RtcGet(rtc_time*)>
 8008710:	2100      	movs	r1, #0
 8008712:	a801      	add	r0, sp, #4
 8008714:	f000 fa68 	bl	8008be8 <gettimeofday>
 8008718:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800871c:	fb08 2903 	mla	r9, r8, r3, r2
 8008720:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 8008724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008726:	a819      	add	r0, sp, #100	; 0x64
 8008728:	931b      	str	r3, [sp, #108]	; 0x6c
 800872a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872c:	931c      	str	r3, [sp, #112]	; 0x70
 800872e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008730:	931d      	str	r3, [sp, #116]	; 0x74
 8008732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008734:	931e      	str	r3, [sp, #120]	; 0x78
 8008736:	f000 fa0b 	bl	8008b50 <mktime>
 800873a:	4605      	mov	r5, r0
 800873c:	4620      	mov	r0, r4
 800873e:	a910      	add	r1, sp, #64	; 0x40
 8008740:	f000 f8b8 	bl	80088b4 <HwClock::RtcGet(rtc_time*)>
 8008744:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008748:	fb08 3302 	mla	r3, r8, r2, r3
 800874c:	4599      	cmp	r9, r3
 800874e:	d0f5      	beq.n	800873c <HwClock::HcToSys()+0x5c>
 8008750:	2100      	movs	r1, #0
 8008752:	a803      	add	r0, sp, #12
 8008754:	f000 fa48 	bl	8008be8 <gettimeofday>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	9a03      	ldr	r2, [sp, #12]
 800875c:	9902      	ldr	r1, [sp, #8]
 800875e:	429a      	cmp	r2, r3
 8008760:	9505      	str	r5, [sp, #20]
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	d113      	bne.n	800878e <HwClock::HcToSys()+0xae>
 8008766:	1a5b      	subs	r3, r3, r1
 8008768:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 800876c:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8008770:	2100      	movs	r1, #0
 8008772:	a805      	add	r0, sp, #20
 8008774:	9206      	str	r2, [sp, #24]
 8008776:	f000 fa61 	bl	8008c3c <settimeofday>
 800877a:	4b08      	ldr	r3, [pc, #32]	; (800879c <HwClock::HcToSys()+0xbc>)
 800877c:	6838      	ldr	r0, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	b10e      	cbz	r6, 8008788 <HwClock::HcToSys()+0xa8>
 8008784:	f7ff ff5a 	bl	800863c <Hardware::WatchdogInit()>
 8008788:	b023      	add	sp, #140	; 0x8c
 800878a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800878e:	1a5a      	subs	r2, r3, r1
 8008790:	bf48      	it	mi
 8008792:	1aca      	submi	r2, r1, r3
 8008794:	e7ec      	b.n	8008770 <HwClock::HcToSys()+0x90>
 8008796:	bf00      	nop
 8008798:	20001770 	andcs	r1, r0, r0, ror r7
 800879c:	200017ac 	andcs	r1, r0, ip, lsr #15

080087a0 <HwClock::Set(rtc_time const*)>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	7a86      	ldrb	r6, [r0, #10]
 80087a4:	4605      	mov	r5, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b090      	sub	sp, #64	; 0x40
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	d02b      	beq.n	8008806 <HwClock::Set(rtc_time const*)+0x66>
 80087ae:	2100      	movs	r1, #0
 80087b0:	a801      	add	r0, sp, #4
 80087b2:	f000 fa19 	bl	8008be8 <gettimeofday>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 f873 	bl	80088a4 <HwClock::RtcSet(rtc_time const*)>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	a807      	add	r0, sp, #28
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	9308      	str	r3, [sp, #32]
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	9309      	str	r3, [sp, #36]	; 0x24
 80087cc:	68e3      	ldr	r3, [r4, #12]
 80087ce:	930a      	str	r3, [sp, #40]	; 0x28
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087d4:	6963      	ldr	r3, [r4, #20]
 80087d6:	2400      	movs	r4, #0
 80087d8:	930c      	str	r3, [sp, #48]	; 0x30
 80087da:	940f      	str	r4, [sp, #60]	; 0x3c
 80087dc:	f000 f9b8 	bl	8008b50 <mktime>
 80087e0:	4621      	mov	r1, r4
 80087e2:	9003      	str	r0, [sp, #12]
 80087e4:	a805      	add	r0, sp, #20
 80087e6:	f000 f9ff 	bl	8008be8 <gettimeofday>
 80087ea:	9906      	ldr	r1, [sp, #24]
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	a803      	add	r0, sp, #12
 80087f0:	1aca      	subs	r2, r1, r3
 80087f2:	bf42      	ittt	mi
 80087f4:	1a5b      	submi	r3, r3, r1
 80087f6:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 80087fa:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 80087fe:	2100      	movs	r1, #0
 8008800:	9204      	str	r2, [sp, #16]
 8008802:	f000 fa1b 	bl	8008c3c <settimeofday>
 8008806:	4630      	mov	r0, r6
 8008808:	b010      	add	sp, #64	; 0x40
 800880a:	bd70      	pop	{r4, r5, r6, pc}

0800880c <rtc_configuration()>:
 800880c:	b510      	push	{r4, lr}
 800880e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008812:	f000 fd71 	bl	80092f8 <rcu_osci_on>
 8008816:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800881a:	f000 fd23 	bl	8009264 <rcu_osci_stab_wait>
 800881e:	2801      	cmp	r0, #1
 8008820:	4604      	mov	r4, r0
 8008822:	d113      	bne.n	800884c <rtc_configuration()+0x40>
 8008824:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008828:	f000 fd02 	bl	8009230 <rcu_rtc_clock_config>
 800882c:	f640 000f 	movw	r0, #2063	; 0x80f
 8008830:	f000 fcc0 	bl	80091b4 <rcu_periph_clock_enable>
 8008834:	f000 fe08 	bl	8009448 <rtc_register_sync_wait>
 8008838:	f000 fdfe 	bl	8009438 <rtc_lwoff_wait>
 800883c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8008840:	f000 fde8 	bl	8009414 <rtc_prescaler_set>
 8008844:	f000 fdf8 	bl	8009438 <rtc_lwoff_wait>
 8008848:	4620      	mov	r0, r4
 800884a:	bd10      	pop	{r4, pc}
 800884c:	2000      	movs	r0, #0
 800884e:	e7fc      	b.n	800884a <rtc_configuration()+0x3e>

08008850 <HwClock::RtcProbe()>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	2001      	movs	r0, #1
 8008856:	f000 faf9 	bl	8008e4c <bkp_data_read>
 800885a:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 800885e:	42a8      	cmp	r0, r5
 8008860:	d019      	beq.n	8008896 <HwClock::RtcProbe()+0x46>
 8008862:	f7ff ffd3 	bl	800880c <rtc_configuration()>
 8008866:	b908      	cbnz	r0, 800886c <HwClock::RtcProbe()+0x1c>
 8008868:	72a0      	strb	r0, [r4, #10]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	f000 fde4 	bl	8009438 <rtc_lwoff_wait>
 8008870:	2000      	movs	r0, #0
 8008872:	f000 f9fb 	bl	8008c6c <time>
 8008876:	f000 fdbd 	bl	80093f4 <rtc_counter_set>
 800887a:	f000 fddd 	bl	8009438 <rtc_lwoff_wait>
 800887e:	4629      	mov	r1, r5
 8008880:	2001      	movs	r0, #1
 8008882:	f000 facd 	bl	8008e20 <bkp_data_write>
 8008886:	2303      	movs	r3, #3
 8008888:	7263      	strb	r3, [r4, #9]
 800888a:	2301      	movs	r3, #1
 800888c:	72a3      	strb	r3, [r4, #10]
 800888e:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <HwClock::RtcProbe()+0x50>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	e7e9      	b.n	800886a <HwClock::RtcProbe()+0x1a>
 8008896:	f000 fdd7 	bl	8009448 <rtc_register_sync_wait>
 800889a:	f000 fdcd 	bl	8009438 <rtc_lwoff_wait>
 800889e:	e7f2      	b.n	8008886 <HwClock::RtcProbe()+0x36>
 80088a0:	200017ac 	andcs	r1, r0, ip, lsr #15

080088a4 <HwClock::RtcSet(rtc_time const*)>:
 80088a4:	b508      	push	{r3, lr}
 80088a6:	4608      	mov	r0, r1
 80088a8:	f000 f952 	bl	8008b50 <mktime>
 80088ac:	f000 fda2 	bl	80093f4 <rtc_counter_set>
 80088b0:	2001      	movs	r0, #1
 80088b2:	bd08      	pop	{r3, pc}

080088b4 <HwClock::RtcGet(rtc_time*)>:
 80088b4:	b513      	push	{r0, r1, r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f000 fdd4 	bl	8009464 <rtc_counter_get>
 80088bc:	9001      	str	r0, [sp, #4]
 80088be:	a801      	add	r0, sp, #4
 80088c0:	f000 f902 	bl	8008ac8 <localtime>
 80088c4:	1e61      	subs	r1, r4, #1
 80088c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
 80088ca:	4298      	cmp	r0, r3
 80088cc:	d102      	bne.n	80088d4 <HwClock::RtcGet(rtc_time*)+0x20>
 80088ce:	2001      	movs	r0, #1
 80088d0:	b002      	add	sp, #8
 80088d2:	bd10      	pop	{r4, pc}
 80088d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80088dc:	e7f5      	b.n	80088ca <HwClock::RtcGet(rtc_time*)+0x16>

080088de <operator delete(void*)>:
 80088de:	f000 b87b 	b.w	80089d8 <free>

080088e2 <operator delete[](void*)>:
 80088e2:	f000 b879 	b.w	80089d8 <free>

080088e6 <operator new(unsigned int)>:
 80088e6:	f000 b849 	b.w	800897c <malloc>

080088ea <operator new[](unsigned int)>:
 80088ea:	f000 b847 	b.w	800897c <malloc>
	...

080088f0 <log2f>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	2100      	movs	r1, #0
 80088f4:	4604      	mov	r4, r0
 80088f6:	f7f7 fdcd 	bl	8000494 <__aeabi_fcmpeq>
 80088fa:	bb28      	cbnz	r0, 8008948 <log2f+0x58>
 80088fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008900:	4620      	mov	r0, r4
 8008902:	f7f7 fdc7 	bl	8000494 <__aeabi_fcmpeq>
 8008906:	bb08      	cbnz	r0, 800894c <log2f+0x5c>
 8008908:	2100      	movs	r1, #0
 800890a:	4620      	mov	r0, r4
 800890c:	f7f7 fdcc 	bl	80004a8 <__aeabi_fcmplt>
 8008910:	b9f0      	cbnz	r0, 8008950 <log2f+0x60>
 8008912:	f3c4 50c7 	ubfx	r0, r4, #23, #8
 8008916:	3880      	subs	r0, #128	; 0x80
 8008918:	f7f7 fd24 	bl	8000364 <__aeabi_i2f>
 800891c:	4605      	mov	r5, r0
 800891e:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8008922:	f104 547e 	add.w	r4, r4, #1065353216	; 0x3f800000
 8008926:	490b      	ldr	r1, [pc, #44]	; (8008954 <log2f+0x64>)
 8008928:	4620      	mov	r0, r4
 800892a:	f7f8 fa13 	bl	8000d54 <__aeabi_fmul>
 800892e:	490a      	ldr	r1, [pc, #40]	; (8008958 <log2f+0x68>)
 8008930:	f7f7 fc64 	bl	80001fc <__addsf3>
 8008934:	4621      	mov	r1, r4
 8008936:	f7f8 fa0d 	bl	8000d54 <__aeabi_fmul>
 800893a:	4908      	ldr	r1, [pc, #32]	; (800895c <log2f+0x6c>)
 800893c:	f7f7 fc5c 	bl	80001f8 <__aeabi_fsub>
 8008940:	4629      	mov	r1, r5
 8008942:	f7f7 fc5b 	bl	80001fc <__addsf3>
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <log2f+0x70>)
 800894a:	e7fc      	b.n	8008946 <log2f+0x56>
 800894c:	2000      	movs	r0, #0
 800894e:	e7fa      	b.n	8008946 <log2f+0x56>
 8008950:	4804      	ldr	r0, [pc, #16]	; (8008964 <log2f+0x74>)
 8008952:	e7f8      	b.n	8008946 <log2f+0x56>
 8008954:	beb08ff9 	mrclt	15, 5, r8, cr0, cr9, {7}
 8008958:	40019420 	andmi	r9, r1, r0, lsr #8
 800895c:	3f2cc4c7 	svccc	0x002cc4c7
 8008960:	ff800000 			; <UNDEFINED> instruction: 0xff800000
 8008964:	7f800001 	svcvc	0x00800001

08008968 <logf>:
 8008968:	b508      	push	{r3, lr}
 800896a:	f7ff ffc1 	bl	80088f0 <log2f>
 800896e:	4902      	ldr	r1, [pc, #8]	; (8008978 <logf+0x10>)
 8008970:	f7f8 f9f0 	bl	8000d54 <__aeabi_fmul>
 8008974:	bd08      	pop	{r3, pc}
 8008976:	bf00      	nop
 8008978:	3f317218 	svccc	0x00317218

0800897c <malloc>:
 800897c:	b510      	push	{r4, lr}
 800897e:	b1d8      	cbz	r0, 80089b8 <malloc+0x3c>
 8008980:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <malloc+0x4c>)
 8008982:	6811      	ldr	r1, [r2, #0]
 8008984:	b971      	cbnz	r1, 80089a4 <malloc+0x28>
 8008986:	4911      	ldr	r1, [pc, #68]	; (80089cc <malloc+0x50>)
 8008988:	f100 021b 	add.w	r2, r0, #27
 800898c:	680b      	ldr	r3, [r1, #0]
 800898e:	4c10      	ldr	r4, [pc, #64]	; (80089d0 <malloc+0x54>)
 8008990:	f022 020f 	bic.w	r2, r2, #15
 8008994:	441a      	add	r2, r3
 8008996:	42a2      	cmp	r2, r4
 8008998:	d80f      	bhi.n	80089ba <malloc+0x3e>
 800899a:	600a      	str	r2, [r1, #0]
 800899c:	4a0d      	ldr	r2, [pc, #52]	; (80089d4 <malloc+0x58>)
 800899e:	e9c3 2000 	strd	r2, r0, [r3]
 80089a2:	e005      	b.n	80089b0 <malloc+0x34>
 80089a4:	4288      	cmp	r0, r1
 80089a6:	d90a      	bls.n	80089be <malloc+0x42>
 80089a8:	3208      	adds	r2, #8
 80089aa:	e7ea      	b.n	8008982 <malloc+0x6>
 80089ac:	6899      	ldr	r1, [r3, #8]
 80089ae:	6051      	str	r1, [r2, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f103 000c 	add.w	r0, r3, #12
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	bd10      	pop	{r4, pc}
 80089ba:	2000      	movs	r0, #0
 80089bc:	e7fc      	b.n	80089b8 <malloc+0x3c>
 80089be:	6853      	ldr	r3, [r2, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f3      	bne.n	80089ac <malloc+0x30>
 80089c4:	4608      	mov	r0, r1
 80089c6:	e7de      	b.n	8008986 <malloc+0xa>
 80089c8:	20000010 	andcs	r0, r0, r0, lsl r0
 80089cc:	2000000c 	andcs	r0, r0, ip
 80089d0:	2000b000 	andcs	fp, r0, r0
 80089d4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

080089d8 <free>:
 80089d8:	b138      	cbz	r0, 80089ea <free+0x12>
 80089da:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 80089de:	4b09      	ldr	r3, [pc, #36]	; (8008a04 <free+0x2c>)
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d102      	bne.n	80089ea <free+0x12>
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <free+0x30>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	b902      	cbnz	r2, 80089ec <free+0x14>
 80089ea:	4770      	bx	lr
 80089ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80089f0:	4291      	cmp	r1, r2
 80089f2:	d104      	bne.n	80089fe <free+0x26>
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	380c      	subs	r0, #12
 80089f8:	6082      	str	r2, [r0, #8]
 80089fa:	6058      	str	r0, [r3, #4]
 80089fc:	4770      	bx	lr
 80089fe:	3308      	adds	r3, #8
 8008a00:	e7f1      	b.n	80089e6 <free+0xe>
 8008a02:	bf00      	nop
 8008a04:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8008a08:	20000010 	andcs	r0, r0, r0, lsl r0

08008a0c <memmove>:
 8008a0c:	4288      	cmp	r0, r1
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	eb01 0302 	add.w	r3, r1, r2
 8008a14:	d208      	bcs.n	8008a28 <memmove+0x1c>
 8008a16:	1e42      	subs	r2, r0, #1
 8008a18:	4299      	cmp	r1, r3
 8008a1a:	d100      	bne.n	8008a1e <memmove+0x12>
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a26:	e7f7      	b.n	8008a18 <memmove+0xc>
 8008a28:	4601      	mov	r1, r0
 8008a2a:	4402      	add	r2, r0
 8008a2c:	428a      	cmp	r2, r1
 8008a2e:	d0f5      	beq.n	8008a1c <memmove+0x10>
 8008a30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a38:	e7f8      	b.n	8008a2c <memmove+0x20>

08008a3a <memset>:
 8008a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3c:	b1c2      	cbz	r2, 8008a70 <memset+0x36>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b2c9      	uxtb	r1, r1
 8008a42:	075c      	lsls	r4, r3, #29
 8008a44:	d110      	bne.n	8008a68 <memset+0x2e>
 8008a46:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8008a4a:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8008a4e:	463d      	mov	r5, r7
 8008a50:	461e      	mov	r6, r3
 8008a52:	f022 0407 	bic.w	r4, r2, #7
 8008a56:	441c      	add	r4, r3
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d10a      	bne.n	8008a72 <memset+0x38>
 8008a5c:	4413      	add	r3, r2
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d006      	beq.n	8008a70 <memset+0x36>
 8008a62:	f804 1b01 	strb.w	r1, [r4], #1
 8008a66:	e7fa      	b.n	8008a5e <memset+0x24>
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6e:	d1e8      	bne.n	8008a42 <memset+0x8>
 8008a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a72:	f846 7b08 	str.w	r7, [r6], #8
 8008a76:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a7a:	e7ed      	b.n	8008a58 <memset+0x1e>

08008a7c <isleapyear>:
 8008a7c:	2264      	movs	r2, #100	; 0x64
 8008a7e:	fb90 f3f2 	sdiv	r3, r0, r2
 8008a82:	fb02 0313 	mls	r3, r2, r3, r0
 8008a86:	b94b      	cbnz	r3, 8008a9c <isleapyear+0x20>
 8008a88:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008a8c:	fb90 f2f3 	sdiv	r2, r0, r3
 8008a90:	fb03 0012 	mls	r0, r3, r2, r0
 8008a94:	fab0 f080 	clz	r0, r0
 8008a98:	0940      	lsrs	r0, r0, #5
 8008a9a:	4770      	bx	lr
 8008a9c:	f010 0f03 	tst.w	r0, #3
 8008aa0:	bf0c      	ite	eq
 8008aa2:	2001      	moveq	r0, #1
 8008aa4:	2000      	movne	r0, #0
 8008aa6:	4770      	bx	lr

08008aa8 <getdaysofmonth>:
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	4604      	mov	r4, r0
 8008aac:	2c01      	cmp	r4, #1
 8008aae:	4608      	mov	r0, r1
 8008ab0:	d102      	bne.n	8008ab8 <getdaysofmonth+0x10>
 8008ab2:	f7ff ffe3 	bl	8008a7c <isleapyear>
 8008ab6:	b918      	cbnz	r0, 8008ac0 <getdaysofmonth+0x18>
 8008ab8:	4b02      	ldr	r3, [pc, #8]	; (8008ac4 <getdaysofmonth+0x1c>)
 8008aba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008abe:	bd10      	pop	{r4, pc}
 8008ac0:	201d      	movs	r0, #29
 8008ac2:	e7fc      	b.n	8008abe <getdaysofmonth+0x16>
 8008ac4:	0800c3c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, lr, pc}

08008ac8 <localtime>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d03c      	beq.n	8008b48 <localtime+0x80>
 8008ace:	213c      	movs	r1, #60	; 0x3c
 8008ad0:	6803      	ldr	r3, [r0, #0]
 8008ad2:	4d1e      	ldr	r5, [pc, #120]	; (8008b4c <localtime+0x84>)
 8008ad4:	fb93 f2f1 	sdiv	r2, r3, r1
 8008ad8:	fb01 3312 	mls	r3, r1, r2, r3
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	fb92 f3f1 	sdiv	r3, r2, r1
 8008ae2:	fb01 2213 	mls	r2, r1, r3, r2
 8008ae6:	606a      	str	r2, [r5, #4]
 8008ae8:	2218      	movs	r2, #24
 8008aea:	fb93 f4f2 	sdiv	r4, r3, r2
 8008aee:	fb02 3314 	mls	r3, r2, r4, r3
 8008af2:	60ab      	str	r3, [r5, #8]
 8008af4:	2307      	movs	r3, #7
 8008af6:	1d22      	adds	r2, r4, #4
 8008af8:	fb92 f3f3 	sdiv	r3, r2, r3
 8008afc:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008b00:	f240 166d 	movw	r6, #365	; 0x16d
 8008b04:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	61aa      	str	r2, [r5, #24]
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	f7ff ffb5 	bl	8008a7c <isleapyear>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	bf14      	ite	ne
 8008b16:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8008b1a:	4633      	moveq	r3, r6
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	db02      	blt.n	8008b26 <localtime+0x5e>
 8008b20:	1ae4      	subs	r4, r4, r3
 8008b22:	3101      	adds	r1, #1
 8008b24:	e7f2      	b.n	8008b0c <localtime+0x44>
 8008b26:	2600      	movs	r6, #0
 8008b28:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 8008b2c:	616b      	str	r3, [r5, #20]
 8008b2e:	61ec      	str	r4, [r5, #28]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff ffb9 	bl	8008aa8 <getdaysofmonth>
 8008b36:	4284      	cmp	r4, r0
 8008b38:	db02      	blt.n	8008b40 <localtime+0x78>
 8008b3a:	1a24      	subs	r4, r4, r0
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f7      	b.n	8008b30 <localtime+0x68>
 8008b40:	3401      	adds	r4, #1
 8008b42:	4802      	ldr	r0, [pc, #8]	; (8008b4c <localtime+0x84>)
 8008b44:	612e      	str	r6, [r5, #16]
 8008b46:	60ec      	str	r4, [r5, #12]
 8008b48:	bd70      	pop	{r4, r5, r6, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20001778 	andcs	r1, r0, r8, ror r7

08008b50 <mktime>:
 8008b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d043      	beq.n	8008be2 <mktime+0x92>
 8008b5a:	6941      	ldr	r1, [r0, #20]
 8008b5c:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8008b60:	2b45      	cmp	r3, #69	; 0x45
 8008b62:	d83e      	bhi.n	8008be2 <mktime+0x92>
 8008b64:	2600      	movs	r6, #0
 8008b66:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8008b6a:	f240 186d 	movw	r8, #365	; 0x16d
 8008b6e:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8008b72:	42af      	cmp	r7, r5
 8008b74:	da24      	bge.n	8008bc0 <mktime+0x70>
 8008b76:	6927      	ldr	r7, [r4, #16]
 8008b78:	2f0b      	cmp	r7, #11
 8008b7a:	d832      	bhi.n	8008be2 <mktime+0x92>
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	42af      	cmp	r7, r5
 8008b80:	d129      	bne.n	8008bd6 <mktime+0x86>
 8008b82:	68e5      	ldr	r5, [r4, #12]
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	dd2c      	ble.n	8008be2 <mktime+0x92>
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f7ff ff8d 	bl	8008aa8 <getdaysofmonth>
 8008b8e:	4285      	cmp	r5, r0
 8008b90:	dc27      	bgt.n	8008be2 <mktime+0x92>
 8008b92:	2318      	movs	r3, #24
 8008b94:	3d01      	subs	r5, #1
 8008b96:	4435      	add	r5, r6
 8008b98:	435d      	muls	r5, r3
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	2b17      	cmp	r3, #23
 8008b9e:	d820      	bhi.n	8008be2 <mktime+0x92>
 8008ba0:	213c      	movs	r1, #60	; 0x3c
 8008ba2:	442b      	add	r3, r5
 8008ba4:	fb01 f203 	mul.w	r2, r1, r3
 8008ba8:	6863      	ldr	r3, [r4, #4]
 8008baa:	2b3b      	cmp	r3, #59	; 0x3b
 8008bac:	d819      	bhi.n	8008be2 <mktime+0x92>
 8008bae:	6820      	ldr	r0, [r4, #0]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	283b      	cmp	r0, #59	; 0x3b
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	d813      	bhi.n	8008be2 <mktime+0x92>
 8008bba:	4418      	add	r0, r3
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff ff5b 	bl	8008a7c <isleapyear>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	bf14      	ite	ne
 8008bca:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8008bce:	4643      	moveq	r3, r8
 8008bd0:	3501      	adds	r5, #1
 8008bd2:	441e      	add	r6, r3
 8008bd4:	e7cd      	b.n	8008b72 <mktime+0x22>
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f7ff ff66 	bl	8008aa8 <getdaysofmonth>
 8008bdc:	3501      	adds	r5, #1
 8008bde:	4406      	add	r6, r0
 8008be0:	e7cd      	b.n	8008b7e <mktime+0x2e>
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be6:	e7e9      	b.n	8008bbc <mktime+0x6c>

08008be8 <gettimeofday>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <gettimeofday+0x44>)
 8008bec:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <gettimeofday+0x48>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6814      	ldr	r4, [r2, #0]
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bf8:	429c      	cmp	r4, r3
 8008bfa:	bf2c      	ite	cs
 8008bfc:	1ae4      	subcs	r4, r4, r3
 8008bfe:	1b1c      	subcc	r4, r3, r4
 8008c00:	4354      	muls	r4, r2
 8008c02:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <gettimeofday+0x4c>)
 8008c04:	4605      	mov	r5, r0
 8008c06:	e9d3 2100 	ldrd	r2, r1, [r3]
 8008c0a:	18a4      	adds	r4, r4, r2
 8008c0c:	f141 0100 	adc.w	r1, r1, #0
 8008c10:	e9c3 4100 	strd	r4, r1, [r3]
 8008c14:	4620      	mov	r0, r4
 8008c16:	2300      	movs	r3, #0
 8008c18:	4a07      	ldr	r2, [pc, #28]	; (8008c38 <gettimeofday+0x50>)
 8008c1a:	f7f7 fc93 	bl	8000544 <__aeabi_uldivmod>
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <gettimeofday+0x50>)
 8008c20:	6028      	str	r0, [r5, #0]
 8008c22:	fb03 4410 	mls	r4, r3, r0, r4
 8008c26:	2000      	movs	r0, #0
 8008c28:	606c      	str	r4, [r5, #4]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8008c30:	200017a8 	andcs	r1, r0, r8, lsr #15
 8008c34:	200017a0 	andcs	r1, r0, r0, lsr #15
 8008c38:	000f4240 	andeq	r4, pc, r0, asr #4

08008c3c <settimeofday>:
 8008c3c:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <settimeofday+0x20>)
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <settimeofday+0x24>)
 8008c44:	6804      	ldr	r4, [r0, #0]
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	6843      	ldr	r3, [r0, #4]
 8008c4a:	4806      	ldr	r0, [pc, #24]	; (8008c64 <settimeofday+0x28>)
 8008c4c:	17da      	asrs	r2, r3, #31
 8008c4e:	fbc4 3200 	smlal	r3, r2, r4, r0
 8008c52:	4905      	ldr	r1, [pc, #20]	; (8008c68 <settimeofday+0x2c>)
 8008c54:	2000      	movs	r0, #0
 8008c56:	e9c1 3200 	strd	r3, r2, [r1]
 8008c5a:	bd10      	pop	{r4, pc}
 8008c5c:	200017ac 	andcs	r1, r0, ip, lsr #15
 8008c60:	200017a8 	andcs	r1, r0, r8, lsr #15
 8008c64:	000f4240 	andeq	r4, pc, r0, asr #4
 8008c68:	200017a0 	andcs	r1, r0, r0, lsr #15

08008c6c <time>:
 8008c6c:	b513      	push	{r0, r1, r4, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	2100      	movs	r1, #0
 8008c72:	4668      	mov	r0, sp
 8008c74:	f7ff ffb8 	bl	8008be8 <gettimeofday>
 8008c78:	9800      	ldr	r0, [sp, #0]
 8008c7a:	b104      	cbz	r4, 8008c7e <time+0x12>
 8008c7c:	6020      	str	r0, [r4, #0]
 8008c7e:	b002      	add	sp, #8
 8008c80:	bd10      	pop	{r4, pc}
	...

08008c84 <uart0_init>:
 8008c84:	2301      	movs	r3, #1
 8008c86:	b507      	push	{r0, r1, r2, lr}
 8008c88:	2208      	movs	r2, #8
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008c90:	2300      	movs	r3, #0
 8008c92:	4803      	ldr	r0, [pc, #12]	; (8008ca0 <uart0_init+0x1c>)
 8008c94:	f001 f85a 	bl	8009d4c <gd32_uart_begin>
 8008c98:	b003      	add	sp, #12
 8008c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c9e:	bf00      	nop
 8008ca0:	40013800 	andmi	r3, r1, r0, lsl #16

08008ca4 <uart0_putc>:
 8008ca4:	280a      	cmp	r0, #10
 8008ca6:	b538      	push	{r3, r4, r5, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	d10a      	bne.n	8008cc2 <uart0_putc+0x1e>
 8008cac:	4d0b      	ldr	r5, [pc, #44]	; (8008cdc <uart0_putc+0x38>)
 8008cae:	2107      	movs	r1, #7
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 fd7d 	bl	80097b0 <usart_flag_get>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0f9      	beq.n	8008cae <uart0_putc+0xa>
 8008cba:	220d      	movs	r2, #13
 8008cbc:	4b08      	ldr	r3, [pc, #32]	; (8008ce0 <uart0_putc+0x3c>)
 8008cbe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008cc2:	4d06      	ldr	r5, [pc, #24]	; (8008cdc <uart0_putc+0x38>)
 8008cc4:	2107      	movs	r1, #7
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f000 fd72 	bl	80097b0 <usart_flag_get>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0f9      	beq.n	8008cc4 <uart0_putc+0x20>
 8008cd0:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <uart0_putc+0x3c>)
 8008cd2:	b2e4      	uxtb	r4, r4
 8008cd4:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
 8008cda:	bf00      	nop
 8008cdc:	40013800 	andmi	r3, r1, r0, lsl #16
 8008ce0:	40013000 	andmi	r3, r1, r0

08008ce4 <uart0_puts>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	1e44      	subs	r4, r0, #1
 8008ce8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008cec:	b903      	cbnz	r3, 8008cf0 <uart0_puts+0xc>
 8008cee:	bd10      	pop	{r4, pc}
 8008cf0:	2b0a      	cmp	r3, #10
 8008cf2:	d102      	bne.n	8008cfa <uart0_puts+0x16>
 8008cf4:	200d      	movs	r0, #13
 8008cf6:	f7ff ffd5 	bl	8008ca4 <uart0_putc>
 8008cfa:	7820      	ldrb	r0, [r4, #0]
 8008cfc:	f7ff ffd2 	bl	8008ca4 <uart0_putc>
 8008d00:	e7f2      	b.n	8008ce8 <uart0_puts+0x4>
	...

08008d04 <systick_config>:
 8008d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d08:	4b0b      	ldr	r3, [pc, #44]	; (8008d38 <systick_config+0x34>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d10:	3b01      	subs	r3, #1
 8008d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d16:	d20d      	bcs.n	8008d34 <systick_config+0x30>
 8008d18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008d1c:	21f0      	movs	r1, #240	; 0xf0
 8008d1e:	6153      	str	r3, [r2, #20]
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <systick_config+0x38>)
 8008d22:	2007      	movs	r0, #7
 8008d24:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6191      	str	r1, [r2, #24]
 8008d2c:	6110      	str	r0, [r2, #16]
 8008d2e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8008d32:	4770      	bx	lr
 8008d34:	e7fe      	b.n	8008d34 <systick_config+0x30>
 8008d36:	bf00      	nop
 8008d38:	20000078 	andcs	r0, r0, r8, ror r0
 8008d3c:	e000ed00 	and	lr, r0, r0, lsl #26

08008d40 <SysTick_Handler>:
 8008d40:	4a02      	ldr	r2, [pc, #8]	; (8008d4c <SysTick_Handler+0xc>)
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	200017ac 	andcs	r1, r0, ip, lsr #15

08008d50 <SystemInit>:
 8008d50:	4b30      	ldr	r3, [pc, #192]	; (8008e14 <SystemInit+0xc4>)
 8008d52:	4931      	ldr	r1, [pc, #196]	; (8008e18 <SystemInit+0xc8>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	f042 0201 	orr.w	r2, r2, #1
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	f022 0203 	bic.w	r2, r2, #3
 8008d62:	605a      	str	r2, [r3, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	400a      	ands	r2, r1
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	6858      	ldr	r0, [r3, #4]
 8008d6c:	4a2b      	ldr	r2, [pc, #172]	; (8008e1c <SystemInit+0xcc>)
 8008d6e:	4002      	ands	r2, r0
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	400a      	ands	r2, r1
 8008d76:	601a      	str	r2, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	f022 620f 	bic.w	r2, r2, #149946368	; 0x8f00000
 8008d86:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008d8a:	605a      	str	r2, [r3, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	400a      	ands	r2, r1
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008da4:	6819      	ldr	r1, [r3, #0]
 8008da6:	0389      	lsls	r1, r1, #14
 8008da8:	d401      	bmi.n	8008dae <SystemInit+0x5e>
 8008daa:	3a01      	subs	r2, #1
 8008dac:	d1fa      	bne.n	8008da4 <SystemInit+0x54>
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	0390      	lsls	r0, r2, #14
 8008db2:	d400      	bmi.n	8008db6 <SystemInit+0x66>
 8008db4:	e7fe      	b.n	8008db4 <SystemInit+0x64>
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008dcc:	605a      	str	r2, [r3, #4]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008dd4:	605a      	str	r2, [r3, #4]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 8008ddc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	f042 6202 	orr.w	r2, r2, #136314880	; 0x8200000
 8008de8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	0191      	lsls	r1, r2, #6
 8008dfa:	d5fc      	bpl.n	8008df6 <SystemInit+0xa6>
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	f022 0203 	bic.w	r2, r2, #3
 8008e02:	605a      	str	r2, [r3, #4]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	f042 0202 	orr.w	r2, r2, #2
 8008e0a:	605a      	str	r2, [r3, #4]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	0712      	lsls	r2, r2, #28
 8008e10:	d5fc      	bpl.n	8008e0c <SystemInit+0xbc>
 8008e12:	4770      	bx	lr
 8008e14:	40021000 	andmi	r1, r2, r0
 8008e18:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8008e1c:	e8ff000c 	ldm	pc!, {r2, r3}^	; <UNPREDICTABLE>

08008e20 <bkp_data_write>:
 8008e20:	f1a0 030b 	sub.w	r3, r0, #11
 8008e24:	2b1f      	cmp	r3, #31
 8008e26:	d804      	bhi.n	8008e32 <bkp_data_write+0x12>
 8008e28:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <bkp_data_write+0x28>)
 8008e2a:	4403      	add	r3, r0
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	8019      	strh	r1, [r3, #0]
 8008e30:	4770      	bx	lr
 8008e32:	1e43      	subs	r3, r0, #1
 8008e34:	2b09      	cmp	r3, #9
 8008e36:	bf9f      	itttt	ls
 8008e38:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8008e3c:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008e40:	0080      	lslls	r0, r0, #2
 8008e42:	8001      	strhls	r1, [r0, #0]
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	10001b05 	andne	r1, r0, r5, lsl #22

08008e4c <bkp_data_read>:
 8008e4c:	f1a0 030b 	sub.w	r3, r0, #11
 8008e50:	2b1f      	cmp	r3, #31
 8008e52:	d805      	bhi.n	8008e60 <bkp_data_read+0x14>
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <bkp_data_read+0x2c>)
 8008e56:	4403      	add	r3, r0
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	8818      	ldrh	r0, [r3, #0]
 8008e5c:	b280      	uxth	r0, r0
 8008e5e:	4770      	bx	lr
 8008e60:	1e43      	subs	r3, r0, #1
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	d806      	bhi.n	8008e74 <bkp_data_read+0x28>
 8008e66:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008e6a:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008e6e:	0080      	lsls	r0, r0, #2
 8008e70:	8800      	ldrh	r0, [r0, #0]
 8008e72:	e7f3      	b.n	8008e5c <bkp_data_read+0x10>
 8008e74:	2000      	movs	r0, #0
 8008e76:	4770      	bx	lr
 8008e78:	10001b05 	andne	r1, r0, r5, lsl #22

08008e7c <dma_deinit>:
 8008e7c:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <dma_deinit+0x34>)
 8008e7e:	4298      	cmp	r0, r3
 8008e80:	d102      	bne.n	8008e88 <dma_deinit+0xc>
 8008e82:	2904      	cmp	r1, #4
 8008e84:	d900      	bls.n	8008e88 <dma_deinit+0xc>
 8008e86:	e7fe      	b.n	8008e86 <dma_deinit+0xa>
 8008e88:	2314      	movs	r3, #20
 8008e8a:	fb03 0301 	mla	r3, r3, r1, r0
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	0089      	lsls	r1, r1, #2
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	609a      	str	r2, [r3, #8]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
 8008ea0:	615a      	str	r2, [r3, #20]
 8008ea2:	230f      	movs	r3, #15
 8008ea4:	6842      	ldr	r2, [r0, #4]
 8008ea6:	408b      	lsls	r3, r1
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	6043      	str	r3, [r0, #4]
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40020400 	andmi	r0, r2, r0, lsl #8

08008eb4 <dma_struct_para_init>:
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8008eba:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ec2:	8303      	strh	r3, [r0, #24]
 8008ec4:	7683      	strb	r3, [r0, #26]
 8008ec6:	4770      	bx	lr

08008ec8 <dma_init>:
 8008ec8:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <dma_init+0x70>)
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	4298      	cmp	r0, r3
 8008ece:	d102      	bne.n	8008ed6 <dma_init+0xe>
 8008ed0:	2904      	cmp	r1, #4
 8008ed2:	d900      	bls.n	8008ed6 <dma_init+0xe>
 8008ed4:	e7fe      	b.n	8008ed4 <dma_init+0xc>
 8008ed6:	2314      	movs	r3, #20
 8008ed8:	fb03 0101 	mla	r1, r3, r1, r0
 8008edc:	6813      	ldr	r3, [r2, #0]
 8008ede:	610b      	str	r3, [r1, #16]
 8008ee0:	6893      	ldr	r3, [r2, #8]
 8008ee2:	614b      	str	r3, [r1, #20]
 8008ee4:	8a13      	ldrh	r3, [r2, #16]
 8008ee6:	60cb      	str	r3, [r1, #12]
 8008ee8:	68d4      	ldr	r4, [r2, #12]
 8008eea:	6853      	ldr	r3, [r2, #4]
 8008eec:	6888      	ldr	r0, [r1, #8]
 8008eee:	4323      	orrs	r3, r4
 8008ef0:	6954      	ldr	r4, [r2, #20]
 8008ef2:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008ef6:	4323      	orrs	r3, r4
 8008ef8:	4303      	orrs	r3, r0
 8008efa:	608b      	str	r3, [r1, #8]
 8008efc:	7e13      	ldrb	r3, [r2, #24]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	688b      	ldr	r3, [r1, #8]
 8008f02:	bf0c      	ite	eq
 8008f04:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008f08:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008f0c:	608b      	str	r3, [r1, #8]
 8008f0e:	7e53      	ldrb	r3, [r2, #25]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	688b      	ldr	r3, [r1, #8]
 8008f14:	bf0c      	ite	eq
 8008f16:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008f1a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008f1e:	608b      	str	r3, [r1, #8]
 8008f20:	7e93      	ldrb	r3, [r2, #26]
 8008f22:	b923      	cbnz	r3, 8008f2e <dma_init+0x66>
 8008f24:	688b      	ldr	r3, [r1, #8]
 8008f26:	f023 0310 	bic.w	r3, r3, #16
 8008f2a:	608b      	str	r3, [r1, #8]
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	688b      	ldr	r3, [r1, #8]
 8008f30:	f043 0310 	orr.w	r3, r3, #16
 8008f34:	e7f9      	b.n	8008f2a <dma_init+0x62>
 8008f36:	bf00      	nop
 8008f38:	40020400 	andmi	r0, r2, r0, lsl #8

08008f3c <dma_circulation_disable>:
 8008f3c:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <dma_circulation_disable+0x1c>)
 8008f3e:	4298      	cmp	r0, r3
 8008f40:	d102      	bne.n	8008f48 <dma_circulation_disable+0xc>
 8008f42:	2904      	cmp	r1, #4
 8008f44:	d900      	bls.n	8008f48 <dma_circulation_disable+0xc>
 8008f46:	e7fe      	b.n	8008f46 <dma_circulation_disable+0xa>
 8008f48:	2314      	movs	r3, #20
 8008f4a:	4359      	muls	r1, r3
 8008f4c:	3008      	adds	r0, #8
 8008f4e:	580b      	ldr	r3, [r1, r0]
 8008f50:	f023 0320 	bic.w	r3, r3, #32
 8008f54:	500b      	str	r3, [r1, r0]
 8008f56:	4770      	bx	lr
 8008f58:	40020400 	andmi	r0, r2, r0, lsl #8

08008f5c <dma_memory_to_memory_disable>:
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <dma_memory_to_memory_disable+0x1c>)
 8008f5e:	4298      	cmp	r0, r3
 8008f60:	d102      	bne.n	8008f68 <dma_memory_to_memory_disable+0xc>
 8008f62:	2904      	cmp	r1, #4
 8008f64:	d900      	bls.n	8008f68 <dma_memory_to_memory_disable+0xc>
 8008f66:	e7fe      	b.n	8008f66 <dma_memory_to_memory_disable+0xa>
 8008f68:	2314      	movs	r3, #20
 8008f6a:	4359      	muls	r1, r3
 8008f6c:	3008      	adds	r0, #8
 8008f6e:	580b      	ldr	r3, [r1, r0]
 8008f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f74:	500b      	str	r3, [r1, r0]
 8008f76:	4770      	bx	lr
 8008f78:	40020400 	andmi	r0, r2, r0, lsl #8

08008f7c <fmc_bank0_unlock>:
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <fmc_bank0_unlock+0x14>)
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	0612      	lsls	r2, r2, #24
 8008f82:	bf41      	itttt	mi
 8008f84:	4a03      	ldrmi	r2, [pc, #12]	; (8008f94 <fmc_bank0_unlock+0x18>)
 8008f86:	605a      	strmi	r2, [r3, #4]
 8008f88:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008f8c:	605a      	strmi	r2, [r3, #4]
 8008f8e:	4770      	bx	lr
 8008f90:	40022000 	andmi	r2, r2, r0
 8008f94:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008f98 <fmc_bank1_unlock>:
 8008f98:	4b04      	ldr	r3, [pc, #16]	; (8008fac <fmc_bank1_unlock+0x14>)
 8008f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f9c:	0612      	lsls	r2, r2, #24
 8008f9e:	bf41      	itttt	mi
 8008fa0:	4a03      	ldrmi	r2, [pc, #12]	; (8008fb0 <fmc_bank1_unlock+0x18>)
 8008fa2:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008fa4:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008fa8:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008faa:	4770      	bx	lr
 8008fac:	40022000 	andmi	r2, r2, r0
 8008fb0:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008fb4 <fmc_bank0_lock>:
 8008fb4:	4a02      	ldr	r2, [pc, #8]	; (8008fc0 <fmc_bank0_lock+0xc>)
 8008fb6:	6913      	ldr	r3, [r2, #16]
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	6113      	str	r3, [r2, #16]
 8008fbe:	4770      	bx	lr
 8008fc0:	40022000 	andmi	r2, r2, r0

08008fc4 <fmc_bank1_lock>:
 8008fc4:	4a02      	ldr	r2, [pc, #8]	; (8008fd0 <fmc_bank1_lock+0xc>)
 8008fc6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fcc:	6513      	str	r3, [r2, #80]	; 0x50
 8008fce:	4770      	bx	lr
 8008fd0:	40022000 	andmi	r2, r2, r0

08008fd4 <fmc_bank0_state_get>:
 8008fd4:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <fmc_bank0_state_get+0x20>)
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	07d1      	lsls	r1, r2, #31
 8008fda:	d407      	bmi.n	8008fec <fmc_bank0_state_get+0x18>
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	06d2      	lsls	r2, r2, #27
 8008fe0:	d406      	bmi.n	8008ff0 <fmc_bank0_state_get+0x1c>
 8008fe2:	68d8      	ldr	r0, [r3, #12]
 8008fe4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008fe8:	0040      	lsls	r0, r0, #1
 8008fea:	4770      	bx	lr
 8008fec:	2001      	movs	r0, #1
 8008fee:	4770      	bx	lr
 8008ff0:	2003      	movs	r0, #3
 8008ff2:	4770      	bx	lr
 8008ff4:	40022000 	andmi	r2, r2, r0

08008ff8 <fmc_bank1_state_get>:
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <fmc_bank1_state_get+0x20>)
 8008ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ffc:	07d1      	lsls	r1, r2, #31
 8008ffe:	d407      	bmi.n	8009010 <fmc_bank1_state_get+0x18>
 8009000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009002:	06d2      	lsls	r2, r2, #27
 8009004:	d406      	bmi.n	8009014 <fmc_bank1_state_get+0x1c>
 8009006:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009008:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800900c:	0040      	lsls	r0, r0, #1
 800900e:	4770      	bx	lr
 8009010:	2001      	movs	r0, #1
 8009012:	4770      	bx	lr
 8009014:	2003      	movs	r0, #3
 8009016:	4770      	bx	lr
 8009018:	40022000 	andmi	r2, r2, r0

0800901c <fwdgt_enable>:
 800901c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <fwdgt_enable+0xc>)
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40003000 	andmi	r3, r0, r0

0800902c <fwdgt_counter_reload>:
 800902c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009030:	4b01      	ldr	r3, [pc, #4]	; (8009038 <fwdgt_counter_reload+0xc>)
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40003000 	andmi	r3, r0, r0

0800903c <fwdgt_config>:
 800903c:	f245 5355 	movw	r3, #21845	; 0x5555
 8009040:	4a11      	ldr	r2, [pc, #68]	; (8009088 <fwdgt_config+0x4c>)
 8009042:	b510      	push	{r4, lr}
 8009044:	4c11      	ldr	r4, [pc, #68]	; (800908c <fwdgt_config+0x50>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	68d3      	ldr	r3, [r2, #12]
 800904a:	3c01      	subs	r4, #1
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	d013      	beq.n	800907a <fwdgt_config+0x3e>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1f8      	bne.n	8009048 <fwdgt_config+0xc>
 8009056:	6051      	str	r1, [r2, #4]
 8009058:	490c      	ldr	r1, [pc, #48]	; (800908c <fwdgt_config+0x50>)
 800905a:	4a0b      	ldr	r2, [pc, #44]	; (8009088 <fwdgt_config+0x4c>)
 800905c:	68d3      	ldr	r3, [r2, #12]
 800905e:	3901      	subs	r1, #1
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	d00d      	beq.n	8009082 <fwdgt_config+0x46>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f8      	bne.n	800905c <fwdgt_config+0x20>
 800906a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800906e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009072:	6090      	str	r0, [r2, #8]
 8009074:	2001      	movs	r0, #1
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	e002      	b.n	8009080 <fwdgt_config+0x44>
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0eb      	beq.n	8009056 <fwdgt_config+0x1a>
 800907e:	2000      	movs	r0, #0
 8009080:	bd10      	pop	{r4, pc}
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1fb      	bne.n	800907e <fwdgt_config+0x42>
 8009086:	e7f0      	b.n	800906a <fwdgt_config+0x2e>
 8009088:	40003000 	andmi	r3, r0, r0
 800908c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08009090 <gpio_init>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	f04f 0c0f 	mov.w	ip, #15
 8009098:	06cf      	lsls	r7, r1, #27
 800909a:	f04f 0400 	mov.w	r4, #0
 800909e:	f04f 0701 	mov.w	r7, #1
 80090a2:	f001 050f 	and.w	r5, r1, #15
 80090a6:	bf48      	it	mi
 80090a8:	4315      	orrmi	r5, r2
 80090aa:	fa23 f204 	lsr.w	r2, r3, r4
 80090ae:	07d6      	lsls	r6, r2, #31
 80090b0:	d510      	bpl.n	80090d4 <gpio_init+0x44>
 80090b2:	00a2      	lsls	r2, r4, #2
 80090b4:	6806      	ldr	r6, [r0, #0]
 80090b6:	fa0c fe02 	lsl.w	lr, ip, r2
 80090ba:	ea26 060e 	bic.w	r6, r6, lr
 80090be:	fa05 f202 	lsl.w	r2, r5, r2
 80090c2:	2928      	cmp	r1, #40	; 0x28
 80090c4:	ea42 0206 	orr.w	r2, r2, r6
 80090c8:	d128      	bne.n	800911c <gpio_init+0x8c>
 80090ca:	fa07 f604 	lsl.w	r6, r7, r4
 80090ce:	401e      	ands	r6, r3
 80090d0:	6146      	str	r6, [r0, #20]
 80090d2:	6002      	str	r2, [r0, #0]
 80090d4:	3401      	adds	r4, #1
 80090d6:	2c08      	cmp	r4, #8
 80090d8:	d1e7      	bne.n	80090aa <gpio_init+0x1a>
 80090da:	2600      	movs	r6, #0
 80090dc:	f04f 0c0f 	mov.w	ip, #15
 80090e0:	2701      	movs	r7, #1
 80090e2:	f106 0208 	add.w	r2, r6, #8
 80090e6:	fa23 f402 	lsr.w	r4, r3, r2
 80090ea:	07e4      	lsls	r4, r4, #31
 80090ec:	d511      	bpl.n	8009112 <gpio_init+0x82>
 80090ee:	00b4      	lsls	r4, r6, #2
 80090f0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80090f4:	fa0c f804 	lsl.w	r8, ip, r4
 80090f8:	ea2e 0e08 	bic.w	lr, lr, r8
 80090fc:	fa05 f404 	lsl.w	r4, r5, r4
 8009100:	2928      	cmp	r1, #40	; 0x28
 8009102:	ea44 040e 	orr.w	r4, r4, lr
 8009106:	d110      	bne.n	800912a <gpio_init+0x9a>
 8009108:	fa07 f202 	lsl.w	r2, r7, r2
 800910c:	401a      	ands	r2, r3
 800910e:	6142      	str	r2, [r0, #20]
 8009110:	6044      	str	r4, [r0, #4]
 8009112:	3601      	adds	r6, #1
 8009114:	2e08      	cmp	r6, #8
 8009116:	d1e4      	bne.n	80090e2 <gpio_init+0x52>
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911c:	2948      	cmp	r1, #72	; 0x48
 800911e:	bf02      	ittt	eq
 8009120:	fa07 f604 	lsleq.w	r6, r7, r4
 8009124:	401e      	andeq	r6, r3
 8009126:	6106      	streq	r6, [r0, #16]
 8009128:	e7d3      	b.n	80090d2 <gpio_init+0x42>
 800912a:	2948      	cmp	r1, #72	; 0x48
 800912c:	bf02      	ittt	eq
 800912e:	fa07 f202 	lsleq.w	r2, r7, r2
 8009132:	401a      	andeq	r2, r3
 8009134:	6102      	streq	r2, [r0, #16]
 8009136:	e7eb      	b.n	8009110 <gpio_init+0x80>

08009138 <gpio_input_bit_get>:
 8009138:	6883      	ldr	r3, [r0, #8]
 800913a:	420b      	tst	r3, r1
 800913c:	bf14      	ite	ne
 800913e:	2001      	movne	r0, #1
 8009140:	2000      	moveq	r0, #0
 8009142:	4770      	bx	lr

08009144 <gpio_pin_remap_config>:
 8009144:	2800      	cmp	r0, #0
 8009146:	4a16      	ldr	r2, [pc, #88]	; (80091a0 <gpio_pin_remap_config+0x5c>)
 8009148:	b530      	push	{r4, r5, lr}
 800914a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 800914e:	bfb4      	ite	lt
 8009150:	69d3      	ldrlt	r3, [r2, #28]
 8009152:	6853      	ldrge	r3, [r2, #4]
 8009154:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8009158:	b284      	uxth	r4, r0
 800915a:	d110      	bne.n	800917e <gpio_pin_remap_config+0x3a>
 800915c:	6855      	ldr	r5, [r2, #4]
 800915e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009162:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8009166:	6055      	str	r5, [r2, #4]
 8009168:	b119      	cbz	r1, 8009172 <gpio_pin_remap_config+0x2e>
 800916a:	0d42      	lsrs	r2, r0, #21
 800916c:	0112      	lsls	r2, r2, #4
 800916e:	4094      	lsls	r4, r2
 8009170:	4323      	orrs	r3, r4
 8009172:	4a0b      	ldr	r2, [pc, #44]	; (80091a0 <gpio_pin_remap_config+0x5c>)
 8009174:	2800      	cmp	r0, #0
 8009176:	bfb4      	ite	lt
 8009178:	61d3      	strlt	r3, [r2, #28]
 800917a:	6053      	strge	r3, [r2, #4]
 800917c:	bd30      	pop	{r4, r5, pc}
 800917e:	02c2      	lsls	r2, r0, #11
 8009180:	bf4d      	iteet	mi
 8009182:	2203      	movmi	r2, #3
 8009184:	0d42      	lsrpl	r2, r0, #21
 8009186:	0112      	lslpl	r2, r2, #4
 8009188:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 800918c:	bf4c      	ite	mi
 800918e:	40aa      	lslmi	r2, r5
 8009190:	fa04 f202 	lslpl.w	r2, r4, r2
 8009194:	ea23 0302 	bic.w	r3, r3, r2
 8009198:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800919c:	e7e4      	b.n	8009168 <gpio_pin_remap_config+0x24>
 800919e:	bf00      	nop
 80091a0:	40010000 	andmi	r0, r1, r0

080091a4 <pmu_backup_write_enable>:
 80091a4:	4a02      	ldr	r2, [pc, #8]	; (80091b0 <pmu_backup_write_enable+0xc>)
 80091a6:	6813      	ldr	r3, [r2, #0]
 80091a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	4770      	bx	lr
 80091b0:	40007000 	andmi	r7, r0, r0

080091b4 <rcu_periph_clock_enable>:
 80091b4:	2201      	movs	r2, #1
 80091b6:	0983      	lsrs	r3, r0, #6
 80091b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	f000 001f 	and.w	r0, r0, #31
 80091c6:	4082      	lsls	r2, r0
 80091c8:	430a      	orrs	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	4770      	bx	lr

080091ce <rcu_periph_clock_disable>:
 80091ce:	2101      	movs	r1, #1
 80091d0:	0983      	lsrs	r3, r0, #6
 80091d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f000 001f 	and.w	r0, r0, #31
 80091e0:	4081      	lsls	r1, r0
 80091e2:	ea22 0201 	bic.w	r2, r2, r1
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	4770      	bx	lr

080091ea <rcu_periph_reset_enable>:
 80091ea:	f7ff bfe3 	b.w	80091b4 <rcu_periph_clock_enable>

080091ee <rcu_periph_reset_disable>:
 80091ee:	f7ff bfee 	b.w	80091ce <rcu_periph_clock_disable>
	...

080091f4 <rcu_adc_clock_config>:
 80091f4:	490c      	ldr	r1, [pc, #48]	; (8009228 <rcu_adc_clock_config+0x34>)
 80091f6:	2805      	cmp	r0, #5
 80091f8:	684b      	ldr	r3, [r1, #4]
 80091fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009202:	d006      	beq.n	8009212 <rcu_adc_clock_config+0x1e>
 8009204:	d803      	bhi.n	800920e <rcu_adc_clock_config+0x1a>
 8009206:	2804      	cmp	r0, #4
 8009208:	d10a      	bne.n	8009220 <rcu_adc_clock_config+0x2c>
 800920a:	604b      	str	r3, [r1, #4]
 800920c:	4770      	bx	lr
 800920e:	2807      	cmp	r0, #7
 8009210:	d1fb      	bne.n	800920a <rcu_adc_clock_config+0x16>
 8009212:	4a06      	ldr	r2, [pc, #24]	; (800922c <rcu_adc_clock_config+0x38>)
 8009214:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8009218:	4313      	orrs	r3, r2
 800921a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800921e:	e7f4      	b.n	800920a <rcu_adc_clock_config+0x16>
 8009220:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8009224:	e7f1      	b.n	800920a <rcu_adc_clock_config+0x16>
 8009226:	bf00      	nop
 8009228:	40021000 	andmi	r1, r2, r0
 800922c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08009230 <rcu_rtc_clock_config>:
 8009230:	4a03      	ldr	r2, [pc, #12]	; (8009240 <rcu_rtc_clock_config+0x10>)
 8009232:	6a13      	ldr	r3, [r2, #32]
 8009234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009238:	4303      	orrs	r3, r0
 800923a:	6213      	str	r3, [r2, #32]
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	40021000 	andmi	r1, r2, r0

08009244 <rcu_flag_get>:
 8009244:	0983      	lsrs	r3, r0, #6
 8009246:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800924a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	2301      	movs	r3, #1
 8009252:	f000 001f 	and.w	r0, r0, #31
 8009256:	4083      	lsls	r3, r0
 8009258:	4213      	tst	r3, r2
 800925a:	bf14      	ite	ne
 800925c:	2001      	movne	r0, #1
 800925e:	2000      	moveq	r0, #0
 8009260:	4770      	bx	lr
	...

08009264 <rcu_osci_stab_wait>:
 8009264:	2818      	cmp	r0, #24
 8009266:	b508      	push	{r3, lr}
 8009268:	d03b      	beq.n	80092e2 <rcu_osci_stab_wait+0x7e>
 800926a:	d804      	bhi.n	8009276 <rcu_osci_stab_wait+0x12>
 800926c:	b378      	cbz	r0, 80092ce <rcu_osci_stab_wait+0x6a>
 800926e:	2810      	cmp	r0, #16
 8009270:	d012      	beq.n	8009298 <rcu_osci_stab_wait+0x34>
 8009272:	2000      	movs	r0, #0
 8009274:	bd08      	pop	{r3, pc}
 8009276:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800927a:	d01c      	beq.n	80092b6 <rcu_osci_stab_wait+0x52>
 800927c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8009280:	d1f7      	bne.n	8009272 <rcu_osci_stab_wait+0xe>
 8009282:	491c      	ldr	r1, [pc, #112]	; (80092f4 <rcu_osci_stab_wait+0x90>)
 8009284:	f640 1001 	movw	r0, #2305	; 0x901
 8009288:	f7ff ffdc 	bl	8009244 <rcu_flag_get>
 800928c:	b908      	cbnz	r0, 8009292 <rcu_osci_stab_wait+0x2e>
 800928e:	3901      	subs	r1, #1
 8009290:	d1f8      	bne.n	8009284 <rcu_osci_stab_wait+0x20>
 8009292:	f640 1001 	movw	r0, #2305	; 0x901
 8009296:	e008      	b.n	80092aa <rcu_osci_stab_wait+0x46>
 8009298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800929c:	2011      	movs	r0, #17
 800929e:	f7ff ffd1 	bl	8009244 <rcu_flag_get>
 80092a2:	b908      	cbnz	r0, 80092a8 <rcu_osci_stab_wait+0x44>
 80092a4:	3901      	subs	r1, #1
 80092a6:	d1f9      	bne.n	800929c <rcu_osci_stab_wait+0x38>
 80092a8:	2011      	movs	r0, #17
 80092aa:	f7ff ffcb 	bl	8009244 <rcu_flag_get>
 80092ae:	3800      	subs	r0, #0
 80092b0:	bf18      	it	ne
 80092b2:	2001      	movne	r0, #1
 80092b4:	e7de      	b.n	8009274 <rcu_osci_stab_wait+0x10>
 80092b6:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 80092ba:	f640 0001 	movw	r0, #2049	; 0x801
 80092be:	f7ff ffc1 	bl	8009244 <rcu_flag_get>
 80092c2:	b908      	cbnz	r0, 80092c8 <rcu_osci_stab_wait+0x64>
 80092c4:	3901      	subs	r1, #1
 80092c6:	d1f8      	bne.n	80092ba <rcu_osci_stab_wait+0x56>
 80092c8:	f640 0001 	movw	r0, #2049	; 0x801
 80092cc:	e7ed      	b.n	80092aa <rcu_osci_stab_wait+0x46>
 80092ce:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7ff ffb6 	bl	8009244 <rcu_flag_get>
 80092d8:	b908      	cbnz	r0, 80092de <rcu_osci_stab_wait+0x7a>
 80092da:	3901      	subs	r1, #1
 80092dc:	d1f9      	bne.n	80092d2 <rcu_osci_stab_wait+0x6e>
 80092de:	2001      	movs	r0, #1
 80092e0:	e7e3      	b.n	80092aa <rcu_osci_stab_wait+0x46>
 80092e2:	4904      	ldr	r1, [pc, #16]	; (80092f4 <rcu_osci_stab_wait+0x90>)
 80092e4:	2019      	movs	r0, #25
 80092e6:	f7ff ffad 	bl	8009244 <rcu_flag_get>
 80092ea:	b908      	cbnz	r0, 80092f0 <rcu_osci_stab_wait+0x8c>
 80092ec:	3901      	subs	r1, #1
 80092ee:	d1f9      	bne.n	80092e4 <rcu_osci_stab_wait+0x80>
 80092f0:	2019      	movs	r0, #25
 80092f2:	e7da      	b.n	80092aa <rcu_osci_stab_wait+0x46>
 80092f4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080092f8 <rcu_osci_on>:
 80092f8:	f7ff bf5c 	b.w	80091b4 <rcu_periph_clock_enable>

080092fc <rcu_clock_freq_get>:
 80092fc:	4b2f      	ldr	r3, [pc, #188]	; (80093bc <rcu_clock_freq_get+0xc0>)
 80092fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	461f      	mov	r7, r3
 8009304:	b089      	sub	sp, #36	; 0x24
 8009306:	ad04      	add	r5, sp, #16
 8009308:	f103 0610 	add.w	r6, r3, #16
 800930c:	462a      	mov	r2, r5
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	6859      	ldr	r1, [r3, #4]
 8009312:	3308      	adds	r3, #8
 8009314:	c203      	stmia	r2!, {r0, r1}
 8009316:	42b3      	cmp	r3, r6
 8009318:	4615      	mov	r5, r2
 800931a:	d1f7      	bne.n	800930c <rcu_clock_freq_get+0x10>
 800931c:	466b      	mov	r3, sp
 800931e:	6938      	ldr	r0, [r7, #16]
 8009320:	6871      	ldr	r1, [r6, #4]
 8009322:	4a27      	ldr	r2, [pc, #156]	; (80093c0 <rcu_clock_freq_get+0xc4>)
 8009324:	c303      	stmia	r3!, {r0, r1}
 8009326:	c303      	stmia	r3!, {r0, r1}
 8009328:	6853      	ldr	r3, [r2, #4]
 800932a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800932e:	2b02      	cmp	r3, #2
 8009330:	d137      	bne.n	80093a2 <rcu_clock_freq_get+0xa6>
 8009332:	6853      	ldr	r3, [r2, #4]
 8009334:	03dd      	lsls	r5, r3, #15
 8009336:	d510      	bpl.n	800935a <rcu_clock_freq_get+0x5e>
 8009338:	6853      	ldr	r3, [r2, #4]
 800933a:	4922      	ldr	r1, [pc, #136]	; (80093c4 <rcu_clock_freq_get+0xc8>)
 800933c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009340:	4b21      	ldr	r3, [pc, #132]	; (80093c8 <rcu_clock_freq_get+0xcc>)
 8009342:	bf08      	it	eq
 8009344:	4619      	moveq	r1, r3
 8009346:	6853      	ldr	r3, [r2, #4]
 8009348:	6850      	ldr	r0, [r2, #4]
 800934a:	f3c3 4383 	ubfx	r3, r3, #18, #4
 800934e:	0100      	lsls	r0, r0, #4
 8009350:	d505      	bpl.n	800935e <rcu_clock_freq_get+0x62>
 8009352:	f043 0310 	orr.w	r3, r3, #16
 8009356:	3301      	adds	r3, #1
 8009358:	e004      	b.n	8009364 <rcu_clock_freq_get+0x68>
 800935a:	491a      	ldr	r1, [pc, #104]	; (80093c4 <rcu_clock_freq_get+0xc8>)
 800935c:	e7f3      	b.n	8009346 <rcu_clock_freq_get+0x4a>
 800935e:	2b0f      	cmp	r3, #15
 8009360:	d0f9      	beq.n	8009356 <rcu_clock_freq_get+0x5a>
 8009362:	3302      	adds	r3, #2
 8009364:	fb01 f003 	mul.w	r0, r1, r3
 8009368:	6853      	ldr	r3, [r2, #4]
 800936a:	6851      	ldr	r1, [r2, #4]
 800936c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009370:	6852      	ldr	r2, [r2, #4]
 8009372:	3320      	adds	r3, #32
 8009374:	446b      	add	r3, sp
 8009376:	f3c1 2102 	ubfx	r1, r1, #8, #3
 800937a:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 800937e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009382:	3120      	adds	r1, #32
 8009384:	3220      	adds	r2, #32
 8009386:	4469      	add	r1, sp
 8009388:	446a      	add	r2, sp
 800938a:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 800938e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8009392:	fa20 f303 	lsr.w	r3, r0, r3
 8009396:	2c03      	cmp	r4, #3
 8009398:	d80e      	bhi.n	80093b8 <rcu_clock_freq_get+0xbc>
 800939a:	e8df f004 	tbb	[pc, r4]
 800939e:	0a070405 	beq	81ca3ba <__exidx_end+0x1bdfba>
 80093a2:	4809      	ldr	r0, [pc, #36]	; (80093c8 <rcu_clock_freq_get+0xcc>)
 80093a4:	e7e0      	b.n	8009368 <rcu_clock_freq_get+0x6c>
 80093a6:	4618      	mov	r0, r3
 80093a8:	b009      	add	sp, #36	; 0x24
 80093aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ac:	fa23 f001 	lsr.w	r0, r3, r1
 80093b0:	e7fa      	b.n	80093a8 <rcu_clock_freq_get+0xac>
 80093b2:	fa23 f002 	lsr.w	r0, r3, r2
 80093b6:	e7f7      	b.n	80093a8 <rcu_clock_freq_get+0xac>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7f5      	b.n	80093a8 <rcu_clock_freq_get+0xac>
 80093bc:	0800a35d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sp, pc}
 80093c0:	40021000 	andmi	r1, r2, r0
 80093c4:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80093c8:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080093cc <rtc_configuration_mode_enter>:
 80093cc:	4a03      	ldr	r2, [pc, #12]	; (80093dc <rtc_configuration_mode_enter+0x10>)
 80093ce:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80093d2:	f043 0310 	orr.w	r3, r3, #16
 80093d6:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 80093da:	4770      	bx	lr
 80093dc:	40002000 	andmi	r2, r0, r0

080093e0 <rtc_configuration_mode_exit>:
 80093e0:	4a03      	ldr	r2, [pc, #12]	; (80093f0 <rtc_configuration_mode_exit+0x10>)
 80093e2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80093e6:	f023 0310 	bic.w	r3, r3, #16
 80093ea:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 80093ee:	4770      	bx	lr
 80093f0:	40002000 	andmi	r2, r0, r0

080093f4 <rtc_counter_set>:
 80093f4:	b508      	push	{r3, lr}
 80093f6:	f7ff ffe9 	bl	80093cc <rtc_configuration_mode_enter>
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <rtc_counter_set+0x1c>)
 80093fc:	0c02      	lsrs	r2, r0, #16
 80093fe:	b280      	uxth	r0, r0
 8009400:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009404:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8009408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800940c:	f7ff bfe8 	b.w	80093e0 <rtc_configuration_mode_exit>
 8009410:	40002000 	andmi	r2, r0, r0

08009414 <rtc_prescaler_set>:
 8009414:	b508      	push	{r3, lr}
 8009416:	f7ff ffd9 	bl	80093cc <rtc_configuration_mode_enter>
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <rtc_prescaler_set+0x20>)
 800941c:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8009420:	b280      	uxth	r0, r0
 8009422:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8009426:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 800942a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800942e:	f7ff bfd7 	b.w	80093e0 <rtc_configuration_mode_exit>
 8009432:	bf00      	nop
 8009434:	40002000 	andmi	r2, r0, r0

08009438 <rtc_lwoff_wait>:
 8009438:	4a02      	ldr	r2, [pc, #8]	; (8009444 <rtc_lwoff_wait+0xc>)
 800943a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800943e:	069b      	lsls	r3, r3, #26
 8009440:	d5fb      	bpl.n	800943a <rtc_lwoff_wait+0x2>
 8009442:	4770      	bx	lr
 8009444:	40002000 	andmi	r2, r0, r0

08009448 <rtc_register_sync_wait>:
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <rtc_register_sync_wait+0x18>)
 800944a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800944e:	f022 0208 	bic.w	r2, r2, #8
 8009452:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8009456:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 800945a:	0712      	lsls	r2, r2, #28
 800945c:	d5fb      	bpl.n	8009456 <rtc_register_sync_wait+0xe>
 800945e:	4770      	bx	lr
 8009460:	40002000 	andmi	r2, r0, r0

08009464 <rtc_counter_get>:
 8009464:	4b03      	ldr	r3, [pc, #12]	; (8009474 <rtc_counter_get+0x10>)
 8009466:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800946a:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 800946e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8009472:	4770      	bx	lr
 8009474:	40002000 	andmi	r2, r0, r0

08009478 <timer_deinit>:
 8009478:	b508      	push	{r3, lr}
 800947a:	4b2d      	ldr	r3, [pc, #180]	; (8009530 <timer_deinit+0xb8>)
 800947c:	4298      	cmp	r0, r3
 800947e:	d048      	beq.n	8009512 <timer_deinit+0x9a>
 8009480:	d816      	bhi.n	80094b0 <timer_deinit+0x38>
 8009482:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009486:	4298      	cmp	r0, r3
 8009488:	d03c      	beq.n	8009504 <timer_deinit+0x8c>
 800948a:	d807      	bhi.n	800949c <timer_deinit+0x24>
 800948c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009490:	d02a      	beq.n	80094e8 <timer_deinit+0x70>
 8009492:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009496:	4298      	cmp	r0, r3
 8009498:	d02d      	beq.n	80094f6 <timer_deinit+0x7e>
 800949a:	bd08      	pop	{r3, pc}
 800949c:	4b25      	ldr	r3, [pc, #148]	; (8009534 <timer_deinit+0xbc>)
 800949e:	4298      	cmp	r0, r3
 80094a0:	d1fb      	bne.n	800949a <timer_deinit+0x22>
 80094a2:	f240 4003 	movw	r0, #1027	; 0x403
 80094a6:	f7ff fea0 	bl	80091ea <rcu_periph_reset_enable>
 80094aa:	f240 4003 	movw	r0, #1027	; 0x403
 80094ae:	e017      	b.n	80094e0 <timer_deinit+0x68>
 80094b0:	4b21      	ldr	r3, [pc, #132]	; (8009538 <timer_deinit+0xc0>)
 80094b2:	4298      	cmp	r0, r3
 80094b4:	d00e      	beq.n	80094d4 <timer_deinit+0x5c>
 80094b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ba:	4298      	cmp	r0, r3
 80094bc:	d030      	beq.n	8009520 <timer_deinit+0xa8>
 80094be:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 80094c2:	4298      	cmp	r0, r3
 80094c4:	d1e9      	bne.n	800949a <timer_deinit+0x22>
 80094c6:	f240 4005 	movw	r0, #1029	; 0x405
 80094ca:	f7ff fe8e 	bl	80091ea <rcu_periph_reset_enable>
 80094ce:	f240 4005 	movw	r0, #1029	; 0x405
 80094d2:	e005      	b.n	80094e0 <timer_deinit+0x68>
 80094d4:	f240 300b 	movw	r0, #779	; 0x30b
 80094d8:	f7ff fe87 	bl	80091ea <rcu_periph_reset_enable>
 80094dc:	f240 300b 	movw	r0, #779	; 0x30b
 80094e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094e4:	f7ff be83 	b.w	80091ee <rcu_periph_reset_disable>
 80094e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80094ec:	f7ff fe7d 	bl	80091ea <rcu_periph_reset_enable>
 80094f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80094f4:	e7f4      	b.n	80094e0 <timer_deinit+0x68>
 80094f6:	f240 4001 	movw	r0, #1025	; 0x401
 80094fa:	f7ff fe76 	bl	80091ea <rcu_periph_reset_enable>
 80094fe:	f240 4001 	movw	r0, #1025	; 0x401
 8009502:	e7ed      	b.n	80094e0 <timer_deinit+0x68>
 8009504:	f240 4002 	movw	r0, #1026	; 0x402
 8009508:	f7ff fe6f 	bl	80091ea <rcu_periph_reset_enable>
 800950c:	f240 4002 	movw	r0, #1026	; 0x402
 8009510:	e7e6      	b.n	80094e0 <timer_deinit+0x68>
 8009512:	f240 4004 	movw	r0, #1028	; 0x404
 8009516:	f7ff fe68 	bl	80091ea <rcu_periph_reset_enable>
 800951a:	f240 4004 	movw	r0, #1028	; 0x404
 800951e:	e7df      	b.n	80094e0 <timer_deinit+0x68>
 8009520:	f240 300d 	movw	r0, #781	; 0x30d
 8009524:	f7ff fe61 	bl	80091ea <rcu_periph_reset_enable>
 8009528:	f240 300d 	movw	r0, #781	; 0x30d
 800952c:	e7d8      	b.n	80094e0 <timer_deinit+0x68>
 800952e:	bf00      	nop
 8009530:	40001000 	andmi	r1, r0, r0
 8009534:	40000c00 	andmi	r0, r0, r0, lsl #24
 8009538:	40012c00 	andmi	r2, r1, r0, lsl #24

0800953c <timer_init>:
 800953c:	880b      	ldrh	r3, [r1, #0]
 800953e:	6283      	str	r3, [r0, #40]	; 0x28
 8009540:	4b26      	ldr	r3, [pc, #152]	; (80095dc <timer_init+0xa0>)
 8009542:	4298      	cmp	r0, r3
 8009544:	d018      	beq.n	8009578 <timer_init+0x3c>
 8009546:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 800954a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800954e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8009552:	d011      	beq.n	8009578 <timer_init+0x3c>
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <timer_init+0xa4>)
 8009556:	4290      	cmp	r0, r2
 8009558:	d00e      	beq.n	8009578 <timer_init+0x3c>
 800955a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800955e:	4290      	cmp	r0, r2
 8009560:	d00a      	beq.n	8009578 <timer_init+0x3c>
 8009562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009566:	4293      	cmp	r3, r2
 8009568:	d006      	beq.n	8009578 <timer_init+0x3c>
 800956a:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 800956e:	4293      	cmp	r3, r2
 8009570:	d002      	beq.n	8009578 <timer_init+0x3c>
 8009572:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <timer_init+0xa8>)
 8009574:	4298      	cmp	r0, r3
 8009576:	d10f      	bne.n	8009598 <timer_init+0x5c>
 8009578:	6803      	ldr	r3, [r0, #0]
 800957a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	884b      	ldrh	r3, [r1, #2]
 8009582:	6802      	ldr	r2, [r0, #0]
 8009584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009588:	4313      	orrs	r3, r2
 800958a:	6003      	str	r3, [r0, #0]
 800958c:	888b      	ldrh	r3, [r1, #4]
 800958e:	6802      	ldr	r2, [r0, #0]
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	4313      	orrs	r3, r2
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	688b      	ldr	r3, [r1, #8]
 800959a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <timer_init+0xac>)
 800959e:	4298      	cmp	r0, r3
 80095a0:	d003      	beq.n	80095aa <timer_init+0x6e>
 80095a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095a6:	4298      	cmp	r0, r3
 80095a8:	d104      	bne.n	80095b4 <timer_init+0x78>
 80095aa:	6943      	ldr	r3, [r0, #20]
 80095ac:	f043 0301 	orr.w	r3, r3, #1
 80095b0:	6143      	str	r3, [r0, #20]
 80095b2:	4770      	bx	lr
 80095b4:	6803      	ldr	r3, [r0, #0]
 80095b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ba:	6003      	str	r3, [r0, #0]
 80095bc:	898b      	ldrh	r3, [r1, #12]
 80095be:	6802      	ldr	r2, [r0, #0]
 80095c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095c4:	4313      	orrs	r3, r2
 80095c6:	6003      	str	r3, [r0, #0]
 80095c8:	4b04      	ldr	r3, [pc, #16]	; (80095dc <timer_init+0xa0>)
 80095ca:	4298      	cmp	r0, r3
 80095cc:	d002      	beq.n	80095d4 <timer_init+0x98>
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <timer_init+0xa4>)
 80095d0:	4298      	cmp	r0, r3
 80095d2:	d1ea      	bne.n	80095aa <timer_init+0x6e>
 80095d4:	7b8b      	ldrb	r3, [r1, #14]
 80095d6:	6303      	str	r3, [r0, #48]	; 0x30
 80095d8:	e7e7      	b.n	80095aa <timer_init+0x6e>
 80095da:	bf00      	nop
 80095dc:	40012c00 	andmi	r2, r1, r0, lsl #24
 80095e0:	40013400 	andmi	r3, r1, r0, lsl #8
 80095e4:	40002000 	andmi	r2, r0, r0
 80095e8:	40001000 	andmi	r1, r0, r0

080095ec <timer_enable>:
 80095ec:	6803      	ldr	r3, [r0, #0]
 80095ee:	f043 0301 	orr.w	r3, r3, #1
 80095f2:	6003      	str	r3, [r0, #0]
 80095f4:	4770      	bx	lr

080095f6 <timer_channel_output_mode_config>:
 80095f6:	2903      	cmp	r1, #3
 80095f8:	d81a      	bhi.n	8009630 <timer_channel_output_mode_config+0x3a>
 80095fa:	e8df f001 	tbb	[pc, r1]
 80095fe:	1a120a02 	bne	848be0e <__exidx_end+0x47fa0e>
 8009602:	6983      	ldr	r3, [r0, #24]
 8009604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009608:	6183      	str	r3, [r0, #24]
 800960a:	6983      	ldr	r3, [r0, #24]
 800960c:	4313      	orrs	r3, r2
 800960e:	6183      	str	r3, [r0, #24]
 8009610:	4770      	bx	lr
 8009612:	6983      	ldr	r3, [r0, #24]
 8009614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009618:	6183      	str	r3, [r0, #24]
 800961a:	6983      	ldr	r3, [r0, #24]
 800961c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009620:	e7f5      	b.n	800960e <timer_channel_output_mode_config+0x18>
 8009622:	69c3      	ldr	r3, [r0, #28]
 8009624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009628:	61c3      	str	r3, [r0, #28]
 800962a:	69c3      	ldr	r3, [r0, #28]
 800962c:	4313      	orrs	r3, r2
 800962e:	61c3      	str	r3, [r0, #28]
 8009630:	4770      	bx	lr
 8009632:	69c3      	ldr	r3, [r0, #28]
 8009634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009638:	61c3      	str	r3, [r0, #28]
 800963a:	69c3      	ldr	r3, [r0, #28]
 800963c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009640:	e7f5      	b.n	800962e <timer_channel_output_mode_config+0x38>

08009642 <timer_channel_output_pulse_value_config>:
 8009642:	2903      	cmp	r1, #3
 8009644:	d80a      	bhi.n	800965c <timer_channel_output_pulse_value_config+0x1a>
 8009646:	e8df f001 	tbb	[pc, r1]
 800964a:	08060402 	stmdaeq	r6, {r1, sl}
 800964e:	6342      	str	r2, [r0, #52]	; 0x34
 8009650:	4770      	bx	lr
 8009652:	6382      	str	r2, [r0, #56]	; 0x38
 8009654:	4770      	bx	lr
 8009656:	63c2      	str	r2, [r0, #60]	; 0x3c
 8009658:	4770      	bx	lr
 800965a:	6402      	str	r2, [r0, #64]	; 0x40
 800965c:	4770      	bx	lr

0800965e <timer_interrupt_enable>:
 800965e:	68c3      	ldr	r3, [r0, #12]
 8009660:	430b      	orrs	r3, r1
 8009662:	60c3      	str	r3, [r0, #12]
 8009664:	4770      	bx	lr

08009666 <timer_interrupt_flag_clear>:
 8009666:	43c9      	mvns	r1, r1
 8009668:	6101      	str	r1, [r0, #16]
 800966a:	4770      	bx	lr

0800966c <timer_flag_clear>:
 800966c:	43c9      	mvns	r1, r1
 800966e:	6101      	str	r1, [r0, #16]
 8009670:	4770      	bx	lr
	...

08009674 <usart_deinit>:
 8009674:	b508      	push	{r3, lr}
 8009676:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <usart_deinit+0x78>)
 8009678:	4298      	cmp	r0, r3
 800967a:	d028      	beq.n	80096ce <usart_deinit+0x5a>
 800967c:	d808      	bhi.n	8009690 <usart_deinit+0x1c>
 800967e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009682:	4298      	cmp	r0, r3
 8009684:	d015      	beq.n	80096b2 <usart_deinit+0x3e>
 8009686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968a:	4298      	cmp	r0, r3
 800968c:	d018      	beq.n	80096c0 <usart_deinit+0x4c>
 800968e:	bd08      	pop	{r3, pc}
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <usart_deinit+0x7c>)
 8009692:	4298      	cmp	r0, r3
 8009694:	d022      	beq.n	80096dc <usart_deinit+0x68>
 8009696:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 800969a:	4298      	cmp	r0, r3
 800969c:	d1f7      	bne.n	800968e <usart_deinit+0x1a>
 800969e:	f240 300e 	movw	r0, #782	; 0x30e
 80096a2:	f7ff fda2 	bl	80091ea <rcu_periph_reset_enable>
 80096a6:	f240 300e 	movw	r0, #782	; 0x30e
 80096aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096ae:	f7ff bd9e 	b.w	80091ee <rcu_periph_reset_disable>
 80096b2:	f240 4011 	movw	r0, #1041	; 0x411
 80096b6:	f7ff fd98 	bl	80091ea <rcu_periph_reset_enable>
 80096ba:	f240 4011 	movw	r0, #1041	; 0x411
 80096be:	e7f4      	b.n	80096aa <usart_deinit+0x36>
 80096c0:	f240 4012 	movw	r0, #1042	; 0x412
 80096c4:	f7ff fd91 	bl	80091ea <rcu_periph_reset_enable>
 80096c8:	f240 4012 	movw	r0, #1042	; 0x412
 80096cc:	e7ed      	b.n	80096aa <usart_deinit+0x36>
 80096ce:	f240 4013 	movw	r0, #1043	; 0x413
 80096d2:	f7ff fd8a 	bl	80091ea <rcu_periph_reset_enable>
 80096d6:	f240 4013 	movw	r0, #1043	; 0x413
 80096da:	e7e6      	b.n	80096aa <usart_deinit+0x36>
 80096dc:	f240 4014 	movw	r0, #1044	; 0x414
 80096e0:	f7ff fd83 	bl	80091ea <rcu_periph_reset_enable>
 80096e4:	f240 4014 	movw	r0, #1044	; 0x414
 80096e8:	e7df      	b.n	80096aa <usart_deinit+0x36>
 80096ea:	bf00      	nop
 80096ec:	40004c00 	andmi	r4, r0, r0, lsl #24
 80096f0:	40005000 	andmi	r5, r0, r0

080096f4 <usart_baudrate_set>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4b11      	ldr	r3, [pc, #68]	; (800973c <usart_baudrate_set+0x48>)
 80096f8:	4604      	mov	r4, r0
 80096fa:	4298      	cmp	r0, r3
 80096fc:	460d      	mov	r5, r1
 80096fe:	d01b      	beq.n	8009738 <usart_baudrate_set+0x44>
 8009700:	d809      	bhi.n	8009716 <usart_baudrate_set+0x22>
 8009702:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009706:	4298      	cmp	r0, r3
 8009708:	d016      	beq.n	8009738 <usart_baudrate_set+0x44>
 800970a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800970e:	4298      	cmp	r0, r3
 8009710:	d012      	beq.n	8009738 <usart_baudrate_set+0x44>
 8009712:	2000      	movs	r0, #0
 8009714:	e009      	b.n	800972a <usart_baudrate_set+0x36>
 8009716:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <usart_baudrate_set+0x4c>)
 8009718:	4298      	cmp	r0, r3
 800971a:	d00d      	beq.n	8009738 <usart_baudrate_set+0x44>
 800971c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8009720:	4298      	cmp	r0, r3
 8009722:	d1f6      	bne.n	8009712 <usart_baudrate_set+0x1e>
 8009724:	2003      	movs	r0, #3
 8009726:	f7ff fde9 	bl	80092fc <rcu_clock_freq_get>
 800972a:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 800972e:	fbb1 f1f5 	udiv	r1, r1, r5
 8009732:	b289      	uxth	r1, r1
 8009734:	60a1      	str	r1, [r4, #8]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	2002      	movs	r0, #2
 800973a:	e7f4      	b.n	8009726 <usart_baudrate_set+0x32>
 800973c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009740:	40005000 	andmi	r5, r0, r0

08009744 <usart_parity_config>:
 8009744:	68c3      	ldr	r3, [r0, #12]
 8009746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800974a:	60c3      	str	r3, [r0, #12]
 800974c:	68c3      	ldr	r3, [r0, #12]
 800974e:	430b      	orrs	r3, r1
 8009750:	60c3      	str	r3, [r0, #12]
 8009752:	4770      	bx	lr

08009754 <usart_word_length_set>:
 8009754:	68c3      	ldr	r3, [r0, #12]
 8009756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800975a:	60c3      	str	r3, [r0, #12]
 800975c:	68c3      	ldr	r3, [r0, #12]
 800975e:	430b      	orrs	r3, r1
 8009760:	60c3      	str	r3, [r0, #12]
 8009762:	4770      	bx	lr

08009764 <usart_stop_bit_set>:
 8009764:	6903      	ldr	r3, [r0, #16]
 8009766:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800976a:	6103      	str	r3, [r0, #16]
 800976c:	6903      	ldr	r3, [r0, #16]
 800976e:	430b      	orrs	r3, r1
 8009770:	6103      	str	r3, [r0, #16]
 8009772:	4770      	bx	lr

08009774 <usart_transmit_config>:
 8009774:	68c3      	ldr	r3, [r0, #12]
 8009776:	f023 0308 	bic.w	r3, r3, #8
 800977a:	430b      	orrs	r3, r1
 800977c:	60c3      	str	r3, [r0, #12]
 800977e:	4770      	bx	lr

08009780 <usart_receive_config>:
 8009780:	68c3      	ldr	r3, [r0, #12]
 8009782:	f023 0304 	bic.w	r3, r3, #4
 8009786:	430b      	orrs	r3, r1
 8009788:	60c3      	str	r3, [r0, #12]
 800978a:	4770      	bx	lr

0800978c <usart_hardware_flow_rts_config>:
 800978c:	6943      	ldr	r3, [r0, #20]
 800978e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009792:	430b      	orrs	r3, r1
 8009794:	6143      	str	r3, [r0, #20]
 8009796:	4770      	bx	lr

08009798 <usart_hardware_flow_cts_config>:
 8009798:	6943      	ldr	r3, [r0, #20]
 800979a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800979e:	430b      	orrs	r3, r1
 80097a0:	6143      	str	r3, [r0, #20]
 80097a2:	4770      	bx	lr

080097a4 <usart_dma_transmit_config>:
 80097a4:	6943      	ldr	r3, [r0, #20]
 80097a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097aa:	430b      	orrs	r3, r1
 80097ac:	6143      	str	r3, [r0, #20]
 80097ae:	4770      	bx	lr

080097b0 <usart_flag_get>:
 80097b0:	098b      	lsrs	r3, r1, #6
 80097b2:	581a      	ldr	r2, [r3, r0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	f001 011f 	and.w	r1, r1, #31
 80097ba:	408b      	lsls	r3, r1
 80097bc:	4213      	tst	r3, r2
 80097be:	bf14      	ite	ne
 80097c0:	2001      	movne	r0, #1
 80097c2:	2000      	moveq	r0, #0
 80097c4:	4770      	bx	lr

080097c6 <usart_interrupt_enable>:
 80097c6:	2301      	movs	r3, #1
 80097c8:	b510      	push	{r4, lr}
 80097ca:	f3c1 1289 	ubfx	r2, r1, #6, #10
 80097ce:	5814      	ldr	r4, [r2, r0]
 80097d0:	f001 011f 	and.w	r1, r1, #31
 80097d4:	408b      	lsls	r3, r1
 80097d6:	4323      	orrs	r3, r4
 80097d8:	5013      	str	r3, [r2, r0]
 80097da:	bd10      	pop	{r4, pc}

080097dc <usart_interrupt_disable>:
 80097dc:	2201      	movs	r2, #1
 80097de:	b510      	push	{r4, lr}
 80097e0:	f3c1 1489 	ubfx	r4, r1, #6, #10
 80097e4:	5823      	ldr	r3, [r4, r0]
 80097e6:	f001 011f 	and.w	r1, r1, #31
 80097ea:	408a      	lsls	r2, r1
 80097ec:	ea23 0302 	bic.w	r3, r3, r2
 80097f0:	5023      	str	r3, [r4, r0]
 80097f2:	bd10      	pop	{r4, pc}

080097f4 <usart_interrupt_flag_clear>:
 80097f4:	2201      	movs	r2, #1
 80097f6:	b510      	push	{r4, lr}
 80097f8:	0d8c      	lsrs	r4, r1, #22
 80097fa:	5823      	ldr	r3, [r4, r0]
 80097fc:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8009800:	408a      	lsls	r2, r1
 8009802:	ea23 0302 	bic.w	r3, r3, r2
 8009806:	5023      	str	r3, [r4, r0]
 8009808:	bd10      	pop	{r4, pc}
	...

0800980c <gd32_adc_init()>:
 800980c:	b510      	push	{r4, lr}
 800980e:	f240 6009 	movw	r0, #1545	; 0x609
 8009812:	4c21      	ldr	r4, [pc, #132]	; (8009898 <gd32_adc_init()+0x8c>)
 8009814:	f7ff fcce 	bl	80091b4 <rcu_periph_clock_enable>
 8009818:	2005      	movs	r0, #5
 800981a:	f7ff fceb 	bl	80091f4 <rcu_adc_clock_config>
 800981e:	4620      	mov	r0, r4
 8009820:	2201      	movs	r2, #1
 8009822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009826:	f000 fbb9 	bl	8009f9c <adc_special_function_config>
 800982a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800982e:	4620      	mov	r0, r4
 8009830:	2102      	movs	r1, #2
 8009832:	f000 fc52 	bl	800a0da <adc_external_trigger_source_config>
 8009836:	2100      	movs	r1, #0
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fbd7 	bl	8009fec <adc_data_alignment_config>
 800983e:	2000      	movs	r0, #0
 8009840:	f000 fb9c 	bl	8009f7c <adc_mode_config>
 8009844:	2202      	movs	r2, #2
 8009846:	4620      	mov	r0, r4
 8009848:	4611      	mov	r1, r2
 800984a:	f000 fbfb 	bl	800a044 <adc_channel_length_config>
 800984e:	4620      	mov	r0, r4
 8009850:	2307      	movs	r3, #7
 8009852:	2210      	movs	r2, #16
 8009854:	2100      	movs	r1, #0
 8009856:	f000 fc12 	bl	800a07e <adc_inserted_channel_config>
 800985a:	2307      	movs	r3, #7
 800985c:	4620      	mov	r0, r4
 800985e:	2211      	movs	r2, #17
 8009860:	2101      	movs	r1, #1
 8009862:	f000 fc0c 	bl	800a07e <adc_inserted_channel_config>
 8009866:	2201      	movs	r2, #1
 8009868:	2102      	movs	r1, #2
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fc46 	bl	800a0fc <adc_external_trigger_config>
 8009870:	f000 fbde 	bl	800a030 <adc_tempsensor_vrefint_enable>
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fbc2 	bl	8009ffe <adc_enable>
 800987a:	2100      	movs	r1, #0
 800987c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009880:	f000 fb64 	bl	8009f4c <udelay(unsigned int, unsigned int)>
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fbc2 	bl	800a00e <adc_calibration_enable>
 800988a:	4620      	mov	r0, r4
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	2102      	movs	r1, #2
 8009892:	f000 bc4e 	b.w	800a132 <adc_software_trigger_enable>
 8009896:	bf00      	nop
 8009898:	40012400 	andmi	r2, r1, r0, lsl #8
 800989c:	00000000 	andeq	r0, r0, r0

080098a0 <gd32_adc_gettemp()>:
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <gd32_adc_gettemp()+0x70>)
 80098a2:	b510      	push	{r4, lr}
 80098a4:	f8d3 443c 	ldr.w	r4, [r3, #1084]	; 0x43c
 80098a8:	2102      	movs	r1, #2
 80098aa:	481a      	ldr	r0, [pc, #104]	; (8009914 <gd32_adc_gettemp()+0x74>)
 80098ac:	f000 fc41 	bl	800a132 <adc_software_trigger_enable>
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7f6 ffa3 	bl	80007fc <__aeabi_ui2d>
 80098b6:	a310      	add	r3, pc, #64	; (adr r3, 80098f8 <gd32_adc_gettemp()+0x58>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f7 f818 	bl	80008f0 <__aeabi_dmul>
 80098c0:	2200      	movs	r2, #0
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <gd32_adc_gettemp()+0x78>)
 80098c4:	f7f7 f814 	bl	80008f0 <__aeabi_dmul>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	a10c      	add	r1, pc, #48	; (adr r1, 8009900 <gd32_adc_gettemp()+0x60>)
 80098ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098d2:	f7f6 fe55 	bl	8000580 <__aeabi_dsub>
 80098d6:	2200      	movs	r2, #0
 80098d8:	4b10      	ldr	r3, [pc, #64]	; (800991c <gd32_adc_gettemp()+0x7c>)
 80098da:	f7f7 f809 	bl	80008f0 <__aeabi_dmul>
 80098de:	a30a      	add	r3, pc, #40	; (adr r3, 8009908 <gd32_adc_gettemp()+0x68>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f7 f92e 	bl	8000b44 <__aeabi_ddiv>
 80098e8:	2200      	movs	r2, #0
 80098ea:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <gd32_adc_gettemp()+0x80>)
 80098ec:	f7f6 fe4a 	bl	8000584 <__adddf3>
 80098f0:	f7f6 fc2e 	bl	8000150 <__aeabi_d2f>
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80098fc:	400a6666 	andmi	r6, sl, r6, ror #12
 8009900:	ae147ae1 	vnmlage.f32	s14, s9, s3
 8009904:	3ff6e147 	svccc	0x00f6e147
 8009908:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
 800990c:	40113333 	andsmi	r3, r1, r3, lsr r3
 8009910:	40012000 	andmi	r2, r1, r0
 8009914:	40012400 	andmi	r2, r1, r0, lsl #8
 8009918:	3f300000 	svccc	0x00300000
 800991c:	408f4000 	addmi	r4, pc, r0
 8009920:	40390000 	eorsmi	r0, r9, r0

08009924 <_stop() [clone .isra.0]>:
 8009924:	b508      	push	{r3, lr}
 8009926:	4806      	ldr	r0, [pc, #24]	; (8009940 <_stop() [clone .isra.0]+0x1c>)
 8009928:	f000 fc96 	bl	800a258 <i2c_stop_on_bus>
 800992c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009930:	4904      	ldr	r1, [pc, #16]	; (8009944 <_stop() [clone .isra.0]+0x20>)
 8009932:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8009936:	0592      	lsls	r2, r2, #22
 8009938:	d501      	bpl.n	800993e <_stop() [clone .isra.0]+0x1a>
 800993a:	3b01      	subs	r3, #1
 800993c:	d1f9      	bne.n	8009932 <_stop() [clone .isra.0]+0xe>
 800993e:	bd08      	pop	{r3, pc}
 8009940:	40005400 	andmi	r5, r0, r0, lsl #8
 8009944:	40005000 	andmi	r5, r0, r0

08009948 <gd32_i2c_begin>:
 8009948:	b510      	push	{r4, lr}
 800994a:	f240 7015 	movw	r0, #1813	; 0x715
 800994e:	f7ff fc31 	bl	80091b4 <rcu_periph_clock_enable>
 8009952:	4c15      	ldr	r4, [pc, #84]	; (80099a8 <gd32_i2c_begin+0x60>)
 8009954:	f240 6003 	movw	r0, #1539	; 0x603
 8009958:	f7ff fc2c 	bl	80091b4 <rcu_periph_clock_enable>
 800995c:	f240 6003 	movw	r0, #1539	; 0x603
 8009960:	f7ff fc28 	bl	80091b4 <rcu_periph_clock_enable>
 8009964:	4620      	mov	r0, r4
 8009966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800996a:	2203      	movs	r2, #3
 800996c:	211c      	movs	r1, #28
 800996e:	f7ff fb8f 	bl	8009090 <gpio_init>
 8009972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009976:	2203      	movs	r2, #3
 8009978:	4620      	mov	r0, r4
 800997a:	211c      	movs	r1, #28
 800997c:	f7ff fb88 	bl	8009090 <gpio_init>
 8009980:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8009984:	2101      	movs	r1, #1
 8009986:	2002      	movs	r0, #2
 8009988:	f7ff fbdc 	bl	8009144 <gpio_pin_remap_config>
 800998c:	4620      	mov	r0, r4
 800998e:	4907      	ldr	r1, [pc, #28]	; (80099ac <gd32_i2c_begin+0x64>)
 8009990:	2200      	movs	r2, #0
 8009992:	f000 fbdb 	bl	800a14c <i2c_clock_config>
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fc54 	bl	800a244 <i2c_enable>
 800999c:	4620      	mov	r0, r4
 800999e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a2:	2101      	movs	r1, #1
 80099a4:	f000 bc34 	b.w	800a210 <i2c_ack_config>
 80099a8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80099ac:	00061a80 	andeq	r1, r6, r0, lsl #21

080099b0 <gd32_i2c_set_baudrate>:
 80099b0:	4601      	mov	r1, r0
 80099b2:	2200      	movs	r2, #0
 80099b4:	4801      	ldr	r0, [pc, #4]	; (80099bc <gd32_i2c_set_baudrate+0xc>)
 80099b6:	f000 bbc9 	b.w	800a14c <i2c_clock_config>
 80099ba:	bf00      	nop
 80099bc:	40005400 	andmi	r5, r0, r0, lsl #8

080099c0 <gd32_i2c_set_address>:
 80099c0:	4b01      	ldr	r3, [pc, #4]	; (80099c8 <gd32_i2c_set_address+0x8>)
 80099c2:	0040      	lsls	r0, r0, #1
 80099c4:	7018      	strb	r0, [r3, #0]
 80099c6:	4770      	bx	lr
 80099c8:	200017b0 			; <UNDEFINED> instruction: 0x200017b0

080099cc <gd32_i2c_write>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	4604      	mov	r4, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80099d6:	4e2e      	ldr	r6, [pc, #184]	; (8009a90 <gd32_i2c_write+0xc4>)
 80099d8:	f240 6101 	movw	r1, #1537	; 0x601
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 fc45 	bl	800a26c <i2c_flag_get>
 80099e2:	b9b0      	cbnz	r0, 8009a12 <gd32_i2c_write+0x46>
 80099e4:	482a      	ldr	r0, [pc, #168]	; (8009a90 <gd32_i2c_write+0xc4>)
 80099e6:	f000 fc32 	bl	800a24e <i2c_start_on_bus>
 80099ea:	f640 75ff 	movw	r5, #4095	; 0xfff
 80099ee:	4e28      	ldr	r6, [pc, #160]	; (8009a90 <gd32_i2c_write+0xc4>)
 80099f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 fc39 	bl	800a26c <i2c_flag_get>
 80099fa:	b190      	cbz	r0, 8009a22 <gd32_i2c_write+0x56>
 80099fc:	4b25      	ldr	r3, [pc, #148]	; (8009a94 <gd32_i2c_write+0xc8>)
 80099fe:	f06f 0201 	mvn.w	r2, #1
 8009a02:	7819      	ldrb	r1, [r3, #0]
 8009a04:	4822      	ldr	r0, [pc, #136]	; (8009a90 <gd32_i2c_write+0xc4>)
 8009a06:	f000 fc15 	bl	800a234 <i2c_master_addressing>
 8009a0a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009a0e:	4e20      	ldr	r6, [pc, #128]	; (8009a90 <gd32_i2c_write+0xc4>)
 8009a10:	e00c      	b.n	8009a2c <gd32_i2c_write+0x60>
 8009a12:	3d01      	subs	r5, #1
 8009a14:	d1e0      	bne.n	80099d8 <gd32_i2c_write+0xc>
 8009a16:	f7ff ff85 	bl	8009924 <_stop() [clone .isra.0]>
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a1e:	4240      	negs	r0, r0
 8009a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a22:	3d01      	subs	r5, #1
 8009a24:	d1e4      	bne.n	80099f0 <gd32_i2c_write+0x24>
 8009a26:	e7f6      	b.n	8009a16 <gd32_i2c_write+0x4a>
 8009a28:	3d01      	subs	r5, #1
 8009a2a:	d0f4      	beq.n	8009a16 <gd32_i2c_write+0x4a>
 8009a2c:	f240 5101 	movw	r1, #1281	; 0x501
 8009a30:	4630      	mov	r0, r6
 8009a32:	f000 fc1b 	bl	800a26c <i2c_flag_get>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0f6      	beq.n	8009a28 <gd32_i2c_write+0x5c>
 8009a3a:	f240 5101 	movw	r1, #1281	; 0x501
 8009a3e:	4814      	ldr	r0, [pc, #80]	; (8009a90 <gd32_i2c_write+0xc4>)
 8009a40:	f000 fc1f 	bl	800a282 <i2c_flag_clear>
 8009a44:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009a48:	4e11      	ldr	r6, [pc, #68]	; (8009a90 <gd32_i2c_write+0xc4>)
 8009a4a:	f240 5107 	movw	r1, #1287	; 0x507
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 fc0c 	bl	800a26c <i2c_flag_get>
 8009a54:	2801      	cmp	r0, #1
 8009a56:	d107      	bne.n	8009a68 <gd32_i2c_write+0x9c>
 8009a58:	4e0d      	ldr	r6, [pc, #52]	; (8009a90 <gd32_i2c_write+0xc4>)
 8009a5a:	4427      	add	r7, r4
 8009a5c:	42a7      	cmp	r7, r4
 8009a5e:	d106      	bne.n	8009a6e <gd32_i2c_write+0xa2>
 8009a60:	f7ff ff60 	bl	8009924 <_stop() [clone .isra.0]>
 8009a64:	2000      	movs	r0, #0
 8009a66:	e7da      	b.n	8009a1e <gd32_i2c_write+0x52>
 8009a68:	3d01      	subs	r5, #1
 8009a6a:	d1ee      	bne.n	8009a4a <gd32_i2c_write+0x7e>
 8009a6c:	e7d3      	b.n	8009a16 <gd32_i2c_write+0x4a>
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a74:	f000 fbf5 	bl	800a262 <i2c_data_transmit>
 8009a78:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009a7c:	f240 5102 	movw	r1, #1282	; 0x502
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 fbf3 	bl	800a26c <i2c_flag_get>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d1e8      	bne.n	8009a5c <gd32_i2c_write+0x90>
 8009a8a:	3d01      	subs	r5, #1
 8009a8c:	d1f6      	bne.n	8009a7c <gd32_i2c_write+0xb0>
 8009a8e:	e7c2      	b.n	8009a16 <gd32_i2c_write+0x4a>
 8009a90:	40005400 	andmi	r5, r0, r0, lsl #8
 8009a94:	200017b0 			; <UNDEFINED> instruction: 0x200017b0

08009a98 <gd32_i2c_read>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009aa4:	4f4b      	ldr	r7, [pc, #300]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009aa6:	f240 6101 	movw	r1, #1537	; 0x601
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f000 fbde 	bl	800a26c <i2c_flag_get>
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	bb08      	cbnz	r0, 8009af8 <gd32_i2c_read+0x60>
 8009ab4:	2c02      	cmp	r4, #2
 8009ab6:	d103      	bne.n	8009ac0 <gd32_i2c_read+0x28>
 8009ab8:	4601      	mov	r1, r0
 8009aba:	4846      	ldr	r0, [pc, #280]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009abc:	f000 fbb1 	bl	800a222 <i2c_ackpos_config>
 8009ac0:	4844      	ldr	r0, [pc, #272]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009ac2:	f000 fbc4 	bl	800a24e <i2c_start_on_bus>
 8009ac6:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009aca:	4f42      	ldr	r7, [pc, #264]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009acc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f000 fbcb 	bl	800a26c <i2c_flag_get>
 8009ad6:	b1a8      	cbz	r0, 8009b04 <gd32_i2c_read+0x6c>
 8009ad8:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <gd32_i2c_read+0x140>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	7819      	ldrb	r1, [r3, #0]
 8009ade:	483d      	ldr	r0, [pc, #244]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009ae0:	f000 fba8 	bl	800a234 <i2c_master_addressing>
 8009ae4:	2c02      	cmp	r4, #2
 8009ae6:	d803      	bhi.n	8009af0 <gd32_i2c_read+0x58>
 8009ae8:	2100      	movs	r1, #0
 8009aea:	483a      	ldr	r0, [pc, #232]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009aec:	f000 fb90 	bl	800a210 <i2c_ack_config>
 8009af0:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009af4:	4f37      	ldr	r7, [pc, #220]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009af6:	e00a      	b.n	8009b0e <gd32_i2c_read+0x76>
 8009af8:	3e01      	subs	r6, #1
 8009afa:	d1d4      	bne.n	8009aa6 <gd32_i2c_read+0xe>
 8009afc:	f7ff ff12 	bl	8009924 <_stop() [clone .isra.0]>
 8009b00:	2504      	movs	r5, #4
 8009b02:	e04d      	b.n	8009ba0 <gd32_i2c_read+0x108>
 8009b04:	3e01      	subs	r6, #1
 8009b06:	d1e1      	bne.n	8009acc <gd32_i2c_read+0x34>
 8009b08:	e7f8      	b.n	8009afc <gd32_i2c_read+0x64>
 8009b0a:	3e01      	subs	r6, #1
 8009b0c:	d0f6      	beq.n	8009afc <gd32_i2c_read+0x64>
 8009b0e:	f240 5101 	movw	r1, #1281	; 0x501
 8009b12:	4638      	mov	r0, r7
 8009b14:	f000 fbaa 	bl	800a26c <i2c_flag_get>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d0f6      	beq.n	8009b0a <gd32_i2c_read+0x72>
 8009b1c:	f240 5101 	movw	r1, #1281	; 0x501
 8009b20:	482c      	ldr	r0, [pc, #176]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009b22:	f000 fbae 	bl	800a282 <i2c_flag_clear>
 8009b26:	2c01      	cmp	r4, #1
 8009b28:	d102      	bne.n	8009b30 <gd32_i2c_read+0x98>
 8009b2a:	482a      	ldr	r0, [pc, #168]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009b2c:	f000 fb94 	bl	800a258 <i2c_stop_on_bus>
 8009b30:	f640 77ff 	movw	r7, #4095	; 0xfff
 8009b34:	4e27      	ldr	r6, [pc, #156]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009b36:	e022      	b.n	8009b7e <gd32_i2c_read+0xe6>
 8009b38:	2c03      	cmp	r4, #3
 8009b3a:	d134      	bne.n	8009ba6 <gd32_i2c_read+0x10e>
 8009b3c:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009b40:	e002      	b.n	8009b48 <gd32_i2c_read+0xb0>
 8009b42:	f1b9 0901 	subs.w	r9, r9, #1
 8009b46:	d0d9      	beq.n	8009afc <gd32_i2c_read+0x64>
 8009b48:	f240 5102 	movw	r1, #1282	; 0x502
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 fb8d 	bl	800a26c <i2c_flag_get>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0f5      	beq.n	8009b42 <gd32_i2c_read+0xaa>
 8009b56:	2100      	movs	r1, #0
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 fb59 	bl	800a210 <i2c_ack_config>
 8009b5e:	f240 5106 	movw	r1, #1286	; 0x506
 8009b62:	4630      	mov	r0, r6
 8009b64:	f000 fb82 	bl	800a26c <i2c_flag_get>
 8009b68:	b138      	cbz	r0, 8009b7a <gd32_i2c_read+0xe2>
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 fb7b 	bl	800a266 <i2c_data_receive>
 8009b70:	f640 77ff 	movw	r7, #4095	; 0xfff
 8009b74:	f808 0b01 	strb.w	r0, [r8], #1
 8009b78:	3c01      	subs	r4, #1
 8009b7a:	3f01      	subs	r7, #1
 8009b7c:	d0be      	beq.n	8009afc <gd32_i2c_read+0x64>
 8009b7e:	2c00      	cmp	r4, #0
 8009b80:	d1da      	bne.n	8009b38 <gd32_i2c_read+0xa0>
 8009b82:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009b86:	4915      	ldr	r1, [pc, #84]	; (8009bdc <gd32_i2c_read+0x144>)
 8009b88:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8009b8c:	0592      	lsls	r2, r2, #22
 8009b8e:	d41d      	bmi.n	8009bcc <gd32_i2c_read+0x134>
 8009b90:	2101      	movs	r1, #1
 8009b92:	4810      	ldr	r0, [pc, #64]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009b94:	f000 fb3c 	bl	800a210 <i2c_ack_config>
 8009b98:	2101      	movs	r1, #1
 8009b9a:	480e      	ldr	r0, [pc, #56]	; (8009bd4 <gd32_i2c_read+0x13c>)
 8009b9c:	f000 fb41 	bl	800a222 <i2c_ackpos_config>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	2c02      	cmp	r4, #2
 8009ba8:	d1d9      	bne.n	8009b5e <gd32_i2c_read+0xc6>
 8009baa:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009bae:	e002      	b.n	8009bb6 <gd32_i2c_read+0x11e>
 8009bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb4:	d0a2      	beq.n	8009afc <gd32_i2c_read+0x64>
 8009bb6:	f240 5102 	movw	r1, #1282	; 0x502
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f000 fb56 	bl	800a26c <i2c_flag_get>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d0f5      	beq.n	8009bb0 <gd32_i2c_read+0x118>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 fb47 	bl	800a258 <i2c_stop_on_bus>
 8009bca:	e7c8      	b.n	8009b5e <gd32_i2c_read+0xc6>
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	d1db      	bne.n	8009b88 <gd32_i2c_read+0xf0>
 8009bd0:	e796      	b.n	8009b00 <gd32_i2c_read+0x68>
 8009bd2:	bf00      	nop
 8009bd4:	40005400 	andmi	r5, r0, r0, lsl #8
 8009bd8:	200017b0 			; <UNDEFINED> instruction: 0x200017b0
 8009bdc:	40005000 	andmi	r5, r0, r0

08009be0 <gd32_spi_dma_begin()>:
 8009be0:	b530      	push	{r4, r5, lr}
 8009be2:	f240 6002 	movw	r0, #1538	; 0x602
 8009be6:	b089      	sub	sp, #36	; 0x24
 8009be8:	f7ff fae4 	bl	80091b4 <rcu_periph_clock_enable>
 8009bec:	f240 6003 	movw	r0, #1539	; 0x603
 8009bf0:	f7ff fae0 	bl	80091b4 <rcu_periph_clock_enable>
 8009bf4:	f240 700f 	movw	r0, #1807	; 0x70f
 8009bf8:	f7ff fadc 	bl	80091b4 <rcu_periph_clock_enable>
 8009bfc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009c00:	f7ff fad8 	bl	80091b4 <rcu_periph_clock_enable>
 8009c04:	2338      	movs	r3, #56	; 0x38
 8009c06:	2203      	movs	r2, #3
 8009c08:	2118      	movs	r1, #24
 8009c0a:	4829      	ldr	r0, [pc, #164]	; (8009cb0 <gd32_spi_dma_begin()+0xd0>)
 8009c0c:	f7ff fa40 	bl	8009090 <gpio_init>
 8009c10:	4c28      	ldr	r4, [pc, #160]	; (8009cb4 <gd32_spi_dma_begin()+0xd4>)
 8009c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c16:	2203      	movs	r2, #3
 8009c18:	2118      	movs	r1, #24
 8009c1a:	4827      	ldr	r0, [pc, #156]	; (8009cb8 <gd32_spi_dma_begin()+0xd8>)
 8009c1c:	f7ff fa38 	bl	8009090 <gpio_init>
 8009c20:	2101      	movs	r1, #1
 8009c22:	4826      	ldr	r0, [pc, #152]	; (8009cbc <gd32_spi_dma_begin()+0xdc>)
 8009c24:	f7ff fa8e 	bl	8009144 <gpio_pin_remap_config>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fb80 	bl	800a32e <i2s_disable>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	4620      	mov	r0, r4
 8009c32:	461a      	mov	r2, r3
 8009c34:	4922      	ldr	r1, [pc, #136]	; (8009cc0 <gd32_spi_dma_begin()+0xe0>)
 8009c36:	f000 fb45 	bl	800a2c4 <i2s_psc_config>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fb2f 	bl	800a2a6 <i2s_init>
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fb6b 	bl	800a324 <i2s_enable>
 8009c4e:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 8009c52:	f240 5001 	movw	r0, #1281	; 0x501
 8009c56:	f7ff faad 	bl	80091b4 <rcu_periph_clock_enable>
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f7ff f90d 	bl	8008e7c <dma_deinit>
 8009c62:	a801      	add	r0, sp, #4
 8009c64:	f7ff f926 	bl	8008eb4 <dma_struct_para_init>
 8009c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c6c:	2501      	movs	r5, #1
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c78:	4912      	ldr	r1, [pc, #72]	; (8009cc4 <gd32_spi_dma_begin()+0xe4>)
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8009c80:	9206      	str	r2, [sp, #24]
 8009c82:	4629      	mov	r1, r5
 8009c84:	aa01      	add	r2, sp, #4
 8009c86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009c8a:	f88d 501e 	strb.w	r5, [sp, #30]
 8009c8e:	f7ff f91b 	bl	8008ec8 <dma_init>
 8009c92:	4629      	mov	r1, r5
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7ff f951 	bl	8008f3c <dma_circulation_disable>
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f7ff f95d 	bl	8008f5c <dma_memory_to_memory_disable>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	4b08      	ldr	r3, [pc, #32]	; (8009cc8 <gd32_spi_dma_begin()+0xe8>)
 8009ca6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8009caa:	b009      	add	sp, #36	; 0x24
 8009cac:	bd30      	pop	{r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009cb4:	40003c00 	andmi	r3, r0, r0, lsl #24
 8009cb8:	40010800 	andmi	r0, r1, r0, lsl #16
 8009cbc:	00300400 	eorseq	r0, r0, r0, lsl #8
 8009cc0:	00030d40 	andeq	r0, r3, r0, asr #26
 8009cc4:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8009cc8:	40020000 	andmi	r0, r2, r0

08009ccc <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4c08      	ldr	r4, [pc, #32]	; (8009cf0 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fb2b 	bl	800a32e <i2s_disable>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4620      	mov	r0, r4
 8009cdc:	461a      	mov	r2, r3
 8009cde:	0969      	lsrs	r1, r5, #5
 8009ce0:	f000 faf0 	bl	800a2c4 <i2s_psc_config>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cea:	f000 bb1b 	b.w	800a324 <i2s_enable>
 8009cee:	bf00      	nop
 8009cf0:	40003c00 	andmi	r3, r0, r0, lsl #24

08009cf4 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009cf4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	4801      	ldr	r0, [pc, #4]	; (8009d00 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	200017b4 			; <UNDEFINED> instruction: 0x200017b4

08009d04 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8009d04:	4a0a      	ldr	r2, [pc, #40]	; (8009d30 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8009d06:	3101      	adds	r1, #1
 8009d08:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8009d0c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009d18:	f043 0301 	orr.w	r3, r3, #1
 8009d1c:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8009d20:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009d24:	4803      	ldr	r0, [pc, #12]	; (8009d34 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8009d26:	2100      	movs	r1, #0
 8009d28:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009d2c:	f000 bb04 	b.w	800a338 <spi_dma_enable>
 8009d30:	40020000 	andmi	r0, r2, r0
 8009d34:	40003c00 	andmi	r3, r0, r0, lsl #24

08009d38 <gd32_spi_dma_tx_is_active()>:
 8009d38:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <gd32_spi_dma_tx_is_active()+0x10>)
 8009d3a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8009d3e:	3800      	subs	r0, #0
 8009d40:	bf18      	it	ne
 8009d42:	2001      	movne	r0, #1
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	40020000 	andmi	r0, r2, r0

08009d4c <gd32_uart_begin>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	461e      	mov	r6, r3
 8009d50:	4b63      	ldr	r3, [pc, #396]	; (8009ee0 <gd32_uart_begin+0x194>)
 8009d52:	4604      	mov	r4, r0
 8009d54:	4298      	cmp	r0, r3
 8009d56:	460f      	mov	r7, r1
 8009d58:	4615      	mov	r5, r2
 8009d5a:	d03b      	beq.n	8009dd4 <gd32_uart_begin+0x88>
 8009d5c:	d80a      	bhi.n	8009d74 <gd32_uart_begin+0x28>
 8009d5e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009d62:	4298      	cmp	r0, r3
 8009d64:	d02f      	beq.n	8009dc6 <gd32_uart_begin+0x7a>
 8009d66:	f240 7012 	movw	r0, #1810	; 0x712
 8009d6a:	f7ff fa23 	bl	80091b4 <rcu_periph_clock_enable>
 8009d6e:	f240 6004 	movw	r0, #1540	; 0x604
 8009d72:	e008      	b.n	8009d86 <gd32_uart_begin+0x3a>
 8009d74:	4b5b      	ldr	r3, [pc, #364]	; (8009ee4 <gd32_uart_begin+0x198>)
 8009d76:	4298      	cmp	r0, r3
 8009d78:	d02f      	beq.n	8009dda <gd32_uart_begin+0x8e>
 8009d7a:	f240 600e 	movw	r0, #1550	; 0x60e
 8009d7e:	f7ff fa19 	bl	80091b4 <rcu_periph_clock_enable>
 8009d82:	f240 6003 	movw	r0, #1539	; 0x603
 8009d86:	f7ff fa15 	bl	80091b4 <rcu_periph_clock_enable>
 8009d8a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009d8e:	f7ff fa11 	bl	80091b4 <rcu_periph_clock_enable>
 8009d92:	4b53      	ldr	r3, [pc, #332]	; (8009ee0 <gd32_uart_begin+0x194>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	f000 8084 	beq.w	8009ea2 <gd32_uart_begin+0x156>
 8009d9a:	d829      	bhi.n	8009df0 <gd32_uart_begin+0xa4>
 8009d9c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009da0:	429c      	cmp	r4, r3
 8009da2:	d071      	beq.n	8009e88 <gd32_uart_begin+0x13c>
 8009da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da8:	2203      	movs	r2, #3
 8009daa:	2118      	movs	r1, #24
 8009dac:	484e      	ldr	r0, [pc, #312]	; (8009ee8 <gd32_uart_begin+0x19c>)
 8009dae:	f7ff f96f 	bl	8009090 <gpio_init>
 8009db2:	2104      	movs	r1, #4
 8009db4:	484c      	ldr	r0, [pc, #304]	; (8009ee8 <gd32_uart_begin+0x19c>)
 8009db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dba:	2203      	movs	r2, #3
 8009dbc:	f7ff f968 	bl	8009090 <gpio_init>
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	484a      	ldr	r0, [pc, #296]	; (8009eec <gd32_uart_begin+0x1a0>)
 8009dc4:	e025      	b.n	8009e12 <gd32_uart_begin+0xc6>
 8009dc6:	f240 7011 	movw	r0, #1809	; 0x711
 8009dca:	f7ff f9f3 	bl	80091b4 <rcu_periph_clock_enable>
 8009dce:	f240 6002 	movw	r0, #1538	; 0x602
 8009dd2:	e7d8      	b.n	8009d86 <gd32_uart_begin+0x3a>
 8009dd4:	f240 7013 	movw	r0, #1811	; 0x713
 8009dd8:	e7c7      	b.n	8009d6a <gd32_uart_begin+0x1e>
 8009dda:	f240 7014 	movw	r0, #1812	; 0x714
 8009dde:	f7ff f9e9 	bl	80091b4 <rcu_periph_clock_enable>
 8009de2:	f240 6004 	movw	r0, #1540	; 0x604
 8009de6:	f7ff f9e5 	bl	80091b4 <rcu_periph_clock_enable>
 8009dea:	f240 6005 	movw	r0, #1541	; 0x605
 8009dee:	e7ca      	b.n	8009d86 <gd32_uart_begin+0x3a>
 8009df0:	4b3c      	ldr	r3, [pc, #240]	; (8009ee4 <gd32_uart_begin+0x198>)
 8009df2:	429c      	cmp	r4, r3
 8009df4:	d062      	beq.n	8009ebc <gd32_uart_begin+0x170>
 8009df6:	2340      	movs	r3, #64	; 0x40
 8009df8:	2203      	movs	r2, #3
 8009dfa:	2118      	movs	r1, #24
 8009dfc:	483c      	ldr	r0, [pc, #240]	; (8009ef0 <gd32_uart_begin+0x1a4>)
 8009dfe:	f7ff f947 	bl	8009090 <gpio_init>
 8009e02:	2104      	movs	r1, #4
 8009e04:	483a      	ldr	r0, [pc, #232]	; (8009ef0 <gd32_uart_begin+0x1a4>)
 8009e06:	2380      	movs	r3, #128	; 0x80
 8009e08:	2203      	movs	r2, #3
 8009e0a:	f7ff f941 	bl	8009090 <gpio_init>
 8009e0e:	2101      	movs	r1, #1
 8009e10:	2004      	movs	r0, #4
 8009e12:	f7ff f997 	bl	8009144 <gpio_pin_remap_config>
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7ff fc2c 	bl	8009674 <usart_deinit>
 8009e1c:	68e3      	ldr	r3, [r4, #12]
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e24:	4620      	mov	r0, r4
 8009e26:	60e3      	str	r3, [r4, #12]
 8009e28:	f7ff fc64 	bl	80096f4 <usart_baudrate_set>
 8009e2c:	f1a5 0309 	sub.w	r3, r5, #9
 8009e30:	4259      	negs	r1, r3
 8009e32:	4159      	adcs	r1, r3
 8009e34:	4620      	mov	r0, r4
 8009e36:	0309      	lsls	r1, r1, #12
 8009e38:	f7ff fc8c 	bl	8009754 <usart_word_length_set>
 8009e3c:	9906      	ldr	r1, [sp, #24]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	1e8a      	subs	r2, r1, #2
 8009e42:	4251      	negs	r1, r2
 8009e44:	4151      	adcs	r1, r2
 8009e46:	0349      	lsls	r1, r1, #13
 8009e48:	f7ff fc8c 	bl	8009764 <usart_stop_bit_set>
 8009e4c:	2e01      	cmp	r6, #1
 8009e4e:	d041      	beq.n	8009ed4 <gd32_uart_begin+0x188>
 8009e50:	2e02      	cmp	r6, #2
 8009e52:	d142      	bne.n	8009eda <gd32_uart_begin+0x18e>
 8009e54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7ff fc73 	bl	8009744 <usart_parity_config>
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4620      	mov	r0, r4
 8009e62:	f7ff fc93 	bl	800978c <usart_hardware_flow_rts_config>
 8009e66:	2100      	movs	r1, #0
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7ff fc95 	bl	8009798 <usart_hardware_flow_cts_config>
 8009e6e:	2104      	movs	r1, #4
 8009e70:	4620      	mov	r0, r4
 8009e72:	f7ff fc85 	bl	8009780 <usart_receive_config>
 8009e76:	2108      	movs	r1, #8
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7ff fc7b 	bl	8009774 <usart_transmit_config>
 8009e7e:	68e3      	ldr	r3, [r4, #12]
 8009e80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e84:	60e3      	str	r3, [r4, #12]
 8009e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e88:	2304      	movs	r3, #4
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	2118      	movs	r1, #24
 8009e8e:	4819      	ldr	r0, [pc, #100]	; (8009ef4 <gd32_uart_begin+0x1a8>)
 8009e90:	f7ff f8fe 	bl	8009090 <gpio_init>
 8009e94:	2308      	movs	r3, #8
 8009e96:	2203      	movs	r2, #3
 8009e98:	2104      	movs	r1, #4
 8009e9a:	4816      	ldr	r0, [pc, #88]	; (8009ef4 <gd32_uart_begin+0x1a8>)
 8009e9c:	f7ff f8f8 	bl	8009090 <gpio_init>
 8009ea0:	e7b9      	b.n	8009e16 <gd32_uart_begin+0xca>
 8009ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea6:	2203      	movs	r2, #3
 8009ea8:	2118      	movs	r1, #24
 8009eaa:	480f      	ldr	r0, [pc, #60]	; (8009ee8 <gd32_uart_begin+0x19c>)
 8009eac:	f7ff f8f0 	bl	8009090 <gpio_init>
 8009eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	2104      	movs	r1, #4
 8009eb8:	480b      	ldr	r0, [pc, #44]	; (8009ee8 <gd32_uart_begin+0x19c>)
 8009eba:	e7ef      	b.n	8009e9c <gd32_uart_begin+0x150>
 8009ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec0:	2203      	movs	r2, #3
 8009ec2:	2118      	movs	r1, #24
 8009ec4:	4808      	ldr	r0, [pc, #32]	; (8009ee8 <gd32_uart_begin+0x19c>)
 8009ec6:	f7ff f8e3 	bl	8009090 <gpio_init>
 8009eca:	2304      	movs	r3, #4
 8009ecc:	2203      	movs	r2, #3
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4809      	ldr	r0, [pc, #36]	; (8009ef8 <gd32_uart_begin+0x1ac>)
 8009ed2:	e7e3      	b.n	8009e9c <gd32_uart_begin+0x150>
 8009ed4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009ed8:	e7be      	b.n	8009e58 <gd32_uart_begin+0x10c>
 8009eda:	2100      	movs	r1, #0
 8009edc:	e7bc      	b.n	8009e58 <gd32_uart_begin+0x10c>
 8009ede:	bf00      	nop
 8009ee0:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009ee4:	40005000 	andmi	r5, r0, r0
 8009ee8:	40011000 	andmi	r1, r1, r0
 8009eec:	00140010 	andseq	r0, r4, r0, lsl r0
 8009ef0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009ef4:	40010800 	andmi	r0, r1, r0, lsl #16
 8009ef8:	40011400 	andmi	r1, r1, r0, lsl #8

08009efc <mac_address_get(unsigned char*)>:
 8009efc:	2102      	movs	r1, #2
 8009efe:	4a07      	ldr	r2, [pc, #28]	; (8009f1c <mac_address_get(unsigned char*)+0x20>)
 8009f00:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8009f04:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8009f08:	7001      	strb	r1, [r0, #0]
 8009f0a:	7042      	strb	r2, [r0, #1]
 8009f0c:	0e1a      	lsrs	r2, r3, #24
 8009f0e:	7082      	strb	r2, [r0, #2]
 8009f10:	0c1a      	lsrs	r2, r3, #16
 8009f12:	70c2      	strb	r2, [r0, #3]
 8009f14:	0a1a      	lsrs	r2, r3, #8
 8009f16:	7102      	strb	r2, [r0, #4]
 8009f18:	7143      	strb	r3, [r0, #5]
 8009f1a:	4770      	bx	lr
 8009f1c:	1ffff000 	svcne	0x00fff000

08009f20 <micros_init()>:
 8009f20:	4770      	bx	lr
	...

08009f24 <udelay_init()>:
 8009f24:	4a07      	ldr	r2, [pc, #28]	; (8009f44 <udelay_init()+0x20>)
 8009f26:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f2e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009f32:	2200      	movs	r2, #0
 8009f34:	4b04      	ldr	r3, [pc, #16]	; (8009f48 <udelay_init()+0x24>)
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	f042 0201 	orr.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	e000ed00 	and	lr, r0, r0, lsl #26
 8009f48:	e0001000 	and	r1, r0, r0

08009f4c <udelay(unsigned int, unsigned int)>:
 8009f4c:	236c      	movs	r3, #108	; 0x6c
 8009f4e:	b530      	push	{r4, r5, lr}
 8009f50:	4358      	muls	r0, r3
 8009f52:	b909      	cbnz	r1, 8009f58 <udelay(unsigned int, unsigned int)+0xc>
 8009f54:	4b08      	ldr	r3, [pc, #32]	; (8009f78 <udelay(unsigned int, unsigned int)+0x2c>)
 8009f56:	6859      	ldr	r1, [r3, #4]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4c07      	ldr	r4, [pc, #28]	; (8009f78 <udelay(unsigned int, unsigned int)+0x2c>)
 8009f5c:	6862      	ldr	r2, [r4, #4]
 8009f5e:	4291      	cmp	r1, r2
 8009f60:	d0fc      	beq.n	8009f5c <udelay(unsigned int, unsigned int)+0x10>
 8009f62:	bf2a      	itet	cs
 8009f64:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009f68:	189b      	addcc	r3, r3, r2
 8009f6a:	195b      	addcs	r3, r3, r5
 8009f6c:	1a5b      	subs	r3, r3, r1
 8009f6e:	4283      	cmp	r3, r0
 8009f70:	d300      	bcc.n	8009f74 <udelay(unsigned int, unsigned int)+0x28>
 8009f72:	bd30      	pop	{r4, r5, pc}
 8009f74:	4611      	mov	r1, r2
 8009f76:	e7f1      	b.n	8009f5c <udelay(unsigned int, unsigned int)+0x10>
 8009f78:	e0001000 	and	r1, r0, r0

08009f7c <adc_mode_config>:
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <adc_mode_config+0x1c>)
 8009f7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f82:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009f86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009f8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009f8e:	4302      	orrs	r2, r0
 8009f90:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40012000 	andmi	r2, r1, r0

08009f9c <adc_special_function_config>:
 8009f9c:	b510      	push	{r4, lr}
 8009f9e:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009fa2:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009fa6:	f001 0102 	and.w	r1, r1, #2
 8009faa:	b17a      	cbz	r2, 8009fcc <adc_special_function_config+0x30>
 8009fac:	b11b      	cbz	r3, 8009fb6 <adc_special_function_config+0x1a>
 8009fae:	6843      	ldr	r3, [r0, #4]
 8009fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb4:	6043      	str	r3, [r0, #4]
 8009fb6:	b11c      	cbz	r4, 8009fc0 <adc_special_function_config+0x24>
 8009fb8:	6843      	ldr	r3, [r0, #4]
 8009fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fbe:	6043      	str	r3, [r0, #4]
 8009fc0:	b119      	cbz	r1, 8009fca <adc_special_function_config+0x2e>
 8009fc2:	6883      	ldr	r3, [r0, #8]
 8009fc4:	f043 0302 	orr.w	r3, r3, #2
 8009fc8:	6083      	str	r3, [r0, #8]
 8009fca:	bd10      	pop	{r4, pc}
 8009fcc:	b11b      	cbz	r3, 8009fd6 <adc_special_function_config+0x3a>
 8009fce:	6843      	ldr	r3, [r0, #4]
 8009fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd4:	6043      	str	r3, [r0, #4]
 8009fd6:	b11c      	cbz	r4, 8009fe0 <adc_special_function_config+0x44>
 8009fd8:	6843      	ldr	r3, [r0, #4]
 8009fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fde:	6043      	str	r3, [r0, #4]
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	d0f2      	beq.n	8009fca <adc_special_function_config+0x2e>
 8009fe4:	6883      	ldr	r3, [r0, #8]
 8009fe6:	f023 0302 	bic.w	r3, r3, #2
 8009fea:	e7ed      	b.n	8009fc8 <adc_special_function_config+0x2c>

08009fec <adc_data_alignment_config>:
 8009fec:	6883      	ldr	r3, [r0, #8]
 8009fee:	b119      	cbz	r1, 8009ff8 <adc_data_alignment_config+0xc>
 8009ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ff4:	6083      	str	r3, [r0, #8]
 8009ff6:	4770      	bx	lr
 8009ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ffc:	e7fa      	b.n	8009ff4 <adc_data_alignment_config+0x8>

08009ffe <adc_enable>:
 8009ffe:	6883      	ldr	r3, [r0, #8]
 800a000:	07db      	lsls	r3, r3, #31
 800a002:	bf5e      	ittt	pl
 800a004:	6883      	ldrpl	r3, [r0, #8]
 800a006:	f043 0301 	orrpl.w	r3, r3, #1
 800a00a:	6083      	strpl	r3, [r0, #8]
 800a00c:	4770      	bx	lr

0800a00e <adc_calibration_enable>:
 800a00e:	6883      	ldr	r3, [r0, #8]
 800a010:	f100 0208 	add.w	r2, r0, #8
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	6083      	str	r3, [r0, #8]
 800a01a:	6813      	ldr	r3, [r2, #0]
 800a01c:	0719      	lsls	r1, r3, #28
 800a01e:	d4fc      	bmi.n	800a01a <adc_calibration_enable+0xc>
 800a020:	6883      	ldr	r3, [r0, #8]
 800a022:	f043 0304 	orr.w	r3, r3, #4
 800a026:	6083      	str	r3, [r0, #8]
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	075b      	lsls	r3, r3, #29
 800a02c:	d4fc      	bmi.n	800a028 <adc_calibration_enable+0x1a>
 800a02e:	4770      	bx	lr

0800a030 <adc_tempsensor_vrefint_enable>:
 800a030:	4a03      	ldr	r2, [pc, #12]	; (800a040 <adc_tempsensor_vrefint_enable+0x10>)
 800a032:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 800a036:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a03a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 800a03e:	4770      	bx	lr
 800a040:	40012000 	andmi	r2, r1, r0

0800a044 <adc_channel_length_config>:
 800a044:	2901      	cmp	r1, #1
 800a046:	d002      	beq.n	800a04e <adc_channel_length_config+0xa>
 800a048:	2902      	cmp	r1, #2
 800a04a:	d00c      	beq.n	800a066 <adc_channel_length_config+0x22>
 800a04c:	4770      	bx	lr
 800a04e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a050:	3a01      	subs	r2, #1
 800a052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a056:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a058:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a05a:	0512      	lsls	r2, r2, #20
 800a05c:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 800a060:	431a      	orrs	r2, r3
 800a062:	62c2      	str	r2, [r0, #44]	; 0x2c
 800a064:	4770      	bx	lr
 800a066:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a068:	3a01      	subs	r2, #1
 800a06a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a06e:	6383      	str	r3, [r0, #56]	; 0x38
 800a070:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a072:	0512      	lsls	r2, r2, #20
 800a074:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800a078:	431a      	orrs	r2, r3
 800a07a:	6382      	str	r2, [r0, #56]	; 0x38
 800a07c:	4770      	bx	lr

0800a07e <adc_inserted_channel_config>:
 800a07e:	b530      	push	{r4, r5, lr}
 800a080:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a082:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800a084:	f3c4 5401 	ubfx	r4, r4, #20, #2
 800a088:	1a61      	subs	r1, r4, r1
 800a08a:	f06f 0404 	mvn.w	r4, #4
 800a08e:	4361      	muls	r1, r4
 800a090:	241f      	movs	r4, #31
 800a092:	310f      	adds	r1, #15
 800a094:	408c      	lsls	r4, r1
 800a096:	ea25 0504 	bic.w	r5, r5, r4
 800a09a:	fa02 f101 	lsl.w	r1, r2, r1
 800a09e:	4329      	orrs	r1, r5
 800a0a0:	2a09      	cmp	r2, #9
 800a0a2:	6381      	str	r1, [r0, #56]	; 0x38
 800a0a4:	d80b      	bhi.n	800a0be <adc_inserted_channel_config+0x40>
 800a0a6:	2407      	movs	r4, #7
 800a0a8:	6901      	ldr	r1, [r0, #16]
 800a0aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a0ae:	4094      	lsls	r4, r2
 800a0b0:	ea21 0104 	bic.w	r1, r1, r4
 800a0b4:	fa03 f202 	lsl.w	r2, r3, r2
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	6102      	str	r2, [r0, #16]
 800a0bc:	bd30      	pop	{r4, r5, pc}
 800a0be:	2a11      	cmp	r2, #17
 800a0c0:	d8fc      	bhi.n	800a0bc <adc_inserted_channel_config+0x3e>
 800a0c2:	2407      	movs	r4, #7
 800a0c4:	3a0a      	subs	r2, #10
 800a0c6:	68c1      	ldr	r1, [r0, #12]
 800a0c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a0cc:	4094      	lsls	r4, r2
 800a0ce:	ea21 0104 	bic.w	r1, r1, r4
 800a0d2:	4093      	lsls	r3, r2
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	60c3      	str	r3, [r0, #12]
 800a0d8:	e7f0      	b.n	800a0bc <adc_inserted_channel_config+0x3e>

0800a0da <adc_external_trigger_source_config>:
 800a0da:	2901      	cmp	r1, #1
 800a0dc:	d002      	beq.n	800a0e4 <adc_external_trigger_source_config+0xa>
 800a0de:	2902      	cmp	r1, #2
 800a0e0:	d008      	beq.n	800a0f4 <adc_external_trigger_source_config+0x1a>
 800a0e2:	4770      	bx	lr
 800a0e4:	6883      	ldr	r3, [r0, #8]
 800a0e6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800a0ea:	6083      	str	r3, [r0, #8]
 800a0ec:	6883      	ldr	r3, [r0, #8]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	6083      	str	r3, [r0, #8]
 800a0f2:	4770      	bx	lr
 800a0f4:	6883      	ldr	r3, [r0, #8]
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	e7f6      	b.n	800a0ea <adc_external_trigger_source_config+0x10>

0800a0fc <adc_external_trigger_config>:
 800a0fc:	f001 0301 	and.w	r3, r1, #1
 800a100:	f001 0102 	and.w	r1, r1, #2
 800a104:	b152      	cbz	r2, 800a11c <adc_external_trigger_config+0x20>
 800a106:	b11b      	cbz	r3, 800a110 <adc_external_trigger_config+0x14>
 800a108:	6883      	ldr	r3, [r0, #8]
 800a10a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a10e:	6083      	str	r3, [r0, #8]
 800a110:	b119      	cbz	r1, 800a11a <adc_external_trigger_config+0x1e>
 800a112:	6883      	ldr	r3, [r0, #8]
 800a114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a118:	6083      	str	r3, [r0, #8]
 800a11a:	4770      	bx	lr
 800a11c:	b11b      	cbz	r3, 800a126 <adc_external_trigger_config+0x2a>
 800a11e:	6883      	ldr	r3, [r0, #8]
 800a120:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a124:	6083      	str	r3, [r0, #8]
 800a126:	2900      	cmp	r1, #0
 800a128:	d0f7      	beq.n	800a11a <adc_external_trigger_config+0x1e>
 800a12a:	6883      	ldr	r3, [r0, #8]
 800a12c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a130:	e7f2      	b.n	800a118 <adc_external_trigger_config+0x1c>

0800a132 <adc_software_trigger_enable>:
 800a132:	07ca      	lsls	r2, r1, #31
 800a134:	bf42      	ittt	mi
 800a136:	6883      	ldrmi	r3, [r0, #8]
 800a138:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 800a13c:	6083      	strmi	r3, [r0, #8]
 800a13e:	078b      	lsls	r3, r1, #30
 800a140:	bf42      	ittt	mi
 800a142:	6883      	ldrmi	r3, [r0, #8]
 800a144:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 800a148:	6083      	strmi	r3, [r0, #8]
 800a14a:	4770      	bx	lr

0800a14c <i2c_clock_config>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	4605      	mov	r5, r0
 800a150:	2002      	movs	r0, #2
 800a152:	460c      	mov	r4, r1
 800a154:	4617      	mov	r7, r2
 800a156:	f7ff f8d1 	bl	80092fc <rcu_clock_freq_get>
 800a15a:	4603      	mov	r3, r0
 800a15c:	4828      	ldr	r0, [pc, #160]	; (800a200 <i2c_clock_config+0xb4>)
 800a15e:	4a29      	ldr	r2, [pc, #164]	; (800a204 <i2c_clock_config+0xb8>)
 800a160:	fbb3 f0f0 	udiv	r0, r3, r0
 800a164:	4293      	cmp	r3, r2
 800a166:	bf34      	ite	cc
 800a168:	4601      	movcc	r1, r0
 800a16a:	2136      	movcs	r1, #54	; 0x36
 800a16c:	686e      	ldr	r6, [r5, #4]
 800a16e:	4a26      	ldr	r2, [pc, #152]	; (800a208 <i2c_clock_config+0xbc>)
 800a170:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800a174:	430e      	orrs	r6, r1
 800a176:	4294      	cmp	r4, r2
 800a178:	606e      	str	r6, [r5, #4]
 800a17a:	d816      	bhi.n	800a1aa <i2c_clock_config+0x5e>
 800a17c:	3001      	adds	r0, #1
 800a17e:	2835      	cmp	r0, #53	; 0x35
 800a180:	d90d      	bls.n	800a19e <i2c_clock_config+0x52>
 800a182:	2236      	movs	r2, #54	; 0x36
 800a184:	622a      	str	r2, [r5, #32]
 800a186:	0064      	lsls	r4, r4, #1
 800a188:	fbb3 f4f4 	udiv	r4, r3, r4
 800a18c:	2c04      	cmp	r4, #4
 800a18e:	bf38      	it	cc
 800a190:	2404      	movcc	r4, #4
 800a192:	69ea      	ldr	r2, [r5, #28]
 800a194:	f3c4 040b 	ubfx	r4, r4, #0, #12
 800a198:	4314      	orrs	r4, r2
 800a19a:	61ec      	str	r4, [r5, #28]
 800a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a19e:	2802      	cmp	r0, #2
 800a1a0:	d801      	bhi.n	800a1a6 <i2c_clock_config+0x5a>
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	e7ee      	b.n	800a184 <i2c_clock_config+0x38>
 800a1a6:	6228      	str	r0, [r5, #32]
 800a1a8:	e7ed      	b.n	800a186 <i2c_clock_config+0x3a>
 800a1aa:	4a18      	ldr	r2, [pc, #96]	; (800a20c <i2c_clock_config+0xc0>)
 800a1ac:	4294      	cmp	r4, r2
 800a1ae:	d8f5      	bhi.n	800a19c <i2c_clock_config+0x50>
 800a1b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a1b4:	4351      	muls	r1, r2
 800a1b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1ba:	fbb1 f1f2 	udiv	r1, r1, r2
 800a1be:	3101      	adds	r1, #1
 800a1c0:	6229      	str	r1, [r5, #32]
 800a1c2:	b9a7      	cbnz	r7, 800a1ee <i2c_clock_config+0xa2>
 800a1c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a1c8:	fbb3 f4f4 	udiv	r4, r3, r4
 800a1cc:	69eb      	ldr	r3, [r5, #28]
 800a1ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1d2:	61eb      	str	r3, [r5, #28]
 800a1d4:	f3c4 030b 	ubfx	r3, r4, #0, #12
 800a1d8:	b90b      	cbnz	r3, 800a1de <i2c_clock_config+0x92>
 800a1da:	f044 0401 	orr.w	r4, r4, #1
 800a1de:	69eb      	ldr	r3, [r5, #28]
 800a1e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e4:	61eb      	str	r3, [r5, #28]
 800a1e6:	69eb      	ldr	r3, [r5, #28]
 800a1e8:	4323      	orrs	r3, r4
 800a1ea:	61eb      	str	r3, [r5, #28]
 800a1ec:	e7d6      	b.n	800a19c <i2c_clock_config+0x50>
 800a1ee:	2219      	movs	r2, #25
 800a1f0:	4354      	muls	r4, r2
 800a1f2:	fbb3 f4f4 	udiv	r4, r3, r4
 800a1f6:	69eb      	ldr	r3, [r5, #28]
 800a1f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1fc:	e7e9      	b.n	800a1d2 <i2c_clock_config+0x86>
 800a1fe:	bf00      	nop
 800a200:	000f4240 	andeq	r4, pc, r0, asr #4
 800a204:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 800a208:	000186a0 	andeq	r8, r1, r0, lsr #13
 800a20c:	00061a80 	andeq	r1, r6, r0, lsl #21

0800a210 <i2c_ack_config>:
 800a210:	6803      	ldr	r3, [r0, #0]
 800a212:	2901      	cmp	r1, #1
 800a214:	bf0c      	ite	eq
 800a216:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 800a21a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 800a21e:	6003      	str	r3, [r0, #0]
 800a220:	4770      	bx	lr

0800a222 <i2c_ackpos_config>:
 800a222:	6803      	ldr	r3, [r0, #0]
 800a224:	b919      	cbnz	r1, 800a22e <i2c_ackpos_config+0xc>
 800a226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a22a:	6003      	str	r3, [r0, #0]
 800a22c:	4770      	bx	lr
 800a22e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a232:	e7fa      	b.n	800a22a <i2c_ackpos_config+0x8>

0800a234 <i2c_master_addressing>:
 800a234:	3202      	adds	r2, #2
 800a236:	bf0c      	ite	eq
 800a238:	f021 0101 	biceq.w	r1, r1, #1
 800a23c:	f041 0101 	orrne.w	r1, r1, #1
 800a240:	6101      	str	r1, [r0, #16]
 800a242:	4770      	bx	lr

0800a244 <i2c_enable>:
 800a244:	6803      	ldr	r3, [r0, #0]
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	6003      	str	r3, [r0, #0]
 800a24c:	4770      	bx	lr

0800a24e <i2c_start_on_bus>:
 800a24e:	6803      	ldr	r3, [r0, #0]
 800a250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	4770      	bx	lr

0800a258 <i2c_stop_on_bus>:
 800a258:	6803      	ldr	r3, [r0, #0]
 800a25a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a25e:	6003      	str	r3, [r0, #0]
 800a260:	4770      	bx	lr

0800a262 <i2c_data_transmit>:
 800a262:	6101      	str	r1, [r0, #16]
 800a264:	4770      	bx	lr

0800a266 <i2c_data_receive>:
 800a266:	6900      	ldr	r0, [r0, #16]
 800a268:	b2c0      	uxtb	r0, r0
 800a26a:	4770      	bx	lr

0800a26c <i2c_flag_get>:
 800a26c:	098b      	lsrs	r3, r1, #6
 800a26e:	581a      	ldr	r2, [r3, r0]
 800a270:	2301      	movs	r3, #1
 800a272:	f001 011f 	and.w	r1, r1, #31
 800a276:	408b      	lsls	r3, r1
 800a278:	4213      	tst	r3, r2
 800a27a:	bf14      	ite	ne
 800a27c:	2001      	movne	r0, #1
 800a27e:	2000      	moveq	r0, #0
 800a280:	4770      	bx	lr

0800a282 <i2c_flag_clear>:
 800a282:	f240 5301 	movw	r3, #1281	; 0x501
 800a286:	4299      	cmp	r1, r3
 800a288:	b510      	push	{r4, lr}
 800a28a:	d102      	bne.n	800a292 <i2c_flag_clear+0x10>
 800a28c:	6943      	ldr	r3, [r0, #20]
 800a28e:	6983      	ldr	r3, [r0, #24]
 800a290:	bd10      	pop	{r4, pc}
 800a292:	2201      	movs	r2, #1
 800a294:	098c      	lsrs	r4, r1, #6
 800a296:	5823      	ldr	r3, [r4, r0]
 800a298:	f001 011f 	and.w	r1, r1, #31
 800a29c:	408a      	lsls	r2, r1
 800a29e:	ea23 0302 	bic.w	r3, r3, r2
 800a2a2:	5023      	str	r3, [r4, r0]
 800a2a4:	e7f4      	b.n	800a290 <i2c_flag_clear+0xe>

0800a2a6 <i2s_init>:
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	69c4      	ldr	r4, [r0, #28]
 800a2aa:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 800a2ae:	f024 0408 	bic.w	r4, r4, #8
 800a2b2:	0424      	lsls	r4, r4, #16
 800a2b4:	0c24      	lsrs	r4, r4, #16
 800a2b6:	431c      	orrs	r4, r3
 800a2b8:	4314      	orrs	r4, r2
 800a2ba:	430c      	orrs	r4, r1
 800a2bc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800a2c0:	61c4      	str	r4, [r0, #28]
 800a2c2:	bd10      	pop	{r4, pc}

0800a2c4 <i2s_psc_config>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	6203      	str	r3, [r0, #32]
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	4616      	mov	r6, r2
 800a2d4:	f7ff f812 	bl	80092fc <rcu_clock_freq_get>
 800a2d8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800a2dc:	f04f 030a 	mov.w	r3, #10
 800a2e0:	d11b      	bne.n	800a31a <i2s_psc_config+0x56>
 800a2e2:	0a00      	lsrs	r0, r0, #8
 800a2e4:	4358      	muls	r0, r3
 800a2e6:	fbb0 f4f4 	udiv	r4, r0, r4
 800a2ea:	230a      	movs	r3, #10
 800a2ec:	3405      	adds	r4, #5
 800a2ee:	fbb4 f4f3 	udiv	r4, r4, r3
 800a2f2:	f004 0301 	and.w	r3, r4, #1
 800a2f6:	0864      	lsrs	r4, r4, #1
 800a2f8:	1ea2      	subs	r2, r4, #2
 800a2fa:	2afd      	cmp	r2, #253	; 0xfd
 800a2fc:	bf86      	itte	hi
 800a2fe:	2300      	movhi	r3, #0
 800a300:	2402      	movhi	r4, #2
 800a302:	021b      	lslls	r3, r3, #8
 800a304:	431c      	orrs	r4, r3
 800a306:	433c      	orrs	r4, r7
 800a308:	622c      	str	r4, [r5, #32]
 800a30a:	69eb      	ldr	r3, [r5, #28]
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	61eb      	str	r3, [r5, #28]
 800a312:	69eb      	ldr	r3, [r5, #28]
 800a314:	4333      	orrs	r3, r6
 800a316:	61eb      	str	r3, [r5, #28]
 800a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31a:	b90e      	cbnz	r6, 800a320 <i2s_psc_config+0x5c>
 800a31c:	0940      	lsrs	r0, r0, #5
 800a31e:	e7e1      	b.n	800a2e4 <i2s_psc_config+0x20>
 800a320:	0980      	lsrs	r0, r0, #6
 800a322:	e7df      	b.n	800a2e4 <i2s_psc_config+0x20>

0800a324 <i2s_enable>:
 800a324:	69c3      	ldr	r3, [r0, #28]
 800a326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a32a:	61c3      	str	r3, [r0, #28]
 800a32c:	4770      	bx	lr

0800a32e <i2s_disable>:
 800a32e:	69c3      	ldr	r3, [r0, #28]
 800a330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a334:	61c3      	str	r3, [r0, #28]
 800a336:	4770      	bx	lr

0800a338 <spi_dma_enable>:
 800a338:	6843      	ldr	r3, [r0, #4]
 800a33a:	b919      	cbnz	r1, 800a344 <spi_dma_enable+0xc>
 800a33c:	f043 0302 	orr.w	r3, r3, #2
 800a340:	6043      	str	r3, [r0, #4]
 800a342:	4770      	bx	lr
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	e7fa      	b.n	800a340 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

0800a34c <vtable for RDMResponder-0xe0>:
 800a34c:	00000000 	andeq	r0, r0, r0
 800a350:	18002000 	stmdane	r0, {sp}
 800a354:	00180400 	andseq	r0, r8, r0, lsl #8
 800a358:	00000007 	andeq	r0, r0, r7
	...
 800a364:	03020100 	movweq	r0, #8448	; 0x2100
 800a368:	08070604 	stmdaeq	r7, {r2, r9, sl}
 800a36c:	00000009 	andeq	r0, r0, r9
 800a370:	03020100 	movweq	r0, #8448	; 0x2100
 800a374:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 800a378:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a37c:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 800a380:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a384:	6f430064 	svcvs	0x00430064
 800a388:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a38c:	646f4d20 	strbtvs	r4, [pc], #-3360	; 800a394 <_etext+0x48>
 800a390:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 800a394:	3a33353a 	bcc	8cd7884 <__exidx_end+0xccb484>
 800a398:	4d003733 	stcmi	7, cr3, [r0, #-204]	; 0xffffff34
 800a39c:	31207261 			; <UNDEFINED> instruction: 0x31207261
 800a3a0:	30322039 	eorscc	r2, r2, r9, lsr r0
 800a3a4:	52003332 	andpl	r3, r0, #-939524096	; 0xc8000000
 800a3a8:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 800a3ac:	6f707365 	svcvs	0x00707365
 800a3b0:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 800a3b4:	335b1b00 	cmpcc	fp, #0, 22
 800a3b8:	73256d32 			; <UNDEFINED> instruction: 0x73256d32
 800a3bc:	6d305b1b 	fldmdbxvs	r0!, {d5-d17}	;@ Deprecated
 800a3c0:	7325000a 			; <UNDEFINED> instruction: 0x7325000a
 800a3c4:	2075253a 	rsbscs	r2, r5, sl, lsr r5
 800a3c8:	20752547 	rsbscs	r2, r5, r7, asr #10
 800a3cc:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 800a3d0:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 800a3d4:	20676966 	rsbcs	r6, r7, r6, ror #18
 800a3d8:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 800a3dc:	754f2000 	strbvc	r2, [pc, #-0]	; 800a3e4 <_etext+0x98>
 800a3e0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800a3e4:	0a732520 	beq	9cd386c <__exidx_end+0x1cc746c>
 800a3e8:	73655400 	cmnvc	r5, #0, 8
 800a3ec:	61702074 	cmnvs	r0, r4, ror r0
 800a3f0:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
 800a3f4:	203a206e 	eorscs	r2, sl, lr, rrx
 800a3f8:	5b207325 	blpl	8827094 <__exidx_end+0x81ac94>
 800a3fc:	0a5d7525 	beq	9767898 <__exidx_end+0x175b498>
 800a400:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800a404:	73655220 	cmnvc	r5, #32, 4
 800a408:	646e6f70 	strbtvs	r6, [lr], #-3952	; 0xfffff090
 800a40c:	50207265 	eorpl	r7, r0, r5, ror #4
 800a410:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800a414:	25003120 	strcs	r3, [r0, #-288]	; 0xfffffee0
 800a418:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 800a41c:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 800a420:	00732520 	rsbseq	r2, r3, r0, lsr #10
 800a424:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 800a428:	00000075 	andeq	r0, r0, r5, ror r0

0800a42c <vtable for RDMResponder>:
	...
 800a434:	080010fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, ip}
 800a438:	08001145 	stmdaeq	r0, {r0, r2, r6, r8, ip}
 800a43c:	080010a9 	stmdaeq	r0, {r0, r3, r5, r7, ip}
 800a440:	080010dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, ip}

0800a444 <vtable for PixelDmxStartStop>:
	...
 800a44c:	08001083 	stmdaeq	r0, {r0, r1, r7, ip}
 800a450:	0800109d 	stmdaeq	r0, {r0, r2, r3, r4, r7, ip}
 800a454:	08001085 	stmdaeq	r0, {r0, r2, r7, ip}
 800a458:	08001091 	stmdaeq	r0, {r0, r4, r7, ip}

0800a45c <SOFTWARE_VERSION>:
 800a45c:	00362e31 	eorseq	r2, r6, r1, lsr lr

0800a460 <gamma10_0>:
 800a460:	03020100 	movweq	r0, #8448	; 0x2100
 800a464:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800a468:	0b0a0908 	bleq	828c890 <__exidx_end+0x280490>
 800a46c:	0f0e0d0c 	svceq	0x000e0d0c
 800a470:	13121110 	tstne	r2, #16, 2
 800a474:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800a478:	1b1a1918 	blne	86908e0 <__exidx_end+0x6844e0>
 800a47c:	1f1e1d1c 	svcne	0x001e1d1c
 800a480:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800a484:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800a488:	2b2a2928 	blcs	8a94930 <__exidx_end+0xa88530>
 800a48c:	2f2e2d2c 	svccs	0x002e2d2c
 800a490:	33323130 	teqcc	r2, #48, 2
 800a494:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a498:	3b3a3938 	blcc	8e98980 <__exidx_end+0xe8c580>
 800a49c:	3f3e3d3c 	svccc	0x003e3d3c
 800a4a0:	43424140 	movtmi	r4, #8512	; 0x2140
 800a4a4:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800a4a8:	4b4a4948 	blmi	929c9d0 <__exidx_end+0x12905d0>
 800a4ac:	4f4e4d4c 	svcmi	0x004e4d4c
 800a4b0:	53525150 	cmppl	r2, #80, 2
 800a4b4:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800a4b8:	5b5a5958 	blpl	96a0a20 <__exidx_end+0x1694620>
 800a4bc:	5f5e5d5c 	svcpl	0x005e5d5c
 800a4c0:	63626160 	cmnvs	r2, #96, 2
 800a4c4:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800a4c8:	6b6a6968 	blvs	9aa4a70 <__exidx_end+0x1a98670>
 800a4cc:	6f6e6d6c 	svcvs	0x006e6d6c
 800a4d0:	73727170 	cmnvc	r2, #112, 2
 800a4d4:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800a4d8:	7b7a7978 	blvc	9ea8ac0 <__exidx_end+0x1e9c6c0>
 800a4dc:	7f7e7d7c 	svcvc	0x007e7d7c
 800a4e0:	83828180 	orrhi	r8, r2, #128, 2
 800a4e4:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800a4e8:	8b8a8988 	blhi	62acb10 <__heap_size+0x62abb10>
 800a4ec:	8f8e8d8c 	svchi	0x008e8d8c
 800a4f0:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800a4f4:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800a4f8:	9b9a9998 	blls	66b0b60 <__heap_size+0x66afb60>
 800a4fc:	9f9e9d9c 	svcls	0x009e9d9c
 800a500:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800a504:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800a508:	abaaa9a8 	blge	6ab4bb0 <__heap_size+0x6ab3bb0>
 800a50c:	afaeadac 	svcge	0x00aeadac
 800a510:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800a514:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800a518:	bbbab9b8 	bllt	6eb8c00 <__heap_size+0x6eb7c00>
 800a51c:	bfbebdbc 	svclt	0x00bebdbc
 800a520:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800a524:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800a528:	cbcac9c8 	blgt	72bcc50 <__heap_size+0x72bbc50>
 800a52c:	cfcecdcc 	svcgt	0x00cecdcc
 800a530:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800a534:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800a538:	dbdad9d8 	blle	76c0ca0 <__heap_size+0x76bfca0>
 800a53c:	dfdedddc 	svcle	0x00dedddc
 800a540:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800a544:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800a548:	ebeae9e8 	bl	7ac4cf0 <__heap_size+0x7ac3cf0>
 800a54c:	efeeedec 	svc	0x00eeedec
 800a550:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800a554:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800a558:	fbfaf9f8 	blx	7ec8d42 <__heap_size+0x7ec7d42>
 800a55c:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800a560:	30322d25 	eorscc	r2, r2, r5, lsr #26
 800a564:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 800a568:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 800a56c:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 800a570:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a574:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a578:	50007335 	andpl	r7, r0, r5, lsr r3
 800a57c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a580:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a584:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a588:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a58c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a590:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a594:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a598:	614d0074 	hvcvs	53252	; 0xd004
 800a59c:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a5a0:	50207473 	eorpl	r7, r0, r3, ror r4
 800a5a4:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a5a8:	50006e72 	andpl	r6, r0, r2, ror lr
 800a5ac:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a5b0:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a5b4:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a5b8:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a5bd <SOFTWARE_VERSION>:
 800a5bd:	00362e31 	eorseq	r2, r6, r1, lsr lr
 800a5c1:	00555043 	subseq	r5, r5, r3, asr #32
 800a5c5:	 	andeq	r0, r0, r0

0800a5c8 <vtable for CpuTemperature>:
	...
 800a5d0:	0800274d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, sp}
 800a5d4:	0800275d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, sp}
 800a5d8:	08002749 	stmdaeq	r0, {r0, r3, r6, r8, r9, sl, sp}
 800a5dc:	0800274f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, r9, sl, sp}

0800a5e0 <vtable for RDMSensorBH170>:
	...
 800a5e8:	08002a55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, sp}
 800a5ec:	08002a57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, fp, sp}
 800a5f0:	08002885 	stmdaeq	r0, {r0, r2, r7, fp, sp}
 800a5f4:	080029c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, fp, sp}

0800a5f8 <vtable for RDMSensorMCP9808>:
	...
 800a600:	08002a47 	stmdaeq	r0, {r0, r1, r2, r6, r9, fp, sp}
 800a604:	08002a49 	stmdaeq	r0, {r0, r3, r6, r9, fp, sp}
 800a608:	0800288b 	stmdaeq	r0, {r0, r1, r3, r7, fp, sp}
 800a60c:	080029b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, sp}

0800a610 <vtable for RDMSensorHTU21DHumidity>:
	...
 800a618:	08002a39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, sp}
 800a61c:	08002a3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, fp, sp}
 800a620:	08002891 	stmdaeq	r0, {r0, r4, r7, fp, sp}
 800a624:	080029a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, sp}

0800a628 <vtable for RDMSensorHTU21DTemperature>:
	...
 800a630:	08002a2b 	stmdaeq	r0, {r0, r1, r3, r5, r9, fp, sp}
 800a634:	08002a2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, sp}
 800a638:	08002897 	stmdaeq	r0, {r0, r1, r2, r4, r7, fp, sp}
 800a63c:	08002999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp, sp}

0800a640 <vtable for RDMSensorINA219Current>:
	...
 800a648:	08002a1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, fp, sp}
 800a64c:	08002a1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, fp, sp}
 800a650:	0800289d 	stmdaeq	r0, {r0, r2, r3, r4, r7, fp, sp}
 800a654:	0800297d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, fp, sp}

0800a658 <vtable for RDMSensorINA219Power>:
	...
 800a660:	08002a0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, fp, sp}
 800a664:	08002a11 	stmdaeq	r0, {r0, r4, r9, fp, sp}
 800a668:	080028a3 	stmdaeq	r0, {r0, r1, r5, r7, fp, sp}
 800a66c:	0800296d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, fp, sp}

0800a670 <vtable for RDMSensorINA219Voltage>:
	...
 800a678:	08002a01 	stmdaeq	r0, {r0, r9, fp, sp}
 800a67c:	08002a03 	stmdaeq	r0, {r0, r1, r9, fp, sp}
 800a680:	080028a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, sp}
 800a684:	08002951 	stmdaeq	r0, {r0, r4, r6, r8, fp, sp}

0800a688 <vtable for RDMSensorSI7021Humidity>:
	...
 800a690:	080029f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, fp, sp}
 800a694:	080029f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, sp}
 800a698:	080028af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, fp, sp}
 800a69c:	08002941 	stmdaeq	r0, {r0, r6, r8, fp, sp}

0800a6a0 <vtable for RDMSensorSI7021Temperature>:
	...
 800a6a8:	080029e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, fp, sp}
 800a6ac:	080029e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, fp, sp}
 800a6b0:	080028b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, fp, sp}
 800a6b4:	08002931 	stmdaeq	r0, {r0, r4, r5, r8, fp, sp}

0800a6b8 <vtable for RDMSensorThermistor>:
	...
 800a6c0:	080029d7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, fp, sp}
 800a6c4:	080029d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, sp}
 800a6c8:	080028bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, fp, sp}
 800a6cc:	080028c1 	stmdaeq	r0, {r0, r6, r7, fp, sp}

0800a6d0 <sensor::thermistor::DESCRIPTION>:
 800a6d0:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a6d4:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a6d8:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a6dc:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a6e0:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a6e4 <sensor::bh1750::DESCRIPTION>:
 800a6e4:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a6e8:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a6ec:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a6f0:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a6f2 <sensor::htu21d::temperature::DESCRIPTION>:
 800a6f2:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a6f6:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a6fa:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a6fe:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a702:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a706 <sensor::htu21d::humidity::DESCRIPTION>:
 800a706:	616c6552 	cmnvs	ip, r2, asr r5
 800a70a:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a70e:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a712:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a716:	 	svcvs	0x00500079

0800a718 <sensor::ina219::power::DESCRIPTION>:
 800a718:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a71c:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a71e <sensor::ina219::current::DESCRIPTION>:
 800a71e:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a722:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a726 <sensor::ina219::voltage::DESCRIPTION>:
 800a726:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a72a:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a72e <sensor::si7021::temperature::DESCRIPTION>:
 800a72e:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a732:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a736:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a73a:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a73e:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a742 <sensor::si7021::humidity::DESCRIPTION>:
 800a742:	616c6552 	cmnvs	ip, r2, asr r5
 800a746:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a74a:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a74e:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a752:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a754 <sensor::mcp9808::DESCRIPTION>:
 800a754:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a758:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a75c:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a760:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a764:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a768 <vtable for RDMSensor>:
	...
 800a780:	204d4452 	subcs	r4, sp, r2, asr r4
 800a784:	70736552 	rsbsvc	r6, r3, r2, asr r5
 800a788:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 800a78c:	6f632072 	svcvs	0x00632072
 800a790:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a794:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a798:	0a6e6f69 	beq	9ba6544 <__exidx_end+0x1b9a144>
 800a79c:	72502000 	subsvc	r2, r0, #0
 800a7a0:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 800a7a4:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 800a7a8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 800a7ac:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800a7b0:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 800a7b4:	4420000a 	strtmi	r0, [r0], #-10
 800a7b8:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 800a7bc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 800a7c0:	20207373 	eorcs	r7, r0, r3, ror r3
 800a7c4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a7c8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a7cc:	4420000a 	strtmi	r0, [r0], #-10
 800a7d0:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 800a7d4:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 800a7d8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 800a7dc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a7e0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a7e4:	5020000a 	eorpl	r0, r0, sl
 800a7e8:	6f737265 	svcvs	0x00737265
 800a7ec:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 800a7f0:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 800a7f4:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 800a7f8:	20642520 	rsbcs	r2, r4, r0, lsr #10
 800a7fc:	2a2e255b 	bcs	8b93d70 <__exidx_end+0xb87970>
 800a800:	000a5d73 	andeq	r5, sl, r3, ror sp
 800a804:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 800a808:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a80c:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 800a810:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a814:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a818:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a81c:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 800a820:	73726f73 	cmnvc	r2, #460	; 0x1cc
 800a824:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a828:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a82c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a830:	000a6425 	andeq	r6, sl, r5, lsr #8

0800a834 <vtable for RDMDeviceResponder>:
	...
 800a83c:	08004391 	stmdaeq	r0, {r0, r4, r7, r8, r9, lr}
 800a840:	080043b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, lr}
 800a844:	0800438d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, lr}
 800a848:	0800438f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, r9, lr}
 800a84c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a850:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a854:	45004352 	strmi	r4, [r0, #-850]	; 0xfffffcae
 800a858:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 800a85c:	00646564 	rsbeq	r6, r4, r4, ror #10

0800a860 <UID_ALL>:
 800a860:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a864:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a868 <RDMHandler::PID_DEFINITIONS>:
 800a868:	00000060 	andeq	r0, r0, r0, rrx
 800a86c:	080048d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, lr}
	...
 800a87c:	01010000 	mrseq	r0, (UNDEF: 1)
 800a880:	00000080 	andeq	r0, r0, r0, lsl #1
 800a884:	080049d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, lr}
	...
 800a894:	01010100 	mrseq	r0, (UNDEF: 17)
 800a898:	00000081 	andeq	r0, r0, r1, lsl #1
 800a89c:	080049f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, lr}
	...
 800a8ac:	01010100 	mrseq	r0, (UNDEF: 17)
 800a8b0:	00000082 	andeq	r0, r0, r2, lsl #1
 800a8b4:	08004a15 	stmdaeq	r0, {r0, r2, r4, r9, fp, lr}
 800a8b8:	00000000 	andeq	r0, r0, r0
 800a8bc:	08005411 	stmdaeq	r0, {r0, r4, sl, ip, lr}
 800a8c0:	00000000 	andeq	r0, r0, r0
 800a8c4:	01010100 	mrseq	r0, (UNDEF: 17)
 800a8c8:	00000090 	muleq	r0, r0, r0
 800a8cc:	0800493d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, fp, lr}
 800a8d0:	00000000 	andeq	r0, r0, r0
 800a8d4:	08005359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, ip, lr}
 800a8d8:	00000000 	andeq	r0, r0, r0
 800a8dc:	01010100 	mrseq	r0, (UNDEF: 17)
 800a8e0:	00001000 	andeq	r1, r0, r0
 800a8e4:	08004a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, lr}
 800a8e8:	00000000 	andeq	r0, r0, r0
 800a8ec:	08004cf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, fp, lr}
 800a8f0:	00000000 	andeq	r0, r0, r0
 800a8f4:	01010000 	mrseq	r0, (UNDEF: 1)
 800a8f8:	00001001 	andeq	r1, r0, r1
	...
 800a904:	08004cad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, lr}
 800a908:	00000000 	andeq	r0, r0, r0
 800a90c:	01010100 	mrseq	r0, (UNDEF: 17)
 800a910:	00000050 	andeq	r0, r0, r0, asr r0
 800a914:	08004869 	stmdaeq	r0, {r0, r3, r5, r6, fp, lr}
	...
 800a924:	00010000 	andeq	r0, r1, r0
 800a928:	00000070 	andeq	r0, r0, r0, ror r0
 800a92c:	080049bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, fp, lr}
	...
 800a93c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a940:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a944:	08004a89 	stmdaeq	r0, {r0, r3, r7, r9, fp, lr}
	...
 800a954:	00010100 	andeq	r0, r1, r0, lsl #2
 800a958:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a95c:	08004a89 	stmdaeq	r0, {r0, r3, r7, r9, fp, lr}
 800a960:	00000000 	andeq	r0, r0, r0
 800a964:	08004d71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, lr}
 800a968:	00000000 	andeq	r0, r0, r0
 800a96c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a970:	000000c0 	andeq	r0, r0, r0, asr #1
 800a974:	08004a51 	stmdaeq	r0, {r0, r4, r6, r9, fp, lr}
	...
 800a984:	00010000 	andeq	r0, r1, r0
 800a988:	000000c1 	andeq	r0, r0, r1, asr #1
 800a98c:	08004db9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, fp, lr}
	...
 800a99c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a9a0:	000000c2 	andeq	r0, r0, r2, asr #1
 800a9a4:	08004bf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, fp, lr}
	...
 800a9b4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a9b8:	000000e0 	andeq	r0, r0, r0, ror #1
 800a9bc:	08004aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, lr}
 800a9c0:	00000000 	andeq	r0, r0, r0
 800a9c4:	08004dd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, lr}
 800a9c8:	00000000 	andeq	r0, r0, r0
 800a9cc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a9d0:	000000e1 	andeq	r0, r0, r1, ror #1
 800a9d4:	08004e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, lr}
	...
 800a9e4:	00010101 	andeq	r0, r1, r1, lsl #2
 800a9e8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a9ec:	08004ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, lr}
 800a9f0:	00000000 	andeq	r0, r0, r0
 800a9f4:	08004ead 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, fp, lr}
 800a9f8:	00000000 	andeq	r0, r0, r0
 800a9fc:	00010000 	andeq	r0, r1, r0
 800aa00:	00000120 	andeq	r0, r0, r0, lsr #2
 800aa04:	08004c15 	stmdaeq	r0, {r0, r2, r4, sl, fp, lr}
	...
 800aa14:	00010100 	andeq	r0, r1, r0, lsl #2
 800aa18:	00000121 	andeq	r0, r0, r1, lsr #2
 800aa1c:	080052e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, ip, lr}
	...
 800aa2c:	00010102 	andeq	r0, r1, r2, lsl #2
 800aa30:	00000200 	andeq	r0, r0, r0, lsl #4
 800aa34:	08004efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
	...
 800aa44:	00010101 	andeq	r0, r1, r1, lsl #2
 800aa48:	00000201 	andeq	r0, r0, r1, lsl #4
 800aa4c:	08004fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, lr}
 800aa50:	00000000 	andeq	r0, r0, r0
 800aa54:	0800502d 	stmdaeq	r0, {r0, r2, r3, r5, ip, lr}
 800aa58:	00000000 	andeq	r0, r0, r0
 800aa5c:	00010101 	andeq	r0, r1, r1, lsl #2
 800aa60:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800aa6c:	080050e1 	stmdaeq	r0, {r0, r5, r6, r7, ip, lr}
 800aa70:	00000000 	andeq	r0, r0, r0
 800aa74:	00010100 	andeq	r0, r1, r0, lsl #2
 800aa78:	00000400 	andeq	r0, r0, r0, lsl #8
 800aa7c:	08004b21 	stmdaeq	r0, {r0, r5, r8, r9, fp, lr}
 800aa80:	00000000 	andeq	r0, r0, r0
 800aa84:	0800512d 	stmdaeq	r0, {r0, r2, r3, r5, r8, ip, lr}
 800aa88:	00000000 	andeq	r0, r0, r0
 800aa8c:	00010100 	andeq	r0, r1, r0, lsl #2
 800aa90:	00000500 	andeq	r0, r0, r0, lsl #10
 800aa94:	08004b49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp, lr}
 800aa98:	00000000 	andeq	r0, r0, r0
 800aa9c:	08005135 	stmdaeq	r0, {r0, r2, r4, r5, r8, ip, lr}
 800aaa0:	00000000 	andeq	r0, r0, r0
 800aaa4:	00010100 	andeq	r0, r1, r0, lsl #2
 800aaa8:	00000501 	andeq	r0, r0, r1, lsl #10
 800aaac:	08004b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, lr}
 800aab0:	00000000 	andeq	r0, r0, r0
 800aab4:	08005181 	stmdaeq	r0, {r0, r7, r8, ip, lr}
 800aab8:	00000000 	andeq	r0, r0, r0
 800aabc:	00010100 	andeq	r0, r1, r0, lsl #2
 800aac0:	00000603 	andeq	r0, r0, r3, lsl #12
 800aac4:	08004b81 	stmdaeq	r0, {r0, r7, r8, r9, fp, lr}
 800aac8:	00000000 	andeq	r0, r0, r0
 800aacc:	080051c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, ip, lr}
 800aad0:	00000000 	andeq	r0, r0, r0
 800aad4:	00010100 	andeq	r0, r1, r0, lsl #2
 800aad8:	00001010 	andeq	r1, r0, r0, lsl r0
 800aadc:	08004bc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp, lr}
 800aae0:	00000000 	andeq	r0, r0, r0
 800aae4:	08005231 	stmdaeq	r0, {r0, r4, r5, r9, ip, lr}
 800aae8:	00000000 	andeq	r0, r0, r0
 800aaec:	00010100 	andeq	r0, r1, r0, lsl #2
 800aaf0:	00001020 	andeq	r1, r0, r0, lsr #32
 800aaf4:	08004bd7 	stmdaeq	r0, {r0, r1, r2, r4, r6, r7, r8, r9, fp, lr}
 800aaf8:	00000000 	andeq	r0, r0, r0
 800aafc:	0800525f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip, lr}
 800ab00:	00000000 	andeq	r0, r0, r0
 800ab04:	00010100 	andeq	r0, r1, r0, lsl #2
 800ab08:	00001021 	andeq	r1, r0, r1, lsr #32
 800ab0c:	08005293 	stmdaeq	r0, {r0, r1, r4, r7, r9, ip, lr}
	...
 800ab1c:	00010101 	andeq	r0, r1, r1, lsl #2
 800ab20:	00001040 	andeq	r1, r0, r0, asr #32
 800ab24:	080056e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, ip, lr}
 800ab28:	00000000 	andeq	r0, r0, r0
 800ab2c:	080056f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, ip, lr}
 800ab30:	00000000 	andeq	r0, r0, r0
 800ab34:	00010100 	andeq	r0, r1, r0, lsl #2

0800ab38 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800ab38:	00000060 	andeq	r0, r0, r0, rrx
 800ab3c:	080048d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, lr}
	...
 800ab4c:	00010100 	andeq	r0, r1, r0, lsl #2
 800ab50:	000000c0 	andeq	r0, r0, r0, asr #1
 800ab54:	08004a51 	stmdaeq	r0, {r0, r4, r6, r9, fp, lr}
	...
 800ab64:	00010100 	andeq	r0, r1, r0, lsl #2
 800ab68:	00001000 	andeq	r1, r0, r0
 800ab6c:	08004a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, lr}
 800ab70:	00000000 	andeq	r0, r0, r0
 800ab74:	08004cf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, fp, lr}
 800ab78:	00000000 	andeq	r0, r0, r0
 800ab7c:	00010100 	andeq	r0, r1, r0, lsl #2
 800ab80:	00000050 	andeq	r0, r0, r0, asr r0
 800ab84:	08004869 	stmdaeq	r0, {r0, r3, r5, r6, fp, lr}
	...
 800ab94:	00010100 	andeq	r0, r1, r0, lsl #2
 800ab98:	00000070 	andeq	r0, r0, r0, ror r0
 800ab9c:	080049bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, fp, lr}
	...
 800abac:	00010100 	andeq	r0, r1, r0, lsl #2
 800abb0:	000000e0 	andeq	r0, r0, r0, ror #1
 800abb4:	08004aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, lr}
 800abb8:	00000000 	andeq	r0, r0, r0
 800abbc:	08004dd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, lr}
 800abc0:	00000000 	andeq	r0, r0, r0
 800abc4:	00010100 	andeq	r0, r1, r0, lsl #2
 800abc8:	000000e1 	andeq	r0, r0, r1, ror #1
 800abcc:	08004e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, lr}
	...
 800abdc:	00010101 	andeq	r0, r1, r1, lsl #2
 800abe0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800abe4:	08004ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, lr}
 800abe8:	00000000 	andeq	r0, r0, r0
 800abec:	08004ead 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, fp, lr}
 800abf0:	00000000 	andeq	r0, r0, r0
 800abf4:	00010100 	andeq	r0, r1, r0, lsl #2
 800abf8:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800abfc:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800ac00:	6f697469 	svcvs	0x00697469
 800ac04:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800ac08:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800ac0c:	00797469 	rsbseq	r7, r9, r9, ror #8
 800ac10:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800ac14:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800ac18:	614d2079 	hvcvs	53769	; 0xd209
 800ac1c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800ac20:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800ac24:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800ac28:	6f430074 	svcvs	0x00430074
 800ac2c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800ac30:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800ac34:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800ac38:	61727462 	cmnvs	r2, r2, ror #8
 800ac3c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800ac40:	6f432065 	svcvs	0x00432065
 800ac44:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800ac48:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800ac4c:	80e22072 	rschi	r2, r2, r2, ror r0
 800ac50:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800ac54:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800ac58:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800ac5c:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800ac60:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800ac64:	20657669 	rsbcs	r7, r5, r9, ror #12
 800ac68:	6f6c6f43 	svcvs	0x006c6f43
 800ac6c:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800ac70:	20726578 	rsbscs	r6, r2, r8, ror r5
 800ac74:	209380e2 	addscs	r8, r3, r2, ror #1
 800ac78:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800ac7c:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800ac80:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800ac84:	62755300 	rsbsvs	r5, r5, #0, 6
 800ac88:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800ac8c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800ac90:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800ac18 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800ac94:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800ac98:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800ac9c:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800aca0:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800aca4:	41006174 	tstmi	r0, r4, ror r1
 800aca8:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800acac:	20657669 	rsbcs	r7, r5, r9, ror #12
 800acb0:	6f6c6f43 	svcvs	0x006c6f43
 800acb4:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800acb8:	20726578 	rsbscs	r6, r2, r8, ror r5
 800acbc:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800acc0:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800acc4:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800acc8:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800accc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800acd0:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800acd4:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800acd8:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800acdc:	41006e65 	tstmi	r0, r5, ror #28
 800ace0:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800ace4:	20657669 	rsbcs	r7, r5, r9, ror #12
 800ace8:	6f6c6f43 	svcvs	0x006c6f43
 800acec:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800acf0:	20726578 	rsbscs	r6, r2, r8, ror r5
 800acf4:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800acf8:	43006575 	movwmi	r6, #1397	; 0x575
 800acfc:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800ad00:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800ad04:	61726570 	cmnvs	r2, r0, ror r5
 800ad08:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800ad0c:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800ad10:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800ad14:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800ad18:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800ad1c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800ad20:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800aca8 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800ad24:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800ad28:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800ad2c:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800ad30:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800ad34:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800ad38:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800ad3c:	6f432065 	svcvs	0x00432065
 800ad40:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800ad44:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800ad48:	202d2072 	eorcs	r2, sp, r2, ror r0
 800ad4c:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800ad50:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800ad54:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800ad58:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800ad5c:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800ad60:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800ad64:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800ad68:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800ad6c:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800ad70:	00657469 	rsbeq	r7, r5, r9, ror #8
 800ad74:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800ad78:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800ad7c:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800ad04 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800ad80:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800ad84:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800ad88:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800ad8c:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800ad90:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800ad94:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800ad98:	61727462 	cmnvs	r2, r2, ror #8
 800ad9c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800ada0:	6f432065 	svcvs	0x00432065
 800ada4:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800ada8:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800adac:	202d2072 	eorcs	r2, sp, r2, ror r0
 800adb0:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800adb4:	53006575 	movwpl	r6, #1397	; 0x575
 800adb8:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800adbc:	6f697461 	svcvs	0x00697461
 800adc0:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800adc4:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800adc8:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800adcc:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800add0:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800add4:	61746f52 	cmnvs	r4, r2, asr pc
 800add8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800addc:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800ade0:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800ade4:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ade8:	73697250 	cmnvc	r9, #80, 4
 800adec:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800adf0:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800adf4:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800adf8:	20737463 	rsbscs	r7, r3, r3, ror #8
 800adfc:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800ae00:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800ae04:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800ae08:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800ae0c:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800ae10:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800ae14:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800ae18:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800ae1c:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800ae20:	6f724600 	svcvs	0x00724600
 800ae24:	442f7473 	strtmi	r7, [pc], #-1139	; 800ae2c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800ae28:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800ae2c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800ae30:	72745300 	rsbsvc	r5, r4, #0, 6
 800ae34:	2f65626f 	svccs	0x0065626f
 800ae38:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800ae3c:	00726574 	rsbseq	r6, r2, r4, ror r5
 800ae40:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800ace0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800ae44:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800ae48:	72460073 	subvc	r0, r6, #115	; 0x73
 800ae4c:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800ae50:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800ae54:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800ae58:	72460072 	subvc	r0, r6, #114	; 0x72
 800ae5c:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800ae60:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800ae64:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800ae68:	6f722072 	svcvs	0x00722072
 800ae6c:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800ae70:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800ae74:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800ae78:	61420072 	hvcvs	8194	; 0x2002
 800ae7c:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800ae80:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800ae84:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800ae88:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800ae8c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800acc4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800ae90:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800ae94:	6f697463 	svcvs	0x00697463
 800ae98:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800ae9c:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800aea0:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800aea4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aea8:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800aeac:	6e6e6168 	powvsez	f6, f6, #0.0
 800aeb0:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800aeb4:	6f726361 	svcvs	0x00726361
 800aeb8:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800aebc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800acf4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800aec0:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800aec4:	6f207961 	svcvs	0x00207961
 800aec8:	6f702072 	svcvs	0x00702072
 800aecc:	20726577 	rsbscs	r6, r2, r7, ror r5
 800aed0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800aed4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800aed8:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800aedc:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800aee0:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800aee4:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800aee8:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800aeec:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aef0:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800aef4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800aef8:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800aefc:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800af00:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800af04:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800af08:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800af0c:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800af10:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800af18 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800af14:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800af18:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800af1c:	6f632079 	svcvs	0x00632079
 800af20:	6f72746e 	svcvs	0x0072746e
 800af24:	7020736c 	eorvc	r7, r0, ip, ror #6
 800af28:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800af2c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800af30:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800af34:	73657270 	cmnvc	r5, #112, 4
 800af38:	73746e65 	cmnvc	r4, #1616	; 0x650
 800af3c:	616f4320 	cmnvs	pc, r0, lsr #6
 800af40:	20657372 	rsbcs	r7, r5, r2, ror r3
 800af44:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800af48:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800af4c:	70207469 	eorvc	r7, r0, r9, ror #8
 800af50:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800af54:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800af58:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800af5c:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800af60:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800af64:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800af68:	20746962 	rsbscs	r6, r4, r2, ror #18
 800af6c:	61726170 	cmnvs	r2, r0, ror r1
 800af70:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800af74:	53007372 	movwpl	r7, #882	; 0x372
 800af78:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800af7c:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800af80:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800af84:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800af88:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800af8c:	6f662065 	svcvs	0x00662065
 800af90:	73612072 	cmnvc	r1, #114	; 0x72
 800af94:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800af98:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800af9c:	72617020 	rsbvc	r7, r1, #32
 800afa0:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800afa4:	53007265 	movwpl	r7, #613	; 0x265
 800afa8:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800afac:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800afb0:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800afb4:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800afb8:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800afbc:	20797469 	rsbscs	r7, r9, r9, ror #8
 800afc0:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800afc4:	6f737361 	svcvs	0x00737361
 800afc8:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800afcc:	70206465 	eorvc	r6, r0, r5, ror #8
 800afd0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800afd4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800afd8:	6f6c5300 	svcvs	0x006c5300
 800afdc:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800afe0:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800afe4:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800afe8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800afec:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800ae38 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800aff0:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800aff4:	6f666e69 	svcvs	0x00666e69
 800aff8:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800affc:	72617020 	rsbvc	r7, r1, #32
 800b000:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800b004:	53007265 	movwpl	r7, #613	; 0x265
 800b008:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800b00c:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800b010:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800b014:	70207865 	eorvc	r7, r0, r5, ror #16
 800b018:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800b01c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800b020:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800b024:	6f737361 	svcvs	0x00737361
 800b028:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800b02c:	70206465 	eorvc	r6, r0, r5, ror #8
 800b030:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800b034:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800b038:	6f6c5300 	svcvs	0x006c5300
 800b03c:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800b040:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800b044:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800b048:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800b04c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800b050:	6f662064 	svcvs	0x00662064
 800b054:	73612072 	cmnvc	r1, #114	; 0x72
 800b058:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800b05c:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800b060:	72617020 	rsbvc	r7, r1, #32
 800b064:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800b068:	43007265 	movwmi	r7, #613	; 0x265
 800b06c:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800b070:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800b074:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800b078:	6f722f78 	svcvs	0x00722f78
 800b07c:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800b080:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800b084:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800b088:	00006c6f 	andeq	r6, r0, pc, ror #24

0800b08c <s_tTableC2>:
 800b08c:	00000001 	andeq	r0, r0, r1
 800b090:	0800ac06 	stmdaeq	r0, {r1, r2, sl, fp, sp, pc}
 800b094:	00000002 	andeq	r0, r0, r2
 800b098:	0800ac10 	stmdaeq	r0, {r4, sl, fp, sp, pc}
 800b09c:	00000101 	andeq	r0, r0, r1, lsl #2
 800b0a0:	0800ac21 	stmdaeq	r0, {r0, r5, sl, fp, sp, pc}
 800b0a4:	00000102 	andeq	r0, r0, r2, lsl #2
 800b0a8:	0800ac25 	stmdaeq	r0, {r0, r2, r5, sl, fp, sp, pc}
 800b0ac:	00000201 	andeq	r0, r0, r1, lsl #4
 800b0b0:	0800ac2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, sp, pc}
 800b0b4:	00000202 	andeq	r0, r0, r2, lsl #4
 800b0b8:	0800ac36 	stmdaeq	r0, {r1, r2, r4, r5, sl, fp, sp, pc}
 800b0bc:	00000203 	andeq	r0, r0, r3, lsl #4
 800b0c0:	0800ac5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, sp, pc}
 800b0c4:	00000204 	andeq	r0, r0, r4, lsl #4
 800b0c8:	0800ac85 	stmdaeq	r0, {r0, r2, r7, sl, fp, sp, pc}
 800b0cc:	00000205 	andeq	r0, r0, r5, lsl #4
 800b0d0:	0800aca7 	stmdaeq	r0, {r0, r1, r2, r5, r7, sl, fp, sp, pc}
 800b0d4:	00000206 	andeq	r0, r0, r6, lsl #4
 800b0d8:	0800acc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, sp, pc}
 800b0dc:	00000207 	andeq	r0, r0, r7, lsl #4
 800b0e0:	0800acdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, fp, sp, pc}
 800b0e4:	00000208 	andeq	r0, r0, r8, lsl #4
 800b0e8:	0800acfb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, sl, fp, sp, pc}
 800b0ec:	00000211 	andeq	r0, r0, r1, lsl r2
 800b0f0:	0800ad18 	stmdaeq	r0, {r3, r4, r8, sl, fp, sp, pc}
 800b0f4:	00000212 	andeq	r0, r0, r2, lsl r2
 800b0f8:	0800ad35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, sp, pc}
 800b0fc:	00000213 	andeq	r0, r0, r3, lsl r2
 800b100:	0800ad52 	stmdaeq	r0, {r1, r4, r6, r8, sl, fp, sp, pc}
 800b104:	00000214 	andeq	r0, r0, r4, lsl r2
 800b108:	0800ad74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, sp, pc}
 800b10c:	00000215 	andeq	r0, r0, r5, lsl r2
 800b110:	0800ad96 	stmdaeq	r0, {r1, r2, r4, r7, r8, sl, fp, sp, pc}
 800b114:	00000216 	andeq	r0, r0, r6, lsl r2
 800b118:	0800adb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sl, fp, sp, pc}
 800b11c:	00000217 	andeq	r0, r0, r7, lsl r2
 800b120:	0800adb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, sl, fp, sp, pc}
 800b124:	00000301 	andeq	r0, r0, r1, lsl #6
 800b128:	0800adc2 	stmdaeq	r0, {r1, r6, r7, r8, sl, fp, sp, pc}
 800b12c:	00000302 	andeq	r0, r0, r2, lsl #6
 800b130:	0800add4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, sp, pc}
 800b134:	00000303 	andeq	r0, r0, r3, lsl #6
 800b138:	0800ade8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, fp, sp, pc}
 800b13c:	00000304 	andeq	r0, r0, r4, lsl #6
 800b140:	0800adf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, sp, pc}
 800b144:	00000401 	andeq	r0, r0, r1, lsl #8
 800b148:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}
 800b14c:	00000402 	andeq	r0, r0, r2, lsl #8
 800b150:	0800ae11 	stmdaeq	r0, {r0, r4, r9, sl, fp, sp, pc}
 800b154:	00000403 	andeq	r0, r0, r3, lsl #8
 800b158:	0800ae21 	stmdaeq	r0, {r0, r5, r9, sl, fp, sp, pc}
 800b15c:	00000404 	andeq	r0, r0, r4, lsl #8
 800b160:	0800ae31 	stmdaeq	r0, {r0, r4, r5, r9, sl, fp, sp, pc}
 800b164:	00000405 	andeq	r0, r0, r5, lsl #8
 800b168:	0800ae40 	stmdaeq	r0, {r6, r9, sl, fp, sp, pc}
 800b16c:	00000406 	andeq	r0, r0, r6, lsl #8
 800b170:	0800ae4a 	stmdaeq	r0, {r1, r3, r6, r9, sl, fp, sp, pc}
 800b174:	00000407 	andeq	r0, r0, r7, lsl #8
 800b178:	0800ae5a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sl, fp, sp, pc}
 800b17c:	00000408 	andeq	r0, r0, r8, lsl #8
 800b180:	0800ae73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sl, fp, sp, pc}
 800b184:	00000409 	andeq	r0, r0, r9, lsl #8
 800b188:	0800ae7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, fp, sp, pc}
 800b18c:	00000501 	andeq	r0, r0, r1, lsl #10
 800b190:	0800ae84 	stmdaeq	r0, {r2, r7, r9, sl, fp, sp, pc}
 800b194:	00000502 	andeq	r0, r0, r2, lsl #10
 800b198:	0800ae9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r9, sl, fp, sp, pc}
 800b19c:	00000504 	andeq	r0, r0, r4, lsl #10
 800b1a0:	0800aeb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, sl, fp, sp, pc}
 800b1a4:	00000505 	andeq	r0, r0, r5, lsl #10
 800b1a8:	0800aec1 	stmdaeq	r0, {r0, r6, r7, r9, sl, fp, sp, pc}
 800b1ac:	00000506 	andeq	r0, r0, r6, lsl #10
 800b1b0:	0800aed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, sp, pc}
 800b1b4:	00000507 	andeq	r0, r0, r7, lsl #10
 800b1b8:	0800aee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp, pc}
 800b1bc:	00000508 	andeq	r0, r0, r8, lsl #10
 800b1c0:	0800aef3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 800b1c4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800b1c8:	0800abf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 800b1cc:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800b1d0:	2f2f3a73 	svccs	0x002f3a73
 800b1d4:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 800b1d8:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 800b1dc:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 800b1e0:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800b1e4:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800b1e8:	20656369 	rsbcs	r6, r5, r9, ror #6
 800b1ec:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 800b1f0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 800b1f4:	6f697461 	svcvs	0x00697461
 800b1f8:	20000a6e 	andcs	r0, r0, lr, ror #20
 800b1fc:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 800b200:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 800b204:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 800b208:	6d614e20 	stclvs	14, cr4, [r1, #-128]!	; 0xffffff80
 800b20c:	203a2065 	eorscs	r2, sl, r5, rrx
 800b210:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800b214:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800b218:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800b21c:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800b220:	20726572 	rsbscs	r6, r2, r2, ror r5
 800b224:	20204449 	eorcs	r4, r0, r9, asr #8
 800b228:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b22c:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800b230:	0a58322e 	beq	9617af0 <__exidx_end+0x160b6f0>
 800b234:	65532000 	ldrbvs	r2, [r3, #-0]
 800b238:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
 800b23c:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
 800b240:	20726562 	rsbscs	r6, r2, r2, ror #10
 800b244:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b248:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b24c:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800b250:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800b254:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800b258:	000a5832 	andeq	r5, sl, r2, lsr r8
 800b25c:	6f6f5220 	svcvs	0x006f5220
 800b260:	616c2074 	smcvs	49668	; 0xc204
 800b264:	206c6562 	rsbcs	r6, ip, r2, ror #10
 800b268:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b26c:	3a202020 	bcc	88132f4 <__exidx_end+0x806ef4>
 800b270:	2a2e2520 	bcs	8b946f8 <__exidx_end+0xb882f8>
 800b274:	20000a73 	andcs	r0, r0, r3, ror sl
 800b278:	646f7250 	strbtvs	r7, [pc], #-592	; 800b280 <s_tTableC2+0x1f4>
 800b27c:	20746375 	rsbscs	r6, r4, r5, ror r3
 800b280:	65746143 	ldrbvs	r6, [r4, #-323]!	; 0xfffffebd
 800b284:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
 800b288:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800b28c:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800b290:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800b294:	5020000a 	eorpl	r0, r0, sl
 800b298:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800b29c:	44207463 	strtmi	r7, [r0], #-1123	; 0xfffffb9d
 800b2a0:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 800b2a4:	2020206c 	eorcs	r2, r0, ip, rrx
 800b2a8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b2ac:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800b2b0:	0a58322e 	beq	9617b70 <__exidx_end+0x160b770>
	...

0800b2b5 <DEVICE_LABEL>:
 800b2b5:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800b2b9:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800b2bd:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 800b2c1:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 800b2c5:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 800b2c9:	 	subseq	r0, r0, r5, rrx

0800b2cb <RDMConst::MANUFACTURER_ID>:
 800b2cb:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800b2cd <RDMConst::MANUFACTURER_NAME>:
 800b2cd:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800b2d1:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800b2d5:	6f2e7777 	svcvs	0x002e7777
 800b2d9:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800b2dd:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800b2e1:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800b2e5:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800b2e9:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800b2ed:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800b2f1:	6f632058 	svcvs	0x00632058
 800b2f5:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800b2f9:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800b2fd:	0a6e6f69 	beq	9ba70a9 <__exidx_end+0x1b9aca9>
 800b301:	754f2000 	strbvc	r2, [pc, #-0]	; 800b309 <RDMConst::MANUFACTURER_NAME+0x3c>
 800b305:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800b309:	203a2073 	eorscs	r2, sl, r3, ror r0
 800b30d:	000a6425 	andeq	r6, sl, r5, lsr #8
 800b311:	6f724720 	svcvs	0x00724720
 800b315:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 800b319:	6f632067 	svcvs	0x00632067
 800b31d:	20746e75 	rsbscs	r6, r4, r5, ror lr
 800b321:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800b325:	72475b20 	subvc	r5, r7, #32, 22	; 0x8000
 800b329:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
 800b32d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b331:	000a5d64 	andeq	r5, sl, r4, ror #26
 800b335:	 	andeq	r0, r0, r0

0800b338 <vtable for WS28xxDmx>:
	...
 800b340:	08005a01 	stmdaeq	r0, {r0, r9, fp, ip, lr}
 800b344:	08005a21 	stmdaeq	r0, {r0, r5, r9, fp, ip, lr}
 800b348:	08005b75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, ip, lr}
 800b34c:	08005b8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, ip, lr}
 800b350:	08005a59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp, ip, lr}
 800b354:	08005a33 	stmdaeq	r0, {r0, r1, r4, r5, r9, fp, ip, lr}
 800b358:	08005b59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
 800b35c:	08005b6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp, ip, lr}
 800b360:	08005ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, ip, lr}
 800b364:	080059f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, ip, lr}
 800b368:	080059fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 800b36c:	08005bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}

0800b370 <vtable for PixelDmxParamsRdm>:
	...
 800b378:	08005d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
 800b37c:	08005d7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}
 800b380:	08005d67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, fp, ip, lr}
 800b384:	08005d67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, sl, fp, ip, lr}
 800b388:	08005da1 	stmdaeq	r0, {r0, r5, r7, r8, sl, fp, ip, lr}
 800b38c:	08005d55 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, fp, ip, lr}
 800b390:	08005d57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl, fp, ip, lr}
 800b394:	08005d59 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, fp, ip, lr}
 800b398:	08005d5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, sl, fp, ip, lr}
 800b39c:	08005d5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, sl, fp, ip, lr}
 800b3a0:	08005d63 	stmdaeq	r0, {r0, r1, r5, r6, r8, sl, fp, ip, lr}
 800b3a4:	08005d69 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, fp, ip, lr}
 800b3a8:	00736559 	rsbseq	r6, r3, r9, asr r5
 800b3ac:	50006f4e 	andpl	r6, r0, lr, asr #30
 800b3b0:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800b3b4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800b3b8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800b3bc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800b3c0:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800b3c4:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 800b3c8:	20202065 	eorcs	r2, r0, r5, rrx
 800b3cc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b3d0:	255b2073 	ldrbcs	r2, [fp, #-115]	; 0xffffff8d
 800b3d4:	000a5d64 	andeq	r5, sl, r4, ror #26
 800b3d8:	756f4320 	strbvc	r4, [pc, #-800]!	; 800b0c0 <s_tTableC2+0x34>
 800b3dc:	2020746e 	eorcs	r7, r0, lr, ror #8
 800b3e0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b3e4:	20000a64 	andcs	r0, r0, r4, ror #20
 800b3e8:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 800b3ec:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800b3f0:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 800b3f4:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800b3f8:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b3fc:	20483054 	subcs	r3, r8, r4, asr r0
 800b400:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b404:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b408:	5b206632 	blpl	8824cd8 <__exidx_end+0x8188d8>
 800b40c:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b410:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b414:	20483154 	subcs	r3, r8, r4, asr r1
 800b418:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b41c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b420:	5b206632 	blpl	8824cf0 <__exidx_end+0x8188f0>
 800b424:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b428:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b42c:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
 800b430:	72426c61 	subvc	r6, r2, #24832	; 0x6100
 800b434:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 800b438:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
 800b43c:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800b440:	4720000a 	strmi	r0, [r0, -sl]!
 800b444:	616d6d61 	cmnvs	sp, r1, ror #26
 800b448:	726f6320 	rsbvc	r6, pc, #32, 6	; 0x80000000
 800b44c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800b450:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800b454:	000a7325 	andeq	r7, sl, r5, lsr #6
 800b458:	6f6c4320 	svcvs	0x006c4320
 800b45c:	203a6b63 	eorscs	r6, sl, r3, ror #22
 800b460:	48207525 	stmdami	r0!, {r0, r2, r5, r8, sl, ip, sp, lr}
 800b464:	00000a7a 	andeq	r0, r0, sl, ror sl

0800b468 <CSWTCH.9>:
 800b468:	0800b67c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, ip, sp, pc}
 800b46c:	0800b77c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, ip, sp, pc}
 800b470:	0800b87c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, ip, sp, pc}
 800b474:	0800b97c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 800b478:	0800ba7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, fp, ip, sp, pc}

0800b47c <gamma10_0>:
 800b47c:	03020100 	movweq	r0, #8448	; 0x2100
 800b480:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800b484:	0b0a0908 	bleq	828d8ac <__exidx_end+0x2814ac>
 800b488:	0f0e0d0c 	svceq	0x000e0d0c
 800b48c:	13121110 	tstne	r2, #16, 2
 800b490:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b494:	1b1a1918 	blne	86918fc <__exidx_end+0x6854fc>
 800b498:	1f1e1d1c 	svcne	0x001e1d1c
 800b49c:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b4a0:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b4a4:	2b2a2928 	blcs	8a9594c <__exidx_end+0xa8954c>
 800b4a8:	2f2e2d2c 	svccs	0x002e2d2c
 800b4ac:	33323130 	teqcc	r2, #48, 2
 800b4b0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b4b4:	3b3a3938 	blcc	8e9999c <__exidx_end+0xe8d59c>
 800b4b8:	3f3e3d3c 	svccc	0x003e3d3c
 800b4bc:	43424140 	movtmi	r4, #8512	; 0x2140
 800b4c0:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b4c4:	4b4a4948 	blmi	929d9ec <__exidx_end+0x12915ec>
 800b4c8:	4f4e4d4c 	svcmi	0x004e4d4c
 800b4cc:	53525150 	cmppl	r2, #80, 2
 800b4d0:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b4d4:	5b5a5958 	blpl	96a1a3c <__exidx_end+0x169563c>
 800b4d8:	5f5e5d5c 	svcpl	0x005e5d5c
 800b4dc:	63626160 	cmnvs	r2, #96, 2
 800b4e0:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b4e4:	6b6a6968 	blvs	9aa5a8c <__exidx_end+0x1a9968c>
 800b4e8:	6f6e6d6c 	svcvs	0x006e6d6c
 800b4ec:	73727170 	cmnvc	r2, #112, 2
 800b4f0:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b4f4:	7b7a7978 	blvc	9ea9adc <__exidx_end+0x1e9d6dc>
 800b4f8:	7f7e7d7c 	svcvc	0x007e7d7c
 800b4fc:	83828180 	orrhi	r8, r2, #128, 2
 800b500:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b504:	8b8a8988 	blhi	62adb2c <__heap_size+0x62acb2c>
 800b508:	8f8e8d8c 	svchi	0x008e8d8c
 800b50c:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b510:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b514:	9b9a9998 	blls	66b1b7c <__heap_size+0x66b0b7c>
 800b518:	9f9e9d9c 	svcls	0x009e9d9c
 800b51c:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b520:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b524:	abaaa9a8 	blge	6ab5bcc <__heap_size+0x6ab4bcc>
 800b528:	afaeadac 	svcge	0x00aeadac
 800b52c:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b530:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b534:	bbbab9b8 	bllt	6eb9c1c <__heap_size+0x6eb8c1c>
 800b538:	bfbebdbc 	svclt	0x00bebdbc
 800b53c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b540:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b544:	cbcac9c8 	blgt	72bdc6c <__heap_size+0x72bcc6c>
 800b548:	cfcecdcc 	svcgt	0x00cecdcc
 800b54c:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b550:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b554:	dbdad9d8 	blle	76c1cbc <__heap_size+0x76c0cbc>
 800b558:	dfdedddc 	svcle	0x00dedddc
 800b55c:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b560:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b564:	ebeae9e8 	bl	7ac5d0c <__heap_size+0x7ac4d0c>
 800b568:	efeeedec 	svc	0x00eeedec
 800b56c:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b570:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b574:	fbfaf9f8 	blx	7ec9d5e <__heap_size+0x7ec8d5e>
 800b578:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0800b57c <gamma20_0>:
	...
 800b588:	01010101 	tsteq	r1, r1, lsl #2
 800b58c:	01010101 	tsteq	r1, r1, lsl #2
 800b590:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b594:	03030202 	movweq	r0, #12802	; 0x3202
 800b598:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b59c:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b5a0:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b5a4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b5a8:	09080808 	stmdbeq	r8, {r3, fp}
 800b5ac:	0a0a0909 	beq	828d9d8 <__exidx_end+0x2815d8>
 800b5b0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b5b4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b5b8:	100f0f0e 	andne	r0, pc, lr, lsl #30
 800b5bc:	12111110 	andsne	r1, r1, #16, 2
 800b5c0:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b5c4:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b5c8:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b5cc:	1b1a1a19 	blne	8691e38 <__exidx_end+0x685a38>
 800b5d0:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b5d4:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b5d8:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b5dc:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b5e0:	2a292827 	bcs	8a55684 <__exidx_end+0xa49284>
 800b5e4:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b5e8:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 800b5ec:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b5f0:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b5f4:	3b3a3938 	blcc	8e99adc <__exidx_end+0xe8d6dc>
 800b5f8:	3f3e3d3c 	svccc	0x003e3d3c
 800b5fc:	43424140 	movtmi	r4, #8512	; 0x2140
 800b600:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b604:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b608:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b60c:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 800b610:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 800b614:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 800b618:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b61c:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 800b620:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 800b624:	7371706f 	cmnvc	r1, #111	; 0x6f
 800b628:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 800b62c:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 800b630:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 800b634:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 800b638:	8f8e8c8b 	svchi	0x008e8c8b
 800b63c:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 800b640:	9b9a9897 	blls	66b18a4 <__heap_size+0x66b08a4>
 800b644:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 800b648:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b64c:	afadabaa 	svcge	0x00adabaa
 800b650:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 800b654:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 800b658:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 800b65c:	cac8c7c5 	bgt	723d578 <__heap_size+0x723c578>
 800b660:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 800b664:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b668:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 800b66c:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 800b670:	efedebe9 	svc	0x00edebe9
 800b674:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b678:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b67c <gamma21_0>:
	...
 800b688:	01010000 	mrseq	r0, (UNDEF: 1)
 800b68c:	01010101 	tsteq	r1, r1, lsl #2
 800b690:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b694:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b698:	03030302 	movweq	r0, #13058	; 0x3302
 800b69c:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b6a0:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b6a4:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b6a8:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b6ac:	09080808 	stmdbeq	r8, {r3, fp}
 800b6b0:	0a0a0909 	beq	828dadc <__exidx_end+0x2816dc>
 800b6b4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b6b8:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b6bc:	0f0f0e0e 	svceq	0x000f0e0e
 800b6c0:	11111010 	tstne	r1, r0, lsl r0
 800b6c4:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 800b6c8:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b6cc:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 800b6d0:	1b1a1919 	blne	8691b3c <__exidx_end+0x68573c>
 800b6d4:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 800b6d8:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 800b6dc:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b6e0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b6e4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b6e8:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 800b6ec:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b6f0:	33333231 	teqcc	r3, #268435459	; 0x10000003
 800b6f4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b6f8:	3b3a3938 	blcc	8e99be0 <__exidx_end+0xe8d7e0>
 800b6fc:	3f3e3d3c 	svccc	0x003e3d3c
 800b700:	43424140 	movtmi	r4, #8512	; 0x2140
 800b704:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b708:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 800b70c:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b710:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 800b714:	5a585756 	bpl	9621474 <__exidx_end+0x1615074>
 800b718:	5f5d5c5b 	svcpl	0x005d5c5b
 800b71c:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 800b720:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b724:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 800b728:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 800b72c:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b730:	7f7e7c7b 	svcvc	0x007e7c7b
 800b734:	85838281 	strhi	r8, [r3, #641]	; 0x281
 800b738:	8b898886 	blhi	626d958 <__heap_size+0x626c958>
 800b73c:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 800b740:	97969493 			; <UNDEFINED> instruction: 0x97969493
 800b744:	9e9c9b99 	vmovls.32	r9, d28[0]
 800b748:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b74c:	abaaa8a6 	blge	6ab59ec <__heap_size+0x6ab49ec>
 800b750:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 800b754:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 800b758:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 800b75c:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 800b760:	cfcdcbca 	svcgt	0x00cdcbca
 800b764:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 800b768:	dfdddbd9 	svcle	0x00dddbd9
 800b76c:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 800b770:	eeeceae8 	vfms.f32	s29, s25, s17
 800b774:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b778:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b77c <gamma22_0>:
	...
 800b788:	01000000 	mrseq	r0, (UNDEF: 0)
 800b78c:	01010101 	tsteq	r1, r1, lsl #2
 800b790:	01010101 	tsteq	r1, r1, lsl #2
 800b794:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b798:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b79c:	03030303 	movweq	r0, #13059	; 0x3303
 800b7a0:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 800b7a4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b7a8:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b7ac:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b7b0:	09080808 	stmdbeq	r8, {r3, fp}
 800b7b4:	0a0a0909 	beq	828dbe0 <__exidx_end+0x2817e0>
 800b7b8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b7bc:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b7c0:	0f0f0e0e 	svceq	0x000f0e0e
 800b7c4:	11111010 	tstne	r1, r0, lsl r0
 800b7c8:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b7cc:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b7d0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b7d4:	1a1a1919 	bne	8691c40 <__exidx_end+0x685840>
 800b7d8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b7dc:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b7e0:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b7e4:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b7e8:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b7ec:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b7f0:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b7f4:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b7f8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b7fc:	3b3a3938 	blcc	8e99ce4 <__exidx_end+0xe8d8e4>
 800b800:	3f3e3d3c 	svccc	0x003e3d3c
 800b804:	43424140 	movtmi	r4, #8512	; 0x2140
 800b808:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b80c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b810:	514f4e4d 	cmppl	pc, sp, asr #28
 800b814:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 800b818:	5a595857 	bpl	966197c <__exidx_end+0x165557c>
 800b81c:	5f5e5d5b 	svcpl	0x005e5d5b
 800b820:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 800b824:	6a696766 	bvs	9a655c4 <__exidx_end+0x1a591c4>
 800b828:	6f6e6d6b 	svcvs	0x006e6d6b
 800b82c:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b830:	7b797877 	blvc	9e69a14 <__exidx_end+0x1e5d614>
 800b834:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 800b838:	87858482 	strhi	r8, [r5, r2, lsl #9]
 800b83c:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 800b840:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 800b844:	9a999795 	bls	66716a0 <__heap_size+0x66706a0>
 800b848:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 800b84c:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b850:	afadacaa 	svcge	0x00adacaa
 800b854:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 800b858:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 800b85c:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 800b860:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 800b864:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 800b868:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 800b86c:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 800b870:	eeeceae7 	vfms.f32	s29, s25, s15
 800b874:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 800b878:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0800b87c <gamma23_0>:
	...
 800b88c:	01010100 	mrseq	r0, (UNDEF: 17)
 800b890:	01010101 	tsteq	r1, r1, lsl #2
 800b894:	01010101 	tsteq	r1, r1, lsl #2
 800b898:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b89c:	03020202 	movweq	r0, #8706	; 0x2202
 800b8a0:	03030303 	movweq	r0, #13059	; 0x3303
 800b8a4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b8a8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b8ac:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b8b0:	07070707 	streq	r0, [r7, -r7, lsl #14]
 800b8b4:	09080808 	stmdbeq	r8, {r3, fp}
 800b8b8:	0a0a0a09 	beq	828e0e4 <__exidx_end+0x281ce4>
 800b8bc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b8c0:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b8c4:	0f0f0e0e 	svceq	0x000f0e0e
 800b8c8:	11111010 	tstne	r1, r0, lsl r0
 800b8cc:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b8d0:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 800b8d4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b8d8:	1a1a1918 	bne	8691d40 <__exidx_end+0x685940>
 800b8dc:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b8e0:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b8e4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b8e8:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b8ec:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 800b8f0:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 800b8f4:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b8f8:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b8fc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b900:	3b3a3938 	blcc	8e99de8 <__exidx_end+0xe8d9e8>
 800b904:	3f3e3d3c 	svccc	0x003e3d3c
 800b908:	43424140 	movtmi	r4, #8512	; 0x2140
 800b90c:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 800b910:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b914:	51504f4e 	cmppl	r0, lr, asr #30
 800b918:	56555452 			; <UNDEFINED> instruction: 0x56555452
 800b91c:	5b5a5957 	blpl	96a1e80 <__exidx_end+0x1695a80>
 800b920:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 800b924:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 800b928:	6b6a6867 	blvs	9aa5acc <__exidx_end+0x1a996cc>
 800b92c:	71706e6d 	cmnvc	r0, sp, ror #28
 800b930:	77757472 			; <UNDEFINED> instruction: 0x77757472
 800b934:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 800b938:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 800b93c:	8a888685 	bhi	622d358 <__heap_size+0x622c358>
 800b940:	908f8d8b 	addls	r8, pc, fp, lsl #27
 800b944:	97959492 			; <UNDEFINED> instruction: 0x97959492
 800b948:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 800b94c:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b950:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 800b954:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 800b958:	bbb9b7b6 	bllt	6e79838 <__heap_size+0x6e78838>
 800b95c:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 800b960:	cbc9c7c5 	blgt	727d87c <__heap_size+0x727c87c>
 800b964:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 800b968:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 800b96c:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 800b970:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 800b974:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 800b978:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b97c <gamma24_0>:
	...
 800b98c:	01000000 	mrseq	r0, (UNDEF: 0)
 800b990:	01010101 	tsteq	r1, r1, lsl #2
 800b994:	01010101 	tsteq	r1, r1, lsl #2
 800b998:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b99c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b9a0:	03030202 	movweq	r0, #12802	; 0x3202
 800b9a4:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 800b9a8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b9ac:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 800b9b0:	06060606 	streq	r0, [r6], -r6, lsl #12
 800b9b4:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b9b8:	09090808 	stmdbeq	r9, {r3, fp}
 800b9bc:	0a0a0a09 	beq	828e1e8 <__exidx_end+0x281de8>
 800b9c0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b9c4:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b9c8:	0f0f0e0e 	svceq	0x000f0e0e
 800b9cc:	11111010 	tstne	r1, r0, lsl r0
 800b9d0:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b9d4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b9d8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b9dc:	1a1a1918 	bne	8691e44 <__exidx_end+0x685a44>
 800b9e0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b9e4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b9e8:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b9ec:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b9f0:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b9f4:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b9f8:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b9fc:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800ba00:	37363535 			; <UNDEFINED> instruction: 0x37363535
 800ba04:	3b3a3938 	blcc	8e99eec <__exidx_end+0xe8daec>
 800ba08:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 800ba0c:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 800ba10:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 800ba14:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 800ba18:	5251504e 	subspl	r5, r1, #78	; 0x4e
 800ba1c:	57565553 			; <UNDEFINED> instruction: 0x57565553
 800ba20:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 800ba24:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 800ba28:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 800ba2c:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 800ba30:	7372706f 	cmnvc	r2, #111	; 0x6f
 800ba34:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800ba38:	7f7e7c7b 	svcvc	0x007e7c7b
 800ba3c:	86848381 	strhi	r8, [r4], r1, lsl #7
 800ba40:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 800ba44:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 800ba48:	9b999795 	blls	66718a4 <__heap_size+0x66708a4>
 800ba4c:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 800ba50:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 800ba54:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 800ba58:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800ba5c:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 800ba60:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 800ba64:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 800ba68:	dad8d6d4 	ble	76415c0 <__heap_size+0x76405c0>
 800ba6c:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 800ba70:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 800ba74:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 800ba78:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800ba7c <gamma25_0>:
	...
 800ba90:	01010000 	mrseq	r0, (UNDEF: 1)
 800ba94:	01010101 	tsteq	r1, r1, lsl #2
 800ba98:	01010101 	tsteq	r1, r1, lsl #2
 800ba9c:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800baa0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800baa4:	03030302 	movweq	r0, #13058	; 0x3302
 800baa8:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800baac:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 800bab0:	06050505 	streq	r0, [r5], -r5, lsl #10
 800bab4:	07060606 	streq	r0, [r6, -r6, lsl #12]
 800bab8:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800babc:	09090808 	stmdbeq	r9, {r3, fp}
 800bac0:	0a0a0a09 	beq	828e2ec <__exidx_end+0x281eec>
 800bac4:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 800bac8:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800bacc:	0f0f0f0e 	svceq	0x000f0f0e
 800bad0:	11111010 	tstne	r1, r0, lsl r0
 800bad4:	13131212 	tstne	r3, #536870913	; 0x20000001
 800bad8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800badc:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800bae0:	1a1a1919 	bne	8691f4c <__exidx_end+0x685b4c>
 800bae4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800bae8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800baec:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800baf0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800baf4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800baf8:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800bafc:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 800bb00:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800bb04:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800bb08:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 800bb0c:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 800bb10:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 800bb14:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 800bb18:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 800bb1c:	53525150 	cmppl	r2, #80, 2
 800bb20:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800bb24:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 800bb28:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800bb2c:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800bb30:	6f6e6c6b 	svcvs	0x006e6c6b
 800bb34:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800bb38:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 800bb3c:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 800bb40:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 800bb44:	908e8d8b 	addls	r8, lr, fp, lsl #27
 800bb48:	97969492 			; <UNDEFINED> instruction: 0x97969492
 800bb4c:	9f9d9b99 	svcls	0x009d9b99
 800bb50:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 800bb54:	aeacaaa8 	vfmage.f32	s20, s25, s17
 800bb58:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 800bb5c:	bfbdbab8 	svclt	0x00bdbab8
 800bb60:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 800bb64:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 800bb68:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 800bb6c:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 800bb70:	ebe9e7e4 	bl	7a85b08 <__heap_size+0x7a84b08>
 800bb74:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 800bb78:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800bb7c <gamma25_5>:
 800bb7c:	01010100 	mrseq	r0, (UNDEF: 17)
 800bb80:	01010101 	tsteq	r1, r1, lsl #2
 800bb84:	01010101 	tsteq	r1, r1, lsl #2
 800bb88:	01010101 	tsteq	r1, r1, lsl #2
 800bb8c:	01010101 	tsteq	r1, r1, lsl #2
 800bb90:	01010101 	tsteq	r1, r1, lsl #2
 800bb94:	01010101 	tsteq	r1, r1, lsl #2
 800bb98:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800bb9c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800bba0:	03030302 	movweq	r0, #13058	; 0x3302
 800bba4:	03030303 	movweq	r0, #13059	; 0x3303
 800bba8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800bbac:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800bbb0:	06060605 	streq	r0, [r6], -r5, lsl #12
 800bbb4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800bbb8:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 800bbbc:	0a090909 	beq	824dfe8 <__exidx_end+0x241be8>
 800bbc0:	0b0b0a0a 	bleq	82ce3f0 <__exidx_end+0x2c1ff0>
 800bbc4:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 800bbc8:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 800bbcc:	100f0f0f 	andne	r0, pc, pc, lsl #30
 800bbd0:	12111110 	andsne	r1, r1, #16, 2
 800bbd4:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800bbd8:	16161514 			; <UNDEFINED> instruction: 0x16161514
 800bbdc:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800bbe0:	1b1a1a19 	blne	869244c <__exidx_end+0x68604c>
 800bbe4:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800bbe8:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800bbec:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800bbf0:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800bbf4:	2a292827 	bcs	8a55c98 <__exidx_end+0xa49898>
 800bbf8:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 800bbfc:	31302f2e 	teqcc	r0, lr, lsr #30
 800bc00:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 800bc04:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800bc08:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 800bc0c:	41403f3e 	cmpmi	r0, lr, lsr pc
 800bc10:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 800bc14:	4a494846 	bmi	925dd34 <__exidx_end+0x1251934>
 800bc18:	4f4e4c4b 	svcmi	0x004e4c4b
 800bc1c:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 800bc20:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800bc24:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 800bc28:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 800bc2c:	6a686765 	bvs	9a259c8 <__exidx_end+0x1a195c8>
 800bc30:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 800bc34:	76747371 			; <UNDEFINED> instruction: 0x76747371
 800bc38:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 800bc3c:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 800bc40:	8a888685 	bhi	622d65c <__heap_size+0x622c65c>
 800bc44:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 800bc48:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 800bc4c:	9f9d9c9a 	svcls	0x009d9c9a
 800bc50:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 800bc54:	afadaba9 	svcge	0x00adaba9
 800bc58:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 800bc5c:	bfbdbbb9 	svclt	0x00bdbbb9
 800bc60:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 800bc64:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 800bc68:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800bc6c:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 800bc70:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 800bc74:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 800bc78:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 800bc7c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800bc80:	006e776f 	rsbeq	r7, lr, pc, ror #14

0800bc84 <CSWTCH.18>:
 800bc84:	02020200 	andeq	r0, r2, #0, 4
 800bc88:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800bc8c:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0800bc8e <PixelType::MAPS>:
 800bc8e:	00424752 	subeq	r4, r2, r2, asr r7
 800bc92:	00474252 	subeq	r4, r7, r2, asr r2
 800bc96:	00425247 	subeq	r5, r2, r7, asr #4
 800bc9a:	00524247 	subseq	r4, r2, r7, asr #4
 800bc9e:	00475242 	subeq	r5, r7, r2, asr #4
 800bca2:	00524742 	subseq	r4, r2, r2, asr #14

0800bca6 <PixelType::TYPES>:
 800bca6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcaa:	00003130 	andeq	r3, r0, r0, lsr r1
 800bcae:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcb2:	00003131 	andeq	r3, r0, r1, lsr r1
 800bcb6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcba:	00003231 	andeq	r3, r0, r1, lsr r2
 800bcbe:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcc2:	00423231 	subeq	r3, r2, r1, lsr r2
 800bcc6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcca:	00003331 	andeq	r3, r0, r1, lsr r3
 800bcce:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800bcd2:	00003531 	andeq	r3, r0, r1, lsr r5
 800bcd6:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800bcda:	00003231 	andeq	r3, r0, r1, lsr r2
 800bcde:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800bce2:	00573231 	subseq	r3, r7, r1, lsr r2
 800bce6:	31534355 	cmpcc	r3, r5, asr r3
 800bcea:	00333039 	eorseq	r3, r3, r9, lsr r0
 800bcee:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800bcf2:	00333039 	eorseq	r3, r3, r9, lsr r0
 800bcf6:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800bcfa:	00003231 	andeq	r3, r0, r1, lsr r2
 800bcfe:	31415041 	cmpcc	r1, r1, asr #32
 800bd02:	00003230 	andeq	r3, r0, r0, lsr r2
 800bd06:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800bd0a:	00003232 	andeq	r3, r0, r2, lsr r2
 800bd0e:	31383950 	teqcc	r8, r0, asr r9
 800bd12:	00000033 	andeq	r0, r0, r3, lsr r0

0800bd16 <s_patternName>:
 800bd16:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800bd22:	61520000 	cmpvs	r2, r0
 800bd26:	6f626e69 	svcvs	0x00626e69
 800bd2a:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800bd2e:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800bd32:	61656854 	cmnvs	r5, r4, asr r8
 800bd36:	20726574 	rsbscs	r6, r2, r4, ror r5
 800bd3a:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800bd3e:	6f430065 	svcvs	0x00430065
 800bd42:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800bd46:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800bd4a:	00000065 	andeq	r0, r0, r5, rrx
 800bd4e:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800bd52:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800bd56:	00000000 	andeq	r0, r0, r0
 800bd5a:	61460000 	mrsvs	r0, (UNDEF: 70)
 800bd5e:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800bd6a <gamma10_0>:
 800bd6a:	03020100 	movweq	r0, #8448	; 0x2100
 800bd6e:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800bd72:	0b0a0908 	bleq	828e19a <__exidx_end+0x281d9a>
 800bd76:	0f0e0d0c 	svceq	0x000e0d0c
 800bd7a:	13121110 	tstne	r2, #16, 2
 800bd7e:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800bd82:	1b1a1918 	blne	86921ea <__exidx_end+0x685dea>
 800bd86:	1f1e1d1c 	svcne	0x001e1d1c
 800bd8a:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800bd8e:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800bd92:	2b2a2928 	blcs	8a9623a <__exidx_end+0xa89e3a>
 800bd96:	2f2e2d2c 	svccs	0x002e2d2c
 800bd9a:	33323130 	teqcc	r2, #48, 2
 800bd9e:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800bda2:	3b3a3938 	blcc	8e9a28a <__exidx_end+0xe8de8a>
 800bda6:	3f3e3d3c 	svccc	0x003e3d3c
 800bdaa:	43424140 	movtmi	r4, #8512	; 0x2140
 800bdae:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800bdb2:	4b4a4948 	blmi	929e2da <__exidx_end+0x1291eda>
 800bdb6:	4f4e4d4c 	svcmi	0x004e4d4c
 800bdba:	53525150 	cmppl	r2, #80, 2
 800bdbe:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800bdc2:	5b5a5958 	blpl	96a232a <__exidx_end+0x1695f2a>
 800bdc6:	5f5e5d5c 	svcpl	0x005e5d5c
 800bdca:	63626160 	cmnvs	r2, #96, 2
 800bdce:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800bdd2:	6b6a6968 	blvs	9aa637a <__exidx_end+0x1a99f7a>
 800bdd6:	6f6e6d6c 	svcvs	0x006e6d6c
 800bdda:	73727170 	cmnvc	r2, #112, 2
 800bdde:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800bde2:	7b7a7978 	blvc	9eaa3ca <__exidx_end+0x1e9dfca>
 800bde6:	7f7e7d7c 	svcvc	0x007e7d7c
 800bdea:	83828180 	orrhi	r8, r2, #128, 2
 800bdee:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800bdf2:	8b8a8988 	blhi	62ae41a <__heap_size+0x62ad41a>
 800bdf6:	8f8e8d8c 	svchi	0x008e8d8c
 800bdfa:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800bdfe:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800be02:	9b9a9998 	blls	66b246a <__heap_size+0x66b146a>
 800be06:	9f9e9d9c 	svcls	0x009e9d9c
 800be0a:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800be0e:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800be12:	abaaa9a8 	blge	6ab64ba <__heap_size+0x6ab54ba>
 800be16:	afaeadac 	svcge	0x00aeadac
 800be1a:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800be1e:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800be22:	bbbab9b8 	bllt	6eba50a <__heap_size+0x6eb950a>
 800be26:	bfbebdbc 	svclt	0x00bebdbc
 800be2a:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800be2e:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800be32:	cbcac9c8 	blgt	72be55a <__heap_size+0x72bd55a>
 800be36:	cfcecdcc 	svcgt	0x00cecdcc
 800be3a:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800be3e:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800be42:	dbdad9d8 	blle	76c25aa <__heap_size+0x76c15aa>
 800be46:	dfdedddc 	svcle	0x00dedddc
 800be4a:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800be4e:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800be52:	ebeae9e8 	bl	7ac65fa <__heap_size+0x7ac55fa>
 800be56:	efeeedec 	svc	0x00eeedec
 800be5a:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800be5e:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800be62:	fbfaf9f8 	blx	7eca64c <__heap_size+0x7ec964c>
 800be66:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800be6a:	46006f6c 	strmi	r6, [r0], -ip, ror #30
 800be6e:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 800be72:	20657261 	rsbcs	r7, r5, r1, ror #4
 800be76:	2a2e2556 	bcs	8b953d6 <__exidx_end+0xb88fd6>
 800be7a:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
 800be7e:	3a532058 	bcc	94d3fe6 <__exidx_end+0x14c7be6>
 800be82:	20753325 	rsbscs	r3, r5, r5, lsr #6
 800be86:	33253a46 			; <UNDEFINED> instruction: 0x33253a46
 800be8a:	 	rsbeq	r0, r0, r5, ror r0

0800be8c <s_aStorSize>:
 800be8c:	00000060 	andeq	r0, r0, r0, rrx
 800be90:	00000090 	muleq	r0, r0, r0
 800be94:	00000020 	andeq	r0, r0, r0, lsr #32
 800be98:	00000040 	andeq	r0, r0, r0, asr #32
 800be9c:	00000060 	andeq	r0, r0, r0, rrx
 800bea0:	00000040 	andeq	r0, r0, r0, asr #32
 800bea4:	00000020 	andeq	r0, r0, r0, lsr #32
 800bea8:	00000020 	andeq	r0, r0, r0, lsr #32
 800beac:	000001e0 	andeq	r0, r0, r0, ror #3
 800beb0:	00000040 	andeq	r0, r0, r0, asr #32
 800beb4:	00000020 	andeq	r0, r0, r0, lsr #32
 800beb8:	00000060 	andeq	r0, r0, r0, rrx
 800bebc:	00000030 	andeq	r0, r0, r0, lsr r0
 800bec0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bec4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800bec8:	00000030 	andeq	r0, r0, r0, lsr r0
 800becc:	00000040 	andeq	r0, r0, r0, asr #32
 800bed0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bed4:	00000060 	andeq	r0, r0, r0, rrx
 800bed8:	00000020 	andeq	r0, r0, r0, lsr #32
 800bedc:	00000400 	andeq	r0, r0, r0, lsl #8
 800bee0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bee4:	00000020 	andeq	r0, r0, r0, lsr #32
 800bee8:	00000040 	andeq	r0, r0, r0, asr #32
 800beec:	00000060 	andeq	r0, r0, r0, rrx
 800bef0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bef4:	00000020 	andeq	r0, r0, r0, lsr #32
 800bef8:	000000c0 	andeq	r0, r0, r0, asr #1

0800befc <vtable for StoreDisplayUdf>:
	...
 800bf04:	080077e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800bf08:	08007835 	stmdaeq	r0, {r0, r2, r4, r5, fp, ip, sp, lr}
 800bf0c:	08007811 	stmdaeq	r0, {r0, r4, fp, ip, sp, lr}
 800bf10:	080077ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}

0800bf14 <vtable for StorePixelDmx>:
	...
 800bf1c:	080078a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, fp, ip, sp, lr}
 800bf20:	08007a11 	stmdaeq	r0, {r0, r4, r9, fp, ip, sp, lr}
 800bf24:	080078ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp, ip, sp, lr}
 800bf28:	08007a25 	stmdaeq	r0, {r0, r2, r5, r9, fp, ip, sp, lr}
 800bf2c:	080079dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
 800bf30:	080079a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, ip, sp, lr}
 800bf34:	08007971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, ip, sp, lr}
 800bf38:	08007939 	stmdaeq	r0, {r0, r3, r4, r5, r8, fp, ip, sp, lr}
 800bf3c:	08007905 	stmdaeq	r0, {r0, r2, r8, fp, ip, sp, lr}
 800bf40:	080078d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, ip, sp, lr}
 800bf44:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bf48:	00000000 	andeq	r0, r0, r0
 800bf4c:	080078a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, ip, sp, lr}
 800bf50:	08007a1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, fp, ip, sp, lr}
 800bf54:	08007a09 	stmdaeq	r0, {r0, r3, r9, fp, ip, sp, lr}
 800bf58:	080079d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, fp, ip, sp, lr}
 800bf5c:	080079a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, ip, sp, lr}
 800bf60:	08007969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, ip, sp, lr}
 800bf64:	08007931 	stmdaeq	r0, {r0, r4, r5, r8, fp, ip, sp, lr}
 800bf68:	080078fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, fp, ip, sp, lr}

0800bf6c <vtable for StoreRDMDevice>:
	...
 800bf74:	08007a61 	stmdaeq	r0, {r0, r5, r6, r9, fp, ip, sp, lr}
 800bf78:	08007ad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, ip, sp, lr}
 800bf7c:	08007a69 	stmdaeq	r0, {r0, r3, r5, r6, r9, fp, ip, sp, lr}
 800bf80:	08007ae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, ip, sp, lr}
 800bf84:	08007a8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, fp, ip, sp, lr}
 800bf88:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bf8c:	00000000 	andeq	r0, r0, r0
 800bf90:	08007a63 	stmdaeq	r0, {r0, r1, r5, r6, r9, fp, ip, sp, lr}
 800bf94:	08007add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, ip, sp, lr}
 800bf98:	08007ac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, ip, sp, lr}

0800bf9c <vtable for StoreRDMSensors>:
	...
 800bfa4:	08007b21 	stmdaeq	r0, {r0, r5, r8, r9, fp, ip, sp, lr}
 800bfa8:	08007b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, ip, sp, lr}
 800bfac:	08007b49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp, ip, sp, lr}
 800bfb0:	08007b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, ip, sp, lr}
 800bfb4:	3a434d46 	bcc	90df4d4 <__exidx_end+0x10d30d4>
 800bfb8:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800bfbc:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800bfc0:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800bfc4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800bfc8:	6f742068 	svcvs	0x00742068
 800bfcc:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800bfd0:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800bfd4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800bfd8:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800bfdc:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800bfe0:	6f4e000a 	svcvs	0x004e000a
 800bfe4:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 800bfe8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 800bfec:	756f6620 	strbvc	r6, [pc, #-1568]!	; 800b9d4 <gamma24_0+0x58>
 800bff0:	5300646e 	movwpl	r6, #1134	; 0x46e
 800bff4:	30313148 	eorscc	r3, r1, r8, asr #2
 800bff8:	53530036 	cmppl	r3, #54	; 0x36
 800bffc:	30333144 	eorscc	r3, r3, r4, asr #2
 800c000:	73250036 			; <UNDEFINED> instruction: 0x73250036
 800c004:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 800c008:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 800c00c:	aa40000a 	bge	900c03c <__exidx_end+0xfffc3c>
 800c010:	00eeaaee 	rsceq	sl, lr, lr, ror #21

0800c014 <_OledFont8x6>:
 800c014:	00000040 	andeq	r0, r0, r0, asr #32
 800c018:	40000000 	andmi	r0, r0, r0
 800c01c:	005f0000 	subseq	r0, pc, r0
 800c020:	00400000 	subeq	r0, r0, r0
 800c024:	00070007 	andeq	r0, r7, r7
 800c028:	7f144000 	svcvc	0x00144000
 800c02c:	00147f14 	andseq	r7, r4, r4, lsl pc
 800c030:	7f2a2440 	svcvc	0x002a2440
 800c034:	4000122a 	andmi	r1, r0, sl, lsr #4
 800c038:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800c03c:	36400062 	strbcc	r0, [r0], -r2, rrx
 800c040:	50205649 	eorpl	r5, r0, r9, asr #12
 800c044:	08004000 	stmdaeq	r0, {lr}
 800c048:	00000307 	andeq	r0, r0, r7, lsl #6
 800c04c:	221c0040 	andscs	r0, ip, #64	; 0x40
 800c050:	40000041 	andmi	r0, r0, r1, asr #32
 800c054:	1c224100 	stfnes	f4, [r2], #-0
 800c058:	2a400000 	bcs	900c060 <__exidx_end+0xfffc60>
 800c05c:	2a1c7f1c 	bcs	872bcd4 <__exidx_end+0x71f8d4>
 800c060:	08084000 	stmdaeq	r8, {lr}
 800c064:	0008083e 	andeq	r0, r8, lr, lsr r8
 800c068:	70800040 	addvc	r0, r0, r0, asr #32
 800c06c:	40000030 	andmi	r0, r0, r0, lsr r0
 800c070:	08080808 	stmdaeq	r8, {r3, fp}
 800c074:	00400008 	subeq	r0, r0, r8
 800c078:	00606000 	rsbeq	r6, r0, r0
 800c07c:	10204000 	eorne	r4, r0, r0
 800c080:	00020408 	andeq	r0, r2, r8, lsl #8
 800c084:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800c088:	40003e45 	andmi	r3, r0, r5, asr #28
 800c08c:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800c090:	72400000 	subvc	r0, r0, #0
 800c094:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800c098:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800c09c:	00334d49 	eorseq	r4, r3, r9, asr #26
 800c0a0:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800c0a4:	4000107f 	andmi	r1, r0, pc, ror r0
 800c0a8:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800c0ac:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800c0b0:	3149494a 	cmpcc	r9, sl, asr #18
 800c0b4:	21414000 	mrscs	r4, (UNDEF: 65)
 800c0b8:	00070911 	andeq	r0, r7, r1, lsl r9
 800c0bc:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800c0c0:	40003649 	andmi	r3, r0, r9, asr #12
 800c0c4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800c0c8:	0040001e 	subeq	r0, r0, lr, lsl r0
 800c0cc:	00001400 	andeq	r1, r0, r0, lsl #8
 800c0d0:	40004000 	andmi	r4, r0, r0
 800c0d4:	00000034 	andeq	r0, r0, r4, lsr r0
 800c0d8:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800c0dc:	40004122 	andmi	r4, r0, r2, lsr #2
 800c0e0:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800c0e4:	00400014 	subeq	r0, r0, r4, lsl r0
 800c0e8:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800c0ec:	01024000 	mrseq	r4, (UNDEF: 2)
 800c0f0:	00060959 	andeq	r0, r6, r9, asr r9
 800c0f4:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800c0f8:	40004e59 	andmi	r4, r0, r9, asr lr
 800c0fc:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800c100:	7f40007c 	svcvc	0x0040007c
 800c104:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800c108:	413e4000 	teqmi	lr, r0
 800c10c:	00224141 	eoreq	r4, r2, r1, asr #2
 800c110:	41417f40 	cmpmi	r1, r0, asr #30
 800c114:	40003e41 	andmi	r3, r0, r1, asr #28
 800c118:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800c11c:	7f400041 	svcvc	0x00400041
 800c120:	01090909 	tsteq	r9, r9, lsl #18
 800c124:	413e4000 	teqmi	lr, r0
 800c128:	00735141 	rsbseq	r5, r3, r1, asr #2
 800c12c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800c130:	40007f08 	andmi	r7, r0, r8, lsl #30
 800c134:	417f4100 	cmnmi	pc, r0, lsl #2
 800c138:	20400000 	subcs	r0, r0, r0
 800c13c:	013f4140 	teqeq	pc, r0, asr #2
 800c140:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800c144:	00412214 	subeq	r2, r1, r4, lsl r2
 800c148:	40407f40 	submi	r7, r0, r0, asr #30
 800c14c:	40004040 	andmi	r4, r0, r0, asr #32
 800c150:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800c154:	7f40007f 	svcvc	0x0040007f
 800c158:	7f100804 	svcvc	0x00100804
 800c15c:	413e4000 	teqmi	lr, r0
 800c160:	003e4141 	eorseq	r4, lr, r1, asr #2
 800c164:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800c168:	40000609 	andmi	r0, r0, r9, lsl #12
 800c16c:	2151413e 	cmpcs	r1, lr, lsr r1
 800c170:	7f40005e 	svcvc	0x0040005e
 800c174:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800c178:	49264000 	stmdbmi	r6!, {lr}
 800c17c:	00324949 	eorseq	r4, r2, r9, asr #18
 800c180:	7f010340 	svcvc	0x00010340
 800c184:	40000301 	andmi	r0, r0, r1, lsl #6
 800c188:	4040403f 	submi	r4, r0, pc, lsr r0
 800c18c:	1f40003f 	svcne	0x0040003f
 800c190:	1f204020 	svcne	0x00204020
 800c194:	403f4000 	eorsmi	r4, pc, r0
 800c198:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800c19c:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800c1a0:	40006314 	andmi	r6, r0, r4, lsl r3
 800c1a4:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800c1a8:	61400003 	cmpvs	r0, r3
 800c1ac:	434d4959 	movtmi	r4, #55641	; 0xd959
 800c1b0:	7f004000 	svcvc	0x00004000
 800c1b4:	00414141 	subeq	r4, r1, r1, asr #2
 800c1b8:	08040240 	stmdaeq	r4, {r6, r9}
 800c1bc:	40002010 	andmi	r2, r0, r0, lsl r0
 800c1c0:	41414100 	mrsmi	r4, (UNDEF: 81)
 800c1c4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800c1c8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800c1cc:	40404000 	submi	r4, r0, r0
 800c1d0:	00404040 	subeq	r4, r0, r0, asr #32
 800c1d4:	07030040 	streq	r0, [r3, -r0, asr #32]
 800c1d8:	40000008 	andmi	r0, r0, r8
 800c1dc:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800c1e0:	7f400040 	svcvc	0x00400040
 800c1e4:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800c1e8:	44384000 	ldrtmi	r4, [r8], #-0
 800c1ec:	00284444 	eoreq	r4, r8, r4, asr #8
 800c1f0:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800c1f4:	40007f28 	andmi	r7, r0, r8, lsr #30
 800c1f8:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800c1fc:	00400018 	subeq	r0, r0, r8, lsl r0
 800c200:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800c204:	a4184000 	ldrge	r4, [r8], #-0
 800c208:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800c20c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800c210:	40007804 	andmi	r7, r0, r4, lsl #16
 800c214:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800c218:	20400000 	subcs	r0, r0, r0
 800c21c:	003d4040 	eorseq	r4, sp, r0, asr #32
 800c220:	107f4000 	rsbsne	r4, pc, r0
 800c224:	00004428 	andeq	r4, r0, r8, lsr #8
 800c228:	7f410040 	svcvc	0x00410040
 800c22c:	40000040 	andmi	r0, r0, r0, asr #32
 800c230:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800c234:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800c238:	78040408 	stmdavc	r4, {r3, sl}
 800c23c:	44384000 	ldrtmi	r4, [r8], #-0
 800c240:	00384444 	eorseq	r4, r8, r4, asr #8
 800c244:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800c248:	40001824 	andmi	r1, r0, r4, lsr #16
 800c24c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800c250:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800c254:	08040408 	stmdaeq	r4, {r3, sl}
 800c258:	54484000 	strbpl	r4, [r8], #-0
 800c25c:	00245454 	eoreq	r5, r4, r4, asr r4
 800c260:	3f040440 	svccc	0x00040440
 800c264:	40002444 	andmi	r2, r0, r4, asr #8
 800c268:	2040403c 	subcs	r4, r0, ip, lsr r0
 800c26c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800c270:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800c274:	403c4000 	eorsmi	r4, ip, r0
 800c278:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800c27c:	10284440 	eorne	r4, r8, r0, asr #8
 800c280:	40004428 	andmi	r4, r0, r8, lsr #8
 800c284:	9090904c 	addsls	r9, r0, ip, asr #32
 800c288:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800c28c:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800c290:	08004000 	stmdaeq	r0, {lr}
 800c294:	00004136 	andeq	r4, r0, r6, lsr r1
 800c298:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800c29c:	40000000 	andmi	r0, r0, r0
 800c2a0:	08364100 	ldmdaeq	r6!, {r8, lr}
 800c2a4:	02400000 	subeq	r0, r0, #0
 800c2a8:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800c2ac:	263c4000 	ldrtcs	r4, [ip], -r0
 800c2b0:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800c2b4 <oled_128x32_init>:
 800c2b4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800c2b8:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800c2bc:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800c2c0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800c2c4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800c2c8:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800c2cc <oled_128x64_init>:
 800c2cc:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800c2d0:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800c2d4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800c2d8:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800c2dc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800c2e0:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800c2e4 <vtable for Ssd1306>:
	...
 800c2ec:	08007fad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800c2f0:	08007fd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800c2f4:	080082e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, pc}
 800c2f8:	08008271 	stmdaeq	r0, {r0, r4, r5, r6, r9, pc}
 800c2fc:	0800813d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, pc}
 800c300:	08007ff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800c304:	08008021 	stmdaeq	r0, {r0, r5, pc}
 800c308:	08008115 	stmdaeq	r0, {r0, r2, r4, r8, pc}
 800c30c:	080080cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, pc}
 800c310:	08007faf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800c314:	08008179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, pc}
 800c318:	08008185 	stmdaeq	r0, {r0, r2, r7, r8, pc}
 800c31c:	0800819f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, pc}
 800c320:	08007fb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800c324:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800c328:	5b1b006d 	blpl	86cc4e4 <__exidx_end+0x6c00e4>
 800c32c:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800c330:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800c334:	205d732a 	subscs	r7, sp, sl, lsr #6
 800c338:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800c33c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800c340:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800c344:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800c348:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800c34c:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800c350:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800c354:	6f626552 	svcvs	0x00626552
 800c358:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 800c35c:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 800c360:	4e000a2e 	vmlami.f32	s0, s0, s29
 800c364:	5452206f 	ldrbpl	r2, [r2], #-111	; 0xffffff91
 800c368:	6f632043 	svcvs	0x00632043
 800c36c:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 800c370:	00646574 	rsbeq	r6, r4, r4, ror r5
 800c374:	64342e25 	ldrtvs	r2, [r4], #-3621	; 0xfffff1db
 800c378:	322e252f 	eorcc	r2, lr, #197132288	; 0xbc00000
 800c37c:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800c380:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 800c384:	3a64322e 	bcc	9918c44 <__exidx_end+0x190c844>
 800c388:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800c38c:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800c390:	4d000a64 	vstrmi	s0, [r0, #-400]	; 0xfffffe70
 800c394:	39375043 	ldmdbcc	r7!, {r0, r1, r6, ip, lr}
 800c398:	00583134 	subseq	r3, r8, r4, lsr r1
 800c39c:	32335344 	eorscc	r5, r3, #68, 6	; 0x10000001
 800c3a0:	50003133 	andpl	r3, r0, r3, lsr r1
 800c3a4:	35384643 	ldrcc	r4, [r8, #-1603]!	; 0xfffff9bd
 800c3a8:	53003336 	movwpl	r3, #822	; 0x336
 800c3ac:	495f434f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
 800c3b0:	5245544e 	subpl	r5, r5, #1308622848	; 0x4e000000
 800c3b4:	004c414e 	subeq	r4, ip, lr, asr #2

0800c3b8 <CSWTCH.7>:
 800c3b8:	0800c393 	stmdaeq	r0, {r0, r1, r4, r7, r8, r9, lr, pc}
 800c3bc:	0800c39c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, lr, pc}
 800c3c0:	0800c3a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, r9, lr, pc}
 800c3c4:	0800c3ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, r9, lr, pc}

0800c3c8 <days_of_month>:
 800c3c8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 800c3d0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3d4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c3d8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3dc:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c3e0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3e4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c3ec:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c3f0:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c3f4:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800c3f8 <__exidx_start>:
 800c3f8:	7fff5f20 	svcvc	0x00ff5f20
 800c3fc:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800c400 <.ARM.attributes>:
 800c400:	00002e41 	andeq	r2, r0, r1, asr #28
 800c404:	61656100 	cmnvs	r5, r0, lsl #2
 800c408:	01006962 	tsteq	r0, r2, ror #18
 800c40c:	00000024 	andeq	r0, r0, r4, lsr #32
 800c410:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800c414:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800c418:	0600334d 	streq	r3, [r0], -sp, asr #6
 800c41c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 800c420:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 800c424:	17011501 	strne	r1, [r1, -r1, lsl #10]
 800c428:	1a011803 	bne	805243c <__exidx_end+0x4603c>
 800c42c:	Address 0x000000000800c42c is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
20000014:	00000000 	andeq	r0, r0, r0
20000018:	00000020 	andeq	r0, r0, r0, lsr #32
2000001c:	00000000 	andeq	r0, r0, r0
20000020:	00000040 	andeq	r0, r0, r0, asr #32
20000024:	00000000 	andeq	r0, r0, r0
20000028:	00000060 	andeq	r0, r0, r0, rrx
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000080 	andeq	r0, r0, r0, lsl #1
20000034:	00000000 	andeq	r0, r0, r0
20000038:	00000100 	andeq	r0, r0, r0, lsl #2
2000003c:	00000000 	andeq	r0, r0, r0
20000040:	00000140 	andeq	r0, r0, r0, asr #2
20000044:	00000000 	andeq	r0, r0, r0
20000048:	00000180 	andeq	r0, r0, r0, lsl #3
2000004c:	00000000 	andeq	r0, r0, r0
20000050:	00000200 	andeq	r0, r0, r0, lsl #4
20000054:	00000000 	andeq	r0, r0, r0
20000058:	00000300 	andeq	r0, r0, r0, lsl #6
2000005c:	00000000 	andeq	r0, r0, r0
20000060:	00000400 	andeq	r0, r0, r0, lsl #8
20000064:	00000000 	andeq	r0, r0, r0
20000068:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000078 <SystemCoreClock>:
20000078:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

20000080 <s_IsProgrammed>:
	...

20000081 <s_isOn>:
20000081:	 	andeq	r0, r0, r0

20000084 <s_Pattern>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <outptr>:
20000088:	00000000 	andeq	r0, r0, r0

2000008c <RDMResponder::s_RdmCommand>:
	...

2000018d <RDMResponder::m_IsSubDeviceActive>:
2000018d:	 	andeq	r0, r0, r0

20000190 <RDMResponder::s_pThis>:
20000190:	00000000 	andeq	r0, r0, r0

20000194 <RDMSensors::s_pThis>:
20000194:	00000000 	andeq	r0, r0, r0

20000198 <RDMSubDevices::s_pThis>:
20000198:	00000000 	andeq	r0, r0, r0

2000019c <DMXReceiver::s_IsActive>:
2000019c:	00000000 	andeq	r0, r0, r0

200001a0 <DMXReceiver::s_pLightSet>:
200001a0:	00000000 	andeq	r0, r0, r0

200001a4 <DMXReceiver::s_bDisableOutput>:
200001a4:	00000000 	andeq	r0, r0, r0

200001a8 <s_RxBuffer>:
	...

200003b8 <s_TxBuffer>:
	...

200005bc <sv_PortState>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <sv_nRxDmxPackets>:
	...

200005d0 <sv_nUartsSending>:
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <Dmx::s_pThis>:
200005d4:	00000000 	andeq	r0, r0, r0

200005d8 <gv_RdmDataReceiveEnd>:
200005d8:	00000000 	andeq	r0, r0, r0

200005dc <RDMDeviceResponder::s_pThis>:
200005dc:	00000000 	andeq	r0, r0, r0

200005e0 <RDMIdentify::m_bIsEnabled>:
	...

200005e1 <RDMIdentify::m_nMode>:
200005e1:	 	andeq	r0, r0, r0

200005e4 <RDMIdentify::s_pThis>:
200005e4:	00000000 	andeq	r0, r0, r0

200005e8 <WS28xxDmx::s_pThis>:
200005e8:	00000000 	andeq	r0, r0, r0

200005ec <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
200005ec:	00000000 	andeq	r0, r0, r0

200005f0 <PixelDmxParamsRdm::s_Data>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <PixelPatterns::m_PortConfig>:
	...

20000614 <PixelPatterns::m_nActivePorts>:
20000614:	00000000 	andeq	r0, r0, r0

20000618 <PixelPatterns::m_pScannerColours>:
20000618:	00000000 	andeq	r0, r0, r0

2000061c <PixelPatterns::m_nCount>:
2000061c:	00000000 	andeq	r0, r0, r0

20000620 <PixelPatterns::m_pOutput>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <PixelTestPattern::s_pThis>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <PixelTestPattern::s_Pattern>:
20000628:	00000000 	andeq	r0, r0, r0

2000062c <s_tmp>:
2000062c:	00000000 	andeq	r0, r0, r0

20000630 <WS28xx::s_pThis>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <Network::s_pThis>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <DisplayUdf::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <ConfigStore::s_nWaitMillis>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <ConfigStore::s_SpiFlashData>:
	...

20001640 <ConfigStore::s_nStartAddress>:
20001640:	00000000 	andeq	r0, r0, r0

20001644 <ConfigStore::s_bHaveFlashChip>:
20001644:	00000000 	andeq	r0, r0, r0

20001648 <ConfigStore::s_nSpiFlashStoreSize>:
20001648:	00000000 	andeq	r0, r0, r0

2000164c <ConfigStore::s_State>:
2000164c:	00000000 	andeq	r0, r0, r0

20001650 <ConfigStore::s_pThis>:
20001650:	00000000 	andeq	r0, r0, r0

20001654 <ConfigStore::s_bIsNew>:
20001654:	00000000 	andeq	r0, r0, r0

20001658 <StoreDisplayUdf::s_pThis>:
20001658:	00000000 	andeq	r0, r0, r0

2000165c <StorePixelDmx::s_pThis>:
2000165c:	00000000 	andeq	r0, r0, r0

20001660 <StoreRDMDevice::s_pThis>:
20001660:	00000000 	andeq	r0, r0, r0

20001664 <StoreRDMSensors::s_pThis>:
20001664:	00000000 	andeq	r0, r0, r0

20001668 <FlashCode::s_pThis>:
20001668:	00000000 	andeq	r0, r0, r0

2000166c <flashcode::s_nAddress>:
2000166c:	00000000 	andeq	r0, r0, r0

20001670 <flashcode::s_State>:
20001670:	00000000 	andeq	r0, r0, r0

20001674 <flashcode::s_nPage>:
20001674:	00000000 	andeq	r0, r0, r0

20001678 <flashcode::s_pData>:
20001678:	00000000 	andeq	r0, r0, r0

2000167c <flashcode::s_isBank0>:
2000167c:	00000000 	andeq	r0, r0, r0

20001680 <flashcode::s_nLength>:
20001680:	00000000 	andeq	r0, r0, r0

20001684 <Display::s_pThis>:
20001684:	00000000 	andeq	r0, r0, r0

20001688 <_ClearBuffer>:
	...

20001710 <Ssd1306::s_pThis>:
20001710:	00000000 	andeq	r0, r0, r0

20001714 <FirmwareVersion::s_FirmwareVersion>:
	...

2000172a <FirmwareVersion::s_Print>:
	...

2000176c <FirmwareVersion::s_pThis>:
2000176c:	00000000 	andeq	r0, r0, r0

20001770 <Hardware::s_pThis>:
20001770:	00000000 	andeq	r0, r0, r0

20001774 <HwClock::s_pThis>:
20001774:	00000000 	andeq	r0, r0, r0

20001778 <Tm>:
	...

200017a0 <s_micros>:
	...

200017a8 <set_timer>:
200017a8:	00000000 	andeq	r0, r0, r0

200017ac <s_nSysTickMillis>:
200017ac:	00000000 	andeq	r0, r0, r0

200017b0 <s_nAddress>:
200017b0:	00000000 	andeq	r0, r0, r0

200017b4 <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
