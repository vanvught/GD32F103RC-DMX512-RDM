
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08000ff5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp}
 8000008:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800000c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000010:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000014:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000018:	08001041 	stmdaeq	r0, {r0, r6, ip}
	...
 800002c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000030:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800003c:	08008aa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, pc}
 8000040:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000044:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000048:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800004c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000050:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000054:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000058:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800005c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000060:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000064:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000068:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800006c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000070:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000074:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000078:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800007c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000080:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000084:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000088:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800008c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000090:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000094:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000098:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800009c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000ac:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000b0:	080038c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, ip, sp}
 80000b4:	08003979 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, fp, ip, sp}
 80000b8:	080039e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, fp, ip, sp}
 80000bc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000cc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000dc:	080036d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, ip, sp}
 80000e0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000e4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000e8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000ec:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f8:	00000000 	andeq	r0, r0, r0
 80000fc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000100:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000104:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000108:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800010c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000110:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000114:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000118:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800011c:	080039f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp}
 8000120:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000124:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000128:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800012c:	08001041 	stmdaeq	r0, {r0, r6, ip}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f008 fc57 	bl	80089e4 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fc84 	bl	8008a44 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f008 fc81 	bl	8008a44 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800c054 	stmdaeq	r0, {r2, r4, r6, lr, pc}
 800014c:	0800c05a 	stmdaeq	r0, {r1, r3, r4, r6, lr, pc}

08000150 <__aeabi_d2f>:
 8000150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000154:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000158:	bf24      	itt	cs
 800015a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800015e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000162:	d90d      	bls.n	8000180 <__aeabi_d2f+0x30>
 8000164:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000168:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800016c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000174:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000178:	bf08      	it	eq
 800017a:	f020 0001 	biceq.w	r0, r0, #1
 800017e:	4770      	bx	lr
 8000180:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000184:	d121      	bne.n	80001ca <__aeabi_d2f+0x7a>
 8000186:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800018a:	bfbc      	itt	lt
 800018c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000190:	4770      	bxlt	lr
 8000192:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000196:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800019a:	f1c2 0218 	rsb	r2, r2, #24
 800019e:	f1c2 0c20 	rsb	ip, r2, #32
 80001a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80001a6:	fa20 f002 	lsr.w	r0, r0, r2
 80001aa:	bf18      	it	ne
 80001ac:	f040 0001 	orrne.w	r0, r0, #1
 80001b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80001b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80001b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80001bc:	ea40 000c 	orr.w	r0, r0, ip
 80001c0:	fa23 f302 	lsr.w	r3, r3, r2
 80001c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001c8:	e7cc      	b.n	8000164 <__aeabi_d2f+0x14>
 80001ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80001ce:	d107      	bne.n	80001e0 <__aeabi_d2f+0x90>
 80001d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80001d4:	bf1e      	ittt	ne
 80001d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80001da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80001de:	4770      	bxne	lr
 80001e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80001e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <__aeabi_frsub>:
 80001f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__addsf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_fsub>:
 80001f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001fc <__addsf3>:
 80001fc:	0042      	lsls	r2, r0, #1
 80001fe:	bf1f      	itttt	ne
 8000200:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000204:	ea92 0f03 	teqne	r2, r3
 8000208:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800020c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000210:	d06a      	beq.n	80002e8 <__addsf3+0xec>
 8000212:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000216:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800021a:	bfc1      	itttt	gt
 800021c:	18d2      	addgt	r2, r2, r3
 800021e:	4041      	eorgt	r1, r0
 8000220:	4048      	eorgt	r0, r1
 8000222:	4041      	eorgt	r1, r0
 8000224:	bfb8      	it	lt
 8000226:	425b      	neglt	r3, r3
 8000228:	2b19      	cmp	r3, #25
 800022a:	bf88      	it	hi
 800022c:	4770      	bxhi	lr
 800022e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000232:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4240      	negne	r0, r0
 800023e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000242:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000246:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800024a:	bf18      	it	ne
 800024c:	4249      	negne	r1, r1
 800024e:	ea92 0f03 	teq	r2, r3
 8000252:	d03f      	beq.n	80002d4 <__addsf3+0xd8>
 8000254:	f1a2 0201 	sub.w	r2, r2, #1
 8000258:	fa41 fc03 	asr.w	ip, r1, r3
 800025c:	eb10 000c 	adds.w	r0, r0, ip
 8000260:	f1c3 0320 	rsb	r3, r3, #32
 8000264:	fa01 f103 	lsl.w	r1, r1, r3
 8000268:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800026c:	d502      	bpl.n	8000274 <__addsf3+0x78>
 800026e:	4249      	negs	r1, r1
 8000270:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000274:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000278:	d313      	bcc.n	80002a2 <__addsf3+0xa6>
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d306      	bcc.n	800028e <__addsf3+0x92>
 8000280:	0840      	lsrs	r0, r0, #1
 8000282:	ea4f 0131 	mov.w	r1, r1, rrx
 8000286:	f102 0201 	add.w	r2, r2, #1
 800028a:	2afe      	cmp	r2, #254	; 0xfe
 800028c:	d251      	bcs.n	8000332 <__addsf3+0x136>
 800028e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	ea40 0003 	orr.w	r0, r0, r3
 80002a0:	4770      	bx	lr
 80002a2:	0049      	lsls	r1, r1, #1
 80002a4:	eb40 0000 	adc.w	r0, r0, r0
 80002a8:	3a01      	subs	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002b0:	d2ed      	bcs.n	800028e <__addsf3+0x92>
 80002b2:	fab0 fc80 	clz	ip, r0
 80002b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ba:	ebb2 020c 	subs.w	r2, r2, ip
 80002be:	fa00 f00c 	lsl.w	r0, r0, ip
 80002c2:	bfaa      	itet	ge
 80002c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002c8:	4252      	neglt	r2, r2
 80002ca:	4318      	orrge	r0, r3
 80002cc:	bfbc      	itt	lt
 80002ce:	40d0      	lsrlt	r0, r2
 80002d0:	4318      	orrlt	r0, r3
 80002d2:	4770      	bx	lr
 80002d4:	f092 0f00 	teq	r2, #0
 80002d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002dc:	bf06      	itte	eq
 80002de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002e2:	3201      	addeq	r2, #1
 80002e4:	3b01      	subne	r3, #1
 80002e6:	e7b5      	b.n	8000254 <__addsf3+0x58>
 80002e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002f0:	bf18      	it	ne
 80002f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f6:	d021      	beq.n	800033c <__addsf3+0x140>
 80002f8:	ea92 0f03 	teq	r2, r3
 80002fc:	d004      	beq.n	8000308 <__addsf3+0x10c>
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	bf08      	it	eq
 8000304:	4608      	moveq	r0, r1
 8000306:	4770      	bx	lr
 8000308:	ea90 0f01 	teq	r0, r1
 800030c:	bf1c      	itt	ne
 800030e:	2000      	movne	r0, #0
 8000310:	4770      	bxne	lr
 8000312:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000316:	d104      	bne.n	8000322 <__addsf3+0x126>
 8000318:	0040      	lsls	r0, r0, #1
 800031a:	bf28      	it	cs
 800031c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000320:	4770      	bx	lr
 8000322:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000326:	bf3c      	itt	cc
 8000328:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800032c:	4770      	bxcc	lr
 800032e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000332:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000336:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800033a:	4770      	bx	lr
 800033c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000340:	bf16      	itet	ne
 8000342:	4608      	movne	r0, r1
 8000344:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000348:	4601      	movne	r1, r0
 800034a:	0242      	lsls	r2, r0, #9
 800034c:	bf06      	itte	eq
 800034e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000352:	ea90 0f01 	teqeq	r0, r1
 8000356:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800035a:	4770      	bx	lr

0800035c <__aeabi_ui2f>:
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e004      	b.n	800036c <__aeabi_i2f+0x8>
 8000362:	bf00      	nop

08000364 <__aeabi_i2f>:
 8000364:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000368:	bf48      	it	mi
 800036a:	4240      	negmi	r0, r0
 800036c:	ea5f 0c00 	movs.w	ip, r0
 8000370:	bf08      	it	eq
 8000372:	4770      	bxeq	lr
 8000374:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000378:	4601      	mov	r1, r0
 800037a:	f04f 0000 	mov.w	r0, #0
 800037e:	e01c      	b.n	80003ba <__aeabi_l2f+0x2a>

08000380 <__aeabi_ul2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f04f 0300 	mov.w	r3, #0
 800038c:	e00a      	b.n	80003a4 <__aeabi_l2f+0x14>
 800038e:	bf00      	nop

08000390 <__aeabi_l2f>:
 8000390:	ea50 0201 	orrs.w	r2, r0, r1
 8000394:	bf08      	it	eq
 8000396:	4770      	bxeq	lr
 8000398:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800039c:	d502      	bpl.n	80003a4 <__aeabi_l2f+0x14>
 800039e:	4240      	negs	r0, r0
 80003a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003a4:	ea5f 0c01 	movs.w	ip, r1
 80003a8:	bf02      	ittt	eq
 80003aa:	4684      	moveq	ip, r0
 80003ac:	4601      	moveq	r1, r0
 80003ae:	2000      	moveq	r0, #0
 80003b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003b4:	bf08      	it	eq
 80003b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003be:	fabc f28c 	clz	r2, ip
 80003c2:	3a08      	subs	r2, #8
 80003c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003c8:	db10      	blt.n	80003ec <__aeabi_l2f+0x5c>
 80003ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ce:	4463      	add	r3, ip
 80003d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003d4:	f1c2 0220 	rsb	r2, r2, #32
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	fa20 f202 	lsr.w	r2, r0, r2
 80003e0:	eb43 0002 	adc.w	r0, r3, r2
 80003e4:	bf08      	it	eq
 80003e6:	f020 0001 	biceq.w	r0, r0, #1
 80003ea:	4770      	bx	lr
 80003ec:	f102 0220 	add.w	r2, r2, #32
 80003f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800040a:	4770      	bx	lr

0800040c <__gesf2>:
 800040c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000410:	e006      	b.n	8000420 <__cmpsf2+0x4>
 8000412:	bf00      	nop

08000414 <__lesf2>:
 8000414:	f04f 0c01 	mov.w	ip, #1
 8000418:	e002      	b.n	8000420 <__cmpsf2+0x4>
 800041a:	bf00      	nop

0800041c <__cmpsf2>:
 800041c:	f04f 0c01 	mov.w	ip, #1
 8000420:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000424:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000428:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800042c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000430:	bf18      	it	ne
 8000432:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000436:	d011      	beq.n	800045c <__cmpsf2+0x40>
 8000438:	b001      	add	sp, #4
 800043a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800043e:	bf18      	it	ne
 8000440:	ea90 0f01 	teqne	r0, r1
 8000444:	bf58      	it	pl
 8000446:	ebb2 0003 	subspl.w	r0, r2, r3
 800044a:	bf88      	it	hi
 800044c:	17c8      	asrhi	r0, r1, #31
 800044e:	bf38      	it	cc
 8000450:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000454:	bf18      	it	ne
 8000456:	f040 0001 	orrne.w	r0, r0, #1
 800045a:	4770      	bx	lr
 800045c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000460:	d102      	bne.n	8000468 <__cmpsf2+0x4c>
 8000462:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000466:	d105      	bne.n	8000474 <__cmpsf2+0x58>
 8000468:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800046c:	d1e4      	bne.n	8000438 <__cmpsf2+0x1c>
 800046e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000472:	d0e1      	beq.n	8000438 <__cmpsf2+0x1c>
 8000474:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <__aeabi_cfrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	4608      	mov	r0, r1
 8000480:	4661      	mov	r1, ip
 8000482:	e7ff      	b.n	8000484 <__aeabi_cfcmpeq>

08000484 <__aeabi_cfcmpeq>:
 8000484:	b50f      	push	{r0, r1, r2, r3, lr}
 8000486:	f7ff ffc9 	bl	800041c <__cmpsf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	bf48      	it	mi
 800048e:	f110 0f00 	cmnmi.w	r0, #0
 8000492:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000494 <__aeabi_fcmpeq>:
 8000494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000498:	f7ff fff4 	bl	8000484 <__aeabi_cfcmpeq>
 800049c:	bf0c      	ite	eq
 800049e:	2001      	moveq	r0, #1
 80004a0:	2000      	movne	r0, #0
 80004a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004a6:	bf00      	nop

080004a8 <__aeabi_fcmplt>:
 80004a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004ac:	f7ff ffea 	bl	8000484 <__aeabi_cfcmpeq>
 80004b0:	bf34      	ite	cc
 80004b2:	2001      	movcc	r0, #1
 80004b4:	2000      	movcs	r0, #0
 80004b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ba:	bf00      	nop

080004bc <__aeabi_fcmple>:
 80004bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004c0:	f7ff ffe0 	bl	8000484 <__aeabi_cfcmpeq>
 80004c4:	bf94      	ite	ls
 80004c6:	2001      	movls	r0, #1
 80004c8:	2000      	movhi	r0, #0
 80004ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ce:	bf00      	nop

080004d0 <__aeabi_fcmpge>:
 80004d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004d4:	f7ff ffd2 	bl	800047c <__aeabi_cfrcmple>
 80004d8:	bf94      	ite	ls
 80004da:	2001      	movls	r0, #1
 80004dc:	2000      	movhi	r0, #0
 80004de:	f85d fb08 	ldr.w	pc, [sp], #8
 80004e2:	bf00      	nop

080004e4 <__aeabi_fcmpgt>:
 80004e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004e8:	f7ff ffc8 	bl	800047c <__aeabi_cfrcmple>
 80004ec:	bf34      	ite	cc
 80004ee:	2001      	movcc	r0, #1
 80004f0:	2000      	movcs	r0, #0
 80004f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2iz>:
 80004f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000500:	d30f      	bcc.n	8000522 <__aeabi_f2iz+0x2a>
 8000502:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000506:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800050a:	d90d      	bls.n	8000528 <__aeabi_f2iz+0x30>
 800050c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000514:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000518:	fa23 f002 	lsr.w	r0, r3, r2
 800051c:	bf18      	it	ne
 800051e:	4240      	negne	r0, r0
 8000520:	4770      	bx	lr
 8000522:	f04f 0000 	mov.w	r0, #0
 8000526:	4770      	bx	lr
 8000528:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800052c:	d101      	bne.n	8000532 <__aeabi_f2iz+0x3a>
 800052e:	0242      	lsls	r2, r0, #9
 8000530:	d105      	bne.n	800053e <__aeabi_f2iz+0x46>
 8000532:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000536:	bf08      	it	eq
 8000538:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800053c:	4770      	bx	lr
 800053e:	f04f 0000 	mov.w	r0, #0
 8000542:	4770      	bx	lr

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000554:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000558:	f000 b80c 	b.w	8000574 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f001 fecc 	bl	8002300 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__aeabi_drsub>:
 8000578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e002      	b.n	8000584 <__adddf3>
 800057e:	bf00      	nop

08000580 <__aeabi_dsub>:
 8000580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000584 <__adddf3>:
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800058a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800058e:	ea94 0f05 	teq	r4, r5
 8000592:	bf08      	it	eq
 8000594:	ea90 0f02 	teqeq	r0, r2
 8000598:	bf1f      	itttt	ne
 800059a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800059e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005aa:	f000 80e2 	beq.w	8000772 <__adddf3+0x1ee>
 80005ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005b6:	bfb8      	it	lt
 80005b8:	426d      	neglt	r5, r5
 80005ba:	dd0c      	ble.n	80005d6 <__adddf3+0x52>
 80005bc:	442c      	add	r4, r5
 80005be:	ea80 0202 	eor.w	r2, r0, r2
 80005c2:	ea81 0303 	eor.w	r3, r1, r3
 80005c6:	ea82 0000 	eor.w	r0, r2, r0
 80005ca:	ea83 0101 	eor.w	r1, r3, r1
 80005ce:	ea80 0202 	eor.w	r2, r0, r2
 80005d2:	ea81 0303 	eor.w	r3, r1, r3
 80005d6:	2d36      	cmp	r5, #54	; 0x36
 80005d8:	bf88      	it	hi
 80005da:	bd30      	pophi	{r4, r5, pc}
 80005dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005ec:	d002      	beq.n	80005f4 <__adddf3+0x70>
 80005ee:	4240      	negs	r0, r0
 80005f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000600:	d002      	beq.n	8000608 <__adddf3+0x84>
 8000602:	4252      	negs	r2, r2
 8000604:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000608:	ea94 0f05 	teq	r4, r5
 800060c:	f000 80a7 	beq.w	800075e <__adddf3+0x1da>
 8000610:	f1a4 0401 	sub.w	r4, r4, #1
 8000614:	f1d5 0e20 	rsbs	lr, r5, #32
 8000618:	db0d      	blt.n	8000636 <__adddf3+0xb2>
 800061a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800061e:	fa22 f205 	lsr.w	r2, r2, r5
 8000622:	1880      	adds	r0, r0, r2
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	fa03 f20e 	lsl.w	r2, r3, lr
 800062c:	1880      	adds	r0, r0, r2
 800062e:	fa43 f305 	asr.w	r3, r3, r5
 8000632:	4159      	adcs	r1, r3
 8000634:	e00e      	b.n	8000654 <__adddf3+0xd0>
 8000636:	f1a5 0520 	sub.w	r5, r5, #32
 800063a:	f10e 0e20 	add.w	lr, lr, #32
 800063e:	2a01      	cmp	r2, #1
 8000640:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000644:	bf28      	it	cs
 8000646:	f04c 0c02 	orrcs.w	ip, ip, #2
 800064a:	fa43 f305 	asr.w	r3, r3, r5
 800064e:	18c0      	adds	r0, r0, r3
 8000650:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000658:	d507      	bpl.n	800066a <__adddf3+0xe6>
 800065a:	f04f 0e00 	mov.w	lr, #0
 800065e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000662:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000666:	eb6e 0101 	sbc.w	r1, lr, r1
 800066a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800066e:	d31b      	bcc.n	80006a8 <__adddf3+0x124>
 8000670:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000674:	d30c      	bcc.n	8000690 <__adddf3+0x10c>
 8000676:	0849      	lsrs	r1, r1, #1
 8000678:	ea5f 0030 	movs.w	r0, r0, rrx
 800067c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000680:	f104 0401 	add.w	r4, r4, #1
 8000684:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000688:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800068c:	f080 809a 	bcs.w	80007c4 <__adddf3+0x240>
 8000690:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	ea41 0105 	orr.w	r1, r1, r5
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006ac:	4140      	adcs	r0, r0
 80006ae:	eb41 0101 	adc.w	r1, r1, r1
 80006b2:	3c01      	subs	r4, #1
 80006b4:	bf28      	it	cs
 80006b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006ba:	d2e9      	bcs.n	8000690 <__adddf3+0x10c>
 80006bc:	f091 0f00 	teq	r1, #0
 80006c0:	bf04      	itt	eq
 80006c2:	4601      	moveq	r1, r0
 80006c4:	2000      	moveq	r0, #0
 80006c6:	fab1 f381 	clz	r3, r1
 80006ca:	bf08      	it	eq
 80006cc:	3320      	addeq	r3, #32
 80006ce:	f1a3 030b 	sub.w	r3, r3, #11
 80006d2:	f1b3 0220 	subs.w	r2, r3, #32
 80006d6:	da0c      	bge.n	80006f2 <__adddf3+0x16e>
 80006d8:	320c      	adds	r2, #12
 80006da:	dd08      	ble.n	80006ee <__adddf3+0x16a>
 80006dc:	f102 0c14 	add.w	ip, r2, #20
 80006e0:	f1c2 020c 	rsb	r2, r2, #12
 80006e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80006e8:	fa21 f102 	lsr.w	r1, r1, r2
 80006ec:	e00c      	b.n	8000708 <__adddf3+0x184>
 80006ee:	f102 0214 	add.w	r2, r2, #20
 80006f2:	bfd8      	it	le
 80006f4:	f1c2 0c20 	rsble	ip, r2, #32
 80006f8:	fa01 f102 	lsl.w	r1, r1, r2
 80006fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000700:	bfdc      	itt	le
 8000702:	ea41 010c 	orrle.w	r1, r1, ip
 8000706:	4090      	lslle	r0, r2
 8000708:	1ae4      	subs	r4, r4, r3
 800070a:	bfa2      	ittt	ge
 800070c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000710:	4329      	orrge	r1, r5
 8000712:	bd30      	popge	{r4, r5, pc}
 8000714:	ea6f 0404 	mvn.w	r4, r4
 8000718:	3c1f      	subs	r4, #31
 800071a:	da1c      	bge.n	8000756 <__adddf3+0x1d2>
 800071c:	340c      	adds	r4, #12
 800071e:	dc0e      	bgt.n	800073e <__adddf3+0x1ba>
 8000720:	f104 0414 	add.w	r4, r4, #20
 8000724:	f1c4 0220 	rsb	r2, r4, #32
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f302 	lsl.w	r3, r1, r2
 8000730:	ea40 0003 	orr.w	r0, r0, r3
 8000734:	fa21 f304 	lsr.w	r3, r1, r4
 8000738:	ea45 0103 	orr.w	r1, r5, r3
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	f1c4 040c 	rsb	r4, r4, #12
 8000742:	f1c4 0220 	rsb	r2, r4, #32
 8000746:	fa20 f002 	lsr.w	r0, r0, r2
 800074a:	fa01 f304 	lsl.w	r3, r1, r4
 800074e:	ea40 0003 	orr.w	r0, r0, r3
 8000752:	4629      	mov	r1, r5
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	fa21 f004 	lsr.w	r0, r1, r4
 800075a:	4629      	mov	r1, r5
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	f094 0f00 	teq	r4, #0
 8000762:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000766:	bf06      	itte	eq
 8000768:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800076c:	3401      	addeq	r4, #1
 800076e:	3d01      	subne	r5, #1
 8000770:	e74e      	b.n	8000610 <__adddf3+0x8c>
 8000772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000776:	bf18      	it	ne
 8000778:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800077c:	d029      	beq.n	80007d2 <__adddf3+0x24e>
 800077e:	ea94 0f05 	teq	r4, r5
 8000782:	bf08      	it	eq
 8000784:	ea90 0f02 	teqeq	r0, r2
 8000788:	d005      	beq.n	8000796 <__adddf3+0x212>
 800078a:	ea54 0c00 	orrs.w	ip, r4, r0
 800078e:	bf04      	itt	eq
 8000790:	4619      	moveq	r1, r3
 8000792:	4610      	moveq	r0, r2
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	ea91 0f03 	teq	r1, r3
 800079a:	bf1e      	ittt	ne
 800079c:	2100      	movne	r1, #0
 800079e:	2000      	movne	r0, #0
 80007a0:	bd30      	popne	{r4, r5, pc}
 80007a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007a6:	d105      	bne.n	80007b4 <__adddf3+0x230>
 80007a8:	0040      	lsls	r0, r0, #1
 80007aa:	4149      	adcs	r1, r1
 80007ac:	bf28      	it	cs
 80007ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007b2:	bd30      	pop	{r4, r5, pc}
 80007b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007b8:	bf3c      	itt	cc
 80007ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007be:	bd30      	popcc	{r4, r5, pc}
 80007c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007d6:	bf1a      	itte	ne
 80007d8:	4619      	movne	r1, r3
 80007da:	4610      	movne	r0, r2
 80007dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007e0:	bf1c      	itt	ne
 80007e2:	460b      	movne	r3, r1
 80007e4:	4602      	movne	r2, r0
 80007e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007ea:	bf06      	itte	eq
 80007ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007f0:	ea91 0f03 	teqeq	r1, r3
 80007f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	bf00      	nop

080007fc <__aeabi_ui2d>:
 80007fc:	f090 0f00 	teq	r0, #0
 8000800:	bf04      	itt	eq
 8000802:	2100      	moveq	r1, #0
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000810:	f04f 0500 	mov.w	r5, #0
 8000814:	f04f 0100 	mov.w	r1, #0
 8000818:	e750      	b.n	80006bc <__adddf3+0x138>
 800081a:	bf00      	nop

0800081c <__aeabi_i2d>:
 800081c:	f090 0f00 	teq	r0, #0
 8000820:	bf04      	itt	eq
 8000822:	2100      	moveq	r1, #0
 8000824:	4770      	bxeq	lr
 8000826:	b530      	push	{r4, r5, lr}
 8000828:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000830:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000834:	bf48      	it	mi
 8000836:	4240      	negmi	r0, r0
 8000838:	f04f 0100 	mov.w	r1, #0
 800083c:	e73e      	b.n	80006bc <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_f2d>:
 8000840:	0042      	lsls	r2, r0, #1
 8000842:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000846:	ea4f 0131 	mov.w	r1, r1, rrx
 800084a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800084e:	bf1f      	itttt	ne
 8000850:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000854:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000858:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800085c:	4770      	bxne	lr
 800085e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000862:	bf08      	it	eq
 8000864:	4770      	bxeq	lr
 8000866:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800086a:	bf04      	itt	eq
 800086c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000870:	4770      	bxeq	lr
 8000872:	b530      	push	{r4, r5, lr}
 8000874:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800087c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000880:	e71c      	b.n	80006bc <__adddf3+0x138>
 8000882:	bf00      	nop

08000884 <__aeabi_ul2d>:
 8000884:	ea50 0201 	orrs.w	r2, r0, r1
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	b530      	push	{r4, r5, lr}
 800088e:	f04f 0500 	mov.w	r5, #0
 8000892:	e00a      	b.n	80008aa <__aeabi_l2d+0x16>

08000894 <__aeabi_l2d>:
 8000894:	ea50 0201 	orrs.w	r2, r0, r1
 8000898:	bf08      	it	eq
 800089a:	4770      	bxeq	lr
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008a2:	d502      	bpl.n	80008aa <__aeabi_l2d+0x16>
 80008a4:	4240      	negs	r0, r0
 80008a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008b6:	f43f aed8 	beq.w	800066a <__adddf3+0xe6>
 80008ba:	f04f 0203 	mov.w	r2, #3
 80008be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008c2:	bf18      	it	ne
 80008c4:	3203      	addne	r2, #3
 80008c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ca:	bf18      	it	ne
 80008cc:	3203      	addne	r2, #3
 80008ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008d2:	f1c2 0320 	rsb	r3, r2, #32
 80008d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80008da:	fa20 f002 	lsr.w	r0, r0, r2
 80008de:	fa01 fe03 	lsl.w	lr, r1, r3
 80008e2:	ea40 000e 	orr.w	r0, r0, lr
 80008e6:	fa21 f102 	lsr.w	r1, r1, r2
 80008ea:	4414      	add	r4, r2
 80008ec:	e6bd      	b.n	800066a <__adddf3+0xe6>
 80008ee:	bf00      	nop

080008f0 <__aeabi_dmul>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fe:	bf1d      	ittte	ne
 8000900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000904:	ea94 0f0c 	teqne	r4, ip
 8000908:	ea95 0f0c 	teqne	r5, ip
 800090c:	f000 f8de 	bleq	8000acc <__aeabi_dmul+0x1dc>
 8000910:	442c      	add	r4, r5
 8000912:	ea81 0603 	eor.w	r6, r1, r3
 8000916:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800091a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800091e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000922:	bf18      	it	ne
 8000924:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000930:	d038      	beq.n	80009a4 <__aeabi_dmul+0xb4>
 8000932:	fba0 ce02 	umull	ip, lr, r0, r2
 8000936:	f04f 0500 	mov.w	r5, #0
 800093a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800093e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000942:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000946:	f04f 0600 	mov.w	r6, #0
 800094a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800094e:	f09c 0f00 	teq	ip, #0
 8000952:	bf18      	it	ne
 8000954:	f04e 0e01 	orrne.w	lr, lr, #1
 8000958:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800095c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000960:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000964:	d204      	bcs.n	8000970 <__aeabi_dmul+0x80>
 8000966:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800096a:	416d      	adcs	r5, r5
 800096c:	eb46 0606 	adc.w	r6, r6, r6
 8000970:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000974:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000978:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800097c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000980:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000984:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000988:	bf88      	it	hi
 800098a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098e:	d81e      	bhi.n	80009ce <__aeabi_dmul+0xde>
 8000990:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000994:	bf08      	it	eq
 8000996:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009a8:	ea46 0101 	orr.w	r1, r6, r1
 80009ac:	ea40 0002 	orr.w	r0, r0, r2
 80009b0:	ea81 0103 	eor.w	r1, r1, r3
 80009b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	f300 80ab 	bgt.w	8000b28 <__aeabi_dmul+0x238>
 80009d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009d6:	bfde      	ittt	le
 80009d8:	2000      	movle	r0, #0
 80009da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009de:	bd70      	pople	{r4, r5, r6, pc}
 80009e0:	f1c4 0400 	rsb	r4, r4, #0
 80009e4:	3c20      	subs	r4, #32
 80009e6:	da35      	bge.n	8000a54 <__aeabi_dmul+0x164>
 80009e8:	340c      	adds	r4, #12
 80009ea:	dc1b      	bgt.n	8000a24 <__aeabi_dmul+0x134>
 80009ec:	f104 0414 	add.w	r4, r4, #20
 80009f0:	f1c4 0520 	rsb	r5, r4, #32
 80009f4:	fa00 f305 	lsl.w	r3, r0, r5
 80009f8:	fa20 f004 	lsr.w	r0, r0, r4
 80009fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000a00:	ea40 0002 	orr.w	r0, r0, r2
 8000a04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a10:	fa21 f604 	lsr.w	r6, r1, r4
 8000a14:	eb42 0106 	adc.w	r1, r2, r6
 8000a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a1c:	bf08      	it	eq
 8000a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f1c4 040c 	rsb	r4, r4, #12
 8000a28:	f1c4 0520 	rsb	r5, r4, #32
 8000a2c:	fa00 f304 	lsl.w	r3, r0, r4
 8000a30:	fa20 f005 	lsr.w	r0, r0, r5
 8000a34:	fa01 f204 	lsl.w	r2, r1, r4
 8000a38:	ea40 0002 	orr.w	r0, r0, r2
 8000a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a44:	f141 0100 	adc.w	r1, r1, #0
 8000a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a4c:	bf08      	it	eq
 8000a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a52:	bd70      	pop	{r4, r5, r6, pc}
 8000a54:	f1c4 0520 	rsb	r5, r4, #32
 8000a58:	fa00 f205 	lsl.w	r2, r0, r5
 8000a5c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a60:	fa20 f304 	lsr.w	r3, r0, r4
 8000a64:	fa01 f205 	lsl.w	r2, r1, r5
 8000a68:	ea43 0302 	orr.w	r3, r3, r2
 8000a6c:	fa21 f004 	lsr.w	r0, r1, r4
 8000a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a74:	fa21 f204 	lsr.w	r2, r1, r4
 8000a78:	ea20 0002 	bic.w	r0, r0, r2
 8000a7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a84:	bf08      	it	eq
 8000a86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f094 0f00 	teq	r4, #0
 8000a90:	d10f      	bne.n	8000ab2 <__aeabi_dmul+0x1c2>
 8000a92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a96:	0040      	lsls	r0, r0, #1
 8000a98:	eb41 0101 	adc.w	r1, r1, r1
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000aa0:	bf08      	it	eq
 8000aa2:	3c01      	subeq	r4, #1
 8000aa4:	d0f7      	beq.n	8000a96 <__aeabi_dmul+0x1a6>
 8000aa6:	ea41 0106 	orr.w	r1, r1, r6
 8000aaa:	f095 0f00 	teq	r5, #0
 8000aae:	bf18      	it	ne
 8000ab0:	4770      	bxne	lr
 8000ab2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	eb43 0303 	adc.w	r3, r3, r3
 8000abc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ac0:	bf08      	it	eq
 8000ac2:	3d01      	subeq	r5, #1
 8000ac4:	d0f7      	beq.n	8000ab6 <__aeabi_dmul+0x1c6>
 8000ac6:	ea43 0306 	orr.w	r3, r3, r6
 8000aca:	4770      	bx	lr
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad4:	bf18      	it	ne
 8000ad6:	ea95 0f0c 	teqne	r5, ip
 8000ada:	d00c      	beq.n	8000af6 <__aeabi_dmul+0x206>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	d1d1      	bne.n	8000a8c <__aeabi_dmul+0x19c>
 8000ae8:	ea81 0103 	eor.w	r1, r1, r3
 8000aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000afa:	bf06      	itte	eq
 8000afc:	4610      	moveq	r0, r2
 8000afe:	4619      	moveq	r1, r3
 8000b00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b04:	d019      	beq.n	8000b3a <__aeabi_dmul+0x24a>
 8000b06:	ea94 0f0c 	teq	r4, ip
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dmul+0x222>
 8000b0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b10:	d113      	bne.n	8000b3a <__aeabi_dmul+0x24a>
 8000b12:	ea95 0f0c 	teq	r5, ip
 8000b16:	d105      	bne.n	8000b24 <__aeabi_dmul+0x234>
 8000b18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b1c:	bf1c      	itt	ne
 8000b1e:	4610      	movne	r0, r2
 8000b20:	4619      	movne	r1, r3
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dmul+0x24a>
 8000b24:	ea81 0103 	eor.w	r1, r1, r3
 8000b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
 8000b3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b42:	bd70      	pop	{r4, r5, r6, pc}

08000b44 <__aeabi_ddiv>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b52:	bf1d      	ittte	ne
 8000b54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b58:	ea94 0f0c 	teqne	r4, ip
 8000b5c:	ea95 0f0c 	teqne	r5, ip
 8000b60:	f000 f8a7 	bleq	8000cb2 <__aeabi_ddiv+0x16e>
 8000b64:	eba4 0405 	sub.w	r4, r4, r5
 8000b68:	ea81 0e03 	eor.w	lr, r1, r3
 8000b6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b74:	f000 8088 	beq.w	8000c88 <__aeabi_ddiv+0x144>
 8000b78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b88:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b94:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b9c:	429d      	cmp	r5, r3
 8000b9e:	bf08      	it	eq
 8000ba0:	4296      	cmpeq	r6, r2
 8000ba2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000ba6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000baa:	d202      	bcs.n	8000bb2 <__aeabi_ddiv+0x6e>
 8000bac:	085b      	lsrs	r3, r3, #1
 8000bae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bb2:	1ab6      	subs	r6, r6, r2
 8000bb4:	eb65 0503 	sbc.w	r5, r5, r3
 8000bb8:	085b      	lsrs	r3, r3, #1
 8000bba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bce:	bf22      	ittt	cs
 8000bd0:	1ab6      	subcs	r6, r6, r2
 8000bd2:	4675      	movcs	r5, lr
 8000bd4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bde:	ebb6 0e02 	subs.w	lr, r6, r2
 8000be2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000be6:	bf22      	ittt	cs
 8000be8:	1ab6      	subcs	r6, r6, r2
 8000bea:	4675      	movcs	r5, lr
 8000bec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bfe:	bf22      	ittt	cs
 8000c00:	1ab6      	subcs	r6, r6, r2
 8000c02:	4675      	movcs	r5, lr
 8000c04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c16:	bf22      	ittt	cs
 8000c18:	1ab6      	subcs	r6, r6, r2
 8000c1a:	4675      	movcs	r5, lr
 8000c1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c24:	d018      	beq.n	8000c58 <__aeabi_ddiv+0x114>
 8000c26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c42:	d1c0      	bne.n	8000bc6 <__aeabi_ddiv+0x82>
 8000c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c48:	d10b      	bne.n	8000c62 <__aeabi_ddiv+0x11e>
 8000c4a:	ea41 0100 	orr.w	r1, r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c56:	e7b6      	b.n	8000bc6 <__aeabi_ddiv+0x82>
 8000c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c5c:	bf04      	itt	eq
 8000c5e:	4301      	orreq	r1, r0
 8000c60:	2000      	moveq	r0, #0
 8000c62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c66:	bf88      	it	hi
 8000c68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c6c:	f63f aeaf 	bhi.w	80009ce <__aeabi_dmul+0xde>
 8000c70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c74:	bf04      	itt	eq
 8000c76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c7e:	f150 0000 	adcs.w	r0, r0, #0
 8000c82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c94:	bfc2      	ittt	gt
 8000c96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000ca0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ca4:	f04f 0e00 	mov.w	lr, #0
 8000ca8:	3c01      	subs	r4, #1
 8000caa:	e690      	b.n	80009ce <__aeabi_dmul+0xde>
 8000cac:	ea45 0e06 	orr.w	lr, r5, r6
 8000cb0:	e68d      	b.n	80009ce <__aeabi_dmul+0xde>
 8000cb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cb6:	ea94 0f0c 	teq	r4, ip
 8000cba:	bf08      	it	eq
 8000cbc:	ea95 0f0c 	teqeq	r5, ip
 8000cc0:	f43f af3b 	beq.w	8000b3a <__aeabi_dmul+0x24a>
 8000cc4:	ea94 0f0c 	teq	r4, ip
 8000cc8:	d10a      	bne.n	8000ce0 <__aeabi_ddiv+0x19c>
 8000cca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cce:	f47f af34 	bne.w	8000b3a <__aeabi_dmul+0x24a>
 8000cd2:	ea95 0f0c 	teq	r5, ip
 8000cd6:	f47f af25 	bne.w	8000b24 <__aeabi_dmul+0x234>
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	e72c      	b.n	8000b3a <__aeabi_dmul+0x24a>
 8000ce0:	ea95 0f0c 	teq	r5, ip
 8000ce4:	d106      	bne.n	8000cf4 <__aeabi_ddiv+0x1b0>
 8000ce6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cea:	f43f aefd 	beq.w	8000ae8 <__aeabi_dmul+0x1f8>
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	e722      	b.n	8000b3a <__aeabi_dmul+0x24a>
 8000cf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cf8:	bf18      	it	ne
 8000cfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cfe:	f47f aec5 	bne.w	8000a8c <__aeabi_dmul+0x19c>
 8000d02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d06:	f47f af0d 	bne.w	8000b24 <__aeabi_dmul+0x234>
 8000d0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d0e:	f47f aeeb 	bne.w	8000ae8 <__aeabi_dmul+0x1f8>
 8000d12:	e712      	b.n	8000b3a <__aeabi_dmul+0x24a>

08000d14 <__aeabi_fmul>:
 8000d14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d22:	ea92 0f0c 	teqne	r2, ip
 8000d26:	ea93 0f0c 	teqne	r3, ip
 8000d2a:	d06f      	beq.n	8000e0c <__aeabi_fmul+0xf8>
 8000d2c:	441a      	add	r2, r3
 8000d2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d32:	0240      	lsls	r0, r0, #9
 8000d34:	bf18      	it	ne
 8000d36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3a:	d01e      	beq.n	8000d7a <__aeabi_fmul+0x66>
 8000d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d48:	fba0 3101 	umull	r3, r1, r0, r1
 8000d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d54:	bf3e      	ittt	cc
 8000d56:	0049      	lslcc	r1, r1, #1
 8000d58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	ea40 0001 	orr.w	r0, r0, r1
 8000d62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d66:	2afd      	cmp	r2, #253	; 0xfd
 8000d68:	d81d      	bhi.n	8000da6 <__aeabi_fmul+0x92>
 8000d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d72:	bf08      	it	eq
 8000d74:	f020 0001 	biceq.w	r0, r0, #1
 8000d78:	4770      	bx	lr
 8000d7a:	f090 0f00 	teq	r0, #0
 8000d7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	0249      	lsleq	r1, r1, #9
 8000d86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d8e:	3a7f      	subs	r2, #127	; 0x7f
 8000d90:	bfc2      	ittt	gt
 8000d92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9a:	4770      	bxgt	lr
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	3a01      	subs	r2, #1
 8000da6:	dc5d      	bgt.n	8000e64 <__aeabi_fmul+0x150>
 8000da8:	f112 0f19 	cmn.w	r2, #25
 8000dac:	bfdc      	itt	le
 8000dae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db2:	4770      	bxle	lr
 8000db4:	f1c2 0200 	rsb	r2, r2, #0
 8000db8:	0041      	lsls	r1, r0, #1
 8000dba:	fa21 f102 	lsr.w	r1, r1, r2
 8000dbe:	f1c2 0220 	rsb	r2, r2, #32
 8000dc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dca:	f140 0000 	adc.w	r0, r0, #0
 8000dce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd2:	bf08      	it	eq
 8000dd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd8:	4770      	bx	lr
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fmul+0xce>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xe6>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e78f      	b.n	8000d2c <__aeabi_fmul+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	bf18      	it	ne
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d00a      	beq.n	8000e32 <__aeabi_fmul+0x11e>
 8000e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e20:	bf18      	it	ne
 8000e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	d1d8      	bne.n	8000dda <__aeabi_fmul+0xc6>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	bf17      	itett	ne
 8000e38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e3c:	4608      	moveq	r0, r1
 8000e3e:	f091 0f00 	teqne	r1, #0
 8000e42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e46:	d014      	beq.n	8000e72 <__aeabi_fmul+0x15e>
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	d101      	bne.n	8000e52 <__aeabi_fmul+0x13e>
 8000e4e:	0242      	lsls	r2, r0, #9
 8000e50:	d10f      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e52:	ea93 0f0c 	teq	r3, ip
 8000e56:	d103      	bne.n	8000e60 <__aeabi_fmul+0x14c>
 8000e58:	024b      	lsls	r3, r1, #9
 8000e5a:	bf18      	it	ne
 8000e5c:	4608      	movne	r0, r1
 8000e5e:	d108      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e70:	4770      	bx	lr
 8000e72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7a:	4770      	bx	lr

08000e7c <__aeabi_fdiv>:
 8000e7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e84:	bf1e      	ittt	ne
 8000e86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8a:	ea92 0f0c 	teqne	r2, ip
 8000e8e:	ea93 0f0c 	teqne	r3, ip
 8000e92:	d069      	beq.n	8000f68 <__aeabi_fdiv+0xec>
 8000e94:	eba2 0203 	sub.w	r2, r2, r3
 8000e98:	ea80 0c01 	eor.w	ip, r0, r1
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea2:	d037      	beq.n	8000f14 <__aeabi_fdiv+0x98>
 8000ea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ea8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf38      	it	cc
 8000eb8:	005b      	lslcc	r3, r3, #1
 8000eba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ebe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	bf24      	itt	cs
 8000ec6:	1a5b      	subcs	r3, r3, r1
 8000ec8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ecc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ed6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ede:	bf24      	itt	cs
 8000ee0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ee8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	bf18      	it	ne
 8000efa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000efe:	d1e0      	bne.n	8000ec2 <__aeabi_fdiv+0x46>
 8000f00:	2afd      	cmp	r2, #253	; 0xfd
 8000f02:	f63f af50 	bhi.w	8000da6 <__aeabi_fmul+0x92>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f0c:	bf08      	it	eq
 8000f0e:	f020 0001 	biceq.w	r0, r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1c:	327f      	adds	r2, #127	; 0x7f
 8000f1e:	bfc2      	ittt	gt
 8000f20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f28:	4770      	bxgt	lr
 8000f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	3a01      	subs	r2, #1
 8000f34:	e737      	b.n	8000da6 <__aeabi_fmul+0x92>
 8000f36:	f092 0f00 	teq	r2, #0
 8000f3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f3e:	bf02      	ittt	eq
 8000f40:	0040      	lsleq	r0, r0, #1
 8000f42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f46:	3a01      	subeq	r2, #1
 8000f48:	d0f9      	beq.n	8000f3e <__aeabi_fdiv+0xc2>
 8000f4a:	ea40 000c 	orr.w	r0, r0, ip
 8000f4e:	f093 0f00 	teq	r3, #0
 8000f52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0049      	lsleq	r1, r1, #1
 8000f5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f5e:	3b01      	subeq	r3, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xda>
 8000f62:	ea41 010c 	orr.w	r1, r1, ip
 8000f66:	e795      	b.n	8000e94 <__aeabi_fdiv+0x18>
 8000f68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d108      	bne.n	8000f84 <__aeabi_fdiv+0x108>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	f47f af7d 	bne.w	8000e72 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	f47f af70 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e776      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f84:	ea93 0f0c 	teq	r3, ip
 8000f88:	d104      	bne.n	8000f94 <__aeabi_fdiv+0x118>
 8000f8a:	024b      	lsls	r3, r1, #9
 8000f8c:	f43f af4c 	beq.w	8000e28 <__aeabi_fmul+0x114>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e76e      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f98:	bf18      	it	ne
 8000f9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f9e:	d1ca      	bne.n	8000f36 <__aeabi_fdiv+0xba>
 8000fa0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa4:	f47f af5c 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000fa8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fac:	f47f af3c 	bne.w	8000e28 <__aeabi_fmul+0x114>
 8000fb0:	e75f      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_f2uiz>:
 8000fb4:	0042      	lsls	r2, r0, #1
 8000fb6:	d20e      	bcs.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fbc:	d30b      	bcc.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc6:	d409      	bmi.n	8000fdc <__aeabi_f2uiz+0x28>
 8000fc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_f2uiz+0x32>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	d102      	bne.n	8000fec <__aeabi_f2uiz+0x38>
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fea:	4770      	bx	lr
 8000fec:	f04f 0000 	mov.w	r0, #0
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Reset_Handler>:
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <Zerobss+0x10>)
 8000ff6:	4685      	mov	sp, r0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	e003      	b.n	8001004 <DataInit>

08000ffc <CopyData>:
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Zerobss+0x14>)
 8000ffe:	585b      	ldr	r3, [r3, r1]
 8001000:	5043      	str	r3, [r0, r1]
 8001002:	3104      	adds	r1, #4

08001004 <DataInit>:
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <Zerobss+0x18>)
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <Zerobss+0x1c>)
 8001008:	1842      	adds	r2, r0, r1
 800100a:	429a      	cmp	r2, r3
 800100c:	d3f6      	bcc.n	8000ffc <CopyData>
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <Zerobss+0x20>)
 8001010:	e002      	b.n	8001018 <Zerobss>

08001012 <FillZerobss>:
 8001012:	2300      	movs	r3, #0
 8001014:	f842 3b04 	str.w	r3, [r2], #4

08001018 <Zerobss>:
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <Zerobss+0x24>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d3f9      	bcc.n	8001012 <FillZerobss>
 800101e:	f007 fd47 	bl	8008ab0 <SystemInit>
 8001022:	f000 f8ff 	bl	8001224 <main>
 8001026:	4770      	bx	lr
 8001028:	2000c000 	andcs	ip, r0, r0
 800102c:	0800c1a0 	stmdaeq	r0, {r5, r7, r8, lr, pc}
 8001030:	20000000 	andcs	r0, r0, r0
 8001034:	200000e4 	andcs	r0, r0, r4, ror #1
 8001038:	200000e8 	andcs	r0, r0, r8, ror #1
 800103c:	20007824 	andcs	r7, r0, r4, lsr #16

08001040 <ADC0_1_IRQHandler>:
 8001040:	e7fe      	b.n	8001040 <ADC0_1_IRQHandler>

08001042 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8001042:	4770      	bx	lr

08001044 <PixelDmxStartStop::Start()>:
 8001044:	2204      	movs	r2, #4
 8001046:	4b01      	ldr	r3, [pc, #4]	; (800104c <PixelDmxStartStop::Start()+0x8>)
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	4770      	bx	lr
 800104c:	40011000 	andmi	r1, r1, r0

08001050 <PixelDmxStartStop::Stop()>:
 8001050:	2204      	movs	r2, #4
 8001052:	4b01      	ldr	r3, [pc, #4]	; (8001058 <PixelDmxStartStop::Stop()+0x8>)
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	4770      	bx	lr
 8001058:	40011000 	andmi	r1, r1, r0

0800105c <PixelDmxStartStop::~PixelDmxStartStop()>:
 800105c:	b510      	push	{r4, lr}
 800105e:	4604      	mov	r4, r0
 8001060:	f007 faff 	bl	8008662 <operator delete(void*)>
 8001064:	4620      	mov	r0, r4
 8001066:	bd10      	pop	{r4, pc}

08001068 <RDMResponder::PersonalityUpdate(LightSet*)>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4e0a      	ldr	r6, [pc, #40]	; (8001094 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 800106c:	4604      	mov	r4, r0
 800106e:	6830      	ldr	r0, [r6, #0]
 8001070:	460d      	mov	r5, r1
 8001072:	4281      	cmp	r1, r0
 8001074:	d007      	beq.n	8001086 <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 8001076:	6803      	ldr	r3, [r0, #0]
 8001078:	2100      	movs	r1, #0
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4798      	blx	r3
 800107e:	2200      	movs	r2, #0
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 8001082:	6035      	str	r5, [r6, #0]
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	4620      	mov	r0, r4
 8001088:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800108c:	f000 fbfa 	bl	8001884 <RDMResponder::PersonalityUpdate(unsigned int)>
 8001090:	bd70      	pop	{r4, r5, r6, pc}
 8001092:	bf00      	nop
 8001094:	20000208 	andcs	r0, r0, r8, lsl #4
 8001098:	20000204 	andcs	r0, r0, r4, lsl #4

0800109c <RDMResponder::DmxStartAddressUpdate()>:
 800109c:	b508      	push	{r3, lr}
 800109e:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80010a2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 80010a6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80010aa:	b289      	uxth	r1, r1
 80010ac:	f000 fbd6 	bl	800185c <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 80010b0:	bd08      	pop	{r3, pc}

080010b2 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 80010b2:	b110      	cbz	r0, 80010ba <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	4718      	bx	r3
 80010ba:	4770      	bx	lr

080010bc <RDMResponder::~RDMResponder()>:
 80010bc:	b510      	push	{r4, lr}
 80010be:	4604      	mov	r4, r0
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <RDMResponder::~RDMResponder()+0x3c>)
 80010c2:	f840 3b8c 	str.w	r3, [r0], #140
 80010c6:	f002 f999 	bl	80033fc <RDMSubDevices::~RDMSubDevices()>
 80010ca:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80010ce:	f001 fb6d 	bl	80027ac <RDMSensors::~RDMSensors()>
 80010d2:	2300      	movs	r3, #0
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80010dc:	f002 fda8 	bl	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <RDMResponder::~RDMResponder()+0x40>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	6803      	ldr	r3, [r0, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4798      	blx	r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <RDMResponder::~RDMResponder()+0x44>)
 80010f0:	4620      	mov	r0, r4
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	bf00      	nop
 80010f8:	0800a554 	stmdaeq	r0, {r2, r4, r6, r8, sl, sp, pc}
 80010fc:	20000208 	andcs	r0, r0, r8, lsl #4
 8001100:	20000204 	andcs	r0, r0, r4, lsl #4

08001104 <RDMResponder::~RDMResponder()>:
 8001104:	b510      	push	{r4, lr}
 8001106:	4604      	mov	r4, r0
 8001108:	f7ff ffd8 	bl	80010bc <RDMResponder::~RDMResponder()>
 800110c:	4620      	mov	r0, r4
 800110e:	f007 faa8 	bl	8008662 <operator delete(void*)>
 8001112:	4620      	mov	r0, r4
 8001114:	bd10      	pop	{r4, pc}

08001116 <Display::Printf(unsigned char, char const*, ...)>:
 8001116:	b40c      	push	{r2, r3}
 8001118:	b570      	push	{r4, r5, r6, lr}
 800111a:	6984      	ldr	r4, [r0, #24]
 800111c:	4605      	mov	r5, r0
 800111e:	460e      	mov	r6, r1
 8001120:	b08a      	sub	sp, #40	; 0x28
 8001122:	b174      	cbz	r4, 8001142 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8001124:	ab0f      	add	r3, sp, #60	; 0x3c
 8001126:	2120      	movs	r1, #32
 8001128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800112a:	a802      	add	r0, sp, #8
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f001 f8cf 	bl	80022d0 <vsnprintf>
 8001132:	4604      	mov	r4, r0
 8001134:	69a8      	ldr	r0, [r5, #24]
 8001136:	4631      	mov	r1, r6
 8001138:	6803      	ldr	r3, [r0, #0]
 800113a:	aa02      	add	r2, sp, #8
 800113c:	69dd      	ldr	r5, [r3, #28]
 800113e:	b2a3      	uxth	r3, r4
 8001140:	47a8      	blx	r5
 8001142:	4620      	mov	r0, r4
 8001144:	b00a      	add	sp, #40	; 0x28
 8001146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800114a:	b002      	add	sp, #8
 800114c:	4770      	bx	lr
	...

08001150 <Display::SetSleep(bool)>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	6980      	ldr	r0, [r0, #24]
 8001156:	460d      	mov	r5, r1
 8001158:	b138      	cbz	r0, 800116a <Display::SetSleep(bool)+0x1a>
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	7421      	strb	r1, [r4, #16]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	4798      	blx	r3
 8001162:	b915      	cbnz	r5, 800116a <Display::SetSleep(bool)+0x1a>
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <Display::SetSleep(bool)+0x1c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6063      	str	r3, [r4, #4]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	2000181c 	andcs	r1, r0, ip, lsl r8

08001170 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 8001170:	2300      	movs	r3, #0
 8001172:	b570      	push	{r4, r5, r6, lr}
 8001174:	4604      	mov	r4, r0
 8001176:	460e      	mov	r6, r1
 8001178:	4615      	mov	r5, r2
 800117a:	6043      	str	r3, [r0, #4]
 800117c:	6283      	str	r3, [r0, #40]	; 0x28
 800117e:	b972      	cbnz	r2, 800119e <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 8001180:	8002      	strh	r2, [r0, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	f104 0208 	add.w	r2, r4, #8
 8001188:	1e71      	subs	r1, r6, #1
 800118a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800118e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001190:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001194:	b10b      	cbz	r3, 800119a <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 8001196:	4290      	cmp	r0, r2
 8001198:	d108      	bne.n	80011ac <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 800119a:	4620      	mov	r0, r4
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	4610      	mov	r0, r2
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	4798      	blx	r3
 80011a6:	6065      	str	r5, [r4, #4]
 80011a8:	8020      	strh	r0, [r4, #0]
 80011aa:	e7ea      	b.n	8001182 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 80011ac:	f802 3b01 	strb.w	r3, [r2], #1
 80011b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	e7eb      	b.n	800118e <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

080011b8 <display::timeout::gpio_init()>:
 80011b8:	b510      	push	{r4, lr}
 80011ba:	f240 6003 	movw	r0, #1539	; 0x603
 80011be:	f007 fea9 	bl	8008f14 <rcu_periph_clock_enable>
 80011c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ca:	2203      	movs	r2, #3
 80011cc:	2148      	movs	r1, #72	; 0x48
 80011ce:	4801      	ldr	r0, [pc, #4]	; (80011d4 <display::timeout::gpio_init()+0x1c>)
 80011d0:	f007 be0e 	b.w	8008df0 <gpio_init>
 80011d4:	40010c00 	andmi	r0, r1, r0, lsl #24

080011d8 <display::timeout::gpio_renew()>:
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <display::timeout::gpio_renew()+0x10>)
 80011da:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 80011de:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 80011e2:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80011e6:	4770      	bx	lr
 80011e8:	40010000 	andmi	r0, r1, r0

080011ec <is_config_mode()>:
 80011ec:	b510      	push	{r4, lr}
 80011ee:	4c09      	ldr	r4, [pc, #36]	; (8001214 <is_config_mode()+0x28>)
 80011f0:	f240 6002 	movw	r0, #1538	; 0x602
 80011f4:	f007 fe8e 	bl	8008f14 <rcu_periph_clock_enable>
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	2203      	movs	r2, #3
 80011fc:	4620      	mov	r0, r4
 80011fe:	2148      	movs	r1, #72	; 0x48
 8001200:	f007 fdf6 	bl	8008df0 <gpio_init>
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	4620      	mov	r0, r4
 8001208:	f007 fe46 	bl	8008e98 <gpio_input_bit_get>
 800120c:	fab0 f080 	clz	r0, r0
 8001210:	0940      	lsrs	r0, r0, #5
 8001212:	bd10      	pop	{r4, pc}
 8001214:	40010800 	andmi	r0, r1, r0, lsl #16

08001218 <Hardware::RebootHandler()>:
 8001218:	4b01      	ldr	r3, [pc, #4]	; (8001220 <Hardware::RebootHandler()+0x8>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f005 be28 	b.w	8006e70 <WS28xx::Blackout()>
 8001220:	20000698 	mulcs	r0, r8, r6

08001224 <main>:
 8001224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001228:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 800122c:	a813      	add	r0, sp, #76	; 0x4c
 800122e:	f007 f803 	bl	8008238 <Hardware::Hardware()>
 8001232:	a817      	add	r0, sp, #92	; 0x5c
 8001234:	f005 feae 	bl	8006f94 <Network::Network()>
 8001238:	a81f      	add	r0, sp, #124	; 0x7c
 800123a:	f006 ffa7 	bl	800818c <LedBlink::LedBlink()>
 800123e:	a864      	add	r0, sp, #400	; 0x190
 8001240:	f005 fece 	bl	8006fe0 <DisplayUdf::DisplayUdf()>
 8001244:	4bb4      	ldr	r3, [pc, #720]	; (8001518 <main+0x2f4>)
 8001246:	4ab5      	ldr	r2, [pc, #724]	; (800151c <main+0x2f8>)
 8001248:	49b5      	ldr	r1, [pc, #724]	; (8001520 <main+0x2fc>)
 800124a:	a804      	add	r0, sp, #16
 800124c:	f006 ff58 	bl	8008100 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8001250:	a806      	add	r0, sp, #24
 8001252:	f006 f843 	bl	80072dc <ConfigStore::ConfigStore()>
 8001256:	2101      	movs	r1, #1
 8001258:	a81f      	add	r0, sp, #124	; 0x7c
 800125a:	f006 ffb9 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 800125e:	f7ff ffc5 	bl	80011ec <is_config_mode()>
 8001262:	2100      	movs	r1, #0
 8001264:	4606      	mov	r6, r0
 8001266:	a804      	add	r0, sp, #16
 8001268:	f006 ff82 	bl	8008170 <FirmwareVersion::Print(char const*)>
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2303      	movs	r3, #3
 8001270:	2106      	movs	r1, #6
 8001272:	e9cd 323e 	strd	r3, r2, [sp, #248]	; 0xf8
 8001276:	2300      	movs	r3, #0
 8001278:	e9cd 1340 	strd	r1, r3, [sp, #256]	; 0x100
 800127c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001280:	9342      	str	r3, [sp, #264]	; 0x108
 8001282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001286:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
 800128a:	4ba6      	ldr	r3, [pc, #664]	; (8001524 <main+0x300>)
 800128c:	a80d      	add	r0, sp, #52	; 0x34
 800128e:	9344      	str	r3, [sp, #272]	; 0x110
 8001290:	2301      	movs	r3, #1
 8001292:	9247      	str	r2, [sp, #284]	; 0x11c
 8001294:	e9cd 3345 	strd	r3, r3, [sp, #276]	; 0x114
 8001298:	f8ad 3124 	strh.w	r3, [sp, #292]	; 0x124
 800129c:	f006 fa4c 	bl	8007738 <StorePixelDmx::StorePixelDmx()>
 80012a0:	a90d      	add	r1, sp, #52	; 0x34
 80012a2:	a825      	add	r0, sp, #148	; 0x94
 80012a4:	f004 fb70 	bl	8005988 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 80012a8:	a825      	add	r0, sp, #148	; 0x94
 80012aa:	f004 fb83 	bl	80059b4 <PixelDmxParams::Load()>
 80012ae:	b130      	cbz	r0, 80012be <main+0x9a>
 80012b0:	a825      	add	r0, sp, #148	; 0x94
 80012b2:	a93e      	add	r1, sp, #248	; 0xf8
 80012b4:	f004 fb8a 	bl	80059cc <PixelDmxParams::Set(PixelDmxConfiguration*)>
 80012b8:	a825      	add	r0, sp, #148	; 0x94
 80012ba:	f004 fbc4 	bl	8005a46 <PixelDmxParams::Dump()>
 80012be:	ab1b      	add	r3, sp, #108	; 0x6c
 80012c0:	2101      	movs	r1, #1
 80012c2:	aa07      	add	r2, sp, #28
 80012c4:	a83e      	add	r0, sp, #248	; 0xf8
 80012c6:	f004 f9b7 	bl	8005638 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 80012ca:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d909      	bls.n	80012e4 <main+0xc0>
 80012d0:	9946      	ldr	r1, [sp, #280]	; 0x118
 80012d2:	9a07      	ldr	r2, [sp, #28]
 80012d4:	024b      	lsls	r3, r1, #9
 80012d6:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 80012da:	bf94      	ite	ls
 80012dc:	fbb3 f3f2 	udivls	r3, r3, r2
 80012e0:	23aa      	movhi	r3, #170	; 0xaa
 80012e2:	933f      	str	r3, [sp, #252]	; 0xfc
 80012e4:	a93e      	add	r1, sp, #248	; 0xf8
 80012e6:	a88c      	add	r0, sp, #560	; 0x230
 80012e8:	f004 fb14 	bl	8005914 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80012ec:	4f8e      	ldr	r7, [pc, #568]	; (8001528 <main+0x304>)
 80012ee:	4b8f      	ldr	r3, [pc, #572]	; (800152c <main+0x308>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	2110      	movs	r1, #16
 80012f4:	4638      	mov	r0, r7
 80012f6:	9308      	str	r3, [sp, #32]
 80012f8:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80012fc:	2304      	movs	r3, #4
 80012fe:	f8cd 9280 	str.w	r9, [sp, #640]	; 0x280
 8001302:	f007 fd75 	bl	8008df0 <gpio_init>
 8001306:	2304      	movs	r3, #4
 8001308:	ac08      	add	r4, sp, #32
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	2101      	movs	r1, #1
 800130e:	94a1      	str	r4, [sp, #644]	; 0x284
 8001310:	a805      	add	r0, sp, #20
 8001312:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
 8001316:	f004 fd8b 	bl	8005e30 <PixelPatterns::PixelPatterns(unsigned int)>
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <main+0x30c>)
 800131c:	2c05      	cmp	r4, #5
 800131e:	601c      	str	r4, [r3, #0]
 8001320:	f340 81e9 	ble.w	80016f6 <main+0x4d2>
 8001324:	4649      	mov	r1, r9
 8001326:	a809      	add	r0, sp, #36	; 0x24
 8001328:	f004 fbaa 	bl	8005a80 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>
 800132c:	a80a      	add	r0, sp, #40	; 0x28
 800132e:	f006 fa9b 	bl	8007868 <StoreRDMSensors::StoreRDMSensors()>
 8001332:	a90a      	add	r1, sp, #40	; 0x28
 8001334:	a856      	add	r0, sp, #344	; 0x158
 8001336:	f001 fb45 	bl	80029c4 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 800133a:	a856      	add	r0, sp, #344	; 0x158
 800133c:	f001 fb44 	bl	80029c8 <RDMSensorsParams::Load()>
 8001340:	b128      	cbz	r0, 800134e <main+0x12a>
 8001342:	a856      	add	r0, sp, #344	; 0x158
 8001344:	f001 fb64 	bl	8002a10 <RDMSensorsParams::Set()>
 8001348:	a856      	add	r0, sp, #344	; 0x158
 800134a:	f001 fb49 	bl	80029e0 <RDMSensorsParams::Dump()>
 800134e:	a80b      	add	r0, sp, #44	; 0x2c
 8001350:	f006 fac0 	bl	80078d4 <StoreRDMSubDevices::StoreRDMSubDevices()>
 8001354:	a90b      	add	r1, sp, #44	; 0x2c
 8001356:	a878      	add	r0, sp, #480	; 0x1e0
 8001358:	f002 f91e 	bl	8003598 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 800135c:	a878      	add	r0, sp, #480	; 0x1e0
 800135e:	f002 f91d 	bl	800359c <RDMSubDevicesParams::Load()>
 8001362:	b128      	cbz	r0, 8001370 <main+0x14c>
 8001364:	a878      	add	r0, sp, #480	; 0x1e0
 8001366:	f002 f926 	bl	80035b6 <RDMSubDevicesParams::Set()>
 800136a:	a878      	add	r0, sp, #480	; 0x1e0
 800136c:	f002 f922 	bl	80035b4 <RDMSubDevicesParams::Dump()>
 8001370:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8001372:	f004 fcd7 	bl	8005d24 <PixelType::GetType(pixel::Type)>
 8001376:	4605      	mov	r5, r0
 8001378:	9840      	ldr	r0, [sp, #256]	; 0x100
 800137a:	f8dd 80fc 	ldr.w	r8, [sp, #252]	; 0xfc
 800137e:	f8dd 9118 	ldr.w	r9, [sp, #280]	; 0x118
 8001382:	f004 fcdb 	bl	8005d3c <PixelType::GetMap(pixel::Map)>
 8001386:	462b      	mov	r3, r5
 8001388:	211f      	movs	r1, #31
 800138a:	4a6a      	ldr	r2, [pc, #424]	; (8001534 <main+0x310>)
 800138c:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001390:	f8cd 8000 	str.w	r8, [sp]
 8001394:	a82c      	add	r0, sp, #176	; 0xb0
 8001396:	f000 ff83 	bl	80022a0 <snprintf>
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	f007 f965 	bl	800866a <operator new(unsigned int)>
 80013a0:	4605      	mov	r5, r0
 80013a2:	aa8c      	add	r2, sp, #560	; 0x230
 80013a4:	a92c      	add	r1, sp, #176	; 0xb0
 80013a6:	f7ff fee3 	bl	8001170 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013aa:	202c      	movs	r0, #44	; 0x2c
 80013ac:	950f      	str	r5, [sp, #60]	; 0x3c
 80013ae:	f007 f95c 	bl	800866a <operator new(unsigned int)>
 80013b2:	4605      	mov	r5, r0
 80013b4:	4960      	ldr	r1, [pc, #384]	; (8001538 <main+0x314>)
 80013b6:	aa09      	add	r2, sp, #36	; 0x24
 80013b8:	f7ff feda 	bl	8001170 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80013be:	a8d6      	add	r0, sp, #856	; 0x358
 80013c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80013c4:	9510      	str	r5, [sp, #64]	; 0x40
 80013c6:	f002 fc61 	bl	8003c8c <Dmx::Dmx()>
 80013ca:	ada3      	add	r5, sp, #652	; 0x28c
 80013cc:	4b5b      	ldr	r3, [pc, #364]	; (800153c <main+0x318>)
 80013ce:	2202      	movs	r2, #2
 80013d0:	a90f      	add	r1, sp, #60	; 0x3c
 80013d2:	4628      	mov	r0, r5
 80013d4:	f8c3 8000 	str.w	r8, [r3]
 80013d8:	f002 fe6e 	bl	80040b8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 80013dc:	2101      	movs	r1, #1
 80013de:	a8dd      	add	r0, sp, #884	; 0x374
 80013e0:	f003 f854 	bl	800448c <RDMHandler::RDMHandler(bool)>
 80013e4:	4b56      	ldr	r3, [pc, #344]	; (8001540 <main+0x31c>)
 80013e6:	4628      	mov	r0, r5
 80013e8:	93a3      	str	r3, [sp, #652]	; 0x28c
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <main+0x320>)
 80013ec:	601d      	str	r5, [r3, #0]
 80013ee:	f002 feb1 	bl	8004154 <RDMDeviceResponder::Init()>
 80013f2:	a811      	add	r0, sp, #68	; 0x44
 80013f4:	f006 fa00 	bl	80077f8 <StoreRDMDevice::StoreRDMDevice()>
 80013f8:	a911      	add	r1, sp, #68	; 0x44
 80013fa:	a84a      	add	r0, sp, #296	; 0x128
 80013fc:	f002 fdee 	bl	8003fdc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8001400:	a84a      	add	r0, sp, #296	; 0x128
 8001402:	f002 fdfd 	bl	8004000 <RDMDeviceParams::Load()>
 8001406:	b130      	cbz	r0, 8001416 <main+0x1f2>
 8001408:	a84a      	add	r0, sp, #296	; 0x128
 800140a:	a9a4      	add	r1, sp, #656	; 0x290
 800140c:	f002 fe03 	bl	8004016 <RDMDeviceParams::Set(RDMDevice*)>
 8001410:	a84a      	add	r0, sp, #296	; 0x128
 8001412:	f002 fe34 	bl	800407e <RDMDeviceParams::Dump()>
 8001416:	ab12      	add	r3, sp, #72	; 0x48
 8001418:	93c2      	str	r3, [sp, #776]	; 0x308
 800141a:	2301      	movs	r3, #1
 800141c:	2100      	movs	r1, #0
 800141e:	461a      	mov	r2, r3
 8001420:	a8d6      	add	r0, sp, #856	; 0x358
 8001422:	f002 fc05 	bl	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8001426:	2e00      	cmp	r6, #0
 8001428:	f040 8146 	bne.w	80016b8 <main+0x494>
 800142c:	1e23      	subs	r3, r4, #0
 800142e:	bf18      	it	ne
 8001430:	2301      	movne	r3, #1
 8001432:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001548 <main+0x324>
 8001436:	4628      	mov	r0, r5
 8001438:	f888 3000 	strb.w	r3, [r8]
 800143c:	f002 ff1e 	bl	800427c <RDMDeviceResponder::Print()>
 8001440:	f898 1000 	ldrb.w	r1, [r8]
 8001444:	4a41      	ldr	r2, [pc, #260]	; (800154c <main+0x328>)
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <main+0x32c>)
 8001448:	4842      	ldr	r0, [pc, #264]	; (8001554 <main+0x330>)
 800144a:	2900      	cmp	r1, #0
 800144c:	bf14      	ite	ne
 800144e:	4611      	movne	r1, r2
 8001450:	4619      	moveq	r1, r3
 8001452:	f000 ff15 	bl	8002280 <printf>
 8001456:	2e00      	cmp	r6, #0
 8001458:	f040 8149 	bne.w	80016ee <main+0x4ca>
 800145c:	a88d      	add	r0, sp, #564	; 0x234
 800145e:	f004 f92b 	bl	80056b8 <PixelDmxConfiguration::Print()>
 8001462:	b13c      	cbz	r4, 8001474 <main+0x250>
 8001464:	4620      	mov	r0, r4
 8001466:	f004 fd03 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800146a:	4622      	mov	r2, r4
 800146c:	4601      	mov	r1, r0
 800146e:	483a      	ldr	r0, [pc, #232]	; (8001558 <main+0x334>)
 8001470:	f000 ff06 	bl	8002280 <printf>
 8001474:	4939      	ldr	r1, [pc, #228]	; (800155c <main+0x338>)
 8001476:	a864      	add	r0, sp, #400	; 0x190
 8001478:	f005 fdc4 	bl	8007004 <DisplayUdf::SetTitle(char const*, ...)>
 800147c:	2203      	movs	r2, #3
 800147e:	2102      	movs	r1, #2
 8001480:	a864      	add	r0, sp, #400	; 0x190
 8001482:	f005 fdd2 	bl	800702a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8001486:	220d      	movs	r2, #13
 8001488:	2106      	movs	r1, #6
 800148a:	a864      	add	r0, sp, #400	; 0x190
 800148c:	f005 fdcd 	bl	800702a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8001490:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8001492:	f004 fc47 	bl	8005d24 <PixelType::GetType(pixel::Type)>
 8001496:	4680      	mov	r8, r0
 8001498:	9840      	ldr	r0, [sp, #256]	; 0x100
 800149a:	f8dd 90fc 	ldr.w	r9, [sp, #252]	; 0xfc
 800149e:	f8dd a118 	ldr.w	sl, [sp, #280]	; 0x118
 80014a2:	f004 fc4b 	bl	8005d3c <PixelType::GetMap(pixel::Map)>
 80014a6:	4643      	mov	r3, r8
 80014a8:	2107      	movs	r1, #7
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <main+0x33c>)
 80014ac:	e9cd a001 	strd	sl, r0, [sp, #4]
 80014b0:	f8cd 9000 	str.w	r9, [sp]
 80014b4:	a864      	add	r0, sp, #400	; 0x190
 80014b6:	f7ff fe2e 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80014ba:	a80c      	add	r0, sp, #48	; 0x30
 80014bc:	f006 f838 	bl	8007530 <StoreDisplayUdf::StoreDisplayUdf()>
 80014c0:	a90c      	add	r1, sp, #48	; 0x30
 80014c2:	a834      	add	r0, sp, #208	; 0xd0
 80014c4:	f005 fe1c 	bl	8007100 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80014c8:	a834      	add	r0, sp, #208	; 0xd0
 80014ca:	f005 fe26 	bl	800711a <DisplayUdfParams::Load()>
 80014ce:	b130      	cbz	r0, 80014de <main+0x2ba>
 80014d0:	a834      	add	r0, sp, #208	; 0xd0
 80014d2:	a964      	add	r1, sp, #400	; 0x190
 80014d4:	f005 fe2d 	bl	8007132 <DisplayUdfParams::Set(DisplayUdf*)>
 80014d8:	a834      	add	r0, sp, #208	; 0xd0
 80014da:	f005 fe5d 	bl	8007198 <DisplayUdfParams::Dump()>
 80014de:	a864      	add	r0, sp, #400	; 0x190
 80014e0:	f005 fdbc 	bl	800705c <DisplayUdf::Show()>
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	f000 80e9 	beq.w	80016bc <main+0x498>
 80014ea:	2103      	movs	r1, #3
 80014ec:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 80014ee:	f7ff fde0 	bl	80010b2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80014f2:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 80014f4:	2104      	movs	r1, #4
 80014f6:	f7ff fddc 	bl	80010b2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80014fa:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d039      	beq.n	8001574 <main+0x350>
 8001500:	2300      	movs	r3, #0
 8001502:	7904      	ldrb	r4, [r0, #4]
 8001504:	4917      	ldr	r1, [pc, #92]	; (8001564 <main+0x340>)
 8001506:	429c      	cmp	r4, r3
 8001508:	f103 0301 	add.w	r3, r3, #1
 800150c:	dd2c      	ble.n	8001568 <main+0x344>
 800150e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001512:	2a00      	cmp	r2, #0
 8001514:	d1f7      	bne.n	8001506 <main+0x2e2>
 8001516:	e027      	b.n	8001568 <main+0x344>
 8001518:	0800a0f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sp, pc}
 800151c:	0800a0fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, sp, pc}
 8001520:	0800a1a0 	stmdaeq	r0, {r5, r7, r8, sp, pc}
 8001524:	0800a1a4 	stmdaeq	r0, {r2, r5, r7, r8, sp, pc}
 8001528:	40011000 	andmi	r1, r1, r0
 800152c:	0800a190 	stmdaeq	r0, {r4, r7, r8, sp, pc}
 8001530:	20000690 	mulcs	r0, r0, r6
 8001534:	0800a107 	stmdaeq	r0, {r0, r1, r2, r8, sp, pc}
 8001538:	0800a116 	stmdaeq	r0, {r1, r2, r4, r8, sp, pc}
 800153c:	20000208 	andcs	r0, r0, r8, lsl #4
 8001540:	0800a178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, pc}
 8001544:	200001f8 	strdcs	r0, [r0], -r8
 8001548:	2000020c 	andcs	r0, r0, ip, lsl #4
 800154c:	0800a0d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sp, pc}
 8001550:	0800a0de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sp, pc}
 8001554:	0800a122 	stmdaeq	r0, {r1, r5, r8, sp, pc}
 8001558:	0800a12e 	stmdaeq	r0, {r1, r2, r3, r5, r8, sp, pc}
 800155c:	0800a146 	stmdaeq	r0, {r1, r2, r6, r8, sp, pc}
 8001560:	0800a15c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sp, pc}
 8001564:	0800a0e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sp, pc}
 8001568:	6802      	ldr	r2, [r0, #0]
 800156a:	2104      	movs	r1, #4
 800156c:	69d4      	ldr	r4, [r2, #28]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4a6a      	ldr	r2, [pc, #424]	; (800171c <main+0x4f8>)
 8001572:	47a0      	blx	r4
 8001574:	2105      	movs	r1, #5
 8001576:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 8001578:	f7ff fd9b 	bl	80010b2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 800157c:	2102      	movs	r1, #2
 800157e:	a81f      	add	r0, sp, #124	; 0x7c
 8001580:	f006 fe26 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 8001584:	2102      	movs	r1, #2
 8001586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800158a:	f007 fc07 	bl	8008d9c <fwdgt_config>
 800158e:	2801      	cmp	r0, #1
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 800159a:	d101      	bne.n	80015a0 <main+0x37c>
 800159c:	f007 fbee 	bl	8008d7c <fwdgt_enable>
 80015a0:	4e5f      	ldr	r6, [pc, #380]	; (8001720 <main+0x4fc>)
 80015a2:	4c60      	ldr	r4, [pc, #384]	; (8001724 <main+0x500>)
 80015a4:	f007 fbf2 	bl	8008d8c <fwdgt_counter_reload>
 80015a8:	4628      	mov	r0, r5
 80015aa:	f001 f875 	bl	8002698 <RDMResponder::Run()>
 80015ae:	a806      	add	r0, sp, #24
 80015b0:	f005 ff3c 	bl	800742c <ConfigStore::Flash()>
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	b113      	cbz	r3, 80015be <main+0x39a>
 80015b8:	a805      	add	r0, sp, #20
 80015ba:	f004 fe73 	bl	80062a4 <PixelPatterns::Run()>
 80015be:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80015c0:	b16a      	cbz	r2, 80015de <main+0x3ba>
 80015c2:	f89d 31a0 	ldrb.w	r3, [sp, #416]	; 0x1a0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 808a 	bne.w	80016e0 <main+0x4bc>
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	9965      	ldr	r1, [sp, #404]	; 0x194
 80015d0:	1a5b      	subs	r3, r3, r1
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d203      	bcs.n	80015de <main+0x3ba>
 80015d6:	2101      	movs	r1, #1
 80015d8:	a864      	add	r0, sp, #400	; 0x190
 80015da:	f7ff fdb9 	bl	8001150 <Display::SetSleep(bool)>
 80015de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80015e0:	2a00      	cmp	r2, #0
 80015e2:	d0df      	beq.n	80015a4 <main+0x380>
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80015e8:	1a5b      	subs	r3, r3, r1
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8da      	bhi.n	80015a4 <main+0x380>
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	9324      	str	r3, [sp, #144]	; 0x90
 80015f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f083 0201 	eor.w	r2, r3, #1
 80015fa:	bf18      	it	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	9223      	str	r2, [sp, #140]	; 0x8c
 8001600:	bf14      	ite	ne
 8001602:	613b      	strne	r3, [r7, #16]
 8001604:	617b      	streq	r3, [r7, #20]
 8001606:	e7cd      	b.n	80015a4 <main+0x380>
 8001608:	2300      	movs	r3, #0
 800160a:	2264      	movs	r2, #100	; 0x64
 800160c:	4619      	mov	r1, r3
 800160e:	a805      	add	r0, sp, #20
 8001610:	f004 fc3a 	bl	8005e88 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001614:	e686      	b.n	8001324 <main+0x100>
 8001616:	2200      	movs	r2, #0
 8001618:	2364      	movs	r3, #100	; 0x64
 800161a:	4611      	mov	r1, r2
 800161c:	e9cd 3200 	strd	r3, r2, [sp]
 8001620:	a805      	add	r0, sp, #20
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <main+0x504>)
 8001624:	f004 fc44 	bl	8005eb0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001628:	e67c      	b.n	8001324 <main+0x100>
 800162a:	2100      	movs	r1, #0
 800162c:	2364      	movs	r3, #100	; 0x64
 800162e:	4a3e      	ldr	r2, [pc, #248]	; (8001728 <main+0x504>)
 8001630:	9100      	str	r1, [sp, #0]
 8001632:	a805      	add	r0, sp, #20
 8001634:	f004 fc58 	bl	8005ee8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001638:	e674      	b.n	8001324 <main+0x100>
 800163a:	2364      	movs	r3, #100	; 0x64
 800163c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001640:	2100      	movs	r1, #0
 8001642:	a805      	add	r0, sp, #20
 8001644:	f004 fc6a 	bl	8005f1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001648:	e66c      	b.n	8001324 <main+0x100>
 800164a:	2200      	movs	r2, #0
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001652:	230a      	movs	r3, #10
 8001654:	4611      	mov	r1, r2
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	a805      	add	r0, sp, #20
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <main+0x504>)
 800165c:	f004 fc90 	bl	8005f80 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001660:	e660      	b.n	8001324 <main+0x100>
 8001662:	2500      	movs	r5, #0
 8001664:	46a8      	mov	r8, r5
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <main+0x508>)
 8001668:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001730 <main+0x50c>
 800166c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8001734 <main+0x510>
 8001670:	61dd      	str	r5, [r3, #28]
 8001672:	f8da 3000 	ldr.w	r3, [sl]
 8001676:	429d      	cmp	r5, r3
 8001678:	d308      	bcc.n	800168c <main+0x468>
 800167a:	f008 fa0d 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 800167e:	2800      	cmp	r0, #0
 8001680:	d1fb      	bne.n	800167a <main+0x456>
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <main+0x510>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f005 fbd7 	bl	8006e38 <WS28xx::Update()>
 800168a:	e64b      	b.n	8001324 <main+0x100>
 800168c:	f8db 0000 	ldr.w	r0, [fp]
 8001690:	6803      	ldr	r3, [r0, #0]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d008      	beq.n	80016a8 <main+0x484>
 8001696:	2300      	movs	r3, #0
 8001698:	4629      	mov	r1, r5
 800169a:	461a      	mov	r2, r3
 800169c:	f8cd 8000 	str.w	r8, [sp]
 80016a0:	f004 fe28 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80016a4:	3501      	adds	r5, #1
 80016a6:	e7e4      	b.n	8001672 <main+0x44e>
 80016a8:	2300      	movs	r3, #0
 80016aa:	4629      	mov	r1, r5
 80016ac:	461a      	mov	r2, r3
 80016ae:	e9cd 8800 	strd	r8, r8, [sp]
 80016b2:	f005 fa51 	bl	8006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80016b6:	e7f5      	b.n	80016a4 <main+0x480>
 80016b8:	2300      	movs	r3, #0
 80016ba:	e6ba      	b.n	8001432 <main+0x20e>
 80016bc:	2c00      	cmp	r4, #0
 80016be:	f43f af5d 	beq.w	800157c <main+0x358>
 80016c2:	2106      	movs	r1, #6
 80016c4:	986a      	ldr	r0, [sp, #424]	; 0x1a8
 80016c6:	f7ff fcf4 	bl	80010b2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80016ca:	4620      	mov	r0, r4
 80016cc:	f004 fbd0 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80016d0:	2106      	movs	r1, #6
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <main+0x514>)
 80016d6:	9400      	str	r4, [sp, #0]
 80016d8:	a864      	add	r0, sp, #400	; 0x190
 80016da:	f7ff fd1c 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80016de:	e74d      	b.n	800157c <main+0x358>
 80016e0:	f7ff fd7a 	bl	80011d8 <display::timeout::gpio_renew()>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f43f af7a 	beq.w	80015de <main+0x3ba>
 80016ea:	2100      	movs	r1, #0
 80016ec:	e774      	b.n	80015d8 <main+0x3b4>
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <main+0x518>)
 80016f0:	f000 fdfe 	bl	80022f0 <puts>
 80016f4:	e6be      	b.n	8001474 <main+0x250>
 80016f6:	2c05      	cmp	r4, #5
 80016f8:	f63f ae14 	bhi.w	8001324 <main+0x100>
 80016fc:	a301      	add	r3, pc, #4	; (adr r3, 8001704 <main+0x4e0>)
 80016fe:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001702:	bf00      	nop
 8001704:	08001663 	stmdaeq	r0, {r0, r1, r5, r6, r9, sl, ip}
 8001708:	08001609 	stmdaeq	r0, {r0, r3, r9, sl, ip}
 800170c:	08001617 	stmdaeq	r0, {r0, r1, r2, r4, r9, sl, ip}
 8001710:	0800162b 	stmdaeq	r0, {r0, r1, r3, r5, r9, sl, ip}
 8001714:	0800163b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sl, ip}
 8001718:	0800164b 	stmdaeq	r0, {r0, r1, r3, r6, r9, sl, ip}
 800171c:	0800a0e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sp, pc}
 8001720:	20000690 	mulcs	r0, r0, r6
 8001724:	2000181c 	andcs	r1, r0, ip, lsl r8
 8001728:	00646464 	rsbeq	r6, r4, r4, ror #8
 800172c:	2000065c 	andcs	r0, r0, ip, asr r6
 8001730:	20000684 	andcs	r0, r0, r4, lsl #13
 8001734:	20000688 	andcs	r0, r0, r8, lsl #13
 8001738:	0800a169 	stmdaeq	r0, {r0, r3, r5, r6, r8, sp, pc}
 800173c:	0800a116 	stmdaeq	r0, {r1, r2, r4, r8, sp, pc}

08001740 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001740:	b110      	cbz	r0, 8001748 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001742:	6803      	ldr	r3, [r0, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4718      	bx	r3
 8001748:	4770      	bx	lr

0800174a <Display::TextStatus(char const*)>:
 800174a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800174e:	4604      	mov	r4, r0
 8001750:	6980      	ldr	r0, [r0, #24]
 8001752:	460d      	mov	r5, r1
 8001754:	2800      	cmp	r0, #0
 8001756:	d031      	beq.n	80017bc <Display::TextStatus(char const*)+0x72>
 8001758:	7947      	ldrb	r7, [r0, #5]
 800175a:	6803      	ldr	r3, [r0, #0]
 800175c:	1e7e      	subs	r6, r7, #1
 800175e:	b2f6      	uxtb	r6, r6
 8001760:	4632      	mov	r2, r6
 8001762:	2100      	movs	r1, #0
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	f890 9004 	ldrb.w	r9, [r0, #4]
 800176a:	f04f 0800 	mov.w	r8, #0
 800176e:	4798      	blx	r3
 8001770:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001774:	45c1      	cmp	r9, r8
 8001776:	69a0      	ldr	r0, [r4, #24]
 8001778:	d818      	bhi.n	80017ac <Display::TextStatus(char const*)+0x62>
 800177a:	b120      	cbz	r0, 8001786 <Display::TextStatus(char const*)+0x3c>
 800177c:	6803      	ldr	r3, [r0, #0]
 800177e:	4632      	mov	r2, r6
 8001780:	2100      	movs	r1, #0
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4798      	blx	r3
 8001786:	69a0      	ldr	r0, [r4, #24]
 8001788:	b1c0      	cbz	r0, 80017bc <Display::TextStatus(char const*)+0x72>
 800178a:	2300      	movs	r3, #0
 800178c:	7901      	ldrb	r1, [r0, #4]
 800178e:	5cea      	ldrb	r2, [r5, r3]
 8001790:	b11a      	cbz	r2, 800179a <Display::TextStatus(char const*)+0x50>
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	4299      	cmp	r1, r3
 8001796:	4613      	mov	r3, r2
 8001798:	dcf9      	bgt.n	800178e <Display::TextStatus(char const*)+0x44>
 800179a:	6802      	ldr	r2, [r0, #0]
 800179c:	4639      	mov	r1, r7
 800179e:	69d4      	ldr	r4, [r2, #28]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	462a      	mov	r2, r5
 80017a4:	46a4      	mov	ip, r4
 80017a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017aa:	4760      	bx	ip
 80017ac:	b118      	cbz	r0, 80017b6 <Display::TextStatus(char const*)+0x6c>
 80017ae:	6803      	ldr	r3, [r0, #0]
 80017b0:	2120      	movs	r1, #32
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	4798      	blx	r3
 80017b6:	f108 0801 	add.w	r8, r8, #1
 80017ba:	e7db      	b.n	8001774 <Display::TextStatus(char const*)+0x2a>
 80017bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080017c0 <PixelDmxParamsRdm::Display(unsigned char const*)>:
 80017c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017c4:	4d20      	ldr	r5, [pc, #128]	; (8001848 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 80017c6:	7908      	ldrb	r0, [r1, #4]
 80017c8:	460c      	mov	r4, r1
 80017ca:	682e      	ldr	r6, [r5, #0]
 80017cc:	b085      	sub	sp, #20
 80017ce:	bb40      	cbnz	r0, 8001822 <PixelDmxParamsRdm::Display(unsigned char const*)+0x62>
 80017d0:	2106      	movs	r1, #6
 80017d2:	69b0      	ldr	r0, [r6, #24]
 80017d4:	f7ff ffb4 	bl	8001740 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80017d8:	7820      	ldrb	r0, [r4, #0]
 80017da:	682f      	ldr	r7, [r5, #0]
 80017dc:	f004 faa2 	bl	8005d24 <PixelType::GetType(pixel::Type)>
 80017e0:	4606      	mov	r6, r0
 80017e2:	78e0      	ldrb	r0, [r4, #3]
 80017e4:	f894 8001 	ldrb.w	r8, [r4, #1]
 80017e8:	f894 9002 	ldrb.w	r9, [r4, #2]
 80017ec:	f004 faa6 	bl	8005d3c <PixelType::GetMap(pixel::Map)>
 80017f0:	4633      	mov	r3, r6
 80017f2:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80017f6:	2107      	movs	r1, #7
 80017f8:	4638      	mov	r0, r7
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 80017fc:	f8cd 8000 	str.w	r8, [sp]
 8001800:	f7ff fc89 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 8001804:	7963      	ldrb	r3, [r4, #5]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 800180a:	d113      	bne.n	8001834 <PixelDmxParamsRdm::Display(unsigned char const*)+0x74>
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	b92a      	cbnz	r2, 800181c <PixelDmxParamsRdm::Display(unsigned char const*)+0x5c>
 8001810:	2201      	movs	r2, #1
 8001812:	4910      	ldr	r1, [pc, #64]	; (8001854 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8001814:	6828      	ldr	r0, [r5, #0]
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	f7ff ff97 	bl	800174a <Display::TextStatus(char const*)>
 800181c:	b005      	add	sp, #20
 800181e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001822:	f004 fb25 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001826:	2106      	movs	r1, #6
 8001828:	4603      	mov	r3, r0
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <PixelDmxParamsRdm::Display(unsigned char const*)+0x98>)
 800182c:	4630      	mov	r0, r6
 800182e:	f7ff fc72 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 8001832:	e7d1      	b.n	80017d8 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001834:	2200      	movs	r2, #0
 8001836:	2108      	movs	r1, #8
 8001838:	701a      	strb	r2, [r3, #0]
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	6998      	ldr	r0, [r3, #24]
 800183e:	b005      	add	sp, #20
 8001840:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001844:	f7ff bf7c 	b.w	8001740 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001848:	200006a0 	andcs	r0, r0, r0, lsr #13
 800184c:	0800a2aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sp, pc}
 8001850:	200000e8 	andcs	r0, r0, r8, ror #1
 8001854:	0800a2bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, sp, pc}
 8001858:	0800a2a4 	stmdaeq	r0, {r2, r5, r7, r9, sp, pc}

0800185c <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 800185c:	4b01      	ldr	r3, [pc, #4]	; (8001864 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f005 bbfc 	b.w	800705c <DisplayUdf::Show()>
 8001864:	200006a0 	andcs	r0, r0, r0, lsr #13

08001868 <rdm::device::responder::factorydefaults()>:
 8001868:	4b02      	ldr	r3, [pc, #8]	; (8001874 <rdm::device::responder::factorydefaults()+0xc>)
 800186a:	210b      	movs	r1, #11
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f005 bd59 	b.w	8007324 <ConfigStore::ResetSetList(configstore::Store)>
 8001872:	bf00      	nop
 8001874:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08001878 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001878:	b110      	cbz	r0, 8001880 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 800187a:	6803      	ldr	r3, [r0, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	4718      	bx	r3
 8001880:	4770      	bx	lr
	...

08001884 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8001884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001888:	4c31      	ldr	r4, [pc, #196]	; (8001950 <RDMResponder::PersonalityUpdate(unsigned int)+0xcc>)
 800188a:	4f32      	ldr	r7, [pc, #200]	; (8001954 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	b085      	sub	sp, #20
 8001890:	6998      	ldr	r0, [r3, #24]
 8001892:	460d      	mov	r5, r1
 8001894:	2107      	movs	r1, #7
 8001896:	f7ff ffef 	bl	8001878 <Display::ClearLine(unsigned char) [clone .isra.0]>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f8d4 8000 	ldr.w	r8, [r4]
 80018a0:	6858      	ldr	r0, [r3, #4]
 80018a2:	f004 fa3f 	bl	8005d24 <PixelType::GetType(pixel::Type)>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4606      	mov	r6, r0
 80018aa:	68d8      	ldr	r0, [r3, #12]
 80018ac:	689f      	ldr	r7, [r3, #8]
 80018ae:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 80018b2:	f004 fa43 	bl	8005d3c <PixelType::GetMap(pixel::Map)>
 80018b6:	4633      	mov	r3, r6
 80018b8:	2107      	movs	r1, #7
 80018ba:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 80018c0:	4640      	mov	r0, r8
 80018c2:	9700      	str	r7, [sp, #0]
 80018c4:	f7ff fc27 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80018c8:	6820      	ldr	r0, [r4, #0]
 80018ca:	f005 fbc7 	bl	800705c <DisplayUdf::Show()>
 80018ce:	2d01      	cmp	r5, #1
 80018d0:	d115      	bne.n	80018fe <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 80018d4:	681d      	ldr	r5, [r3, #0]
 80018d6:	b17d      	cbz	r5, 80018f8 <RDMResponder::PersonalityUpdate(unsigned int)+0x74>
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	2106      	movs	r1, #6
 80018dc:	6998      	ldr	r0, [r3, #24]
 80018de:	f7ff ffcb 	bl	8001878 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80018e2:	4628      	mov	r0, r5
 80018e4:	6824      	ldr	r4, [r4, #0]
 80018e6:	f004 fac3 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80018ea:	2106      	movs	r1, #6
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 80018f0:	4620      	mov	r0, r4
 80018f2:	9500      	str	r5, [sp, #0]
 80018f4:	f7ff fc0f 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80018f8:	b005      	add	sp, #20
 80018fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fe:	2d02      	cmp	r5, #2
 8001900:	d1fa      	bne.n	80018f8 <RDMResponder::PersonalityUpdate(unsigned int)+0x74>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	2103      	movs	r1, #3
 8001906:	6998      	ldr	r0, [r3, #24]
 8001908:	f7ff ffb6 	bl	8001878 <Display::ClearLine(unsigned char) [clone .isra.0]>
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	2104      	movs	r1, #4
 8001910:	6998      	ldr	r0, [r3, #24]
 8001912:	f7ff ffb1 	bl	8001878 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	6998      	ldr	r0, [r3, #24]
 800191a:	b180      	cbz	r0, 800193e <RDMResponder::PersonalityUpdate(unsigned int)+0xba>
 800191c:	2300      	movs	r3, #0
 800191e:	7905      	ldrb	r5, [r0, #4]
 8001920:	4910      	ldr	r1, [pc, #64]	; (8001964 <RDMResponder::PersonalityUpdate(unsigned int)+0xe0>)
 8001922:	42ab      	cmp	r3, r5
 8001924:	f103 0301 	add.w	r3, r3, #1
 8001928:	da03      	bge.n	8001932 <RDMResponder::PersonalityUpdate(unsigned int)+0xae>
 800192a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800192e:	2a00      	cmp	r2, #0
 8001930:	d1f7      	bne.n	8001922 <RDMResponder::PersonalityUpdate(unsigned int)+0x9e>
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	2104      	movs	r1, #4
 8001936:	69d5      	ldr	r5, [r2, #28]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <RDMResponder::PersonalityUpdate(unsigned int)+0xe0>)
 800193c:	47a8      	blx	r5
 800193e:	2105      	movs	r1, #5
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	6998      	ldr	r0, [r3, #24]
 8001944:	b005      	add	sp, #20
 8001946:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800194a:	f7ff bf95 	b.w	8001878 <Display::ClearLine(unsigned char) [clone .isra.0]>
 800194e:	bf00      	nop
 8001950:	200006a0 	andcs	r0, r0, r0, lsr #13
 8001954:	20000650 	andcs	r0, r0, r0, asr r6
 8001958:	0800a15c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sp, pc}
 800195c:	20000690 	mulcs	r0, r0, r6
 8001960:	0800a169 	stmdaeq	r0, {r0, r3, r5, r6, r8, sp, pc}
 8001964:	0800a0e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sp, pc}

08001968 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	2905      	cmp	r1, #5
 800196c:	b085      	sub	sp, #20
 800196e:	dc57      	bgt.n	8001a20 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>)
 8001972:	6019      	str	r1, [r3, #0]
 8001974:	2905      	cmp	r1, #5
 8001976:	d809      	bhi.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001978:	e8df f001 	tbb	[pc, r1]
 800197c:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001980:	2300211a 	movwcs	r2, #282	; 0x11a
 8001984:	2264      	movs	r2, #100	; 0x64
 8001986:	4619      	mov	r1, r3
 8001988:	f004 fa7e 	bl	8005e88 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 800198c:	2001      	movs	r0, #1
 800198e:	e048      	b.n	8001a22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xba>
 8001990:	2200      	movs	r2, #0
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	4611      	mov	r1, r2
 8001996:	e9cd 3200 	strd	r3, r2, [sp]
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 800199c:	f004 fa88 	bl	8005eb0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019a0:	e7f4      	b.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019a2:	2100      	movs	r1, #0
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80019a8:	9100      	str	r1, [sp, #0]
 80019aa:	f004 fa9d 	bl	8005ee8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019ae:	e7ed      	b.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019b0:	2364      	movs	r3, #100	; 0x64
 80019b2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80019b6:	2100      	movs	r1, #0
 80019b8:	f004 fab0 	bl	8005f1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80019bc:	e7e6      	b.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019be:	2200      	movs	r2, #0
 80019c0:	2364      	movs	r3, #100	; 0x64
 80019c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80019c6:	230a      	movs	r3, #10
 80019c8:	4611      	mov	r1, r2
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc4>)
 80019ce:	f004 fad7 	bl	8005f80 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019d2:	e7db      	b.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019d4:	2400      	movs	r4, #0
 80019d6:	4625      	mov	r5, r4
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc8>)
 80019da:	4e16      	ldr	r6, [pc, #88]	; (8001a34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xcc>)
 80019dc:	4f16      	ldr	r7, [pc, #88]	; (8001a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80019de:	61dc      	str	r4, [r3, #28]
 80019e0:	6833      	ldr	r3, [r6, #0]
 80019e2:	429c      	cmp	r4, r3
 80019e4:	d308      	bcc.n	80019f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80019e6:	f008 f857 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1fb      	bne.n	80019e6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd0>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	f005 fa21 	bl	8006e38 <WS28xx::Update()>
 80019f6:	e7c9      	b.n	800198c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	6803      	ldr	r3, [r0, #0]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d007      	beq.n	8001a10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>
 8001a00:	2300      	movs	r3, #0
 8001a02:	4621      	mov	r1, r4
 8001a04:	461a      	mov	r2, r3
 8001a06:	9500      	str	r5, [sp, #0]
 8001a08:	f004 fc74 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001a0c:	3401      	adds	r4, #1
 8001a0e:	e7e7      	b.n	80019e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001a10:	2300      	movs	r3, #0
 8001a12:	4621      	mov	r1, r4
 8001a14:	461a      	mov	r2, r3
 8001a16:	e9cd 5500 	strd	r5, r5, [sp]
 8001a1a:	f005 f89d 	bl	8006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001a1e:	e7f5      	b.n	8001a0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001a20:	2000      	movs	r0, #0
 8001a22:	b005      	add	sp, #20
 8001a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000690 	mulcs	r0, r0, r6
 8001a2c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001a30:	2000065c 	andcs	r0, r0, ip, asr r6
 8001a34:	20000684 	andcs	r0, r0, r4, lsl #13
 8001a38:	20000688 	andcs	r0, r0, r8, lsl #13

08001a3c <rdm::selftest::Get()>:
 8001a3c:	4b01      	ldr	r3, [pc, #4]	; (8001a44 <rdm::selftest::Get()+0x8>)
 8001a3e:	7818      	ldrb	r0, [r3, #0]
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000690 	mulcs	r0, r0, r6

08001a48 <rdm::selftest::Set(unsigned char)>:
 8001a48:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <rdm::selftest::Set(unsigned char)+0x54>)
 8001a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	4604      	mov	r4, r0
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	f7ff ff89 	bl	8001968 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001a56:	4605      	mov	r5, r0
 8001a58:	b1b0      	cbz	r0, 8001a88 <rdm::selftest::Set(unsigned char)+0x40>
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <rdm::selftest::Set(unsigned char)+0x58>)
 8001a5c:	b1bc      	cbz	r4, 8001a8e <rdm::selftest::Set(unsigned char)+0x46>
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4e10      	ldr	r6, [pc, #64]	; (8001aa4 <rdm::selftest::Set(unsigned char)+0x5c>)
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	6998      	ldr	r0, [r3, #24]
 8001a68:	b118      	cbz	r0, 8001a72 <rdm::selftest::Set(unsigned char)+0x2a>
 8001a6a:	6803      	ldr	r3, [r0, #0]
 8001a6c:	2106      	movs	r1, #6
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4798      	blx	r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	6836      	ldr	r6, [r6, #0]
 8001a76:	f004 f9fb 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001a7a:	2106      	movs	r1, #6
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <rdm::selftest::Set(unsigned char)+0x60>)
 8001a80:	4630      	mov	r0, r6
 8001a82:	9400      	str	r4, [sp, #0]
 8001a84:	f7ff fb47 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 8001a88:	4628      	mov	r0, r5
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	701c      	strb	r4, [r3, #0]
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <rdm::selftest::Set(unsigned char)+0x64>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	f005 fae2 	bl	800705c <DisplayUdf::Show()>
 8001a98:	e7f6      	b.n	8001a88 <rdm::selftest::Set(unsigned char)+0x40>
 8001a9a:	bf00      	nop
 8001a9c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001aa0:	2000020c 	andcs	r0, r0, ip, lsl #4
 8001aa4:	200016f0 	strdcs	r1, [r0], -r0
 8001aa8:	0800a169 	stmdaeq	r0, {r0, r3, r5, r6, r8, sp, pc}
 8001aac:	200006a0 	andcs	r0, r0, r0, lsr #13

08001ab0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	f004 f9dc 	bl	8005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001ab8:	b140      	cbz	r0, 8001acc <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4613      	mov	r3, r2
 8001abe:	7819      	ldrb	r1, [r3, #0]
 8001ac0:	3201      	adds	r2, #1
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	d1fa      	bne.n	8001abc <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001ac6:	1a1b      	subs	r3, r3, r0
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	bd10      	pop	{r4, pc}
 8001acc:	4603      	mov	r3, r0
 8001ace:	e7fb      	b.n	8001ac8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

08001ad0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	2905      	cmp	r1, #5
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	dc18      	bgt.n	8001b0a <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc4>)
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	2905      	cmp	r1, #5
 8001ade:	d814      	bhi.n	8001b0a <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001ae0:	e8df f001 	tbb	[pc, r1]
 8001ae4:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001ae8:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001aec:	2264      	movs	r2, #100	; 0x64
 8001aee:	4619      	mov	r1, r3
 8001af0:	b005      	add	sp, #20
 8001af2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001af6:	f004 b9c7 	b.w	8005e88 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	2200      	movs	r2, #0
 8001afe:	e9cd 3200 	strd	r3, r2, [sp]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b06:	f004 f9d3 	bl	8005eb0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b0a:	b005      	add	sp, #20
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b14:	9100      	str	r1, [sp, #0]
 8001b16:	f004 f9e7 	bl	8005ee8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b1a:	e7f6      	b.n	8001b0a <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b1c:	2364      	movs	r3, #100	; 0x64
 8001b1e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001b22:	2100      	movs	r1, #0
 8001b24:	b005      	add	sp, #20
 8001b26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b2a:	f004 b9f7 	b.w	8005f1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b36:	230a      	movs	r3, #10
 8001b38:	4611      	mov	r1, r2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc8>)
 8001b3e:	f004 fa1f 	bl	8005f80 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b42:	e7e2      	b.n	8001b0a <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b44:	2400      	movs	r4, #0
 8001b46:	4625      	mov	r5, r4
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xcc>)
 8001b4a:	4e15      	ldr	r6, [pc, #84]	; (8001ba0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd0>)
 8001b4c:	4f15      	ldr	r7, [pc, #84]	; (8001ba4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001b4e:	61dc      	str	r4, [r3, #28]
 8001b50:	6833      	ldr	r3, [r6, #0]
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d30a      	bcc.n	8001b6c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 8001b56:	f007 ff9f 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1fb      	bne.n	8001b56 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xd4>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	b005      	add	sp, #20
 8001b64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b68:	f005 b966 	b.w	8006e38 <WS28xx::Update()>
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	6803      	ldr	r3, [r0, #0]
 8001b70:	2b07      	cmp	r3, #7
 8001b72:	d007      	beq.n	8001b84 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>
 8001b74:	2300      	movs	r3, #0
 8001b76:	4621      	mov	r1, r4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	9500      	str	r5, [sp, #0]
 8001b7c:	f004 fbba 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001b80:	3401      	adds	r4, #1
 8001b82:	e7e5      	b.n	8001b50 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001b84:	2300      	movs	r3, #0
 8001b86:	4621      	mov	r1, r4
 8001b88:	461a      	mov	r2, r3
 8001b8a:	e9cd 5500 	strd	r5, r5, [sp]
 8001b8e:	f004 ffe3 	bl	8006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8001b92:	e7f5      	b.n	8001b80 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>
 8001b94:	20000690 	mulcs	r0, r0, r6
 8001b98:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001b9c:	2000065c 	andcs	r0, r0, ip, asr r6
 8001ba0:	20000684 	andcs	r0, r0, r4, lsl #13
 8001ba4:	20000688 	andcs	r0, r0, r8, lsl #13

08001ba8 <RDMIdentify::On(rdm::identify::Mode)>:
 8001ba8:	29ff      	cmp	r1, #255	; 0xff
 8001baa:	b510      	push	{r4, lr}
 8001bac:	d10f      	bne.n	8001bce <RDMIdentify::On(rdm::identify::Mode)+0x26>
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	b962      	cbnz	r2, 8001bce <RDMIdentify::On(rdm::identify::Mode)+0x26>
 8001bb4:	2401      	movs	r4, #1
 8001bb6:	701c      	strb	r4, [r3, #0]
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 8001bba:	2105      	movs	r1, #5
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <RDMIdentify::On(rdm::identify::Mode)+0x34>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f7ff ff83 	bl	8001ad0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <RDMIdentify::On(rdm::identify::Mode)+0x38>)
 8001bcc:	701c      	strb	r4, [r3, #0]
 8001bce:	bd10      	pop	{r4, pc}
 8001bd0:	200000e9 	andcs	r0, r0, r9, ror #1
 8001bd4:	20000690 	mulcs	r0, r0, r6
 8001bd8:	200000ec 	andcs	r0, r0, ip, ror #1
 8001bdc:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001be0:	2000020c 	andcs	r0, r0, ip, lsl #4

08001be4 <RDMIdentify::Off(rdm::identify::Mode)>:
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <RDMIdentify::Off(rdm::identify::Mode)+0x28>)
 8001be6:	b510      	push	{r4, lr}
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	b16a      	cbz	r2, 8001c08 <RDMIdentify::Off(rdm::identify::Mode)+0x24>
 8001bec:	2200      	movs	r2, #0
 8001bee:	4c08      	ldr	r4, [pc, #32]	; (8001c10 <RDMIdentify::Off(rdm::identify::Mode)+0x2c>)
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <RDMIdentify::Off(rdm::identify::Mode)+0x30>)
 8001bf4:	6821      	ldr	r1, [r4, #0]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	f7ff ff6a 	bl	8001ad0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <RDMIdentify::Off(rdm::identify::Mode)+0x34>)
 8001c00:	3b00      	subs	r3, #0
 8001c02:	bf18      	it	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	7013      	strb	r3, [r2, #0]
 8001c08:	bd10      	pop	{r4, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000e9 	andcs	r0, r0, r9, ror #1
 8001c10:	200000ec 	andcs	r0, r0, ip, ror #1
 8001c14:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001c18:	2000020c 	andcs	r0, r0, ip, lsl #4

08001c1c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001c1c:	2805      	cmp	r0, #5
 8001c1e:	d814      	bhi.n	8001c4a <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 8001c20:	e8df f000 	tbb	[pc, r0]
 8001c24:	0a071603 	beq	81c7438 <__exidx_end+0x1bb298>
 8001c28:	2304100d 	movwcs	r1, #16397	; 0x400d
 8001c2c:	480a      	ldr	r0, [pc, #40]	; (8001c58 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x3c>)
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	4770      	bx	lr
 8001c32:	230e      	movs	r3, #14
 8001c34:	4809      	ldr	r0, [pc, #36]	; (8001c5c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 8001c36:	e7fa      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 8001c3c:	e7f7      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c3e:	230c      	movs	r3, #12
 8001c40:	4808      	ldr	r0, [pc, #32]	; (8001c64 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001c42:	e7f4      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c44:	2307      	movs	r3, #7
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001c48:	e7f1      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001c4e:	e7ee      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c50:	2305      	movs	r3, #5
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001c54:	e7eb      	b.n	8001c2e <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c56:	bf00      	nop
 8001c58:	0800a2ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sp, pc}
 8001c5c:	0800a2cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r9, sp, pc}
 8001c60:	0800a2de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r9, sp, pc}
 8001c64:	0800a2e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sp, pc}
 8001c68:	0800a2ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sp, pc}
 8001c6c:	0800a2f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, sp, pc}
 8001c70:	0800a2d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp, pc}

08001c74 <RDMSoftwareVersion::GetVersion()>:
 8001c74:	4800      	ldr	r0, [pc, #0]	; (8001c78 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001c76:	4770      	bx	lr
 8001c78:	0800a301 	stmdaeq	r0, {r0, r8, r9, sp, pc}

08001c7c <RDMSoftwareVersion::GetVersionLength()>:
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	4770      	bx	lr

08001c80 <RDMSoftwareVersion::GetVersionId()>:
 8001c80:	4800      	ldr	r0, [pc, #0]	; (8001c84 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001c82:	4770      	bx	lr
 8001c84:	639dd590 	orrsvs	sp, sp, #144, 10	; 0x24000000

08001c88 <_itostr>:
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	0fc7      	lsrs	r7, r0, #31
 8001c8c:	b091      	sub	sp, #68	; 0x44
 8001c8e:	bf18      	it	ne
 8001c90:	4240      	negne	r0, r0
 8001c92:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8001c96:	b9c8      	cbnz	r0, 8001ccc <_itostr+0x44>
 8001c98:	2330      	movs	r3, #48	; 0x30
 8001c9a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001c9e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001ca2:	b132      	cbz	r2, 8001cb2 <_itostr+0x2a>
 8001ca4:	4668      	mov	r0, sp
 8001ca6:	2530      	movs	r5, #48	; 0x30
 8001ca8:	1ae6      	subs	r6, r4, r3
 8001caa:	4296      	cmp	r6, r2
 8001cac:	da01      	bge.n	8001cb2 <_itostr+0x2a>
 8001cae:	4283      	cmp	r3, r0
 8001cb0:	d81c      	bhi.n	8001cec <_itostr+0x64>
 8001cb2:	b117      	cbz	r7, 8001cba <_itostr+0x32>
 8001cb4:	222d      	movs	r2, #45	; 0x2d
 8001cb6:	f803 2901 	strb.w	r2, [r3], #-1
 8001cba:	3301      	adds	r3, #1
 8001cbc:	1ae0      	subs	r0, r4, r3
 8001cbe:	3901      	subs	r1, #1
 8001cc0:	aa10      	add	r2, sp, #64	; 0x40
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d315      	bcc.n	8001cf2 <_itostr+0x6a>
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	b011      	add	sp, #68	; 0x44
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	4623      	mov	r3, r4
 8001cce:	250a      	movs	r5, #10
 8001cd0:	46ec      	mov	ip, sp
 8001cd2:	fb90 f6f5 	sdiv	r6, r0, r5
 8001cd6:	fb05 0016 	mls	r0, r5, r6, r0
 8001cda:	3030      	adds	r0, #48	; 0x30
 8001cdc:	f803 0901 	strb.w	r0, [r3], #-1
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	2e00      	cmp	r6, #0
 8001ce4:	d0dd      	beq.n	8001ca2 <_itostr+0x1a>
 8001ce6:	4563      	cmp	r3, ip
 8001ce8:	d1f3      	bne.n	8001cd2 <_itostr+0x4a>
 8001cea:	e7da      	b.n	8001ca2 <_itostr+0x1a>
 8001cec:	f803 5901 	strb.w	r5, [r3], #-1
 8001cf0:	e7da      	b.n	8001ca8 <_itostr+0x20>
 8001cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cf6:	f801 2f01 	strb.w	r2, [r1, #1]!
 8001cfa:	e7e1      	b.n	8001cc0 <_itostr+0x38>

08001cfc <_xputch>:
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b410      	push	{r4}
 8001d00:	4c08      	ldr	r4, [pc, #32]	; (8001d24 <_xputch+0x28>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4608      	mov	r0, r1
 8001d06:	6821      	ldr	r1, [r4, #0]
 8001d08:	3201      	adds	r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	b139      	cbz	r1, 8001d1e <_xputch+0x22>
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	da02      	bge.n	8001d1a <_xputch+0x1e>
 8001d14:	1c4b      	adds	r3, r1, #1
 8001d16:	6023      	str	r3, [r4, #0]
 8001d18:	7008      	strb	r0, [r1, #0]
 8001d1a:	bc10      	pop	{r4}
 8001d1c:	4770      	bx	lr
 8001d1e:	bc10      	pop	{r4}
 8001d20:	f006 b9ea 	b.w	80080f8 <console_putc>
 8001d24:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001d28 <_format_int>:
 8001d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	b091      	sub	sp, #68	; 0x44
 8001d30:	ea52 0308 	orrs.w	r3, r2, r8
 8001d34:	4606      	mov	r6, r0
 8001d36:	4617      	mov	r7, r2
 8001d38:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001d3c:	d133      	bne.n	8001da6 <_format_int+0x7e>
 8001d3e:	2330      	movs	r3, #48	; 0x30
 8001d40:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001d44:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001d48:	6833      	ldr	r3, [r6, #0]
 8001d4a:	07d8      	lsls	r0, r3, #31
 8001d4c:	d507      	bpl.n	8001d5e <_format_int+0x36>
 8001d4e:	466a      	mov	r2, sp
 8001d50:	2030      	movs	r0, #48	; 0x30
 8001d52:	6871      	ldr	r1, [r6, #4]
 8001d54:	1b2f      	subs	r7, r5, r4
 8001d56:	428f      	cmp	r7, r1
 8001d58:	da01      	bge.n	8001d5e <_format_int+0x36>
 8001d5a:	4294      	cmp	r4, r2
 8001d5c:	d839      	bhi.n	8001dd2 <_format_int+0xaa>
 8001d5e:	0699      	lsls	r1, r3, #26
 8001d60:	d507      	bpl.n	8001d72 <_format_int+0x4a>
 8001d62:	466a      	mov	r2, sp
 8001d64:	2030      	movs	r0, #48	; 0x30
 8001d66:	68b1      	ldr	r1, [r6, #8]
 8001d68:	1b2f      	subs	r7, r5, r4
 8001d6a:	428f      	cmp	r7, r1
 8001d6c:	da01      	bge.n	8001d72 <_format_int+0x4a>
 8001d6e:	4294      	cmp	r4, r2
 8001d70:	d832      	bhi.n	8001dd8 <_format_int+0xb0>
 8001d72:	071a      	lsls	r2, r3, #28
 8001d74:	bf44      	itt	mi
 8001d76:	222d      	movmi	r2, #45	; 0x2d
 8001d78:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001d7c:	065b      	lsls	r3, r3, #25
 8001d7e:	d407      	bmi.n	8001d90 <_format_int+0x68>
 8001d80:	466b      	mov	r3, sp
 8001d82:	2120      	movs	r1, #32
 8001d84:	68b2      	ldr	r2, [r6, #8]
 8001d86:	1b28      	subs	r0, r5, r4
 8001d88:	4290      	cmp	r0, r2
 8001d8a:	da01      	bge.n	8001d90 <_format_int+0x68>
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	d826      	bhi.n	8001dde <_format_int+0xb6>
 8001d90:	1b2d      	subs	r5, r5, r4
 8001d92:	3401      	adds	r4, #1
 8001d94:	ab10      	add	r3, sp, #64	; 0x40
 8001d96:	429c      	cmp	r4, r3
 8001d98:	d324      	bcc.n	8001de4 <_format_int+0xbc>
 8001d9a:	68b3      	ldr	r3, [r6, #8]
 8001d9c:	42ab      	cmp	r3, r5
 8001d9e:	dc27      	bgt.n	8001df0 <_format_int+0xc8>
 8001da0:	b011      	add	sp, #68	; 0x44
 8001da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001da6:	462c      	mov	r4, r5
 8001da8:	46e9      	mov	r9, sp
 8001daa:	4638      	mov	r0, r7
 8001dac:	4641      	mov	r1, r8
 8001dae:	220a      	movs	r2, #10
 8001db0:	2300      	movs	r3, #0
 8001db2:	f7fe fbc7 	bl	8000544 <__aeabi_uldivmod>
 8001db6:	3230      	adds	r2, #48	; 0x30
 8001db8:	f804 2901 	strb.w	r2, [r4], #-1
 8001dbc:	463a      	mov	r2, r7
 8001dbe:	4643      	mov	r3, r8
 8001dc0:	2a0a      	cmp	r2, #10
 8001dc2:	f173 0300 	sbcs.w	r3, r3, #0
 8001dc6:	4607      	mov	r7, r0
 8001dc8:	4688      	mov	r8, r1
 8001dca:	d3bd      	bcc.n	8001d48 <_format_int+0x20>
 8001dcc:	454c      	cmp	r4, r9
 8001dce:	d1ec      	bne.n	8001daa <_format_int+0x82>
 8001dd0:	e7ba      	b.n	8001d48 <_format_int+0x20>
 8001dd2:	f804 0901 	strb.w	r0, [r4], #-1
 8001dd6:	e7bd      	b.n	8001d54 <_format_int+0x2c>
 8001dd8:	f804 0901 	strb.w	r0, [r4], #-1
 8001ddc:	e7c4      	b.n	8001d68 <_format_int+0x40>
 8001dde:	f804 1901 	strb.w	r1, [r4], #-1
 8001de2:	e7d0      	b.n	8001d86 <_format_int+0x5e>
 8001de4:	4630      	mov	r0, r6
 8001de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dea:	f7ff ff87 	bl	8001cfc <_xputch>
 8001dee:	e7d1      	b.n	8001d94 <_format_int+0x6c>
 8001df0:	2120      	movs	r1, #32
 8001df2:	4630      	mov	r0, r6
 8001df4:	f7ff ff82 	bl	8001cfc <_xputch>
 8001df8:	3501      	adds	r5, #1
 8001dfa:	e7ce      	b.n	8001d9a <_format_int+0x72>

08001dfc <_format_hex>:
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b091      	sub	sp, #68	; 0x44
 8001e00:	4606      	mov	r6, r0
 8001e02:	6804      	ldr	r4, [r0, #0]
 8001e04:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001e08:	bb61      	cbnz	r1, 8001e64 <_format_hex+0x68>
 8001e0a:	2330      	movs	r3, #48	; 0x30
 8001e0c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001e10:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001e14:	07e5      	lsls	r5, r4, #31
 8001e16:	d507      	bpl.n	8001e28 <_format_hex+0x2c>
 8001e18:	4669      	mov	r1, sp
 8001e1a:	2530      	movs	r5, #48	; 0x30
 8001e1c:	6870      	ldr	r0, [r6, #4]
 8001e1e:	1ad7      	subs	r7, r2, r3
 8001e20:	4287      	cmp	r7, r0
 8001e22:	da01      	bge.n	8001e28 <_format_hex+0x2c>
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d831      	bhi.n	8001e8c <_format_hex+0x90>
 8001e28:	06a0      	lsls	r0, r4, #26
 8001e2a:	d507      	bpl.n	8001e3c <_format_hex+0x40>
 8001e2c:	4669      	mov	r1, sp
 8001e2e:	2530      	movs	r5, #48	; 0x30
 8001e30:	68b0      	ldr	r0, [r6, #8]
 8001e32:	1ad7      	subs	r7, r2, r3
 8001e34:	4287      	cmp	r7, r0
 8001e36:	da01      	bge.n	8001e3c <_format_hex+0x40>
 8001e38:	428b      	cmp	r3, r1
 8001e3a:	d82a      	bhi.n	8001e92 <_format_hex+0x96>
 8001e3c:	0661      	lsls	r1, r4, #25
 8001e3e:	d407      	bmi.n	8001e50 <_format_hex+0x54>
 8001e40:	4669      	mov	r1, sp
 8001e42:	2420      	movs	r4, #32
 8001e44:	68b0      	ldr	r0, [r6, #8]
 8001e46:	1ad5      	subs	r5, r2, r3
 8001e48:	4285      	cmp	r5, r0
 8001e4a:	da01      	bge.n	8001e50 <_format_hex+0x54>
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d823      	bhi.n	8001e98 <_format_hex+0x9c>
 8001e50:	1ad5      	subs	r5, r2, r3
 8001e52:	1c5c      	adds	r4, r3, #1
 8001e54:	ab10      	add	r3, sp, #64	; 0x40
 8001e56:	429c      	cmp	r4, r3
 8001e58:	d321      	bcc.n	8001e9e <_format_hex+0xa2>
 8001e5a:	68b3      	ldr	r3, [r6, #8]
 8001e5c:	429d      	cmp	r5, r3
 8001e5e:	db24      	blt.n	8001eaa <_format_hex+0xae>
 8001e60:	b011      	add	sp, #68	; 0x44
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e64:	f014 0f02 	tst.w	r4, #2
 8001e68:	bf0c      	ite	eq
 8001e6a:	2757      	moveq	r7, #87	; 0x57
 8001e6c:	2737      	movne	r7, #55	; 0x37
 8001e6e:	4613      	mov	r3, r2
 8001e70:	466d      	mov	r5, sp
 8001e72:	f001 000f 	and.w	r0, r1, #15
 8001e76:	2809      	cmp	r0, #9
 8001e78:	bf94      	ite	ls
 8001e7a:	3030      	addls	r0, #48	; 0x30
 8001e7c:	19c0      	addhi	r0, r0, r7
 8001e7e:	0909      	lsrs	r1, r1, #4
 8001e80:	f803 0901 	strb.w	r0, [r3], #-1
 8001e84:	d0c6      	beq.n	8001e14 <_format_hex+0x18>
 8001e86:	42ab      	cmp	r3, r5
 8001e88:	d1f3      	bne.n	8001e72 <_format_hex+0x76>
 8001e8a:	e7c3      	b.n	8001e14 <_format_hex+0x18>
 8001e8c:	f803 5901 	strb.w	r5, [r3], #-1
 8001e90:	e7c5      	b.n	8001e1e <_format_hex+0x22>
 8001e92:	f803 5901 	strb.w	r5, [r3], #-1
 8001e96:	e7cc      	b.n	8001e32 <_format_hex+0x36>
 8001e98:	f803 4901 	strb.w	r4, [r3], #-1
 8001e9c:	e7d3      	b.n	8001e46 <_format_hex+0x4a>
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea4:	f7ff ff2a 	bl	8001cfc <_xputch>
 8001ea8:	e7d4      	b.n	8001e54 <_format_hex+0x58>
 8001eaa:	2120      	movs	r1, #32
 8001eac:	4630      	mov	r0, r6
 8001eae:	f7ff ff25 	bl	8001cfc <_xputch>
 8001eb2:	3501      	adds	r5, #1
 8001eb4:	e7d1      	b.n	8001e5a <_format_hex+0x5e>
	...

08001eb8 <_vprintf>:
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	f04f 0800 	mov.w	r8, #0
 8001ec6:	b099      	sub	sp, #100	; 0x64
 8001ec8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8001ecc:	af08      	add	r7, sp, #32
 8001ece:	7819      	ldrb	r1, [r3, #0]
 8001ed0:	b919      	cbnz	r1, 8001eda <_vprintf+0x22>
 8001ed2:	9806      	ldr	r0, [sp, #24]
 8001ed4:	b019      	add	sp, #100	; 0x64
 8001ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eda:	2925      	cmp	r1, #37	; 0x25
 8001edc:	f103 0601 	add.w	r6, r3, #1
 8001ee0:	d004      	beq.n	8001eec <_vprintf+0x34>
 8001ee2:	a803      	add	r0, sp, #12
 8001ee4:	f7ff ff0a 	bl	8001cfc <_xputch>
 8001ee8:	4633      	mov	r3, r6
 8001eea:	e7f0      	b.n	8001ece <_vprintf+0x16>
 8001eec:	2200      	movs	r2, #0
 8001eee:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8001ef2:	9205      	str	r2, [sp, #20]
 8001ef4:	785a      	ldrb	r2, [r3, #1]
 8001ef6:	2a30      	cmp	r2, #48	; 0x30
 8001ef8:	d129      	bne.n	8001f4e <_vprintf+0x96>
 8001efa:	2220      	movs	r2, #32
 8001efc:	9203      	str	r2, [sp, #12]
 8001efe:	1c9e      	adds	r6, r3, #2
 8001f00:	2200      	movs	r2, #0
 8001f02:	4635      	mov	r5, r6
 8001f04:	4613      	mov	r3, r2
 8001f06:	f04f 0c0a 	mov.w	ip, #10
 8001f0a:	7829      	ldrb	r1, [r5, #0]
 8001f0c:	462e      	mov	r6, r5
 8001f0e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001f12:	2809      	cmp	r0, #9
 8001f14:	f105 0501 	add.w	r5, r5, #1
 8001f18:	d91d      	bls.n	8001f56 <_vprintf+0x9e>
 8001f1a:	b12a      	cbz	r2, 8001f28 <_vprintf+0x70>
 8001f1c:	9305      	str	r3, [sp, #20]
 8001f1e:	b11b      	cbz	r3, 8001f28 <_vprintf+0x70>
 8001f20:	9b03      	ldr	r3, [sp, #12]
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	9303      	str	r3, [sp, #12]
 8001f28:	292e      	cmp	r1, #46	; 0x2e
 8001f2a:	d123      	bne.n	8001f74 <_vprintf+0xbc>
 8001f2c:	7873      	ldrb	r3, [r6, #1]
 8001f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f30:	d015      	beq.n	8001f5e <_vprintf+0xa6>
 8001f32:	2100      	movs	r1, #0
 8001f34:	250a      	movs	r5, #10
 8001f36:	460a      	mov	r2, r1
 8001f38:	1c70      	adds	r0, r6, #1
 8001f3a:	7803      	ldrb	r3, [r0, #0]
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	3b30      	subs	r3, #48	; 0x30
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	f100 0001 	add.w	r0, r0, #1
 8001f46:	d959      	bls.n	8001ffc <_vprintf+0x144>
 8001f48:	b181      	cbz	r1, 8001f6c <_vprintf+0xb4>
 8001f4a:	9204      	str	r2, [sp, #16]
 8001f4c:	e00e      	b.n	8001f6c <_vprintf+0xb4>
 8001f4e:	2a2d      	cmp	r2, #45	; 0x2d
 8001f50:	d1d6      	bne.n	8001f00 <_vprintf+0x48>
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	e7d2      	b.n	8001efc <_vprintf+0x44>
 8001f56:	2201      	movs	r2, #1
 8001f58:	fb0c 0303 	mla	r3, ip, r3, r0
 8001f5c:	e7d5      	b.n	8001f0a <_vprintf+0x52>
 8001f5e:	f854 3b04 	ldr.w	r3, [r4], #4
 8001f62:	3602      	adds	r6, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfb8      	it	lt
 8001f68:	425b      	neglt	r3, r3
 8001f6a:	9304      	str	r3, [sp, #16]
 8001f6c:	9b03      	ldr	r3, [sp, #12]
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	9303      	str	r3, [sp, #12]
 8001f74:	7833      	ldrb	r3, [r6, #0]
 8001f76:	2b6c      	cmp	r3, #108	; 0x6c
 8001f78:	bf04      	itt	eq
 8001f7a:	9b03      	ldreq	r3, [sp, #12]
 8001f7c:	3601      	addeq	r6, #1
 8001f7e:	7831      	ldrb	r1, [r6, #0]
 8001f80:	bf04      	itt	eq
 8001f82:	f043 0304 	orreq.w	r3, r3, #4
 8001f86:	9303      	streq	r3, [sp, #12]
 8001f88:	2958      	cmp	r1, #88	; 0x58
 8001f8a:	f000 8171 	beq.w	8002270 <_vprintf+0x3b8>
 8001f8e:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	2a15      	cmp	r2, #21
 8001f96:	d8a4      	bhi.n	8001ee2 <_vprintf+0x2a>
 8001f98:	2b15      	cmp	r3, #21
 8001f9a:	d8a2      	bhi.n	8001ee2 <_vprintf+0x2a>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <_vprintf+0xec>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08002005 	stmdaeq	r0, {r0, r2, sp}
 8001fa8:	08002017 	stmdaeq	r0, {r0, r1, r2, r4, sp}
 8001fac:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fb0:	0800204d 	stmdaeq	r0, {r0, r2, r3, r6, sp}
 8001fb4:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fb8:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fbc:	08002017 	stmdaeq	r0, {r0, r1, r2, r4, sp}
 8001fc0:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fc4:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fc8:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fcc:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fd0:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fd4:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fd8:	080021b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, sp}
 8001fdc:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fe0:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fe4:	080021db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, sp}
 8001fe8:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001fec:	08002251 	stmdaeq	r0, {r0, r4, r6, r9, sp}
 8001ff0:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001ff4:	08001ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip}
 8001ff8:	08002279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sp}
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fb05 3202 	mla	r2, r5, r2, r3
 8002002:	e79a      	b.n	8001f3a <_vprintf+0x82>
 8002004:	4625      	mov	r5, r4
 8002006:	a803      	add	r0, sp, #12
 8002008:	f855 1b04 	ldr.w	r1, [r5], #4
 800200c:	f7ff fe76 	bl	8001cfc <_xputch>
 8002010:	462c      	mov	r4, r5
 8002012:	3601      	adds	r6, #1
 8002014:	e768      	b.n	8001ee8 <_vprintf+0x30>
 8002016:	9903      	ldr	r1, [sp, #12]
 8002018:	074d      	lsls	r5, r1, #29
 800201a:	bf51      	iteee	pl
 800201c:	4625      	movpl	r5, r4
 800201e:	3407      	addmi	r4, #7
 8002020:	f024 0407 	bicmi.w	r4, r4, #7
 8002024:	4625      	movmi	r5, r4
 8002026:	bf55      	itete	pl
 8002028:	f855 2b04 	ldrpl.w	r2, [r5], #4
 800202c:	6863      	ldrmi	r3, [r4, #4]
 800202e:	17d3      	asrpl	r3, r2, #31
 8002030:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	da05      	bge.n	8002044 <_vprintf+0x18c>
 8002038:	f041 0108 	orr.w	r1, r1, #8
 800203c:	4252      	negs	r2, r2
 800203e:	9103      	str	r1, [sp, #12]
 8002040:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002044:	a803      	add	r0, sp, #12
 8002046:	f7ff fe6f 	bl	8001d28 <_format_int>
 800204a:	e7e1      	b.n	8002010 <_vprintf+0x158>
 800204c:	3407      	adds	r4, #7
 800204e:	f024 0507 	bic.w	r5, r4, #7
 8002052:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002056:	f7fe f87b 	bl	8000150 <__aeabi_d2f>
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	4641      	mov	r1, r8
 800205e:	07dc      	lsls	r4, r3, #31
 8002060:	bf54      	ite	pl
 8002062:	f04f 0a06 	movpl.w	sl, #6
 8002066:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 800206a:	4681      	mov	r9, r0
 800206c:	f7fe fa1c 	bl	80004a8 <__aeabi_fcmplt>
 8002070:	2800      	cmp	r0, #0
 8002072:	d063      	beq.n	800213c <_vprintf+0x284>
 8002074:	232d      	movs	r3, #45	; 0x2d
 8002076:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 800207a:	f88d 3020 	strb.w	r3, [sp, #32]
 800207e:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8002082:	4648      	mov	r0, r9
 8002084:	f7fe fa38 	bl	80004f8 <__aeabi_f2iz>
 8002088:	4659      	mov	r1, fp
 800208a:	2200      	movs	r2, #0
 800208c:	4604      	mov	r4, r0
 800208e:	f7ff fdfb 	bl	8001c88 <_itostr>
 8002092:	eb0b 0200 	add.w	r2, fp, r0
 8002096:	e9cd 2000 	strd	r2, r0, [sp]
 800209a:	4620      	mov	r0, r4
 800209c:	f7fe f962 	bl	8000364 <__aeabi_i2f>
 80020a0:	4601      	mov	r1, r0
 80020a2:	4648      	mov	r0, r9
 80020a4:	f7fe f8a8 	bl	80001f8 <__aeabi_fsub>
 80020a8:	222e      	movs	r2, #46	; 0x2e
 80020aa:	4601      	mov	r1, r0
 80020ac:	200a      	movs	r0, #10
 80020ae:	9b00      	ldr	r3, [sp, #0]
 80020b0:	f10a 0901 	add.w	r9, sl, #1
 80020b4:	1c5c      	adds	r4, r3, #1
 80020b6:	9b01      	ldr	r3, [sp, #4]
 80020b8:	f80b 2003 	strb.w	r2, [fp, r3]
 80020bc:	4603      	mov	r3, r0
 80020be:	f1ba 0f00 	cmp.w	sl, #0
 80020c2:	dc3d      	bgt.n	8002140 <_vprintf+0x288>
 80020c4:	9100      	str	r1, [sp, #0]
 80020c6:	f7fe f94d 	bl	8000364 <__aeabi_i2f>
 80020ca:	9900      	ldr	r1, [sp, #0]
 80020cc:	f7fe fe22 	bl	8000d14 <__aeabi_fmul>
 80020d0:	f7fe fa12 	bl	80004f8 <__aeabi_f2iz>
 80020d4:	464a      	mov	r2, r9
 80020d6:	4621      	mov	r1, r4
 80020d8:	f7ff fdd6 	bl	8001c88 <_itostr>
 80020dc:	4404      	add	r4, r0
 80020de:	1be0      	subs	r0, r4, r7
 80020e0:	1e44      	subs	r4, r0, #1
 80020e2:	5d3b      	ldrb	r3, [r7, r4]
 80020e4:	193a      	adds	r2, r7, r4
 80020e6:	2b34      	cmp	r3, #52	; 0x34
 80020e8:	d910      	bls.n	800210c <_vprintf+0x254>
 80020ea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80020ee:	1e53      	subs	r3, r2, #1
 80020f0:	292e      	cmp	r1, #46	; 0x2e
 80020f2:	d02c      	beq.n	800214e <_vprintf+0x296>
 80020f4:	469c      	mov	ip, r3
 80020f6:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80020fa:	4663      	mov	r3, ip
 80020fc:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8002100:	2939      	cmp	r1, #57	; 0x39
 8002102:	d021      	beq.n	8002148 <_vprintf+0x290>
 8002104:	292e      	cmp	r1, #46	; 0x2e
 8002106:	d022      	beq.n	800214e <_vprintf+0x296>
 8002108:	3101      	adds	r1, #1
 800210a:	7019      	strb	r1, [r3, #0]
 800210c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8002110:	446b      	add	r3, sp
 8002112:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8002116:	2b2e      	cmp	r3, #46	; 0x2e
 8002118:	bf08      	it	eq
 800211a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800211e:	46a1      	mov	r9, r4
 8002120:	9b05      	ldr	r3, [sp, #20]
 8002122:	4599      	cmp	r9, r3
 8002124:	db3e      	blt.n	80021a4 <_vprintf+0x2ec>
 8002126:	46b9      	mov	r9, r7
 8002128:	2c00      	cmp	r4, #0
 800212a:	f77f af71 	ble.w	8002010 <_vprintf+0x158>
 800212e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002132:	a803      	add	r0, sp, #12
 8002134:	f7ff fde2 	bl	8001cfc <_xputch>
 8002138:	3c01      	subs	r4, #1
 800213a:	e7f5      	b.n	8002128 <_vprintf+0x270>
 800213c:	46bb      	mov	fp, r7
 800213e:	e7a0      	b.n	8002082 <_vprintf+0x1ca>
 8002140:	4358      	muls	r0, r3
 8002142:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002146:	e7ba      	b.n	80020be <_vprintf+0x206>
 8002148:	f88c e001 	strb.w	lr, [ip, #1]
 800214c:	e7d5      	b.n	80020fa <_vprintf+0x242>
 800214e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002152:	3b01      	subs	r3, #1
 8002154:	7819      	ldrb	r1, [r3, #0]
 8002156:	2939      	cmp	r1, #57	; 0x39
 8002158:	d112      	bne.n	8002180 <_vprintf+0x2c8>
 800215a:	42bb      	cmp	r3, r7
 800215c:	d20d      	bcs.n	800217a <_vprintf+0x2c2>
 800215e:	1c5c      	adds	r4, r3, #1
 8002160:	1c99      	adds	r1, r3, #2
 8002162:	428c      	cmp	r4, r1
 8002164:	eba2 0203 	sub.w	r2, r2, r3
 8002168:	d913      	bls.n	8002192 <_vprintf+0x2da>
 800216a:	4619      	mov	r1, r3
 800216c:	441a      	add	r2, r3
 800216e:	428a      	cmp	r2, r1
 8002170:	d10b      	bne.n	800218a <_vprintf+0x2d2>
 8002172:	2231      	movs	r2, #49	; 0x31
 8002174:	4604      	mov	r4, r0
 8002176:	705a      	strb	r2, [r3, #1]
 8002178:	e7c8      	b.n	800210c <_vprintf+0x254>
 800217a:	f803 c901 	strb.w	ip, [r3], #-1
 800217e:	e7e9      	b.n	8002154 <_vprintf+0x29c>
 8002180:	42bb      	cmp	r3, r7
 8002182:	d3ec      	bcc.n	800215e <_vprintf+0x2a6>
 8002184:	292d      	cmp	r1, #45	; 0x2d
 8002186:	d0ea      	beq.n	800215e <_vprintf+0x2a6>
 8002188:	e7be      	b.n	8002108 <_vprintf+0x250>
 800218a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800218e:	704c      	strb	r4, [r1, #1]
 8002190:	e7ed      	b.n	800216e <_vprintf+0x2b6>
 8002192:	4414      	add	r4, r2
 8002194:	440a      	add	r2, r1
 8002196:	428a      	cmp	r2, r1
 8002198:	d0eb      	beq.n	8002172 <_vprintf+0x2ba>
 800219a:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800219e:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80021a2:	e7f8      	b.n	8002196 <_vprintf+0x2de>
 80021a4:	2120      	movs	r1, #32
 80021a6:	a803      	add	r0, sp, #12
 80021a8:	f7ff fda8 	bl	8001cfc <_xputch>
 80021ac:	f109 0901 	add.w	r9, r9, #1
 80021b0:	e7b6      	b.n	8002120 <_vprintf+0x268>
 80021b2:	2308      	movs	r3, #8
 80021b4:	4625      	mov	r5, r4
 80021b6:	9305      	str	r3, [sp, #20]
 80021b8:	2320      	movs	r3, #32
 80021ba:	2130      	movs	r1, #48	; 0x30
 80021bc:	f855 4b04 	ldr.w	r4, [r5], #4
 80021c0:	a803      	add	r0, sp, #12
 80021c2:	9303      	str	r3, [sp, #12]
 80021c4:	f7ff fd9a 	bl	8001cfc <_xputch>
 80021c8:	2178      	movs	r1, #120	; 0x78
 80021ca:	a803      	add	r0, sp, #12
 80021cc:	f7ff fd96 	bl	8001cfc <_xputch>
 80021d0:	4621      	mov	r1, r4
 80021d2:	a803      	add	r0, sp, #12
 80021d4:	f7ff fe12 	bl	8001dfc <_format_hex>
 80021d8:	e71a      	b.n	8002010 <_vprintf+0x158>
 80021da:	4625      	mov	r5, r4
 80021dc:	2400      	movs	r4, #0
 80021de:	f855 9b04 	ldr.w	r9, [r5], #4
 80021e2:	f819 3004 	ldrb.w	r3, [r9, r4]
 80021e6:	b993      	cbnz	r3, 800220e <_vprintf+0x356>
 80021e8:	9b03      	ldr	r3, [sp, #12]
 80021ea:	07d9      	lsls	r1, r3, #31
 80021ec:	d503      	bpl.n	80021f6 <_vprintf+0x33e>
 80021ee:	9b04      	ldr	r3, [sp, #16]
 80021f0:	429c      	cmp	r4, r3
 80021f2:	bfa8      	it	ge
 80021f4:	461c      	movge	r4, r3
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	f104 0a01 	add.w	sl, r4, #1
 80021fc:	065a      	lsls	r2, r3, #25
 80021fe:	d403      	bmi.n	8002208 <_vprintf+0x350>
 8002200:	9b05      	ldr	r3, [sp, #20]
 8002202:	429c      	cmp	r4, r3
 8002204:	db05      	blt.n	8002212 <_vprintf+0x35a>
 8002206:	4654      	mov	r4, sl
 8002208:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800220c:	e00d      	b.n	800222a <_vprintf+0x372>
 800220e:	3401      	adds	r4, #1
 8002210:	e7e7      	b.n	80021e2 <_vprintf+0x32a>
 8002212:	2120      	movs	r1, #32
 8002214:	a803      	add	r0, sp, #12
 8002216:	f7ff fd71 	bl	8001cfc <_xputch>
 800221a:	4654      	mov	r4, sl
 800221c:	e7eb      	b.n	80021f6 <_vprintf+0x33e>
 800221e:	a803      	add	r0, sp, #12
 8002220:	f7ff fd6c 	bl	8001cfc <_xputch>
 8002224:	9b04      	ldr	r3, [sp, #16]
 8002226:	3b01      	subs	r3, #1
 8002228:	9304      	str	r3, [sp, #16]
 800222a:	9b03      	ldr	r3, [sp, #12]
 800222c:	07db      	lsls	r3, r3, #31
 800222e:	d501      	bpl.n	8002234 <_vprintf+0x37c>
 8002230:	9b04      	ldr	r3, [sp, #16]
 8002232:	b11b      	cbz	r3, 800223c <_vprintf+0x384>
 8002234:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002238:	2900      	cmp	r1, #0
 800223a:	d1f0      	bne.n	800221e <_vprintf+0x366>
 800223c:	9b05      	ldr	r3, [sp, #20]
 800223e:	429c      	cmp	r4, r3
 8002240:	f6bf aee6 	bge.w	8002010 <_vprintf+0x158>
 8002244:	2120      	movs	r1, #32
 8002246:	a803      	add	r0, sp, #12
 8002248:	f7ff fd58 	bl	8001cfc <_xputch>
 800224c:	3401      	adds	r4, #1
 800224e:	e7f5      	b.n	800223c <_vprintf+0x384>
 8002250:	9b03      	ldr	r3, [sp, #12]
 8002252:	f013 0304 	ands.w	r3, r3, #4
 8002256:	bf1d      	ittte	ne
 8002258:	3407      	addne	r4, #7
 800225a:	f024 0407 	bicne.w	r4, r4, #7
 800225e:	4625      	movne	r5, r4
 8002260:	4625      	moveq	r5, r4
 8002262:	bf1a      	itte	ne
 8002264:	f855 2b08 	ldrne.w	r2, [r5], #8
 8002268:	6863      	ldrne	r3, [r4, #4]
 800226a:	f855 2b04 	ldreq.w	r2, [r5], #4
 800226e:	e6e9      	b.n	8002044 <_vprintf+0x18c>
 8002270:	9b03      	ldr	r3, [sp, #12]
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	4625      	mov	r5, r4
 800227a:	f855 1b04 	ldr.w	r1, [r5], #4
 800227e:	e7a8      	b.n	80021d2 <_vprintf+0x31a>

08002280 <printf>:
 8002280:	b40f      	push	{r0, r1, r2, r3}
 8002282:	b507      	push	{r0, r1, r2, lr}
 8002284:	aa04      	add	r2, sp, #16
 8002286:	f852 1b04 	ldr.w	r1, [r2], #4
 800228a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800228e:	9201      	str	r2, [sp, #4]
 8002290:	f7ff fe12 	bl	8001eb8 <_vprintf>
 8002294:	b003      	add	sp, #12
 8002296:	f85d eb04 	ldr.w	lr, [sp], #4
 800229a:	b004      	add	sp, #16
 800229c:	4770      	bx	lr
	...

080022a0 <snprintf>:
 80022a0:	b40c      	push	{r2, r3}
 80022a2:	460b      	mov	r3, r1
 80022a4:	b513      	push	{r0, r1, r4, lr}
 80022a6:	4c09      	ldr	r4, [pc, #36]	; (80022cc <snprintf+0x2c>)
 80022a8:	aa04      	add	r2, sp, #16
 80022aa:	f852 1b04 	ldr.w	r1, [r2], #4
 80022ae:	6020      	str	r0, [r4, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	f7ff fe00 	bl	8001eb8 <_vprintf>
 80022b8:	2300      	movs	r3, #0
 80022ba:	6822      	ldr	r2, [r4, #0]
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	7013      	strb	r3, [r2, #0]
 80022c0:	b002      	add	sp, #8
 80022c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c6:	b002      	add	sp, #8
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080022d0 <vsnprintf>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4605      	mov	r5, r0
 80022d4:	4c05      	ldr	r4, [pc, #20]	; (80022ec <vsnprintf+0x1c>)
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	461a      	mov	r2, r3
 80022dc:	6025      	str	r5, [r4, #0]
 80022de:	f7ff fdeb 	bl	8001eb8 <_vprintf>
 80022e2:	2300      	movs	r3, #0
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	6023      	str	r3, [r4, #0]
 80022e8:	7013      	strb	r3, [r2, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080022f0 <puts>:
 80022f0:	b508      	push	{r3, lr}
 80022f2:	f005 ff03 	bl	80080fc <console_puts>
 80022f6:	200a      	movs	r0, #10
 80022f8:	f005 fefe 	bl	80080f8 <console_putc>
 80022fc:	2001      	movs	r0, #1
 80022fe:	bd08      	pop	{r3, pc}

08002300 <__udivmoddi4>:
 8002300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002304:	9e08      	ldr	r6, [sp, #32]
 8002306:	460d      	mov	r5, r1
 8002308:	4604      	mov	r4, r0
 800230a:	468e      	mov	lr, r1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d14c      	bne.n	80023aa <__udivmoddi4+0xaa>
 8002310:	428a      	cmp	r2, r1
 8002312:	4694      	mov	ip, r2
 8002314:	d967      	bls.n	80023e6 <__udivmoddi4+0xe6>
 8002316:	fab2 f382 	clz	r3, r2
 800231a:	b153      	cbz	r3, 8002332 <__udivmoddi4+0x32>
 800231c:	fa02 fc03 	lsl.w	ip, r2, r3
 8002320:	f1c3 0220 	rsb	r2, r3, #32
 8002324:	fa01 fe03 	lsl.w	lr, r1, r3
 8002328:	fa20 f202 	lsr.w	r2, r0, r2
 800232c:	ea42 0e0e 	orr.w	lr, r2, lr
 8002330:	409c      	lsls	r4, r3
 8002332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002336:	fbbe f1f7 	udiv	r1, lr, r7
 800233a:	fa1f f58c 	uxth.w	r5, ip
 800233e:	fb07 ee11 	mls	lr, r7, r1, lr
 8002342:	fb01 f005 	mul.w	r0, r1, r5
 8002346:	0c22      	lsrs	r2, r4, #16
 8002348:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800234c:	4290      	cmp	r0, r2
 800234e:	d90a      	bls.n	8002366 <__udivmoddi4+0x66>
 8002350:	eb1c 0202 	adds.w	r2, ip, r2
 8002354:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8002358:	f080 8119 	bcs.w	800258e <__udivmoddi4+0x28e>
 800235c:	4290      	cmp	r0, r2
 800235e:	f240 8116 	bls.w	800258e <__udivmoddi4+0x28e>
 8002362:	3902      	subs	r1, #2
 8002364:	4462      	add	r2, ip
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	fbb2 f0f7 	udiv	r0, r2, r7
 800236c:	fb07 2210 	mls	r2, r7, r0, r2
 8002370:	fb00 f505 	mul.w	r5, r0, r5
 8002374:	b2a4      	uxth	r4, r4
 8002376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800237a:	42a5      	cmp	r5, r4
 800237c:	d90a      	bls.n	8002394 <__udivmoddi4+0x94>
 800237e:	eb1c 0404 	adds.w	r4, ip, r4
 8002382:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002386:	f080 8104 	bcs.w	8002592 <__udivmoddi4+0x292>
 800238a:	42a5      	cmp	r5, r4
 800238c:	f240 8101 	bls.w	8002592 <__udivmoddi4+0x292>
 8002390:	4464      	add	r4, ip
 8002392:	3802      	subs	r0, #2
 8002394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002398:	2100      	movs	r1, #0
 800239a:	1b64      	subs	r4, r4, r5
 800239c:	b11e      	cbz	r6, 80023a6 <__udivmoddi4+0xa6>
 800239e:	40dc      	lsrs	r4, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	e9c6 4300 	strd	r4, r3, [r6]
 80023a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d908      	bls.n	80023c0 <__udivmoddi4+0xc0>
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	f000 80ea 	beq.w	8002588 <__udivmoddi4+0x288>
 80023b4:	2100      	movs	r1, #0
 80023b6:	e9c6 0500 	strd	r0, r5, [r6]
 80023ba:	4608      	mov	r0, r1
 80023bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023c0:	fab3 f183 	clz	r1, r3
 80023c4:	2900      	cmp	r1, #0
 80023c6:	d148      	bne.n	800245a <__udivmoddi4+0x15a>
 80023c8:	42ab      	cmp	r3, r5
 80023ca:	d302      	bcc.n	80023d2 <__udivmoddi4+0xd2>
 80023cc:	4282      	cmp	r2, r0
 80023ce:	f200 80f8 	bhi.w	80025c2 <__udivmoddi4+0x2c2>
 80023d2:	1a84      	subs	r4, r0, r2
 80023d4:	eb65 0203 	sbc.w	r2, r5, r3
 80023d8:	2001      	movs	r0, #1
 80023da:	4696      	mov	lr, r2
 80023dc:	2e00      	cmp	r6, #0
 80023de:	d0e2      	beq.n	80023a6 <__udivmoddi4+0xa6>
 80023e0:	e9c6 4e00 	strd	r4, lr, [r6]
 80023e4:	e7df      	b.n	80023a6 <__udivmoddi4+0xa6>
 80023e6:	b902      	cbnz	r2, 80023ea <__udivmoddi4+0xea>
 80023e8:	deff      	udf	#255	; 0xff
 80023ea:	fab2 f382 	clz	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 808e 	bne.w	8002510 <__udivmoddi4+0x210>
 80023f4:	1a88      	subs	r0, r1, r2
 80023f6:	2101      	movs	r1, #1
 80023f8:	0c17      	lsrs	r7, r2, #16
 80023fa:	fa1f fe82 	uxth.w	lr, r2
 80023fe:	fbb0 f5f7 	udiv	r5, r0, r7
 8002402:	fb07 0015 	mls	r0, r7, r5, r0
 8002406:	0c22      	lsrs	r2, r4, #16
 8002408:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800240c:	fb0e f005 	mul.w	r0, lr, r5
 8002410:	4290      	cmp	r0, r2
 8002412:	d908      	bls.n	8002426 <__udivmoddi4+0x126>
 8002414:	eb1c 0202 	adds.w	r2, ip, r2
 8002418:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800241c:	d202      	bcs.n	8002424 <__udivmoddi4+0x124>
 800241e:	4290      	cmp	r0, r2
 8002420:	f200 80cc 	bhi.w	80025bc <__udivmoddi4+0x2bc>
 8002424:	4645      	mov	r5, r8
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	fbb2 f0f7 	udiv	r0, r2, r7
 800242c:	fb07 2210 	mls	r2, r7, r0, r2
 8002430:	fb0e fe00 	mul.w	lr, lr, r0
 8002434:	b2a4      	uxth	r4, r4
 8002436:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800243a:	45a6      	cmp	lr, r4
 800243c:	d908      	bls.n	8002450 <__udivmoddi4+0x150>
 800243e:	eb1c 0404 	adds.w	r4, ip, r4
 8002442:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002446:	d202      	bcs.n	800244e <__udivmoddi4+0x14e>
 8002448:	45a6      	cmp	lr, r4
 800244a:	f200 80b4 	bhi.w	80025b6 <__udivmoddi4+0x2b6>
 800244e:	4610      	mov	r0, r2
 8002450:	eba4 040e 	sub.w	r4, r4, lr
 8002454:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002458:	e7a0      	b.n	800239c <__udivmoddi4+0x9c>
 800245a:	f1c1 0720 	rsb	r7, r1, #32
 800245e:	408b      	lsls	r3, r1
 8002460:	fa22 fc07 	lsr.w	ip, r2, r7
 8002464:	ea4c 0c03 	orr.w	ip, ip, r3
 8002468:	fa25 fa07 	lsr.w	sl, r5, r7
 800246c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002470:	fbba f8f9 	udiv	r8, sl, r9
 8002474:	408d      	lsls	r5, r1
 8002476:	fa20 f307 	lsr.w	r3, r0, r7
 800247a:	fb09 aa18 	mls	sl, r9, r8, sl
 800247e:	fa1f fe8c 	uxth.w	lr, ip
 8002482:	432b      	orrs	r3, r5
 8002484:	fa00 f501 	lsl.w	r5, r0, r1
 8002488:	fb08 f00e 	mul.w	r0, r8, lr
 800248c:	0c1c      	lsrs	r4, r3, #16
 800248e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8002492:	42a0      	cmp	r0, r4
 8002494:	fa02 f201 	lsl.w	r2, r2, r1
 8002498:	d90b      	bls.n	80024b2 <__udivmoddi4+0x1b2>
 800249a:	eb1c 0404 	adds.w	r4, ip, r4
 800249e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80024a2:	f080 8086 	bcs.w	80025b2 <__udivmoddi4+0x2b2>
 80024a6:	42a0      	cmp	r0, r4
 80024a8:	f240 8083 	bls.w	80025b2 <__udivmoddi4+0x2b2>
 80024ac:	f1a8 0802 	sub.w	r8, r8, #2
 80024b0:	4464      	add	r4, ip
 80024b2:	1a24      	subs	r4, r4, r0
 80024b4:	b298      	uxth	r0, r3
 80024b6:	fbb4 f3f9 	udiv	r3, r4, r9
 80024ba:	fb09 4413 	mls	r4, r9, r3, r4
 80024be:	fb03 fe0e 	mul.w	lr, r3, lr
 80024c2:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80024c6:	45a6      	cmp	lr, r4
 80024c8:	d908      	bls.n	80024dc <__udivmoddi4+0x1dc>
 80024ca:	eb1c 0404 	adds.w	r4, ip, r4
 80024ce:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80024d2:	d26a      	bcs.n	80025aa <__udivmoddi4+0x2aa>
 80024d4:	45a6      	cmp	lr, r4
 80024d6:	d968      	bls.n	80025aa <__udivmoddi4+0x2aa>
 80024d8:	3b02      	subs	r3, #2
 80024da:	4464      	add	r4, ip
 80024dc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80024e0:	fba0 9302 	umull	r9, r3, r0, r2
 80024e4:	eba4 040e 	sub.w	r4, r4, lr
 80024e8:	429c      	cmp	r4, r3
 80024ea:	46c8      	mov	r8, r9
 80024ec:	469e      	mov	lr, r3
 80024ee:	d354      	bcc.n	800259a <__udivmoddi4+0x29a>
 80024f0:	d051      	beq.n	8002596 <__udivmoddi4+0x296>
 80024f2:	2e00      	cmp	r6, #0
 80024f4:	d067      	beq.n	80025c6 <__udivmoddi4+0x2c6>
 80024f6:	ebb5 0308 	subs.w	r3, r5, r8
 80024fa:	eb64 040e 	sbc.w	r4, r4, lr
 80024fe:	40cb      	lsrs	r3, r1
 8002500:	fa04 f707 	lsl.w	r7, r4, r7
 8002504:	431f      	orrs	r7, r3
 8002506:	40cc      	lsrs	r4, r1
 8002508:	e9c6 7400 	strd	r7, r4, [r6]
 800250c:	2100      	movs	r1, #0
 800250e:	e74a      	b.n	80023a6 <__udivmoddi4+0xa6>
 8002510:	fa02 fc03 	lsl.w	ip, r2, r3
 8002514:	f1c3 0020 	rsb	r0, r3, #32
 8002518:	40c1      	lsrs	r1, r0
 800251a:	409d      	lsls	r5, r3
 800251c:	fa24 f000 	lsr.w	r0, r4, r0
 8002520:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002524:	4328      	orrs	r0, r5
 8002526:	fbb1 f5f7 	udiv	r5, r1, r7
 800252a:	fb07 1115 	mls	r1, r7, r5, r1
 800252e:	fa1f fe8c 	uxth.w	lr, ip
 8002532:	0c02      	lsrs	r2, r0, #16
 8002534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002538:	fb05 f10e 	mul.w	r1, r5, lr
 800253c:	4291      	cmp	r1, r2
 800253e:	fa04 f403 	lsl.w	r4, r4, r3
 8002542:	d908      	bls.n	8002556 <__udivmoddi4+0x256>
 8002544:	eb1c 0202 	adds.w	r2, ip, r2
 8002548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800254c:	d22f      	bcs.n	80025ae <__udivmoddi4+0x2ae>
 800254e:	4291      	cmp	r1, r2
 8002550:	d92d      	bls.n	80025ae <__udivmoddi4+0x2ae>
 8002552:	3d02      	subs	r5, #2
 8002554:	4462      	add	r2, ip
 8002556:	1a52      	subs	r2, r2, r1
 8002558:	fbb2 f1f7 	udiv	r1, r2, r7
 800255c:	fb07 2211 	mls	r2, r7, r1, r2
 8002560:	b280      	uxth	r0, r0
 8002562:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002566:	fb01 f20e 	mul.w	r2, r1, lr
 800256a:	4282      	cmp	r2, r0
 800256c:	d908      	bls.n	8002580 <__udivmoddi4+0x280>
 800256e:	eb1c 0000 	adds.w	r0, ip, r0
 8002572:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8002576:	d216      	bcs.n	80025a6 <__udivmoddi4+0x2a6>
 8002578:	4282      	cmp	r2, r0
 800257a:	d914      	bls.n	80025a6 <__udivmoddi4+0x2a6>
 800257c:	3902      	subs	r1, #2
 800257e:	4460      	add	r0, ip
 8002580:	1a80      	subs	r0, r0, r2
 8002582:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002586:	e73a      	b.n	80023fe <__udivmoddi4+0xfe>
 8002588:	4631      	mov	r1, r6
 800258a:	4630      	mov	r0, r6
 800258c:	e70b      	b.n	80023a6 <__udivmoddi4+0xa6>
 800258e:	4671      	mov	r1, lr
 8002590:	e6e9      	b.n	8002366 <__udivmoddi4+0x66>
 8002592:	4610      	mov	r0, r2
 8002594:	e6fe      	b.n	8002394 <__udivmoddi4+0x94>
 8002596:	454d      	cmp	r5, r9
 8002598:	d2ab      	bcs.n	80024f2 <__udivmoddi4+0x1f2>
 800259a:	ebb9 0802 	subs.w	r8, r9, r2
 800259e:	eb63 0e0c 	sbc.w	lr, r3, ip
 80025a2:	3801      	subs	r0, #1
 80025a4:	e7a5      	b.n	80024f2 <__udivmoddi4+0x1f2>
 80025a6:	4641      	mov	r1, r8
 80025a8:	e7ea      	b.n	8002580 <__udivmoddi4+0x280>
 80025aa:	4603      	mov	r3, r0
 80025ac:	e796      	b.n	80024dc <__udivmoddi4+0x1dc>
 80025ae:	4645      	mov	r5, r8
 80025b0:	e7d1      	b.n	8002556 <__udivmoddi4+0x256>
 80025b2:	46d0      	mov	r8, sl
 80025b4:	e77d      	b.n	80024b2 <__udivmoddi4+0x1b2>
 80025b6:	4464      	add	r4, ip
 80025b8:	3802      	subs	r0, #2
 80025ba:	e749      	b.n	8002450 <__udivmoddi4+0x150>
 80025bc:	3d02      	subs	r5, #2
 80025be:	4462      	add	r2, ip
 80025c0:	e731      	b.n	8002426 <__udivmoddi4+0x126>
 80025c2:	4608      	mov	r0, r1
 80025c4:	e70a      	b.n	80023dc <__udivmoddi4+0xdc>
 80025c6:	4631      	mov	r1, r6
 80025c8:	e6ed      	b.n	80023a6 <__udivmoddi4+0xa6>
 80025ca:	bf00      	nop

080025cc <DMXReceiver::Run(short&)>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <DMXReceiver::Run(short&)+0x8c>)
 80025d0:	4607      	mov	r7, r0
 80025d2:	781e      	ldrb	r6, [r3, #0]
 80025d4:	460d      	mov	r5, r1
 80025d6:	b11e      	cbz	r6, 80025e0 <DMXReceiver::Run(short&)+0x14>
 80025d8:	2400      	movs	r4, #0
 80025da:	802c      	strh	r4, [r5, #0]
 80025dc:	4620      	mov	r0, r4
 80025de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e0:	4631      	mov	r1, r6
 80025e2:	f001 fc45 	bl	8003e70 <Dmx::GetUpdatesPerSecond(unsigned int)>
 80025e6:	4604      	mov	r4, r0
 80025e8:	b998      	cbnz	r0, 8002612 <DMXReceiver::Run(short&)+0x46>
 80025ea:	4e1c      	ldr	r6, [pc, #112]	; (800265c <DMXReceiver::Run(short&)+0x90>)
 80025ec:	7833      	ldrb	r3, [r6, #0]
 80025ee:	b15b      	cbz	r3, 8002608 <DMXReceiver::Run(short&)+0x3c>
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <DMXReceiver::Run(short&)+0x94>)
 80025f2:	4621      	mov	r1, r4
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4798      	blx	r3
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <DMXReceiver::Run(short&)+0x98>)
 80025fe:	2102      	movs	r1, #2
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	7034      	strb	r4, [r6, #0]
 8002604:	f005 fde4 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 8002608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260c:	2400      	movs	r4, #0
 800260e:	802b      	strh	r3, [r5, #0]
 8002610:	e7e4      	b.n	80025dc <DMXReceiver::Run(short&)+0x10>
 8002612:	4631      	mov	r1, r6
 8002614:	4638      	mov	r0, r7
 8002616:	f001 fc17 	bl	8003e48 <Dmx::GetDmxAvailable(unsigned int)>
 800261a:	2800      	cmp	r0, #0
 800261c:	d0dc      	beq.n	80025d8 <DMXReceiver::Run(short&)+0xc>
 800261e:	4f10      	ldr	r7, [pc, #64]	; (8002660 <DMXReceiver::Run(short&)+0x94>)
 8002620:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002624:	1c44      	adds	r4, r0, #1
 8002626:	6838      	ldr	r0, [r7, #0]
 8002628:	802b      	strh	r3, [r5, #0]
 800262a:	6802      	ldr	r2, [r0, #0]
 800262c:	4631      	mov	r1, r6
 800262e:	6915      	ldr	r5, [r2, #16]
 8002630:	b29b      	uxth	r3, r3
 8002632:	4622      	mov	r2, r4
 8002634:	47a8      	blx	r5
 8002636:	4d09      	ldr	r5, [pc, #36]	; (800265c <DMXReceiver::Run(short&)+0x90>)
 8002638:	7829      	ldrb	r1, [r5, #0]
 800263a:	2900      	cmp	r1, #0
 800263c:	d1ce      	bne.n	80025dc <DMXReceiver::Run(short&)+0x10>
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	6803      	ldr	r3, [r0, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4798      	blx	r3
 8002646:	2301      	movs	r3, #1
 8002648:	702b      	strb	r3, [r5, #0]
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <DMXReceiver::Run(short&)+0x98>)
 800264c:	2103      	movs	r1, #3
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	f005 fdbe 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 8002654:	e7c2      	b.n	80025dc <DMXReceiver::Run(short&)+0x10>
 8002656:	bf00      	nop
 8002658:	2000020c 	andcs	r0, r0, ip, lsl #4
 800265c:	20000204 	andcs	r0, r0, r4, lsl #4
 8002660:	20000208 	andcs	r0, r0, r8, lsl #4
 8002664:	200017dc 	ldrdcs	r1, [r0], -ip

08002668 <RDMResponder::HandleResponse(unsigned char*)>:
 8002668:	780a      	ldrb	r2, [r1, #0]
 800266a:	b510      	push	{r4, lr}
 800266c:	2acc      	cmp	r2, #204	; 0xcc
 800266e:	d107      	bne.n	8002680 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002670:	788c      	ldrb	r4, [r1, #2]
 8002672:	2000      	movs	r0, #0
 8002674:	3402      	adds	r4, #2
 8002676:	4622      	mov	r2, r4
 8002678:	f001 fc5a 	bl	8003f30 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800267c:	4620      	mov	r0, r4
 800267e:	bd10      	pop	{r4, pc}
 8002680:	2afe      	cmp	r2, #254	; 0xfe
 8002682:	d105      	bne.n	8002690 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8002684:	2218      	movs	r2, #24
 8002686:	2000      	movs	r0, #0
 8002688:	f001 fc64 	bl	8003f54 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800268c:	2418      	movs	r4, #24
 800268e:	e7f5      	b.n	800267c <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002690:	f06f 0402 	mvn.w	r4, #2
 8002694:	e7f2      	b.n	800267c <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

08002698 <RDMResponder::Run()>:
 8002698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800269a:	4604      	mov	r4, r0
 800269c:	f10d 0106 	add.w	r1, sp, #6
 80026a0:	30cc      	adds	r0, #204	; 0xcc
 80026a2:	f7ff ff93 	bl	80025cc <DMXReceiver::Run(short&)>
 80026a6:	4e1f      	ldr	r6, [pc, #124]	; (8002724 <RDMResponder::Run()+0x8c>)
 80026a8:	4601      	mov	r1, r0
 80026aa:	6830      	ldr	r0, [r6, #0]
 80026ac:	8883      	ldrh	r3, [r0, #4]
 80026ae:	b153      	cbz	r3, 80026c6 <RDMResponder::Run()+0x2e>
 80026b0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80026b4:	1c53      	adds	r3, r2, #1
 80026b6:	d120      	bne.n	80026fa <RDMResponder::Run()+0x62>
 80026b8:	4d1b      	ldr	r5, [pc, #108]	; (8002728 <RDMResponder::Run()+0x90>)
 80026ba:	782b      	ldrb	r3, [r5, #0]
 80026bc:	b11b      	cbz	r3, 80026c6 <RDMResponder::Run()+0x2e>
 80026be:	f000 ff1e 	bl	80034fe <RDMSubDevices::Stop()>
 80026c2:	2300      	movs	r3, #0
 80026c4:	702b      	strb	r3, [r5, #0]
 80026c6:	2000      	movs	r0, #0
 80026c8:	f000 ffdc 	bl	8003684 <Rdm::Receive(unsigned int)>
 80026cc:	b198      	cbz	r0, 80026f6 <RDMResponder::Run()+0x5e>
 80026ce:	7803      	ldrb	r3, [r0, #0]
 80026d0:	2bcc      	cmp	r3, #204	; 0xcc
 80026d2:	d120      	bne.n	8002716 <RDMResponder::Run()+0x7e>
 80026d4:	7d03      	ldrb	r3, [r0, #20]
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d003      	beq.n	80026e2 <RDMResponder::Run()+0x4a>
 80026da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d11c      	bne.n	800271c <RDMResponder::Run()+0x84>
 80026e2:	1c41      	adds	r1, r0, #1
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <RDMResponder::Run()+0x94>)
 80026e6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80026ea:	f002 fda9 	bl	8005240 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80026ee:	4620      	mov	r0, r4
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <RDMResponder::Run()+0x94>)
 80026f2:	f7ff ffb9 	bl	8002668 <RDMResponder::HandleResponse(unsigned char*)>
 80026f6:	b002      	add	sp, #8
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d0e3      	beq.n	80026c6 <RDMResponder::Run()+0x2e>
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <RDMResponder::Run()+0x90>)
 8002700:	b292      	uxth	r2, r2
 8002702:	f000 ff0c 	bl	800351e <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 8002706:	782b      	ldrb	r3, [r5, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1dc      	bne.n	80026c6 <RDMResponder::Run()+0x2e>
 800270c:	6830      	ldr	r0, [r6, #0]
 800270e:	f000 fee6 	bl	80034de <RDMSubDevices::Start()>
 8002712:	2301      	movs	r3, #1
 8002714:	e7d6      	b.n	80026c4 <RDMResponder::Run()+0x2c>
 8002716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800271a:	e7ec      	b.n	80026f6 <RDMResponder::Run()+0x5e>
 800271c:	f06f 0001 	mvn.w	r0, #1
 8002720:	e7e9      	b.n	80026f6 <RDMResponder::Run()+0x5e>
 8002722:	bf00      	nop
 8002724:	20000200 	andcs	r0, r0, r0, lsl #4
 8002728:	200001f5 	strdcs	r0, [r0], -r5
 800272c:	200000f4 	strdcs	r0, [r0], -r4

08002730 <CpuTemperature::Initialize()>:
 8002730:	2001      	movs	r0, #1
 8002732:	4770      	bx	lr

08002734 <CpuTemperature::~CpuTemperature()>:
 8002734:	4770      	bx	lr

08002736 <CpuTemperature::GetValue()>:
 8002736:	b508      	push	{r3, lr}
 8002738:	f006 ff62 	bl	8009600 <gd32_adc_gettemp()>
 800273c:	f7fd fedc 	bl	80004f8 <__aeabi_f2iz>
 8002740:	b200      	sxth	r0, r0
 8002742:	bd08      	pop	{r3, pc}

08002744 <CpuTemperature::~CpuTemperature()>:
 8002744:	b510      	push	{r4, lr}
 8002746:	4604      	mov	r4, r0
 8002748:	f005 ff8b 	bl	8008662 <operator delete(void*)>
 800274c:	4620      	mov	r0, r4
 800274e:	bd10      	pop	{r4, pc}

08002750 <RDMSensors::RDMSensors()>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <RDMSensors::RDMSensors()+0x4c>)
 8002756:	4604      	mov	r4, r0
 8002758:	6018      	str	r0, [r3, #0]
 800275a:	6006      	str	r6, [r0, #0]
 800275c:	7106      	strb	r6, [r0, #4]
 800275e:	2040      	movs	r0, #64	; 0x40
 8002760:	f005 ff85 	bl	800866e <operator new[](unsigned int)>
 8002764:	6020      	str	r0, [r4, #0]
 8002766:	2040      	movs	r0, #64	; 0x40
 8002768:	f005 ff7f 	bl	800866a <operator new(unsigned int)>
 800276c:	4605      	mov	r5, r0
 800276e:	7921      	ldrb	r1, [r4, #4]
 8002770:	f000 fac8 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RDMSensors::RDMSensors()+0x50>)
 8002776:	4628      	mov	r0, r5
 8002778:	602b      	str	r3, [r5, #0]
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <RDMSensors::RDMSensors()+0x54>)
 800277c:	490a      	ldr	r1, [pc, #40]	; (80027a8 <RDMSensors::RDMSensors()+0x58>)
 800277e:	60ab      	str	r3, [r5, #8]
 8002780:	3354      	adds	r3, #84	; 0x54
 8002782:	60eb      	str	r3, [r5, #12]
 8002784:	2355      	movs	r3, #85	; 0x55
 8002786:	71ee      	strb	r6, [r5, #7]
 8002788:	822b      	strh	r3, [r5, #16]
 800278a:	f000 facd 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 800278e:	4629      	mov	r1, r5
 8002790:	4620      	mov	r0, r4
 8002792:	f000 f85b 	bl	800284c <RDMSensors::Add(RDMSensor*)>
 8002796:	4620      	mov	r0, r4
 8002798:	bd70      	pop	{r4, r5, r6, pc}
 800279a:	bf00      	nop
 800279c:	200001fc 	strdcs	r0, [r0], -ip
 80027a0:	0800a314 	stmdaeq	r0, {r2, r4, r8, r9, sp, pc}
 80027a4:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 80027a8:	0800a305 	stmdaeq	r0, {r0, r2, r8, r9, sp, pc}

080027ac <RDMSensors::~RDMSensors()>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	2500      	movs	r5, #0
 80027b0:	4604      	mov	r4, r0
 80027b2:	462e      	mov	r6, r5
 80027b4:	7923      	ldrb	r3, [r4, #4]
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	d804      	bhi.n	80027c6 <RDMSensors::~RDMSensors()+0x1a>
 80027bc:	b108      	cbz	r0, 80027c2 <RDMSensors::~RDMSensors()+0x16>
 80027be:	f005 ff52 	bl	8008666 <operator delete[](void*)>
 80027c2:	4620      	mov	r0, r4
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
 80027c6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80027ca:	b128      	cbz	r0, 80027d8 <RDMSensors::~RDMSensors()+0x2c>
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4798      	blx	r3
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80027d8:	3501      	adds	r5, #1
 80027da:	e7eb      	b.n	80027b4 <RDMSensors::~RDMSensors()+0x8>

080027dc <RDMSensors::GetDefintion(unsigned char)>:
 80027dc:	6803      	ldr	r3, [r0, #0]
 80027de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027e2:	3006      	adds	r0, #6
 80027e4:	4770      	bx	lr

080027e6 <RDMSensors::GetValues(unsigned char)>:
 80027e6:	6803      	ldr	r3, [r0, #0]
 80027e8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027ec:	f000 baaa 	b.w	8002d44 <RDMSensor::GetValues()>

080027f0 <RDMSensors::SetValues(unsigned char)>:
 80027f0:	29ff      	cmp	r1, #255	; 0xff
 80027f2:	b538      	push	{r3, r4, r5, lr}
 80027f4:	4604      	mov	r4, r0
 80027f6:	d010      	beq.n	800281a <RDMSensors::SetValues(unsigned char)+0x2a>
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80027fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002802:	f000 bab4 	b.w	8002d6e <RDMSensor::SetValues()>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800280c:	f000 faaf 	bl	8002d6e <RDMSensor::SetValues()>
 8002810:	3501      	adds	r5, #1
 8002812:	7923      	ldrb	r3, [r4, #4]
 8002814:	42ab      	cmp	r3, r5
 8002816:	d8f6      	bhi.n	8002806 <RDMSensors::SetValues(unsigned char)+0x16>
 8002818:	bd38      	pop	{r3, r4, r5, pc}
 800281a:	2500      	movs	r5, #0
 800281c:	e7f9      	b.n	8002812 <RDMSensors::SetValues(unsigned char)+0x22>

0800281e <RDMSensors::SetRecord(unsigned char)>:
 800281e:	29ff      	cmp	r1, #255	; 0xff
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4604      	mov	r4, r0
 8002824:	d010      	beq.n	8002848 <RDMSensors::SetRecord(unsigned char)+0x2a>
 8002826:	6803      	ldr	r3, [r0, #0]
 8002828:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800282c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002830:	f000 baa7 	b.w	8002d82 <RDMSensor::Record()>
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800283a:	f000 faa2 	bl	8002d82 <RDMSensor::Record()>
 800283e:	3501      	adds	r5, #1
 8002840:	7923      	ldrb	r3, [r4, #4]
 8002842:	42ab      	cmp	r3, r5
 8002844:	d8f6      	bhi.n	8002834 <RDMSensors::SetRecord(unsigned char)+0x16>
 8002846:	bd38      	pop	{r3, r4, r5, pc}
 8002848:	2500      	movs	r5, #0
 800284a:	e7f9      	b.n	8002840 <RDMSensors::SetRecord(unsigned char)+0x22>

0800284c <RDMSensors::Add(RDMSensor*)>:
 800284c:	4603      	mov	r3, r0
 800284e:	6800      	ldr	r0, [r0, #0]
 8002850:	b510      	push	{r4, lr}
 8002852:	b148      	cbz	r0, 8002868 <RDMSensors::Add(RDMSensor*)+0x1c>
 8002854:	791a      	ldrb	r2, [r3, #4]
 8002856:	2a10      	cmp	r2, #16
 8002858:	bf1b      	ittet	ne
 800285a:	1c54      	addne	r4, r2, #1
 800285c:	711c      	strbne	r4, [r3, #4]
 800285e:	2000      	moveq	r0, #0
 8002860:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
 8002864:	bf18      	it	ne
 8002866:	2001      	movne	r0, #1
 8002868:	bd10      	pop	{r4, pc}

0800286a <RDMSensorBH170::Initialize()>:
 800286a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800286e:	4770      	bx	lr

08002870 <RDMSensorMCP9808::Initialize()>:
 8002870:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002874:	4770      	bx	lr

08002876 <RDMSensorHTU21DHumidity::Initialize()>:
 8002876:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800287a:	4770      	bx	lr

0800287c <RDMSensorHTU21DTemperature::Initialize()>:
 800287c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002880:	4770      	bx	lr

08002882 <RDMSensorINA219Current::Initialize()>:
 8002882:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002886:	4770      	bx	lr

08002888 <RDMSensorINA219Power::Initialize()>:
 8002888:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800288c:	4770      	bx	lr

0800288e <RDMSensorINA219Voltage::Initialize()>:
 800288e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002892:	4770      	bx	lr

08002894 <RDMSensorSI7021Humidity::Initialize()>:
 8002894:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002898:	4770      	bx	lr

0800289a <RDMSensorSI7021Temperature::Initialize()>:
 800289a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800289e:	4770      	bx	lr

080028a0 <RDMSensorSI7021Temperature::GetValue()>:
 80028a0:	b508      	push	{r3, lr}
 80028a2:	3040      	adds	r0, #64	; 0x40
 80028a4:	f000 fd76 	bl	8003394 <sensor::SI7021::GetTemperature()>
 80028a8:	f7fd fe26 	bl	80004f8 <__aeabi_f2iz>
 80028ac:	b200      	sxth	r0, r0
 80028ae:	bd08      	pop	{r3, pc}

080028b0 <RDMSensorSI7021Humidity::GetValue()>:
 80028b0:	b508      	push	{r3, lr}
 80028b2:	3040      	adds	r0, #64	; 0x40
 80028b4:	f000 fd84 	bl	80033c0 <sensor::SI7021::GetHumidity()>
 80028b8:	f7fd fe1e 	bl	80004f8 <__aeabi_f2iz>
 80028bc:	b200      	sxth	r0, r0
 80028be:	bd08      	pop	{r3, pc}

080028c0 <RDMSensorINA219Voltage::GetValue()>:
 80028c0:	b508      	push	{r3, lr}
 80028c2:	3040      	adds	r0, #64	; 0x40
 80028c4:	f000 fc74 	bl	80031b0 <sensor::INA219::GetBusVoltage()>
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <RDMSensorINA219Voltage::GetValue()+0x18>)
 80028ca:	f7fe fa23 	bl	8000d14 <__aeabi_fmul>
 80028ce:	f7fd fe13 	bl	80004f8 <__aeabi_f2iz>
 80028d2:	b200      	sxth	r0, r0
 80028d4:	bd08      	pop	{r3, pc}
 80028d6:	bf00      	nop
 80028d8:	447a0000 	ldrbtmi	r0, [sl], #-0

080028dc <RDMSensorINA219Power::GetValue()>:
 80028dc:	b508      	push	{r3, lr}
 80028de:	3040      	adds	r0, #64	; 0x40
 80028e0:	f000 fc72 	bl	80031c8 <sensor::INA219::GetBusPower()>
 80028e4:	f7fd fe08 	bl	80004f8 <__aeabi_f2iz>
 80028e8:	b200      	sxth	r0, r0
 80028ea:	bd08      	pop	{r3, pc}

080028ec <RDMSensorINA219Current::GetValue()>:
 80028ec:	b508      	push	{r3, lr}
 80028ee:	3040      	adds	r0, #64	; 0x40
 80028f0:	f000 fc46 	bl	8003180 <sensor::INA219::GetShuntCurrent()>
 80028f4:	4903      	ldr	r1, [pc, #12]	; (8002904 <RDMSensorINA219Current::GetValue()+0x18>)
 80028f6:	f7fe fa0d 	bl	8000d14 <__aeabi_fmul>
 80028fa:	f7fd fdfd 	bl	80004f8 <__aeabi_f2iz>
 80028fe:	b200      	sxth	r0, r0
 8002900:	bd08      	pop	{r3, pc}
 8002902:	bf00      	nop
 8002904:	447a0000 	ldrbtmi	r0, [sl], #-0

08002908 <RDMSensorHTU21DTemperature::GetValue()>:
 8002908:	b508      	push	{r3, lr}
 800290a:	3040      	adds	r0, #64	; 0x40
 800290c:	f000 fb14 	bl	8002f38 <sensor::HTU21D::GetTemperature()>
 8002910:	f7fd fdf2 	bl	80004f8 <__aeabi_f2iz>
 8002914:	b200      	sxth	r0, r0
 8002916:	bd08      	pop	{r3, pc}

08002918 <RDMSensorHTU21DHumidity::GetValue()>:
 8002918:	b508      	push	{r3, lr}
 800291a:	3040      	adds	r0, #64	; 0x40
 800291c:	f000 fb22 	bl	8002f64 <sensor::HTU21D::GetHumidity()>
 8002920:	f7fd fdea 	bl	80004f8 <__aeabi_f2iz>
 8002924:	b200      	sxth	r0, r0
 8002926:	bd08      	pop	{r3, pc}

08002928 <RDMSensorMCP9808::GetValue()>:
 8002928:	b508      	push	{r3, lr}
 800292a:	3040      	adds	r0, #64	; 0x40
 800292c:	f000 fcb8 	bl	80032a0 <sensor::MCP9808::Get()>
 8002930:	f7fd fde2 	bl	80004f8 <__aeabi_f2iz>
 8002934:	b200      	sxth	r0, r0
 8002936:	bd08      	pop	{r3, pc}

08002938 <RDMSensorBH170::GetValue()>:
 8002938:	b508      	push	{r3, lr}
 800293a:	3040      	adds	r0, #64	; 0x40
 800293c:	f000 fa7a 	bl	8002e34 <sensor::BH170::Get()>
 8002940:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002944:	bd08      	pop	{r3, pc}

08002946 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002946:	4770      	bx	lr

08002948 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002948:	b510      	push	{r4, lr}
 800294a:	4604      	mov	r4, r0
 800294c:	f005 fe89 	bl	8008662 <operator delete(void*)>
 8002950:	4620      	mov	r0, r4
 8002952:	bd10      	pop	{r4, pc}

08002954 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002954:	4770      	bx	lr

08002956 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002956:	b510      	push	{r4, lr}
 8002958:	4604      	mov	r4, r0
 800295a:	f005 fe82 	bl	8008662 <operator delete(void*)>
 800295e:	4620      	mov	r0, r4
 8002960:	bd10      	pop	{r4, pc}

08002962 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002962:	4770      	bx	lr

08002964 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002964:	b510      	push	{r4, lr}
 8002966:	4604      	mov	r4, r0
 8002968:	f005 fe7b 	bl	8008662 <operator delete(void*)>
 800296c:	4620      	mov	r0, r4
 800296e:	bd10      	pop	{r4, pc}

08002970 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002970:	4770      	bx	lr

08002972 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002972:	b510      	push	{r4, lr}
 8002974:	4604      	mov	r4, r0
 8002976:	f005 fe74 	bl	8008662 <operator delete(void*)>
 800297a:	4620      	mov	r0, r4
 800297c:	bd10      	pop	{r4, pc}

0800297e <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 800297e:	4770      	bx	lr

08002980 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002980:	b510      	push	{r4, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	f005 fe6d 	bl	8008662 <operator delete(void*)>
 8002988:	4620      	mov	r0, r4
 800298a:	bd10      	pop	{r4, pc}

0800298c <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800298c:	4770      	bx	lr

0800298e <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800298e:	b510      	push	{r4, lr}
 8002990:	4604      	mov	r4, r0
 8002992:	f005 fe66 	bl	8008662 <operator delete(void*)>
 8002996:	4620      	mov	r0, r4
 8002998:	bd10      	pop	{r4, pc}

0800299a <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800299a:	4770      	bx	lr

0800299c <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800299c:	b510      	push	{r4, lr}
 800299e:	4604      	mov	r4, r0
 80029a0:	f005 fe5f 	bl	8008662 <operator delete(void*)>
 80029a4:	4620      	mov	r0, r4
 80029a6:	bd10      	pop	{r4, pc}

080029a8 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 80029a8:	4770      	bx	lr

080029aa <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
 80029ae:	f005 fe58 	bl	8008662 <operator delete(void*)>
 80029b2:	4620      	mov	r0, r4
 80029b4:	bd10      	pop	{r4, pc}

080029b6 <RDMSensorBH170::~RDMSensorBH170()>:
 80029b6:	4770      	bx	lr

080029b8 <RDMSensorBH170::~RDMSensorBH170()>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4604      	mov	r4, r0
 80029bc:	f005 fe51 	bl	8008662 <operator delete(void*)>
 80029c0:	4620      	mov	r0, r4
 80029c2:	bd10      	pop	{r4, pc}

080029c4 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 80029c4:	6001      	str	r1, [r0, #0]
 80029c6:	4770      	bx	lr

080029c8 <RDMSensorsParams::Load()>:
 80029c8:	b508      	push	{r3, lr}
 80029ca:	2300      	movs	r3, #0
 80029cc:	4601      	mov	r1, r0
 80029ce:	6043      	str	r3, [r0, #4]
 80029d0:	6800      	ldr	r0, [r0, #0]
 80029d2:	b120      	cbz	r0, 80029de <RDMSensorsParams::Load()+0x16>
 80029d4:	6803      	ldr	r3, [r0, #0]
 80029d6:	3104      	adds	r1, #4
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4798      	blx	r3
 80029dc:	2001      	movs	r0, #1
 80029de:	bd08      	pop	{r3, pc}

080029e0 <RDMSensorsParams::Dump()>:
 80029e0:	4770      	bx	lr
	...

080029e4 <RDMSensorsParams::Add(RDMSensor*)>:
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	680b      	ldr	r3, [r1, #0]
 80029e8:	4608      	mov	r0, r1
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	460c      	mov	r4, r1
 80029ee:	4798      	blx	r3
 80029f0:	4605      	mov	r5, r0
 80029f2:	b130      	cbz	r0, 8002a02 <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 80029f6:	4621      	mov	r1, r4
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f7ff ff27 	bl	800284c <RDMSensors::Add(RDMSensor*)>
 80029fe:	4628      	mov	r0, r5
 8002a00:	bd38      	pop	{r3, r4, r5, pc}
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	4620      	mov	r0, r4
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4798      	blx	r3
 8002a0a:	e7f8      	b.n	80029fe <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 8002a0c:	200001fc 	strdcs	r0, [r0], -ip

08002a10 <RDMSensorsParams::Set()>:
 8002a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	4605      	mov	r5, r0
 8002a16:	4607      	mov	r7, r0
 8002a18:	f04f 0800 	mov.w	r8, #0
 8002a1c:	f8df b278 	ldr.w	fp, [pc, #632]	; 8002c98 <RDMSensorsParams::Set()+0x288>
 8002a20:	686b      	ldr	r3, [r5, #4]
 8002a22:	4543      	cmp	r3, r8
 8002a24:	d801      	bhi.n	8002a2a <RDMSensorsParams::Set()+0x1a>
 8002a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2a:	4b9c      	ldr	r3, [pc, #624]	; (8002c9c <RDMSensorsParams::Set()+0x28c>)
 8002a2c:	7a7e      	ldrb	r6, [r7, #9]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	791c      	ldrb	r4, [r3, #4]
 8002a32:	7a3b      	ldrb	r3, [r7, #8]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d827      	bhi.n	8002a88 <RDMSensorsParams::Set()+0x78>
 8002a38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a3c:	002a0005 	eoreq	r0, sl, r5
 8002a40:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8002a44:	204c00f0 	strdcs	r0, [ip], #-0
 8002a48:	f005 fe0f 	bl	800866a <operator new(unsigned int)>
 8002a4c:	4681      	mov	r9, r0
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f000 f958 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002a54:	4631      	mov	r1, r6
 8002a56:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002a5a:	f000 f9b7 	bl	8002dcc <sensor::BH170::BH170(unsigned char)>
 8002a5e:	4b90      	ldr	r3, [pc, #576]	; (8002ca0 <RDMSensorsParams::Set()+0x290>)
 8002a60:	241a      	movs	r4, #26
 8002a62:	f8c9 3000 	str.w	r3, [r9]
 8002a66:	2318      	movs	r3, #24
 8002a68:	f889 3007 	strb.w	r3, [r9, #7]
 8002a6c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a70:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8002a74:	498b      	ldr	r1, [pc, #556]	; (8002ca4 <RDMSensorsParams::Set()+0x294>)
 8002a76:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002a7a:	4648      	mov	r0, r9
 8002a7c:	f000 f954 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002a80:	4649      	mov	r1, r9
 8002a82:	4628      	mov	r0, r5
 8002a84:	f7ff ffae 	bl	80029e4 <RDMSensorsParams::Add(RDMSensor*)>
 8002a88:	f108 0801 	add.w	r8, r8, #1
 8002a8c:	3703      	adds	r7, #3
 8002a8e:	e7c7      	b.n	8002a20 <RDMSensorsParams::Set()+0x10>
 8002a90:	204c      	movs	r0, #76	; 0x4c
 8002a92:	f005 fdea 	bl	800866a <operator new(unsigned int)>
 8002a96:	4682      	mov	sl, r0
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f000 f933 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002aa4:	f000 f9e6 	bl	8002e74 <sensor::HTU21D::HTU21D(unsigned char)>
 8002aa8:	4a7f      	ldr	r2, [pc, #508]	; (8002ca8 <RDMSensorsParams::Set()+0x298>)
 8002aaa:	f04f 0900 	mov.w	r9, #0
 8002aae:	f8ca 2000 	str.w	r2, [sl]
 8002ab2:	221f      	movs	r2, #31
 8002ab4:	f88a 2007 	strb.w	r2, [sl, #7]
 8002ab8:	2264      	movs	r2, #100	; 0x64
 8002aba:	4650      	mov	r0, sl
 8002abc:	497b      	ldr	r1, [pc, #492]	; (8002cac <RDMSensorsParams::Set()+0x29c>)
 8002abe:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002ac2:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002ac6:	f000 f92f 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002aca:	4651      	mov	r1, sl
 8002acc:	4628      	mov	r0, r5
 8002ace:	f7ff ff89 	bl	80029e4 <RDMSensorsParams::Add(RDMSensor*)>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d0d8      	beq.n	8002a88 <RDMSensorsParams::Set()+0x78>
 8002ad6:	204c      	movs	r0, #76	; 0x4c
 8002ad8:	f005 fdc7 	bl	800866a <operator new(unsigned int)>
 8002adc:	4682      	mov	sl, r0
 8002ade:	1c61      	adds	r1, r4, #1
 8002ae0:	b2c9      	uxtb	r1, r1
 8002ae2:	f000 f90f 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002ae6:	4631      	mov	r1, r6
 8002ae8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002aec:	f000 f9c2 	bl	8002e74 <sensor::HTU21D::HTU21D(unsigned char)>
 8002af0:	4a6f      	ldr	r2, [pc, #444]	; (8002cb0 <RDMSensorsParams::Set()+0x2a0>)
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <RDMSensorsParams::Set()+0x2a4>)
 8002af4:	f8ca 2000 	str.w	r2, [sl]
 8002af8:	227d      	movs	r2, #125	; 0x7d
 8002afa:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002afe:	496e      	ldr	r1, [pc, #440]	; (8002cb8 <RDMSensorsParams::Set()+0x2a8>)
 8002b00:	f88a 9007 	strb.w	r9, [sl, #7]
 8002b04:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002b08:	4650      	mov	r0, sl
 8002b0a:	f000 f90d 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002b0e:	4651      	mov	r1, sl
 8002b10:	e7b7      	b.n	8002a82 <RDMSensorsParams::Set()+0x72>
 8002b12:	2060      	movs	r0, #96	; 0x60
 8002b14:	f005 fda9 	bl	800866a <operator new(unsigned int)>
 8002b18:	4682      	mov	sl, r0
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	f000 f8f2 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002b20:	4631      	mov	r1, r6
 8002b22:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002b26:	f000 faeb 	bl	8003100 <sensor::INA219::INA219(unsigned char)>
 8002b2a:	4a64      	ldr	r2, [pc, #400]	; (8002cbc <RDMSensorsParams::Set()+0x2ac>)
 8002b2c:	f04f 0902 	mov.w	r9, #2
 8002b30:	f8ca 2000 	str.w	r2, [sl]
 8002b34:	4a62      	ldr	r2, [pc, #392]	; (8002cc0 <RDMSensorsParams::Set()+0x2b0>)
 8002b36:	4650      	mov	r0, sl
 8002b38:	f8ca 2008 	str.w	r2, [sl, #8]
 8002b3c:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002b40:	f8ca 200c 	str.w	r2, [sl, #12]
 8002b44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b48:	495e      	ldr	r1, [pc, #376]	; (8002cc4 <RDMSensorsParams::Set()+0x2b4>)
 8002b4a:	f88a 9007 	strb.w	r9, [sl, #7]
 8002b4e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002b52:	f000 f8e9 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002b56:	4651      	mov	r1, sl
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f7ff ff43 	bl	80029e4 <RDMSensorsParams::Add(RDMSensor*)>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d092      	beq.n	8002a88 <RDMSensorsParams::Set()+0x78>
 8002b62:	2060      	movs	r0, #96	; 0x60
 8002b64:	f005 fd81 	bl	800866a <operator new(unsigned int)>
 8002b68:	4682      	mov	sl, r0
 8002b6a:	1c61      	adds	r1, r4, #1
 8002b6c:	b2c9      	uxtb	r1, r1
 8002b6e:	f000 f8c9 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002b72:	4631      	mov	r1, r6
 8002b74:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002b78:	f000 fac2 	bl	8003100 <sensor::INA219::INA219(unsigned char)>
 8002b7c:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <RDMSensorsParams::Set()+0x2b8>)
 8002b82:	4650      	mov	r0, sl
 8002b84:	f8ca 2000 	str.w	r2, [sl]
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <RDMSensorsParams::Set()+0x2bc>)
 8002b8a:	f88a 9007 	strb.w	r9, [sl, #7]
 8002b8e:	f8ca 2008 	str.w	r2, [sl, #8]
 8002b92:	440a      	add	r2, r1
 8002b94:	f8ca 200c 	str.w	r2, [sl, #12]
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	494d      	ldr	r1, [pc, #308]	; (8002cd0 <RDMSensorsParams::Set()+0x2c0>)
 8002b9c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002ba0:	f000 f8c2 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f7ff ff1c 	bl	80029e4 <RDMSensorsParams::Add(RDMSensor*)>
 8002bac:	2060      	movs	r0, #96	; 0x60
 8002bae:	f005 fd5c 	bl	800866a <operator new(unsigned int)>
 8002bb2:	4682      	mov	sl, r0
 8002bb4:	eb04 0109 	add.w	r1, r4, r9
 8002bb8:	b2c9      	uxtb	r1, r1
 8002bba:	f000 f8a3 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002bbe:	4631      	mov	r1, r6
 8002bc0:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002bc4:	f000 fa9c 	bl	8003100 <sensor::INA219::INA219(unsigned char)>
 8002bc8:	4a42      	ldr	r2, [pc, #264]	; (8002cd4 <RDMSensorsParams::Set()+0x2c4>)
 8002bca:	4843      	ldr	r0, [pc, #268]	; (8002cd8 <RDMSensorsParams::Set()+0x2c8>)
 8002bcc:	f8ca 2000 	str.w	r2, [sl]
 8002bd0:	4a42      	ldr	r2, [pc, #264]	; (8002cdc <RDMSensorsParams::Set()+0x2cc>)
 8002bd2:	4943      	ldr	r1, [pc, #268]	; (8002ce0 <RDMSensorsParams::Set()+0x2d0>)
 8002bd4:	e9ca 0202 	strd	r0, r2, [sl, #8]
 8002bd8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002bdc:	f88a 9007 	strb.w	r9, [sl, #7]
 8002be0:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002be4:	e790      	b.n	8002b08 <RDMSensorsParams::Set()+0xf8>
 8002be6:	204c      	movs	r0, #76	; 0x4c
 8002be8:	f005 fd3f 	bl	800866a <operator new(unsigned int)>
 8002bec:	4681      	mov	r9, r0
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f000 f888 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002bfa:	f000 fb13 	bl	8003224 <sensor::MCP9808::MCP9808(unsigned char)>
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <RDMSensorsParams::Set()+0x2d4>)
 8002c00:	4a39      	ldr	r2, [pc, #228]	; (8002ce8 <RDMSensorsParams::Set()+0x2d8>)
 8002c02:	f8c9 3000 	str.w	r3, [r9]
 8002c06:	2300      	movs	r3, #0
 8002c08:	f889 3007 	strb.w	r3, [r9, #7]
 8002c0c:	4b37      	ldr	r3, [pc, #220]	; (8002cec <RDMSensorsParams::Set()+0x2dc>)
 8002c0e:	4938      	ldr	r1, [pc, #224]	; (8002cf0 <RDMSensorsParams::Set()+0x2e0>)
 8002c10:	e9c9 2302 	strd	r2, r3, [r9, #8]
 8002c14:	2328      	movs	r3, #40	; 0x28
 8002c16:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002c1a:	e72e      	b.n	8002a7a <RDMSensorsParams::Set()+0x6a>
 8002c1c:	204c      	movs	r0, #76	; 0x4c
 8002c1e:	f005 fd24 	bl	800866a <operator new(unsigned int)>
 8002c22:	4682      	mov	sl, r0
 8002c24:	4621      	mov	r1, r4
 8002c26:	f000 f86d 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002c2a:	4631      	mov	r1, r6
 8002c2c:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002c30:	f000 fb4e 	bl	80032d0 <sensor::SI7021::SI7021(unsigned char)>
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <RDMSensorsParams::Set()+0x2e4>)
 8002c36:	f04f 0900 	mov.w	r9, #0
 8002c3a:	f8ca 2000 	str.w	r2, [sl]
 8002c3e:	221f      	movs	r2, #31
 8002c40:	f88a 2007 	strb.w	r2, [sl, #7]
 8002c44:	2264      	movs	r2, #100	; 0x64
 8002c46:	4650      	mov	r0, sl
 8002c48:	492b      	ldr	r1, [pc, #172]	; (8002cf8 <RDMSensorsParams::Set()+0x2e8>)
 8002c4a:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002c4e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002c52:	f000 f869 	bl	8002d28 <RDMSensor::SetDescription(char const*)>
 8002c56:	4651      	mov	r1, sl
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff fec3 	bl	80029e4 <RDMSensorsParams::Add(RDMSensor*)>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f43f af12 	beq.w	8002a88 <RDMSensorsParams::Set()+0x78>
 8002c64:	204c      	movs	r0, #76	; 0x4c
 8002c66:	f005 fd00 	bl	800866a <operator new(unsigned int)>
 8002c6a:	4682      	mov	sl, r0
 8002c6c:	1c61      	adds	r1, r4, #1
 8002c6e:	b2c9      	uxtb	r1, r1
 8002c70:	f000 f848 	bl	8002d04 <RDMSensor::RDMSensor(unsigned char)>
 8002c74:	4631      	mov	r1, r6
 8002c76:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002c7a:	f000 fb29 	bl	80032d0 <sensor::SI7021::SI7021(unsigned char)>
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <RDMSensorsParams::Set()+0x2ec>)
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <RDMSensorsParams::Set()+0x2a4>)
 8002c82:	f8ca 2000 	str.w	r2, [sl]
 8002c86:	227d      	movs	r2, #125	; 0x7d
 8002c88:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002c8c:	491c      	ldr	r1, [pc, #112]	; (8002d00 <RDMSensorsParams::Set()+0x2f0>)
 8002c8e:	f88a 9007 	strb.w	r9, [sl, #7]
 8002c92:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002c96:	e737      	b.n	8002b08 <RDMSensorsParams::Set()+0xf8>
 8002c98:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d
 8002c9c:	200001fc 	strdcs	r0, [r0], -ip
 8002ca0:	0800a32c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sp, pc}
 8002ca4:	0800a3fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sp, pc}
 8002ca8:	0800a35c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, pc}
 8002cac:	0800a41e 	stmdaeq	r0, {r1, r2, r3, r4, sl, sp, pc}
 8002cb0:	0800a374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sp, pc}
 8002cb4:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002cb8:	0800a40a 	stmdaeq	r0, {r1, r3, sl, sp, pc}
 8002cbc:	0800a38c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sp, pc}
 8002cc0:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002cc4:	0800a436 	stmdaeq	r0, {r1, r2, r4, r5, sl, sp, pc}
 8002cc8:	0800a3a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sp, pc}
 8002ccc:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002cd0:	0800a430 	stmdaeq	r0, {r4, r5, sl, sp, pc}
 8002cd4:	0800a3bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sp, pc}
 8002cd8:	83000305 	movwhi	r0, #773	; 0x305
 8002cdc:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002ce0:	0800a43e 	stmdaeq	r0, {r1, r2, r3, r4, r5, sl, sp, pc}
 8002ce4:	0800a344 	stmdaeq	r0, {r2, r6, r8, r9, sp, pc}
 8002ce8:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002cec:	00120064 	andseq	r0, r2, r4, rrx
 8002cf0:	0800a46c 	stmdaeq	r0, {r2, r3, r5, r6, sl, sp, pc}
 8002cf4:	0800a3d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sp, pc}
 8002cf8:	0800a45a 	stmdaeq	r0, {r1, r3, r4, r6, sl, sp, pc}
 8002cfc:	0800a3ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sp, pc}
 8002d00:	0800a446 	stmdaeq	r0, {r1, r2, r6, sl, sp, pc}

08002d04 <RDMSensor::RDMSensor(unsigned char)>:
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002d06:	7101      	strb	r1, [r0, #4]
 8002d08:	6002      	str	r2, [r0, #0]
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002d10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002d14:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d1a:	7181      	strb	r1, [r0, #6]
 8002d1c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002d20:	8702      	strh	r2, [r0, #56]	; 0x38
 8002d22:	4770      	bx	lr
 8002d24:	0800a488 	stmdaeq	r0, {r3, r7, sl, sp, pc}

08002d28 <RDMSensor::SetDescription(char const*)>:
 8002d28:	2300      	movs	r3, #0
 8002d2a:	b510      	push	{r4, lr}
 8002d2c:	f100 0411 	add.w	r4, r0, #17
 8002d30:	5cca      	ldrb	r2, [r1, r3]
 8002d32:	b122      	cbz	r2, 8002d3e <RDMSensor::SetDescription(char const*)+0x16>
 8002d34:	3301      	adds	r3, #1
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002d3c:	d1f8      	bne.n	8002d30 <RDMSensor::SetDescription(char const*)+0x8>
 8002d3e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <RDMSensor::GetValues()>:
 8002d44:	6803      	ldr	r3, [r0, #0]
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4798      	blx	r3
 8002d4e:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002d52:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002d54:	4283      	cmp	r3, r0
 8002d56:	bfa8      	it	ge
 8002d58:	4603      	movge	r3, r0
 8002d5a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002d5c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002d60:	4283      	cmp	r3, r0
 8002d62:	bfb8      	it	lt
 8002d64:	4603      	movlt	r3, r0
 8002d66:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002d6a:	8723      	strh	r3, [r4, #56]	; 0x38
 8002d6c:	bd10      	pop	{r4, pc}

08002d6e <RDMSensor::SetValues()>:
 8002d6e:	6803      	ldr	r3, [r0, #0]
 8002d70:	b510      	push	{r4, lr}
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4604      	mov	r4, r0
 8002d76:	4798      	blx	r3
 8002d78:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002d7a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002d7c:	8720      	strh	r0, [r4, #56]	; 0x38
 8002d7e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002d80:	bd10      	pop	{r4, pc}

08002d82 <RDMSensor::Record()>:
 8002d82:	6803      	ldr	r3, [r0, #0]
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4798      	blx	r3
 8002d8c:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002d90:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002d92:	4283      	cmp	r3, r0
 8002d94:	bfa8      	it	ge
 8002d96:	4603      	movge	r3, r0
 8002d98:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002d9a:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002d9e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002da0:	4283      	cmp	r3, r0
 8002da2:	bfb8      	it	lt
 8002da4:	4603      	movlt	r3, r0
 8002da6:	8723      	strh	r3, [r4, #56]	; 0x38
 8002da8:	bd10      	pop	{r4, pc}

08002daa <HAL_I2C::Write(char)>:
 8002daa:	b513      	push	{r0, r1, r4, lr}
 8002dac:	4604      	mov	r4, r0
 8002dae:	7800      	ldrb	r0, [r0, #0]
 8002db0:	f88d 1007 	strb.w	r1, [sp, #7]
 8002db4:	f006 fcb4 	bl	8009720 <gd32_i2c_set_address>
 8002db8:	6860      	ldr	r0, [r4, #4]
 8002dba:	f006 fca9 	bl	8009710 <gd32_i2c_set_baudrate>
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	f10d 0007 	add.w	r0, sp, #7
 8002dc4:	f006 fcb2 	bl	800972c <gd32_i2c_write>
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <sensor::BH170::BH170(unsigned char)>:
 8002dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dce:	1e0c      	subs	r4, r1, #0
 8002dd0:	bf08      	it	eq
 8002dd2:	2423      	moveq	r4, #35	; 0x23
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4f16      	ldr	r7, [pc, #88]	; (8002e30 <sensor::BH170::BH170(unsigned char)+0x64>)
 8002dd8:	7004      	strb	r4, [r0, #0]
 8002dda:	6047      	str	r7, [r0, #4]
 8002ddc:	7206      	strb	r6, [r0, #8]
 8002dde:	4605      	mov	r5, r0
 8002de0:	4620      	mov	r0, r4
 8002de2:	f006 fc9d 	bl	8009720 <gd32_i2c_set_address>
 8002de6:	4638      	mov	r0, r7
 8002de8:	f006 fc92 	bl	8009710 <gd32_i2c_set_baudrate>
 8002dec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002df0:	2b07      	cmp	r3, #7
 8002df2:	d902      	bls.n	8002dfa <sensor::BH170::BH170(unsigned char)+0x2e>
 8002df4:	3c50      	subs	r4, #80	; 0x50
 8002df6:	2c0f      	cmp	r4, #15
 8002df8:	d814      	bhi.n	8002e24 <sensor::BH170::BH170(unsigned char)+0x58>
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	f10d 0007 	add.w	r0, sp, #7
 8002e00:	f006 fcfa 	bl	80097f8 <gd32_i2c_read>
 8002e04:	fab0 f080 	clz	r0, r0
 8002e08:	0940      	lsrs	r0, r0, #5
 8002e0a:	7228      	strb	r0, [r5, #8]
 8002e0c:	b138      	cbz	r0, 8002e1e <sensor::BH170::BH170(unsigned char)+0x52>
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4628      	mov	r0, r5
 8002e12:	f7ff ffca 	bl	8002daa <HAL_I2C::Write(char)>
 8002e16:	2110      	movs	r1, #16
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f7ff ffc6 	bl	8002daa <HAL_I2C::Write(char)>
 8002e1e:	4628      	mov	r0, r5
 8002e20:	b003      	add	sp, #12
 8002e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e24:	4631      	mov	r1, r6
 8002e26:	4630      	mov	r0, r6
 8002e28:	f006 fc80 	bl	800972c <gd32_i2c_write>
 8002e2c:	e7ea      	b.n	8002e04 <sensor::BH170::BH170(unsigned char)+0x38>
 8002e2e:	bf00      	nop
 8002e30:	00061a80 	andeq	r1, r6, r0, lsl #21

08002e34 <sensor::BH170::Get()>:
 8002e34:	b513      	push	{r0, r1, r4, lr}
 8002e36:	2300      	movs	r3, #0
 8002e38:	4604      	mov	r4, r0
 8002e3a:	7800      	ldrb	r0, [r0, #0]
 8002e3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002e40:	f006 fc6e 	bl	8009720 <gd32_i2c_set_address>
 8002e44:	6860      	ldr	r0, [r4, #4]
 8002e46:	f006 fc63 	bl	8009710 <gd32_i2c_set_baudrate>
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	a801      	add	r0, sp, #4
 8002e4e:	f006 fcd3 	bl	80097f8 <gd32_i2c_read>
 8002e52:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002e56:	ba40      	rev16	r0, r0
 8002e58:	b280      	uxth	r0, r0
 8002e5a:	f7fd fa7f 	bl	800035c <__aeabi_ui2f>
 8002e5e:	4904      	ldr	r1, [pc, #16]	; (8002e70 <sensor::BH170::Get()+0x3c>)
 8002e60:	f7fe f80c 	bl	8000e7c <__aeabi_fdiv>
 8002e64:	f7fe f8a6 	bl	8000fb4 <__aeabi_f2uiz>
 8002e68:	b280      	uxth	r0, r0
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	bf00      	nop
 8002e70:	3f99999a 	svccc	0x0099999a

08002e74 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e76:	1e0c      	subs	r4, r1, #0
 8002e78:	bf08      	it	eq
 8002e7a:	2440      	moveq	r4, #64	; 0x40
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	4f11      	ldr	r7, [pc, #68]	; (8002ec4 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002e80:	7004      	strb	r4, [r0, #0]
 8002e82:	6047      	str	r7, [r0, #4]
 8002e84:	7206      	strb	r6, [r0, #8]
 8002e86:	4605      	mov	r5, r0
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f006 fc49 	bl	8009720 <gd32_i2c_set_address>
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f006 fc3e 	bl	8009710 <gd32_i2c_set_baudrate>
 8002e94:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	d902      	bls.n	8002ea2 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002e9c:	3c50      	subs	r4, #80	; 0x50
 8002e9e:	2c0f      	cmp	r4, #15
 8002ea0:	d80b      	bhi.n	8002eba <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	f10d 0007 	add.w	r0, sp, #7
 8002ea8:	f006 fca6 	bl	80097f8 <gd32_i2c_read>
 8002eac:	fab0 f380 	clz	r3, r0
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	722b      	strb	r3, [r5, #8]
 8002eb6:	b003      	add	sp, #12
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eba:	4631      	mov	r1, r6
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f006 fc35 	bl	800972c <gd32_i2c_write>
 8002ec2:	e7f3      	b.n	8002eac <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002ec4:	00061a80 	andeq	r1, r6, r0, lsl #21

08002ec8 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eca:	4604      	mov	r4, r0
 8002ecc:	7800      	ldrb	r0, [r0, #0]
 8002ece:	f88d 1004 	strb.w	r1, [sp, #4]
 8002ed2:	f006 fc25 	bl	8009720 <gd32_i2c_set_address>
 8002ed6:	6860      	ldr	r0, [r4, #4]
 8002ed8:	f006 fc1a 	bl	8009710 <gd32_i2c_set_baudrate>
 8002edc:	2101      	movs	r1, #1
 8002ede:	a801      	add	r0, sp, #4
 8002ee0:	f006 fc24 	bl	800972c <gd32_i2c_write>
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002ee6:	2508      	movs	r5, #8
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f88d 3006 	strb.w	r3, [sp, #6]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f242 7010 	movw	r0, #10000	; 0x2710
 8002efa:	f006 fed7 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8002efe:	7820      	ldrb	r0, [r4, #0]
 8002f00:	f006 fc0e 	bl	8009720 <gd32_i2c_set_address>
 8002f04:	6860      	ldr	r0, [r4, #4]
 8002f06:	f006 fc03 	bl	8009710 <gd32_i2c_set_baudrate>
 8002f0a:	2103      	movs	r1, #3
 8002f0c:	a801      	add	r0, sp, #4
 8002f0e:	f006 fc73 	bl	80097f8 <gd32_i2c_read>
 8002f12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d001      	beq.n	8002f22 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 8002f1e:	3d01      	subs	r5, #1
 8002f20:	d1e8      	bne.n	8002ef4 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002f22:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002f26:	ba40      	rev16	r0, r0
 8002f28:	f020 0003 	bic.w	r0, r0, #3
 8002f2c:	b280      	uxth	r0, r0
 8002f2e:	b003      	add	sp, #12
 8002f30:	bd30      	pop	{r4, r5, pc}
 8002f32:	bf00      	nop
 8002f34:	0800a0ac 	stmdaeq	r0, {r2, r3, r5, r7, sp, pc}

08002f38 <sensor::HTU21D::GetTemperature()>:
 8002f38:	b508      	push	{r3, lr}
 8002f3a:	21f3      	movs	r1, #243	; 0xf3
 8002f3c:	f7ff ffc4 	bl	8002ec8 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002f40:	f7fd fa0c 	bl	800035c <__aeabi_ui2f>
 8002f44:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002f48:	f7fd fee4 	bl	8000d14 <__aeabi_fmul>
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <sensor::HTU21D::GetTemperature()+0x24>)
 8002f4e:	f7fd fee1 	bl	8000d14 <__aeabi_fmul>
 8002f52:	4903      	ldr	r1, [pc, #12]	; (8002f60 <sensor::HTU21D::GetTemperature()+0x28>)
 8002f54:	f7fd f950 	bl	80001f8 <__aeabi_fsub>
 8002f58:	bd08      	pop	{r3, pc}
 8002f5a:	bf00      	nop
 8002f5c:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002f60:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08002f64 <sensor::HTU21D::GetHumidity()>:
 8002f64:	b508      	push	{r3, lr}
 8002f66:	21f5      	movs	r1, #245	; 0xf5
 8002f68:	f7ff ffae 	bl	8002ec8 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002f6c:	f7fd f9f6 	bl	800035c <__aeabi_ui2f>
 8002f70:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002f74:	f7fd fece 	bl	8000d14 <__aeabi_fmul>
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <sensor::HTU21D::GetHumidity()+0x24>)
 8002f7a:	f7fd fecb 	bl	8000d14 <__aeabi_fmul>
 8002f7e:	4903      	ldr	r1, [pc, #12]	; (8002f8c <sensor::HTU21D::GetHumidity()+0x28>)
 8002f80:	f7fd f93a 	bl	80001f8 <__aeabi_fsub>
 8002f84:	bd08      	pop	{r3, pc}
 8002f86:	bf00      	nop
 8002f88:	42fa0000 	rscsmi	r0, sl, #0
 8002f8c:	40c00000 	sbcmi	r0, r0, r0

08002f90 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002f90:	b513      	push	{r0, r1, r4, lr}
 8002f92:	4604      	mov	r4, r0
 8002f94:	0a13      	lsrs	r3, r2, #8
 8002f96:	7800      	ldrb	r0, [r0, #0]
 8002f98:	f88d 1004 	strb.w	r1, [sp, #4]
 8002f9c:	f88d 3005 	strb.w	r3, [sp, #5]
 8002fa0:	f88d 2006 	strb.w	r2, [sp, #6]
 8002fa4:	f006 fbbc 	bl	8009720 <gd32_i2c_set_address>
 8002fa8:	6860      	ldr	r0, [r4, #4]
 8002faa:	f006 fbb1 	bl	8009710 <gd32_i2c_set_baudrate>
 8002fae:	2103      	movs	r1, #3
 8002fb0:	a801      	add	r0, sp, #4
 8002fb2:	f006 fbbb 	bl	800972c <gd32_i2c_write>
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd10      	pop	{r4, pc}

08002fba <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8002fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	4615      	mov	r5, r2
 8002fc2:	7800      	ldrb	r0, [r0, #0]
 8002fc4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002fc8:	f88d 1004 	strb.w	r1, [sp, #4]
 8002fcc:	f006 fba8 	bl	8009720 <gd32_i2c_set_address>
 8002fd0:	6860      	ldr	r0, [r4, #4]
 8002fd2:	f006 fb9d 	bl	8009710 <gd32_i2c_set_baudrate>
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	a801      	add	r0, sp, #4
 8002fda:	f006 fba7 	bl	800972c <gd32_i2c_write>
 8002fde:	4631      	mov	r1, r6
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f006 fe63 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	a801      	add	r0, sp, #4
 8002fea:	f006 fc05 	bl	80097f8 <gd32_i2c_read>
 8002fee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ff2:	ba40      	rev16	r0, r0
 8002ff4:	b280      	uxth	r0, r0
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ffc <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002ffc:	880b      	ldrh	r3, [r1, #0]
 8002ffe:	b510      	push	{r4, lr}
 8003000:	b1d3      	cbz	r3, 8003038 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	d102      	bne.n	800300e <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8003008:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800300c:	6182      	str	r2, [r0, #24]
 800300e:	884a      	ldrh	r2, [r1, #2]
 8003010:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003014:	d019      	beq.n	800304a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8003016:	d812      	bhi.n	800303e <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8003018:	b1da      	cbz	r2, 8003052 <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 800301a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800301e:	d016      	beq.n	800304e <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8003020:	431a      	orrs	r2, r3
 8003022:	888b      	ldrh	r3, [r1, #4]
 8003024:	431a      	orrs	r2, r3
 8003026:	88cb      	ldrh	r3, [r1, #6]
 8003028:	431a      	orrs	r2, r3
 800302a:	890b      	ldrh	r3, [r1, #8]
 800302c:	2100      	movs	r1, #0
 800302e:	431a      	orrs	r2, r3
 8003030:	b292      	uxth	r2, r2
 8003032:	f7ff ffad 	bl	8002f90 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8003036:	bd10      	pop	{r4, pc}
 8003038:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800303c:	e7e6      	b.n	800300c <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 800303e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8003042:	d1ed      	bne.n	8003020 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8003044:	4c04      	ldr	r4, [pc, #16]	; (8003058 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8003046:	6144      	str	r4, [r0, #20]
 8003048:	e7ea      	b.n	8003020 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 800304a:	4c04      	ldr	r4, [pc, #16]	; (800305c <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 800304c:	e7fb      	b.n	8003046 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 800304e:	4c04      	ldr	r4, [pc, #16]	; (8003060 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8003050:	e7f9      	b.n	8003046 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8003052:	4c04      	ldr	r4, [pc, #16]	; (8003064 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8003054:	e7f7      	b.n	8003046 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8003056:	bf00      	nop
 8003058:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 800305c:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8003060:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8003064:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08003068 <sensor::INA219::Calibrate(float, float)>:
 8003068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800306c:	61c1      	str	r1, [r0, #28]
 800306e:	4605      	mov	r5, r0
 8003070:	460e      	mov	r6, r1
 8003072:	4610      	mov	r0, r2
 8003074:	491d      	ldr	r1, [pc, #116]	; (80030ec <sensor::INA219::Calibrate(float, float)+0x84>)
 8003076:	f7fd ff01 	bl	8000e7c <__aeabi_fdiv>
 800307a:	491d      	ldr	r1, [pc, #116]	; (80030f0 <sensor::INA219::Calibrate(float, float)+0x88>)
 800307c:	f7fd fe4a 	bl	8000d14 <__aeabi_fmul>
 8003080:	f7fd ff98 	bl	8000fb4 <__aeabi_f2uiz>
 8003084:	b280      	uxth	r0, r0
 8003086:	f7fd f969 	bl	800035c <__aeabi_ui2f>
 800308a:	4919      	ldr	r1, [pc, #100]	; (80030f0 <sensor::INA219::Calibrate(float, float)+0x88>)
 800308c:	f7fd fef6 	bl	8000e7c <__aeabi_fdiv>
 8003090:	4918      	ldr	r1, [pc, #96]	; (80030f4 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8003092:	f7fd fef3 	bl	8000e7c <__aeabi_fdiv>
 8003096:	4680      	mov	r8, r0
 8003098:	f7fd fa2e 	bl	80004f8 <__aeabi_f2iz>
 800309c:	4607      	mov	r7, r0
 800309e:	f7fd f961 	bl	8000364 <__aeabi_i2f>
 80030a2:	4604      	mov	r4, r0
 80030a4:	4601      	mov	r1, r0
 80030a6:	4640      	mov	r0, r8
 80030a8:	f7fd f9f4 	bl	8000494 <__aeabi_fcmpeq>
 80030ac:	b918      	cbnz	r0, 80030b6 <sensor::INA219::Calibrate(float, float)+0x4e>
 80030ae:	1c78      	adds	r0, r7, #1
 80030b0:	f7fd f958 	bl	8000364 <__aeabi_i2f>
 80030b4:	4604      	mov	r4, r0
 80030b6:	4620      	mov	r0, r4
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <sensor::INA219::Calibrate(float, float)+0x8c>)
 80030ba:	f7fd fe2b 	bl	8000d14 <__aeabi_fmul>
 80030be:	490e      	ldr	r1, [pc, #56]	; (80030f8 <sensor::INA219::Calibrate(float, float)+0x90>)
 80030c0:	60e8      	str	r0, [r5, #12]
 80030c2:	4604      	mov	r4, r0
 80030c4:	f7fd fe26 	bl	8000d14 <__aeabi_fmul>
 80030c8:	4631      	mov	r1, r6
 80030ca:	6128      	str	r0, [r5, #16]
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7fd fe21 	bl	8000d14 <__aeabi_fmul>
 80030d2:	4601      	mov	r1, r0
 80030d4:	4809      	ldr	r0, [pc, #36]	; (80030fc <sensor::INA219::Calibrate(float, float)+0x94>)
 80030d6:	f7fd fed1 	bl	8000e7c <__aeabi_fdiv>
 80030da:	f7fd ff6b 	bl	8000fb4 <__aeabi_f2uiz>
 80030de:	2105      	movs	r1, #5
 80030e0:	b282      	uxth	r2, r0
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7ff ff54 	bl	8002f90 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80030e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ec:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 80030f0:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 80030f4:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 80030f8:	41a00000 	movmi	r0, r0
 80030fc:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08003100 <sensor::INA219::INA219(unsigned char)>:
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003102:	1e0c      	subs	r4, r1, #0
 8003104:	bf08      	it	eq
 8003106:	2440      	moveq	r4, #64	; 0x40
 8003108:	2600      	movs	r6, #0
 800310a:	4f1a      	ldr	r7, [pc, #104]	; (8003174 <sensor::INA219::INA219(unsigned char)+0x74>)
 800310c:	b085      	sub	sp, #20
 800310e:	7004      	strb	r4, [r0, #0]
 8003110:	6047      	str	r7, [r0, #4]
 8003112:	7206      	strb	r6, [r0, #8]
 8003114:	4605      	mov	r5, r0
 8003116:	4620      	mov	r0, r4
 8003118:	f006 fb02 	bl	8009720 <gd32_i2c_set_address>
 800311c:	4638      	mov	r0, r7
 800311e:	f006 faf7 	bl	8009710 <gd32_i2c_set_baudrate>
 8003122:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003126:	2b07      	cmp	r3, #7
 8003128:	d902      	bls.n	8003130 <sensor::INA219::INA219(unsigned char)+0x30>
 800312a:	3c50      	subs	r4, #80	; 0x50
 800312c:	2c0f      	cmp	r4, #15
 800312e:	d81c      	bhi.n	800316a <sensor::INA219::INA219(unsigned char)+0x6a>
 8003130:	2101      	movs	r1, #1
 8003132:	a801      	add	r0, sp, #4
 8003134:	f006 fb60 	bl	80097f8 <gd32_i2c_read>
 8003138:	fab0 f080 	clz	r0, r0
 800313c:	0940      	lsrs	r0, r0, #5
 800313e:	7228      	strb	r0, [r5, #8]
 8003140:	b180      	cbz	r0, 8003164 <sensor::INA219::INA219(unsigned char)+0x64>
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <sensor::INA219::INA219(unsigned char)+0x78>)
 8003144:	ab01      	add	r3, sp, #4
 8003146:	6810      	ldr	r0, [r2, #0]
 8003148:	6851      	ldr	r1, [r2, #4]
 800314a:	8912      	ldrh	r2, [r2, #8]
 800314c:	c303      	stmia	r3!, {r0, r1}
 800314e:	4628      	mov	r0, r5
 8003150:	801a      	strh	r2, [r3, #0]
 8003152:	a901      	add	r1, sp, #4
 8003154:	f7ff ff52 	bl	8002ffc <sensor::INA219::Configure(sensor::ina219::Config&)>
 8003158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800315c:	4628      	mov	r0, r5
 800315e:	4907      	ldr	r1, [pc, #28]	; (800317c <sensor::INA219::INA219(unsigned char)+0x7c>)
 8003160:	f7ff ff82 	bl	8003068 <sensor::INA219::Calibrate(float, float)>
 8003164:	4628      	mov	r0, r5
 8003166:	b005      	add	sp, #20
 8003168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316a:	4631      	mov	r1, r6
 800316c:	4630      	mov	r0, r6
 800316e:	f006 fadd 	bl	800972c <gd32_i2c_write>
 8003172:	e7e1      	b.n	8003138 <sensor::INA219::INA219(unsigned char)+0x38>
 8003174:	00061a80 	andeq	r1, r6, r0, lsl #21
 8003178:	0800a0b0 	stmdaeq	r0, {r4, r5, r7, sp, pc}
 800317c:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08003180 <sensor::INA219::GetShuntCurrent()>:
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003188:	2104      	movs	r1, #4
 800318a:	f7ff ff16 	bl	8002fba <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 800318e:	f7fd f8e9 	bl	8000364 <__aeabi_i2f>
 8003192:	68e1      	ldr	r1, [r4, #12]
 8003194:	f7fd fdbe 	bl	8000d14 <__aeabi_fmul>
 8003198:	bd10      	pop	{r4, pc}

0800319a <sensor::INA219::GetBusVoltageRaw()>:
 800319a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800319e:	2102      	movs	r1, #2
 80031a0:	b508      	push	{r3, lr}
 80031a2:	f7ff ff0a 	bl	8002fba <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80031a6:	f340 004f 	sbfx	r0, r0, #1, #16
 80031aa:	f020 0003 	bic.w	r0, r0, #3
 80031ae:	bd08      	pop	{r3, pc}

080031b0 <sensor::INA219::GetBusVoltage()>:
 80031b0:	b508      	push	{r3, lr}
 80031b2:	f7ff fff2 	bl	800319a <sensor::INA219::GetBusVoltageRaw()>
 80031b6:	f7fd f8d5 	bl	8000364 <__aeabi_i2f>
 80031ba:	4902      	ldr	r1, [pc, #8]	; (80031c4 <sensor::INA219::GetBusVoltage()+0x14>)
 80031bc:	f7fd fdaa 	bl	8000d14 <__aeabi_fmul>
 80031c0:	bd08      	pop	{r3, pc}
 80031c2:	bf00      	nop
 80031c4:	3a83126f 	bcc	60c7b88 <__heap_size+0x60c6b88>

080031c8 <sensor::INA219::GetBusPower()>:
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
 80031cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031d0:	2103      	movs	r1, #3
 80031d2:	f7ff fef2 	bl	8002fba <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 80031d6:	f7fd f8c5 	bl	8000364 <__aeabi_i2f>
 80031da:	6921      	ldr	r1, [r4, #16]
 80031dc:	f7fd fd9a 	bl	8000d14 <__aeabi_fmul>
 80031e0:	bd10      	pop	{r4, pc}

080031e2 <HAL_I2C::ReadRegister16(unsigned char)>:
 80031e2:	b513      	push	{r0, r1, r4, lr}
 80031e4:	4604      	mov	r4, r0
 80031e6:	7800      	ldrb	r0, [r0, #0]
 80031e8:	f88d 1000 	strb.w	r1, [sp]
 80031ec:	f006 fa98 	bl	8009720 <gd32_i2c_set_address>
 80031f0:	6860      	ldr	r0, [r4, #4]
 80031f2:	f006 fa8d 	bl	8009710 <gd32_i2c_set_baudrate>
 80031f6:	2101      	movs	r1, #1
 80031f8:	4668      	mov	r0, sp
 80031fa:	f006 fa97 	bl	800972c <gd32_i2c_write>
 80031fe:	2300      	movs	r3, #0
 8003200:	7820      	ldrb	r0, [r4, #0]
 8003202:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003206:	f006 fa8b 	bl	8009720 <gd32_i2c_set_address>
 800320a:	6860      	ldr	r0, [r4, #4]
 800320c:	f006 fa80 	bl	8009710 <gd32_i2c_set_baudrate>
 8003210:	2102      	movs	r1, #2
 8003212:	a801      	add	r0, sp, #4
 8003214:	f006 faf0 	bl	80097f8 <gd32_i2c_read>
 8003218:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800321c:	ba40      	rev16	r0, r0
 800321e:	b280      	uxth	r0, r0
 8003220:	b002      	add	sp, #8
 8003222:	bd10      	pop	{r4, pc}

08003224 <sensor::MCP9808::MCP9808(unsigned char)>:
 8003224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003226:	1e0d      	subs	r5, r1, #0
 8003228:	bf08      	it	eq
 800322a:	2518      	moveq	r5, #24
 800322c:	2600      	movs	r6, #0
 800322e:	4f1b      	ldr	r7, [pc, #108]	; (800329c <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 8003230:	7005      	strb	r5, [r0, #0]
 8003232:	6047      	str	r7, [r0, #4]
 8003234:	7206      	strb	r6, [r0, #8]
 8003236:	4604      	mov	r4, r0
 8003238:	4628      	mov	r0, r5
 800323a:	f006 fa71 	bl	8009720 <gd32_i2c_set_address>
 800323e:	4638      	mov	r0, r7
 8003240:	f006 fa66 	bl	8009710 <gd32_i2c_set_baudrate>
 8003244:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003248:	2b07      	cmp	r3, #7
 800324a:	d902      	bls.n	8003252 <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 800324c:	3d50      	subs	r5, #80	; 0x50
 800324e:	2d0f      	cmp	r5, #15
 8003250:	d81f      	bhi.n	8003292 <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 8003252:	2101      	movs	r1, #1
 8003254:	f10d 0007 	add.w	r0, sp, #7
 8003258:	f006 face 	bl	80097f8 <gd32_i2c_read>
 800325c:	fab0 f080 	clz	r0, r0
 8003260:	0940      	lsrs	r0, r0, #5
 8003262:	7220      	strb	r0, [r4, #8]
 8003264:	b190      	cbz	r0, 800328c <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003266:	2106      	movs	r1, #6
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff ffba 	bl	80031e2 <HAL_I2C::ReadRegister16(unsigned char)>
 800326e:	2854      	cmp	r0, #84	; 0x54
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	7223      	strb	r3, [r4, #8]
 8003278:	d108      	bne.n	800328c <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800327a:	2107      	movs	r1, #7
 800327c:	4620      	mov	r0, r4
 800327e:	f7ff ffb0 	bl	80031e2 <HAL_I2C::ReadRegister16(unsigned char)>
 8003282:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8003286:	4258      	negs	r0, r3
 8003288:	4158      	adcs	r0, r3
 800328a:	7220      	strb	r0, [r4, #8]
 800328c:	4620      	mov	r0, r4
 800328e:	b003      	add	sp, #12
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003292:	4631      	mov	r1, r6
 8003294:	4630      	mov	r0, r6
 8003296:	f006 fa49 	bl	800972c <gd32_i2c_write>
 800329a:	e7df      	b.n	800325c <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 800329c:	00061a80 	andeq	r1, r6, r0, lsl #21

080032a0 <sensor::MCP9808::Get()>:
 80032a0:	b510      	push	{r4, lr}
 80032a2:	2105      	movs	r1, #5
 80032a4:	f7ff ff9d 	bl	80031e2 <HAL_I2C::ReadRegister16(unsigned char)>
 80032a8:	4604      	mov	r4, r0
 80032aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80032ae:	f7fd f859 	bl	8000364 <__aeabi_i2f>
 80032b2:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80032b6:	f7fd fd2d 	bl	8000d14 <__aeabi_fmul>
 80032ba:	04e2      	lsls	r2, r4, #19
 80032bc:	4603      	mov	r3, r0
 80032be:	d504      	bpl.n	80032ca <sensor::MCP9808::Get()+0x2a>
 80032c0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80032c4:	f7fc ff98 	bl	80001f8 <__aeabi_fsub>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	bd10      	pop	{r4, pc}
	...

080032d0 <sensor::SI7021::SI7021(unsigned char)>:
 80032d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d2:	1e0c      	subs	r4, r1, #0
 80032d4:	bf08      	it	eq
 80032d6:	2440      	moveq	r4, #64	; 0x40
 80032d8:	2600      	movs	r6, #0
 80032da:	4f11      	ldr	r7, [pc, #68]	; (8003320 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80032dc:	7004      	strb	r4, [r0, #0]
 80032de:	6047      	str	r7, [r0, #4]
 80032e0:	7206      	strb	r6, [r0, #8]
 80032e2:	4605      	mov	r5, r0
 80032e4:	4620      	mov	r0, r4
 80032e6:	f006 fa1b 	bl	8009720 <gd32_i2c_set_address>
 80032ea:	4638      	mov	r0, r7
 80032ec:	f006 fa10 	bl	8009710 <gd32_i2c_set_baudrate>
 80032f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	d902      	bls.n	80032fe <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80032f8:	3c50      	subs	r4, #80	; 0x50
 80032fa:	2c0f      	cmp	r4, #15
 80032fc:	d80b      	bhi.n	8003316 <sensor::SI7021::SI7021(unsigned char)+0x46>
 80032fe:	2101      	movs	r1, #1
 8003300:	f10d 0007 	add.w	r0, sp, #7
 8003304:	f006 fa78 	bl	80097f8 <gd32_i2c_read>
 8003308:	fab0 f380 	clz	r3, r0
 800330c:	4628      	mov	r0, r5
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	722b      	strb	r3, [r5, #8]
 8003312:	b003      	add	sp, #12
 8003314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003316:	4631      	mov	r1, r6
 8003318:	4630      	mov	r0, r6
 800331a:	f006 fa07 	bl	800972c <gd32_i2c_write>
 800331e:	e7f3      	b.n	8003308 <sensor::SI7021::SI7021(unsigned char)+0x38>
 8003320:	00061a80 	andeq	r1, r6, r0, lsl #21

08003324 <sensor::SI7021::ReadRaw(unsigned char)>:
 8003324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003326:	4604      	mov	r4, r0
 8003328:	7800      	ldrb	r0, [r0, #0]
 800332a:	f88d 1004 	strb.w	r1, [sp, #4]
 800332e:	f006 f9f7 	bl	8009720 <gd32_i2c_set_address>
 8003332:	6860      	ldr	r0, [r4, #4]
 8003334:	f006 f9ec 	bl	8009710 <gd32_i2c_set_baudrate>
 8003338:	2101      	movs	r1, #1
 800333a:	a801      	add	r0, sp, #4
 800333c:	f006 f9f6 	bl	800972c <gd32_i2c_write>
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 8003342:	2508      	movs	r5, #8
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	f8ad 3004 	strh.w	r3, [sp, #4]
 800334a:	2300      	movs	r3, #0
 800334c:	f88d 3006 	strb.w	r3, [sp, #6]
 8003350:	2100      	movs	r1, #0
 8003352:	f242 7010 	movw	r0, #10000	; 0x2710
 8003356:	f006 fca9 	bl	8009cac <udelay(unsigned int, unsigned int)>
 800335a:	7820      	ldrb	r0, [r4, #0]
 800335c:	f006 f9e0 	bl	8009720 <gd32_i2c_set_address>
 8003360:	6860      	ldr	r0, [r4, #4]
 8003362:	f006 f9d5 	bl	8009710 <gd32_i2c_set_baudrate>
 8003366:	2103      	movs	r1, #3
 8003368:	a801      	add	r0, sp, #4
 800336a:	f006 fa45 	bl	80097f8 <gd32_i2c_read>
 800336e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d001      	beq.n	800337e <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 800337a:	3d01      	subs	r5, #1
 800337c:	d1e8      	bne.n	8003350 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 800337e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003382:	ba40      	rev16	r0, r0
 8003384:	f020 0003 	bic.w	r0, r0, #3
 8003388:	b280      	uxth	r0, r0
 800338a:	b003      	add	sp, #12
 800338c:	bd30      	pop	{r4, r5, pc}
 800338e:	bf00      	nop
 8003390:	0800a0ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sp, pc}

08003394 <sensor::SI7021::GetTemperature()>:
 8003394:	b508      	push	{r3, lr}
 8003396:	21f3      	movs	r1, #243	; 0xf3
 8003398:	f7ff ffc4 	bl	8003324 <sensor::SI7021::ReadRaw(unsigned char)>
 800339c:	f7fc ffde 	bl	800035c <__aeabi_ui2f>
 80033a0:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80033a4:	f7fd fcb6 	bl	8000d14 <__aeabi_fmul>
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <sensor::SI7021::GetTemperature()+0x24>)
 80033aa:	f7fd fcb3 	bl	8000d14 <__aeabi_fmul>
 80033ae:	4903      	ldr	r1, [pc, #12]	; (80033bc <sensor::SI7021::GetTemperature()+0x28>)
 80033b0:	f7fc ff22 	bl	80001f8 <__aeabi_fsub>
 80033b4:	bd08      	pop	{r3, pc}
 80033b6:	bf00      	nop
 80033b8:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 80033bc:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

080033c0 <sensor::SI7021::GetHumidity()>:
 80033c0:	b508      	push	{r3, lr}
 80033c2:	21f5      	movs	r1, #245	; 0xf5
 80033c4:	f7ff ffae 	bl	8003324 <sensor::SI7021::ReadRaw(unsigned char)>
 80033c8:	f7fc ffc8 	bl	800035c <__aeabi_ui2f>
 80033cc:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80033d0:	f7fd fca0 	bl	8000d14 <__aeabi_fmul>
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <sensor::SI7021::GetHumidity()+0x24>)
 80033d6:	f7fd fc9d 	bl	8000d14 <__aeabi_fmul>
 80033da:	4903      	ldr	r1, [pc, #12]	; (80033e8 <sensor::SI7021::GetHumidity()+0x28>)
 80033dc:	f7fc ff0c 	bl	80001f8 <__aeabi_fsub>
 80033e0:	bd08      	pop	{r3, pc}
 80033e2:	bf00      	nop
 80033e4:	42fa0000 	rscsmi	r0, sl, #0
 80033e8:	40c00000 	sbcmi	r0, r0, r0

080033ec <RDMSubDevices::RDMSubDevices()>:
 80033ec:	2200      	movs	r2, #0
 80033ee:	6002      	str	r2, [r0, #0]
 80033f0:	8082      	strh	r2, [r0, #4]
 80033f2:	4a01      	ldr	r2, [pc, #4]	; (80033f8 <RDMSubDevices::RDMSubDevices()+0xc>)
 80033f4:	6010      	str	r0, [r2, #0]
 80033f6:	4770      	bx	lr
 80033f8:	20000200 	andcs	r0, r0, r0, lsl #4

080033fc <RDMSubDevices::~RDMSubDevices()>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	2500      	movs	r5, #0
 8003400:	4604      	mov	r4, r0
 8003402:	462e      	mov	r6, r5
 8003404:	88a3      	ldrh	r3, [r4, #4]
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	42ab      	cmp	r3, r5
 800340a:	d804      	bhi.n	8003416 <RDMSubDevices::~RDMSubDevices()+0x1a>
 800340c:	b108      	cbz	r0, 8003412 <RDMSubDevices::~RDMSubDevices()+0x16>
 800340e:	f005 f92a 	bl	8008666 <operator delete[](void*)>
 8003412:	4620      	mov	r0, r4
 8003414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003416:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800341a:	00af      	lsls	r7, r5, #2
 800341c:	b110      	cbz	r0, 8003424 <RDMSubDevices::~RDMSubDevices()+0x28>
 800341e:	6803      	ldr	r3, [r0, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4798      	blx	r3
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	3501      	adds	r5, #1
 8003428:	51de      	str	r6, [r3, r7]
 800342a:	e7eb      	b.n	8003404 <RDMSubDevices::~RDMSubDevices()+0x8>

0800342c <RDMSubDevices::GetInfo(unsigned short)>:
 800342c:	6803      	ldr	r3, [r0, #0]
 800342e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003432:	3901      	subs	r1, #1
 8003434:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003438:	3010      	adds	r0, #16
 800343a:	4770      	bx	lr

0800343c <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800343c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003440:	6800      	ldr	r0, [r0, #0]
 8003442:	3b01      	subs	r3, #1
 8003444:	4611      	mov	r1, r2
 8003446:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800344a:	f000 b8c1 	b.w	80035d0 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800344e <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800344e:	b410      	push	{r4}
 8003450:	460c      	mov	r4, r1
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003458:	3c01      	subs	r4, #1
 800345a:	4611      	mov	r1, r2
 800345c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003460:	461a      	mov	r2, r3
 8003462:	bc10      	pop	{r4}
 8003464:	f000 b8c9 	b.w	80035fa <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003468 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800346e:	3901      	subs	r1, #1
 8003470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003474:	8a58      	ldrh	r0, [r3, #18]
 8003476:	4770      	bx	lr

08003478 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003478:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	4611      	mov	r1, r2
 8003482:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003486:	f000 b897 	b.w	80035b8 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

0800348a <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 800348a:	6803      	ldr	r3, [r0, #0]
 800348c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003490:	3901      	subs	r1, #1
 8003492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003496:	8a18      	ldrh	r0, [r3, #16]
 8003498:	4770      	bx	lr

0800349a <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 800349a:	6803      	ldr	r3, [r0, #0]
 800349c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80034a0:	3901      	subs	r1, #1
 80034a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034a6:	7d18      	ldrb	r0, [r3, #20]
 80034a8:	4770      	bx	lr

080034aa <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80034aa:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80034ae:	6800      	ldr	r0, [r0, #0]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	4611      	mov	r1, r2
 80034b4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80034b8:	f000 b8ae 	b.w	8003618 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

080034bc <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 80034bc:	6803      	ldr	r3, [r0, #0]
 80034be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80034c2:	3901      	subs	r1, #1
 80034c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034c8:	7d58      	ldrb	r0, [r3, #21]
 80034ca:	4770      	bx	lr

080034cc <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80034cc:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80034d0:	6800      	ldr	r0, [r0, #0]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	4611      	mov	r1, r2
 80034d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80034da:	f000 b872 	b.w	80035c2 <RDMSubDevice::GetPersonality(unsigned char)>

080034de <RDMSubDevices::Start()>:
 80034de:	b538      	push	{r3, r4, r5, lr}
 80034e0:	4605      	mov	r5, r0
 80034e2:	2400      	movs	r4, #0
 80034e4:	88ab      	ldrh	r3, [r5, #4]
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	d800      	bhi.n	80034ec <RDMSubDevices::Start()+0xe>
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034f2:	b110      	cbz	r0, 80034fa <RDMSubDevices::Start()+0x1c>
 80034f4:	6803      	ldr	r3, [r0, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4798      	blx	r3
 80034fa:	3401      	adds	r4, #1
 80034fc:	e7f2      	b.n	80034e4 <RDMSubDevices::Start()+0x6>

080034fe <RDMSubDevices::Stop()>:
 80034fe:	b538      	push	{r3, r4, r5, lr}
 8003500:	4605      	mov	r5, r0
 8003502:	2400      	movs	r4, #0
 8003504:	88ab      	ldrh	r3, [r5, #4]
 8003506:	42a3      	cmp	r3, r4
 8003508:	d800      	bhi.n	800350c <RDMSubDevices::Stop()+0xe>
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003512:	b110      	cbz	r0, 800351a <RDMSubDevices::Stop()+0x1c>
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	4798      	blx	r3
 800351a:	3401      	adds	r4, #1
 800351c:	e7f2      	b.n	8003504 <RDMSubDevices::Stop()+0x6>

0800351e <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 800351e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003520:	4605      	mov	r5, r0
 8003522:	460f      	mov	r7, r1
 8003524:	4616      	mov	r6, r2
 8003526:	2400      	movs	r4, #0
 8003528:	88ab      	ldrh	r3, [r5, #4]
 800352a:	42a3      	cmp	r3, r4
 800352c:	d800      	bhi.n	8003530 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 800352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003536:	b158      	cbz	r0, 8003550 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003538:	8a43      	ldrh	r3, [r0, #18]
 800353a:	8a02      	ldrh	r2, [r0, #16]
 800353c:	4413      	add	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	42b3      	cmp	r3, r6
 8003544:	d804      	bhi.n	8003550 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003546:	6803      	ldr	r3, [r0, #0]
 8003548:	4632      	mov	r2, r6
 800354a:	4639      	mov	r1, r7
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4798      	blx	r3
 8003550:	3401      	adds	r4, #1
 8003552:	e7e9      	b.n	8003528 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

08003554 <RDMSubDevices::GetFactoryDefaults()>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4605      	mov	r5, r0
 8003558:	2400      	movs	r4, #0
 800355a:	88ab      	ldrh	r3, [r5, #4]
 800355c:	42a3      	cmp	r3, r4
 800355e:	d801      	bhi.n	8003564 <RDMSubDevices::GetFactoryDefaults()+0x10>
 8003560:	2001      	movs	r0, #1
 8003562:	e009      	b.n	8003578 <RDMSubDevices::GetFactoryDefaults()+0x24>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800356a:	b908      	cbnz	r0, 8003570 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800356c:	3401      	adds	r4, #1
 800356e:	e7f4      	b.n	800355a <RDMSubDevices::GetFactoryDefaults()+0x6>
 8003570:	f000 f87a 	bl	8003668 <RDMSubDevice::GetFactoryDefaults()>
 8003574:	2800      	cmp	r0, #0
 8003576:	d1f9      	bne.n	800356c <RDMSubDevices::GetFactoryDefaults()+0x18>
 8003578:	bd38      	pop	{r3, r4, r5, pc}

0800357a <RDMSubDevices::SetFactoryDefaults()>:
 800357a:	b538      	push	{r3, r4, r5, lr}
 800357c:	4605      	mov	r5, r0
 800357e:	2400      	movs	r4, #0
 8003580:	88ab      	ldrh	r3, [r5, #4]
 8003582:	42a3      	cmp	r3, r4
 8003584:	d800      	bhi.n	8003588 <RDMSubDevices::SetFactoryDefaults()+0xe>
 8003586:	bd38      	pop	{r3, r4, r5, pc}
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800358e:	b108      	cbz	r0, 8003594 <RDMSubDevices::SetFactoryDefaults()+0x1a>
 8003590:	f000 f844 	bl	800361c <RDMSubDevice::SetFactoryDefaults()>
 8003594:	3401      	adds	r4, #1
 8003596:	e7f3      	b.n	8003580 <RDMSubDevices::SetFactoryDefaults()+0x6>

08003598 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 8003598:	6001      	str	r1, [r0, #0]
 800359a:	4770      	bx	lr

0800359c <RDMSubDevicesParams::Load()>:
 800359c:	b508      	push	{r3, lr}
 800359e:	2300      	movs	r3, #0
 80035a0:	4601      	mov	r1, r0
 80035a2:	6043      	str	r3, [r0, #4]
 80035a4:	6800      	ldr	r0, [r0, #0]
 80035a6:	b120      	cbz	r0, 80035b2 <RDMSubDevicesParams::Load()+0x16>
 80035a8:	6803      	ldr	r3, [r0, #0]
 80035aa:	3104      	adds	r1, #4
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4798      	blx	r3
 80035b0:	2001      	movs	r0, #1
 80035b2:	bd08      	pop	{r3, pc}

080035b4 <RDMSubDevicesParams::Dump()>:
 80035b4:	4770      	bx	lr

080035b6 <RDMSubDevicesParams::Set()>:
 80035b6:	4770      	bx	lr

080035b8 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 80035b8:	6803      	ldr	r3, [r0, #0]
 80035ba:	8241      	strh	r1, [r0, #18]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2100      	movs	r1, #0
 80035c0:	4718      	bx	r3

080035c2 <RDMSubDevice::GetPersonality(unsigned char)>:
 80035c2:	6843      	ldr	r3, [r0, #4]
 80035c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80035c8:	3901      	subs	r1, #1
 80035ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80035ce:	4770      	bx	lr

080035d0 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80035d0:	f100 0316 	add.w	r3, r0, #22
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80035da:	710b      	strb	r3, [r1, #4]
 80035dc:	4770      	bx	lr

080035de <RDMSubDevice::SetLabel(char const*)>:
 80035de:	2300      	movs	r3, #0
 80035e0:	b510      	push	{r4, lr}
 80035e2:	f100 0415 	add.w	r4, r0, #21
 80035e6:	5cca      	ldrb	r2, [r1, r3]
 80035e8:	b122      	cbz	r2, 80035f4 <RDMSubDevice::SetLabel(char const*)+0x16>
 80035ea:	3301      	adds	r3, #1
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035f2:	d1f8      	bne.n	80035e6 <RDMSubDevice::SetLabel(char const*)+0x8>
 80035f4:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80035f8:	bd10      	pop	{r4, pc}

080035fa <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 80035fa:	2300      	movs	r3, #0
 80035fc:	b530      	push	{r4, r5, lr}
 80035fe:	f100 0415 	add.w	r4, r0, #21
 8003602:	429a      	cmp	r2, r3
 8003604:	d905      	bls.n	8003612 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 8003606:	5ccd      	ldrb	r5, [r1, r3]
 8003608:	3301      	adds	r3, #1
 800360a:	2b20      	cmp	r3, #32
 800360c:	f804 5f01 	strb.w	r5, [r4, #1]!
 8003610:	d1f7      	bne.n	8003602 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 8003612:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 8003616:	bd30      	pop	{r4, r5, pc}

08003618 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 8003618:	7501      	strb	r1, [r0, #20]
 800361a:	4770      	bx	lr

0800361c <RDMSubDevice::SetFactoryDefaults()>:
 800361c:	7a03      	ldrb	r3, [r0, #8]
 800361e:	b510      	push	{r4, lr}
 8003620:	b94b      	cbnz	r3, 8003636 <RDMSubDevice::SetFactoryDefaults()+0x1a>
 8003622:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8003626:	f7ff ffda 	bl	80035de <RDMSubDevice::SetLabel(char const*)>
 800362a:	8983      	ldrh	r3, [r0, #12]
 800362c:	8243      	strh	r3, [r0, #18]
 800362e:	7b83      	ldrb	r3, [r0, #14]
 8003630:	7503      	strb	r3, [r0, #20]
 8003632:	2301      	movs	r3, #1
 8003634:	7203      	strb	r3, [r0, #8]
 8003636:	bd10      	pop	{r4, pc}

08003638 <RDMSubDevice::CalculateChecksum()>:
 8003638:	4602      	mov	r2, r0
 800363a:	b510      	push	{r4, lr}
 800363c:	8a43      	ldrh	r3, [r0, #18]
 800363e:	7d01      	ldrb	r1, [r0, #20]
 8003640:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 8003644:	440b      	add	r3, r1
 8003646:	b298      	uxth	r0, r3
 8003648:	f102 0315 	add.w	r3, r2, #21
 800364c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003650:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003654:	32eb      	adds	r2, #235	; 0xeb
 8003656:	18d1      	adds	r1, r2, r3
 8003658:	428c      	cmp	r4, r1
 800365a:	d800      	bhi.n	800365e <RDMSubDevice::CalculateChecksum()+0x26>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003662:	4408      	add	r0, r1
 8003664:	b280      	uxth	r0, r0
 8003666:	e7f6      	b.n	8003656 <RDMSubDevice::CalculateChecksum()+0x1e>

08003668 <RDMSubDevice::GetFactoryDefaults()>:
 8003668:	7a03      	ldrb	r3, [r0, #8]
 800366a:	b510      	push	{r4, lr}
 800366c:	4604      	mov	r4, r0
 800366e:	b133      	cbz	r3, 800367e <RDMSubDevice::GetFactoryDefaults()+0x16>
 8003670:	f7ff ffe2 	bl	8003638 <RDMSubDevice::CalculateChecksum()>
 8003674:	8963      	ldrh	r3, [r4, #10]
 8003676:	4283      	cmp	r3, r0
 8003678:	bf1c      	itt	ne
 800367a:	2300      	movne	r3, #0
 800367c:	7223      	strbne	r3, [r4, #8]
 800367e:	7a20      	ldrb	r0, [r4, #8]
 8003680:	bd10      	pop	{r4, pc}
	...

08003684 <Rdm::Receive(unsigned int)>:
 8003684:	4b02      	ldr	r3, [pc, #8]	; (8003690 <Rdm::Receive(unsigned int)+0xc>)
 8003686:	4601      	mov	r1, r0
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	f000 bc3f 	b.w	8003f0c <Dmx::RdmReceive(unsigned int)>
 800368e:	bf00      	nop
 8003690:	2000063c 	andcs	r0, r0, ip, lsr r6

08003694 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003694:	2300      	movs	r3, #0
 8003696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	4604      	mov	r4, r0
 800369c:	460e      	mov	r6, r1
 800369e:	4617      	mov	r7, r2
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 80036a2:	461a      	mov	r2, r3
 80036a4:	4601      	mov	r1, r0
 80036a6:	6828      	ldr	r0, [r5, #0]
 80036a8:	f000 fac2 	bl	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80036ac:	463b      	mov	r3, r7
 80036ae:	4632      	mov	r2, r6
 80036b0:	4621      	mov	r1, r4
 80036b2:	6828      	ldr	r0, [r5, #0]
 80036b4:	f000 fbe4 	bl	8003e80 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 80036b8:	2100      	movs	r1, #0
 80036ba:	2004      	movs	r0, #4
 80036bc:	f006 faf6 	bl	8009cac <udelay(unsigned int, unsigned int)>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4621      	mov	r1, r4
 80036c4:	6828      	ldr	r0, [r5, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036cc:	f000 bab0 	b.w	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80036d0:	2000063c 	andcs	r0, r0, ip, lsr r6

080036d4 <USART2_IRQHandler>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	2408      	movs	r4, #8
 80036d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036dc:	4975      	ldr	r1, [pc, #468]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 80036de:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 80036e2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80036e6:	f013 0f02 	tst.w	r3, #2
 80036ea:	4b73      	ldr	r3, [pc, #460]	; (80038b8 <USART2_IRQHandler+0x1e4>)
 80036ec:	d018      	beq.n	8003720 <USART2_IRQHandler+0x4c>
 80036ee:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 80036f2:	f020 0002 	bic.w	r0, r0, #2
 80036f6:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 80036fa:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80036fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003702:	b962      	cbnz	r2, 800371e <USART2_IRQHandler+0x4a>
 8003704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003708:	2201      	movs	r2, #1
 800370a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800370e:	2310      	movs	r3, #16
 8003710:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 8003714:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 8003718:	2320      	movs	r3, #32
 800371a:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800371e:	bd10      	pop	{r4, pc}
 8003720:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8003724:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372c:	2807      	cmp	r0, #7
 800372e:	f200 80bc 	bhi.w	80038aa <USART2_IRQHandler+0x1d6>
 8003732:	e8df f000 	tbb	[pc, r0]
 8003736:	41ba1804 			; <UNDEFINED> instruction: 0x41ba1804
 800373a:	a1807056 	orrge	r7, r0, r6, asr r0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	2107      	movs	r1, #7
 8003742:	2201      	movs	r2, #1
 8003744:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800374c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003750:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8003754:	4a59      	ldr	r2, [pc, #356]	; (80038bc <USART2_IRQHandler+0x1e8>)
 8003756:	b29b      	uxth	r3, r3
 8003758:	8193      	strh	r3, [r2, #12]
 800375a:	2210      	movs	r2, #16
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 800375e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003762:	2220      	movs	r2, #32
 8003764:	e017      	b.n	8003796 <USART2_IRQHandler+0xc2>
 8003766:	b11a      	cbz	r2, 8003770 <USART2_IRQHandler+0x9c>
 8003768:	2acc      	cmp	r2, #204	; 0xcc
 800376a:	d01b      	beq.n	80037a4 <USART2_IRQHandler+0xd0>
 800376c:	2200      	movs	r2, #0
 800376e:	e05f      	b.n	8003830 <USART2_IRQHandler+0x15c>
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	2201      	movs	r2, #1
 8003774:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003778:	4a50      	ldr	r2, [pc, #320]	; (80038bc <USART2_IRQHandler+0x1e8>)
 800377a:	6851      	ldr	r1, [r2, #4]
 800377c:	3101      	adds	r1, #1
 800377e:	6051      	str	r1, [r2, #4]
 8003780:	2103      	movs	r1, #3
 8003782:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800378a:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800378e:	b29b      	uxth	r3, r3
 8003790:	8193      	strh	r3, [r2, #12]
 8003792:	2210      	movs	r2, #16
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 8003796:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800379a:	2208      	movs	r2, #8
 800379c:	4b45      	ldr	r3, [pc, #276]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 800379e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80037a2:	e7bc      	b.n	800371e <USART2_IRQHandler+0x4a>
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 80037aa:	2201      	movs	r2, #1
 80037ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037b0:	2204      	movs	r2, #4
 80037b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80037b6:	e7ec      	b.n	8003792 <USART2_IRQHandler+0xbe>
 80037b8:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80037bc:	545a      	strb	r2, [r3, r1]
 80037be:	1c4a      	adds	r2, r1, #1
 80037c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80037c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037c8:	d95e      	bls.n	8003888 <USART2_IRQHandler+0x1b4>
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80037d8:	2210      	movs	r2, #16
 80037da:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 80037dc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80037e0:	e7db      	b.n	800379a <USART2_IRQHandler+0xc6>
 80037e2:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80037e6:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 80037ea:	545a      	strb	r2, [r3, r1]
 80037ec:	1c48      	adds	r0, r1, #1
 80037ee:	3917      	subs	r1, #23
 80037f0:	4422      	add	r2, r4
 80037f2:	29e9      	cmp	r1, #233	; 0xe9
 80037f4:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 80037f8:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 80037fc:	d807      	bhi.n	800380e <USART2_IRQHandler+0x13a>
 80037fe:	789a      	ldrb	r2, [r3, #2]
 8003800:	4290      	cmp	r0, r2
 8003802:	d104      	bne.n	800380e <USART2_IRQHandler+0x13a>
 8003804:	2205      	movs	r2, #5
 8003806:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <USART2_IRQHandler+0x1e0>)
 800380c:	e7a9      	b.n	8003762 <USART2_IRQHandler+0x8e>
 800380e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8003812:	d3c2      	bcc.n	800379a <USART2_IRQHandler+0xc6>
 8003814:	e7aa      	b.n	800376c <USART2_IRQHandler+0x98>
 8003816:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800381a:	545a      	strb	r2, [r3, r1]
 800381c:	3101      	adds	r1, #1
 800381e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 8003822:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8003826:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800382a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800382e:	2206      	movs	r2, #6
 8003830:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003834:	e7b1      	b.n	800379a <USART2_IRQHandler+0xc6>
 8003836:	2020      	movs	r0, #32
 8003838:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 800383c:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 8003840:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003844:	541a      	strb	r2, [r3, r0]
 8003846:	1aa2      	subs	r2, r4, r2
 8003848:	b292      	uxth	r2, r2
 800384a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800384e:	b912      	cbnz	r2, 8003856 <USART2_IRQHandler+0x182>
 8003850:	785a      	ldrb	r2, [r3, #1]
 8003852:	2a01      	cmp	r2, #1
 8003854:	d003      	beq.n	800385e <USART2_IRQHandler+0x18a>
 8003856:	2200      	movs	r2, #0
 8003858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800385c:	e786      	b.n	800376c <USART2_IRQHandler+0x98>
 800385e:	3001      	adds	r0, #1
 8003860:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <USART2_IRQHandler+0x1ec>)
 8003862:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8003866:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800386a:	6850      	ldr	r0, [r2, #4]
 800386c:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <USART2_IRQHandler+0x1f0>)
 800386e:	6010      	str	r0, [r2, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 8003876:	e779      	b.n	800376c <USART2_IRQHandler+0x98>
 8003878:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800387c:	2917      	cmp	r1, #23
 800387e:	bf9e      	ittt	ls
 8003880:	545a      	strbls	r2, [r3, r1]
 8003882:	3101      	addls	r1, #1
 8003884:	f8c3 1204 	strls.w	r1, [r3, #516]	; 0x204
 8003888:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800388c:	480b      	ldr	r0, [pc, #44]	; (80038bc <USART2_IRQHandler+0x1e8>)
 800388e:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 8003892:	8983      	ldrh	r3, [r0, #12]
 8003894:	b292      	uxth	r2, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	f1c3 0304 	rsb	r3, r3, #4
 800389c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8182      	strh	r2, [r0, #12]
 80038a4:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 80038a8:	e777      	b.n	800379a <USART2_IRQHandler+0xc6>
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80038b0:	e7be      	b.n	8003830 <USART2_IRQHandler+0x15c>
 80038b2:	bf00      	nop
 80038b4:	40010000 	andmi	r0, r1, r0
 80038b8:	20000210 	andcs	r0, r0, r0, lsl r2
 80038bc:	20000628 	andcs	r0, r0, r8, lsr #12
 80038c0:	e0001000 	and	r1, r0, r0
 80038c4:	20000640 	andcs	r0, r0, r0, asr #12

080038c8 <TIMER1_IRQHandler>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ce:	2008      	movs	r0, #8
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <TIMER1_IRQHandler+0x98>)
 80038d2:	691c      	ldr	r4, [r3, #16]
 80038d4:	4923      	ldr	r1, [pc, #140]	; (8003964 <TIMER1_IRQHandler+0x9c>)
 80038d6:	8813      	ldrh	r3, [r2, #0]
 80038d8:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 80038dc:	07a1      	lsls	r1, r4, #30
 80038de:	b29b      	uxth	r3, r3
 80038e0:	d51b      	bpl.n	800391a <TIMER1_IRQHandler+0x52>
 80038e2:	07dd      	lsls	r5, r3, #31
 80038e4:	d50f      	bpl.n	8003906 <TIMER1_IRQHandler+0x3e>
 80038e6:	8813      	ldrh	r3, [r2, #0]
 80038e8:	4d1f      	ldr	r5, [pc, #124]	; (8003968 <TIMER1_IRQHandler+0xa0>)
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	8013      	strh	r3, [r2, #0]
 80038f2:	2110      	movs	r1, #16
 80038f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038f8:	2203      	movs	r2, #3
 80038fa:	4628      	mov	r0, r5
 80038fc:	f005 fa78 	bl	8008df0 <gpio_init>
 8003900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003904:	616b      	str	r3, [r5, #20]
 8003906:	4621      	mov	r1, r4
 8003908:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800390c:	f005 fd5b 	bl	80093c6 <timer_interrupt_flag_clear>
 8003910:	2208      	movs	r2, #8
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <TIMER1_IRQHandler+0x9c>)
 8003914:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	0760      	lsls	r0, r4, #29
 800391c:	d509      	bpl.n	8003932 <TIMER1_IRQHandler+0x6a>
 800391e:	05d9      	lsls	r1, r3, #23
 8003920:	d5f1      	bpl.n	8003906 <TIMER1_IRQHandler+0x3e>
 8003922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003926:	2203      	movs	r2, #3
 8003928:	2118      	movs	r1, #24
 800392a:	480f      	ldr	r0, [pc, #60]	; (8003968 <TIMER1_IRQHandler+0xa0>)
 800392c:	f005 fa60 	bl	8008df0 <gpio_init>
 8003930:	e7e9      	b.n	8003906 <TIMER1_IRQHandler+0x3e>
 8003932:	0722      	lsls	r2, r4, #28
 8003934:	d5e7      	bpl.n	8003906 <TIMER1_IRQHandler+0x3e>
 8003936:	05db      	lsls	r3, r3, #23
 8003938:	d5e5      	bpl.n	8003906 <TIMER1_IRQHandler+0x3e>
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <TIMER1_IRQHandler+0xa4>)
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	480b      	ldr	r0, [pc, #44]	; (8003970 <TIMER1_IRQHandler+0xa8>)
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	61da      	str	r2, [r3, #28]
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIMER1_IRQHandler+0xac>)
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
 800394c:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 8003950:	621a      	str	r2, [r3, #32]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	61da      	str	r2, [r3, #28]
 800395a:	f005 fdd3 	bl	8009504 <usart_dma_transmit_config>
 800395e:	e7d2      	b.n	8003906 <TIMER1_IRQHandler+0x3e>
 8003960:	20000638 	andcs	r0, r0, r8, lsr r6
 8003964:	40010000 	andmi	r0, r1, r0
 8003968:	40011000 	andmi	r1, r1, r0
 800396c:	40020000 	andmi	r0, r2, r0
 8003970:	40004800 	andmi	r4, r0, r0, lsl #16
 8003974:	20000420 	andcs	r0, r0, r0, lsr #8

08003978 <TIMER2_IRQHandler>:
 8003978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800397c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8003980:	078b      	lsls	r3, r1, #30
 8003982:	d511      	bpl.n	80039a8 <TIMER2_IRQHandler+0x30>
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <TIMER2_IRQHandler+0x5c>)
 8003986:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800398a:	2a03      	cmp	r2, #3
 800398c:	d10f      	bne.n	80039ae <TIMER2_IRQHandler+0x36>
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039a0:	2210      	movs	r2, #16
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <TIMER2_IRQHandler+0x60>)
 80039a4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <TIMER2_IRQHandler+0x64>)
 80039aa:	f005 bd0c 	b.w	80093c6 <timer_interrupt_flag_clear>
 80039ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80039b2:	2a07      	cmp	r2, #7
 80039b4:	d1f8      	bne.n	80039a8 <TIMER2_IRQHandler+0x30>
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80039bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039c8:	2210      	movs	r2, #16
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <TIMER2_IRQHandler+0x60>)
 80039cc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80039d0:	2220      	movs	r2, #32
 80039d2:	e7e7      	b.n	80039a4 <TIMER2_IRQHandler+0x2c>
 80039d4:	20000210 	andcs	r0, r0, r0, lsl r2
 80039d8:	40010000 	andmi	r0, r1, r0
 80039dc:	40000400 	andmi	r0, r0, r0, lsl #8

080039e0 <TIMER3_IRQHandler>:
 80039e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <TIMER3_IRQHandler+0x10>)
 80039e6:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 80039ea:	f005 bcec 	b.w	80093c6 <timer_interrupt_flag_clear>
 80039ee:	bf00      	nop
 80039f0:	40000800 	andmi	r0, r0, r0, lsl #16

080039f4 <TIMER6_IRQHandler>:
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <TIMER6_IRQHandler+0x18>)
 80039f6:	4806      	ldr	r0, [pc, #24]	; (8003a10 <TIMER6_IRQHandler+0x1c>)
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	6899      	ldr	r1, [r3, #8]
 80039fc:	1a52      	subs	r2, r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	2101      	movs	r1, #1
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	f005 bcde 	b.w	80093c6 <timer_interrupt_flag_clear>
 8003a0a:	bf00      	nop
 8003a0c:	20000628 	andcs	r0, r0, r8, lsr #12
 8003a10:	40001400 	andmi	r1, r0, r0, lsl #8

08003a14 <Dmx::ClearData(unsigned int)>:
 8003a14:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <Dmx::ClearData(unsigned int)+0x2c>)
 8003a1e:	fb03 2301 	mla	r3, r3, r1, r2
 8003a22:	f203 2002 	addw	r0, r3, #514	; 0x202
 8003a26:	f823 4b02 	strh.w	r4, [r3], #2
 8003a2a:	4283      	cmp	r3, r0
 8003a2c:	d1fb      	bne.n	8003a26 <Dmx::ClearData(unsigned int)+0x12>
 8003a2e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003a32:	fb03 2201 	mla	r2, r3, r1, r2
 8003a36:	f240 2301 	movw	r3, #513	; 0x201
 8003a3a:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 8003a3e:	bd10      	pop	{r4, pc}
 8003a40:	20000420 	andcs	r0, r0, r0, lsr #8

08003a44 <Dmx::StartData(unsigned int, unsigned int)>:
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003a4a:	6943      	ldr	r3, [r0, #20]
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	4615      	mov	r5, r2
 8003a50:	b085      	sub	sp, #20
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d16c      	bne.n	8003b30 <Dmx::StartData(unsigned int, unsigned int)+0xec>
 8003a56:	4e48      	ldr	r6, [pc, #288]	; (8003b78 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 8003a58:	8834      	ldrh	r4, [r6, #0]
 8003a5a:	b2a4      	uxth	r4, r4
 8003a5c:	2c00      	cmp	r4, #0
 8003a5e:	d15b      	bne.n	8003b18 <Dmx::StartData(unsigned int, unsigned int)+0xd4>
 8003a60:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8003a64:	f005 fa56 	bl	8008f14 <rcu_periph_clock_enable>
 8003a68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a6c:	f005 fbb4 	bl	80091d8 <timer_deinit>
 8003a70:	236b      	movs	r3, #107	; 0x6b
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 8003a76:	4669      	mov	r1, sp
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	f8ad 4004 	strh.w	r4, [sp, #4]
 8003a84:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003a88:	f88d 400e 	strb.w	r4, [sp, #14]
 8003a8c:	f005 fc06 	bl	800929c <timer_init>
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a98:	f005 fc98 	bl	80093cc <timer_flag_clear>
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003aa4:	f005 fc8f 	bl	80093c6 <timer_interrupt_flag_clear>
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	4621      	mov	r1, r4
 8003aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ab0:	f005 fc51 	bl	8009356 <timer_channel_output_mode_config>
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003abc:	f005 fc4b 	bl	8009356 <timer_channel_output_mode_config>
 8003ac0:	4f2f      	ldr	r7, [pc, #188]	; (8003b80 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003aca:	f005 fc44 	bl	8009356 <timer_channel_output_mode_config>
 8003ace:	4622      	mov	r2, r4
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ad6:	f005 fc64 	bl	80093a2 <timer_channel_output_pulse_value_config>
 8003ada:	2101      	movs	r1, #1
 8003adc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ae0:	883a      	ldrh	r2, [r7, #0]
 8003ae2:	f005 fc5e 	bl	80093a2 <timer_channel_output_pulse_value_config>
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2102      	movs	r1, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	b292      	uxth	r2, r2
 8003af2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003af6:	f005 fc54 	bl	80093a2 <timer_channel_output_pulse_value_config>
 8003afa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003afe:	210e      	movs	r1, #14
 8003b00:	f005 fc5d 	bl	80093be <timer_interrupt_enable>
 8003b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 8003b0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003b0e:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f005 fc1a 	bl	800934c <timer_enable>
 8003b18:	2201      	movs	r2, #1
 8003b1a:	8831      	ldrh	r1, [r6, #0]
 8003b1c:	fa02 f305 	lsl.w	r3, r2, r5
 8003b20:	430b      	orrs	r3, r1
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	8033      	strh	r3, [r6, #0]
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003b28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b2c:	b005      	add	sp, #20
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b30:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 8003b36:	fb02 3305 	mla	r3, r2, r5, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003b40:	2107      	movs	r1, #7
 8003b42:	4620      	mov	r0, r4
 8003b44:	f005 fce4 	bl	8009510 <usart_flag_get>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d0f9      	beq.n	8003b40 <Dmx::StartData(unsigned int, unsigned int)+0xfc>
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	4911      	ldr	r1, [pc, #68]	; (8003b94 <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 8003b50:	f005 fd00 	bl	8009554 <usart_interrupt_flag_clear>
 8003b54:	f240 3105 	movw	r1, #773	; 0x305
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f005 fce4 	bl	8009526 <usart_interrupt_enable>
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b6a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003b76:	e7d9      	b.n	8003b2c <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 8003b78:	20000638 	andcs	r0, r0, r8, lsr r6
 8003b7c:	20000000 	andcs	r0, r0, r0
 8003b80:	20000008 	andcs	r0, r0, r8
 8003b84:	20000004 	andcs	r0, r0, r4
 8003b88:	e000e100 	and	lr, r0, r0, lsl #2
 8003b8c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003b90:	20000210 	andcs	r0, r0, r0, lsl r2
 8003b94:	00050305 	andeq	r0, r5, r5, lsl #6

08003b98 <Dmx::StopData(unsigned int, unsigned int)>:
 8003b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b9c:	4f21      	ldr	r7, [pc, #132]	; (8003c24 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	b323      	cbz	r3, 8003bf2 <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 8003ba8:	6943      	ldr	r3, [r0, #20]
 8003baa:	bb23      	cbnz	r3, 8003bf6 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 8003bac:	2601      	movs	r6, #1
 8003bae:	4d1e      	ldr	r5, [pc, #120]	; (8003c28 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 8003bb0:	fa06 f202 	lsl.w	r2, r6, r2
 8003bb4:	882b      	ldrh	r3, [r5, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	ea23 0302 	bic.w	r3, r3, r2
 8003bbc:	802b      	strh	r3, [r5, #0]
 8003bbe:	f3bf 8f5f 	dmb	sy
 8003bc2:	882b      	ldrh	r3, [r5, #0]
 8003bc4:	f104 0208 	add.w	r2, r4, #8
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4096      	lsls	r6, r2
 8003bcc:	ea36 0303 	bics.w	r3, r6, r3
 8003bd0:	d105      	bne.n	8003bde <Dmx::StopData(unsigned int, unsigned int)+0x46>
 8003bd2:	2107      	movs	r1, #7
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	f005 fc9b 	bl	8009510 <usart_flag_get>
 8003bda:	2801      	cmp	r0, #1
 8003bdc:	d1f9      	bne.n	8003bd2 <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 8003bde:	882b      	ldrh	r3, [r5, #0]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	ea23 0306 	bic.w	r3, r3, r6
 8003be6:	802b      	strh	r3, [r5, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	2300      	movs	r3, #0
 8003bee:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 8003bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf6:	f240 3105 	movw	r1, #773	; 0x305
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f005 fc9e 	bl	800953c <usart_interrupt_disable>
 8003c00:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 8003c06:	fb02 3304 	mla	r3, r2, r4, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c14:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003c20:	e7e4      	b.n	8003bec <Dmx::StopData(unsigned int, unsigned int)+0x54>
 8003c22:	bf00      	nop
 8003c24:	20000624 	andcs	r0, r0, r4, lsr #12
 8003c28:	20000638 	andcs	r0, r0, r8, lsr r6
 8003c2c:	20000210 	andcs	r0, r0, r0, lsl r2

08003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	461d      	mov	r5, r3
 8003c34:	6943      	ldr	r3, [r0, #20]
 8003c36:	4606      	mov	r6, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	d014      	beq.n	8003c68 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 8003c3e:	6142      	str	r2, [r0, #20]
 8003c40:	4910      	ldr	r1, [pc, #64]	; (8003c84 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	f7ff ffa8 	bl	8003b98 <Dmx::StopData(unsigned int, unsigned int)>
 8003c48:	b934      	cbnz	r4, 8003c58 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 8003c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003c50:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003c54:	b94d      	cbnz	r5, 8003c6a <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	2c01      	cmp	r4, #1
 8003c5a:	d1fb      	bne.n	8003c54 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003c62:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003c66:	e7f5      	b.n	8003c54 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003c68:	b135      	cbz	r5, 8003c78 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c70:	2200      	movs	r2, #0
 8003c72:	4904      	ldr	r1, [pc, #16]	; (8003c84 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003c74:	f7ff bee6 	b.w	8003a44 <Dmx::StartData(unsigned int, unsigned int)>
 8003c78:	462a      	mov	r2, r5
 8003c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c7e:	4901      	ldr	r1, [pc, #4]	; (8003c84 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003c80:	f7ff bf8a 	b.w	8003b98 <Dmx::StopData(unsigned int, unsigned int)>
 8003c84:	40004800 	andmi	r4, r0, r0, lsl #16
 8003c88:	40010000 	andmi	r0, r1, r0

08003c8c <Dmx::Dmx()>:
 8003c8c:	225c      	movs	r2, #92	; 0x5c
 8003c8e:	230c      	movs	r3, #12
 8003c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c94:	e9c0 2300 	strd	r2, r3, [r0]
 8003c98:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003c9c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca4:	2400      	movs	r4, #0
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	8203      	strh	r3, [r0, #16]
 8003caa:	4b5d      	ldr	r3, [pc, #372]	; (8003e20 <Dmx::Dmx()+0x194>)
 8003cac:	b08b      	sub	sp, #44	; 0x2c
 8003cae:	6018      	str	r0, [r3, #0]
 8003cb0:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <Dmx::Dmx()+0x198>)
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	801c      	strh	r4, [r3, #0]
 8003cb6:	2110      	movs	r1, #16
 8003cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cbc:	485a      	ldr	r0, [pc, #360]	; (8003e28 <Dmx::Dmx()+0x19c>)
 8003cbe:	f005 f897 	bl	8008df0 <gpio_init>
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7ff fea5 	bl	8003a14 <Dmx::ClearData(unsigned int)>
 8003cca:	4b58      	ldr	r3, [pc, #352]	; (8003e2c <Dmx::Dmx()+0x1a0>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4628      	mov	r0, r5
 8003cd0:	601c      	str	r4, [r3, #0]
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	f7ff ffac 	bl	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003cd8:	4b55      	ldr	r3, [pc, #340]	; (8003e30 <Dmx::Dmx()+0x1a4>)
 8003cda:	4e56      	ldr	r6, [pc, #344]	; (8003e34 <Dmx::Dmx()+0x1a8>)
 8003cdc:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003ce0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003ce4:	f005 f916 	bl	8008f14 <rcu_periph_clock_enable>
 8003ce8:	f240 5001 	movw	r0, #1281	; 0x501
 8003cec:	f005 f912 	bl	8008f14 <rcu_periph_clock_enable>
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	f004 ff72 	bl	8008bdc <dma_deinit>
 8003cf8:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <Dmx::Dmx()+0x1ac>)
 8003cfa:	2701      	movs	r7, #1
 8003cfc:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d04:	9308      	str	r3, [sp, #32]
 8003d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d0a:	aa03      	add	r2, sp, #12
 8003d0c:	4639      	mov	r1, r7
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003d14:	9406      	str	r4, [sp, #24]
 8003d16:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8003d1a:	f004 ff85 	bl	8008c28 <dma_init>
 8003d1e:	4639      	mov	r1, r7
 8003d20:	4630      	mov	r0, r6
 8003d22:	f004 ffbb 	bl	8008c9c <dma_circulation_disable>
 8003d26:	4639      	mov	r1, r7
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f004 ffc7 	bl	8008cbc <dma_memory_to_memory_disable>
 8003d2e:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 8003d32:	f240 7001 	movw	r0, #1793	; 0x701
 8003d36:	f005 f8ed 	bl	8008f14 <rcu_periph_clock_enable>
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f005 fa4c 	bl	80091d8 <timer_deinit>
 8003d40:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003d44:	236b      	movs	r3, #107	; 0x6b
 8003d46:	4630      	mov	r0, r6
 8003d48:	a903      	add	r1, sp, #12
 8003d4a:	9303      	str	r3, [sp, #12]
 8003d4c:	f8ad 4010 	strh.w	r4, [sp, #16]
 8003d50:	f8cd 9014 	str.w	r9, [sp, #20]
 8003d54:	f8ad 4018 	strh.w	r4, [sp, #24]
 8003d58:	f88d 401a 	strb.w	r4, [sp, #26]
 8003d5c:	f005 fa9e 	bl	800929c <timer_init>
 8003d60:	4649      	mov	r1, r9
 8003d62:	4630      	mov	r0, r6
 8003d64:	f005 fb32 	bl	80093cc <timer_flag_clear>
 8003d68:	4649      	mov	r1, r9
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f005 fb2b 	bl	80093c6 <timer_interrupt_flag_clear>
 8003d70:	4621      	mov	r1, r4
 8003d72:	4630      	mov	r0, r6
 8003d74:	2210      	movs	r2, #16
 8003d76:	f005 faee 	bl	8009356 <timer_channel_output_mode_config>
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	2210      	movs	r2, #16
 8003d80:	f005 fae9 	bl	8009356 <timer_channel_output_mode_config>
 8003d84:	4630      	mov	r0, r6
 8003d86:	2210      	movs	r2, #16
 8003d88:	2102      	movs	r1, #2
 8003d8a:	f005 fae4 	bl	8009356 <timer_channel_output_mode_config>
 8003d8e:	2210      	movs	r2, #16
 8003d90:	2103      	movs	r1, #3
 8003d92:	4630      	mov	r0, r6
 8003d94:	f005 fadf 	bl	8009356 <timer_channel_output_mode_config>
 8003d98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003d9c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003e3c <Dmx::Dmx()+0x1b0>
 8003da0:	4630      	mov	r0, r6
 8003da2:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003da6:	f8c8 3000 	str.w	r3, [r8]
 8003daa:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003dae:	f005 facd 	bl	800934c <timer_enable>
 8003db2:	f240 7005 	movw	r0, #1797	; 0x705
 8003db6:	f005 f8ad 	bl	8008f14 <rcu_periph_clock_enable>
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f005 fa0c 	bl	80091d8 <timer_deinit>
 8003dc0:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8003dc4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003dc8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003dcc:	4630      	mov	r0, r6
 8003dce:	a903      	add	r1, sp, #12
 8003dd0:	9305      	str	r3, [sp, #20]
 8003dd2:	f005 fa63 	bl	800929c <timer_init>
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f005 faf7 	bl	80093cc <timer_flag_clear>
 8003dde:	4649      	mov	r1, r9
 8003de0:	4630      	mov	r0, r6
 8003de2:	f005 faf0 	bl	80093c6 <timer_interrupt_flag_clear>
 8003de6:	4639      	mov	r1, r7
 8003de8:	4630      	mov	r0, r6
 8003dea:	f005 fae8 	bl	80093be <timer_interrupt_enable>
 8003dee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003df2:	4630      	mov	r0, r6
 8003df4:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003df8:	f8c8 3004 	str.w	r3, [r8, #4]
 8003dfc:	f005 faa6 	bl	800934c <timer_enable>
 8003e00:	2302      	movs	r3, #2
 8003e02:	2208      	movs	r2, #8
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	490e      	ldr	r1, [pc, #56]	; (8003e40 <Dmx::Dmx()+0x1b4>)
 8003e08:	4623      	mov	r3, r4
 8003e0a:	480e      	ldr	r0, [pc, #56]	; (8003e44 <Dmx::Dmx()+0x1b8>)
 8003e0c:	f005 fe4e 	bl	8009aac <gd32_uart_begin>
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	4628      	mov	r0, r5
 8003e14:	f8c8 3004 	str.w	r3, [r8, #4]
 8003e18:	b00b      	add	sp, #44	; 0x2c
 8003e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e1e:	bf00      	nop
 8003e20:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003e24:	20000638 	andcs	r0, r0, r8, lsr r6
 8003e28:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003e2c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003e30:	20000210 	andcs	r0, r0, r0, lsl r2
 8003e34:	40020000 	andmi	r0, r2, r0
 8003e38:	40004804 	andmi	r4, r0, r4, lsl #16
 8003e3c:	e000e100 	and	lr, r0, r0, lsl #2
 8003e40:	0003d090 	muleq	r3, r0, r0
 8003e44:	40004800 	andmi	r4, r0, r0, lsl #16

08003e48 <Dmx::GetDmxAvailable(unsigned int)>:
 8003e48:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003e4e:	fb02 3101 	mla	r1, r2, r1, r3
 8003e52:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003e56:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003e5a:	bf1f      	itttt	ne
 8003e5c:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8003e60:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003e64:	4608      	movne	r0, r1
 8003e66:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003e6a:	4770      	bx	lr
 8003e6c:	20000210 	andcs	r0, r0, r0, lsl r2

08003e70 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8003e70:	f3bf 8f5f 	dmb	sy
 8003e74:	4b01      	ldr	r3, [pc, #4]	; (8003e7c <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003e76:	0109      	lsls	r1, r1, #4
 8003e78:	5858      	ldr	r0, [r3, r1]
 8003e7a:	4770      	bx	lr
 8003e7c:	20000628 	andcs	r0, r0, r8, lsr #12

08003e80 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	4614      	mov	r4, r2
 8003e84:	461d      	mov	r5, r3
 8003e86:	4e1f      	ldr	r6, [pc, #124]	; (8003f04 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003e88:	2106      	movs	r1, #6
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f005 fb40 	bl	8009510 <usart_flag_get>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0f9      	beq.n	8003e88 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003e94:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003e98:	4e1b      	ldr	r6, [pc, #108]	; (8003f08 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	f004 ffa4 	bl	8008df0 <gpio_init>
 8003ea8:	6177      	str	r7, [r6, #20]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	20b0      	movs	r0, #176	; 0xb0
 8003eae:	f005 fefd 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	2118      	movs	r1, #24
 8003eba:	f004 ff99 	bl	8008df0 <gpio_init>
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	200c      	movs	r0, #12
 8003ec2:	f005 fef3 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8003ec6:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 8003eca:	4425      	add	r5, r4
 8003ecc:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 8003ed0:	42ac      	cmp	r4, r5
 8003ed2:	d109      	bne.n	8003ee8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003ed4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	; (8003f04 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003eda:	2106      	movs	r1, #6
 8003edc:	4620      	mov	r0, r4
 8003ede:	f005 fb17 	bl	8009510 <usart_flag_get>
 8003ee2:	2801      	cmp	r0, #1
 8003ee4:	d10b      	bne.n	8003efe <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 8003ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee8:	2107      	movs	r1, #7
 8003eea:	4630      	mov	r0, r6
 8003eec:	f005 fb10 	bl	8009510 <usart_flag_get>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d0f9      	beq.n	8003ee8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003ef4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ef8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003efc:	e7e8      	b.n	8003ed0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 8003efe:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003f02:	e7ea      	b.n	8003eda <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003f04:	40004800 	andmi	r4, r0, r0, lsl #16
 8003f08:	40011000 	andmi	r1, r1, r0

08003f0c <Dmx::RdmReceive(unsigned int)>:
 8003f0c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <Dmx::RdmReceive(unsigned int)+0x20>)
 8003f12:	fb02 3101 	mla	r1, r2, r1, r3
 8003f16:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003f1a:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 8003f1e:	bf1e      	ittt	ne
 8003f20:	2300      	movne	r3, #0
 8003f22:	4608      	movne	r0, r1
 8003f24:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000210 	andcs	r0, r0, r0, lsl r2

08003f30 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
 8003f36:	4616      	mov	r6, r2
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 8003f3a:	20c8      	movs	r0, #200	; 0xc8
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	f005 feb5 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8003f42:	4632      	mov	r2, r6
 8003f44:	4629      	mov	r1, r5
 8003f46:	4620      	mov	r0, r4
 8003f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f4c:	f7ff bba2 	b.w	8003694 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003f50:	20000640 	andcs	r0, r0, r0, asr #12

08003f54 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	20c8      	movs	r0, #200	; 0xc8
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	4615      	mov	r5, r2
 8003f64:	f005 fea2 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4f19      	ldr	r7, [pc, #100]	; (8003fd0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6838      	ldr	r0, [r7, #0]
 8003f72:	f7ff fe5d 	bl	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003f76:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 8003f7a:	4e16      	ldr	r6, [pc, #88]	; (8003fd4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003f7c:	4425      	add	r5, r4
 8003f7e:	42ac      	cmp	r4, r5
 8003f80:	d115      	bne.n	8003fae <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003f82:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003f86:	4d13      	ldr	r5, [pc, #76]	; (8003fd4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003f88:	2106      	movs	r1, #6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f005 fac0 	bl	8009510 <usart_flag_get>
 8003f90:	2801      	cmp	r0, #1
 8003f92:	4604      	mov	r4, r0
 8003f94:	d116      	bne.n	8003fc4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 8003f96:	2100      	movs	r1, #0
 8003f98:	2004      	movs	r0, #4
 8003f9a:	f005 fe87 	bl	8009cac <udelay(unsigned int, unsigned int)>
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	6838      	ldr	r0, [r7, #0]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003faa:	f7ff be41 	b.w	8003c30 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003fae:	2107      	movs	r1, #7
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f005 faad 	bl	8009510 <usart_flag_get>
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d0f9      	beq.n	8003fae <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003fba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fbe:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 8003fc2:	e7dc      	b.n	8003f7e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 8003fc4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003fc8:	e7de      	b.n	8003f88 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 8003fca:	bf00      	nop
 8003fcc:	20000640 	andcs	r0, r0, r0, asr #12
 8003fd0:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003fd4:	40004800 	andmi	r4, r0, r0, lsl #16

08003fd8 <memcpy.isra.0>:
 8003fd8:	f004 bbbc 	b.w	8008754 <memcpy>

08003fdc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	6001      	str	r1, [r0, #0]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	6041      	str	r1, [r0, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	3008      	adds	r0, #8
 8003fea:	f004 fbd5 	bl	8008798 <memset>
 8003fee:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ff4:	237f      	movs	r3, #127	; 0x7f
 8003ff6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

08004000 <RDMDeviceParams::Load()>:
 8004000:	4601      	mov	r1, r0
 8004002:	6800      	ldr	r0, [r0, #0]
 8004004:	b130      	cbz	r0, 8004014 <RDMDeviceParams::Load()+0x14>
 8004006:	b508      	push	{r3, lr}
 8004008:	6803      	ldr	r3, [r0, #0]
 800400a:	3104      	adds	r1, #4
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4798      	blx	r3
 8004010:	2001      	movs	r0, #1
 8004012:	bd08      	pop	{r3, pc}
 8004014:	4770      	bx	lr

08004016 <RDMDeviceParams::Set(RDMDevice*)>:
 8004016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004018:	6843      	ldr	r3, [r0, #4]
 800401a:	460c      	mov	r4, r1
 800401c:	07d9      	lsls	r1, r3, #31
 800401e:	4605      	mov	r5, r0
 8004020:	d517      	bpl.n	8004052 <RDMDeviceParams::Set(RDMDevice*)+0x3c>
 8004022:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8004026:	7823      	ldrb	r3, [r4, #0]
 8004028:	2e20      	cmp	r6, #32
 800402a:	bf28      	it	cs
 800402c:	2620      	movcs	r6, #32
 800402e:	f100 0108 	add.w	r1, r0, #8
 8004032:	b1e3      	cbz	r3, 800406e <RDMDeviceParams::Set(RDMDevice*)+0x58>
 8004034:	f104 070b 	add.w	r7, r4, #11
 8004038:	4638      	mov	r0, r7
 800403a:	4632      	mov	r2, r6
 800403c:	f7ff ffcc 	bl	8003fd8 <memcpy.isra.0>
 8004040:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004042:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8004046:	b120      	cbz	r0, 8004052 <RDMDeviceParams::Set(RDMDevice*)+0x3c>
 8004048:	6803      	ldr	r3, [r0, #0]
 800404a:	4632      	mov	r2, r6
 800404c:	4639      	mov	r1, r7
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4798      	blx	r3
 8004052:	686b      	ldr	r3, [r5, #4]
 8004054:	079a      	lsls	r2, r3, #30
 8004056:	bf44      	itt	mi
 8004058:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800405c:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 8004060:	075b      	lsls	r3, r3, #29
 8004062:	bf44      	itt	mi
 8004064:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8004068:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 800406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406e:	4632      	mov	r2, r6
 8004070:	f104 0052 	add.w	r0, r4, #82	; 0x52
 8004074:	f7ff ffb0 	bl	8003fd8 <memcpy.isra.0>
 8004078:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 800407c:	e7e9      	b.n	8004052 <RDMDeviceParams::Set(RDMDevice*)+0x3c>

0800407e <RDMDeviceParams::Dump()>:
 800407e:	4770      	bx	lr

08004080 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8004080:	4770      	bx	lr

08004082 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8004082:	4770      	bx	lr

08004084 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 800408a:	f840 3b8c 	str.w	r3, [r0], #140
 800408e:	f7ff f9b5 	bl	80033fc <RDMSubDevices::~RDMSubDevices()>
 8004092:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8004096:	f7fe fb89 	bl	80027ac <RDMSensors::~RDMSensors()>
 800409a:	4620      	mov	r0, r4
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	0800a554 	stmdaeq	r0, {r2, r4, r6, r8, sl, sp, pc}

080040a4 <RDMDeviceResponder::~RDMDeviceResponder()>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	f7ff ffec 	bl	8004084 <RDMDeviceResponder::~RDMDeviceResponder()>
 80040ac:	4620      	mov	r0, r4
 80040ae:	f004 fad8 	bl	8008662 <operator delete(void*)>
 80040b2:	4620      	mov	r0, r4
 80040b4:	bd10      	pop	{r4, pc}
	...

080040b8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4604      	mov	r4, r0
 80040bc:	3004      	adds	r0, #4
 80040be:	460e      	mov	r6, r1
 80040c0:	4615      	mov	r5, r2
 80040c2:	f001 fa03 	bl	80054cc <RDMDevice::RDMDevice()>
 80040c6:	4620      	mov	r0, r4
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x94>)
 80040ca:	f840 3b80 	str.w	r3, [r0], #128
 80040ce:	f001 f9bd 	bl	800544c <RDMIdentify::RDMIdentify()>
 80040d2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80040d6:	f7fe fb3b 	bl	8002750 <RDMSensors::RDMSensors()>
 80040da:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80040de:	f7ff f985 	bl	80033ec <RDMSubDevices::RDMSubDevices()>
 80040e2:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 80040e4:	2100      	movs	r1, #0
 80040e6:	601c      	str	r4, [r3, #0]
 80040e8:	2365      	movs	r3, #101	; 0x65
 80040ea:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 80040ee:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80040f2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80040f6:	2301      	movs	r3, #1
 80040f8:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 80040fc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8004100:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8004104:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004108:	4293      	cmp	r3, r2
 800410a:	d119      	bne.n	8004140 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 800410c:	2100      	movs	r1, #0
 800410e:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8004112:	4293      	cmp	r3, r2
 8004114:	d117      	bne.n	8004146 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8e>
 8004116:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800411a:	f7fd fdab 	bl	8001c74 <RDMSoftwareVersion::GetVersion()>
 800411e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8004122:	f7fd fdab 	bl	8001c7c <RDMSoftwareVersion::GetVersionLength()>
 8004126:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800412a:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b91b      	cbnz	r3, 800413c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x84>
 8004134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004138:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 800413c:	4620      	mov	r0, r4
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f803 1b01 	strb.w	r1, [r3], #1
 8004144:	e7e0      	b.n	8004108 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x50>
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7e2      	b.n	8004112 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5a>
 800414c:	0800a554 	stmdaeq	r0, {r2, r4, r6, r8, sl, sp, pc}
 8004150:	20000644 	andcs	r0, r0, r4, asr #12

08004154 <RDMDeviceResponder::Init()>:
 8004154:	2301      	movs	r3, #1
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	7103      	strb	r3, [r0, #4]
 800415c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8004160:	3056      	adds	r0, #86	; 0x56
 8004162:	2a20      	cmp	r2, #32
 8004164:	bf28      	it	cs
 8004166:	2220      	movcs	r2, #32
 8004168:	4613      	mov	r3, r2
 800416a:	f104 010f 	add.w	r1, r4, #15
 800416e:	3b01      	subs	r3, #1
 8004170:	d25d      	bcs.n	800422e <RDMDeviceResponder::Init()+0xda>
 8004172:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004174:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8004178:	b110      	cbz	r0, 8004180 <RDMDeviceResponder::Init()+0x2c>
 800417a:	6803      	ldr	r3, [r0, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	f06f 050d 	mvn.w	r5, #13
 8004184:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004188:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800418c:	f104 020e 	add.w	r2, r4, #14
 8004190:	1b2d      	subs	r5, r5, r4
 8004192:	18a9      	adds	r1, r5, r2
 8004194:	4288      	cmp	r0, r1
 8004196:	d84f      	bhi.n	8004238 <RDMDeviceResponder::Init()+0xe4>
 8004198:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 800419c:	f7fd fd70 	bl	8001c80 <RDMSoftwareVersion::GetVersionId()>
 80041a0:	2201      	movs	r2, #1
 80041a2:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80041ac:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 80041b0:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 80041b4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80041b8:	0a1a      	lsrs	r2, r3, #8
 80041ba:	0e03      	lsrs	r3, r0, #24
 80041bc:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80041c0:	0c03      	lsrs	r3, r0, #16
 80041c2:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80041c6:	0a03      	lsrs	r3, r0, #8
 80041c8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80041cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80041d0:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 80041d4:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 80041de:	685d      	ldr	r5, [r3, #4]
 80041e0:	bb7d      	cbnz	r5, 8004242 <RDMDeviceResponder::Init()+0xee>
 80041e2:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
 80041e6:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80041ea:	0a03      	lsrs	r3, r0, #8
 80041ec:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80041f0:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80041f4:	2301      	movs	r3, #1
 80041f6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80041fa:	0a33      	lsrs	r3, r6, #8
 80041fc:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8004200:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8004204:	b2c0      	uxtb	r0, r0
 8004206:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800420a:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800420e:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 8004212:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004216:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800421a:	4293      	cmp	r3, r2
 800421c:	d12a      	bne.n	8004274 <RDMDeviceResponder::Init()+0x120>
 800421e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004222:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004226:	4413      	add	r3, r2
 8004228:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8004232:	f800 5c48 	strb.w	r5, [r0, #-72]
 8004236:	e79a      	b.n	800416e <RDMDeviceResponder::Init()+0x1a>
 8004238:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800423c:	440b      	add	r3, r1
 800423e:	b29b      	uxth	r3, r3
 8004240:	e7a7      	b.n	8004192 <RDMDeviceResponder::Init()+0x3e>
 8004242:	682b      	ldr	r3, [r5, #0]
 8004244:	4628      	mov	r0, r5
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	4798      	blx	r3
 800424a:	0a00      	lsrs	r0, r0, #8
 800424c:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	4628      	mov	r0, r5
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	4798      	blx	r3
 8004258:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	4628      	mov	r0, r5
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	4798      	blx	r3
 8004264:	0a00      	lsrs	r0, r0, #8
 8004266:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	4628      	mov	r0, r5
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	4798      	blx	r3
 8004272:	e7bf      	b.n	80041f4 <RDMDeviceResponder::Init()+0xa0>
 8004274:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004278:	7499      	strb	r1, [r3, #18]
 800427a:	e7ce      	b.n	800421a <RDMDeviceResponder::Init()+0xc6>

0800427c <RDMDeviceResponder::Print()>:
 800427c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800427e:	4604      	mov	r4, r0
 8004280:	3004      	adds	r0, #4
 8004282:	f001 f997 	bl	80055b4 <RDMDevice::Print()>
 8004286:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800428a:	481c      	ldr	r0, [pc, #112]	; (80042fc <RDMDeviceResponder::Print()+0x80>)
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8004290:	f7fd fff6 	bl	8002280 <printf>
 8004294:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8004298:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 800429c:	4818      	ldr	r0, [pc, #96]	; (8004300 <RDMDeviceResponder::Print()+0x84>)
 800429e:	f7fd ffef 	bl	8002280 <printf>
 80042a2:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80042a6:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80042aa:	4816      	ldr	r0, [pc, #88]	; (8004304 <RDMDeviceResponder::Print()+0x88>)
 80042ac:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80042b0:	f7fd ffe6 	bl	8002280 <printf>
 80042b4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80042b8:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 80042bc:	3508      	adds	r5, #8
 80042be:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80042c2:	4811      	ldr	r0, [pc, #68]	; (8004308 <RDMDeviceResponder::Print()+0x8c>)
 80042c4:	f7fd ffdc 	bl	8002280 <printf>
 80042c8:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 80042cc:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80042d0:	b2f3      	uxtb	r3, r6
 80042d2:	9500      	str	r5, [sp, #0]
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <RDMDeviceResponder::Print()+0x90>)
 80042d6:	f7fd ffd3 	bl	8002280 <printf>
 80042da:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80042de:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80042e2:	480b      	ldr	r0, [pc, #44]	; (8004310 <RDMDeviceResponder::Print()+0x94>)
 80042e4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80042e8:	f7fd ffca 	bl	8002280 <printf>
 80042ec:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 80042f0:	4808      	ldr	r0, [pc, #32]	; (8004314 <RDMDeviceResponder::Print()+0x98>)
 80042f2:	b002      	add	sp, #8
 80042f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042f8:	f7fd bfc2 	b.w	8002280 <printf>
 80042fc:	0800a498 	stmdaeq	r0, {r3, r4, r7, sl, sp, pc}
 8004300:	0800a4b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, sp, pc}
 8004304:	0800a4ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, sp, pc}
 8004308:	0800a4e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, sp, pc}
 800430c:	0800a4fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, sp, pc}
 8004310:	0800a51c 	stmdaeq	r0, {r2, r3, r4, r8, sl, sp, pc}
 8004314:	0800a534 	stmdaeq	r0, {r2, r4, r5, r8, sl, sp, pc}

08004318 <memcmp>:
 8004318:	b510      	push	{r4, lr}
 800431a:	3901      	subs	r1, #1
 800431c:	4402      	add	r2, r0
 800431e:	4290      	cmp	r0, r2
 8004320:	d101      	bne.n	8004326 <memcmp+0xe>
 8004322:	2000      	movs	r0, #0
 8004324:	e005      	b.n	8004332 <memcmp+0x1a>
 8004326:	7803      	ldrb	r3, [r0, #0]
 8004328:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800432c:	42a3      	cmp	r3, r4
 800432e:	d001      	beq.n	8004334 <memcmp+0x1c>
 8004330:	1b18      	subs	r0, r3, r4
 8004332:	bd10      	pop	{r4, pc}
 8004334:	3001      	adds	r0, #1
 8004336:	e7f2      	b.n	800431e <memcmp+0x6>

08004338 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 8004338:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800433c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8004340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004344:	3b01      	subs	r3, #1
 8004346:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800434a:	6858      	ldr	r0, [r3, #4]
 800434c:	6803      	ldr	r3, [r0, #0]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	4718      	bx	r3

08004352 <memcpy.isra.0>:
 8004352:	3801      	subs	r0, #1
 8004354:	440a      	add	r2, r1
 8004356:	4291      	cmp	r1, r2
 8004358:	d100      	bne.n	800435c <memcpy.isra.0+0xa>
 800435a:	4770      	bx	lr
 800435c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004360:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004364:	e7f7      	b.n	8004356 <memcpy.isra.0+0x4>

08004366 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	790d      	ldrb	r5, [r1, #4]
 800436a:	7803      	ldrb	r3, [r0, #0]
 800436c:	2d20      	cmp	r5, #32
 800436e:	4604      	mov	r4, r0
 8004370:	bf28      	it	cs
 8004372:	2520      	movcs	r5, #32
 8004374:	6809      	ldr	r1, [r1, #0]
 8004376:	b183      	cbz	r3, 800439a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x34>
 8004378:	f100 060b 	add.w	r6, r0, #11
 800437c:	4630      	mov	r0, r6
 800437e:	462a      	mov	r2, r5
 8004380:	f7ff ffe7 	bl	8004352 <memcpy.isra.0>
 8004384:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004386:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
 800438a:	b160      	cbz	r0, 80043a6 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x40>
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	462a      	mov	r2, r5
 8004390:	4631      	mov	r1, r6
 8004392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4718      	bx	r3
 800439a:	462a      	mov	r2, r5
 800439c:	3052      	adds	r0, #82	; 0x52
 800439e:	f7ff ffd8 	bl	8004352 <memcpy.isra.0>
 80043a2:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
 80043a6:	bd70      	pop	{r4, r5, r6, pc}

080043a8 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4604      	mov	r4, r0
 80043ac:	1e50      	subs	r0, r2, #1
 80043ae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80043b2:	4615      	mov	r5, r2
 80043b4:	d221      	bcs.n	80043fa <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80043b6:	b129      	cbz	r1, 80043c4 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 80043b8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80043bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043c0:	f7ff b85a 	b.w	8003478 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 80043c4:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 80043c8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80043cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d6:	6858      	ldr	r0, [r3, #4]
 80043d8:	b178      	cbz	r0, 80043fa <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80043da:	6803      	ldr	r3, [r0, #0]
 80043dc:	4629      	mov	r1, r5
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4798      	blx	r3
 80043e2:	b120      	cbz	r0, 80043ee <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 80043e4:	0a2b      	lsrs	r3, r5, #8
 80043e6:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 80043ea:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	4620      	mov	r0, r4
 80043f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4718      	bx	r3
 80043fa:	bd70      	pop	{r4, r5, r6, pc}

080043fc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 80043fc:	b111      	cbz	r1, 8004404 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 80043fe:	308c      	adds	r0, #140	; 0x8c
 8004400:	f7ff b864 	b.w	80034cc <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 8004404:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004408:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800440c:	3a01      	subs	r2, #1
 800440e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004412:	4770      	bx	lr

08004414 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 8004414:	b111      	cbz	r1, 800441c <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 8004416:	308c      	adds	r0, #140	; 0x8c
 8004418:	f7ff b850 	b.w	80034bc <RDMSubDevices::GetPersonalityCount(unsigned short)>
 800441c:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 8004420:	4770      	bx	lr

08004422 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	4604      	mov	r4, r0
 8004426:	b121      	cbz	r1, 8004432 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 8004428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800442c:	308c      	adds	r0, #140	; 0x8c
 800442e:	f7ff b83c 	b.w	80034aa <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004432:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8004436:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800443a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800443e:	3a01      	subs	r2, #1
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	685d      	ldr	r5, [r3, #4]
 8004446:	b305      	cbz	r5, 800448a <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	4628      	mov	r0, r5
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	4798      	blx	r3
 8004450:	0a00      	lsrs	r0, r0, #8
 8004452:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	4628      	mov	r0, r5
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	4798      	blx	r3
 800445e:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	4628      	mov	r0, r5
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	4798      	blx	r3
 800446a:	0a00      	lsrs	r0, r0, #8
 800446c:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	4628      	mov	r0, r5
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	4798      	blx	r3
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800447e:	4629      	mov	r1, r5
 8004480:	4620      	mov	r0, r4
 8004482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4718      	bx	r3
 800448a:	bd70      	pop	{r4, r5, r6, pc}

0800448c <RDMHandler::RDMHandler(bool)>:
 800448c:	2200      	movs	r2, #0
 800448e:	7001      	strb	r1, [r0, #0]
 8004490:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004494:	7042      	strb	r2, [r0, #1]
 8004496:	4770      	bx	lr

08004498 <RDMHandler::HandleString(char const*, unsigned int)>:
 8004498:	6883      	ldr	r3, [r0, #8]
 800449a:	f803 2f17 	strb.w	r2, [r3, #23]!
 800449e:	440a      	add	r2, r1
 80044a0:	4291      	cmp	r1, r2
 80044a2:	d100      	bne.n	80044a6 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 80044a4:	4770      	bx	lr
 80044a6:	f811 0b01 	ldrb.w	r0, [r1], #1
 80044aa:	f803 0f01 	strb.w	r0, [r3, #1]!
 80044ae:	e7f7      	b.n	80044a0 <RDMHandler::HandleString(char const*, unsigned int)+0x8>

080044b0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80044b6:	25cc      	movs	r5, #204	; 0xcc
 80044b8:	701d      	strb	r5, [r3, #0]
 80044ba:	7825      	ldrb	r5, [r4, #0]
 80044bc:	705d      	strb	r5, [r3, #1]
 80044be:	7ba5      	ldrb	r5, [r4, #14]
 80044c0:	73dd      	strb	r5, [r3, #15]
 80044c2:	2500      	movs	r5, #0
 80044c4:	745d      	strb	r5, [r3, #17]
 80044c6:	7c65      	ldrb	r5, [r4, #17]
 80044c8:	749d      	strb	r5, [r3, #18]
 80044ca:	7ca5      	ldrb	r5, [r4, #18]
 80044cc:	74dd      	strb	r5, [r3, #19]
 80044ce:	7ce5      	ldrb	r5, [r4, #19]
 80044d0:	3501      	adds	r5, #1
 80044d2:	751d      	strb	r5, [r3, #20]
 80044d4:	7d25      	ldrb	r5, [r4, #20]
 80044d6:	755d      	strb	r5, [r3, #21]
 80044d8:	7d65      	ldrb	r5, [r4, #21]
 80044da:	759d      	strb	r5, [r3, #22]
 80044dc:	b119      	cbz	r1, 80044e6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 80044de:	1e4d      	subs	r5, r1, #1
 80044e0:	2d01      	cmp	r5, #1
 80044e2:	d921      	bls.n	8004528 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	7dda      	ldrb	r2, [r3, #23]
 80044e8:	7419      	strb	r1, [r3, #16]
 80044ea:	3218      	adds	r2, #24
 80044ec:	709a      	strb	r2, [r3, #2]
 80044ee:	4a15      	ldr	r2, [pc, #84]	; (8004544 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 80044f0:	1de1      	adds	r1, r4, #7
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	1c9d      	adds	r5, r3, #2
 80044f6:	3204      	adds	r2, #4
 80044f8:	340d      	adds	r4, #13
 80044fa:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80044fe:	f805 6f01 	strb.w	r6, [r5, #1]!
 8004502:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8004506:	42a1      	cmp	r1, r4
 8004508:	71ae      	strb	r6, [r5, #6]
 800450a:	d1f6      	bne.n	80044fa <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800450c:	2200      	movs	r2, #0
 800450e:	7899      	ldrb	r1, [r3, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	6884      	ldr	r4, [r0, #8]
 8004514:	428a      	cmp	r2, r1
 8004516:	eb04 0502 	add.w	r5, r4, r2
 800451a:	d30e      	bcc.n	800453a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 800451c:	0a1a      	lsrs	r2, r3, #8
 800451e:	702a      	strb	r2, [r5, #0]
 8004520:	6882      	ldr	r2, [r0, #8]
 8004522:	440a      	add	r2, r1
 8004524:	7053      	strb	r3, [r2, #1]
 8004526:	e7dd      	b.n	80044e4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 8004528:	7419      	strb	r1, [r3, #16]
 800452a:	2102      	movs	r1, #2
 800452c:	251a      	movs	r5, #26
 800452e:	75d9      	strb	r1, [r3, #23]
 8004530:	0a11      	lsrs	r1, r2, #8
 8004532:	709d      	strb	r5, [r3, #2]
 8004534:	7619      	strb	r1, [r3, #24]
 8004536:	765a      	strb	r2, [r3, #25]
 8004538:	e7d9      	b.n	80044ee <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800453a:	5ca5      	ldrb	r5, [r4, r2]
 800453c:	3201      	adds	r2, #1
 800453e:	442b      	add	r3, r5
 8004540:	b29b      	uxth	r3, r3
 8004542:	e7e7      	b.n	8004514 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 8004544:	20000644 	andcs	r0, r0, r4, asr #12

08004548 <RDMHandler::RespondMessageAck()>:
 8004548:	6843      	ldr	r3, [r0, #4]
 800454a:	7d9a      	ldrb	r2, [r3, #22]
 800454c:	b90a      	cbnz	r2, 8004552 <RDMHandler::RespondMessageAck()+0xa>
 800454e:	2218      	movs	r2, #24
 8004550:	705a      	strb	r2, [r3, #1]
 8004552:	2200      	movs	r2, #0
 8004554:	4611      	mov	r1, r2
 8004556:	f7ff bfab 	b.w	80044b0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

0800455c <RDMHandler::GetSupportedParameters(unsigned short)>:
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 800455e:	2900      	cmp	r1, #0
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8004562:	bf08      	it	eq
 8004564:	461a      	moveq	r2, r3
 8004566:	b4f0      	push	{r4, r5, r6, r7}
 8004568:	bf14      	ite	ne
 800456a:	2108      	movne	r1, #8
 800456c:	211e      	moveq	r1, #30
 800456e:	2518      	movs	r5, #24
 8004570:	4614      	mov	r4, r2
 8004572:	2300      	movs	r3, #0
 8004574:	fb05 2501 	mla	r5, r5, r1, r2
 8004578:	7d66      	ldrb	r6, [r4, #21]
 800457a:	b10e      	cbz	r6, 8004580 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 800457c:	3301      	adds	r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	3418      	adds	r4, #24
 8004582:	42ac      	cmp	r4, r5
 8004584:	d1f8      	bne.n	8004578 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 8004586:	6886      	ldr	r6, [r0, #8]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	75f3      	strb	r3, [r6, #23]
 800458c:	230c      	movs	r3, #12
 800458e:	4359      	muls	r1, r3
 8004590:	2300      	movs	r3, #0
 8004592:	461c      	mov	r4, r3
 8004594:	f102 0c15 	add.w	ip, r2, #21
 8004598:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 800459c:	b14d      	cbz	r5, 80045b2 <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 800459e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80045a2:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80045a6:	0a2d      	lsrs	r5, r5, #8
 80045a8:	763d      	strb	r5, [r7, #24]
 80045aa:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80045ae:	3401      	adds	r4, #1
 80045b0:	767d      	strb	r5, [r7, #25]
 80045b2:	330c      	adds	r3, #12
 80045b4:	4299      	cmp	r1, r3
 80045b6:	d1ef      	bne.n	8004598 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 80045b8:	bcf0      	pop	{r4, r5, r6, r7}
 80045ba:	f7ff bfc5 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80045be:	bf00      	nop
 80045c0:	0800a580 	stmdaeq	r0, {r7, r8, sl, sp, pc}
 80045c4:	0800a850 	stmdaeq	r0, {r4, r6, fp, sp, pc}

080045c8 <RDMHandler::GetDeviceInfo(unsigned short)>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4b18      	ldr	r3, [pc, #96]	; (800462c <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 80045cc:	4605      	mov	r5, r0
 80045ce:	681c      	ldr	r4, [r3, #0]
 80045d0:	b349      	cbz	r1, 8004626 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 80045d2:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80045d6:	f7fe ff29 	bl	800342c <RDMSubDevices::GetInfo(unsigned short)>
 80045da:	b1b8      	cbz	r0, 800460c <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 80045dc:	8803      	ldrh	r3, [r0, #0]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 80045e4:	8803      	ldrh	r3, [r0, #0]
 80045e6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 80045ea:	7903      	ldrb	r3, [r0, #4]
 80045ec:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80045f0:	7943      	ldrb	r3, [r0, #5]
 80045f2:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 80045f6:	8843      	ldrh	r3, [r0, #2]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 80045fe:	8843      	ldrh	r3, [r0, #2]
 8004600:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 8004604:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8004608:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 800460c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8004610:	2213      	movs	r2, #19
 8004612:	68a8      	ldr	r0, [r5, #8]
 8004614:	75c2      	strb	r2, [r0, #23]
 8004616:	3018      	adds	r0, #24
 8004618:	f7ff fe9b 	bl	8004352 <memcpy.isra.0>
 800461c:	4628      	mov	r0, r5
 800461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004622:	f7ff bf91 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004626:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 800462a:	e7f1      	b.n	8004610 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 800462c:	20000644 	andcs	r0, r0, r4, asr #12

08004630 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	2301      	movs	r3, #1
 8004634:	6886      	ldr	r6, [r0, #8]
 8004636:	4605      	mov	r5, r0
 8004638:	75f3      	strb	r3, [r6, #23]
 800463a:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 800463c:	681c      	ldr	r4, [r3, #0]
 800463e:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8004642:	b37b      	cbz	r3, 80046a4 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8004644:	f06f 0c0d 	mvn.w	ip, #13
 8004648:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 800464c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004650:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8004654:	f104 020e 	add.w	r2, r4, #14
 8004658:	ebac 0c04 	sub.w	ip, ip, r4
 800465c:	eb0c 0702 	add.w	r7, ip, r2
 8004660:	4287      	cmp	r7, r0
 8004662:	d30a      	bcc.n	800467a <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 8004664:	4299      	cmp	r1, r3
 8004666:	d00d      	beq.n	8004684 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8004668:	2300      	movs	r3, #0
 800466a:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800466e:	7633      	strb	r3, [r6, #24]
 8004670:	4628      	mov	r0, r5
 8004672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004676:	f7ff bf67 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 800467a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800467e:	443b      	add	r3, r7
 8004680:	b29b      	uxth	r3, r3
 8004682:	e7eb      	b.n	800465c <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 8004684:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004688:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800468c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8004690:	440b      	add	r3, r1
 8004692:	429a      	cmp	r2, r3
 8004694:	d1e8      	bne.n	8004668 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 8004696:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800469a:	f7fe ff5b 	bl	8003554 <RDMSubDevices::GetFactoryDefaults()>
 800469e:	4603      	mov	r3, r0
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d0e2      	beq.n	800466a <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80046a4:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80046a8:	e7e1      	b.n	800466e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80046aa:	bf00      	nop
 80046ac:	20000644 	andcs	r0, r0, r4, asr #12

080046b0 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 80046b0:	2102      	movs	r1, #2
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80046ba:	6883      	ldr	r3, [r0, #8]
 80046bc:	75d9      	strb	r1, [r3, #23]
 80046be:	0a11      	lsrs	r1, r2, #8
 80046c0:	7619      	strb	r1, [r3, #24]
 80046c2:	765a      	strb	r2, [r3, #25]
 80046c4:	f7ff bf40 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80046c8:	20000644 	andcs	r0, r0, r4, asr #12

080046cc <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4604      	mov	r4, r0
 80046d0:	220a      	movs	r2, #10
 80046d2:	4904      	ldr	r1, [pc, #16]	; (80046e4 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 80046d4:	f7ff fee0 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 80046d8:	4620      	mov	r0, r4
 80046da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046de:	f7ff bf33 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80046e2:	bf00      	nop
 80046e4:	0800a564 	stmdaeq	r0, {r2, r5, r6, r8, sl, sp, pc}

080046e8 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	4604      	mov	r4, r0
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 80046f4:	3130      	adds	r1, #48	; 0x30
 80046f6:	f7ff fecf 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 80046fa:	4620      	mov	r0, r4
 80046fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004700:	f7ff bf22 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004704:	20000644 	andcs	r0, r0, r4, asr #12

08004708 <RDMHandler::GetDeviceLabel(unsigned short)>:
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800470a:	b513      	push	{r0, r1, r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	b171      	cbz	r1, 8004730 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8004712:	466a      	mov	r2, sp
 8004714:	308c      	adds	r0, #140	; 0x8c
 8004716:	f7fe fe91 	bl	800343c <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 800471a:	4620      	mov	r0, r4
 800471c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004720:	9900      	ldr	r1, [sp, #0]
 8004722:	f7ff feb9 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 8004726:	4620      	mov	r0, r4
 8004728:	f7ff ff0e 	bl	8004548 <RDMHandler::RespondMessageAck()>
 800472c:	b002      	add	sp, #8
 800472e:	bd10      	pop	{r4, pc}
 8004730:	f100 030f 	add.w	r3, r0, #15
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800473a:	f88d 3004 	strb.w	r3, [sp, #4]
 800473e:	e7ec      	b.n	800471a <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8004740:	20000644 	andcs	r0, r0, r4, asr #12

08004744 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8004744:	b510      	push	{r4, lr}
 8004746:	4604      	mov	r4, r0
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 8004750:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004754:	f7ff fea0 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 8004758:	4620      	mov	r0, r4
 800475a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475e:	f7ff bef3 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004762:	bf00      	nop
 8004764:	20000644 	andcs	r0, r0, r4, asr #12

08004768 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8004768:	2201      	movs	r2, #1
 800476a:	6883      	ldr	r3, [r0, #8]
 800476c:	75da      	strb	r2, [r3, #23]
 800476e:	4a02      	ldr	r2, [pc, #8]	; (8004778 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	761a      	strb	r2, [r3, #24]
 8004774:	f7ff bee8 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004778:	20000648 	andcs	r0, r0, r8, asr #12

0800477c <RDMHandler::GetLanguage(unsigned short)>:
 800477c:	b510      	push	{r4, lr}
 800477e:	4604      	mov	r4, r0
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8004782:	2202      	movs	r2, #2
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	31c3      	adds	r1, #195	; 0xc3
 8004788:	f7ff fe86 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 800478c:	4620      	mov	r0, r4
 800478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004792:	f7ff bed9 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004796:	bf00      	nop
 8004798:	20000644 	andcs	r0, r0, r4, asr #12

0800479c <RDMHandler::GetPersonality(unsigned short)>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	4f0d      	ldr	r7, [pc, #52]	; (80047d4 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 80047a0:	4604      	mov	r4, r0
 80047a2:	460e      	mov	r6, r1
 80047a4:	6838      	ldr	r0, [r7, #0]
 80047a6:	b189      	cbz	r1, 80047cc <RDMHandler::GetPersonality(unsigned short)+0x30>
 80047a8:	308c      	adds	r0, #140	; 0x8c
 80047aa:	f7fe fe76 	bl	800349a <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 80047ae:	4605      	mov	r5, r0
 80047b0:	4631      	mov	r1, r6
 80047b2:	6838      	ldr	r0, [r7, #0]
 80047b4:	f7ff fe2e 	bl	8004414 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80047b8:	2202      	movs	r2, #2
 80047ba:	68a3      	ldr	r3, [r4, #8]
 80047bc:	7658      	strb	r0, [r3, #25]
 80047be:	75da      	strb	r2, [r3, #23]
 80047c0:	761d      	strb	r5, [r3, #24]
 80047c2:	4620      	mov	r0, r4
 80047c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047c8:	f7ff bebe 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80047cc:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 80047d0:	e7ee      	b.n	80047b0 <RDMHandler::GetPersonality(unsigned short)+0x14>
 80047d2:	bf00      	nop
 80047d4:	20000644 	andcs	r0, r0, r4, asr #12

080047d8 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 80047da:	b510      	push	{r4, lr}
 80047dc:	4604      	mov	r4, r0
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	b169      	cbz	r1, 80047fe <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 80047e2:	308c      	adds	r0, #140	; 0x8c
 80047e4:	f7fe fe40 	bl	8003468 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 80047e8:	2202      	movs	r2, #2
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	75da      	strb	r2, [r3, #23]
 80047ee:	0a02      	lsrs	r2, r0, #8
 80047f0:	7658      	strb	r0, [r3, #25]
 80047f2:	761a      	strb	r2, [r3, #24]
 80047f4:	4620      	mov	r0, r4
 80047f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fa:	f7ff bea5 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80047fe:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8004802:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8004806:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800480a:	b298      	uxth	r0, r3
 800480c:	e7ec      	b.n	80047e8 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 800480e:	bf00      	nop
 8004810:	20000644 	andcs	r0, r0, r4, asr #12

08004814 <RDMHandler::GetDeviceHours(unsigned short)>:
 8004814:	2104      	movs	r1, #4
 8004816:	4b07      	ldr	r3, [pc, #28]	; (8004834 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 800481c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004820:	6883      	ldr	r3, [r0, #8]
 8004822:	75d9      	strb	r1, [r3, #23]
 8004824:	2100      	movs	r1, #0
 8004826:	7619      	strb	r1, [r3, #24]
 8004828:	7659      	strb	r1, [r3, #25]
 800482a:	0a11      	lsrs	r1, r2, #8
 800482c:	7699      	strb	r1, [r3, #26]
 800482e:	76da      	strb	r2, [r3, #27]
 8004830:	f7ff be8a 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004834:	2000181c 	andcs	r1, r0, ip, lsl r8
 8004838:	0036ee80 	eorseq	lr, r6, r0, lsl #29

0800483c <RDMHandler::GetDisplayInvert(unsigned short)>:
 800483c:	2301      	movs	r3, #1
 800483e:	6882      	ldr	r2, [r0, #8]
 8004840:	75d3      	strb	r3, [r2, #23]
 8004842:	4b04      	ldr	r3, [pc, #16]	; (8004854 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	b103      	cbz	r3, 800484c <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 800484a:	79db      	ldrb	r3, [r3, #7]
 800484c:	7613      	strb	r3, [r2, #24]
 800484e:	f7ff be7b 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004852:	bf00      	nop
 8004854:	200016f0 	strdcs	r1, [r0], -r0

08004858 <RDMHandler::GetDisplayLevel(unsigned short)>:
 8004858:	2301      	movs	r3, #1
 800485a:	6882      	ldr	r2, [r0, #8]
 800485c:	75d3      	strb	r3, [r2, #23]
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	b103      	cbz	r3, 8004868 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8004866:	799b      	ldrb	r3, [r3, #6]
 8004868:	7613      	strb	r3, [r2, #24]
 800486a:	f7ff be6d 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 800486e:	bf00      	nop
 8004870:	200016f0 	strdcs	r1, [r0], -r0

08004874 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8004874:	b510      	push	{r4, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	a901      	add	r1, sp, #4
 8004880:	f003 fd4b 	bl	800831a <Hardware::GetTime(tm*)>
 8004884:	9a06      	ldr	r2, [sp, #24]
 8004886:	68a3      	ldr	r3, [r4, #8]
 8004888:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 800488c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004890:	765a      	strb	r2, [r3, #25]
 8004892:	9a05      	ldr	r2, [sp, #20]
 8004894:	4620      	mov	r0, r4
 8004896:	3201      	adds	r2, #1
 8004898:	769a      	strb	r2, [r3, #26]
 800489a:	9a04      	ldr	r2, [sp, #16]
 800489c:	7619      	strb	r1, [r3, #24]
 800489e:	76da      	strb	r2, [r3, #27]
 80048a0:	9a03      	ldr	r2, [sp, #12]
 80048a2:	771a      	strb	r2, [r3, #28]
 80048a4:	9a02      	ldr	r2, [sp, #8]
 80048a6:	775a      	strb	r2, [r3, #29]
 80048a8:	9a01      	ldr	r2, [sp, #4]
 80048aa:	779a      	strb	r2, [r3, #30]
 80048ac:	2207      	movs	r2, #7
 80048ae:	75da      	strb	r2, [r3, #23]
 80048b0:	f7ff fe4a 	bl	8004548 <RDMHandler::RespondMessageAck()>
 80048b4:	b00a      	add	sp, #40	; 0x28
 80048b6:	bd10      	pop	{r4, pc}
 80048b8:	200017e0 	andcs	r1, r0, r0, ror #15

080048bc <RDMHandler::GetPowerState(unsigned short)>:
 80048bc:	2201      	movs	r2, #1
 80048be:	6883      	ldr	r3, [r0, #8]
 80048c0:	75da      	strb	r2, [r3, #23]
 80048c2:	22ff      	movs	r2, #255	; 0xff
 80048c4:	761a      	strb	r2, [r3, #24]
 80048c6:	f7ff be3f 	b.w	8004548 <RDMHandler::RespondMessageAck()>

080048ca <RDMHandler::GetPerformSelfTest(unsigned short)>:
 80048ca:	b538      	push	{r3, r4, r5, lr}
 80048cc:	2301      	movs	r3, #1
 80048ce:	6885      	ldr	r5, [r0, #8]
 80048d0:	4604      	mov	r4, r0
 80048d2:	75eb      	strb	r3, [r5, #23]
 80048d4:	f7fd f8b2 	bl	8001a3c <rdm::selftest::Get()>
 80048d8:	3800      	subs	r0, #0
 80048da:	bf18      	it	ne
 80048dc:	2001      	movne	r0, #1
 80048de:	7628      	strb	r0, [r5, #24]
 80048e0:	4620      	mov	r0, r4
 80048e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e6:	f7ff be2f 	b.w	8004548 <RDMHandler::RespondMessageAck()>
	...

080048ec <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 80048ec:	b510      	push	{r4, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	2208      	movs	r2, #8
 80048f2:	4904      	ldr	r1, [pc, #16]	; (8004904 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 80048f4:	f7ff fdd0 	bl	8004498 <RDMHandler::HandleString(char const*, unsigned int)>
 80048f8:	4620      	mov	r0, r4
 80048fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048fe:	f7ff be23 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004902:	bf00      	nop
 8004904:	0800a56f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, sl, sp, pc}

08004908 <RDMHandler::GetSlotInfo(unsigned short)>:
 8004908:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004994 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8004910:	4606      	mov	r6, r0
 8004912:	6887      	ldr	r7, [r0, #8]
 8004914:	4689      	mov	r9, r1
 8004916:	f8d8 0000 	ldr.w	r0, [r8]
 800491a:	b1b9      	cbz	r1, 800494c <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 800491c:	308c      	adds	r0, #140	; 0x8c
 800491e:	f7fe fdb4 	bl	800348a <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 8004922:	f04f 0a00 	mov.w	sl, #0
 8004926:	282e      	cmp	r0, #46	; 0x2e
 8004928:	bf28      	it	cs
 800492a:	202e      	movcs	r0, #46	; 0x2e
 800492c:	4654      	mov	r4, sl
 800492e:	b285      	uxth	r5, r0
 8004930:	fa1f f18a 	uxth.w	r1, sl
 8004934:	42a9      	cmp	r1, r5
 8004936:	d311      	bcc.n	800495c <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 8004938:	b2e4      	uxtb	r4, r4
 800493a:	75fc      	strb	r4, [r7, #23]
 800493c:	3418      	adds	r4, #24
 800493e:	4630      	mov	r0, r6
 8004940:	70bc      	strb	r4, [r7, #2]
 8004942:	f7ff fe01 	bl	8004548 <RDMHandler::RespondMessageAck()>
 8004946:	b002      	add	sp, #8
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004950:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 8004954:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 8004958:	b298      	uxth	r0, r3
 800495a:	e7e2      	b.n	8004922 <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 800495c:	f1b9 0f00 	cmp.w	r9, #0
 8004960:	d115      	bne.n	800498e <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8004962:	f8d8 0000 	ldr.w	r0, [r8]
 8004966:	aa01      	add	r2, sp, #4
 8004968:	f7ff fce6 	bl	8004338 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 800496c:	b178      	cbz	r0, 800498e <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 800496e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004972:	193a      	adds	r2, r7, r4
 8004974:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8004978:	7693      	strb	r3, [r2, #26]
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	0a08      	lsrs	r0, r1, #8
 800497e:	443b      	add	r3, r7
 8004980:	f882 9018 	strb.w	r9, [r2, #24]
 8004984:	f882 a019 	strb.w	sl, [r2, #25]
 8004988:	76d0      	strb	r0, [r2, #27]
 800498a:	3405      	adds	r4, #5
 800498c:	7619      	strb	r1, [r3, #24]
 800498e:	f10a 0a01 	add.w	sl, sl, #1
 8004992:	e7cd      	b.n	8004930 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8004994:	20000644 	andcs	r0, r0, r4, asr #12

08004998 <RDMHandler::RespondMessageNack(unsigned short)>:
 8004998:	460a      	mov	r2, r1
 800499a:	2102      	movs	r1, #2
 800499c:	f7ff bd88 	b.w	80044b0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

080049a0 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 80049a0:	b510      	push	{r4, lr}
 80049a2:	6843      	ldr	r3, [r0, #4]
 80049a4:	4604      	mov	r4, r0
 80049a6:	7d9a      	ldrb	r2, [r3, #22]
 80049a8:	2a01      	cmp	r2, #1
 80049aa:	d004      	beq.n	80049b6 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 80049ac:	2101      	movs	r1, #1
 80049ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b2:	f7ff bff1 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 80049b6:	7ddb      	ldrb	r3, [r3, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d003      	beq.n	80049c4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80049bc:	2bff      	cmp	r3, #255	; 0xff
 80049be:	d001      	beq.n	80049c4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80049c0:	2106      	movs	r1, #6
 80049c2:	e7f4      	b.n	80049ae <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80049c4:	2100      	movs	r1, #0
 80049c6:	68a2      	ldr	r2, [r4, #8]
 80049c8:	2bff      	cmp	r3, #255	; 0xff
 80049ca:	75d1      	strb	r1, [r2, #23]
 80049cc:	d102      	bne.n	80049d4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 80049ce:	2104      	movs	r1, #4
 80049d0:	4620      	mov	r0, r4
 80049d2:	e7ec      	b.n	80049ae <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	f003 fcb6 	bl	8008348 <Hardware::Reboot()>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d0f6      	beq.n	80049ce <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	bf00      	nop
 80049e4:	200017e0 	andcs	r1, r0, r0, ror #15

080049e8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	6843      	ldr	r3, [r0, #4]
 80049ec:	460d      	mov	r5, r1
 80049ee:	7d99      	ldrb	r1, [r3, #22]
 80049f0:	4604      	mov	r4, r0
 80049f2:	2901      	cmp	r1, #1
 80049f4:	d004      	beq.n	8004a00 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 80049f6:	2101      	movs	r1, #1
 80049f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049fc:	f7ff bfcc 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a00:	7ddb      	ldrb	r3, [r3, #23]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d901      	bls.n	8004a0a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 8004a06:	2106      	movs	r1, #6
 8004a08:	e7f6      	b.n	80049f8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 8004a0a:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8004a0c:	4f12      	ldr	r7, [pc, #72]	; (8004a58 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8004a0e:	6816      	ldr	r6, [r2, #0]
 8004a10:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8004a12:	6810      	ldr	r0, [r2, #0]
 8004a14:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 8004a16:	b983      	cbnz	r3, 8004a3a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 8004a18:	2102      	movs	r1, #2
 8004a1a:	7013      	strb	r3, [r2, #0]
 8004a1c:	f003 fbd8 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 8004a20:	7839      	ldrb	r1, [r7, #0]
 8004a22:	b111      	cbz	r1, 8004a2a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7fd f8dd 	bl	8001be4 <RDMIdentify::Off(rdm::identify::Mode)>
 8004a2a:	b98d      	cbnz	r5, 8004a50 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 8004a2c:	68a3      	ldr	r3, [r4, #8]
 8004a2e:	4620      	mov	r0, r4
 8004a30:	75dd      	strb	r5, [r3, #23]
 8004a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a36:	f7ff bd87 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004a3a:	7011      	strb	r1, [r2, #0]
 8004a3c:	2104      	movs	r1, #4
 8004a3e:	f003 fbc7 	bl	80081d0 <LedBlink::SetMode(ledblink::Mode)>
 8004a42:	7839      	ldrb	r1, [r7, #0]
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d0f0      	beq.n	8004a2a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7fd f8ad 	bl	8001ba8 <RDMIdentify::On(rdm::identify::Mode)>
 8004a4e:	e7ec      	b.n	8004a2a <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000064c 	andcs	r0, r0, ip, asr #12
 8004a58:	20000649 	andcs	r0, r0, r9, asr #12
 8004a5c:	200017dc 	ldrdcs	r1, [r0], -ip
 8004a60:	20000648 	andcs	r0, r0, r8, asr #12

08004a64 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004a64:	b470      	push	{r4, r5, r6}
 8004a66:	6842      	ldr	r2, [r0, #4]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	7d94      	ldrb	r4, [r2, #22]
 8004a6c:	2c02      	cmp	r4, #2
 8004a6e:	d003      	beq.n	8004a78 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8004a70:	2101      	movs	r1, #1
 8004a72:	bc70      	pop	{r4, r5, r6}
 8004a74:	f7ff bf90 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a78:	4c0b      	ldr	r4, [pc, #44]	; (8004aa8 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 8004a7a:	7dd6      	ldrb	r6, [r2, #23]
 8004a7c:	6824      	ldr	r4, [r4, #0]
 8004a7e:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 8004a82:	42ae      	cmp	r6, r5
 8004a84:	d104      	bne.n	8004a90 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8004a86:	7e15      	ldrb	r5, [r2, #24]
 8004a88:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 8004a8c:	4295      	cmp	r5, r2
 8004a8e:	d002      	beq.n	8004a96 <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004a90:	2106      	movs	r1, #6
 8004a92:	4618      	mov	r0, r3
 8004a94:	e7ed      	b.n	8004a72 <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8004a96:	b921      	cbnz	r1, 8004aa2 <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004a98:	6883      	ldr	r3, [r0, #8]
 8004a9a:	75d9      	strb	r1, [r3, #23]
 8004a9c:	bc70      	pop	{r4, r5, r6}
 8004a9e:	f7ff bd53 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004aa2:	bc70      	pop	{r4, r5, r6}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000644 	andcs	r0, r0, r4, asr #12

08004aac <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 8004aac:	6842      	ldr	r2, [r0, #4]
 8004aae:	7d92      	ldrb	r2, [r2, #22]
 8004ab0:	b112      	cbz	r2, 8004ab8 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	f7ff bf70 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ab8:	2104      	movs	r1, #4
 8004aba:	6883      	ldr	r3, [r0, #8]
 8004abc:	75d9      	strb	r1, [r3, #23]
 8004abe:	761a      	strb	r2, [r3, #24]
 8004ac0:	765a      	strb	r2, [r3, #25]
 8004ac2:	769a      	strb	r2, [r3, #26]
 8004ac4:	76da      	strb	r2, [r3, #27]
 8004ac6:	f7ff bd3f 	b.w	8004548 <RDMHandler::RespondMessageAck()>
	...

08004acc <RDMHandler::SetPersonality(bool, unsigned short)>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	6843      	ldr	r3, [r0, #4]
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	7d9a      	ldrb	r2, [r3, #22]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	2a01      	cmp	r2, #1
 8004ad8:	d004      	beq.n	8004ae4 <RDMHandler::SetPersonality(bool, unsigned short)+0x18>
 8004ada:	2101      	movs	r1, #1
 8004adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ae0:	f7ff bf5a 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ae4:	4f0c      	ldr	r7, [pc, #48]	; (8004b18 <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>)
 8004ae6:	7dde      	ldrb	r6, [r3, #23]
 8004ae8:	4629      	mov	r1, r5
 8004aea:	6838      	ldr	r0, [r7, #0]
 8004aec:	f7ff fc92 	bl	8004414 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004af0:	b10e      	cbz	r6, 8004af6 <RDMHandler::SetPersonality(bool, unsigned short)+0x2a>
 8004af2:	4286      	cmp	r6, r0
 8004af4:	d902      	bls.n	8004afc <RDMHandler::SetPersonality(bool, unsigned short)+0x30>
 8004af6:	2106      	movs	r1, #6
 8004af8:	4620      	mov	r0, r4
 8004afa:	e7ef      	b.n	8004adc <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8004afc:	4632      	mov	r2, r6
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7ff fc8e 	bl	8004422 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004b06:	2200      	movs	r2, #0
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	75da      	strb	r2, [r3, #23]
 8004b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b12:	f7ff bd19 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004b16:	bf00      	nop
 8004b18:	20000644 	andcs	r0, r0, r4, asr #12

08004b1c <RDMHandler::GetPersonalityDescription(unsigned short)>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	6843      	ldr	r3, [r0, #4]
 8004b22:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004b9c <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 8004b26:	7dde      	ldrb	r6, [r3, #23]
 8004b28:	4604      	mov	r4, r0
 8004b2a:	f8d9 0000 	ldr.w	r0, [r9]
 8004b2e:	460f      	mov	r7, r1
 8004b30:	f7ff fc70 	bl	8004414 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004b34:	b10e      	cbz	r6, 8004b3a <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 8004b36:	4286      	cmp	r6, r0
 8004b38:	d905      	bls.n	8004b46 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b40:	2106      	movs	r1, #6
 8004b42:	f7ff bf29 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b46:	4632      	mov	r2, r6
 8004b48:	4639      	mov	r1, r7
 8004b4a:	f8d9 0000 	ldr.w	r0, [r9]
 8004b4e:	f7ff fc55 	bl	80043fc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004b52:	8803      	ldrh	r3, [r0, #0]
 8004b54:	68a5      	ldr	r5, [r4, #8]
 8004b56:	0a1a      	lsrs	r2, r3, #8
 8004b58:	4639      	mov	r1, r7
 8004b5a:	766a      	strb	r2, [r5, #25]
 8004b5c:	76ab      	strb	r3, [r5, #26]
 8004b5e:	4632      	mov	r2, r6
 8004b60:	f8d9 0000 	ldr.w	r0, [r9]
 8004b64:	762e      	strb	r6, [r5, #24]
 8004b66:	f7ff fc49 	bl	80043fc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f105 081b 	add.w	r8, r5, #27
 8004b70:	1dc1      	adds	r1, r0, #7
 8004b72:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	42b3      	cmp	r3, r6
 8004b78:	d203      	bcs.n	8004b82 <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	2b21      	cmp	r3, #33	; 0x21
 8004b7e:	d107      	bne.n	8004b90 <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 8004b80:	2220      	movs	r2, #32
 8004b82:	3203      	adds	r2, #3
 8004b84:	75ea      	strb	r2, [r5, #23]
 8004b86:	4620      	mov	r0, r4
 8004b88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b8c:	f7ff bcdc 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004b90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004b94:	f808 2b01 	strb.w	r2, [r8], #1
 8004b98:	e7eb      	b.n	8004b72 <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 8004b9a:	bf00      	nop
 8004b9c:	20000644 	andcs	r0, r0, r4, asr #12

08004ba0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	6843      	ldr	r3, [r0, #4]
 8004ba4:	460d      	mov	r5, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	7d9a      	ldrb	r2, [r3, #22]
 8004baa:	4604      	mov	r4, r0
 8004bac:	2a02      	cmp	r2, #2
 8004bae:	d004      	beq.n	8004bba <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bb6:	f7ff beef 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004bba:	7dda      	ldrb	r2, [r3, #23]
 8004bbc:	7e1b      	ldrb	r3, [r3, #24]
 8004bbe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	1e53      	subs	r3, r2, #1
 8004bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bca:	d301      	bcc.n	8004bd0 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8004bcc:	2106      	movs	r1, #6
 8004bce:	e7f0      	b.n	8004bb2 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	f7ff fbe8 	bl	80043a8 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004bd8:	b935      	cbnz	r5, 8004be8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	4620      	mov	r0, r4
 8004bde:	75dd      	strb	r5, [r3, #23]
 8004be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be4:	f7ff bcb0 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	bf00      	nop
 8004bec:	20000644 	andcs	r0, r0, r4, asr #12

08004bf0 <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	6843      	ldr	r3, [r0, #4]
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	7dde      	ldrb	r6, [r3, #23]
 8004bf8:	2eff      	cmp	r6, #255	; 0xff
 8004bfa:	d004      	beq.n	8004c06 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004bfc:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <RDMHandler::GetSensorDefinition(unsigned short)+0xac>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	7903      	ldrb	r3, [r0, #4]
 8004c02:	42b3      	cmp	r3, r6
 8004c04:	d805      	bhi.n	8004c12 <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004c06:	4628      	mov	r0, r5
 8004c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c0c:	2106      	movs	r1, #6
 8004c0e:	f7ff bec3 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c12:	4631      	mov	r1, r6
 8004c14:	68ac      	ldr	r4, [r5, #8]
 8004c16:	f7fd fde1 	bl	80027dc <RDMSensors::GetDefintion(unsigned char)>
 8004c1a:	7802      	ldrb	r2, [r0, #0]
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	42b2      	cmp	r2, r6
 8004c20:	d1f1      	bne.n	8004c06 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004c22:	7622      	strb	r2, [r4, #24]
 8004c24:	7842      	ldrb	r2, [r0, #1]
 8004c26:	4621      	mov	r1, r4
 8004c28:	7662      	strb	r2, [r4, #25]
 8004c2a:	7882      	ldrb	r2, [r0, #2]
 8004c2c:	300b      	adds	r0, #11
 8004c2e:	76a2      	strb	r2, [r4, #26]
 8004c30:	f810 2c08 	ldrb.w	r2, [r0, #-8]
 8004c34:	76e2      	strb	r2, [r4, #27]
 8004c36:	f910 2c06 	ldrsb.w	r2, [r0, #-6]
 8004c3a:	7722      	strb	r2, [r4, #28]
 8004c3c:	f830 2c07 	ldrh.w	r2, [r0, #-7]
 8004c40:	7762      	strb	r2, [r4, #29]
 8004c42:	f910 2c04 	ldrsb.w	r2, [r0, #-4]
 8004c46:	77a2      	strb	r2, [r4, #30]
 8004c48:	f830 2c05 	ldrh.w	r2, [r0, #-5]
 8004c4c:	77e2      	strb	r2, [r4, #31]
 8004c4e:	f910 2c02 	ldrsb.w	r2, [r0, #-2]
 8004c52:	f884 2020 	strb.w	r2, [r4, #32]
 8004c56:	f830 2c03 	ldrh.w	r2, [r0, #-3]
 8004c5a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004c5e:	f990 2000 	ldrsb.w	r2, [r0]
 8004c62:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8004c66:	f830 2c01 	ldrh.w	r2, [r0, #-1]
 8004c6a:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004c6e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8004c72:	f801 2f24 	strb.w	r2, [r1, #36]!
 8004c76:	220d      	movs	r2, #13
 8004c78:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 8004c7c:	f1a2 060d 	sub.w	r6, r2, #13
 8004c80:	42b7      	cmp	r7, r6
 8004c82:	dc05      	bgt.n	8004c90 <RDMHandler::GetSensorDefinition(unsigned short)+0xa0>
 8004c84:	75e2      	strb	r2, [r4, #23]
 8004c86:	4628      	mov	r0, r5
 8004c88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c8c:	f7ff bc5c 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004c90:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8004c94:	3201      	adds	r2, #1
 8004c96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c9a:	e7ed      	b.n	8004c78 <RDMHandler::GetSensorDefinition(unsigned short)+0x88>
 8004c9c:	200001fc 	strdcs	r0, [r0], -ip

08004ca0 <RDMHandler::GetSensorValue(unsigned short)>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	6843      	ldr	r3, [r0, #4]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	7d9a      	ldrb	r2, [r3, #22]
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	d004      	beq.n	8004cb6 <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004cac:	2101      	movs	r1, #1
 8004cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cb2:	f7ff be71 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cb6:	7dde      	ldrb	r6, [r3, #23]
 8004cb8:	2eff      	cmp	r6, #255	; 0xff
 8004cba:	d004      	beq.n	8004cc6 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	7903      	ldrb	r3, [r0, #4]
 8004cc2:	42b3      	cmp	r3, r6
 8004cc4:	d802      	bhi.n	8004ccc <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004cc6:	2106      	movs	r1, #6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	e7f0      	b.n	8004cae <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004ccc:	4631      	mov	r1, r6
 8004cce:	68ac      	ldr	r4, [r5, #8]
 8004cd0:	f7fd fd89 	bl	80027e6 <RDMSensors::GetValues(unsigned char)>
 8004cd4:	7a03      	ldrb	r3, [r0, #8]
 8004cd6:	42b3      	cmp	r3, r6
 8004cd8:	d1f5      	bne.n	8004cc6 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004cda:	2309      	movs	r3, #9
 8004cdc:	75e3      	strb	r3, [r4, #23]
 8004cde:	2321      	movs	r3, #33	; 0x21
 8004ce0:	70a3      	strb	r3, [r4, #2]
 8004ce2:	7a03      	ldrb	r3, [r0, #8]
 8004ce4:	7623      	strb	r3, [r4, #24]
 8004ce6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004cea:	7663      	strb	r3, [r4, #25]
 8004cec:	8803      	ldrh	r3, [r0, #0]
 8004cee:	76a3      	strb	r3, [r4, #26]
 8004cf0:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004cf4:	76e3      	strb	r3, [r4, #27]
 8004cf6:	8843      	ldrh	r3, [r0, #2]
 8004cf8:	7723      	strb	r3, [r4, #28]
 8004cfa:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004cfe:	7763      	strb	r3, [r4, #29]
 8004d00:	8883      	ldrh	r3, [r0, #4]
 8004d02:	77a3      	strb	r3, [r4, #30]
 8004d04:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004d08:	77e3      	strb	r3, [r4, #31]
 8004d0a:	88c3      	ldrh	r3, [r0, #6]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f884 3020 	strb.w	r3, [r4, #32]
 8004d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d16:	f7ff bc17 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004d1a:	bf00      	nop
 8004d1c:	200001fc 	strdcs	r0, [r0], -ip

08004d20 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	6843      	ldr	r3, [r0, #4]
 8004d26:	4606      	mov	r6, r0
 8004d28:	7d9a      	ldrb	r2, [r3, #22]
 8004d2a:	460d      	mov	r5, r1
 8004d2c:	2a01      	cmp	r2, #1
 8004d2e:	d004      	beq.n	8004d3a <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004d30:	2101      	movs	r1, #1
 8004d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d36:	f7ff be2f 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d3a:	7ddf      	ldrb	r7, [r3, #23]
 8004d3c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004dd0 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004d40:	2fff      	cmp	r7, #255	; 0xff
 8004d42:	f8d8 3000 	ldr.w	r3, [r8]
 8004d46:	d004      	beq.n	8004d52 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004d48:	791a      	ldrb	r2, [r3, #4]
 8004d4a:	42ba      	cmp	r2, r7
 8004d4c:	d801      	bhi.n	8004d52 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004d4e:	2106      	movs	r1, #6
 8004d50:	e7ef      	b.n	8004d32 <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004d52:	4639      	mov	r1, r7
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fd4b 	bl	80027f0 <RDMSensors::SetValues(unsigned char)>
 8004d5a:	bbb5      	cbnz	r5, 8004dca <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004d5c:	2fff      	cmp	r7, #255	; 0xff
 8004d5e:	68b4      	ldr	r4, [r6, #8]
 8004d60:	d112      	bne.n	8004d88 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004d62:	2309      	movs	r3, #9
 8004d64:	75e3      	strb	r3, [r4, #23]
 8004d66:	2321      	movs	r3, #33	; 0x21
 8004d68:	7625      	strb	r5, [r4, #24]
 8004d6a:	70a3      	strb	r3, [r4, #2]
 8004d6c:	7665      	strb	r5, [r4, #25]
 8004d6e:	76a5      	strb	r5, [r4, #26]
 8004d70:	76e5      	strb	r5, [r4, #27]
 8004d72:	7725      	strb	r5, [r4, #28]
 8004d74:	7765      	strb	r5, [r4, #29]
 8004d76:	77a5      	strb	r5, [r4, #30]
 8004d78:	77e5      	strb	r5, [r4, #31]
 8004d7a:	f884 5020 	strb.w	r5, [r4, #32]
 8004d7e:	4630      	mov	r0, r6
 8004d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	f7ff bbe0 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f8d8 0000 	ldr.w	r0, [r8]
 8004d8e:	f7fd fd2a 	bl	80027e6 <RDMSensors::GetValues(unsigned char)>
 8004d92:	2309      	movs	r3, #9
 8004d94:	75e3      	strb	r3, [r4, #23]
 8004d96:	2321      	movs	r3, #33	; 0x21
 8004d98:	70a3      	strb	r3, [r4, #2]
 8004d9a:	7a03      	ldrb	r3, [r0, #8]
 8004d9c:	7623      	strb	r3, [r4, #24]
 8004d9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004da2:	7663      	strb	r3, [r4, #25]
 8004da4:	8803      	ldrh	r3, [r0, #0]
 8004da6:	76a3      	strb	r3, [r4, #26]
 8004da8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004dac:	76e3      	strb	r3, [r4, #27]
 8004dae:	8843      	ldrh	r3, [r0, #2]
 8004db0:	7723      	strb	r3, [r4, #28]
 8004db2:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004db6:	7763      	strb	r3, [r4, #29]
 8004db8:	8883      	ldrh	r3, [r0, #4]
 8004dba:	77a3      	strb	r3, [r4, #30]
 8004dbc:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004dc0:	77e3      	strb	r3, [r4, #31]
 8004dc2:	88c3      	ldrh	r3, [r0, #6]
 8004dc4:	f884 3020 	strb.w	r3, [r4, #32]
 8004dc8:	e7d9      	b.n	8004d7e <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dce:	bf00      	nop
 8004dd0:	200001fc 	strdcs	r0, [r0], -ip

08004dd4 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	6843      	ldr	r3, [r0, #4]
 8004dd8:	4604      	mov	r4, r0
 8004dda:	7d9a      	ldrb	r2, [r3, #22]
 8004ddc:	460d      	mov	r5, r1
 8004dde:	2a01      	cmp	r2, #1
 8004de0:	d004      	beq.n	8004dec <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004de2:	2101      	movs	r1, #1
 8004de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de8:	f7ff bdd6 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004dec:	7dd9      	ldrb	r1, [r3, #23]
 8004dee:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004df0:	29ff      	cmp	r1, #255	; 0xff
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	7903      	ldrb	r3, [r0, #4]
 8004df6:	d103      	bne.n	8004e00 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004df8:	b923      	cbnz	r3, 8004e04 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004dfa:	2106      	movs	r1, #6
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	e7f1      	b.n	8004de4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004e00:	4299      	cmp	r1, r3
 8004e02:	d2fa      	bcs.n	8004dfa <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004e04:	f7fd fd0b 	bl	800281e <RDMSensors::SetRecord(unsigned char)>
 8004e08:	b935      	cbnz	r5, 8004e18 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	75dd      	strb	r5, [r3, #23]
 8004e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e14:	f7ff bb98 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200001fc 	strdcs	r0, [r0], -ip

08004e20 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004e20:	2104      	movs	r1, #4
 8004e22:	f7ff bdb9 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004e28 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	6843      	ldr	r3, [r0, #4]
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	7d9a      	ldrb	r2, [r3, #22]
 8004e30:	2a01      	cmp	r2, #1
 8004e32:	d004      	beq.n	8004e3e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e38:	2101      	movs	r1, #1
 8004e3a:	f7ff bdad 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e3e:	7ddd      	ldrb	r5, [r3, #23]
 8004e40:	2d02      	cmp	r5, #2
 8004e42:	d102      	bne.n	8004e4a <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004e44:	2106      	movs	r1, #6
 8004e46:	f7ff fda7 	bl	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e4a:	1e6b      	subs	r3, r5, #1
 8004e4c:	4259      	negs	r1, r3
 8004e4e:	4159      	adcs	r1, r3
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6998      	ldr	r0, [r3, #24]
 8004e56:	b110      	cbz	r0, 8004e5e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004e58:	6803      	ldr	r3, [r0, #0]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	4798      	blx	r3
 8004e5e:	2200      	movs	r2, #0
 8004e60:	68a3      	ldr	r3, [r4, #8]
 8004e62:	4620      	mov	r0, r4
 8004e64:	75da      	strb	r2, [r3, #23]
 8004e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e6a:	f7ff bb6d 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004e6e:	bf00      	nop
 8004e70:	200016f0 	strdcs	r1, [r0], -r0

08004e74 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	6843      	ldr	r3, [r0, #4]
 8004e78:	4604      	mov	r4, r0
 8004e7a:	7d99      	ldrb	r1, [r3, #22]
 8004e7c:	2901      	cmp	r1, #1
 8004e7e:	d004      	beq.n	8004e8a <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e84:	2101      	movs	r1, #1
 8004e86:	f7ff bd87 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e8a:	4e0b      	ldr	r6, [pc, #44]	; (8004eb8 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004e8c:	7ddd      	ldrb	r5, [r3, #23]
 8004e8e:	6830      	ldr	r0, [r6, #0]
 8004e90:	b105      	cbz	r5, 8004e94 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004e92:	2100      	movs	r1, #0
 8004e94:	f7fc f95c 	bl	8001150 <Display::SetSleep(bool)>
 8004e98:	6833      	ldr	r3, [r6, #0]
 8004e9a:	6998      	ldr	r0, [r3, #24]
 8004e9c:	b118      	cbz	r0, 8004ea6 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004e9e:	6803      	ldr	r3, [r0, #0]
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4798      	blx	r3
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	68a3      	ldr	r3, [r4, #8]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	75da      	strb	r2, [r3, #23]
 8004eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eb2:	f7ff bb49 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004eb6:	bf00      	nop
 8004eb8:	200016f0 	strdcs	r1, [r0], -r0

08004ebc <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	6843      	ldr	r3, [r0, #4]
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	7d9a      	ldrb	r2, [r3, #22]
 8004ec4:	b08a      	sub	sp, #40	; 0x28
 8004ec6:	2a07      	cmp	r2, #7
 8004ec8:	d005      	beq.n	8004ed6 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004eca:	2101      	movs	r1, #1
 8004ecc:	b00a      	add	sp, #40	; 0x28
 8004ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed2:	f7ff bd61 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ed6:	7dd8      	ldrb	r0, [r3, #23]
 8004ed8:	7e1a      	ldrb	r2, [r3, #24]
 8004eda:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004ede:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004ee2:	9206      	str	r2, [sp, #24]
 8004ee4:	7e5a      	ldrb	r2, [r3, #25]
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	9205      	str	r2, [sp, #20]
 8004eea:	7e9a      	ldrb	r2, [r3, #26]
 8004eec:	9204      	str	r2, [sp, #16]
 8004eee:	7eda      	ldrb	r2, [r3, #27]
 8004ef0:	9203      	str	r2, [sp, #12]
 8004ef2:	7f1a      	ldrb	r2, [r3, #28]
 8004ef4:	7f5b      	ldrb	r3, [r3, #29]
 8004ef6:	9202      	str	r2, [sp, #8]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	b979      	cbnz	r1, 8004f1c <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004efc:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004efe:	a901      	add	r1, sp, #4
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f003 f9f5 	bl	80082f0 <Hardware::SetTime(tm const*)>
 8004f06:	b918      	cbnz	r0, 8004f10 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004f08:	2104      	movs	r1, #4
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7ff fd44 	bl	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f10:	2200      	movs	r2, #0
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	4620      	mov	r0, r4
 8004f16:	75da      	strb	r2, [r3, #23]
 8004f18:	f7ff fb16 	bl	8004548 <RDMHandler::RespondMessageAck()>
 8004f1c:	b00a      	add	sp, #40	; 0x28
 8004f1e:	bd10      	pop	{r4, pc}
 8004f20:	200017e0 	andcs	r1, r0, r0, ror #15

08004f24 <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004f24:	6842      	ldr	r2, [r0, #4]
 8004f26:	7d91      	ldrb	r1, [r2, #22]
 8004f28:	2901      	cmp	r1, #1
 8004f2a:	d002      	beq.n	8004f32 <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	f7ff bd33 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f32:	7dd1      	ldrb	r1, [r2, #23]
 8004f34:	1eca      	subs	r2, r1, #3
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	2afb      	cmp	r2, #251	; 0xfb
 8004f3a:	d801      	bhi.n	8004f40 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004f3c:	2106      	movs	r1, #6
 8004f3e:	e7f6      	b.n	8004f2e <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004f40:	29ff      	cmp	r1, #255	; 0xff
 8004f42:	6883      	ldr	r3, [r0, #8]
 8004f44:	d103      	bne.n	8004f4e <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004f46:	2200      	movs	r2, #0
 8004f48:	75da      	strb	r2, [r3, #23]
 8004f4a:	f7ff bafd 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8004f4e:	2104      	movs	r1, #4
 8004f50:	e7ed      	b.n	8004f2e <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004f52 <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004f52:	b510      	push	{r4, lr}
 8004f54:	6843      	ldr	r3, [r0, #4]
 8004f56:	4604      	mov	r4, r0
 8004f58:	7d9a      	ldrb	r2, [r3, #22]
 8004f5a:	2a01      	cmp	r2, #1
 8004f5c:	d004      	beq.n	8004f68 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004f5e:	2101      	movs	r1, #1
 8004f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f64:	f7ff bd18 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f68:	7dd8      	ldrb	r0, [r3, #23]
 8004f6a:	f7fc fd6d 	bl	8001a48 <rdm::selftest::Set(unsigned char)>
 8004f6e:	b910      	cbnz	r0, 8004f76 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004f70:	2106      	movs	r1, #6
 8004f72:	4620      	mov	r0, r4
 8004f74:	e7f4      	b.n	8004f60 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004f76:	2200      	movs	r2, #0
 8004f78:	68a3      	ldr	r3, [r4, #8]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	75da      	strb	r2, [r3, #23]
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f82:	f7ff bae1 	b.w	8004548 <RDMHandler::RespondMessageAck()>

08004f86 <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004f86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f88:	6845      	ldr	r5, [r0, #4]
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	a901      	add	r1, sp, #4
 8004f8e:	7de8      	ldrb	r0, [r5, #23]
 8004f90:	f7fc fd8e 	bl	8001ab0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b928      	cbnz	r0, 8004fa4 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004f98:	2106      	movs	r1, #6
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7ff fcfc 	bl	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004fa0:	b003      	add	sp, #12
 8004fa2:	bd30      	pop	{r4, r5, pc}
 8004fa4:	9a01      	ldr	r2, [sp, #4]
 8004fa6:	2a20      	cmp	r2, #32
 8004fa8:	bf84      	itt	hi
 8004faa:	2220      	movhi	r2, #32
 8004fac:	9201      	strhi	r2, [sp, #4]
 8004fae:	9901      	ldr	r1, [sp, #4]
 8004fb0:	68a2      	ldr	r2, [r4, #8]
 8004fb2:	1c48      	adds	r0, r1, #1
 8004fb4:	75d0      	strb	r0, [r2, #23]
 8004fb6:	7de8      	ldrb	r0, [r5, #23]
 8004fb8:	4419      	add	r1, r3
 8004fba:	f802 0f18 	strb.w	r0, [r2, #24]!
 8004fbe:	428b      	cmp	r3, r1
 8004fc0:	d103      	bne.n	8004fca <RDMHandler::GetSelfTestDescription(unsigned short)+0x44>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff fac0 	bl	8004548 <RDMHandler::RespondMessageAck()>
 8004fc8:	e7ea      	b.n	8004fa0 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 8004fca:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004fce:	f802 0f01 	strb.w	r0, [r2, #1]!
 8004fd2:	e7f4      	b.n	8004fbe <RDMHandler::GetSelfTestDescription(unsigned short)+0x38>

08004fd4 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004fd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <RDMHandler::GetSlotDescription(unsigned short)+0x74>)
 8004fd8:	6846      	ldr	r6, [r0, #4]
 8004fda:	4604      	mov	r4, r0
 8004fdc:	7df3      	ldrb	r3, [r6, #23]
 8004fde:	7e35      	ldrb	r5, [r6, #24]
 8004fe0:	6810      	ldr	r0, [r2, #0]
 8004fe2:	b939      	cbnz	r1, 8004ff4 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004fe4:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004fe8:	b2ad      	uxth	r5, r5
 8004fea:	466a      	mov	r2, sp
 8004fec:	4629      	mov	r1, r5
 8004fee:	f7ff f9a3 	bl	8004338 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004ff2:	b928      	cbnz	r0, 8005000 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004ff4:	2106      	movs	r1, #6
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7ff fcce 	bl	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	4628      	mov	r0, r5
 8005002:	f8bd 1000 	ldrh.w	r1, [sp]
 8005006:	aa01      	add	r2, sp, #4
 8005008:	f000 fa3e 	bl	8005488 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 800500c:	4603      	mov	r3, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d0f0      	beq.n	8004ff4 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8005012:	9a01      	ldr	r2, [sp, #4]
 8005014:	2a20      	cmp	r2, #32
 8005016:	bf84      	itt	hi
 8005018:	2220      	movhi	r2, #32
 800501a:	9201      	strhi	r2, [sp, #4]
 800501c:	9901      	ldr	r1, [sp, #4]
 800501e:	68a2      	ldr	r2, [r4, #8]
 8005020:	1c88      	adds	r0, r1, #2
 8005022:	75d0      	strb	r0, [r2, #23]
 8005024:	7df0      	ldrb	r0, [r6, #23]
 8005026:	4419      	add	r1, r3
 8005028:	7610      	strb	r0, [r2, #24]
 800502a:	7e30      	ldrb	r0, [r6, #24]
 800502c:	f802 0f19 	strb.w	r0, [r2, #25]!
 8005030:	428b      	cmp	r3, r1
 8005032:	d103      	bne.n	800503c <RDMHandler::GetSlotDescription(unsigned short)+0x68>
 8005034:	4620      	mov	r0, r4
 8005036:	f7ff fa87 	bl	8004548 <RDMHandler::RespondMessageAck()>
 800503a:	e7df      	b.n	8004ffc <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 800503c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005040:	f802 0f01 	strb.w	r0, [r2, #1]!
 8005044:	e7f4      	b.n	8005030 <RDMHandler::GetSlotDescription(unsigned short)+0x5c>
 8005046:	bf00      	nop
 8005048:	20000644 	andcs	r0, r0, r4, asr #12

0800504c <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800504c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800504e:	6843      	ldr	r3, [r0, #4]
 8005050:	4605      	mov	r5, r0
 8005052:	7d9b      	ldrb	r3, [r3, #22]
 8005054:	460e      	mov	r6, r1
 8005056:	b12b      	cbz	r3, 8005064 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8005058:	2101      	movs	r1, #1
 800505a:	b003      	add	sp, #12
 800505c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005060:	f7ff bc9a 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8005064:	f06f 070d 	mvn.w	r7, #13
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb4>)
 800506a:	4669      	mov	r1, sp
 800506c:	681c      	ldr	r4, [r3, #0]
 800506e:	f104 0356 	add.w	r3, r4, #86	; 0x56
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005078:	1d20      	adds	r0, r4, #4
 800507a:	f88d 3004 	strb.w	r3, [sp, #4]
 800507e:	f7ff f972 	bl	8004366 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8005082:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005086:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800508a:	f104 020e 	add.w	r2, r4, #14
 800508e:	1b3f      	subs	r7, r7, r4
 8005090:	18b9      	adds	r1, r7, r2
 8005092:	4288      	cmp	r0, r1
 8005094:	d82c      	bhi.n	80050f0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 8005096:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 800509a:	2201      	movs	r2, #1
 800509c:	2100      	movs	r1, #0
 800509e:	4620      	mov	r0, r4
 80050a0:	f7ff f9bf 	bl	8004422 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 80050a4:	2100      	movs	r1, #0
 80050a6:	4620      	mov	r0, r4
 80050a8:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 80050ac:	f7ff f97c 	bl	80043a8 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 80050b0:	2213      	movs	r2, #19
 80050b2:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80050b6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80050ba:	f7ff f94a 	bl	8004352 <memcpy.isra.0>
 80050be:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80050c2:	f7fe fa5a 	bl	800357a <RDMSubDevices::SetFactoryDefaults()>
 80050c6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80050ca:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 80050ce:	4413      	add	r3, r2
 80050d0:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 80050d4:	2301      	movs	r3, #1
 80050d6:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 80050da:	f7fc fbc5 	bl	8001868 <rdm::device::responder::factorydefaults()>
 80050de:	b966      	cbnz	r6, 80050fa <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xae>
 80050e0:	4628      	mov	r0, r5
 80050e2:	68ab      	ldr	r3, [r5, #8]
 80050e4:	75de      	strb	r6, [r3, #23]
 80050e6:	b003      	add	sp, #12
 80050e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80050ec:	f7ff ba2c 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80050f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80050f4:	440b      	add	r3, r1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	e7ca      	b.n	8005090 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 80050fa:	b003      	add	sp, #12
 80050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000644 	andcs	r0, r0, r4, asr #12

08005104 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8005104:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005106:	6845      	ldr	r5, [r0, #4]
 8005108:	460e      	mov	r6, r1
 800510a:	7dab      	ldrb	r3, [r5, #22]
 800510c:	4604      	mov	r4, r0
 800510e:	2b20      	cmp	r3, #32
 8005110:	4611      	mov	r1, r2
 8005112:	d905      	bls.n	8005120 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8005114:	2101      	movs	r1, #1
 8005116:	b002      	add	sp, #8
 8005118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800511c:	f7ff bc3c 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8005120:	4a0d      	ldr	r2, [pc, #52]	; (8005158 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8005122:	6810      	ldr	r0, [r2, #0]
 8005124:	f105 0217 	add.w	r2, r5, #23
 8005128:	b159      	cbz	r1, 8005142 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 800512a:	308c      	adds	r0, #140	; 0x8c
 800512c:	f7fe f98f 	bl	800344e <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8005130:	b97e      	cbnz	r6, 8005152 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8005132:	4620      	mov	r0, r4
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	75de      	strb	r6, [r3, #23]
 8005138:	b002      	add	sp, #8
 800513a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800513e:	f7ff ba03 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8005142:	4669      	mov	r1, sp
 8005144:	3004      	adds	r0, #4
 8005146:	9200      	str	r2, [sp, #0]
 8005148:	f88d 3004 	strb.w	r3, [sp, #4]
 800514c:	f7ff f90b 	bl	8004366 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8005150:	e7ee      	b.n	8005130 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 8005152:	b002      	add	sp, #8
 8005154:	bd70      	pop	{r4, r5, r6, pc}
 8005156:	bf00      	nop
 8005158:	20000644 	andcs	r0, r0, r4, asr #12

0800515c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005160:	4616      	mov	r6, r2
 8005162:	2700      	movs	r7, #0
 8005164:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 8005168:	2c20      	cmp	r4, #32
 800516a:	46be      	mov	lr, r7
 800516c:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8005170:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005174:	d004      	beq.n	8005180 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 8005176:	2105      	movs	r1, #5
 8005178:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800517c:	f7ff bc0c 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8005180:	4c2d      	ldr	r4, [pc, #180]	; (8005238 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8005182:	6824      	ldr	r4, [r4, #0]
 8005184:	88a4      	ldrh	r4, [r4, #4]
 8005186:	4294      	cmp	r4, r2
 8005188:	d205      	bcs.n	8005196 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800518a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800518e:	42a2      	cmp	r2, r4
 8005190:	d001      	beq.n	8005196 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8005192:	2109      	movs	r1, #9
 8005194:	e7f0      	b.n	8005178 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8005196:	f04f 0c1e 	mov.w	ip, #30
 800519a:	2400      	movs	r4, #0
 800519c:	4d27      	ldr	r5, [pc, #156]	; (800523c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 800519e:	f8b5 9000 	ldrh.w	r9, [r5]
 80051a2:	4599      	cmp	r9, r3
 80051a4:	bf02      	ittt	eq
 80051a6:	462c      	moveq	r4, r5
 80051a8:	7daf      	ldrbeq	r7, [r5, #22]
 80051aa:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 80051ae:	f1bc 0c01 	subs.w	ip, ip, #1
 80051b2:	f105 0518 	add.w	r5, r5, #24
 80051b6:	d1f2      	bne.n	800519e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 80051b8:	b90c      	cbnz	r4, 80051be <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 80051ba:	2100      	movs	r1, #0
 80051bc:	e7dc      	b.n	8005178 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80051be:	7803      	ldrb	r3, [r0, #0]
 80051c0:	b19b      	cbz	r3, 80051ea <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	d0f9      	beq.n	80051ba <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 80051c6:	2e20      	cmp	r6, #32
 80051c8:	d121      	bne.n	800520e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 80051ca:	2900      	cmp	r1, #0
 80051cc:	d131      	bne.n	8005232 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 80051ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d0dd      	beq.n	8005192 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	b913      	cbnz	r3, 80051e0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 80051da:	68a1      	ldr	r1, [r4, #8]
 80051dc:	07cd      	lsls	r5, r1, #31
 80051de:	d5ca      	bpl.n	8005176 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 80051e0:	7d21      	ldrb	r1, [r4, #20]
 80051e2:	4541      	cmp	r1, r8
 80051e4:	d005      	beq.n	80051f2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 80051e6:	2101      	movs	r1, #1
 80051e8:	e7c6      	b.n	8005178 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 80051ea:	f1be 0f00 	cmp.w	lr, #0
 80051ee:	d1ea      	bne.n	80051c6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 80051f0:	e7e3      	b.n	80051ba <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 80051f2:	68a1      	ldr	r1, [r4, #8]
 80051f4:	eb00 0461 	add.w	r4, r0, r1, asr #1
 80051f8:	104d      	asrs	r5, r1, #1
 80051fa:	07c9      	lsls	r1, r1, #31
 80051fc:	bf48      	it	mi
 80051fe:	5941      	ldrmi	r1, [r0, r5]
 8005200:	4620      	mov	r0, r4
 8005202:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005206:	bf48      	it	mi
 8005208:	58cb      	ldrmi	r3, [r1, r3]
 800520a:	4611      	mov	r1, r2
 800520c:	4718      	bx	r3
 800520e:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8005212:	f003 0401 	and.w	r4, r3, #1
 8005216:	b90d      	cbnz	r5, 800521c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8005218:	2c00      	cmp	r4, #0
 800521a:	d0ac      	beq.n	8005176 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800521c:	105e      	asrs	r6, r3, #1
 800521e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8005222:	b10c      	cbz	r4, 8005228 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8005224:	5980      	ldr	r0, [r0, r6]
 8005226:	5945      	ldr	r5, [r0, r5]
 8005228:	4618      	mov	r0, r3
 800522a:	462b      	mov	r3, r5
 800522c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005230:	4718      	bx	r3
 8005232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005236:	bf00      	nop
 8005238:	20000200 	andcs	r0, r0, r0, lsl #4
 800523c:	0800a580 	stmdaeq	r0, {r7, r8, sl, sp, pc}

08005240 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8005240:	23ff      	movs	r3, #255	; 0xff
 8005242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	7013      	strb	r3, [r2, #0]
 8005248:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800524c:	7ccb      	ldrb	r3, [r1, #19]
 800524e:	b085      	sub	sp, #20
 8005250:	7d4f      	ldrb	r7, [r1, #21]
 8005252:	9303      	str	r3, [sp, #12]
 8005254:	7d0b      	ldrb	r3, [r1, #20]
 8005256:	f101 0a02 	add.w	sl, r1, #2
 800525a:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 800525e:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x18c>)
 8005260:	4606      	mov	r6, r0
 8005262:	460d      	mov	r5, r1
 8005264:	4614      	mov	r4, r2
 8005266:	495a      	ldr	r1, [pc, #360]	; (80053d0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 8005268:	2206      	movs	r2, #6
 800526a:	4650      	mov	r0, sl
 800526c:	f8d3 8000 	ldr.w	r8, [r3]
 8005270:	f7ff f852 	bl	8004318 <memcmp>
 8005274:	f108 0905 	add.w	r9, r8, #5
 8005278:	4683      	mov	fp, r0
 800527a:	2202      	movs	r2, #2
 800527c:	4649      	mov	r1, r9
 800527e:	4650      	mov	r0, sl
 8005280:	b2bf      	uxth	r7, r7
 8005282:	f7ff f849 	bl	8004318 <memcmp>
 8005286:	b928      	cbnz	r0, 8005294 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 8005288:	2204      	movs	r2, #4
 800528a:	4951      	ldr	r1, [pc, #324]	; (80053d0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 800528c:	18a8      	adds	r0, r5, r2
 800528e:	f7ff f843 	bl	8004318 <memcmp>
 8005292:	b160      	cbz	r0, 80052ae <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8005294:	4649      	mov	r1, r9
 8005296:	2206      	movs	r2, #6
 8005298:	4650      	mov	r0, sl
 800529a:	f7ff f83d 	bl	8004318 <memcmp>
 800529e:	4601      	mov	r1, r0
 80052a0:	b130      	cbz	r0, 80052b0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80052a2:	f1bb 0f00 	cmp.w	fp, #0
 80052a6:	d04a      	beq.n	800533e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 80052a8:	b005      	add	sp, #20
 80052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ae:	2101      	movs	r1, #1
 80052b0:	2301      	movs	r3, #1
 80052b2:	9a03      	ldr	r2, [sp, #12]
 80052b4:	2a10      	cmp	r2, #16
 80052b6:	d176      	bne.n	80053a6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 80052b8:	2f01      	cmp	r7, #1
 80052ba:	d143      	bne.n	8005344 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 80052bc:	7873      	ldrb	r3, [r6, #1]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f2      	bne.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80052c2:	2206      	movs	r2, #6
 80052c4:	4649      	mov	r1, r9
 80052c6:	f105 0017 	add.w	r0, r5, #23
 80052ca:	f7ff f825 	bl	8004318 <memcmp>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	dcea      	bgt.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80052d2:	2206      	movs	r2, #6
 80052d4:	4648      	mov	r0, r9
 80052d6:	f105 011d 	add.w	r1, r5, #29
 80052da:	f7ff f81d 	bl	8004318 <memcmp>
 80052de:	2800      	cmp	r0, #0
 80052e0:	dce2      	bgt.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80052e2:	23fe      	movs	r3, #254	; 0xfe
 80052e4:	7023      	strb	r3, [r4, #0]
 80052e6:	7063      	strb	r3, [r4, #1]
 80052e8:	70a3      	strb	r3, [r4, #2]
 80052ea:	70e3      	strb	r3, [r4, #3]
 80052ec:	7123      	strb	r3, [r4, #4]
 80052ee:	7163      	strb	r3, [r4, #5]
 80052f0:	71a3      	strb	r3, [r4, #6]
 80052f2:	23aa      	movs	r3, #170	; 0xaa
 80052f4:	4621      	mov	r1, r4
 80052f6:	71e3      	strb	r3, [r4, #7]
 80052f8:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80052fc:	f108 0204 	add.w	r2, r8, #4
 8005300:	f108 080a 	add.w	r8, r8, #10
 8005304:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005308:	3102      	adds	r1, #2
 800530a:	f060 0055 	orn	r0, r0, #85	; 0x55
 800530e:	7188      	strb	r0, [r1, #6]
 8005310:	7810      	ldrb	r0, [r2, #0]
 8005312:	4542      	cmp	r2, r8
 8005314:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 8005318:	71c8      	strb	r0, [r1, #7]
 800531a:	7810      	ldrb	r0, [r2, #0]
 800531c:	4403      	add	r3, r0
 800531e:	b29b      	uxth	r3, r3
 8005320:	d1f0      	bne.n	8005304 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc4>
 8005322:	0a1a      	lsrs	r2, r3, #8
 8005324:	f062 0155 	orn	r1, r2, #85	; 0x55
 8005328:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800532c:	7562      	strb	r2, [r4, #21]
 800532e:	f063 0255 	orn	r2, r3, #85	; 0x55
 8005332:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8005336:	7521      	strb	r1, [r4, #20]
 8005338:	75a2      	strb	r2, [r4, #22]
 800533a:	75e3      	strb	r3, [r4, #23]
 800533c:	e7b4      	b.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800533e:	4659      	mov	r1, fp
 8005340:	465b      	mov	r3, fp
 8005342:	e7b6      	b.n	80052b2 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 8005344:	2f03      	cmp	r7, #3
 8005346:	d11a      	bne.n	800537e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 8005348:	7daa      	ldrb	r2, [r5, #22]
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1ac      	bne.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800534e:	7072      	strb	r2, [r6, #1]
 8005350:	f1bb 0f00 	cmp.w	fp, #0
 8005354:	d0a8      	beq.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0a6      	beq.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800535a:	2302      	movs	r3, #2
 800535c:	75e3      	strb	r3, [r4, #23]
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8005360:	7622      	strb	r2, [r4, #24]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	7662      	strb	r2, [r4, #25]
 8005366:	889b      	ldrh	r3, [r3, #4]
 8005368:	3b00      	subs	r3, #0
 800536a:	bf18      	it	ne
 800536c:	2301      	movne	r3, #1
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	4630      	mov	r0, r6
 8005372:	7663      	strb	r3, [r4, #25]
 8005374:	b005      	add	sp, #20
 8005376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	f7ff b8e5 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 800537e:	2f02      	cmp	r7, #2
 8005380:	d192      	bne.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005382:	7daa      	ldrb	r2, [r5, #22]
 8005384:	2a00      	cmp	r2, #0
 8005386:	d18f      	bne.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005388:	2101      	movs	r1, #1
 800538a:	7071      	strb	r1, [r6, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d08b      	beq.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 8005392:	75e7      	strb	r7, [r4, #23]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	7622      	strb	r2, [r4, #24]
 8005398:	7662      	strb	r2, [r4, #25]
 800539a:	889b      	ldrh	r3, [r3, #4]
 800539c:	3b00      	subs	r3, #0
 800539e:	bf18      	it	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	408b      	lsls	r3, r1
 80053a4:	e7e4      	b.n	8005370 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 80053a6:	7c6a      	ldrb	r2, [r5, #17]
 80053a8:	7cab      	ldrb	r3, [r5, #18]
 80053aa:	f1bb 0f00 	cmp.w	fp, #0
 80053ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	7dab      	ldrb	r3, [r5, #22]
 80053b8:	bf08      	it	eq
 80053ba:	2101      	moveq	r1, #1
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4630      	mov	r0, r6
 80053c0:	463b      	mov	r3, r7
 80053c2:	9a03      	ldr	r2, [sp, #12]
 80053c4:	f7ff feca 	bl	800515c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 80053c8:	e76e      	b.n	80052a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 80053ca:	bf00      	nop
 80053cc:	20000644 	andcs	r0, r0, r4, asr #12
 80053d0:	0800a578 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, sp, pc}
 80053d4:	20000200 	andcs	r0, r0, r0, lsl #4

080053d8 <RDMHandler::GetIdentifyMode(unsigned short)>:
 80053d8:	2201      	movs	r2, #1
 80053da:	6883      	ldr	r3, [r0, #8]
 80053dc:	75da      	strb	r2, [r3, #23]
 80053de:	4a02      	ldr	r2, [pc, #8]	; (80053e8 <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	761a      	strb	r2, [r3, #24]
 80053e4:	f7ff b8b0 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 80053e8:	20000649 	andcs	r0, r0, r9, asr #12

080053ec <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	6843      	ldr	r3, [r0, #4]
 80053f0:	4604      	mov	r4, r0
 80053f2:	7d9a      	ldrb	r2, [r3, #22]
 80053f4:	460d      	mov	r5, r1
 80053f6:	2a01      	cmp	r2, #1
 80053f8:	d004      	beq.n	8005404 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 80053fa:	2101      	movs	r1, #1
 80053fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005400:	f7ff baca 	b.w	8004998 <RDMHandler::RespondMessageNack(unsigned short)>
 8005404:	7dd9      	ldrb	r1, [r3, #23]
 8005406:	1e4b      	subs	r3, r1, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2bfd      	cmp	r3, #253	; 0xfd
 800540c:	d801      	bhi.n	8005412 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 800540e:	2106      	movs	r1, #6
 8005410:	e7f4      	b.n	80053fc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 8005418:	7019      	strb	r1, [r3, #0]
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b15b      	cbz	r3, 8005438 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 8005420:	b151      	cbz	r1, 8005438 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 8005422:	21ff      	movs	r1, #255	; 0xff
 8005424:	f7fc fbc0 	bl	8001ba8 <RDMIdentify::On(rdm::identify::Mode)>
 8005428:	b94d      	cbnz	r5, 800543e <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	4620      	mov	r0, r4
 800542e:	75dd      	strb	r5, [r3, #23]
 8005430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005434:	f7ff b888 	b.w	8004548 <RDMHandler::RespondMessageAck()>
 8005438:	f7fc fbd4 	bl	8001be4 <RDMIdentify::Off(rdm::identify::Mode)>
 800543c:	e7f4      	b.n	8005428 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	2000064c 	andcs	r0, r0, ip, asr #12
 8005444:	20000649 	andcs	r0, r0, r9, asr #12
 8005448:	20000648 	andcs	r0, r0, r8, asr #12

0800544c <RDMIdentify::RDMIdentify()>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <RDMIdentify::RDMIdentify()+0x8>)
 800544e:	6018      	str	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000064c 	andcs	r0, r0, ip, asr #12

08005458 <RDMSlotInfo::bsearch(unsigned short)>:
 8005458:	b530      	push	{r4, r5, lr}
 800545a:	2128      	movs	r1, #40	; 0x28
 800545c:	4604      	mov	r4, r0
 800545e:	2200      	movs	r2, #0
 8005460:	4d08      	ldr	r5, [pc, #32]	; (8005484 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 8005462:	1a8b      	subs	r3, r1, r2
 8005464:	eb02 0063 	add.w	r0, r2, r3, asr #1
 8005468:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
 800546c:	42a3      	cmp	r3, r4
 800546e:	d205      	bcs.n	800547c <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8005470:	1c42      	adds	r2, r0, #1
 8005472:	428a      	cmp	r2, r1
 8005474:	ddf5      	ble.n	8005462 <RDMSlotInfo::bsearch(unsigned short)+0xa>
 8005476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547a:	bd30      	pop	{r4, r5, pc}
 800547c:	d9fd      	bls.n	800547a <RDMSlotInfo::bsearch(unsigned short)+0x22>
 800547e:	1e41      	subs	r1, r0, #1
 8005480:	e7f7      	b.n	8005472 <RDMSlotInfo::bsearch(unsigned short)+0x1a>
 8005482:	bf00      	nop
 8005484:	0800ada4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, sp, pc}

08005488 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 8005488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800548c:	4299      	cmp	r1, r3
 800548e:	b510      	push	{r4, lr}
 8005490:	4614      	mov	r4, r2
 8005492:	d103      	bne.n	800549c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8005494:	4611      	mov	r1, r2
 8005496:	f7fc fbc1 	bl	8001c1c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 800549a:	bd10      	pop	{r4, pc}
 800549c:	4608      	mov	r0, r1
 800549e:	f7ff ffdb 	bl	8005458 <RDMSlotInfo::bsearch(unsigned short)>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	da02      	bge.n	80054ac <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 80054a6:	2000      	movs	r0, #0
 80054a8:	6020      	str	r0, [r4, #0]
 80054aa:	e7f6      	b.n	800549a <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 80054ae:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80054b2:	6858      	ldr	r0, [r3, #4]
 80054b4:	4602      	mov	r2, r0
 80054b6:	4613      	mov	r3, r2
 80054b8:	7819      	ldrb	r1, [r3, #0]
 80054ba:	3201      	adds	r2, #1
 80054bc:	2900      	cmp	r1, #0
 80054be:	d1fa      	bne.n	80054b6 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 80054c0:	1a1b      	subs	r3, r3, r0
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	e7e8      	b.n	800549a <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80054c8:	0800ada4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, sp, pc}

080054cc <RDMDevice::RDMDevice()>:
 80054cc:	4a34      	ldr	r2, [pc, #208]	; (80055a0 <RDMDevice::RDMDevice()+0xd4>)
 80054ce:	2300      	movs	r3, #0
 80054d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054d2:	4604      	mov	r4, r0
 80054d4:	4611      	mov	r1, r2
 80054d6:	7003      	strb	r3, [r0, #0]
 80054d8:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 80054dc:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 80054e0:	6783      	str	r3, [r0, #120]	; 0x78
 80054e2:	4613      	mov	r3, r2
 80054e4:	7818      	ldrb	r0, [r3, #0]
 80054e6:	3201      	adds	r2, #1
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d1fa      	bne.n	80054e2 <RDMDevice::RDMDevice()+0x16>
 80054ec:	1a5b      	subs	r3, r3, r1
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	bf28      	it	cs
 80054f2:	2320      	movcs	r3, #32
 80054f4:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 80054f8:	4629      	mov	r1, r5
 80054fa:	461a      	mov	r2, r3
 80054fc:	4828      	ldr	r0, [pc, #160]	; (80055a0 <RDMDevice::RDMDevice()+0xd4>)
 80054fe:	3a01      	subs	r2, #1
 8005500:	d23e      	bcs.n	8005580 <RDMDevice::RDMDevice()+0xb4>
 8005502:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8005506:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <RDMDevice::RDMDevice()+0xd8>)
 8005508:	4669      	mov	r1, sp
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	7062      	strb	r2, [r4, #1]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	70a3      	strb	r3, [r4, #2]
 8005512:	4b25      	ldr	r3, [pc, #148]	; (80055a8 <RDMDevice::RDMDevice()+0xdc>)
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	f001 fd4d 	bl	8006fb4 <Network::MacAddressCopyTo(unsigned char*)>
 800551a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800551e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005522:	70e3      	strb	r3, [r4, #3]
 8005524:	72a3      	strb	r3, [r4, #10]
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <RDMDevice::RDMDevice()+0xe0>)
 8005528:	7122      	strb	r2, [r4, #4]
 800552a:	7262      	strb	r2, [r4, #9]
 800552c:	461a      	mov	r2, r3
 800552e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005532:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005536:	7161      	strb	r1, [r4, #5]
 8005538:	71a0      	strb	r0, [r4, #6]
 800553a:	71e0      	strb	r0, [r4, #7]
 800553c:	7221      	strb	r1, [r4, #8]
 800553e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005542:	2900      	cmp	r1, #0
 8005544:	d1fb      	bne.n	800553e <RDMDevice::RDMDevice()+0x72>
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	2b20      	cmp	r3, #32
 800554a:	bf28      	it	cs
 800554c:	2320      	movcs	r3, #32
 800554e:	461a      	mov	r2, r3
 8005550:	4916      	ldr	r1, [pc, #88]	; (80055ac <RDMDevice::RDMDevice()+0xe0>)
 8005552:	3a01      	subs	r2, #1
 8005554:	d219      	bcs.n	800558a <RDMDevice::RDMDevice()+0xbe>
 8005556:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800555a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800555e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8005562:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8005566:	2315      	movs	r3, #21
 8005568:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <RDMDevice::RDMDevice()+0xe4>)
 800556a:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 800556e:	f104 0166 	add.w	r1, r4, #102	; 0x66
 8005572:	f104 0351 	add.w	r3, r4, #81	; 0x51
 8005576:	4299      	cmp	r1, r3
 8005578:	d10c      	bne.n	8005594 <RDMDevice::RDMDevice()+0xc8>
 800557a:	4620      	mov	r0, r4
 800557c:	b002      	add	sp, #8
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	f810 6b01 	ldrb.w	r6, [r0], #1
 8005584:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005588:	e7b9      	b.n	80054fe <RDMDevice::RDMDevice()+0x32>
 800558a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800558e:	f805 0f01 	strb.w	r0, [r5, #1]!
 8005592:	e7de      	b.n	8005552 <RDMDevice::RDMDevice()+0x86>
 8005594:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005598:	f803 0f01 	strb.w	r0, [r3, #1]!
 800559c:	e7eb      	b.n	8005576 <RDMDevice::RDMDevice()+0xaa>
 800559e:	bf00      	nop
 80055a0:	0800afe5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80055a4:	0800afe3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80055a8:	2000069c 	mulcs	r0, ip, r6
 80055ac:	0800aee4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, fp, sp, pc}
 80055b0:	0800afcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, sp, pc}

080055b4 <RDMDevice::Print()>:
 80055b4:	b513      	push	{r0, r1, r4, lr}
 80055b6:	4604      	mov	r4, r0
 80055b8:	4818      	ldr	r0, [pc, #96]	; (800561c <RDMDevice::Print()+0x68>)
 80055ba:	f7fc fe61 	bl	8002280 <printf>
 80055be:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 80055c2:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80055c6:	4816      	ldr	r0, [pc, #88]	; (8005620 <RDMDevice::Print()+0x6c>)
 80055c8:	f7fc fe5a 	bl	8002280 <printf>
 80055cc:	78a2      	ldrb	r2, [r4, #2]
 80055ce:	7861      	ldrb	r1, [r4, #1]
 80055d0:	4814      	ldr	r0, [pc, #80]	; (8005624 <RDMDevice::Print()+0x70>)
 80055d2:	f7fc fe55 	bl	8002280 <printf>
 80055d6:	79e3      	ldrb	r3, [r4, #7]
 80055d8:	7a62      	ldrb	r2, [r4, #9]
 80055da:	7aa1      	ldrb	r1, [r4, #10]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4812      	ldr	r0, [pc, #72]	; (8005628 <RDMDevice::Print()+0x74>)
 80055e0:	7a23      	ldrb	r3, [r4, #8]
 80055e2:	f7fc fe4d 	bl	8002280 <printf>
 80055e6:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 80055ea:	f104 020b 	add.w	r2, r4, #11
 80055ee:	480f      	ldr	r0, [pc, #60]	; (800562c <RDMDevice::Print()+0x78>)
 80055f0:	f7fc fe46 	bl	8002280 <printf>
 80055f4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80055f8:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80055fc:	0a09      	lsrs	r1, r1, #8
 80055fe:	480c      	ldr	r0, [pc, #48]	; (8005630 <RDMDevice::Print()+0x7c>)
 8005600:	f7fc fe3e 	bl	8002280 <printf>
 8005604:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8005608:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800560c:	4809      	ldr	r0, [pc, #36]	; (8005634 <RDMDevice::Print()+0x80>)
 800560e:	0a09      	lsrs	r1, r1, #8
 8005610:	b002      	add	sp, #8
 8005612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005616:	f7fc be33 	b.w	8002280 <printf>
 800561a:	bf00      	nop
 800561c:	0800aef9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 8005620:	0800af13 	stmdaeq	r0, {r0, r1, r4, r8, r9, sl, fp, sp, pc}
 8005624:	0800af2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, sl, fp, sp, pc}
 8005628:	0800af4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, sp, pc}
 800562c:	0800af74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, sp, pc}
 8005630:	0800af8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, r9, sl, fp, sp, pc}
 8005634:	0800afae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, pc}

08005638 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	4604      	mov	r4, r0
 800563c:	460e      	mov	r6, r1
 800563e:	4611      	mov	r1, r2
 8005640:	4617      	mov	r7, r2
 8005642:	461d      	mov	r5, r3
 8005644:	f000 fa74 	bl	8005b30 <PixelConfiguration::Validate(unsigned int&)>
 8005648:	7d62      	ldrb	r2, [r4, #21]
 800564a:	b94a      	cbnz	r2, 8005660 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	b11b      	cbz	r3, 8005658 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x20>
 8005650:	3b0b      	subs	r3, #11
 8005652:	2b01      	cmp	r3, #1
 8005654:	bf88      	it	hi
 8005656:	6022      	strhi	r2, [r4, #0]
 8005658:	4639      	mov	r1, r7
 800565a:	4620      	mov	r0, r4
 800565c:	f000 fa68 	bl	8005b30 <PixelConfiguration::Validate(unsigned int&)>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	2b07      	cmp	r3, #7
 8005664:	bf15      	itete	ne
 8005666:	f44f 71aa 	movne.w	r1, #340	; 0x154
 800566a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800566e:	23aa      	movne	r3, #170	; 0xaa
 8005670:	2380      	moveq	r3, #128	; 0x80
 8005672:	bf14      	ite	ne
 8005674:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 8005678:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800567c:	e9c5 3100 	strd	r3, r1, [r5]
 8005680:	6a21      	ldr	r1, [r4, #32]
 8005682:	60aa      	str	r2, [r5, #8]
 8005684:	6862      	ldr	r2, [r4, #4]
 8005686:	b109      	cbz	r1, 800568c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 8005688:	4291      	cmp	r1, r2
 800568a:	d900      	bls.n	800568e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 800568c:	6222      	str	r2, [r4, #32]
 800568e:	6a21      	ldr	r1, [r4, #32]
 8005690:	69e0      	ldr	r0, [r4, #28]
 8005692:	fbb2 f2f1 	udiv	r2, r2, r1
 8005696:	3301      	adds	r3, #1
 8005698:	6262      	str	r2, [r4, #36]	; 0x24
 800569a:	42b0      	cmp	r0, r6
 800569c:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a0:	bf28      	it	cs
 80056a2:	4630      	movcs	r0, r6
 80056a4:	1c53      	adds	r3, r2, #1
 80056a6:	2e01      	cmp	r6, #1
 80056a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80056aa:	bf1c      	itt	ne
 80056ac:	4343      	mulne	r3, r0
 80056ae:	f103 32ff 	addne.w	r2, r3, #4294967295	; 0xffffffff
 80056b2:	61e0      	str	r0, [r4, #28]
 80056b4:	60ea      	str	r2, [r5, #12]
 80056b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056b8 <PixelDmxConfiguration::Print()>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4604      	mov	r4, r0
 80056bc:	f000 face 	bl	8005c5c <PixelConfiguration::Print()>
 80056c0:	4806      	ldr	r0, [pc, #24]	; (80056dc <PixelDmxConfiguration::Print()+0x24>)
 80056c2:	f7fc fddd 	bl	8002280 <printf>
 80056c6:	69e1      	ldr	r1, [r4, #28]
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <PixelDmxConfiguration::Print()+0x28>)
 80056ca:	f7fc fdd9 	bl	8002280 <printf>
 80056ce:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 80056d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d6:	4803      	ldr	r0, [pc, #12]	; (80056e4 <PixelDmxConfiguration::Print()+0x2c>)
 80056d8:	f7fc bdd2 	b.w	8002280 <printf>
 80056dc:	0800b001 	stmdaeq	r0, {r0, ip, sp, pc}
 80056e0:	0800b01a 	stmdaeq	r0, {r1, r3, r4, ip, sp, pc}
 80056e4:	0800b029 	stmdaeq	r0, {r0, r3, r5, ip, sp, pc}

080056e8 <WS28xxDmx::GetDmxStartAddress()>:
 80056e8:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
 80056ec:	4770      	bx	lr

080056ee <WS28xxDmx::GetDmxFootprint()>:
 80056ee:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 80056f2:	4770      	bx	lr

080056f4 <WS28xxDmx::~WS28xxDmx()>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4b06      	ldr	r3, [pc, #24]	; (8005710 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 80056f8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80056fa:	4604      	mov	r4, r0
 80056fc:	6003      	str	r3, [r0, #0]
 80056fe:	b12d      	cbz	r5, 800570c <WS28xxDmx::~WS28xxDmx()+0x18>
 8005700:	4628      	mov	r0, r5
 8005702:	f001 fb37 	bl	8006d74 <WS28xx::~WS28xx()>
 8005706:	4628      	mov	r0, r5
 8005708:	f002 ffab 	bl	8008662 <operator delete(void*)>
 800570c:	4620      	mov	r0, r4
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	0800b058 	stmdaeq	r0, {r3, r4, r6, ip, sp, pc}

08005714 <WS28xxDmx::~WS28xxDmx()>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	f7ff ffec 	bl	80056f4 <WS28xxDmx::~WS28xxDmx()>
 800571c:	4620      	mov	r0, r4
 800571e:	f002 ffa0 	bl	8008662 <operator delete(void*)>
 8005722:	4620      	mov	r0, r4
 8005724:	bd10      	pop	{r4, pc}

08005726 <WS28xxDmx::Blackout(bool)>:
 8005726:	b538      	push	{r3, r4, r5, lr}
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 8005730:	f004 f9b2 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8005734:	2800      	cmp	r0, #0
 8005736:	d1fb      	bne.n	8005730 <WS28xxDmx::Blackout(bool)+0xa>
 8005738:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800573a:	b11c      	cbz	r4, 8005744 <WS28xxDmx::Blackout(bool)+0x1e>
 800573c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005740:	f001 bb96 	b.w	8006e70 <WS28xx::Blackout()>
 8005744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005748:	f001 bb76 	b.w	8006e38 <WS28xx::Update()>

0800574c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	b087      	sub	sp, #28
 8005752:	4607      	mov	r7, r0
 8005754:	4692      	mov	sl, r2
 8005756:	9104      	str	r1, [sp, #16]
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	f004 f99d 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 800575e:	2800      	cmp	r0, #0
 8005760:	d171      	bne.n	8005846 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	9c03      	ldr	r4, [sp, #12]
 8005766:	f003 0103 	and.w	r1, r3, #3
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	2902      	cmp	r1, #2
 800576e:	fbb4 f6f3 	udiv	r6, r4, r3
 8005772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005774:	d026      	beq.n	80057c4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 8005776:	2903      	cmp	r1, #3
 8005778:	d02b      	beq.n	80057d2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 800577a:	2901      	cmp	r1, #1
 800577c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800577e:	d022      	beq.n	80057c6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8005780:	4296      	cmp	r6, r2
 8005782:	bf28      	it	cs
 8005784:	4616      	movcs	r6, r2
 8005786:	4295      	cmp	r5, r2
 8005788:	d925      	bls.n	80057d6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 800578a:	4605      	mov	r5, r0
 800578c:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 800578e:	3c01      	subs	r4, #1
 8005790:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8005794:	2b03      	cmp	r3, #3
 8005796:	fb09 f805 	mul.w	r8, r9, r5
 800579a:	4454      	add	r4, sl
 800579c:	eb08 0b09 	add.w	fp, r8, r9
 80057a0:	d035      	beq.n	800580e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 80057a2:	42ae      	cmp	r6, r5
 80057a4:	d935      	bls.n	8005812 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 80057a6:	9a03      	ldr	r2, [sp, #12]
 80057a8:	eba4 030a 	sub.w	r3, r4, sl
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d930      	bls.n	8005812 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 80057b0:	4641      	mov	r1, r8
 80057b2:	f894 f000 	pld	[r4]
 80057b6:	458b      	cmp	fp, r1
 80057b8:	d138      	bne.n	800582c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 80057ba:	3501      	adds	r5, #1
 80057bc:	44c8      	add	r8, r9
 80057be:	44cb      	add	fp, r9
 80057c0:	3404      	adds	r4, #4
 80057c2:	e7ee      	b.n	80057a2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
 80057c4:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80057c6:	442e      	add	r6, r5
 80057c8:	4296      	cmp	r6, r2
 80057ca:	bf28      	it	cs
 80057cc:	4616      	movcs	r6, r2
 80057ce:	4604      	mov	r4, r0
 80057d0:	e7de      	b.n	8005790 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 80057d2:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80057d4:	e7f7      	b.n	80057c6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 80057d6:	4605      	mov	r5, r0
 80057d8:	4604      	mov	r4, r0
 80057da:	e7d9      	b.n	8005790 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 80057dc:	78a2      	ldrb	r2, [r4, #2]
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	7822      	ldrb	r2, [r4, #0]
 80057e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80057e6:	9105      	str	r1, [sp, #20]
 80057e8:	f000 fd84 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80057ec:	9905      	ldr	r1, [sp, #20]
 80057ee:	3101      	adds	r1, #1
 80057f0:	e007      	b.n	8005802 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
 80057f2:	9a03      	ldr	r2, [sp, #12]
 80057f4:	eba4 030a 	sub.w	r3, r4, sl
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d90a      	bls.n	8005812 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 80057fc:	4641      	mov	r1, r8
 80057fe:	f894 f000 	pld	[r4]
 8005802:	458b      	cmp	fp, r1
 8005804:	d1ea      	bne.n	80057dc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 8005806:	3501      	adds	r5, #1
 8005808:	44c8      	add	r8, r9
 800580a:	44cb      	add	fp, r9
 800580c:	3403      	adds	r4, #3
 800580e:	42ae      	cmp	r6, r5
 8005810:	d8ef      	bhi.n	80057f2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa6>
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	9a04      	ldr	r2, [sp, #16]
 8005816:	4293      	cmp	r3, r2
 8005818:	d115      	bne.n	8005846 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800581a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800581e:	b993      	cbnz	r3, 8005846 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 8005820:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005822:	b007      	add	sp, #28
 8005824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	f001 bb06 	b.w	8006e38 <WS28xx::Update()>
 800582c:	78e2      	ldrb	r2, [r4, #3]
 800582e:	7863      	ldrb	r3, [r4, #1]
 8005830:	9201      	str	r2, [sp, #4]
 8005832:	78a2      	ldrb	r2, [r4, #2]
 8005834:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005836:	9200      	str	r2, [sp, #0]
 8005838:	7822      	ldrb	r2, [r4, #0]
 800583a:	9105      	str	r1, [sp, #20]
 800583c:	f001 f98c 	bl	8006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005840:	9905      	ldr	r1, [sp, #20]
 8005842:	3101      	adds	r1, #1
 8005844:	e7b7      	b.n	80057b6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005846:	b007      	add	sp, #28
 8005848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800584c <WS28xxDmx::FullOn()>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	f004 f922 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8005854:	2800      	cmp	r0, #0
 8005856:	d1fb      	bne.n	8005850 <WS28xxDmx::FullOn()+0x4>
 8005858:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800585a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585e:	f001 bb4e 	b.w	8006efe <WS28xx::FullOn()>

08005862 <WS28xxDmx::Print()>:
 8005862:	3004      	adds	r0, #4
 8005864:	f7ff bf28 	b.w	80056b8 <PixelDmxConfiguration::Print()>

08005868 <WS28xxDmx::Start(unsigned int)>:
 8005868:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800586c:	b93b      	cbnz	r3, 800587e <WS28xxDmx::Start(unsigned int)+0x16>
 800586e:	2301      	movs	r3, #1
 8005870:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 8005874:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8005876:	b110      	cbz	r0, 800587e <WS28xxDmx::Start(unsigned int)+0x16>
 8005878:	6803      	ldr	r3, [r0, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4718      	bx	r3
 800587e:	4770      	bx	lr

08005880 <WS28xxDmx::Stop(unsigned int)>:
 8005880:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8005884:	b13b      	cbz	r3, 8005896 <WS28xxDmx::Stop(unsigned int)+0x16>
 8005886:	2300      	movs	r3, #0
 8005888:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
 800588c:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800588e:	b110      	cbz	r0, 8005896 <WS28xxDmx::Stop(unsigned int)+0x16>
 8005890:	6803      	ldr	r3, [r0, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4718      	bx	r3
 8005896:	4770      	bx	lr

08005898 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8005898:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
 800589c:	b508      	push	{r3, lr}
 800589e:	428a      	cmp	r2, r1
 80058a0:	d101      	bne.n	80058a6 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xe>
 80058a2:	2001      	movs	r0, #1
 80058a4:	bd08      	pop	{r3, pc}
 80058a6:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 80058aa:	440a      	add	r2, r1
 80058ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80058b0:	dc0c      	bgt.n	80058cc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 80058b2:	1e4a      	subs	r2, r1, #1
 80058b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80058b8:	d208      	bcs.n	80058cc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x34>
 80058ba:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
 80058be:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d0ee      	beq.n	80058a2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 80058c4:	6803      	ldr	r3, [r0, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4798      	blx	r3
 80058ca:	e7ea      	b.n	80058a2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>
 80058cc:	2000      	movs	r0, #0
 80058ce:	e7e9      	b.n	80058a4 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>

080058d0 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80058d0:	4603      	mov	r3, r0
 80058d2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
 80058d6:	4288      	cmp	r0, r1
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	d30f      	bcc.n	80058fe <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2e>
 80058de:	7090      	strb	r0, [r2, #2]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	fbb1 f0f3 	udiv	r0, r1, r3
 80058e6:	fb03 1110 	mls	r1, r3, r0, r1
 80058ea:	2903      	cmp	r1, #3
 80058ec:	d80e      	bhi.n	800590c <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3c>
 80058ee:	e8df f001 	tbb	[pc, r1]
 80058f2:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 80058f6:	f240 2305 	movw	r3, #517	; 0x205
 80058fa:	2001      	movs	r0, #1
 80058fc:	8013      	strh	r3, [r2, #0]
 80058fe:	4770      	bx	lr
 8005900:	f240 2306 	movw	r3, #518	; 0x206
 8005904:	e7f9      	b.n	80058fa <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 8005906:	f240 2307 	movw	r3, #519	; 0x207
 800590a:	e7f6      	b.n	80058fa <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
 800590c:	f240 2312 	movw	r3, #530	; 0x212
 8005910:	e7f3      	b.n	80058fa <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2a>
	...

08005914 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4605      	mov	r5, r0
 8005918:	460e      	mov	r6, r1
 800591a:	4b19      	ldr	r3, [pc, #100]	; (8005980 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x6c>)
 800591c:	4604      	mov	r4, r0
 800591e:	f845 3b04 	str.w	r3, [r5], #4
 8005922:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005926:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800592a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800592e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005932:	2300      	movs	r3, #0
 8005934:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8005938:	6563      	str	r3, [r4, #84]	; 0x54
 800593a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x70>)
 8005940:	1d26      	adds	r6, r4, #4
 8005942:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8005946:	2101      	movs	r1, #1
 8005948:	4630      	mov	r0, r6
 800594a:	601c      	str	r4, [r3, #0]
 800594c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005950:	f7ff fe72 	bl	8005638 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8005954:	2028      	movs	r0, #40	; 0x28
 8005956:	f002 fe88 	bl	800866a <operator new(unsigned int)>
 800595a:	4605      	mov	r5, r0
 800595c:	4631      	mov	r1, r6
 800595e:	f001 fa27 	bl	8006db0 <WS28xx::WS28xx(PixelConfiguration&)>
 8005962:	4628      	mov	r0, r5
 8005964:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005966:	f001 fa83 	bl	8006e70 <WS28xx::Blackout()>
 800596a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800596c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800596e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8005972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005974:	4620      	mov	r0, r4
 8005976:	4353      	muls	r3, r2
 8005978:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800597c:	bd70      	pop	{r4, r5, r6, pc}
 800597e:	bf00      	nop
 8005980:	0800b058 	stmdaeq	r0, {r3, r4, r6, ip, sp, pc}
 8005984:	20000650 	andcs	r0, r0, r0, asr r6

08005988 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 8005988:	6001      	str	r1, [r0, #0]
 800598a:	2100      	movs	r1, #0
 800598c:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 8005990:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x20>)
 8005992:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x24>)
 8005998:	4905      	ldr	r1, [pc, #20]	; (80059b0 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x28>)
 800599a:	e9c0 c203 	strd	ip, r2, [r0, #12]
 800599e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059a2:	e9c0 1205 	strd	r1, r2, [r0, #20]
 80059a6:	4770      	bx	lr
 80059a8:	0100aa03 	tsteq	r0, r3, lsl #20
 80059ac:	01ff003d 	mvnseq	r0, sp, lsr r0
 80059b0:	06000100 	streq	r0, [r0], -r0, lsl #2

080059b4 <PixelDmxParams::Load()>:
 80059b4:	b508      	push	{r3, lr}
 80059b6:	2300      	movs	r3, #0
 80059b8:	4601      	mov	r1, r0
 80059ba:	6043      	str	r3, [r0, #4]
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	b120      	cbz	r0, 80059ca <PixelDmxParams::Load()+0x16>
 80059c0:	6803      	ldr	r3, [r0, #0]
 80059c2:	3104      	adds	r1, #4
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4798      	blx	r3
 80059c8:	2001      	movs	r0, #1
 80059ca:	bd08      	pop	{r3, pc}

080059cc <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 80059cc:	6843      	ldr	r3, [r0, #4]
 80059ce:	07da      	lsls	r2, r3, #31
 80059d0:	bf44      	itt	mi
 80059d2:	7a02      	ldrbmi	r2, [r0, #8]
 80059d4:	600a      	strmi	r2, [r1, #0]
 80059d6:	079a      	lsls	r2, r3, #30
 80059d8:	d505      	bpl.n	80059e6 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 80059da:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	bf08      	it	eq
 80059e2:	22aa      	moveq	r2, #170	; 0xaa
 80059e4:	604a      	str	r2, [r1, #4]
 80059e6:	059a      	lsls	r2, r3, #22
 80059e8:	bf44      	itt	mi
 80059ea:	7dc2      	ldrbmi	r2, [r0, #23]
 80059ec:	608a      	strmi	r2, [r1, #8]
 80059ee:	055a      	lsls	r2, r3, #21
 80059f0:	bf44      	itt	mi
 80059f2:	7e02      	ldrbmi	r2, [r0, #24]
 80059f4:	740a      	strbmi	r2, [r1, #16]
 80059f6:	051a      	lsls	r2, r3, #20
 80059f8:	bf44      	itt	mi
 80059fa:	7e42      	ldrbmi	r2, [r0, #25]
 80059fc:	744a      	strbmi	r2, [r1, #17]
 80059fe:	06da      	lsls	r2, r3, #27
 8005a00:	bf44      	itt	mi
 8005a02:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8005a06:	60ca      	strmi	r2, [r1, #12]
 8005a08:	069a      	lsls	r2, r3, #26
 8005a0a:	bf44      	itt	mi
 8005a0c:	7c82      	ldrbmi	r2, [r0, #18]
 8005a0e:	748a      	strbmi	r2, [r1, #18]
 8005a10:	061a      	lsls	r2, r3, #24
 8005a12:	d504      	bpl.n	8005a1e <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005a14:	2201      	movs	r2, #1
 8005a16:	750a      	strb	r2, [r1, #20]
 8005a18:	7b42      	ldrb	r2, [r0, #13]
 8005a1a:	b102      	cbz	r2, 8005a1e <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8005a1c:	74ca      	strb	r2, [r1, #19]
 8005a1e:	075a      	lsls	r2, r3, #29
 8005a20:	d50b      	bpl.n	8005a3a <PixelDmxParams::Set(PixelDmxConfiguration*)+0x6e>
 8005a22:	7ac2      	ldrb	r2, [r0, #11]
 8005a24:	b510      	push	{r4, lr}
 8005a26:	7b04      	ldrb	r4, [r0, #12]
 8005a28:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005a2c:	858a      	strh	r2, [r1, #44]	; 0x2c
 8005a2e:	05da      	lsls	r2, r3, #23
 8005a30:	bf44      	itt	mi
 8005a32:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005a36:	620b      	strmi	r3, [r1, #32]
 8005a38:	bd10      	pop	{r4, pc}
 8005a3a:	05db      	lsls	r3, r3, #23
 8005a3c:	bf44      	itt	mi
 8005a3e:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005a42:	620b      	strmi	r3, [r1, #32]
 8005a44:	4770      	bx	lr

08005a46 <PixelDmxParams::Dump()>:
 8005a46:	4770      	bx	lr

08005a48 <LightSet::Blackout(bool)>:
 8005a48:	4770      	bx	lr

08005a4a <LightSet::FullOn()>:
 8005a4a:	4770      	bx	lr

08005a4c <LightSet::Print()>:
 8005a4c:	4770      	bx	lr

08005a4e <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 8005a4e:	2000      	movs	r0, #0
 8005a50:	4770      	bx	lr

08005a52 <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8005a52:	2001      	movs	r0, #1
 8005a54:	4770      	bx	lr

08005a56 <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005a56:	2006      	movs	r0, #6
 8005a58:	4770      	bx	lr

08005a5a <PixelDmxParamsRdm::Stop(unsigned int)>:
 8005a5a:	4770      	bx	lr

08005a5c <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005a5c:	2905      	cmp	r1, #5
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	bf9f      	itttt	ls
 8005a64:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005a68:	7090      	strbls	r0, [r2, #2]
 8005a6a:	8013      	strhls	r3, [r2, #0]
 8005a6c:	2001      	movls	r0, #1
 8005a6e:	4770      	bx	lr

08005a70 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005a70:	4770      	bx	lr

08005a72 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005a72:	b510      	push	{r4, lr}
 8005a74:	4604      	mov	r4, r0
 8005a76:	f002 fdf4 	bl	8008662 <operator delete(void*)>
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	bd10      	pop	{r4, pc}
	...

08005a80 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)>:
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0xc>)
 8005a82:	6003      	str	r3, [r0, #0]
 8005a84:	4b02      	ldr	r3, [pc, #8]	; (8005a90 <PixelDmxParamsRdm::PixelDmxParamsRdm(PixelDmxStore*)+0x10>)
 8005a86:	6019      	str	r1, [r3, #0]
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	0800b090 	stmdaeq	r0, {r4, r7, ip, sp, pc}
 8005a90:	20000654 	andcs	r0, r0, r4, asr r6

08005a94 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	b570      	push	{r4, r5, r6, lr}
 8005a98:	4606      	mov	r6, r0
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	d934      	bls.n	8005b08 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005a9e:	7953      	ldrb	r3, [r2, #5]
 8005aa0:	b933      	cbnz	r3, 8005ab0 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005aa4:	7013      	strb	r3, [r2, #0]
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7fb fe89 	bl	80017c0 <PixelDmxParamsRdm::Display(unsigned char const*)>
 8005aae:	e02b      	b.n	8005b08 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 8005ab0:	2bff      	cmp	r3, #255	; 0xff
 8005ab2:	d124      	bne.n	8005afe <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005ab6:	7811      	ldrb	r1, [r2, #0]
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	d1f4      	bne.n	8005aa6 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005abc:	4d14      	ldr	r5, [pc, #80]	; (8005b10 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8005abe:	7013      	strb	r3, [r2, #0]
 8005ac0:	6828      	ldr	r0, [r5, #0]
 8005ac2:	7821      	ldrb	r1, [r4, #0]
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	290e      	cmp	r1, #14
 8005ac8:	bf28      	it	cs
 8005aca:	210e      	movcs	r1, #14
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4798      	blx	r3
 8005ad0:	6828      	ldr	r0, [r5, #0]
 8005ad2:	7861      	ldrb	r1, [r4, #1]
 8005ad4:	6803      	ldr	r3, [r0, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4798      	blx	r3
 8005ada:	6828      	ldr	r0, [r5, #0]
 8005adc:	78a1      	ldrb	r1, [r4, #2]
 8005ade:	6803      	ldr	r3, [r0, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4798      	blx	r3
 8005ae4:	6828      	ldr	r0, [r5, #0]
 8005ae6:	78e1      	ldrb	r1, [r4, #3]
 8005ae8:	6803      	ldr	r3, [r0, #0]
 8005aea:	2906      	cmp	r1, #6
 8005aec:	bf28      	it	cs
 8005aee:	2106      	movcs	r1, #6
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4798      	blx	r3
 8005af4:	6828      	ldr	r0, [r5, #0]
 8005af6:	7921      	ldrb	r1, [r4, #4]
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	4798      	blx	r3
 8005afe:	7963      	ldrb	r3, [r4, #5]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2bfd      	cmp	r3, #253	; 0xfd
 8005b06:	d8ce      	bhi.n	8005aa6 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000658 	andcs	r0, r0, r8, asr r6
 8005b10:	20000654 	andcs	r0, r0, r4, asr r6

08005b14 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005b14:	23c0      	movs	r3, #192	; 0xc0
 8005b16:	2803      	cmp	r0, #3
 8005b18:	700b      	strb	r3, [r1, #0]
 8005b1a:	d006      	beq.n	8005b2a <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005b1c:	3808      	subs	r0, #8
 8005b1e:	2803      	cmp	r0, #3
 8005b20:	bf34      	ite	cc
 8005b22:	23fc      	movcc	r3, #252	; 0xfc
 8005b24:	23f0      	movcs	r3, #240	; 0xf0
 8005b26:	7013      	strb	r3, [r2, #0]
 8005b28:	4770      	bx	lr
 8005b2a:	23f8      	movs	r3, #248	; 0xf8
 8005b2c:	e7fb      	b.n	8005b26 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

08005b30 <PixelConfiguration::Validate(unsigned int&)>:
 8005b30:	b513      	push	{r0, r1, r4, lr}
 8005b32:	4604      	mov	r4, r0
 8005b34:	6800      	ldr	r0, [r0, #0]
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	2807      	cmp	r0, #7
 8005b3a:	68a2      	ldr	r2, [r4, #8]
 8005b3c:	d128      	bne.n	8005b90 <PixelConfiguration::Validate(unsigned int&)+0x60>
 8005b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b42:	bf28      	it	cs
 8005b44:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	2304      	movs	r3, #4
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	2301      	movs	r3, #1
 8005b50:	2a06      	cmp	r2, #6
 8005b52:	7563      	strb	r3, [r4, #21]
 8005b54:	d102      	bne.n	8005b5c <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8005b56:	f000 f8fd 	bl	8005d54 <PixelType::GetMap(pixel::Type)>
 8005b5a:	60a0      	str	r0, [r4, #8]
 8005b5c:	7c63      	ldrb	r3, [r4, #17]
 8005b5e:	7c22      	ldrb	r2, [r4, #16]
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	bf28      	it	cs
 8005b66:	2300      	movcs	r3, #0
 8005b68:	f10d 0207 	add.w	r2, sp, #7
 8005b6c:	bf28      	it	cs
 8005b6e:	8223      	strhcs	r3, [r4, #16]
 8005b70:	f10d 0106 	add.w	r1, sp, #6
 8005b74:	f7ff ffce 	bl	8005b14 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8005b78:	7c23      	ldrb	r3, [r4, #16]
 8005b7a:	b913      	cbnz	r3, 8005b82 <PixelConfiguration::Validate(unsigned int&)+0x52>
 8005b7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005b80:	7423      	strb	r3, [r4, #16]
 8005b82:	7c63      	ldrb	r3, [r4, #17]
 8005b84:	b913      	cbnz	r3, 8005b8c <PixelConfiguration::Validate(unsigned int&)+0x5c>
 8005b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b8a:	7463      	strb	r3, [r4, #17]
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 8005b8e:	e01e      	b.n	8005bce <PixelConfiguration::Validate(unsigned int&)+0x9e>
 8005b90:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8005b94:	bf28      	it	cs
 8005b96:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005b9a:	6063      	str	r3, [r4, #4]
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	f1a0 030b 	sub.w	r3, r0, #11
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d806      	bhi.n	8005bb6 <PixelConfiguration::Validate(unsigned int&)+0x86>
 8005ba8:	7ca3      	ldrb	r3, [r4, #18]
 8005baa:	2b1f      	cmp	r3, #31
 8005bac:	d83d      	bhi.n	8005c2a <PixelConfiguration::Validate(unsigned int&)+0xfa>
 8005bae:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005bb2:	74a3      	strb	r3, [r4, #18]
 8005bb4:	e001      	b.n	8005bba <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d139      	bne.n	8005c2e <PixelConfiguration::Validate(unsigned int&)+0xfe>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2a06      	cmp	r2, #6
 8005bbe:	bf08      	it	eq
 8005bc0:	60a3      	streq	r3, [r4, #8]
 8005bc2:	280d      	cmp	r0, #13
 8005bc4:	7563      	strb	r3, [r4, #21]
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	d119      	bne.n	8005bfe <PixelConfiguration::Validate(unsigned int&)+0xce>
 8005bca:	b913      	cbnz	r3, 8005bd2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 8005bce:	60e3      	str	r3, [r4, #12]
 8005bd0:	e003      	b.n	8005bda <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d900      	bls.n	8005bda <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005bd8:	60e2      	str	r2, [r4, #12]
 8005bda:	7d23      	ldrb	r3, [r4, #20]
 8005bdc:	b31b      	cbz	r3, 8005c26 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8005bde:	7ce3      	ldrb	r3, [r4, #19]
 8005be0:	b9ab      	cbnz	r3, 8005c0e <PixelConfiguration::Validate(unsigned int&)+0xde>
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	b17a      	cbz	r2, 8005c06 <PixelConfiguration::Validate(unsigned int&)+0xd6>
 8005be6:	f1a2 030b 	sub.w	r3, r2, #11
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d90d      	bls.n	8005c0a <PixelConfiguration::Validate(unsigned int&)+0xda>
 8005bee:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 8005bf0:	4914      	ldr	r1, [pc, #80]	; (8005c44 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8005bf2:	2a0d      	cmp	r2, #13
 8005bf4:	bf08      	it	eq
 8005bf6:	460b      	moveq	r3, r1
 8005bf8:	61a3      	str	r3, [r4, #24]
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0e4      	beq.n	8005bcc <PixelConfiguration::Validate(unsigned int&)+0x9c>
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 8005c04:	e7e6      	b.n	8005bd4 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 8005c08:	e7f6      	b.n	8005bf8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 8005c0c:	e7f4      	b.n	8005bf8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005c0e:	f1a3 0214 	sub.w	r2, r3, #20
 8005c12:	2a05      	cmp	r2, #5
 8005c14:	d807      	bhi.n	8005c26 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8005c16:	3b15      	subs	r3, #21
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	bf96      	itet	ls
 8005c1c:	4a0d      	ldrls	r2, [pc, #52]	; (8005c54 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 8005c1e:	4b0e      	ldrhi	r3, [pc, #56]	; (8005c58 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 8005c20:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8005c24:	e7e8      	b.n	8005bf8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005c26:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8005c28:	e7e6      	b.n	8005bf8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8005c2a:	23ff      	movs	r3, #255	; 0xff
 8005c2c:	e7c1      	b.n	8005bb2 <PixelConfiguration::Validate(unsigned int&)+0x82>
 8005c2e:	280d      	cmp	r0, #13
 8005c30:	d18d      	bne.n	8005b4e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8005c32:	e7c2      	b.n	8005bba <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005c34:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005c38:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005c3c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8005c40:	0800b494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp, pc}
 8005c44:	0800b194 	stmdaeq	r0, {r2, r4, r7, r8, ip, sp, pc}
 8005c48:	017d7840 	cmneq	sp, r0, asr #16
 8005c4c:	0800b794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, pc}
 8005c50:	0800b894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, pc}
 8005c54:	0800b180 	stmdaeq	r0, {r7, r8, ip, sp, pc}
 8005c58:	0800b294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp, pc}

08005c5c <PixelConfiguration::Print()>:
 8005c5c:	b513      	push	{r0, r1, r4, lr}
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4825      	ldr	r0, [pc, #148]	; (8005cf8 <PixelConfiguration::Print()+0x9c>)
 8005c62:	f7fc fb0d 	bl	8002280 <printf>
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	f000 f85c 	bl	8005d24 <PixelType::GetType(pixel::Type)>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	4601      	mov	r1, r0
 8005c70:	4822      	ldr	r0, [pc, #136]	; (8005cfc <PixelConfiguration::Print()+0xa0>)
 8005c72:	f7fc fb05 	bl	8002280 <printf>
 8005c76:	6861      	ldr	r1, [r4, #4]
 8005c78:	4821      	ldr	r0, [pc, #132]	; (8005d00 <PixelConfiguration::Print()+0xa4>)
 8005c7a:	f7fc fb01 	bl	8002280 <printf>
 8005c7e:	7d63      	ldrb	r3, [r4, #21]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d030      	beq.n	8005ce6 <PixelConfiguration::Print()+0x8a>
 8005c84:	68a0      	ldr	r0, [r4, #8]
 8005c86:	f000 f859 	bl	8005d3c <PixelType::GetMap(pixel::Map)>
 8005c8a:	68a2      	ldr	r2, [r4, #8]
 8005c8c:	4601      	mov	r1, r0
 8005c8e:	481d      	ldr	r0, [pc, #116]	; (8005d04 <PixelConfiguration::Print()+0xa8>)
 8005c90:	f7fc faf6 	bl	8002280 <printf>
 8005c94:	7c20      	ldrb	r0, [r4, #16]
 8005c96:	f000 f867 	bl	8005d68 <PixelType::ConvertTxH(unsigned char)>
 8005c9a:	f7fa fdd1 	bl	8000840 <__aeabi_f2d>
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	7c21      	ldrb	r1, [r4, #16]
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	9100      	str	r1, [sp, #0]
 8005ca6:	4818      	ldr	r0, [pc, #96]	; (8005d08 <PixelConfiguration::Print()+0xac>)
 8005ca8:	f7fc faea 	bl	8002280 <printf>
 8005cac:	7c60      	ldrb	r0, [r4, #17]
 8005cae:	f000 f85b 	bl	8005d68 <PixelType::ConvertTxH(unsigned char)>
 8005cb2:	f7fa fdc5 	bl	8000840 <__aeabi_f2d>
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	7c61      	ldrb	r1, [r4, #17]
 8005cba:	4602      	mov	r2, r0
 8005cbc:	9100      	str	r1, [sp, #0]
 8005cbe:	4813      	ldr	r0, [pc, #76]	; (8005d0c <PixelConfiguration::Print()+0xb0>)
 8005cc0:	f7fc fade 	bl	8002280 <printf>
 8005cc4:	7d21      	ldrb	r1, [r4, #20]
 8005cc6:	4a12      	ldr	r2, [pc, #72]	; (8005d10 <PixelConfiguration::Print()+0xb4>)
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <PixelConfiguration::Print()+0xb8>)
 8005cca:	4813      	ldr	r0, [pc, #76]	; (8005d18 <PixelConfiguration::Print()+0xbc>)
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	4611      	movne	r1, r2
 8005cd2:	4619      	moveq	r1, r3
 8005cd4:	f7fc fad4 	bl	8002280 <printf>
 8005cd8:	68e1      	ldr	r1, [r4, #12]
 8005cda:	4810      	ldr	r0, [pc, #64]	; (8005d1c <PixelConfiguration::Print()+0xc0>)
 8005cdc:	b002      	add	sp, #8
 8005cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce2:	f7fc bacd 	b.w	8002280 <printf>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	3b0b      	subs	r3, #11
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d8ea      	bhi.n	8005cc4 <PixelConfiguration::Print()+0x68>
 8005cee:	7ca1      	ldrb	r1, [r4, #18]
 8005cf0:	480b      	ldr	r0, [pc, #44]	; (8005d20 <PixelConfiguration::Print()+0xc4>)
 8005cf2:	f7fc fac5 	bl	8002280 <printf>
 8005cf6:	e7e5      	b.n	8005cc4 <PixelConfiguration::Print()+0x68>
 8005cf8:	0800b0c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, ip, sp, pc}
 8005cfc:	0800b0dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip, sp, pc}
 8005d00:	0800b0f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, sp, pc}
 8005d04:	0800b0ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, ip, sp, pc}
 8005d08:	0800b113 	stmdaeq	r0, {r0, r1, r4, r8, ip, sp, pc}
 8005d0c:	0800b12b 	stmdaeq	r0, {r0, r1, r3, r5, r8, ip, sp, pc}
 8005d10:	0800b0c0 	stmdaeq	r0, {r6, r7, ip, sp, pc}
 8005d14:	0800b0c4 	stmdaeq	r0, {r2, r6, r7, ip, sp, pc}
 8005d18:	0800b15a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip, sp, pc}
 8005d1c:	0800b170 	stmdaeq	r0, {r4, r5, r6, r8, ip, sp, pc}
 8005d20:	0800b143 	stmdaeq	r0, {r0, r1, r6, r8, ip, sp, pc}

08005d24 <PixelType::GetType(pixel::Type)>:
 8005d24:	280d      	cmp	r0, #13
 8005d26:	bfda      	itte	le
 8005d28:	4b02      	ldrle	r3, [pc, #8]	; (8005d34 <PixelType::GetType(pixel::Type)+0x10>)
 8005d2a:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8005d2e:	4802      	ldrgt	r0, [pc, #8]	; (8005d38 <PixelType::GetType(pixel::Type)+0x14>)
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	0800b9be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, fp, ip, sp, pc}
 8005d38:	0800b994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp, pc}

08005d3c <PixelType::GetMap(pixel::Map)>:
 8005d3c:	2805      	cmp	r0, #5
 8005d3e:	bfda      	itte	le
 8005d40:	4b02      	ldrle	r3, [pc, #8]	; (8005d4c <PixelType::GetMap(pixel::Map)+0x10>)
 8005d42:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8005d46:	4802      	ldrgt	r0, [pc, #8]	; (8005d50 <PixelType::GetMap(pixel::Map)+0x14>)
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	0800b9a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp, ip, sp, pc}
 8005d50:	0800a2f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r9, sp, pc}

08005d54 <PixelType::GetMap(pixel::Type)>:
 8005d54:	3801      	subs	r0, #1
 8005d56:	2809      	cmp	r0, #9
 8005d58:	bf9a      	itte	ls
 8005d5a:	4b02      	ldrls	r3, [pc, #8]	; (8005d64 <PixelType::GetMap(pixel::Type)+0x10>)
 8005d5c:	5618      	ldrsbls	r0, [r3, r0]
 8005d5e:	2002      	movhi	r0, #2
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	0800b99c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, ip, sp, pc}

08005d68 <PixelType::ConvertTxH(unsigned char)>:
 8005d68:	28f0      	cmp	r0, #240	; 0xf0
 8005d6a:	d010      	beq.n	8005d8e <PixelType::ConvertTxH(unsigned char)+0x26>
 8005d6c:	d807      	bhi.n	8005d7e <PixelType::ConvertTxH(unsigned char)+0x16>
 8005d6e:	28c0      	cmp	r0, #192	; 0xc0
 8005d70:	d00f      	beq.n	8005d92 <PixelType::ConvertTxH(unsigned char)+0x2a>
 8005d72:	28e0      	cmp	r0, #224	; 0xe0
 8005d74:	d00f      	beq.n	8005d96 <PixelType::ConvertTxH(unsigned char)+0x2e>
 8005d76:	2880      	cmp	r0, #128	; 0x80
 8005d78:	d113      	bne.n	8005da2 <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005d7a:	480b      	ldr	r0, [pc, #44]	; (8005da8 <PixelType::ConvertTxH(unsigned char)+0x40>)
 8005d7c:	4770      	bx	lr
 8005d7e:	28fc      	cmp	r0, #252	; 0xfc
 8005d80:	d00b      	beq.n	8005d9a <PixelType::ConvertTxH(unsigned char)+0x32>
 8005d82:	28fe      	cmp	r0, #254	; 0xfe
 8005d84:	d00b      	beq.n	8005d9e <PixelType::ConvertTxH(unsigned char)+0x36>
 8005d86:	28f8      	cmp	r0, #248	; 0xf8
 8005d88:	d10b      	bne.n	8005da2 <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005d8a:	4808      	ldr	r0, [pc, #32]	; (8005dac <PixelType::ConvertTxH(unsigned char)+0x44>)
 8005d8c:	4770      	bx	lr
 8005d8e:	4808      	ldr	r0, [pc, #32]	; (8005db0 <PixelType::ConvertTxH(unsigned char)+0x48>)
 8005d90:	4770      	bx	lr
 8005d92:	4808      	ldr	r0, [pc, #32]	; (8005db4 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 8005d94:	4770      	bx	lr
 8005d96:	4808      	ldr	r0, [pc, #32]	; (8005db8 <PixelType::ConvertTxH(unsigned char)+0x50>)
 8005d98:	4770      	bx	lr
 8005d9a:	4808      	ldr	r0, [pc, #32]	; (8005dbc <PixelType::ConvertTxH(unsigned char)+0x54>)
 8005d9c:	4770      	bx	lr
 8005d9e:	4808      	ldr	r0, [pc, #32]	; (8005dc0 <PixelType::ConvertTxH(unsigned char)+0x58>)
 8005da0:	4770      	bx	lr
 8005da2:	2000      	movs	r0, #0
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 8005dac:	3f480000 	svccc	0x00480000
 8005db0:	3f200000 	svccc	0x00200000
 8005db4:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 8005db8:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 8005dbc:	3f700000 	svccc	0x00700000
 8005dc0:	3f8c0000 	svccc	0x008c0000

08005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8005dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005dca:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8005dce:	b2cc      	uxtb	r4, r1
 8005dd0:	490e      	ldr	r1, [pc, #56]	; (8005e0c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x48>)
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	6808      	ldr	r0, [r1, #0]
 8005dd6:	6801      	ldr	r1, [r0, #0]
 8005dd8:	2907      	cmp	r1, #7
 8005dda:	d005      	beq.n	8005de8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	9400      	str	r4, [sp, #0]
 8005de0:	f000 fa88 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005de4:	b003      	add	sp, #12
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	429a      	cmp	r2, r3
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	d109      	bne.n	8005e04 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 8005df0:	42a2      	cmp	r2, r4
 8005df2:	d107      	bne.n	8005e04 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x40>
 8005df4:	e9cd 1200 	strd	r1, r2, [sp]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	460a      	mov	r2, r1
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f000 feab 	bl	8006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005e02:	e7ef      	b.n	8005de4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x20>
 8005e04:	e9cd 4100 	strd	r4, r1, [sp]
 8005e08:	e7f8      	b.n	8005dfc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x38>
 8005e0a:	bf00      	nop
 8005e0c:	20000688 	andcs	r0, r0, r8, lsl #13

08005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	2400      	movs	r4, #0
 8005e14:	4d05      	ldr	r5, [pc, #20]	; (8005e2c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d300      	bcc.n	8005e1e <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	4620      	mov	r0, r4
 8005e20:	2100      	movs	r1, #0
 8005e22:	f7ff ffcf 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8005e26:	3401      	adds	r4, #1
 8005e28:	e7f5      	b.n	8005e16 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005e2a:	bf00      	nop
 8005e2c:	20000684 	andcs	r0, r0, r4, lsl #13

08005e30 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005e30:	2901      	cmp	r1, #1
 8005e32:	bf28      	it	cs
 8005e34:	2101      	movcs	r1, #1
 8005e36:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005e38:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005e50:	61da      	str	r2, [r3, #28]
 8005e52:	6019      	str	r1, [r3, #0]
 8005e54:	619a      	str	r2, [r3, #24]
 8005e56:	4770      	bx	lr
 8005e58:	20000698 	mulcs	r0, r8, r6
 8005e5c:	20000688 	andcs	r0, r0, r8, lsl #13
 8005e60:	2000067c 	andcs	r0, r0, ip, ror r6
 8005e64:	20000684 	andcs	r0, r0, r4, lsl #13
 8005e68:	2000181c 	andcs	r1, r0, ip, lsl r8
 8005e6c:	2000065c 	andcs	r0, r0, ip, asr r6

08005e70 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005e70:	2805      	cmp	r0, #5
 8005e72:	bfdd      	ittte	le
 8005e74:	220e      	movle	r2, #14
 8005e76:	4b02      	ldrle	r3, [pc, #8]	; (8005e80 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8005e78:	fb02 3000 	mlale	r0, r2, r0, r3
 8005e7c:	4801      	ldrgt	r0, [pc, #4]	; (8005e84 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005e7e:	4770      	bx	lr
 8005e80:	0800ba2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, ip, sp, pc}
 8005e84:	0800b994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp, pc}

08005e88 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	460e      	mov	r6, r1
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	461c      	mov	r4, r3
 8005e90:	f7ff ffbe 	bl	8005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4905      	ldr	r1, [pc, #20]	; (8005eac <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 8005e98:	22ff      	movs	r2, #255	; 0xff
 8005e9a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005e9e:	61cb      	str	r3, [r1, #28]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	604d      	str	r5, [r1, #4]
 8005ea4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005ea8:	618c      	str	r4, [r1, #24]
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	2000065c 	andcs	r0, r0, ip, asr r6

08005eb0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	460e      	mov	r6, r1
 8005eb4:	461c      	mov	r4, r3
 8005eb6:	4615      	mov	r5, r2
 8005eb8:	f7ff ffaa 	bl	8005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005ec0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005ec4:	61cb      	str	r3, [r1, #28]
 8005ec6:	9b04      	ldr	r3, [sp, #16]
 8005ec8:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005ecc:	604b      	str	r3, [r1, #4]
 8005ece:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	610b      	str	r3, [r1, #16]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	614b      	str	r3, [r1, #20]
 8005ed8:	9b05      	ldr	r3, [sp, #20]
 8005eda:	618b      	str	r3, [r1, #24]
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000065c 	andcs	r0, r0, ip, asr r6
 8005ee4:	20000684 	andcs	r0, r0, r4, lsl #13

08005ee8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	460e      	mov	r6, r1
 8005eec:	461d      	mov	r5, r3
 8005eee:	4614      	mov	r4, r2
 8005ef0:	f7ff ff8e 	bl	8005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	4907      	ldr	r1, [pc, #28]	; (8005f14 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005ef8:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005efc:	61cb      	str	r3, [r1, #28]
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005f00:	604d      	str	r5, [r1, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	608c      	str	r4, [r1, #8]
 8005f06:	610b      	str	r3, [r1, #16]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	614b      	str	r3, [r1, #20]
 8005f0c:	9b04      	ldr	r3, [sp, #16]
 8005f0e:	618b      	str	r3, [r1, #24]
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	bf00      	nop
 8005f14:	2000065c 	andcs	r0, r0, ip, asr r6
 8005f18:	20000684 	andcs	r0, r0, r4, lsl #13

08005f1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	460e      	mov	r6, r1
 8005f20:	461d      	mov	r5, r3
 8005f22:	4614      	mov	r4, r2
 8005f24:	f7ff ff74 	bl	8005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	4912      	ldr	r1, [pc, #72]	; (8005f74 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005f2c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005f30:	604d      	str	r5, [r1, #4]
 8005f32:	4d11      	ldr	r5, [pc, #68]	; (8005f78 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005f34:	61cb      	str	r3, [r1, #28]
 8005f36:	6828      	ldr	r0, [r5, #0]
 8005f38:	608c      	str	r4, [r1, #8]
 8005f3a:	1e43      	subs	r3, r0, #1
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	610b      	str	r3, [r1, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	4c0d      	ldr	r4, [pc, #52]	; (8005f7c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005f46:	614b      	str	r3, [r1, #20]
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	b97b      	cbnz	r3, 8005f6c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8005f4c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005f50:	4298      	cmp	r0, r3
 8005f52:	bf2c      	ite	cs
 8005f54:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005f58:	0080      	lslcc	r0, r0, #2
 8005f5a:	f002 fb88 	bl	800866e <operator new[](unsigned int)>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	6020      	str	r0, [r4, #0]
 8005f64:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005f68:	4298      	cmp	r0, r3
 8005f6a:	d100      	bne.n	8005f6e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
 8005f6e:	f840 2b04 	str.w	r2, [r0], #4
 8005f72:	e7f9      	b.n	8005f68 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005f74:	2000065c 	andcs	r0, r0, ip, asr r6
 8005f78:	20000684 	andcs	r0, r0, r4, lsl #13
 8005f7c:	20000680 	andcs	r0, r0, r0, lsl #13

08005f80 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	460e      	mov	r6, r1
 8005f84:	461c      	mov	r4, r3
 8005f86:	4615      	mov	r5, r2
 8005f88:	f7ff ff42 	bl	8005e10 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005f8c:	2305      	movs	r3, #5
 8005f8e:	4907      	ldr	r1, [pc, #28]	; (8005fac <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005f90:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005f94:	61cb      	str	r3, [r1, #28]
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005f9c:	604b      	str	r3, [r1, #4]
 8005f9e:	9b04      	ldr	r3, [sp, #16]
 8005fa0:	610b      	str	r3, [r1, #16]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	614b      	str	r3, [r1, #20]
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	618b      	str	r3, [r1, #24]
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	2000065c 	andcs	r0, r0, ip, asr r6

08005fb0 <PixelPatterns::Wheel(unsigned char)>:
 8005fb0:	43cb      	mvns	r3, r1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b54      	cmp	r3, #84	; 0x54
 8005fb6:	d809      	bhi.n	8005fcc <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005fb8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	4258      	negs	r0, r3
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	b2c0      	uxtb	r0, r0
 8005fc6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005fca:	4770      	bx	lr
 8005fcc:	2ba9      	cmp	r3, #169	; 0xa9
 8005fce:	d809      	bhi.n	8005fe4 <PixelPatterns::Wheel(unsigned char)+0x34>
 8005fd0:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8005fd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005fd8:	b2c9      	uxtb	r1, r1
 8005fda:	43c8      	mvns	r0, r1
 8005fdc:	b2c0      	uxtb	r0, r0
 8005fde:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8005fe2:	4770      	bx	lr
 8005fe4:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8005fe8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005fec:	b2c9      	uxtb	r1, r1
 8005fee:	0208      	lsls	r0, r1, #8
 8005ff0:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8005ff4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005ff8:	4770      	bx	lr
	...

08005ffc <PixelPatterns::Increment(unsigned int)>:
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	; (8006034 <PixelPatterns::Increment(unsigned int)+0x38>)
 8005ffe:	b510      	push	{r4, lr}
 8006000:	014c      	lsls	r4, r1, #5
 8006002:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8006006:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800600a:	b930      	cbnz	r0, 800601a <PixelPatterns::Increment(unsigned int)+0x1e>
 800600c:	690a      	ldr	r2, [r1, #16]
 800600e:	3301      	adds	r3, #1
 8006010:	4293      	cmp	r3, r2
 8006012:	bf18      	it	ne
 8006014:	4618      	movne	r0, r3
 8006016:	6148      	str	r0, [r1, #20]
 8006018:	bd10      	pop	{r4, pc}
 800601a:	b92b      	cbnz	r3, 8006028 <PixelPatterns::Increment(unsigned int)+0x2c>
 800601c:	4422      	add	r2, r4
 800601e:	6913      	ldr	r3, [r2, #16]
 8006020:	3b01      	subs	r3, #1
 8006022:	b29b      	uxth	r3, r3
 8006024:	6153      	str	r3, [r2, #20]
 8006026:	e7f7      	b.n	8006018 <PixelPatterns::Increment(unsigned int)+0x1c>
 8006028:	3b01      	subs	r3, #1
 800602a:	614b      	str	r3, [r1, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f3      	bne.n	8006018 <PixelPatterns::Increment(unsigned int)+0x1c>
 8006030:	e7f4      	b.n	800601c <PixelPatterns::Increment(unsigned int)+0x20>
 8006032:	bf00      	nop
 8006034:	2000065c 	andcs	r0, r0, ip, asr r6

08006038 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	2700      	movs	r7, #0
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8006044:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8006088 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8006048:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800604c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006050:	f8d8 2000 	ldr.w	r2, [r8]
 8006054:	b2be      	uxth	r6, r7
 8006056:	42b2      	cmp	r2, r6
 8006058:	f107 0701 	add.w	r7, r7, #1
 800605c:	d805      	bhi.n	800606a <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800605e:	4629      	mov	r1, r5
 8006060:	4620      	mov	r0, r4
 8006062:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006066:	f7ff bfc9 	b.w	8005ffc <PixelPatterns::Increment(unsigned int)>
 800606a:	0233      	lsls	r3, r6, #8
 800606c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006070:	444b      	add	r3, r9
 8006072:	b2d9      	uxtb	r1, r3
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff ff9b 	bl	8005fb0 <PixelPatterns::Wheel(unsigned char)>
 800607a:	4601      	mov	r1, r0
 800607c:	4630      	mov	r0, r6
 800607e:	f7ff fea1 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006082:	e7e5      	b.n	8006050 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8006084:	2000065c 	andcs	r0, r0, ip, asr r6
 8006088:	20000684 	andcs	r0, r0, r4, lsl #13

0800608c <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800608c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	4605      	mov	r5, r0
 8006092:	460c      	mov	r4, r1
 8006094:	f04f 0b00 	mov.w	fp, #0
 8006098:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800609a:	4e12      	ldr	r6, [pc, #72]	; (80060e4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800609c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80060a0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80060a4:	f8df a040 	ldr.w	sl, [pc, #64]	; 80060e8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 80060a8:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 80060ac:	6833      	ldr	r3, [r6, #0]
 80060ae:	fa1f f08b 	uxth.w	r0, fp
 80060b2:	4283      	cmp	r3, r0
 80060b4:	d805      	bhi.n	80060c2 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 80060b6:	4621      	mov	r1, r4
 80060b8:	4628      	mov	r0, r5
 80060ba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060be:	f7ff bf9d 	b.w	8005ffc <PixelPatterns::Increment(unsigned int)>
 80060c2:	eb09 0300 	add.w	r3, r9, r0
 80060c6:	fb0a f303 	mul.w	r3, sl, r3
 80060ca:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80060ce:	bf94      	ite	ls
 80060d0:	4639      	movls	r1, r7
 80060d2:	4641      	movhi	r1, r8
 80060d4:	f7ff fe76 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80060d8:	f10b 0b01 	add.w	fp, fp, #1
 80060dc:	e7e6      	b.n	80060ac <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 80060de:	bf00      	nop
 80060e0:	2000065c 	andcs	r0, r0, ip, asr r6
 80060e4:	20000684 	andcs	r0, r0, r4, lsl #13
 80060e8:	aaaaaaab 	bge	6ab0b9c <__heap_size+0x6aafb9c>

080060ec <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4605      	mov	r5, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 80060f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80060f8:	6899      	ldr	r1, [r3, #8]
 80060fa:	6958      	ldr	r0, [r3, #20]
 80060fc:	f7ff fe62 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006108:	f7ff bf78 	b.w	8005ffc <PixelPatterns::Increment(unsigned int)>
 800610c:	2000065c 	andcs	r0, r0, ip, asr r6

08006110 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	460d      	mov	r5, r1
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800611c:	b085      	sub	sp, #20
 800611e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8006122:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8006126:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800612a:	00b3      	lsls	r3, r6, #2
 800612c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80061bc <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 8006130:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80061c0 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8006134:	9002      	str	r0, [sp, #8]
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	1bbf      	subs	r7, r7, r6
 800613a:	f8da 1000 	ldr.w	r1, [sl]
 800613e:	fa1f f489 	uxth.w	r4, r9
 8006142:	42a1      	cmp	r1, r4
 8006144:	d806      	bhi.n	8006154 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 8006146:	4629      	mov	r1, r5
 8006148:	9802      	ldr	r0, [sp, #8]
 800614a:	b005      	add	sp, #20
 800614c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	f7ff bf54 	b.w	8005ffc <PixelPatterns::Increment(unsigned int)>
 8006154:	42a6      	cmp	r6, r4
 8006156:	d10b      	bne.n	8006170 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8006158:	4659      	mov	r1, fp
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff fe32 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006160:	f8d8 1000 	ldr.w	r1, [r8]
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	f841 b003 	str.w	fp, [r1, r3]
 800616a:	f109 0901 	add.w	r9, r9, #1
 800616e:	e7e4      	b.n	800613a <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 8006170:	42a7      	cmp	r7, r4
 8006172:	d108      	bne.n	8006186 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 8006174:	4659      	mov	r1, fp
 8006176:	4638      	mov	r0, r7
 8006178:	f7ff fe24 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800617c:	f8d8 1000 	ldr.w	r1, [r8]
 8006180:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8006184:	e7f1      	b.n	800616a <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 8006186:	f8d8 1000 	ldr.w	r1, [r8]
 800618a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800618e:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8006192:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 8006196:	0209      	lsls	r1, r1, #8
 8006198:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800619c:	f3c0 0046 	ubfx	r0, r0, #1, #7
 80061a0:	4301      	orrs	r1, r0
 80061a2:	4620      	mov	r0, r4
 80061a4:	9103      	str	r1, [sp, #12]
 80061a6:	f7ff fe0d 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80061aa:	f8d8 0000 	ldr.w	r0, [r8]
 80061ae:	9903      	ldr	r1, [sp, #12]
 80061b0:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80061b4:	e7d9      	b.n	800616a <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 80061b6:	bf00      	nop
 80061b8:	2000065c 	andcs	r0, r0, ip, asr r6
 80061bc:	20000684 	andcs	r0, r0, r4, lsl #13
 80061c0:	20000680 	andcs	r0, r0, r0, lsl #13

080061c4 <PixelPatterns::FadeUpdate(unsigned int)>:
 80061c4:	4a21      	ldr	r2, [pc, #132]	; (800624c <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 80061c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ca:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80061ce:	4605      	mov	r5, r0
 80061d0:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 80061d4:	460c      	mov	r4, r1
 80061d6:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 80061da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061de:	437a      	muls	r2, r7
 80061e0:	1bc6      	subs	r6, r0, r7
 80061e2:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80061e6:	fb06 220c 	mla	r2, r6, ip, r2
 80061ea:	fbb2 f2f0 	udiv	r2, r2, r0
 80061ee:	0212      	lsls	r2, r2, #8
 80061f0:	fa1f fc82 	uxth.w	ip, r2
 80061f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80061f8:	437a      	muls	r2, r7
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	437b      	muls	r3, r7
 80061fe:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8006202:	fb06 220e 	mla	r2, r6, lr, r2
 8006206:	b2c9      	uxtb	r1, r1
 8006208:	fb06 3301 	mla	r3, r6, r1, r3
 800620c:	fbb2 f2f0 	udiv	r2, r2, r0
 8006210:	fbb3 f3f0 	udiv	r3, r3, r0
 8006214:	2700      	movs	r7, #0
 8006216:	0412      	lsls	r2, r2, #16
 8006218:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800621c:	ea4c 0202 	orr.w	r2, ip, r2
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8006250 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8006226:	ea42 0603 	orr.w	r6, r2, r3
 800622a:	f8d8 3000 	ldr.w	r3, [r8]
 800622e:	429f      	cmp	r7, r3
 8006230:	d305      	bcc.n	800623e <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623a:	f7ff bedf 	b.w	8005ffc <PixelPatterns::Increment(unsigned int)>
 800623e:	4638      	mov	r0, r7
 8006240:	4631      	mov	r1, r6
 8006242:	f7ff fdbf 	bl	8005dc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8006246:	3701      	adds	r7, #1
 8006248:	e7ef      	b.n	800622a <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800624a:	bf00      	nop
 800624c:	2000065c 	andcs	r0, r0, ip, asr r6
 8006250:	20000684 	andcs	r0, r0, r4, lsl #13

08006254 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8006258:	014e      	lsls	r6, r1, #5
 800625a:	599c      	ldr	r4, [r3, r6]
 800625c:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8006260:	686f      	ldr	r7, [r5, #4]
 8006262:	1b14      	subs	r4, r2, r4
 8006264:	42bc      	cmp	r4, r7
 8006266:	d319      	bcc.n	800629c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8006268:	519a      	str	r2, [r3, r6]
 800626a:	69eb      	ldr	r3, [r5, #28]
 800626c:	3b01      	subs	r3, #1
 800626e:	2b04      	cmp	r3, #4
 8006270:	d814      	bhi.n	800629c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8006272:	e8df f003 	tbb	[pc, r3]
 8006276:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800627a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800627e:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006284:	f7ff ff02 	bl	800608c <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8006288:	e7fa      	b.n	8006280 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800628a:	f7ff ff2f 	bl	80060ec <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800628e:	e7f7      	b.n	8006280 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8006290:	f7ff ff3e 	bl	8006110 <PixelPatterns::ScannerUpdate(unsigned int)>
 8006294:	e7f4      	b.n	8006280 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8006296:	f7ff ff95 	bl	80061c4 <PixelPatterns::FadeUpdate(unsigned int)>
 800629a:	e7f1      	b.n	8006280 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800629c:	2000      	movs	r0, #0
 800629e:	e7f0      	b.n	8006282 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 80062a0:	2000065c 	andcs	r0, r0, ip, asr r6

080062a4 <PixelPatterns::Run()>:
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	4606      	mov	r6, r0
 80062aa:	f003 fbf5 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 80062ae:	4604      	mov	r4, r0
 80062b0:	b9c0      	cbnz	r0, 80062e4 <PixelPatterns::Run()+0x40>
 80062b2:	4605      	mov	r5, r0
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <PixelPatterns::Run()+0x44>)
 80062b6:	4f0d      	ldr	r7, [pc, #52]	; (80062ec <PixelPatterns::Run()+0x48>)
 80062b8:	f8d3 8000 	ldr.w	r8, [r3]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	b2e9      	uxtb	r1, r5
 80062c0:	428b      	cmp	r3, r1
 80062c2:	f105 0501 	add.w	r5, r5, #1
 80062c6:	d806      	bhi.n	80062d6 <PixelPatterns::Run()+0x32>
 80062c8:	b164      	cbz	r4, 80062e4 <PixelPatterns::Run()+0x40>
 80062ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ce:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <PixelPatterns::Run()+0x4c>)
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	f000 bdb1 	b.w	8006e38 <WS28xx::Update()>
 80062d6:	4642      	mov	r2, r8
 80062d8:	4630      	mov	r0, r6
 80062da:	f7ff ffbb 	bl	8006254 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 80062de:	4304      	orrs	r4, r0
 80062e0:	b2e4      	uxtb	r4, r4
 80062e2:	e7eb      	b.n	80062bc <PixelPatterns::Run()+0x18>
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	2000181c 	andcs	r1, r0, ip, lsl r8
 80062ec:	2000067c 	andcs	r0, r0, ip, ror r6
 80062f0:	20000688 	andcs	r0, r0, r8, lsl #13

080062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	6984      	ldr	r4, [r0, #24]
 80062f8:	f89d e010 	ldrb.w	lr, [sp, #16]
 80062fc:	f814 c003 	ldrb.w	ip, [r4, r3]
 8006300:	7d43      	ldrb	r3, [r0, #21]
 8006302:	5ca2      	ldrb	r2, [r4, r2]
 8006304:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006308:	b993      	cbnz	r3, 8006330 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3c>
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	f1a3 040b 	sub.w	r4, r3, #11
 8006310:	2c01      	cmp	r4, #1
 8006312:	d93e      	bls.n	8006392 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x9e>
 8006314:	b9db      	cbnz	r3, 800634e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a>
 8006316:	6a03      	ldr	r3, [r0, #32]
 8006318:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800631c:	545a      	strb	r2, [r3, r1]
 800631e:	6a03      	ldr	r3, [r0, #32]
 8006320:	440b      	add	r3, r1
 8006322:	f883 c001 	strb.w	ip, [r3, #1]
 8006326:	6a03      	ldr	r3, [r0, #32]
 8006328:	440b      	add	r3, r1
 800632a:	f883 e002 	strb.w	lr, [r3, #2]
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006334:	00cb      	lsls	r3, r1, #3
 8006336:	6881      	ldr	r1, [r0, #8]
 8006338:	2905      	cmp	r1, #5
 800633a:	f200 80ff 	bhi.w	800653c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x248>
 800633e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006342:	028400fd 	addeq	r0, r4, #253	; 0xfd
 8006346:	038b030b 	orreq	r0, fp, #738197504	; 0x2c000000
 800634a:	01c1003c 	biceq	r0, r1, ip, lsr r0
 800634e:	ea6f 039e 	mvn.w	r3, lr, lsr #2
 8006352:	ea6f 151c 	mvn.w	r5, ip, lsr #4
 8006356:	f082 06c0 	eor.w	r6, r2, #192	; 0xc0
 800635a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800635e:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
 8006362:	f005 050c 	and.w	r5, r5, #12
 8006366:	6a04      	ldr	r4, [r0, #32]
 8006368:	432b      	orrs	r3, r5
 800636a:	3101      	adds	r1, #1
 800636c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006370:	f804 3021 	strb.w	r3, [r4, r1, lsl #2]
 8006374:	6a03      	ldr	r3, [r0, #32]
 8006376:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800637a:	f883 e001 	strb.w	lr, [r3, #1]
 800637e:	6a03      	ldr	r3, [r0, #32]
 8006380:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006384:	f883 c002 	strb.w	ip, [r3, #2]
 8006388:	6a03      	ldr	r3, [r0, #32]
 800638a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800638e:	70da      	strb	r2, [r3, #3]
 8006390:	bd70      	pop	{r4, r5, r6, pc}
 8006392:	6a03      	ldr	r3, [r0, #32]
 8006394:	7c84      	ldrb	r4, [r0, #18]
 8006396:	3101      	adds	r1, #1
 8006398:	f803 4021 	strb.w	r4, [r3, r1, lsl #2]
 800639c:	6a03      	ldr	r3, [r0, #32]
 800639e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80063a2:	705a      	strb	r2, [r3, #1]
 80063a4:	6a03      	ldr	r3, [r0, #32]
 80063a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80063aa:	f883 c002 	strb.w	ip, [r3, #2]
 80063ae:	6a03      	ldr	r3, [r0, #32]
 80063b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80063b4:	f883 e003 	strb.w	lr, [r3, #3]
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	7c01      	ldrb	r1, [r0, #16]
 80063bc:	7c44      	ldrb	r4, [r0, #17]
 80063be:	6a05      	ldr	r5, [r0, #32]
 80063c0:	1c5e      	adds	r6, r3, #1
 80063c2:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80063c6:	bf0c      	ite	eq
 80063c8:	55a9      	strbeq	r1, [r5, r6]
 80063ca:	55ac      	strbne	r4, [r5, r6]
 80063cc:	6a05      	ldr	r5, [r0, #32]
 80063ce:	1c9e      	adds	r6, r3, #2
 80063d0:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80063d4:	bf0c      	ite	eq
 80063d6:	55a9      	strbeq	r1, [r5, r6]
 80063d8:	55ac      	strbne	r4, [r5, r6]
 80063da:	6a05      	ldr	r5, [r0, #32]
 80063dc:	1cde      	adds	r6, r3, #3
 80063de:	f01e 0f20 	tst.w	lr, #32
 80063e2:	bf0c      	ite	eq
 80063e4:	55a9      	strbeq	r1, [r5, r6]
 80063e6:	55ac      	strbne	r4, [r5, r6]
 80063e8:	6a05      	ldr	r5, [r0, #32]
 80063ea:	1d1e      	adds	r6, r3, #4
 80063ec:	f01e 0f10 	tst.w	lr, #16
 80063f0:	bf0c      	ite	eq
 80063f2:	55a9      	strbeq	r1, [r5, r6]
 80063f4:	55ac      	strbne	r4, [r5, r6]
 80063f6:	6a05      	ldr	r5, [r0, #32]
 80063f8:	1d5e      	adds	r6, r3, #5
 80063fa:	f01e 0f08 	tst.w	lr, #8
 80063fe:	bf0c      	ite	eq
 8006400:	55a9      	strbeq	r1, [r5, r6]
 8006402:	55ac      	strbne	r4, [r5, r6]
 8006404:	6a05      	ldr	r5, [r0, #32]
 8006406:	1d9e      	adds	r6, r3, #6
 8006408:	f01e 0f04 	tst.w	lr, #4
 800640c:	bf0c      	ite	eq
 800640e:	55a9      	strbeq	r1, [r5, r6]
 8006410:	55ac      	strbne	r4, [r5, r6]
 8006412:	6a05      	ldr	r5, [r0, #32]
 8006414:	1dde      	adds	r6, r3, #7
 8006416:	f01e 0f02 	tst.w	lr, #2
 800641a:	bf0c      	ite	eq
 800641c:	55a9      	strbeq	r1, [r5, r6]
 800641e:	55ac      	strbne	r4, [r5, r6]
 8006420:	f01e 0f01 	tst.w	lr, #1
 8006424:	bf14      	ite	ne
 8006426:	6a01      	ldrne	r1, [r0, #32]
 8006428:	6a04      	ldreq	r4, [r0, #32]
 800642a:	f103 0508 	add.w	r5, r3, #8
 800642e:	bf14      	ite	ne
 8006430:	554c      	strbne	r4, [r1, r5]
 8006432:	5561      	strbeq	r1, [r4, r5]
 8006434:	7c01      	ldrb	r1, [r0, #16]
 8006436:	7c44      	ldrb	r4, [r0, #17]
 8006438:	6a06      	ldr	r6, [r0, #32]
 800643a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800643e:	f103 0509 	add.w	r5, r3, #9
 8006442:	bf0c      	ite	eq
 8006444:	5571      	strbeq	r1, [r6, r5]
 8006446:	5574      	strbne	r4, [r6, r5]
 8006448:	6a06      	ldr	r6, [r0, #32]
 800644a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800644e:	f103 050a 	add.w	r5, r3, #10
 8006452:	bf0c      	ite	eq
 8006454:	5571      	strbeq	r1, [r6, r5]
 8006456:	5574      	strbne	r4, [r6, r5]
 8006458:	6a06      	ldr	r6, [r0, #32]
 800645a:	f012 0f20 	tst.w	r2, #32
 800645e:	f103 050b 	add.w	r5, r3, #11
 8006462:	bf0c      	ite	eq
 8006464:	5571      	strbeq	r1, [r6, r5]
 8006466:	5574      	strbne	r4, [r6, r5]
 8006468:	6a06      	ldr	r6, [r0, #32]
 800646a:	f012 0f10 	tst.w	r2, #16
 800646e:	f103 050c 	add.w	r5, r3, #12
 8006472:	bf0c      	ite	eq
 8006474:	5571      	strbeq	r1, [r6, r5]
 8006476:	5574      	strbne	r4, [r6, r5]
 8006478:	6a06      	ldr	r6, [r0, #32]
 800647a:	f012 0f08 	tst.w	r2, #8
 800647e:	f103 050d 	add.w	r5, r3, #13
 8006482:	bf0c      	ite	eq
 8006484:	5571      	strbeq	r1, [r6, r5]
 8006486:	5574      	strbne	r4, [r6, r5]
 8006488:	6a06      	ldr	r6, [r0, #32]
 800648a:	f012 0f04 	tst.w	r2, #4
 800648e:	f103 050e 	add.w	r5, r3, #14
 8006492:	bf0c      	ite	eq
 8006494:	5571      	strbeq	r1, [r6, r5]
 8006496:	5574      	strbne	r4, [r6, r5]
 8006498:	6a06      	ldr	r6, [r0, #32]
 800649a:	f012 0f02 	tst.w	r2, #2
 800649e:	f103 050f 	add.w	r5, r3, #15
 80064a2:	bf0c      	ite	eq
 80064a4:	5571      	strbeq	r1, [r6, r5]
 80064a6:	5574      	strbne	r4, [r6, r5]
 80064a8:	f012 0f01 	tst.w	r2, #1
 80064ac:	6a02      	ldr	r2, [r0, #32]
 80064ae:	f103 0510 	add.w	r5, r3, #16
 80064b2:	bf14      	ite	ne
 80064b4:	5554      	strbne	r4, [r2, r5]
 80064b6:	5551      	strbeq	r1, [r2, r5]
 80064b8:	6a05      	ldr	r5, [r0, #32]
 80064ba:	7c02      	ldrb	r2, [r0, #16]
 80064bc:	7c41      	ldrb	r1, [r0, #17]
 80064be:	f103 0411 	add.w	r4, r3, #17
 80064c2:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80064c6:	bf0c      	ite	eq
 80064c8:	552a      	strbeq	r2, [r5, r4]
 80064ca:	5529      	strbne	r1, [r5, r4]
 80064cc:	6a05      	ldr	r5, [r0, #32]
 80064ce:	f103 0412 	add.w	r4, r3, #18
 80064d2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80064d6:	bf0c      	ite	eq
 80064d8:	552a      	strbeq	r2, [r5, r4]
 80064da:	5529      	strbne	r1, [r5, r4]
 80064dc:	6a05      	ldr	r5, [r0, #32]
 80064de:	f103 0413 	add.w	r4, r3, #19
 80064e2:	f01c 0f20 	tst.w	ip, #32
 80064e6:	bf0c      	ite	eq
 80064e8:	552a      	strbeq	r2, [r5, r4]
 80064ea:	5529      	strbne	r1, [r5, r4]
 80064ec:	6a05      	ldr	r5, [r0, #32]
 80064ee:	f103 0414 	add.w	r4, r3, #20
 80064f2:	f01c 0f10 	tst.w	ip, #16
 80064f6:	bf0c      	ite	eq
 80064f8:	552a      	strbeq	r2, [r5, r4]
 80064fa:	5529      	strbne	r1, [r5, r4]
 80064fc:	6a05      	ldr	r5, [r0, #32]
 80064fe:	f103 0415 	add.w	r4, r3, #21
 8006502:	f01c 0f08 	tst.w	ip, #8
 8006506:	bf0c      	ite	eq
 8006508:	552a      	strbeq	r2, [r5, r4]
 800650a:	5529      	strbne	r1, [r5, r4]
 800650c:	6a05      	ldr	r5, [r0, #32]
 800650e:	f103 0416 	add.w	r4, r3, #22
 8006512:	f01c 0f04 	tst.w	ip, #4
 8006516:	bf0c      	ite	eq
 8006518:	552a      	strbeq	r2, [r5, r4]
 800651a:	5529      	strbne	r1, [r5, r4]
 800651c:	6a05      	ldr	r5, [r0, #32]
 800651e:	f103 0417 	add.w	r4, r3, #23
 8006522:	f01c 0f02 	tst.w	ip, #2
 8006526:	bf0c      	ite	eq
 8006528:	552a      	strbeq	r2, [r5, r4]
 800652a:	5529      	strbne	r1, [r5, r4]
 800652c:	3318      	adds	r3, #24
 800652e:	f01c 0f01 	tst.w	ip, #1
 8006532:	f000 830d 	beq.w	8006b50 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x85c>
 8006536:	6a02      	ldr	r2, [r0, #32]
 8006538:	54d1      	strb	r1, [r2, r3]
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	7c01      	ldrb	r1, [r0, #16]
 800653e:	7c44      	ldrb	r4, [r0, #17]
 8006540:	6a05      	ldr	r5, [r0, #32]
 8006542:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006546:	f103 0601 	add.w	r6, r3, #1
 800654a:	bf14      	ite	ne
 800654c:	55ac      	strbne	r4, [r5, r6]
 800654e:	55a9      	strbeq	r1, [r5, r6]
 8006550:	6a05      	ldr	r5, [r0, #32]
 8006552:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006556:	f103 0602 	add.w	r6, r3, #2
 800655a:	bf14      	ite	ne
 800655c:	55ac      	strbne	r4, [r5, r6]
 800655e:	55a9      	strbeq	r1, [r5, r6]
 8006560:	6a05      	ldr	r5, [r0, #32]
 8006562:	f012 0f20 	tst.w	r2, #32
 8006566:	f103 0603 	add.w	r6, r3, #3
 800656a:	bf14      	ite	ne
 800656c:	55ac      	strbne	r4, [r5, r6]
 800656e:	55a9      	strbeq	r1, [r5, r6]
 8006570:	6a05      	ldr	r5, [r0, #32]
 8006572:	f012 0f10 	tst.w	r2, #16
 8006576:	f103 0604 	add.w	r6, r3, #4
 800657a:	bf14      	ite	ne
 800657c:	55ac      	strbne	r4, [r5, r6]
 800657e:	55a9      	strbeq	r1, [r5, r6]
 8006580:	6a05      	ldr	r5, [r0, #32]
 8006582:	f012 0f08 	tst.w	r2, #8
 8006586:	f103 0605 	add.w	r6, r3, #5
 800658a:	bf14      	ite	ne
 800658c:	55ac      	strbne	r4, [r5, r6]
 800658e:	55a9      	strbeq	r1, [r5, r6]
 8006590:	6a05      	ldr	r5, [r0, #32]
 8006592:	f012 0f04 	tst.w	r2, #4
 8006596:	f103 0606 	add.w	r6, r3, #6
 800659a:	bf14      	ite	ne
 800659c:	55ac      	strbne	r4, [r5, r6]
 800659e:	55a9      	strbeq	r1, [r5, r6]
 80065a0:	6a05      	ldr	r5, [r0, #32]
 80065a2:	f012 0f02 	tst.w	r2, #2
 80065a6:	f103 0607 	add.w	r6, r3, #7
 80065aa:	bf14      	ite	ne
 80065ac:	55ac      	strbne	r4, [r5, r6]
 80065ae:	55a9      	strbeq	r1, [r5, r6]
 80065b0:	f012 0f01 	tst.w	r2, #1
 80065b4:	6a02      	ldr	r2, [r0, #32]
 80065b6:	f103 0508 	add.w	r5, r3, #8
 80065ba:	bf14      	ite	ne
 80065bc:	5554      	strbne	r4, [r2, r5]
 80065be:	5551      	strbeq	r1, [r2, r5]
 80065c0:	7c41      	ldrb	r1, [r0, #17]
 80065c2:	7c02      	ldrb	r2, [r0, #16]
 80065c4:	6a05      	ldr	r5, [r0, #32]
 80065c6:	f103 0409 	add.w	r4, r3, #9
 80065ca:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80065ce:	bf0c      	ite	eq
 80065d0:	552a      	strbeq	r2, [r5, r4]
 80065d2:	5529      	strbne	r1, [r5, r4]
 80065d4:	6a05      	ldr	r5, [r0, #32]
 80065d6:	f103 040a 	add.w	r4, r3, #10
 80065da:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80065de:	bf0c      	ite	eq
 80065e0:	552a      	strbeq	r2, [r5, r4]
 80065e2:	5529      	strbne	r1, [r5, r4]
 80065e4:	6a05      	ldr	r5, [r0, #32]
 80065e6:	f103 040b 	add.w	r4, r3, #11
 80065ea:	f01c 0f20 	tst.w	ip, #32
 80065ee:	bf0c      	ite	eq
 80065f0:	552a      	strbeq	r2, [r5, r4]
 80065f2:	5529      	strbne	r1, [r5, r4]
 80065f4:	6a05      	ldr	r5, [r0, #32]
 80065f6:	f103 040c 	add.w	r4, r3, #12
 80065fa:	f01c 0f10 	tst.w	ip, #16
 80065fe:	bf0c      	ite	eq
 8006600:	552a      	strbeq	r2, [r5, r4]
 8006602:	5529      	strbne	r1, [r5, r4]
 8006604:	6a05      	ldr	r5, [r0, #32]
 8006606:	f103 040d 	add.w	r4, r3, #13
 800660a:	f01c 0f08 	tst.w	ip, #8
 800660e:	bf0c      	ite	eq
 8006610:	552a      	strbeq	r2, [r5, r4]
 8006612:	5529      	strbne	r1, [r5, r4]
 8006614:	6a05      	ldr	r5, [r0, #32]
 8006616:	f103 040e 	add.w	r4, r3, #14
 800661a:	f01c 0f04 	tst.w	ip, #4
 800661e:	bf0c      	ite	eq
 8006620:	552a      	strbeq	r2, [r5, r4]
 8006622:	5529      	strbne	r1, [r5, r4]
 8006624:	6a05      	ldr	r5, [r0, #32]
 8006626:	f103 040f 	add.w	r4, r3, #15
 800662a:	f01c 0f02 	tst.w	ip, #2
 800662e:	bf0c      	ite	eq
 8006630:	552a      	strbeq	r2, [r5, r4]
 8006632:	5529      	strbne	r1, [r5, r4]
 8006634:	f01c 0f01 	tst.w	ip, #1
 8006638:	bf14      	ite	ne
 800663a:	6a02      	ldrne	r2, [r0, #32]
 800663c:	6a01      	ldreq	r1, [r0, #32]
 800663e:	f103 0410 	add.w	r4, r3, #16
 8006642:	bf14      	ite	ne
 8006644:	5511      	strbne	r1, [r2, r4]
 8006646:	550a      	strbeq	r2, [r1, r4]
 8006648:	6a05      	ldr	r5, [r0, #32]
 800664a:	7c02      	ldrb	r2, [r0, #16]
 800664c:	7c41      	ldrb	r1, [r0, #17]
 800664e:	f103 0411 	add.w	r4, r3, #17
 8006652:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006656:	bf0c      	ite	eq
 8006658:	552a      	strbeq	r2, [r5, r4]
 800665a:	5529      	strbne	r1, [r5, r4]
 800665c:	6a05      	ldr	r5, [r0, #32]
 800665e:	f103 0412 	add.w	r4, r3, #18
 8006662:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006666:	bf0c      	ite	eq
 8006668:	552a      	strbeq	r2, [r5, r4]
 800666a:	5529      	strbne	r1, [r5, r4]
 800666c:	6a05      	ldr	r5, [r0, #32]
 800666e:	f103 0413 	add.w	r4, r3, #19
 8006672:	f01e 0f20 	tst.w	lr, #32
 8006676:	bf0c      	ite	eq
 8006678:	552a      	strbeq	r2, [r5, r4]
 800667a:	5529      	strbne	r1, [r5, r4]
 800667c:	6a05      	ldr	r5, [r0, #32]
 800667e:	f103 0414 	add.w	r4, r3, #20
 8006682:	f01e 0f10 	tst.w	lr, #16
 8006686:	bf0c      	ite	eq
 8006688:	552a      	strbeq	r2, [r5, r4]
 800668a:	5529      	strbne	r1, [r5, r4]
 800668c:	6a05      	ldr	r5, [r0, #32]
 800668e:	f103 0415 	add.w	r4, r3, #21
 8006692:	f01e 0f08 	tst.w	lr, #8
 8006696:	bf0c      	ite	eq
 8006698:	552a      	strbeq	r2, [r5, r4]
 800669a:	5529      	strbne	r1, [r5, r4]
 800669c:	6a05      	ldr	r5, [r0, #32]
 800669e:	f103 0416 	add.w	r4, r3, #22
 80066a2:	f01e 0f04 	tst.w	lr, #4
 80066a6:	bf0c      	ite	eq
 80066a8:	552a      	strbeq	r2, [r5, r4]
 80066aa:	5529      	strbne	r1, [r5, r4]
 80066ac:	6a05      	ldr	r5, [r0, #32]
 80066ae:	f103 0417 	add.w	r4, r3, #23
 80066b2:	f01e 0f02 	tst.w	lr, #2
 80066b6:	bf0c      	ite	eq
 80066b8:	552a      	strbeq	r2, [r5, r4]
 80066ba:	5529      	strbne	r1, [r5, r4]
 80066bc:	3318      	adds	r3, #24
 80066be:	f01e 0f01 	tst.w	lr, #1
 80066c2:	e736      	b.n	8006532 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x23e>
 80066c4:	7c01      	ldrb	r1, [r0, #16]
 80066c6:	7c44      	ldrb	r4, [r0, #17]
 80066c8:	6a05      	ldr	r5, [r0, #32]
 80066ca:	1c5e      	adds	r6, r3, #1
 80066cc:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80066d0:	bf0c      	ite	eq
 80066d2:	55a9      	strbeq	r1, [r5, r6]
 80066d4:	55ac      	strbne	r4, [r5, r6]
 80066d6:	6a05      	ldr	r5, [r0, #32]
 80066d8:	1c9e      	adds	r6, r3, #2
 80066da:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80066de:	bf0c      	ite	eq
 80066e0:	55a9      	strbeq	r1, [r5, r6]
 80066e2:	55ac      	strbne	r4, [r5, r6]
 80066e4:	6a05      	ldr	r5, [r0, #32]
 80066e6:	1cde      	adds	r6, r3, #3
 80066e8:	f01e 0f20 	tst.w	lr, #32
 80066ec:	bf0c      	ite	eq
 80066ee:	55a9      	strbeq	r1, [r5, r6]
 80066f0:	55ac      	strbne	r4, [r5, r6]
 80066f2:	6a05      	ldr	r5, [r0, #32]
 80066f4:	1d1e      	adds	r6, r3, #4
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf0c      	ite	eq
 80066fc:	55a9      	strbeq	r1, [r5, r6]
 80066fe:	55ac      	strbne	r4, [r5, r6]
 8006700:	6a05      	ldr	r5, [r0, #32]
 8006702:	1d5e      	adds	r6, r3, #5
 8006704:	f01e 0f08 	tst.w	lr, #8
 8006708:	bf0c      	ite	eq
 800670a:	55a9      	strbeq	r1, [r5, r6]
 800670c:	55ac      	strbne	r4, [r5, r6]
 800670e:	6a05      	ldr	r5, [r0, #32]
 8006710:	1d9e      	adds	r6, r3, #6
 8006712:	f01e 0f04 	tst.w	lr, #4
 8006716:	bf0c      	ite	eq
 8006718:	55a9      	strbeq	r1, [r5, r6]
 800671a:	55ac      	strbne	r4, [r5, r6]
 800671c:	6a05      	ldr	r5, [r0, #32]
 800671e:	1dde      	adds	r6, r3, #7
 8006720:	f01e 0f02 	tst.w	lr, #2
 8006724:	bf0c      	ite	eq
 8006726:	55a9      	strbeq	r1, [r5, r6]
 8006728:	55ac      	strbne	r4, [r5, r6]
 800672a:	f01e 0f01 	tst.w	lr, #1
 800672e:	bf14      	ite	ne
 8006730:	6a01      	ldrne	r1, [r0, #32]
 8006732:	6a04      	ldreq	r4, [r0, #32]
 8006734:	f103 0508 	add.w	r5, r3, #8
 8006738:	bf14      	ite	ne
 800673a:	554c      	strbne	r4, [r1, r5]
 800673c:	5561      	strbeq	r1, [r4, r5]
 800673e:	7c01      	ldrb	r1, [r0, #16]
 8006740:	7c44      	ldrb	r4, [r0, #17]
 8006742:	6a06      	ldr	r6, [r0, #32]
 8006744:	f103 0509 	add.w	r5, r3, #9
 8006748:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800674c:	bf0c      	ite	eq
 800674e:	5571      	strbeq	r1, [r6, r5]
 8006750:	5574      	strbne	r4, [r6, r5]
 8006752:	6a06      	ldr	r6, [r0, #32]
 8006754:	f103 050a 	add.w	r5, r3, #10
 8006758:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800675c:	bf0c      	ite	eq
 800675e:	5571      	strbeq	r1, [r6, r5]
 8006760:	5574      	strbne	r4, [r6, r5]
 8006762:	6a06      	ldr	r6, [r0, #32]
 8006764:	f103 050b 	add.w	r5, r3, #11
 8006768:	f01c 0f20 	tst.w	ip, #32
 800676c:	bf0c      	ite	eq
 800676e:	5571      	strbeq	r1, [r6, r5]
 8006770:	5574      	strbne	r4, [r6, r5]
 8006772:	6a06      	ldr	r6, [r0, #32]
 8006774:	f103 050c 	add.w	r5, r3, #12
 8006778:	f01c 0f10 	tst.w	ip, #16
 800677c:	bf0c      	ite	eq
 800677e:	5571      	strbeq	r1, [r6, r5]
 8006780:	5574      	strbne	r4, [r6, r5]
 8006782:	6a06      	ldr	r6, [r0, #32]
 8006784:	f103 050d 	add.w	r5, r3, #13
 8006788:	f01c 0f08 	tst.w	ip, #8
 800678c:	bf0c      	ite	eq
 800678e:	5571      	strbeq	r1, [r6, r5]
 8006790:	5574      	strbne	r4, [r6, r5]
 8006792:	6a06      	ldr	r6, [r0, #32]
 8006794:	f103 050e 	add.w	r5, r3, #14
 8006798:	f01c 0f04 	tst.w	ip, #4
 800679c:	bf0c      	ite	eq
 800679e:	5571      	strbeq	r1, [r6, r5]
 80067a0:	5574      	strbne	r4, [r6, r5]
 80067a2:	6a06      	ldr	r6, [r0, #32]
 80067a4:	f103 050f 	add.w	r5, r3, #15
 80067a8:	f01c 0f02 	tst.w	ip, #2
 80067ac:	bf0c      	ite	eq
 80067ae:	5571      	strbeq	r1, [r6, r5]
 80067b0:	5574      	strbne	r4, [r6, r5]
 80067b2:	f103 0510 	add.w	r5, r3, #16
 80067b6:	f01c 0f01 	tst.w	ip, #1
 80067ba:	bf15      	itete	ne
 80067bc:	6a01      	ldrne	r1, [r0, #32]
 80067be:	6a04      	ldreq	r4, [r0, #32]
 80067c0:	554c      	strbne	r4, [r1, r5]
 80067c2:	5561      	strbeq	r1, [r4, r5]
 80067c4:	6a06      	ldr	r6, [r0, #32]
 80067c6:	7c01      	ldrb	r1, [r0, #16]
 80067c8:	7c44      	ldrb	r4, [r0, #17]
 80067ca:	f103 0511 	add.w	r5, r3, #17
 80067ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80067d2:	bf0c      	ite	eq
 80067d4:	5571      	strbeq	r1, [r6, r5]
 80067d6:	5574      	strbne	r4, [r6, r5]
 80067d8:	6a06      	ldr	r6, [r0, #32]
 80067da:	f103 0512 	add.w	r5, r3, #18
 80067de:	f012 0f40 	tst.w	r2, #64	; 0x40
 80067e2:	bf0c      	ite	eq
 80067e4:	5571      	strbeq	r1, [r6, r5]
 80067e6:	5574      	strbne	r4, [r6, r5]
 80067e8:	6a06      	ldr	r6, [r0, #32]
 80067ea:	f103 0513 	add.w	r5, r3, #19
 80067ee:	f012 0f20 	tst.w	r2, #32
 80067f2:	bf0c      	ite	eq
 80067f4:	5571      	strbeq	r1, [r6, r5]
 80067f6:	5574      	strbne	r4, [r6, r5]
 80067f8:	6a06      	ldr	r6, [r0, #32]
 80067fa:	f103 0514 	add.w	r5, r3, #20
 80067fe:	f012 0f10 	tst.w	r2, #16
 8006802:	bf0c      	ite	eq
 8006804:	5571      	strbeq	r1, [r6, r5]
 8006806:	5574      	strbne	r4, [r6, r5]
 8006808:	6a06      	ldr	r6, [r0, #32]
 800680a:	f103 0515 	add.w	r5, r3, #21
 800680e:	f012 0f08 	tst.w	r2, #8
 8006812:	bf0c      	ite	eq
 8006814:	5571      	strbeq	r1, [r6, r5]
 8006816:	5574      	strbne	r4, [r6, r5]
 8006818:	6a06      	ldr	r6, [r0, #32]
 800681a:	f103 0516 	add.w	r5, r3, #22
 800681e:	f012 0f04 	tst.w	r2, #4
 8006822:	bf0c      	ite	eq
 8006824:	5571      	strbeq	r1, [r6, r5]
 8006826:	5574      	strbne	r4, [r6, r5]
 8006828:	6a06      	ldr	r6, [r0, #32]
 800682a:	f012 0f02 	tst.w	r2, #2
 800682e:	f103 0517 	add.w	r5, r3, #23
 8006832:	bf0c      	ite	eq
 8006834:	5571      	strbeq	r1, [r6, r5]
 8006836:	5574      	strbne	r4, [r6, r5]
 8006838:	f012 0f01 	tst.w	r2, #1
 800683c:	f103 0318 	add.w	r3, r3, #24
 8006840:	6a02      	ldr	r2, [r0, #32]
 8006842:	f43f ae79 	beq.w	8006538 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x244>
 8006846:	54d4      	strb	r4, [r2, r3]
 8006848:	bd70      	pop	{r4, r5, r6, pc}
 800684a:	7c01      	ldrb	r1, [r0, #16]
 800684c:	7c44      	ldrb	r4, [r0, #17]
 800684e:	6a05      	ldr	r5, [r0, #32]
 8006850:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006854:	f103 0601 	add.w	r6, r3, #1
 8006858:	bf14      	ite	ne
 800685a:	55ac      	strbne	r4, [r5, r6]
 800685c:	55a9      	strbeq	r1, [r5, r6]
 800685e:	6a05      	ldr	r5, [r0, #32]
 8006860:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006864:	f103 0602 	add.w	r6, r3, #2
 8006868:	bf14      	ite	ne
 800686a:	55ac      	strbne	r4, [r5, r6]
 800686c:	55a9      	strbeq	r1, [r5, r6]
 800686e:	6a05      	ldr	r5, [r0, #32]
 8006870:	f012 0f20 	tst.w	r2, #32
 8006874:	f103 0603 	add.w	r6, r3, #3
 8006878:	bf14      	ite	ne
 800687a:	55ac      	strbne	r4, [r5, r6]
 800687c:	55a9      	strbeq	r1, [r5, r6]
 800687e:	6a05      	ldr	r5, [r0, #32]
 8006880:	f012 0f10 	tst.w	r2, #16
 8006884:	f103 0604 	add.w	r6, r3, #4
 8006888:	bf14      	ite	ne
 800688a:	55ac      	strbne	r4, [r5, r6]
 800688c:	55a9      	strbeq	r1, [r5, r6]
 800688e:	6a05      	ldr	r5, [r0, #32]
 8006890:	f012 0f08 	tst.w	r2, #8
 8006894:	f103 0605 	add.w	r6, r3, #5
 8006898:	bf14      	ite	ne
 800689a:	55ac      	strbne	r4, [r5, r6]
 800689c:	55a9      	strbeq	r1, [r5, r6]
 800689e:	6a05      	ldr	r5, [r0, #32]
 80068a0:	f012 0f04 	tst.w	r2, #4
 80068a4:	f103 0606 	add.w	r6, r3, #6
 80068a8:	bf14      	ite	ne
 80068aa:	55ac      	strbne	r4, [r5, r6]
 80068ac:	55a9      	strbeq	r1, [r5, r6]
 80068ae:	6a05      	ldr	r5, [r0, #32]
 80068b0:	f012 0f02 	tst.w	r2, #2
 80068b4:	f103 0607 	add.w	r6, r3, #7
 80068b8:	bf14      	ite	ne
 80068ba:	55ac      	strbne	r4, [r5, r6]
 80068bc:	55a9      	strbeq	r1, [r5, r6]
 80068be:	f012 0f01 	tst.w	r2, #1
 80068c2:	6a02      	ldr	r2, [r0, #32]
 80068c4:	f103 0508 	add.w	r5, r3, #8
 80068c8:	bf14      	ite	ne
 80068ca:	5554      	strbne	r4, [r2, r5]
 80068cc:	5551      	strbeq	r1, [r2, r5]
 80068ce:	7c41      	ldrb	r1, [r0, #17]
 80068d0:	7c02      	ldrb	r2, [r0, #16]
 80068d2:	6a05      	ldr	r5, [r0, #32]
 80068d4:	f103 0409 	add.w	r4, r3, #9
 80068d8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 80068dc:	bf0c      	ite	eq
 80068de:	552a      	strbeq	r2, [r5, r4]
 80068e0:	5529      	strbne	r1, [r5, r4]
 80068e2:	6a05      	ldr	r5, [r0, #32]
 80068e4:	f103 040a 	add.w	r4, r3, #10
 80068e8:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80068ec:	bf0c      	ite	eq
 80068ee:	552a      	strbeq	r2, [r5, r4]
 80068f0:	5529      	strbne	r1, [r5, r4]
 80068f2:	6a05      	ldr	r5, [r0, #32]
 80068f4:	f103 040b 	add.w	r4, r3, #11
 80068f8:	f01e 0f20 	tst.w	lr, #32
 80068fc:	bf0c      	ite	eq
 80068fe:	552a      	strbeq	r2, [r5, r4]
 8006900:	5529      	strbne	r1, [r5, r4]
 8006902:	6a05      	ldr	r5, [r0, #32]
 8006904:	f103 040c 	add.w	r4, r3, #12
 8006908:	f01e 0f10 	tst.w	lr, #16
 800690c:	bf0c      	ite	eq
 800690e:	552a      	strbeq	r2, [r5, r4]
 8006910:	5529      	strbne	r1, [r5, r4]
 8006912:	6a05      	ldr	r5, [r0, #32]
 8006914:	f103 040d 	add.w	r4, r3, #13
 8006918:	f01e 0f08 	tst.w	lr, #8
 800691c:	bf0c      	ite	eq
 800691e:	552a      	strbeq	r2, [r5, r4]
 8006920:	5529      	strbne	r1, [r5, r4]
 8006922:	6a05      	ldr	r5, [r0, #32]
 8006924:	f103 040e 	add.w	r4, r3, #14
 8006928:	f01e 0f04 	tst.w	lr, #4
 800692c:	bf0c      	ite	eq
 800692e:	552a      	strbeq	r2, [r5, r4]
 8006930:	5529      	strbne	r1, [r5, r4]
 8006932:	6a05      	ldr	r5, [r0, #32]
 8006934:	f103 040f 	add.w	r4, r3, #15
 8006938:	f01e 0f02 	tst.w	lr, #2
 800693c:	bf0c      	ite	eq
 800693e:	552a      	strbeq	r2, [r5, r4]
 8006940:	5529      	strbne	r1, [r5, r4]
 8006942:	f01e 0f01 	tst.w	lr, #1
 8006946:	bf14      	ite	ne
 8006948:	6a02      	ldrne	r2, [r0, #32]
 800694a:	6a01      	ldreq	r1, [r0, #32]
 800694c:	f103 0410 	add.w	r4, r3, #16
 8006950:	bf14      	ite	ne
 8006952:	5511      	strbne	r1, [r2, r4]
 8006954:	550a      	strbeq	r2, [r1, r4]
 8006956:	e5af      	b.n	80064b8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x1c4>
 8006958:	7c01      	ldrb	r1, [r0, #16]
 800695a:	7c44      	ldrb	r4, [r0, #17]
 800695c:	6a05      	ldr	r5, [r0, #32]
 800695e:	1c5e      	adds	r6, r3, #1
 8006960:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006964:	bf0c      	ite	eq
 8006966:	55a9      	strbeq	r1, [r5, r6]
 8006968:	55ac      	strbne	r4, [r5, r6]
 800696a:	6a05      	ldr	r5, [r0, #32]
 800696c:	1c9e      	adds	r6, r3, #2
 800696e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006972:	bf0c      	ite	eq
 8006974:	55a9      	strbeq	r1, [r5, r6]
 8006976:	55ac      	strbne	r4, [r5, r6]
 8006978:	6a05      	ldr	r5, [r0, #32]
 800697a:	1cde      	adds	r6, r3, #3
 800697c:	f01c 0f20 	tst.w	ip, #32
 8006980:	bf0c      	ite	eq
 8006982:	55a9      	strbeq	r1, [r5, r6]
 8006984:	55ac      	strbne	r4, [r5, r6]
 8006986:	6a05      	ldr	r5, [r0, #32]
 8006988:	1d1e      	adds	r6, r3, #4
 800698a:	f01c 0f10 	tst.w	ip, #16
 800698e:	bf0c      	ite	eq
 8006990:	55a9      	strbeq	r1, [r5, r6]
 8006992:	55ac      	strbne	r4, [r5, r6]
 8006994:	6a05      	ldr	r5, [r0, #32]
 8006996:	1d5e      	adds	r6, r3, #5
 8006998:	f01c 0f08 	tst.w	ip, #8
 800699c:	bf0c      	ite	eq
 800699e:	55a9      	strbeq	r1, [r5, r6]
 80069a0:	55ac      	strbne	r4, [r5, r6]
 80069a2:	6a05      	ldr	r5, [r0, #32]
 80069a4:	1d9e      	adds	r6, r3, #6
 80069a6:	f01c 0f04 	tst.w	ip, #4
 80069aa:	bf0c      	ite	eq
 80069ac:	55a9      	strbeq	r1, [r5, r6]
 80069ae:	55ac      	strbne	r4, [r5, r6]
 80069b0:	6a05      	ldr	r5, [r0, #32]
 80069b2:	1dde      	adds	r6, r3, #7
 80069b4:	f01c 0f02 	tst.w	ip, #2
 80069b8:	bf0c      	ite	eq
 80069ba:	55a9      	strbeq	r1, [r5, r6]
 80069bc:	55ac      	strbne	r4, [r5, r6]
 80069be:	f01c 0f01 	tst.w	ip, #1
 80069c2:	bf14      	ite	ne
 80069c4:	6a01      	ldrne	r1, [r0, #32]
 80069c6:	6a04      	ldreq	r4, [r0, #32]
 80069c8:	f103 0508 	add.w	r5, r3, #8
 80069cc:	bf14      	ite	ne
 80069ce:	554c      	strbne	r4, [r1, r5]
 80069d0:	5561      	strbeq	r1, [r4, r5]
 80069d2:	7c01      	ldrb	r1, [r0, #16]
 80069d4:	7c44      	ldrb	r4, [r0, #17]
 80069d6:	6a06      	ldr	r6, [r0, #32]
 80069d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80069dc:	f103 0509 	add.w	r5, r3, #9
 80069e0:	bf0c      	ite	eq
 80069e2:	5571      	strbeq	r1, [r6, r5]
 80069e4:	5574      	strbne	r4, [r6, r5]
 80069e6:	6a06      	ldr	r6, [r0, #32]
 80069e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80069ec:	f103 050a 	add.w	r5, r3, #10
 80069f0:	bf0c      	ite	eq
 80069f2:	5571      	strbeq	r1, [r6, r5]
 80069f4:	5574      	strbne	r4, [r6, r5]
 80069f6:	6a06      	ldr	r6, [r0, #32]
 80069f8:	f012 0f20 	tst.w	r2, #32
 80069fc:	f103 050b 	add.w	r5, r3, #11
 8006a00:	bf0c      	ite	eq
 8006a02:	5571      	strbeq	r1, [r6, r5]
 8006a04:	5574      	strbne	r4, [r6, r5]
 8006a06:	6a06      	ldr	r6, [r0, #32]
 8006a08:	f012 0f10 	tst.w	r2, #16
 8006a0c:	f103 050c 	add.w	r5, r3, #12
 8006a10:	bf0c      	ite	eq
 8006a12:	5571      	strbeq	r1, [r6, r5]
 8006a14:	5574      	strbne	r4, [r6, r5]
 8006a16:	6a06      	ldr	r6, [r0, #32]
 8006a18:	f012 0f08 	tst.w	r2, #8
 8006a1c:	f103 050d 	add.w	r5, r3, #13
 8006a20:	bf0c      	ite	eq
 8006a22:	5571      	strbeq	r1, [r6, r5]
 8006a24:	5574      	strbne	r4, [r6, r5]
 8006a26:	6a06      	ldr	r6, [r0, #32]
 8006a28:	f012 0f04 	tst.w	r2, #4
 8006a2c:	f103 050e 	add.w	r5, r3, #14
 8006a30:	bf0c      	ite	eq
 8006a32:	5571      	strbeq	r1, [r6, r5]
 8006a34:	5574      	strbne	r4, [r6, r5]
 8006a36:	6a06      	ldr	r6, [r0, #32]
 8006a38:	f012 0f02 	tst.w	r2, #2
 8006a3c:	f103 050f 	add.w	r5, r3, #15
 8006a40:	bf0c      	ite	eq
 8006a42:	5571      	strbeq	r1, [r6, r5]
 8006a44:	5574      	strbne	r4, [r6, r5]
 8006a46:	f012 0f01 	tst.w	r2, #1
 8006a4a:	6a02      	ldr	r2, [r0, #32]
 8006a4c:	f103 0510 	add.w	r5, r3, #16
 8006a50:	bf14      	ite	ne
 8006a52:	5554      	strbne	r4, [r2, r5]
 8006a54:	5551      	strbeq	r1, [r2, r5]
 8006a56:	e5f7      	b.n	8006648 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x354>
 8006a58:	7c01      	ldrb	r1, [r0, #16]
 8006a5a:	7c44      	ldrb	r4, [r0, #17]
 8006a5c:	6a05      	ldr	r5, [r0, #32]
 8006a5e:	1c5e      	adds	r6, r3, #1
 8006a60:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006a64:	bf0c      	ite	eq
 8006a66:	55a9      	strbeq	r1, [r5, r6]
 8006a68:	55ac      	strbne	r4, [r5, r6]
 8006a6a:	6a05      	ldr	r5, [r0, #32]
 8006a6c:	1c9e      	adds	r6, r3, #2
 8006a6e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006a72:	bf0c      	ite	eq
 8006a74:	55a9      	strbeq	r1, [r5, r6]
 8006a76:	55ac      	strbne	r4, [r5, r6]
 8006a78:	6a05      	ldr	r5, [r0, #32]
 8006a7a:	1cde      	adds	r6, r3, #3
 8006a7c:	f01c 0f20 	tst.w	ip, #32
 8006a80:	bf0c      	ite	eq
 8006a82:	55a9      	strbeq	r1, [r5, r6]
 8006a84:	55ac      	strbne	r4, [r5, r6]
 8006a86:	6a05      	ldr	r5, [r0, #32]
 8006a88:	1d1e      	adds	r6, r3, #4
 8006a8a:	f01c 0f10 	tst.w	ip, #16
 8006a8e:	bf0c      	ite	eq
 8006a90:	55a9      	strbeq	r1, [r5, r6]
 8006a92:	55ac      	strbne	r4, [r5, r6]
 8006a94:	6a05      	ldr	r5, [r0, #32]
 8006a96:	1d5e      	adds	r6, r3, #5
 8006a98:	f01c 0f08 	tst.w	ip, #8
 8006a9c:	bf0c      	ite	eq
 8006a9e:	55a9      	strbeq	r1, [r5, r6]
 8006aa0:	55ac      	strbne	r4, [r5, r6]
 8006aa2:	6a05      	ldr	r5, [r0, #32]
 8006aa4:	1d9e      	adds	r6, r3, #6
 8006aa6:	f01c 0f04 	tst.w	ip, #4
 8006aaa:	bf0c      	ite	eq
 8006aac:	55a9      	strbeq	r1, [r5, r6]
 8006aae:	55ac      	strbne	r4, [r5, r6]
 8006ab0:	6a05      	ldr	r5, [r0, #32]
 8006ab2:	1dde      	adds	r6, r3, #7
 8006ab4:	f01c 0f02 	tst.w	ip, #2
 8006ab8:	bf0c      	ite	eq
 8006aba:	55a9      	strbeq	r1, [r5, r6]
 8006abc:	55ac      	strbne	r4, [r5, r6]
 8006abe:	f01c 0f01 	tst.w	ip, #1
 8006ac2:	bf14      	ite	ne
 8006ac4:	6a01      	ldrne	r1, [r0, #32]
 8006ac6:	6a04      	ldreq	r4, [r0, #32]
 8006ac8:	f103 0508 	add.w	r5, r3, #8
 8006acc:	bf14      	ite	ne
 8006ace:	554c      	strbne	r4, [r1, r5]
 8006ad0:	5561      	strbeq	r1, [r4, r5]
 8006ad2:	7c01      	ldrb	r1, [r0, #16]
 8006ad4:	7c44      	ldrb	r4, [r0, #17]
 8006ad6:	6a06      	ldr	r6, [r0, #32]
 8006ad8:	f103 0509 	add.w	r5, r3, #9
 8006adc:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006ae0:	bf0c      	ite	eq
 8006ae2:	5571      	strbeq	r1, [r6, r5]
 8006ae4:	5574      	strbne	r4, [r6, r5]
 8006ae6:	6a06      	ldr	r6, [r0, #32]
 8006ae8:	f103 050a 	add.w	r5, r3, #10
 8006aec:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006af0:	bf0c      	ite	eq
 8006af2:	5571      	strbeq	r1, [r6, r5]
 8006af4:	5574      	strbne	r4, [r6, r5]
 8006af6:	6a06      	ldr	r6, [r0, #32]
 8006af8:	f103 050b 	add.w	r5, r3, #11
 8006afc:	f01e 0f20 	tst.w	lr, #32
 8006b00:	bf0c      	ite	eq
 8006b02:	5571      	strbeq	r1, [r6, r5]
 8006b04:	5574      	strbne	r4, [r6, r5]
 8006b06:	6a06      	ldr	r6, [r0, #32]
 8006b08:	f103 050c 	add.w	r5, r3, #12
 8006b0c:	f01e 0f10 	tst.w	lr, #16
 8006b10:	bf0c      	ite	eq
 8006b12:	5571      	strbeq	r1, [r6, r5]
 8006b14:	5574      	strbne	r4, [r6, r5]
 8006b16:	6a06      	ldr	r6, [r0, #32]
 8006b18:	f103 050d 	add.w	r5, r3, #13
 8006b1c:	f01e 0f08 	tst.w	lr, #8
 8006b20:	bf0c      	ite	eq
 8006b22:	5571      	strbeq	r1, [r6, r5]
 8006b24:	5574      	strbne	r4, [r6, r5]
 8006b26:	6a06      	ldr	r6, [r0, #32]
 8006b28:	f103 050e 	add.w	r5, r3, #14
 8006b2c:	f01e 0f04 	tst.w	lr, #4
 8006b30:	bf0c      	ite	eq
 8006b32:	5571      	strbeq	r1, [r6, r5]
 8006b34:	5574      	strbne	r4, [r6, r5]
 8006b36:	6a06      	ldr	r6, [r0, #32]
 8006b38:	f103 050f 	add.w	r5, r3, #15
 8006b3c:	f01e 0f02 	tst.w	lr, #2
 8006b40:	bf0c      	ite	eq
 8006b42:	5571      	strbeq	r1, [r6, r5]
 8006b44:	5574      	strbne	r4, [r6, r5]
 8006b46:	f103 0510 	add.w	r5, r3, #16
 8006b4a:	f01e 0f01 	tst.w	lr, #1
 8006b4e:	e634      	b.n	80067ba <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4c6>
 8006b50:	6a01      	ldr	r1, [r0, #32]
 8006b52:	54ca      	strb	r2, [r1, r3]
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	bf00      	nop

08006b58 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8006b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5a:	6984      	ldr	r4, [r0, #24]
 8006b5c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8006b60:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8006b64:	f814 c006 	ldrb.w	ip, [r4, r6]
 8006b68:	56e6      	ldrsb	r6, [r4, r3]
 8006b6a:	0149      	lsls	r1, r1, #5
 8006b6c:	f814 e002 	ldrb.w	lr, [r4, r2]
 8006b70:	5ce3      	ldrb	r3, [r4, r3]
 8006b72:	5d62      	ldrb	r2, [r4, r5]
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	7c05      	ldrb	r5, [r0, #16]
 8006b78:	7c44      	ldrb	r4, [r0, #17]
 8006b7a:	6a06      	ldr	r6, [r0, #32]
 8006b7c:	f101 0701 	add.w	r7, r1, #1
 8006b80:	bfac      	ite	ge
 8006b82:	55f5      	strbge	r5, [r6, r7]
 8006b84:	55f4      	strblt	r4, [r6, r7]
 8006b86:	6a07      	ldr	r7, [r0, #32]
 8006b88:	1c8e      	adds	r6, r1, #2
 8006b8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b8e:	bf0c      	ite	eq
 8006b90:	55bd      	strbeq	r5, [r7, r6]
 8006b92:	55bc      	strbne	r4, [r7, r6]
 8006b94:	6a07      	ldr	r7, [r0, #32]
 8006b96:	1cce      	adds	r6, r1, #3
 8006b98:	f013 0f20 	tst.w	r3, #32
 8006b9c:	bf0c      	ite	eq
 8006b9e:	55bd      	strbeq	r5, [r7, r6]
 8006ba0:	55bc      	strbne	r4, [r7, r6]
 8006ba2:	6a07      	ldr	r7, [r0, #32]
 8006ba4:	1d0e      	adds	r6, r1, #4
 8006ba6:	f013 0f10 	tst.w	r3, #16
 8006baa:	bf0c      	ite	eq
 8006bac:	55bd      	strbeq	r5, [r7, r6]
 8006bae:	55bc      	strbne	r4, [r7, r6]
 8006bb0:	6a07      	ldr	r7, [r0, #32]
 8006bb2:	1d4e      	adds	r6, r1, #5
 8006bb4:	f013 0f08 	tst.w	r3, #8
 8006bb8:	bf0c      	ite	eq
 8006bba:	55bd      	strbeq	r5, [r7, r6]
 8006bbc:	55bc      	strbne	r4, [r7, r6]
 8006bbe:	6a07      	ldr	r7, [r0, #32]
 8006bc0:	1d8e      	adds	r6, r1, #6
 8006bc2:	f013 0f04 	tst.w	r3, #4
 8006bc6:	bf0c      	ite	eq
 8006bc8:	55bd      	strbeq	r5, [r7, r6]
 8006bca:	55bc      	strbne	r4, [r7, r6]
 8006bcc:	6a07      	ldr	r7, [r0, #32]
 8006bce:	1dce      	adds	r6, r1, #7
 8006bd0:	f013 0f02 	tst.w	r3, #2
 8006bd4:	bf0c      	ite	eq
 8006bd6:	55bd      	strbeq	r5, [r7, r6]
 8006bd8:	55bc      	strbne	r4, [r7, r6]
 8006bda:	f013 0f01 	tst.w	r3, #1
 8006bde:	6a03      	ldr	r3, [r0, #32]
 8006be0:	f101 0608 	add.w	r6, r1, #8
 8006be4:	bf14      	ite	ne
 8006be6:	559c      	strbne	r4, [r3, r6]
 8006be8:	559d      	strbeq	r5, [r3, r6]
 8006bea:	7c03      	ldrb	r3, [r0, #16]
 8006bec:	7c44      	ldrb	r4, [r0, #17]
 8006bee:	6a05      	ldr	r5, [r0, #32]
 8006bf0:	f101 0609 	add.w	r6, r1, #9
 8006bf4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006bf8:	bf0c      	ite	eq
 8006bfa:	55ab      	strbeq	r3, [r5, r6]
 8006bfc:	55ac      	strbne	r4, [r5, r6]
 8006bfe:	6a05      	ldr	r5, [r0, #32]
 8006c00:	f101 060a 	add.w	r6, r1, #10
 8006c04:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006c08:	bf0c      	ite	eq
 8006c0a:	55ab      	strbeq	r3, [r5, r6]
 8006c0c:	55ac      	strbne	r4, [r5, r6]
 8006c0e:	6a05      	ldr	r5, [r0, #32]
 8006c10:	f101 060b 	add.w	r6, r1, #11
 8006c14:	f01e 0f20 	tst.w	lr, #32
 8006c18:	bf0c      	ite	eq
 8006c1a:	55ab      	strbeq	r3, [r5, r6]
 8006c1c:	55ac      	strbne	r4, [r5, r6]
 8006c1e:	6a05      	ldr	r5, [r0, #32]
 8006c20:	f101 060c 	add.w	r6, r1, #12
 8006c24:	f01e 0f10 	tst.w	lr, #16
 8006c28:	bf0c      	ite	eq
 8006c2a:	55ab      	strbeq	r3, [r5, r6]
 8006c2c:	55ac      	strbne	r4, [r5, r6]
 8006c2e:	6a05      	ldr	r5, [r0, #32]
 8006c30:	f101 060d 	add.w	r6, r1, #13
 8006c34:	f01e 0f08 	tst.w	lr, #8
 8006c38:	bf0c      	ite	eq
 8006c3a:	55ab      	strbeq	r3, [r5, r6]
 8006c3c:	55ac      	strbne	r4, [r5, r6]
 8006c3e:	6a05      	ldr	r5, [r0, #32]
 8006c40:	f101 060e 	add.w	r6, r1, #14
 8006c44:	f01e 0f04 	tst.w	lr, #4
 8006c48:	bf0c      	ite	eq
 8006c4a:	55ab      	strbeq	r3, [r5, r6]
 8006c4c:	55ac      	strbne	r4, [r5, r6]
 8006c4e:	6a05      	ldr	r5, [r0, #32]
 8006c50:	f101 060f 	add.w	r6, r1, #15
 8006c54:	f01e 0f02 	tst.w	lr, #2
 8006c58:	bf0c      	ite	eq
 8006c5a:	55ab      	strbeq	r3, [r5, r6]
 8006c5c:	55ac      	strbne	r4, [r5, r6]
 8006c5e:	f01e 0f01 	tst.w	lr, #1
 8006c62:	bf14      	ite	ne
 8006c64:	6a03      	ldrne	r3, [r0, #32]
 8006c66:	6a04      	ldreq	r4, [r0, #32]
 8006c68:	f101 0510 	add.w	r5, r1, #16
 8006c6c:	bf14      	ite	ne
 8006c6e:	555c      	strbne	r4, [r3, r5]
 8006c70:	5563      	strbeq	r3, [r4, r5]
 8006c72:	7c03      	ldrb	r3, [r0, #16]
 8006c74:	7c44      	ldrb	r4, [r0, #17]
 8006c76:	6a06      	ldr	r6, [r0, #32]
 8006c78:	f101 0511 	add.w	r5, r1, #17
 8006c7c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006c80:	bf0c      	ite	eq
 8006c82:	5573      	strbeq	r3, [r6, r5]
 8006c84:	5574      	strbne	r4, [r6, r5]
 8006c86:	6a06      	ldr	r6, [r0, #32]
 8006c88:	f101 0512 	add.w	r5, r1, #18
 8006c8c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006c90:	bf0c      	ite	eq
 8006c92:	5573      	strbeq	r3, [r6, r5]
 8006c94:	5574      	strbne	r4, [r6, r5]
 8006c96:	6a06      	ldr	r6, [r0, #32]
 8006c98:	f101 0513 	add.w	r5, r1, #19
 8006c9c:	f01c 0f20 	tst.w	ip, #32
 8006ca0:	bf0c      	ite	eq
 8006ca2:	5573      	strbeq	r3, [r6, r5]
 8006ca4:	5574      	strbne	r4, [r6, r5]
 8006ca6:	6a06      	ldr	r6, [r0, #32]
 8006ca8:	f101 0514 	add.w	r5, r1, #20
 8006cac:	f01c 0f10 	tst.w	ip, #16
 8006cb0:	bf0c      	ite	eq
 8006cb2:	5573      	strbeq	r3, [r6, r5]
 8006cb4:	5574      	strbne	r4, [r6, r5]
 8006cb6:	6a06      	ldr	r6, [r0, #32]
 8006cb8:	f101 0515 	add.w	r5, r1, #21
 8006cbc:	f01c 0f08 	tst.w	ip, #8
 8006cc0:	bf0c      	ite	eq
 8006cc2:	5573      	strbeq	r3, [r6, r5]
 8006cc4:	5574      	strbne	r4, [r6, r5]
 8006cc6:	6a06      	ldr	r6, [r0, #32]
 8006cc8:	f101 0516 	add.w	r5, r1, #22
 8006ccc:	f01c 0f04 	tst.w	ip, #4
 8006cd0:	bf0c      	ite	eq
 8006cd2:	5573      	strbeq	r3, [r6, r5]
 8006cd4:	5574      	strbne	r4, [r6, r5]
 8006cd6:	6a06      	ldr	r6, [r0, #32]
 8006cd8:	f101 0517 	add.w	r5, r1, #23
 8006cdc:	f01c 0f02 	tst.w	ip, #2
 8006ce0:	bf0c      	ite	eq
 8006ce2:	5573      	strbeq	r3, [r6, r5]
 8006ce4:	5574      	strbne	r4, [r6, r5]
 8006ce6:	f01c 0f01 	tst.w	ip, #1
 8006cea:	bf14      	ite	ne
 8006cec:	6a03      	ldrne	r3, [r0, #32]
 8006cee:	6a04      	ldreq	r4, [r0, #32]
 8006cf0:	f101 0518 	add.w	r5, r1, #24
 8006cf4:	bf14      	ite	ne
 8006cf6:	555c      	strbne	r4, [r3, r5]
 8006cf8:	5563      	strbeq	r3, [r4, r5]
 8006cfa:	7c03      	ldrb	r3, [r0, #16]
 8006cfc:	7c44      	ldrb	r4, [r0, #17]
 8006cfe:	6a06      	ldr	r6, [r0, #32]
 8006d00:	0617      	lsls	r7, r2, #24
 8006d02:	f101 0519 	add.w	r5, r1, #25
 8006d06:	bf54      	ite	pl
 8006d08:	5573      	strbpl	r3, [r6, r5]
 8006d0a:	5574      	strbmi	r4, [r6, r5]
 8006d0c:	6a06      	ldr	r6, [r0, #32]
 8006d0e:	0657      	lsls	r7, r2, #25
 8006d10:	f101 051a 	add.w	r5, r1, #26
 8006d14:	bf54      	ite	pl
 8006d16:	5573      	strbpl	r3, [r6, r5]
 8006d18:	5574      	strbmi	r4, [r6, r5]
 8006d1a:	6a06      	ldr	r6, [r0, #32]
 8006d1c:	0697      	lsls	r7, r2, #26
 8006d1e:	f101 051b 	add.w	r5, r1, #27
 8006d22:	bf54      	ite	pl
 8006d24:	5573      	strbpl	r3, [r6, r5]
 8006d26:	5574      	strbmi	r4, [r6, r5]
 8006d28:	6a06      	ldr	r6, [r0, #32]
 8006d2a:	06d7      	lsls	r7, r2, #27
 8006d2c:	f101 051c 	add.w	r5, r1, #28
 8006d30:	bf54      	ite	pl
 8006d32:	5573      	strbpl	r3, [r6, r5]
 8006d34:	5574      	strbmi	r4, [r6, r5]
 8006d36:	6a06      	ldr	r6, [r0, #32]
 8006d38:	0717      	lsls	r7, r2, #28
 8006d3a:	f101 051d 	add.w	r5, r1, #29
 8006d3e:	bf54      	ite	pl
 8006d40:	5573      	strbpl	r3, [r6, r5]
 8006d42:	5574      	strbmi	r4, [r6, r5]
 8006d44:	6a06      	ldr	r6, [r0, #32]
 8006d46:	0757      	lsls	r7, r2, #29
 8006d48:	f101 051e 	add.w	r5, r1, #30
 8006d4c:	bf54      	ite	pl
 8006d4e:	5573      	strbpl	r3, [r6, r5]
 8006d50:	5574      	strbmi	r4, [r6, r5]
 8006d52:	6a06      	ldr	r6, [r0, #32]
 8006d54:	0797      	lsls	r7, r2, #30
 8006d56:	f101 051f 	add.w	r5, r1, #31
 8006d5a:	bf54      	ite	pl
 8006d5c:	5573      	strbpl	r3, [r6, r5]
 8006d5e:	5574      	strbmi	r4, [r6, r5]
 8006d60:	07d2      	lsls	r2, r2, #31
 8006d62:	bf4c      	ite	mi
 8006d64:	6a03      	ldrmi	r3, [r0, #32]
 8006d66:	6a02      	ldrpl	r2, [r0, #32]
 8006d68:	f101 0120 	add.w	r1, r1, #32
 8006d6c:	bf4c      	ite	mi
 8006d6e:	545c      	strbmi	r4, [r3, r1]
 8006d70:	5453      	strbpl	r3, [r2, r1]
 8006d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d74 <WS28xx::~WS28xx()>:
 8006d74:	2200      	movs	r2, #0
 8006d76:	4b01      	ldr	r3, [pc, #4]	; (8006d7c <WS28xx::~WS28xx()+0x8>)
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4770      	bx	lr
 8006d7c:	20000698 	mulcs	r0, r8, r6

08006d80 <WS28xx::SetupBuffers()>:
 8006d80:	b513      	push	{r0, r1, r4, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	a801      	add	r0, sp, #4
 8006d86:	f002 fe65 	bl	8009a54 <gd32_spi_dma_tx_prepare(unsigned int*)>
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	4a07      	ldr	r2, [pc, #28]	; (8006dac <WS28xx::SetupBuffers()+0x2c>)
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	f023 0303 	bic.w	r3, r3, #3
 8006d94:	6220      	str	r0, [r4, #32]
 8006d96:	4418      	add	r0, r3
 8006d98:	69e3      	ldr	r3, [r4, #28]
 8006d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	3303      	adds	r3, #3
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	61e3      	str	r3, [r4, #28]
 8006da6:	b002      	add	sp, #8
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	bf00      	nop
 8006dac:	20000694 	mulcs	r0, r4, r6

08006db0 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db2:	23aa      	movs	r3, #170	; 0xaa
 8006db4:	2203      	movs	r2, #3
 8006db6:	e9c0 2300 	strd	r2, r3, [r0]
 8006dba:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006dbe:	460f      	mov	r7, r1
 8006dc0:	6102      	str	r2, [r0, #16]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2106      	movs	r1, #6
 8006dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dca:	4605      	mov	r5, r0
 8006dcc:	463e      	mov	r6, r7
 8006dce:	4604      	mov	r4, r0
 8006dd0:	8282      	strh	r2, [r0, #20]
 8006dd2:	e9c0 1302 	strd	r1, r3, [r0, #8]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <WS28xx::WS28xx(PixelConfiguration&)+0x80>)
 8006dd8:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8006ddc:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <WS28xx::WS28xx(PixelConfiguration&)+0x84>)
 8006dde:	6182      	str	r2, [r0, #24]
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006de6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006dea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006dee:	a901      	add	r1, sp, #4
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7fe fe9d 	bl	8005b30 <PixelConfiguration::Validate(unsigned int&)>
 8006df6:	6862      	ldr	r2, [r4, #4]
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	7d61      	ldrb	r1, [r4, #21]
 8006dfc:	4353      	muls	r3, r2
 8006dfe:	61e3      	str	r3, [r4, #28]
 8006e00:	b111      	cbz	r1, 8006e08 <WS28xx::WS28xx(PixelConfiguration&)+0x58>
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	3301      	adds	r3, #1
 8006e06:	61e3      	str	r3, [r4, #28]
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	3b0b      	subs	r3, #11
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	bf9f      	itttt	ls
 8006e12:	69e3      	ldrls	r3, [r4, #28]
 8006e14:	18d2      	addls	r2, r2, r3
 8006e16:	3208      	addls	r2, #8
 8006e18:	61e2      	strls	r2, [r4, #28]
 8006e1a:	f7ff ffb1 	bl	8006d80 <WS28xx::SetupBuffers()>
 8006e1e:	f002 fd8f 	bl	8009940 <gd32_spi_dma_begin()>
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f002 fe02 	bl	8009a2c <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	b003      	add	sp, #12
 8006e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	0800ba82 	stmdaeq	r0, {r1, r7, r9, fp, ip, sp, pc}
 8006e34:	20000698 	mulcs	r0, r8, r6

08006e38 <WS28xx::Update()>:
 8006e38:	2200      	movs	r2, #0
 8006e3a:	b430      	push	{r4, r5}
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <WS28xx::Update()+0x34>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	e9d0 1407 	ldrd	r1, r4, [r0, #28]
 8006e44:	4299      	cmp	r1, r3
 8006e46:	d807      	bhi.n	8006e58 <WS28xx::Update()+0x20>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006e4c:	084d      	lsrs	r5, r1, #1
 8006e4e:	42ab      	cmp	r3, r5
 8006e50:	d105      	bne.n	8006e5e <WS28xx::Update()+0x26>
 8006e52:	bc30      	pop	{r4, r5}
 8006e54:	f002 be06 	b.w	8009a64 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8006e58:	54e2      	strb	r2, [r4, r3]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	e7f0      	b.n	8006e40 <WS28xx::Update()+0x8>
 8006e5e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8006e62:	ba52      	rev16	r2, r2
 8006e64:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	e7f0      	b.n	8006e4e <WS28xx::Update()+0x16>
 8006e6c:	20000694 	mulcs	r0, r4, r6

08006e70 <WS28xx::Blackout()>:
 8006e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4604      	mov	r4, r0
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f002 fe0d 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d1f9      	bne.n	8006e76 <WS28xx::Blackout()+0x6>
 8006e82:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006e86:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006e8a:	f1a2 070b 	sub.w	r7, r2, #11
 8006e8e:	2f02      	cmp	r7, #2
 8006e90:	6223      	str	r3, [r4, #32]
 8006e92:	7018      	strb	r0, [r3, #0]
 8006e94:	d829      	bhi.n	8006eea <WS28xx::Blackout()+0x7a>
 8006e96:	4605      	mov	r5, r0
 8006e98:	4681      	mov	r9, r0
 8006e9a:	7058      	strb	r0, [r3, #1]
 8006e9c:	7098      	strb	r0, [r3, #2]
 8006e9e:	70d8      	strb	r0, [r3, #3]
 8006ea0:	4545      	cmp	r5, r8
 8006ea2:	d118      	bne.n	8006ed6 <WS28xx::Blackout()+0x66>
 8006ea4:	2f02      	cmp	r7, #2
 8006ea6:	bf14      	ite	ne
 8006ea8:	21ff      	movne	r1, #255	; 0xff
 8006eaa:	2100      	moveq	r1, #0
 8006eac:	69e2      	ldr	r2, [r4, #28]
 8006eae:	6a20      	ldr	r0, [r4, #32]
 8006eb0:	3a04      	subs	r2, #4
 8006eb2:	1883      	adds	r3, r0, r2
 8006eb4:	5481      	strb	r1, [r0, r2]
 8006eb6:	7059      	strb	r1, [r3, #1]
 8006eb8:	7099      	strb	r1, [r3, #2]
 8006eba:	70d9      	strb	r1, [r3, #3]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff ffbb 	bl	8006e38 <WS28xx::Update()>
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f002 fde7 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d1f9      	bne.n	8006ec2 <WS28xx::Blackout()+0x52>
 8006ece:	6226      	str	r6, [r4, #32]
 8006ed0:	b003      	add	sp, #12
 8006ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4629      	mov	r1, r5
 8006eda:	461a      	mov	r2, r3
 8006edc:	4620      	mov	r0, r4
 8006ede:	f8cd 9000 	str.w	r9, [sp]
 8006ee2:	f7ff fa07 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006ee6:	3501      	adds	r5, #1
 8006ee8:	e7da      	b.n	8006ea0 <WS28xx::Blackout()+0x30>
 8006eea:	6a23      	ldr	r3, [r4, #32]
 8006eec:	b102      	cbz	r2, 8006ef0 <WS28xx::Blackout()+0x80>
 8006eee:	7c22      	ldrb	r2, [r4, #16]
 8006ef0:	69e1      	ldr	r1, [r4, #28]
 8006ef2:	4419      	add	r1, r3
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d0e1      	beq.n	8006ebc <WS28xx::Blackout()+0x4c>
 8006ef8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006efc:	e7fa      	b.n	8006ef4 <WS28xx::Blackout()+0x84>

08006efe <WS28xx::FullOn()>:
 8006efe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f02:	4604      	mov	r4, r0
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f002 fdc6 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1f9      	bne.n	8006f04 <WS28xx::FullOn()+0x6>
 8006f10:	e9d4 2800 	ldrd	r2, r8, [r4]
 8006f14:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8006f18:	f1a2 070b 	sub.w	r7, r2, #11
 8006f1c:	2f02      	cmp	r7, #2
 8006f1e:	6223      	str	r3, [r4, #32]
 8006f20:	7018      	strb	r0, [r3, #0]
 8006f22:	d82a      	bhi.n	8006f7a <WS28xx::FullOn()+0x7c>
 8006f24:	4605      	mov	r5, r0
 8006f26:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006f2a:	7058      	strb	r0, [r3, #1]
 8006f2c:	7098      	strb	r0, [r3, #2]
 8006f2e:	70d8      	strb	r0, [r3, #3]
 8006f30:	4545      	cmp	r5, r8
 8006f32:	d118      	bne.n	8006f66 <WS28xx::FullOn()+0x68>
 8006f34:	2f02      	cmp	r7, #2
 8006f36:	bf14      	ite	ne
 8006f38:	21ff      	movne	r1, #255	; 0xff
 8006f3a:	2100      	moveq	r1, #0
 8006f3c:	69e2      	ldr	r2, [r4, #28]
 8006f3e:	6a20      	ldr	r0, [r4, #32]
 8006f40:	3a04      	subs	r2, #4
 8006f42:	1883      	adds	r3, r0, r2
 8006f44:	5481      	strb	r1, [r0, r2]
 8006f46:	7059      	strb	r1, [r3, #1]
 8006f48:	7099      	strb	r1, [r3, #2]
 8006f4a:	70d9      	strb	r1, [r3, #3]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f7ff ff73 	bl	8006e38 <WS28xx::Update()>
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f002 fd9f 	bl	8009a98 <gd32_spi_dma_tx_is_active()>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1f9      	bne.n	8006f52 <WS28xx::FullOn()+0x54>
 8006f5e:	6226      	str	r6, [r4, #32]
 8006f60:	b003      	add	sp, #12
 8006f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f66:	23ff      	movs	r3, #255	; 0xff
 8006f68:	4629      	mov	r1, r5
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f8cd 9000 	str.w	r9, [sp]
 8006f72:	f7ff f9bf 	bl	80062f4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006f76:	3501      	adds	r5, #1
 8006f78:	e7da      	b.n	8006f30 <WS28xx::FullOn()+0x32>
 8006f7a:	6a23      	ldr	r3, [r4, #32]
 8006f7c:	b13a      	cbz	r2, 8006f8e <WS28xx::FullOn()+0x90>
 8006f7e:	7c61      	ldrb	r1, [r4, #17]
 8006f80:	69e2      	ldr	r2, [r4, #28]
 8006f82:	441a      	add	r2, r3
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d0e1      	beq.n	8006f4c <WS28xx::FullOn()+0x4e>
 8006f88:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006f8c:	e7fa      	b.n	8006f84 <WS28xx::FullOn()+0x86>
 8006f8e:	21ff      	movs	r1, #255	; 0xff
 8006f90:	e7f6      	b.n	8006f80 <WS28xx::FullOn()+0x82>
	...

08006f94 <Network::Network()>:
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <Network::Network()+0x18>)
 8006f96:	4906      	ldr	r1, [pc, #24]	; (8006fb0 <Network::Network()+0x1c>)
 8006f98:	6018      	str	r0, [r3, #0]
 8006f9a:	1e42      	subs	r2, r0, #1
 8006f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa0:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f9      	bne.n	8006f9c <Network::Network()+0x8>
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	2000069c 	mulcs	r0, ip, r6
 8006fb0:	0800bb82 	stmdaeq	r0, {r1, r7, r8, r9, fp, ip, sp, pc}

08006fb4 <Network::MacAddressCopyTo(unsigned char*)>:
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	f002 be51 	b.w	8009c5c <mac_address_get(unsigned char*)>

08006fba <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8006fba:	b430      	push	{r4, r5}
 8006fbc:	b168      	cbz	r0, 8006fda <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	7905      	ldrb	r5, [r0, #4]
 8006fc2:	5cd4      	ldrb	r4, [r2, r3]
 8006fc4:	b11c      	cbz	r4, 8006fce <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8006fc6:	1c5c      	adds	r4, r3, #1
 8006fc8:	429d      	cmp	r5, r3
 8006fca:	4623      	mov	r3, r4
 8006fcc:	dcf9      	bgt.n	8006fc2 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8006fce:	6804      	ldr	r4, [r0, #0]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	69e4      	ldr	r4, [r4, #28]
 8006fd4:	46a4      	mov	ip, r4
 8006fd6:	bc30      	pop	{r4, r5}
 8006fd8:	4760      	bx	ip
 8006fda:	bc30      	pop	{r4, r5}
 8006fdc:	4770      	bx	lr
	...

08006fe0 <DisplayUdf::DisplayUdf()>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	f000 fe66 	bl	8007cb4 <Display::Display()>
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <DisplayUdf::DisplayUdf()+0x20>)
 8006fea:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8006fee:	601c      	str	r4, [r3, #0]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f802 3f01 	strb.w	r3, [r2, #1]!
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	2b15      	cmp	r3, #21
 8006ffa:	d1fa      	bne.n	8006ff2 <DisplayUdf::DisplayUdf()+0x12>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd10      	pop	{r4, pc}
 8007000:	200006a0 	andcs	r0, r0, r0, lsr #13

08007004 <DisplayUdf::SetTitle(char const*, ...)>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b517      	push	{r0, r1, r2, r4, lr}
 8007008:	ab05      	add	r3, sp, #20
 800700a:	f853 2b04 	ldr.w	r2, [r3], #4
 800700e:	4604      	mov	r4, r0
 8007010:	211f      	movs	r1, #31
 8007012:	301c      	adds	r0, #28
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f7fb f95b 	bl	80022d0 <vsnprintf>
 800701a:	2300      	movs	r3, #0
 800701c:	4404      	add	r4, r0
 800701e:	7723      	strb	r3, [r4, #28]
 8007020:	b003      	add	sp, #12
 8007022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007026:	b003      	add	sp, #12
 8007028:	4770      	bx	lr

0800702a <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 800702a:	1e4b      	subs	r3, r1, #1
 800702c:	2b05      	cmp	r3, #5
 800702e:	b530      	push	{r4, r5, lr}
 8007030:	d80f      	bhi.n	8007052 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8007032:	2300      	movs	r3, #0
 8007034:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8007038:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800703c:	428d      	cmp	r5, r1
 800703e:	d109      	bne.n	8007054 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8007040:	1884      	adds	r4, r0, r2
 8007042:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8007046:	4403      	add	r3, r0
 8007048:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 800704c:	4410      	add	r0, r2
 800704e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8007052:	bd30      	pop	{r4, r5, pc}
 8007054:	3301      	adds	r3, #1
 8007056:	2b14      	cmp	r3, #20
 8007058:	d1ee      	bne.n	8007038 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 800705a:	e7f7      	b.n	800704c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

0800705c <DisplayUdf::Show()>:
 800705c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	21ff      	movs	r1, #255	; 0xff
 8007062:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8007066:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 800706a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800706e:	2806      	cmp	r0, #6
 8007070:	bf88      	it	hi
 8007072:	7019      	strbhi	r1, [r3, #0]
 8007074:	4293      	cmp	r3, r2
 8007076:	d1f8      	bne.n	800706a <DisplayUdf::Show()+0xe>
 8007078:	2501      	movs	r5, #1
 800707a:	69a0      	ldr	r0, [r4, #24]
 800707c:	b118      	cbz	r0, 8007086 <DisplayUdf::Show()+0x2a>
 800707e:	6803      	ldr	r3, [r0, #0]
 8007080:	4629      	mov	r1, r5
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	4798      	blx	r3
 8007086:	3501      	adds	r5, #1
 8007088:	b2ed      	uxtb	r5, r5
 800708a:	2d06      	cmp	r5, #6
 800708c:	d1f5      	bne.n	800707a <DisplayUdf::Show()+0x1e>
 800708e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8007092:	69a0      	ldr	r0, [r4, #24]
 8007094:	f104 021c 	add.w	r2, r4, #28
 8007098:	f7ff ff8f 	bl	8006fba <Display::Write(unsigned char, char const*) [clone .isra.0]>
 800709c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80070a0:	69a0      	ldr	r0, [r4, #24]
 80070a2:	4a12      	ldr	r2, [pc, #72]	; (80070ec <DisplayUdf::Show()+0x90>)
 80070a4:	f7ff ff89 	bl	8006fba <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80070a8:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <DisplayUdf::Show()+0x94>)
 80070aa:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4620      	mov	r0, r4
 80070b2:	2303      	movs	r3, #3
 80070b4:	4a0f      	ldr	r2, [pc, #60]	; (80070f4 <DisplayUdf::Show()+0x98>)
 80070b6:	f7fa f82e 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80070ba:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <DisplayUdf::Show()+0x9c>)
 80070bc:	4620      	mov	r0, r4
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	f892 10ab 	ldrb.w	r1, [r2, #171]	; 0xab
 80070c4:	f892 30ac 	ldrb.w	r3, [r2, #172]	; 0xac
 80070c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80070cc:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 80070d0:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80070da:	b292      	uxth	r2, r2
 80070dc:	9200      	str	r2, [sp, #0]
 80070de:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 80070e2:	4a06      	ldr	r2, [pc, #24]	; (80070fc <DisplayUdf::Show()+0xa0>)
 80070e4:	f7fa f817 	bl	8001116 <Display::Printf(unsigned char, char const*, ...)>
 80070e8:	b003      	add	sp, #12
 80070ea:	bd30      	pop	{r4, r5, pc}
 80070ec:	0800a564 	stmdaeq	r0, {r2, r5, r6, r8, sl, sp, pc}
 80070f0:	20001780 	andcs	r1, r0, r0, lsl #15
 80070f4:	0800bb85 	stmdaeq	r0, {r0, r2, r7, r8, r9, fp, ip, sp, pc}
 80070f8:	200001f8 	strdcs	r0, [r0], -r8
 80070fc:	0800bb94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp, ip, sp, pc}

08007100 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8007100:	b510      	push	{r4, lr}
 8007102:	2220      	movs	r2, #32
 8007104:	4604      	mov	r4, r0
 8007106:	f840 1b04 	str.w	r1, [r0], #4
 800710a:	2100      	movs	r1, #0
 800710c:	f001 fb44 	bl	8008798 <memset>
 8007110:	f647 7305 	movw	r3, #32517	; 0x7f05
 8007114:	4620      	mov	r0, r4
 8007116:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007118:	bd10      	pop	{r4, pc}

0800711a <DisplayUdfParams::Load()>:
 800711a:	b508      	push	{r3, lr}
 800711c:	2300      	movs	r3, #0
 800711e:	4601      	mov	r1, r0
 8007120:	6043      	str	r3, [r0, #4]
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	b120      	cbz	r0, 8007130 <DisplayUdfParams::Load()+0x16>
 8007126:	6803      	ldr	r3, [r0, #0]
 8007128:	3104      	adds	r1, #4
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4798      	blx	r3
 800712e:	2001      	movs	r0, #1
 8007130:	bd08      	pop	{r3, pc}

08007132 <DisplayUdfParams::Set(DisplayUdf*)>:
 8007132:	6843      	ldr	r3, [r0, #4]
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007138:	009a      	lsls	r2, r3, #2
 800713a:	4604      	mov	r4, r0
 800713c:	460e      	mov	r6, r1
 800713e:	d506      	bpl.n	800714e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007140:	6988      	ldr	r0, [r1, #24]
 8007142:	b120      	cbz	r0, 800714e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007144:	6803      	ldr	r3, [r0, #0]
 8007146:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4798      	blx	r3
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	69b0      	ldr	r0, [r6, #24]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	bf41      	itttt	mi
 8007156:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 800715a:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 800715e:	4353      	mulmi	r3, r2
 8007160:	6173      	strmi	r3, [r6, #20]
 8007162:	6861      	ldr	r1, [r4, #4]
 8007164:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8007168:	b110      	cbz	r0, 8007170 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 800716a:	6803      	ldr	r3, [r0, #0]
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	4798      	blx	r3
 8007170:	2500      	movs	r5, #0
 8007172:	2701      	movs	r7, #1
 8007174:	f104 0808 	add.w	r8, r4, #8
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	fa07 f305 	lsl.w	r3, r7, r5
 800717e:	4393      	bics	r3, r2
 8007180:	d105      	bne.n	800718e <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8007182:	462a      	mov	r2, r5
 8007184:	4630      	mov	r0, r6
 8007186:	f818 1005 	ldrb.w	r1, [r8, r5]
 800718a:	f7ff ff4e 	bl	800702a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800718e:	3501      	adds	r5, #1
 8007190:	2d14      	cmp	r5, #20
 8007192:	d1f1      	bne.n	8007178 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8007194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007198 <DisplayUdfParams::Dump()>:
 8007198:	4770      	bx	lr
	...

0800719c <ConfigStore::GetStoreOffset(configstore::Store)>:
 800719c:	2300      	movs	r3, #0
 800719e:	2020      	movs	r0, #32
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 80071a4:	428b      	cmp	r3, r1
 80071a6:	d100      	bne.n	80071aa <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	f852 4b04 	ldr.w	r4, [r2], #4
 80071ae:	3301      	adds	r3, #1
 80071b0:	4420      	add	r0, r4
 80071b2:	e7f7      	b.n	80071a4 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 80071b4:	0800bba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, sp, pc}

080071b8 <ConfigStore::Init()>:
 80071b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071bc:	b085      	sub	sp, #20
 80071be:	4607      	mov	r7, r0
 80071c0:	f000 f9ca 	bl	8007558 <StoreDevice::GetSectorSize() const>
 80071c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80071c8:	4605      	mov	r5, r0
 80071ca:	d004      	beq.n	80071d6 <ConfigStore::Init()+0x1e>
 80071cc:	2500      	movs	r5, #0
 80071ce:	4628      	mov	r0, r5
 80071d0:	b005      	add	sp, #20
 80071d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071d6:	4638      	mov	r0, r7
 80071d8:	f000 f9bc 	bl	8007554 <StoreDevice::GetSize() const>
 80071dc:	4b3a      	ldr	r3, [pc, #232]	; (80072c8 <ConfigStore::Init()+0x110>)
 80071de:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80071e2:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80071e6:	6019      	str	r1, [r3, #0]
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	d1ef      	bne.n	80071cc <ConfigStore::Init()+0x14>
 80071ec:	4c37      	ldr	r4, [pc, #220]	; (80072cc <ConfigStore::Init()+0x114>)
 80071ee:	ab03      	add	r3, sp, #12
 80071f0:	462a      	mov	r2, r5
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4638      	mov	r0, r7
 80071f6:	4623      	mov	r3, r4
 80071f8:	f000 f9b0 	bl	800755c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 80071fc:	7823      	ldrb	r3, [r4, #0]
 80071fe:	2b41      	cmp	r3, #65	; 0x41
 8007200:	bf1c      	itt	ne
 8007202:	2341      	movne	r3, #65	; 0x41
 8007204:	7023      	strbne	r3, [r4, #0]
 8007206:	7863      	ldrb	r3, [r4, #1]
 8007208:	bf14      	ite	ne
 800720a:	4635      	movne	r5, r6
 800720c:	2501      	moveq	r5, #1
 800720e:	2b76      	cmp	r3, #118	; 0x76
 8007210:	bf1c      	itt	ne
 8007212:	2376      	movne	r3, #118	; 0x76
 8007214:	7063      	strbne	r3, [r4, #1]
 8007216:	78a3      	ldrb	r3, [r4, #2]
 8007218:	bf18      	it	ne
 800721a:	2500      	movne	r5, #0
 800721c:	2b56      	cmp	r3, #86	; 0x56
 800721e:	bf1c      	itt	ne
 8007220:	2356      	movne	r3, #86	; 0x56
 8007222:	70a3      	strbne	r3, [r4, #2]
 8007224:	78e3      	ldrb	r3, [r4, #3]
 8007226:	bf18      	it	ne
 8007228:	2500      	movne	r5, #0
 800722a:	2b10      	cmp	r3, #16
 800722c:	d01f      	beq.n	800726e <ConfigStore::Init()+0xb6>
 800722e:	2310      	movs	r3, #16
 8007230:	70e3      	strb	r3, [r4, #3]
 8007232:	2201      	movs	r2, #1
 8007234:	2500      	movs	r5, #0
 8007236:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800723a:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <ConfigStore::Init()+0x118>)
 800723c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80072d4 <ConfigStore::Init()+0x11c>
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	4631      	mov	r1, r6
 8007244:	4638      	mov	r0, r7
 8007246:	f7ff ffa9 	bl	800719c <ConfigStore::GetStoreOffset(configstore::Store)>
 800724a:	1823      	adds	r3, r4, r0
 800724c:	5425      	strb	r5, [r4, r0]
 800724e:	705d      	strb	r5, [r3, #1]
 8007250:	709d      	strb	r5, [r3, #2]
 8007252:	70dd      	strb	r5, [r3, #3]
 8007254:	f858 3b04 	ldr.w	r3, [r8], #4
 8007258:	1d02      	adds	r2, r0, #4
 800725a:	4403      	add	r3, r0
 800725c:	429a      	cmp	r2, r3
 800725e:	d32f      	bcc.n	80072c0 <ConfigStore::Init()+0x108>
 8007260:	3601      	adds	r6, #1
 8007262:	2e1c      	cmp	r6, #28
 8007264:	d1ed      	bne.n	8007242 <ConfigStore::Init()+0x8a>
 8007266:	2501      	movs	r5, #1
 8007268:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <ConfigStore::Init()+0x120>)
 800726a:	601d      	str	r5, [r3, #0]
 800726c:	e7af      	b.n	80071ce <ConfigStore::Init()+0x16>
 800726e:	2d00      	cmp	r5, #0
 8007270:	d0df      	beq.n	8007232 <ConfigStore::Init()+0x7a>
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	46c8      	mov	r8, r9
 8007278:	4631      	mov	r1, r6
 800727a:	4638      	mov	r0, r7
 800727c:	f7ff ff8e 	bl	800719c <ConfigStore::GetStoreOffset(configstore::Store)>
 8007280:	5c23      	ldrb	r3, [r4, r0]
 8007282:	2bff      	cmp	r3, #255	; 0xff
 8007284:	d112      	bne.n	80072ac <ConfigStore::Init()+0xf4>
 8007286:	1823      	adds	r3, r4, r0
 8007288:	785a      	ldrb	r2, [r3, #1]
 800728a:	2aff      	cmp	r2, #255	; 0xff
 800728c:	d10e      	bne.n	80072ac <ConfigStore::Init()+0xf4>
 800728e:	789a      	ldrb	r2, [r3, #2]
 8007290:	2aff      	cmp	r2, #255	; 0xff
 8007292:	d10b      	bne.n	80072ac <ConfigStore::Init()+0xf4>
 8007294:	78da      	ldrb	r2, [r3, #3]
 8007296:	2aff      	cmp	r2, #255	; 0xff
 8007298:	d108      	bne.n	80072ac <ConfigStore::Init()+0xf4>
 800729a:	46a9      	mov	r9, r5
 800729c:	f804 8000 	strb.w	r8, [r4, r0]
 80072a0:	f883 8001 	strb.w	r8, [r3, #1]
 80072a4:	f883 8002 	strb.w	r8, [r3, #2]
 80072a8:	f883 8003 	strb.w	r8, [r3, #3]
 80072ac:	3601      	adds	r6, #1
 80072ae:	2e1c      	cmp	r6, #28
 80072b0:	d1e2      	bne.n	8007278 <ConfigStore::Init()+0xc0>
 80072b2:	f1b9 0f00 	cmp.w	r9, #0
 80072b6:	d08a      	beq.n	80071ce <ConfigStore::Init()+0x16>
 80072b8:	2201      	movs	r2, #1
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <ConfigStore::Init()+0x120>)
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e786      	b.n	80071ce <ConfigStore::Init()+0x16>
 80072c0:	f804 9002 	strb.w	r9, [r4, r2]
 80072c4:	3201      	adds	r2, #1
 80072c6:	e7c9      	b.n	800725c <ConfigStore::Init()+0xa4>
 80072c8:	200016a8 	andcs	r1, r0, r8, lsr #13
 80072cc:	200006a8 	andcs	r0, r0, r8, lsr #13
 80072d0:	200016bc 			; <UNDEFINED> instruction: 0x200016bc
 80072d4:	0800bba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, sp, pc}
 80072d8:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

080072dc <ConfigStore::ConfigStore()>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4604      	mov	r4, r0
 80072e0:	f000 f930 	bl	8007544 <StoreDevice::StoreDevice()>
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <ConfigStore::ConfigStore()+0x38>)
 80072e6:	4d0c      	ldr	r5, [pc, #48]	; (8007318 <ConfigStore::ConfigStore()+0x3c>)
 80072e8:	601c      	str	r4, [r3, #0]
 80072ea:	7863      	ldrb	r3, [r4, #1]
 80072ec:	b11b      	cbz	r3, 80072f6 <ConfigStore::ConfigStore()+0x1a>
 80072ee:	4620      	mov	r0, r4
 80072f0:	f7ff ff62 	bl	80071b8 <ConfigStore::Init()>
 80072f4:	7028      	strb	r0, [r5, #0]
 80072f6:	782b      	ldrb	r3, [r5, #0]
 80072f8:	b153      	cbz	r3, 8007310 <ConfigStore::ConfigStore()+0x34>
 80072fa:	2320      	movs	r3, #32
 80072fc:	2200      	movs	r2, #0
 80072fe:	4907      	ldr	r1, [pc, #28]	; (800731c <ConfigStore::ConfigStore()+0x40>)
 8007300:	f851 0b04 	ldr.w	r0, [r1], #4
 8007304:	3201      	adds	r2, #1
 8007306:	2a1c      	cmp	r2, #28
 8007308:	4403      	add	r3, r0
 800730a:	d1f9      	bne.n	8007300 <ConfigStore::ConfigStore()+0x24>
 800730c:	4a04      	ldr	r2, [pc, #16]	; (8007320 <ConfigStore::ConfigStore()+0x44>)
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	4620      	mov	r0, r4
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	200016b8 			; <UNDEFINED> instruction: 0x200016b8
 8007318:	200016ac 	andcs	r1, r0, ip, lsr #13
 800731c:	0800bba4 	stmdaeq	r0, {r2, r5, r7, r8, r9, fp, ip, sp, pc}
 8007320:	200016b0 			; <UNDEFINED> instruction: 0x200016b0

08007324 <ConfigStore::ResetSetList(configstore::Store)>:
 8007324:	b508      	push	{r3, lr}
 8007326:	f7ff ff39 	bl	800719c <ConfigStore::GetStoreOffset(configstore::Store)>
 800732a:	2300      	movs	r3, #0
 800732c:	4904      	ldr	r1, [pc, #16]	; (8007340 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 800732e:	1842      	adds	r2, r0, r1
 8007330:	540b      	strb	r3, [r1, r0]
 8007332:	7053      	strb	r3, [r2, #1]
 8007334:	7093      	strb	r3, [r2, #2]
 8007336:	70d3      	strb	r3, [r2, #3]
 8007338:	2201      	movs	r2, #1
 800733a:	4b02      	ldr	r3, [pc, #8]	; (8007344 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	bd08      	pop	{r3, pc}
 8007340:	200006a8 	andcs	r0, r0, r8, lsr #13
 8007344:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

08007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8007348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734c:	461c      	mov	r4, r3
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8007350:	4616      	mov	r6, r2
 8007352:	781f      	ldrb	r7, [r3, #0]
 8007354:	9d07      	ldr	r5, [sp, #28]
 8007356:	b307      	cbz	r7, 800739a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007358:	f7ff ff20 	bl	800719c <ConfigStore::GetStoreOffset(configstore::Store)>
 800735c:	f04f 0c00 	mov.w	ip, #0
 8007360:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8007362:	1831      	adds	r1, r6, r0
 8007364:	1e63      	subs	r3, r4, #1
 8007366:	9c06      	ldr	r4, [sp, #24]
 8007368:	4411      	add	r1, r2
 800736a:	440c      	add	r4, r1
 800736c:	42a1      	cmp	r1, r4
 800736e:	d116      	bne.n	800739e <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8007370:	f1bc 0f00 	cmp.w	ip, #0
 8007374:	d011      	beq.n	800739a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	b109      	cbz	r1, 8007380 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800737c:	2906      	cmp	r1, #6
 800737e:	d101      	bne.n	8007384 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8007380:	2101      	movs	r1, #1
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800738a:	6019      	str	r1, [r3, #0]
 800738c:	b12e      	cbz	r6, 800739a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800738e:	b125      	cbz	r5, 800739a <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8007390:	9b08      	ldr	r3, [sp, #32]
 8007392:	4418      	add	r0, r3
 8007394:	5813      	ldr	r3, [r2, r0]
 8007396:	432b      	orrs	r3, r5
 8007398:	5013      	str	r3, [r2, r0]
 800739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739e:	f891 8000 	ldrb.w	r8, [r1]
 80073a2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80073a6:	3101      	adds	r1, #1
 80073a8:	45f0      	cmp	r8, lr
 80073aa:	bf1c      	itt	ne
 80073ac:	f801 ec01 	strbne.w	lr, [r1, #-1]
 80073b0:	46bc      	movne	ip, r7
 80073b2:	e7db      	b.n	800736c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 80073b4:	200016ac 	andcs	r1, r0, ip, lsr #13
 80073b8:	200006a8 	andcs	r0, r0, r8, lsr #13
 80073bc:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
 80073c0:	2000181c 	andcs	r1, r0, ip, lsl r8
 80073c4:	200006a4 	andcs	r0, r0, r4, lsr #13

080073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 80073c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073cc:	461d      	mov	r5, r3
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 80073d0:	b085      	sub	sp, #20
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	4607      	mov	r7, r0
 80073d6:	4614      	mov	r4, r2
 80073d8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80073dc:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80073e0:	b193      	cbz	r3, 8007408 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80073e2:	f7ff fedb 	bl	800719c <ConfigStore::GetStoreOffset(configstore::Store)>
 80073e6:	4a10      	ldr	r2, [pc, #64]	; (8007428 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 80073e8:	eb08 0600 	add.w	r6, r8, r0
 80073ec:	18b3      	adds	r3, r6, r2
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	d013      	beq.n	800741c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80073f4:	5990      	ldr	r0, [r2, r6]
 80073f6:	b988      	cbnz	r0, 800741c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80073f8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80073fc:	4623      	mov	r3, r4
 80073fe:	4642      	mov	r2, r8
 8007400:	4638      	mov	r0, r7
 8007402:	9500      	str	r5, [sp, #0]
 8007404:	f7ff ffa0 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007408:	b005      	add	sp, #20
 800740a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800740e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007412:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007416:	429d      	cmp	r5, r3
 8007418:	d1f9      	bne.n	800740e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 800741a:	e7f5      	b.n	8007408 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800741c:	3c01      	subs	r4, #1
 800741e:	441d      	add	r5, r3
 8007420:	e7f9      	b.n	8007416 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8007422:	bf00      	nop
 8007424:	200016ac 	andcs	r1, r0, ip, lsr #13
 8007428:	200006a8 	andcs	r0, r0, r8, lsr #13

0800742c <ConfigStore::Flash()>:
 800742c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800742e:	4c24      	ldr	r4, [pc, #144]	; (80074c0 <ConfigStore::Flash()+0x94>)
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d041      	beq.n	80074ba <ConfigStore::Flash()+0x8e>
 8007436:	3b01      	subs	r3, #1
 8007438:	2b05      	cmp	r3, #5
 800743a:	d82f      	bhi.n	800749c <ConfigStore::Flash()+0x70>
 800743c:	e8df f003 	tbb	[pc, r3]
 8007440:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8007444:	4b1f2e23 	blmi	87d2cd8 <__exidx_end+0x7c6b38>
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <ConfigStore::Flash()+0x9c>)
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	2302      	movs	r3, #2
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	2001      	movs	r0, #1
 8007454:	e02f      	b.n	80074b6 <ConfigStore::Flash()+0x8a>
 8007456:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <ConfigStore::Flash()+0x98>)
 8007458:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <ConfigStore::Flash()+0x9c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6812      	ldr	r2, [r2, #0]
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	2b63      	cmp	r3, #99	; 0x63
 8007462:	d9f6      	bls.n	8007452 <ConfigStore::Flash()+0x26>
 8007464:	2303      	movs	r3, #3
 8007466:	e7f3      	b.n	8007450 <ConfigStore::Flash()+0x24>
 8007468:	4918      	ldr	r1, [pc, #96]	; (80074cc <ConfigStore::Flash()+0xa0>)
 800746a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800746e:	6809      	ldr	r1, [r1, #0]
 8007470:	ab03      	add	r3, sp, #12
 8007472:	f000 f87d 	bl	8007570 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 8007476:	2800      	cmp	r0, #0
 8007478:	d0eb      	beq.n	8007452 <ConfigStore::Flash()+0x26>
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <ConfigStore::Flash()+0x98>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <ConfigStore::Flash()+0x9c>)
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	2305      	movs	r3, #5
 8007484:	e7e4      	b.n	8007450 <ConfigStore::Flash()+0x24>
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <ConfigStore::Flash()+0x98>)
 8007488:	4a0f      	ldr	r2, [pc, #60]	; (80074c8 <ConfigStore::Flash()+0x9c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	2b63      	cmp	r3, #99	; 0x63
 8007492:	d9de      	bls.n	8007452 <ConfigStore::Flash()+0x26>
 8007494:	2304      	movs	r3, #4
 8007496:	e7db      	b.n	8007450 <ConfigStore::Flash()+0x24>
 8007498:	2306      	movs	r3, #6
 800749a:	e7d9      	b.n	8007450 <ConfigStore::Flash()+0x24>
 800749c:	ab03      	add	r3, sp, #12
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <ConfigStore::Flash()+0xa4>)
 80074a0:	490a      	ldr	r1, [pc, #40]	; (80074cc <ConfigStore::Flash()+0xa0>)
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <ConfigStore::Flash()+0xa8>)
 80074a8:	6809      	ldr	r1, [r1, #0]
 80074aa:	f000 f86a 	bl	8007582 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0cf      	beq.n	8007452 <ConfigStore::Flash()+0x26>
 80074b2:	2000      	movs	r0, #0
 80074b4:	6020      	str	r0, [r4, #0]
 80074b6:	b004      	add	sp, #16
 80074b8:	bd10      	pop	{r4, pc}
 80074ba:	4618      	mov	r0, r3
 80074bc:	e7fb      	b.n	80074b6 <ConfigStore::Flash()+0x8a>
 80074be:	bf00      	nop
 80074c0:	200016b4 			; <UNDEFINED> instruction: 0x200016b4
 80074c4:	2000181c 	andcs	r1, r0, ip, lsl r8
 80074c8:	200006a4 	andcs	r0, r0, r4, lsr #13
 80074cc:	200016a8 	andcs	r1, r0, r8, lsr #13
 80074d0:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 80074d4:	200006a8 	andcs	r0, r0, r8, lsr #13

080074d8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80074d8:	4770      	bx	lr
	...

080074dc <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80074dc:	b507      	push	{r0, r1, r2, lr}
 80074de:	2300      	movs	r3, #0
 80074e0:	460a      	mov	r2, r1
 80074e2:	2101      	movs	r1, #1
 80074e4:	e9cd 3100 	strd	r3, r1, [sp]
 80074e8:	4804      	ldr	r0, [pc, #16]	; (80074fc <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 80074ea:	2322      	movs	r3, #34	; 0x22
 80074ec:	210f      	movs	r1, #15
 80074ee:	6800      	ldr	r0, [r0, #0]
 80074f0:	f7ff ff6a 	bl	80073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80074f4:	b003      	add	sp, #12
 80074f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074fa:	bf00      	nop
 80074fc:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007500 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8007500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007502:	2200      	movs	r2, #0
 8007504:	460b      	mov	r3, r1
 8007506:	2122      	movs	r1, #34	; 0x22
 8007508:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800750c:	4804      	ldr	r0, [pc, #16]	; (8007520 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800750e:	9100      	str	r1, [sp, #0]
 8007510:	6800      	ldr	r0, [r0, #0]
 8007512:	210f      	movs	r1, #15
 8007514:	f7ff ff18 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007518:	b005      	add	sp, #20
 800751a:	f85d fb04 	ldr.w	pc, [sp], #4
 800751e:	bf00      	nop
 8007520:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007524 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	f001 f89b 	bl	8008662 <operator delete(void*)>
 800752c:	4620      	mov	r0, r4
 800752e:	bd10      	pop	{r4, pc}

08007530 <StoreDisplayUdf::StoreDisplayUdf()>:
 8007530:	4a02      	ldr	r2, [pc, #8]	; (800753c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8007532:	6002      	str	r2, [r0, #0]
 8007534:	4a02      	ldr	r2, [pc, #8]	; (8007540 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8007536:	6010      	str	r0, [r2, #0]
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	0800bc1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip, sp, pc}
 8007540:	200016c0 	andcs	r1, r0, r0, asr #13

08007544 <StoreDevice::StoreDevice()>:
 8007544:	b510      	push	{r4, lr}
 8007546:	4604      	mov	r4, r0
 8007548:	f000 f9ce 	bl	80078e8 <FlashCode::FlashCode()>
 800754c:	7823      	ldrb	r3, [r4, #0]
 800754e:	4620      	mov	r0, r4
 8007550:	7063      	strb	r3, [r4, #1]
 8007552:	bd10      	pop	{r4, pc}

08007554 <StoreDevice::GetSize() const>:
 8007554:	f000 b9e2 	b.w	800791c <FlashCode::GetSize() const>

08007558 <StoreDevice::GetSectorSize() const>:
 8007558:	f000 b9e8 	b.w	800792c <FlashCode::GetSectorSize() const>

0800755c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 800755c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800755e:	ac03      	add	r4, sp, #12
 8007560:	9400      	str	r4, [sp, #0]
 8007562:	f000 f9e6 	bl	8007932 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	9a03      	ldr	r2, [sp, #12]
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	b004      	add	sp, #16
 800756e:	bd10      	pop	{r4, pc}

08007570 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8007570:	b513      	push	{r0, r1, r4, lr}
 8007572:	461c      	mov	r4, r3
 8007574:	ab01      	add	r3, sp, #4
 8007576:	f000 f9eb 	bl	8007950 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	b002      	add	sp, #8
 8007580:	bd10      	pop	{r4, pc}

08007582 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8007582:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007584:	ac03      	add	r4, sp, #12
 8007586:	9400      	str	r4, [sp, #0]
 8007588:	f000 fa82 	bl	8007a90 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	9a03      	ldr	r2, [sp, #12]
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	b004      	add	sp, #16
 8007594:	bd10      	pop	{r4, pc}

08007596 <StorePixelDmx::~StorePixelDmx()>:
 8007596:	4770      	bx	lr

08007598 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8007598:	3804      	subs	r0, #4
 800759a:	4770      	bx	lr

0800759c <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 800759c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800759e:	2200      	movs	r2, #0
 80075a0:	460b      	mov	r3, r1
 80075a2:	2118      	movs	r1, #24
 80075a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80075a8:	4804      	ldr	r0, [pc, #16]	; (80075bc <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 80075aa:	9100      	str	r1, [sp, #0]
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	2103      	movs	r1, #3
 80075b0:	f7ff feca 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80075b4:	b005      	add	sp, #20
 80075b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80075ba:	bf00      	nop
 80075bc:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080075c0 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80075c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80075c2:	2304      	movs	r3, #4
 80075c4:	2200      	movs	r2, #0
 80075c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075ca:	2302      	movs	r3, #2
 80075cc:	4806      	ldr	r0, [pc, #24]	; (80075e8 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80075d4:	2207      	movs	r2, #7
 80075d6:	2103      	movs	r1, #3
 80075d8:	6800      	ldr	r0, [r0, #0]
 80075da:	f10d 0316 	add.w	r3, sp, #22
 80075de:	f7ff feb3 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80075e2:	b007      	add	sp, #28
 80075e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80075e8:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080075ec <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 80075ec:	f1a0 0004 	sub.w	r0, r0, #4
 80075f0:	e7e6      	b.n	80075c0 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 80075f2:	bf00      	nop

080075f4 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 80075f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80075f6:	2308      	movs	r3, #8
 80075f8:	2200      	movs	r2, #0
 80075fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075fe:	2301      	movs	r3, #1
 8007600:	4806      	ldr	r0, [pc, #24]	; (800761c <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	f88d 1017 	strb.w	r1, [sp, #23]
 8007608:	2210      	movs	r2, #16
 800760a:	2103      	movs	r1, #3
 800760c:	6800      	ldr	r0, [r0, #0]
 800760e:	f10d 0317 	add.w	r3, sp, #23
 8007612:	f7ff fe99 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007616:	b007      	add	sp, #28
 8007618:	f85d fb04 	ldr.w	pc, [sp], #4
 800761c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007620 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 8007620:	f1a0 0004 	sub.w	r0, r0, #4
 8007624:	e7e6      	b.n	80075f4 <StorePixelDmx::SaveTestPattern(unsigned char)>
 8007626:	bf00      	nop

08007628 <StorePixelDmx::SaveMap(unsigned char)>:
 8007628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800762a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800762e:	2200      	movs	r2, #0
 8007630:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007634:	2301      	movs	r3, #1
 8007636:	4807      	ldr	r0, [pc, #28]	; (8007654 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	f88d 1017 	strb.w	r1, [sp, #23]
 800763e:	2213      	movs	r2, #19
 8007640:	2103      	movs	r1, #3
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	f10d 0317 	add.w	r3, sp, #23
 8007648:	f7ff fe7e 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800764c:	b007      	add	sp, #28
 800764e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007652:	bf00      	nop
 8007654:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007658 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 8007658:	f1a0 0004 	sub.w	r0, r0, #4
 800765c:	e7e4      	b.n	8007628 <StorePixelDmx::SaveMap(unsigned char)>
 800765e:	bf00      	nop

08007660 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007666:	2200      	movs	r2, #0
 8007668:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800766c:	2302      	movs	r3, #2
 800766e:	4807      	ldr	r0, [pc, #28]	; (800768c <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007676:	2211      	movs	r2, #17
 8007678:	2103      	movs	r1, #3
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	f10d 0316 	add.w	r3, sp, #22
 8007680:	f7ff fe62 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007684:	b007      	add	sp, #28
 8007686:	f85d fb04 	ldr.w	pc, [sp], #4
 800768a:	bf00      	nop
 800768c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007690 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8007690:	f1a0 0004 	sub.w	r0, r0, #4
 8007694:	e7e4      	b.n	8007660 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8007696:	bf00      	nop

08007698 <StorePixelDmx::SaveCount(unsigned short)>:
 8007698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800769a:	2302      	movs	r3, #2
 800769c:	2200      	movs	r2, #0
 800769e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076a2:	4807      	ldr	r0, [pc, #28]	; (80076c0 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80076aa:	2205      	movs	r2, #5
 80076ac:	2103      	movs	r1, #3
 80076ae:	6800      	ldr	r0, [r0, #0]
 80076b0:	f10d 0316 	add.w	r3, sp, #22
 80076b4:	f7ff fe48 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80076b8:	b007      	add	sp, #28
 80076ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80076be:	bf00      	nop
 80076c0:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080076c4 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 80076c4:	f1a0 0004 	sub.w	r0, r0, #4
 80076c8:	e7e6      	b.n	8007698 <StorePixelDmx::SaveCount(unsigned short)>
 80076ca:	bf00      	nop

080076cc <StorePixelDmx::SaveType(unsigned char)>:
 80076cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80076ce:	2301      	movs	r3, #1
 80076d0:	2200      	movs	r2, #0
 80076d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076d6:	4807      	ldr	r0, [pc, #28]	; (80076f4 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	f88d 1017 	strb.w	r1, [sp, #23]
 80076de:	2204      	movs	r2, #4
 80076e0:	2103      	movs	r1, #3
 80076e2:	6800      	ldr	r0, [r0, #0]
 80076e4:	f10d 0317 	add.w	r3, sp, #23
 80076e8:	f7ff fe2e 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80076ec:	b007      	add	sp, #28
 80076ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80076f2:	bf00      	nop
 80076f4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080076f8 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 80076f8:	f1a0 0004 	sub.w	r0, r0, #4
 80076fc:	e7e6      	b.n	80076cc <StorePixelDmx::SaveType(unsigned char)>
 80076fe:	bf00      	nop

08007700 <StorePixelDmx::~StorePixelDmx()>:
 8007700:	b510      	push	{r4, lr}
 8007702:	4604      	mov	r4, r0
 8007704:	f000 ffad 	bl	8008662 <operator delete(void*)>
 8007708:	4620      	mov	r0, r4
 800770a:	bd10      	pop	{r4, pc}

0800770c <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 800770c:	f1a0 0004 	sub.w	r0, r0, #4
 8007710:	e7f6      	b.n	8007700 <StorePixelDmx::~StorePixelDmx()>
	...

08007714 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8007714:	b507      	push	{r0, r1, r2, lr}
 8007716:	2300      	movs	r3, #0
 8007718:	460a      	mov	r2, r1
 800771a:	2101      	movs	r1, #1
 800771c:	e9cd 3100 	strd	r3, r1, [sp]
 8007720:	4804      	ldr	r0, [pc, #16]	; (8007734 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8007722:	2318      	movs	r3, #24
 8007724:	2103      	movs	r1, #3
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	f7ff fe4e 	bl	80073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 800772c:	b003      	add	sp, #12
 800772e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007732:	bf00      	nop
 8007734:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007738 <StorePixelDmx::StorePixelDmx()>:
 8007738:	4a03      	ldr	r2, [pc, #12]	; (8007748 <StorePixelDmx::StorePixelDmx()+0x10>)
 800773a:	6002      	str	r2, [r0, #0]
 800773c:	3230      	adds	r2, #48	; 0x30
 800773e:	6042      	str	r2, [r0, #4]
 8007740:	4a02      	ldr	r2, [pc, #8]	; (800774c <StorePixelDmx::StorePixelDmx()+0x14>)
 8007742:	6010      	str	r0, [r2, #0]
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	0800bc34 	stmdaeq	r0, {r2, r4, r5, sl, fp, ip, sp, pc}
 800774c:	200016c4 	andcs	r1, r0, r4, asr #13

08007750 <StoreRDMDevice::~StoreRDMDevice()>:
 8007750:	4770      	bx	lr

08007752 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007752:	3804      	subs	r0, #4
 8007754:	4770      	bx	lr
	...

08007758 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8007758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800775a:	2200      	movs	r2, #0
 800775c:	460b      	mov	r3, r1
 800775e:	2129      	movs	r1, #41	; 0x29
 8007760:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007764:	4804      	ldr	r0, [pc, #16]	; (8007778 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8007766:	9100      	str	r1, [sp, #0]
 8007768:	6800      	ldr	r0, [r0, #0]
 800776a:	210b      	movs	r1, #11
 800776c:	f7ff fdec 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007770:	b005      	add	sp, #20
 8007772:	f85d fb04 	ldr.w	pc, [sp], #4
 8007776:	bf00      	nop
 8007778:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

0800777c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	2401      	movs	r4, #1
 8007780:	2600      	movs	r6, #0
 8007782:	4d0c      	ldr	r5, [pc, #48]	; (80077b4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8007784:	b086      	sub	sp, #24
 8007786:	460b      	mov	r3, r1
 8007788:	6828      	ldr	r0, [r5, #0]
 800778a:	f88d 2017 	strb.w	r2, [sp, #23]
 800778e:	9200      	str	r2, [sp, #0]
 8007790:	210b      	movs	r1, #11
 8007792:	2204      	movs	r2, #4
 8007794:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007798:	f7ff fdd6 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800779c:	2224      	movs	r2, #36	; 0x24
 800779e:	210b      	movs	r1, #11
 80077a0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80077a4:	6828      	ldr	r0, [r5, #0]
 80077a6:	9400      	str	r4, [sp, #0]
 80077a8:	f10d 0317 	add.w	r3, sp, #23
 80077ac:	f7ff fdcc 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80077b0:	b006      	add	sp, #24
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080077b8 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80077b8:	f1a0 0004 	sub.w	r0, r0, #4
 80077bc:	e7de      	b.n	800777c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 80077be:	bf00      	nop

080077c0 <StoreRDMDevice::~StoreRDMDevice()>:
 80077c0:	b510      	push	{r4, lr}
 80077c2:	4604      	mov	r4, r0
 80077c4:	f000 ff4d 	bl	8008662 <operator delete(void*)>
 80077c8:	4620      	mov	r0, r4
 80077ca:	bd10      	pop	{r4, pc}

080077cc <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80077cc:	f1a0 0004 	sub.w	r0, r0, #4
 80077d0:	e7f6      	b.n	80077c0 <StoreRDMDevice::~StoreRDMDevice()>
	...

080077d4 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80077d4:	b507      	push	{r0, r1, r2, lr}
 80077d6:	2300      	movs	r3, #0
 80077d8:	460a      	mov	r2, r1
 80077da:	2101      	movs	r1, #1
 80077dc:	e9cd 3100 	strd	r3, r1, [sp]
 80077e0:	4804      	ldr	r0, [pc, #16]	; (80077f4 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 80077e2:	2329      	movs	r3, #41	; 0x29
 80077e4:	210b      	movs	r1, #11
 80077e6:	6800      	ldr	r0, [r0, #0]
 80077e8:	f7ff fdee 	bl	80073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 80077ec:	b003      	add	sp, #12
 80077ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80077f2:	bf00      	nop
 80077f4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080077f8 <StoreRDMDevice::StoreRDMDevice()>:
 80077f8:	4a03      	ldr	r2, [pc, #12]	; (8007808 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 80077fa:	6002      	str	r2, [r0, #0]
 80077fc:	321c      	adds	r2, #28
 80077fe:	6042      	str	r2, [r0, #4]
 8007800:	4a02      	ldr	r2, [pc, #8]	; (800780c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8007802:	6010      	str	r0, [r2, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	0800bc8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp, pc}
 800780c:	200016c8 	andcs	r1, r0, r8, asr #13

08007810 <StoreRDMSensors::~StoreRDMSensors()>:
 8007810:	4770      	bx	lr
	...

08007814 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 8007814:	b507      	push	{r0, r1, r2, lr}
 8007816:	2300      	movs	r3, #0
 8007818:	460a      	mov	r2, r1
 800781a:	2101      	movs	r1, #1
 800781c:	e9cd 3100 	strd	r3, r1, [sp]
 8007820:	4804      	ldr	r0, [pc, #16]	; (8007834 <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x20>)
 8007822:	2334      	movs	r3, #52	; 0x34
 8007824:	2117      	movs	r1, #23
 8007826:	6800      	ldr	r0, [r0, #0]
 8007828:	f7ff fdce 	bl	80073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 800782c:	b003      	add	sp, #12
 800782e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007832:	bf00      	nop
 8007834:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007838 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8007838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783a:	2200      	movs	r2, #0
 800783c:	460b      	mov	r3, r1
 800783e:	2134      	movs	r1, #52	; 0x34
 8007840:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007844:	4804      	ldr	r0, [pc, #16]	; (8007858 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 8007846:	9100      	str	r1, [sp, #0]
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	2117      	movs	r1, #23
 800784c:	f7ff fd7c 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007850:	b005      	add	sp, #20
 8007852:	f85d fb04 	ldr.w	pc, [sp], #4
 8007856:	bf00      	nop
 8007858:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

0800785c <StoreRDMSensors::~StoreRDMSensors()>:
 800785c:	b510      	push	{r4, lr}
 800785e:	4604      	mov	r4, r0
 8007860:	f000 feff 	bl	8008662 <operator delete(void*)>
 8007864:	4620      	mov	r0, r4
 8007866:	bd10      	pop	{r4, pc}

08007868 <StoreRDMSensors::StoreRDMSensors()>:
 8007868:	4a02      	ldr	r2, [pc, #8]	; (8007874 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 800786a:	6002      	str	r2, [r0, #0]
 800786c:	4a02      	ldr	r2, [pc, #8]	; (8007878 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	0800bcbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sl, fp, ip, sp, pc}
 8007878:	200016cc 	andcs	r1, r0, ip, asr #13

0800787c <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 800787c:	4770      	bx	lr
	...

08007880 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 8007880:	b507      	push	{r0, r1, r2, lr}
 8007882:	2300      	movs	r3, #0
 8007884:	460a      	mov	r2, r1
 8007886:	2101      	movs	r1, #1
 8007888:	e9cd 3100 	strd	r3, r1, [sp]
 800788c:	4804      	ldr	r0, [pc, #16]	; (80078a0 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x20>)
 800788e:	234c      	movs	r3, #76	; 0x4c
 8007890:	2118      	movs	r1, #24
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	f7ff fd98 	bl	80073c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8007898:	b003      	add	sp, #12
 800789a:	f85d fb04 	ldr.w	pc, [sp], #4
 800789e:	bf00      	nop
 80078a0:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080078a4 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 80078a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078a6:	2200      	movs	r2, #0
 80078a8:	460b      	mov	r3, r1
 80078aa:	214c      	movs	r1, #76	; 0x4c
 80078ac:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80078b0:	4804      	ldr	r0, [pc, #16]	; (80078c4 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 80078b2:	9100      	str	r1, [sp, #0]
 80078b4:	6800      	ldr	r0, [r0, #0]
 80078b6:	2118      	movs	r1, #24
 80078b8:	f7ff fd46 	bl	8007348 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80078bc:	b005      	add	sp, #20
 80078be:	f85d fb04 	ldr.w	pc, [sp], #4
 80078c2:	bf00      	nop
 80078c4:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080078c8 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 80078c8:	b510      	push	{r4, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	f000 fec9 	bl	8008662 <operator delete(void*)>
 80078d0:	4620      	mov	r0, r4
 80078d2:	bd10      	pop	{r4, pc}

080078d4 <StoreRDMSubDevices::StoreRDMSubDevices()>:
 80078d4:	4a02      	ldr	r2, [pc, #8]	; (80078e0 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 80078d6:	6002      	str	r2, [r0, #0]
 80078d8:	4a02      	ldr	r2, [pc, #8]	; (80078e4 <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	0800bcd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, ip, sp, pc}
 80078e4:	200016d0 	ldrdcs	r1, [r0], -r0

080078e8 <FlashCode::FlashCode()>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4b09      	ldr	r3, [pc, #36]	; (8007910 <FlashCode::FlashCode()+0x28>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	6018      	str	r0, [r3, #0]
 80078f0:	2301      	movs	r3, #1
 80078f2:	7003      	strb	r3, [r0, #0]
 80078f4:	f000 f812 	bl	800791c <FlashCode::GetSize() const>
 80078f8:	4605      	mov	r5, r0
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 f80e 	bl	800791c <FlashCode::GetSize() const>
 8007900:	462a      	mov	r2, r5
 8007902:	0a83      	lsrs	r3, r0, #10
 8007904:	4903      	ldr	r1, [pc, #12]	; (8007914 <FlashCode::FlashCode()+0x2c>)
 8007906:	4804      	ldr	r0, [pc, #16]	; (8007918 <FlashCode::FlashCode()+0x30>)
 8007908:	f7fa fcba 	bl	8002280 <printf>
 800790c:	4620      	mov	r0, r4
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	200016d4 	ldrdcs	r1, [r0], -r4
 8007914:	0800a564 	stmdaeq	r0, {r2, r5, r6, r8, sl, sp, pc}
 8007918:	0800bce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, ip, sp, pc}

0800791c <FlashCode::GetSize() const>:
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <FlashCode::GetSize() const+0xc>)
 800791e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8007922:	0280      	lsls	r0, r0, #10
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	1ffff700 	svcne	0x00fff700

0800792c <FlashCode::GetSectorSize() const>:
 800792c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007930:	4770      	bx	lr

08007932 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 8007932:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007936:	441a      	add	r2, r3
 8007938:	4293      	cmp	r3, r2
 800793a:	d104      	bne.n	8007946 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 800793c:	2200      	movs	r2, #0
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	2001      	movs	r0, #1
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	4770      	bx	lr
 8007946:	f851 0b04 	ldr.w	r0, [r1], #4
 800794a:	f843 0b04 	str.w	r0, [r3], #4
 800794e:	e7f3      	b.n	8007938 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

08007950 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 8007950:	2000      	movs	r0, #0
 8007952:	b538      	push	{r3, r4, r5, lr}
 8007954:	4c47      	ldr	r4, [pc, #284]	; (8007a74 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 8007956:	6018      	str	r0, [r3, #0]
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	2b04      	cmp	r3, #4
 800795c:	f200 8082 	bhi.w	8007a64 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8007960:	e8df f003 	tbb	[pc, r3]
 8007964:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8007968:	4b430080 	blmi	90c7b70 <__exidx_end+0x10bb9d0>
 800796c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007970:	6019      	str	r1, [r3, #0]
 8007972:	4b42      	ldr	r3, [pc, #264]	; (8007a7c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	4b42      	ldr	r3, [pc, #264]	; (8007a80 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 8007978:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800797c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007980:	4b40      	ldr	r3, [pc, #256]	; (8007a84 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007982:	d807      	bhi.n	8007994 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	f001 f9a8 	bl	8008cdc <fmc_bank0_unlock>
 800798c:	2301      	movs	r3, #1
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e026      	b.n	80079e2 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8007994:	4a3c      	ldr	r2, [pc, #240]	; (8007a88 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 8007996:	4291      	cmp	r1, r2
 8007998:	d3f4      	bcc.n	8007984 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	f001 f9ab 	bl	8008cf8 <fmc_bank1_unlock>
 80079a2:	e7f3      	b.n	800798c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 80079a4:	4d37      	ldr	r5, [pc, #220]	; (8007a84 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80079a6:	782b      	ldrb	r3, [r5, #0]
 80079a8:	b15b      	cbz	r3, 80079c2 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 80079aa:	f001 f9c3 	bl	8008d34 <fmc_bank0_state_get>
 80079ae:	2801      	cmp	r0, #1
 80079b0:	d0ee      	beq.n	8007990 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 80079b2:	7829      	ldrb	r1, [r5, #0]
 80079b4:	4b35      	ldr	r3, [pc, #212]	; (8007a8c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80079b6:	b939      	cbnz	r1, 80079c8 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 80079b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079ba:	f022 0202 	bic.w	r2, r2, #2
 80079be:	651a      	str	r2, [r3, #80]	; 0x50
 80079c0:	e006      	b.n	80079d0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 80079c2:	f001 f9c9 	bl	8008d58 <fmc_bank1_state_get>
 80079c6:	e7f2      	b.n	80079ae <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	f022 0202 	bic.w	r2, r2, #2
 80079ce:	611a      	str	r2, [r3, #16]
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	b94b      	cbnz	r3, 80079ea <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 80079d6:	b129      	cbz	r1, 80079e4 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 80079d8:	f001 f99c 	bl	8008d14 <fmc_bank0_lock>
 80079dc:	2300      	movs	r3, #0
 80079de:	2001      	movs	r0, #1
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	f001 f99e 	bl	8008d24 <fmc_bank1_lock>
 80079e8:	e7f8      	b.n	80079dc <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e7cf      	b.n	800798e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 80079ee:	4923      	ldr	r1, [pc, #140]	; (8007a7c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0ca      	beq.n	800798c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 80079f6:	4b23      	ldr	r3, [pc, #140]	; (8007a84 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80079f8:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 80079fa:	7818      	ldrb	r0, [r3, #0]
 80079fc:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80079fe:	b190      	cbz	r0, 8007a26 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 8007a00:	6918      	ldr	r0, [r3, #16]
 8007a02:	f040 0002 	orr.w	r0, r0, #2
 8007a06:	6118      	str	r0, [r3, #16]
 8007a08:	6810      	ldr	r0, [r2, #0]
 8007a0a:	6158      	str	r0, [r3, #20]
 8007a0c:	6918      	ldr	r0, [r3, #16]
 8007a0e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007a12:	6118      	str	r0, [r3, #16]
 8007a14:	680b      	ldr	r3, [r1, #0]
 8007a16:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	6813      	ldr	r3, [r2, #0]
 8007a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	e7b2      	b.n	800798c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8007a26:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007a28:	f040 0002 	orr.w	r0, r0, #2
 8007a2c:	6518      	str	r0, [r3, #80]	; 0x50
 8007a2e:	6810      	ldr	r0, [r2, #0]
 8007a30:	6558      	str	r0, [r3, #84]	; 0x54
 8007a32:	69dd      	ldr	r5, [r3, #28]
 8007a34:	07ad      	lsls	r5, r5, #30
 8007a36:	bf48      	it	mi
 8007a38:	6158      	strmi	r0, [r3, #20]
 8007a3a:	4814      	ldr	r0, [pc, #80]	; (8007a8c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007a3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a42:	6503      	str	r3, [r0, #80]	; 0x50
 8007a44:	680b      	ldr	r3, [r1, #0]
 8007a46:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8007a4a:	600b      	str	r3, [r1, #0]
 8007a4c:	6813      	ldr	r3, [r2, #0]
 8007a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a52:	e7e6      	b.n	8007a22 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8007a5a:	b132      	cbz	r2, 8007a6a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	611a      	str	r2, [r3, #16]
 8007a64:	2000      	movs	r0, #0
 8007a66:	6020      	str	r0, [r4, #0]
 8007a68:	e7bb      	b.n	80079e2 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8007a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a6c:	f022 0201 	bic.w	r2, r2, #1
 8007a70:	651a      	str	r2, [r3, #80]	; 0x50
 8007a72:	e7f7      	b.n	8007a64 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8007a74:	200016dc 	ldrdcs	r1, [r0], -ip
 8007a78:	200016e0 	andcs	r1, r0, r0, ror #13
 8007a7c:	200016ec 	andcs	r1, r0, ip, ror #13
 8007a80:	1ffff700 	svcne	0x00fff700
 8007a84:	200016e8 	andcs	r1, r0, r8, ror #13
 8007a88:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007a8c:	40022000 	andmi	r2, r2, r0

08007a90 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	2400      	movs	r4, #0
 8007a94:	9804      	ldr	r0, [sp, #16]
 8007a96:	6004      	str	r4, [r0, #0]
 8007a98:	4c48      	ldr	r4, [pc, #288]	; (8007bbc <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	2804      	cmp	r0, #4
 8007a9e:	d848      	bhi.n	8007b32 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 8007aa0:	e8df f000 	tbb	[pc, r0]
 8007aa4:	22847c03 	addcs	r7, r4, #768	; 0x300
 8007aa8:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8007aac:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007ab0:	6001      	str	r1, [r0, #0]
 8007ab2:	4844      	ldr	r0, [pc, #272]	; (8007bc4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	4b44      	ldr	r3, [pc, #272]	; (8007bc8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	4b44      	ldr	r3, [pc, #272]	; (8007bcc <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 8007abc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac4:	4b42      	ldr	r3, [pc, #264]	; (8007bd0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007ac6:	d807      	bhi.n	8007ad8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	f001 f906 	bl	8008cdc <fmc_bank0_unlock>
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e026      	b.n	8007b26 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007ad8:	4a3e      	ldr	r2, [pc, #248]	; (8007bd4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 8007ada:	4291      	cmp	r1, r2
 8007adc:	d3f4      	bcc.n	8007ac8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
 8007ae2:	f001 f909 	bl	8008cf8 <fmc_bank1_unlock>
 8007ae6:	e7f3      	b.n	8007ad0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007ae8:	4d39      	ldr	r5, [pc, #228]	; (8007bd0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007aea:	782b      	ldrb	r3, [r5, #0]
 8007aec:	b15b      	cbz	r3, 8007b06 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 8007aee:	f001 f921 	bl	8008d34 <fmc_bank0_state_get>
 8007af2:	2801      	cmp	r0, #1
 8007af4:	d0ee      	beq.n	8007ad4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 8007af6:	7829      	ldrb	r1, [r5, #0]
 8007af8:	4b37      	ldr	r3, [pc, #220]	; (8007bd8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007afa:	b939      	cbnz	r1, 8007b0c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 8007afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	651a      	str	r2, [r3, #80]	; 0x50
 8007b04:	e006      	b.n	8007b14 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 8007b06:	f001 f927 	bl	8008d58 <fmc_bank1_state_get>
 8007b0a:	e7f2      	b.n	8007af2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	611a      	str	r2, [r3, #16]
 8007b14:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	b94b      	cbnz	r3, 8007b2e <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 8007b1a:	b129      	cbz	r1, 8007b28 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 8007b1c:	f001 f8fa 	bl	8008d14 <fmc_bank0_lock>
 8007b20:	2300      	movs	r3, #0
 8007b22:	2001      	movs	r0, #1
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f001 f8fc 	bl	8008d24 <fmc_bank1_lock>
 8007b2c:	e7f8      	b.n	8007b20 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 8007b2e:	2304      	movs	r3, #4
 8007b30:	e7cf      	b.n	8007ad2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 8007b32:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8007b34:	6813      	ldr	r3, [r2, #0]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d91a      	bls.n	8007b70 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 8007b3a:	4b25      	ldr	r3, [pc, #148]	; (8007bd0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007b3c:	7819      	ldrb	r1, [r3, #0]
 8007b3e:	4b26      	ldr	r3, [pc, #152]	; (8007bd8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007b40:	b189      	cbz	r1, 8007b66 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 8007b42:	6919      	ldr	r1, [r3, #16]
 8007b44:	f041 0101 	orr.w	r1, r1, #1
 8007b48:	6119      	str	r1, [r3, #16]
 8007b4a:	4d1e      	ldr	r5, [pc, #120]	; (8007bc4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007b4c:	481c      	ldr	r0, [pc, #112]	; (8007bc0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8007b4e:	6829      	ldr	r1, [r5, #0]
 8007b50:	6803      	ldr	r3, [r0, #0]
 8007b52:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b56:	f843 6b04 	str.w	r6, [r3], #4
 8007b5a:	6003      	str	r3, [r0, #0]
 8007b5c:	6813      	ldr	r3, [r2, #0]
 8007b5e:	6029      	str	r1, [r5, #0]
 8007b60:	3b04      	subs	r3, #4
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e7b4      	b.n	8007ad0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007b66:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b68:	f041 0101 	orr.w	r1, r1, #1
 8007b6c:	6519      	str	r1, [r3, #80]	; 0x50
 8007b6e:	e7ec      	b.n	8007b4a <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ad      	beq.n	8007ad0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007b74:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007b7a:	b152      	cbz	r2, 8007b92 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	f042 0201 	orr.w	r2, r2, #1
 8007b82:	611a      	str	r2, [r3, #16]
 8007b84:	4a0f      	ldr	r2, [pc, #60]	; (8007bc4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8007b86:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e79e      	b.n	8007ad0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8007b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b94:	f042 0201 	orr.w	r2, r2, #1
 8007b98:	651a      	str	r2, [r3, #80]	; 0x50
 8007b9a:	e7f3      	b.n	8007b84 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8007b9e:	781a      	ldrb	r2, [r3, #0]
 8007ba0:	4b0d      	ldr	r3, [pc, #52]	; (8007bd8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8007ba2:	b132      	cbz	r2, 8007bb2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	f022 0202 	bic.w	r2, r2, #2
 8007baa:	611a      	str	r2, [r3, #16]
 8007bac:	2000      	movs	r0, #0
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	e7b9      	b.n	8007b26 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8007bb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bb4:	f022 0202 	bic.w	r2, r2, #2
 8007bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8007bba:	e7f7      	b.n	8007bac <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 8007bbc:	200016dc 	ldrdcs	r1, [r0], -ip
 8007bc0:	200016d8 	ldrdcs	r1, [r0], -r8
 8007bc4:	200016e4 	andcs	r1, r0, r4, ror #13
 8007bc8:	200016ec 	andcs	r1, r0, ip, ror #13
 8007bcc:	1ffff700 	svcne	0x00fff700
 8007bd0:	200016e8 	andcs	r1, r0, r8, ror #13
 8007bd4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007bd8:	40022000 	andmi	r2, r2, r0

08007bdc <Display::PrintInfo() [clone .isra.0]>:
 8007bdc:	b910      	cbnz	r0, 8007be4 <Display::PrintInfo() [clone .isra.0]+0x8>
 8007bde:	4803      	ldr	r0, [pc, #12]	; (8007bec <Display::PrintInfo() [clone .isra.0]+0x10>)
 8007be0:	f7fa bb86 	b.w	80022f0 <puts>
 8007be4:	6803      	ldr	r3, [r0, #0]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	4718      	bx	r3
 8007bea:	bf00      	nop
 8007bec:	0800bd12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip, sp, pc}

08007bf0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8007bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	f001 fd93 	bl	8009720 <gd32_i2c_set_address>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f001 fd88 	bl	8009710 <gd32_i2c_set_baudrate>
 8007c00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007c04:	2b07      	cmp	r3, #7
 8007c06:	d902      	bls.n	8007c0e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8007c08:	3c50      	subs	r4, #80	; 0x50
 8007c0a:	2c0f      	cmp	r4, #15
 8007c0c:	d809      	bhi.n	8007c22 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8007c0e:	2101      	movs	r1, #1
 8007c10:	f10d 0007 	add.w	r0, sp, #7
 8007c14:	f001 fdf0 	bl	80097f8 <gd32_i2c_read>
 8007c18:	fab0 f080 	clz	r0, r0
 8007c1c:	0940      	lsrs	r0, r0, #5
 8007c1e:	b003      	add	sp, #12
 8007c20:	bd30      	pop	{r4, r5, pc}
 8007c22:	2100      	movs	r1, #0
 8007c24:	4608      	mov	r0, r1
 8007c26:	f001 fd81 	bl	800972c <gd32_i2c_write>
 8007c2a:	e7f5      	b.n	8007c18 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08007c2c <Display::Detect7Segment()>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	68c1      	ldr	r1, [r0, #12]
 8007c30:	4604      	mov	r4, r0
 8007c32:	7a00      	ldrb	r0, [r0, #8]
 8007c34:	f7ff ffdc 	bl	8007bf0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8007c38:	7460      	strb	r0, [r4, #17]
 8007c3a:	b170      	cbz	r0, 8007c5a <Display::Detect7Segment()+0x2e>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f104 0508 	add.w	r5, r4, #8
 8007c42:	4611      	mov	r1, r2
 8007c44:	4628      	mov	r0, r5
 8007c46:	f7fb f9a3 	bl	8002f90 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007c4a:	7c63      	ldrb	r3, [r4, #17]
 8007c4c:	b12b      	cbz	r3, 8007c5a <Display::Detect7Segment()+0x2e>
 8007c4e:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8007c52:	2112      	movs	r1, #18
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7fb f99b 	bl	8002f90 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}

08007c5c <Display::Detect(display::Type)>:
 8007c5c:	2902      	cmp	r1, #2
 8007c5e:	b538      	push	{r3, r4, r5, lr}
 8007c60:	4604      	mov	r4, r0
 8007c62:	d014      	beq.n	8007c8e <Display::Detect(display::Type)+0x32>
 8007c64:	2904      	cmp	r1, #4
 8007c66:	d01b      	beq.n	8007ca0 <Display::Detect(display::Type)+0x44>
 8007c68:	69a0      	ldr	r0, [r4, #24]
 8007c6a:	b168      	cbz	r0, 8007c88 <Display::Detect(display::Type)+0x2c>
 8007c6c:	6803      	ldr	r3, [r0, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	69a0      	ldr	r0, [r4, #24]
 8007c76:	b9ab      	cbnz	r3, 8007ca4 <Display::Detect(display::Type)+0x48>
 8007c78:	b110      	cbz	r0, 8007c80 <Display::Detect(display::Type)+0x24>
 8007c7a:	6803      	ldr	r3, [r0, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4798      	blx	r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	61a3      	str	r3, [r4, #24]
 8007c84:	2304      	movs	r3, #4
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6163      	str	r3, [r4, #20]
 8007c8c:	e010      	b.n	8007cb0 <Display::Detect(display::Type)+0x54>
 8007c8e:	2018      	movs	r0, #24
 8007c90:	f000 fceb 	bl	800866a <operator new(unsigned int)>
 8007c94:	4605      	mov	r5, r0
 8007c96:	2100      	movs	r1, #0
 8007c98:	f000 f89e 	bl	8007dd8 <Ssd1306::Ssd1306(TOledPanel)>
 8007c9c:	61a5      	str	r5, [r4, #24]
 8007c9e:	e7e3      	b.n	8007c68 <Display::Detect(display::Type)+0xc>
 8007ca0:	6001      	str	r1, [r0, #0]
 8007ca2:	e7e1      	b.n	8007c68 <Display::Detect(display::Type)+0xc>
 8007ca4:	6803      	ldr	r3, [r0, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4798      	blx	r3
 8007caa:	69a3      	ldr	r3, [r4, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0eb      	beq.n	8007c88 <Display::Detect(display::Type)+0x2c>
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
	...

08007cb4 <Display::Display()>:
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	6003      	str	r3, [r0, #0]
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <Display::Display()+0x44>)
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0e      	ldr	r2, [pc, #56]	; (8007cfc <Display::Display()+0x48>)
 8007cc2:	6043      	str	r3, [r0, #4]
 8007cc4:	2321      	movs	r3, #33	; 0x21
 8007cc6:	7203      	strb	r3, [r0, #8]
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <Display::Display()+0x4c>)
 8007cca:	2102      	movs	r1, #2
 8007ccc:	60c3      	str	r3, [r0, #12]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007cd4:	8203      	strh	r3, [r0, #16]
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <Display::Display()+0x50>)
 8007cd8:	6018      	str	r0, [r3, #0]
 8007cda:	f7ff ffbf 	bl	8007c5c <Display::Detect(display::Type)>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ffa4 	bl	8007c2c <Display::Detect7Segment()>
 8007ce4:	69a3      	ldr	r3, [r4, #24]
 8007ce6:	b10b      	cbz	r3, 8007cec <Display::Display()+0x38>
 8007ce8:	f7f9 fa66 	bl	80011b8 <display::timeout::gpio_init()>
 8007cec:	69a0      	ldr	r0, [r4, #24]
 8007cee:	f7ff ff75 	bl	8007bdc <Display::PrintInfo() [clone .isra.0]>
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	bd10      	pop	{r4, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000181c 	andcs	r1, r0, ip, lsl r8
 8007cfc:	000493e0 	andeq	r9, r4, r0, ror #7
 8007d00:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007d04:	200016f0 	strdcs	r1, [r0], -r0

08007d08 <Ssd1306::~Ssd1306()>:
 8007d08:	4770      	bx	lr

08007d0a <Ssd1306::SetCursor(unsigned int)>:
 8007d0a:	4770      	bx	lr

08007d0c <Ssd1306::PrintInfo()>:
 8007d0c:	b410      	push	{r4}
 8007d0e:	4906      	ldr	r1, [pc, #24]	; (8007d28 <Ssd1306::PrintInfo()+0x1c>)
 8007d10:	7c44      	ldrb	r4, [r0, #17]
 8007d12:	7903      	ldrb	r3, [r0, #4]
 8007d14:	7942      	ldrb	r2, [r0, #5]
 8007d16:	4805      	ldr	r0, [pc, #20]	; (8007d2c <Ssd1306::PrintInfo()+0x20>)
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	bf08      	it	eq
 8007d1c:	4601      	moveq	r1, r0
 8007d1e:	4804      	ldr	r0, [pc, #16]	; (8007d30 <Ssd1306::PrintInfo()+0x24>)
 8007d20:	bc10      	pop	{r4}
 8007d22:	f7fa baad 	b.w	8002280 <printf>
 8007d26:	bf00      	nop
 8007d28:	0800bd23 	stmdaeq	r0, {r0, r1, r5, r8, sl, fp, ip, sp, pc}
 8007d2c:	0800bd2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, ip, sp, pc}
 8007d30:	0800bd32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, ip, sp, pc}

08007d34 <Ssd1306::~Ssd1306()>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	f000 fc93 	bl	8008662 <operator delete(void*)>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <HAL_I2C::Setup()>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	4604      	mov	r4, r0
 8007d44:	7800      	ldrb	r0, [r0, #0]
 8007d46:	f001 fceb 	bl	8009720 <gd32_i2c_set_address>
 8007d4a:	6860      	ldr	r0, [r4, #4]
 8007d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d50:	f001 bcde 	b.w	8009710 <gd32_i2c_set_baudrate>

08007d54 <Ssd1306::PutChar(int)>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	f1a1 0420 	sub.w	r4, r1, #32
 8007d5a:	2c5f      	cmp	r4, #95	; 0x5f
 8007d5c:	bf88      	it	hi
 8007d5e:	2400      	movhi	r4, #0
 8007d60:	3008      	adds	r0, #8
 8007d62:	f7ff ffed 	bl	8007d40 <HAL_I2C::Setup()>
 8007d66:	4804      	ldr	r0, [pc, #16]	; (8007d78 <Ssd1306::PutChar(int)+0x24>)
 8007d68:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007d6c:	4420      	add	r0, r4
 8007d6e:	2107      	movs	r1, #7
 8007d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d74:	f001 bcda 	b.w	800972c <gd32_i2c_write>
 8007d78:	0800bd44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, sp, pc}

08007d7c <Ssd1306::PutString(char const*)>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4605      	mov	r5, r0
 8007d80:	1e4c      	subs	r4, r1, #1
 8007d82:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007d86:	b901      	cbnz	r1, 8007d8a <Ssd1306::PutString(char const*)+0xe>
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7ff ffe2 	bl	8007d54 <Ssd1306::PutChar(int)>
 8007d90:	e7f7      	b.n	8007d82 <Ssd1306::PutString(char const*)+0x6>

08007d92 <Ssd1306::Text(char const*, unsigned int)>:
 8007d92:	b570      	push	{r4, r5, r6, lr}
 8007d94:	7903      	ldrb	r3, [r0, #4]
 8007d96:	4605      	mov	r5, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	bf94      	ite	ls
 8007d9e:	18ce      	addls	r6, r1, r3
 8007da0:	188e      	addhi	r6, r1, r2
 8007da2:	42b4      	cmp	r4, r6
 8007da4:	d100      	bne.n	8007da8 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	4628      	mov	r0, r5
 8007daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dae:	f7ff ffd1 	bl	8007d54 <Ssd1306::PutChar(int)>
 8007db2:	e7f6      	b.n	8007da2 <Ssd1306::Text(char const*, unsigned int)+0x10>

08007db4 <Ssd1306::InitMembers()>:
 8007db4:	7c03      	ldrb	r3, [r0, #16]
 8007db6:	b14b      	cbz	r3, 8007dcc <Ssd1306::InitMembers()+0x18>
 8007db8:	3b01      	subs	r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d909      	bls.n	8007dd2 <Ssd1306::InitMembers()+0x1e>
 8007dbe:	2308      	movs	r3, #8
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	2115      	movs	r1, #21
 8007dc4:	7143      	strb	r3, [r0, #5]
 8007dc6:	7101      	strb	r1, [r0, #4]
 8007dc8:	6142      	str	r2, [r0, #20]
 8007dca:	4770      	bx	lr
 8007dcc:	2308      	movs	r3, #8
 8007dce:	461a      	mov	r2, r3
 8007dd0:	e7f7      	b.n	8007dc2 <Ssd1306::InitMembers()+0xe>
 8007dd2:	2304      	movs	r3, #4
 8007dd4:	e7fb      	b.n	8007dce <Ssd1306::InitMembers()+0x1a>
	...

08007dd8 <Ssd1306::Ssd1306(TOledPanel)>:
 8007dd8:	4a08      	ldr	r2, [pc, #32]	; (8007dfc <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007dda:	b508      	push	{r3, lr}
 8007ddc:	6002      	str	r2, [r0, #0]
 8007dde:	227f      	movs	r2, #127	; 0x7f
 8007de0:	80c2      	strh	r2, [r0, #6]
 8007de2:	223c      	movs	r2, #60	; 0x3c
 8007de4:	7202      	strb	r2, [r0, #8]
 8007de6:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007de8:	7401      	strb	r1, [r0, #16]
 8007dea:	60c2      	str	r2, [r0, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	7442      	strb	r2, [r0, #17]
 8007df0:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8007df2:	6010      	str	r0, [r2, #0]
 8007df4:	f7ff ffde 	bl	8007db4 <Ssd1306::InitMembers()>
 8007df8:	bd08      	pop	{r3, pc}
 8007dfa:	bf00      	nop
 8007dfc:	0800c01c 	stmdaeq	r0, {r2, r3, r4, lr, pc}
 8007e00:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007e04:	2000177c 	andcs	r1, r0, ip, ror r7

08007e08 <Ssd1306::SendCommand(unsigned char)>:
 8007e08:	2300      	movs	r3, #0
 8007e0a:	b507      	push	{r0, r1, r2, lr}
 8007e0c:	3008      	adds	r0, #8
 8007e0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8007e12:	f88d 1005 	strb.w	r1, [sp, #5]
 8007e16:	f7ff ff93 	bl	8007d40 <HAL_I2C::Setup()>
 8007e1a:	2102      	movs	r1, #2
 8007e1c:	a801      	add	r0, sp, #4
 8007e1e:	f001 fc85 	bl	800972c <gd32_i2c_write>
 8007e22:	b003      	add	sp, #12
 8007e24:	f85d fb04 	ldr.w	pc, [sp], #4

08007e28 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8007e28:	2914      	cmp	r1, #20
 8007e2a:	b570      	push	{r4, r5, r6, lr}
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	4616      	mov	r6, r2
 8007e30:	d81c      	bhi.n	8007e6c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007e32:	7943      	ldrb	r3, [r0, #5]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d919      	bls.n	8007e6c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007e38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007e3c:	7c43      	ldrb	r3, [r0, #17]
 8007e3e:	004c      	lsls	r4, r1, #1
 8007e40:	b2e4      	uxtb	r4, r4
 8007e42:	b10b      	cbz	r3, 8007e48 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8007e44:	3404      	adds	r4, #4
 8007e46:	b2e4      	uxtb	r4, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f004 010e 	and.w	r1, r4, #14
 8007e4e:	f7ff ffdb 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007e52:	0921      	lsrs	r1, r4, #4
 8007e54:	4628      	mov	r0, r5
 8007e56:	f041 0110 	orr.w	r1, r1, #16
 8007e5a:	f7ff ffd5 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8007e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e68:	f7ff bfce 	b.w	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}

08007e6e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8007e6e:	b570      	push	{r4, r5, r6, lr}
 8007e70:	461e      	mov	r6, r3
 8007e72:	7943      	ldrb	r3, [r0, #5]
 8007e74:	4604      	mov	r4, r0
 8007e76:	428b      	cmp	r3, r1
 8007e78:	4615      	mov	r5, r2
 8007e7a:	d30b      	bcc.n	8007e94 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 8007e7c:	3901      	subs	r1, #1
 8007e7e:	b2ca      	uxtb	r2, r1
 8007e80:	2100      	movs	r1, #0
 8007e82:	f7ff ffd1 	bl	8007e28 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007e86:	4632      	mov	r2, r6
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e90:	f7ff bf7f 	b.w	8007d92 <Ssd1306::Text(char const*, unsigned int)>
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e98 <Ssd1306::ClearLine(unsigned char)>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	7943      	ldrb	r3, [r0, #5]
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	d314      	bcc.n	8007ecc <Ssd1306::ClearLine(unsigned char)+0x34>
 8007ea2:	3901      	subs	r1, #1
 8007ea4:	b2cc      	uxtb	r4, r1
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	f7ff ffbd 	bl	8007e28 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007eae:	f105 0008 	add.w	r0, r5, #8
 8007eb2:	f7ff ff45 	bl	8007d40 <HAL_I2C::Setup()>
 8007eb6:	2181      	movs	r1, #129	; 0x81
 8007eb8:	4805      	ldr	r0, [pc, #20]	; (8007ed0 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8007eba:	f001 fc37 	bl	800972c <gd32_i2c_write>
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f7ff bfae 	b.w	8007e28 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007ecc:	bd38      	pop	{r3, r4, r5, pc}
 8007ece:	bf00      	nop
 8007ed0:	200016f4 	strdcs	r1, [r0], -r4

08007ed4 <Ssd1306::SetSleep(bool)>:
 8007ed4:	b111      	cbz	r1, 8007edc <Ssd1306::SetSleep(bool)+0x8>
 8007ed6:	21ae      	movs	r1, #174	; 0xae
 8007ed8:	f7ff bf96 	b.w	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007edc:	21af      	movs	r1, #175	; 0xaf
 8007ede:	e7fb      	b.n	8007ed8 <Ssd1306::SetSleep(bool)+0x4>

08007ee0 <Ssd1306::SetContrast(unsigned char)>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	7181      	strb	r1, [r0, #6]
 8007ee8:	2181      	movs	r1, #129	; 0x81
 8007eea:	f7ff ff8d 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007eee:	4629      	mov	r1, r5
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ef6:	f7ff bf87 	b.w	8007e08 <Ssd1306::SendCommand(unsigned char)>

08007efa <Ssd1306::SetFlipVertically(bool)>:
 8007efa:	b510      	push	{r4, lr}
 8007efc:	4604      	mov	r4, r0
 8007efe:	71c1      	strb	r1, [r0, #7]
 8007f00:	b141      	cbz	r1, 8007f14 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8007f02:	21c0      	movs	r1, #192	; 0xc0
 8007f04:	f7ff ff80 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f08:	21a0      	movs	r1, #160	; 0xa0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f10:	f7ff bf7a 	b.w	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f14:	21c8      	movs	r1, #200	; 0xc8
 8007f16:	f7ff ff77 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f1a:	21a1      	movs	r1, #161	; 0xa1
 8007f1c:	e7f5      	b.n	8007f0a <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08007f20 <Ssd1306::CheckSH1106()>:
 8007f20:	b530      	push	{r4, r5, lr}
 8007f22:	4604      	mov	r4, r0
 8007f24:	b087      	sub	sp, #28
 8007f26:	2100      	movs	r1, #0
 8007f28:	f7ff ff6e 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f2c:	2190      	movs	r1, #144	; 0x90
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff ff6a 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f34:	21b0      	movs	r1, #176	; 0xb0
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff ff66 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f3c:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <Ssd1306::CheckSH1106()+0xa8>)
 8007f3e:	f104 0508 	add.w	r5, r4, #8
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	9002      	str	r0, [sp, #8]
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f88d 300c 	strb.w	r3, [sp, #12]
 8007f4e:	f7ff fef7 	bl	8007d40 <HAL_I2C::Setup()>
 8007f52:	2105      	movs	r1, #5
 8007f54:	a802      	add	r0, sp, #8
 8007f56:	f001 fbe9 	bl	800972c <gd32_i2c_write>
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff ff53 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f62:	2190      	movs	r1, #144	; 0x90
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7ff ff4f 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f6a:	21b0      	movs	r1, #176	; 0xb0
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7ff ff4b 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007f72:	2300      	movs	r3, #0
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	f88d 3014 	strb.w	r3, [sp, #20]
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007f82:	f7ff fedd 	bl	8007d40 <HAL_I2C::Setup()>
 8007f86:	2101      	movs	r1, #1
 8007f88:	f10d 0007 	add.w	r0, sp, #7
 8007f8c:	f001 fbce 	bl	800972c <gd32_i2c_write>
 8007f90:	4628      	mov	r0, r5
 8007f92:	f7ff fed5 	bl	8007d40 <HAL_I2C::Setup()>
 8007f96:	2105      	movs	r1, #5
 8007f98:	a804      	add	r0, sp, #16
 8007f9a:	f001 fc2d 	bl	80097f8 <gd32_i2c_read>
 8007f9e:	2004      	movs	r0, #4
 8007fa0:	aa02      	add	r2, sp, #8
 8007fa2:	a904      	add	r1, sp, #16
 8007fa4:	3801      	subs	r0, #1
 8007fa6:	d201      	bcs.n	8007fac <Ssd1306::CheckSH1106()+0x8c>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e006      	b.n	8007fba <Ssd1306::CheckSH1106()+0x9a>
 8007fac:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007fb0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	d0f5      	beq.n	8007fa4 <Ssd1306::CheckSH1106()+0x84>
 8007fb8:	1b5b      	subs	r3, r3, r5
 8007fba:	fab3 f383 	clz	r3, r3
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	7463      	strb	r3, [r4, #17]
 8007fc2:	b007      	add	sp, #28
 8007fc4:	bd30      	pop	{r4, r5, pc}
 8007fc6:	bf00      	nop
 8007fc8:	0800bd3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp, pc}

08007fcc <Ssd1306::Cls()>:
 8007fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	7c45      	ldrb	r5, [r0, #17]
 8007fd6:	00ad      	lsls	r5, r5, #2
 8007fd8:	b2ed      	uxtb	r5, r5
 8007fda:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8007fde:	f045 0810 	orr.w	r8, r5, #16
 8007fe2:	b2ff      	uxtb	r7, r7
 8007fe4:	6963      	ldr	r3, [r4, #20]
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	4620      	mov	r0, r4
 8007fec:	d80b      	bhi.n	8008006 <Ssd1306::Cls()+0x3a>
 8007fee:	f7ff ff0b 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff ff07 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008000:	21b0      	movs	r1, #176	; 0xb0
 8008002:	f7ff bf01 	b.w	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8008006:	f7ff feff 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 800800a:	4641      	mov	r1, r8
 800800c:	4620      	mov	r0, r4
 800800e:	f7ff fefb 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 8008012:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8008016:	4620      	mov	r0, r4
 8008018:	b2c9      	uxtb	r1, r1
 800801a:	f7ff fef5 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 800801e:	7c23      	ldrb	r3, [r4, #16]
 8008020:	b123      	cbz	r3, 800802c <Ssd1306::Cls()+0x60>
 8008022:	3b01      	subs	r3, #1
 8008024:	2b01      	cmp	r3, #1
 8008026:	d901      	bls.n	800802c <Ssd1306::Cls()+0x60>
 8008028:	3601      	adds	r6, #1
 800802a:	e7db      	b.n	8007fe4 <Ssd1306::Cls()+0x18>
 800802c:	f104 0008 	add.w	r0, r4, #8
 8008030:	f7ff fe86 	bl	8007d40 <HAL_I2C::Setup()>
 8008034:	4639      	mov	r1, r7
 8008036:	4802      	ldr	r0, [pc, #8]	; (8008040 <Ssd1306::Cls()+0x74>)
 8008038:	f001 fb78 	bl	800972c <gd32_i2c_write>
 800803c:	e7f4      	b.n	8008028 <Ssd1306::Cls()+0x5c>
 800803e:	bf00      	nop
 8008040:	200016f4 	strdcs	r1, [r0], -r4

08008044 <Ssd1306::Start()>:
 8008044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008046:	7a04      	ldrb	r4, [r0, #8]
 8008048:	68c6      	ldr	r6, [r0, #12]
 800804a:	4605      	mov	r5, r0
 800804c:	4620      	mov	r0, r4
 800804e:	f001 fb67 	bl	8009720 <gd32_i2c_set_address>
 8008052:	4630      	mov	r0, r6
 8008054:	f001 fb5c 	bl	8009710 <gd32_i2c_set_baudrate>
 8008058:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800805c:	2b07      	cmp	r3, #7
 800805e:	d902      	bls.n	8008066 <Ssd1306::Start()+0x22>
 8008060:	3c50      	subs	r4, #80	; 0x50
 8008062:	2c0f      	cmp	r4, #15
 8008064:	d80f      	bhi.n	8008086 <Ssd1306::Start()+0x42>
 8008066:	2101      	movs	r1, #1
 8008068:	f10d 0007 	add.w	r0, sp, #7
 800806c:	f001 fbc4 	bl	80097f8 <gd32_i2c_read>
 8008070:	fab0 f480 	clz	r4, r0
 8008074:	0964      	lsrs	r4, r4, #5
 8008076:	b35c      	cbz	r4, 80080d0 <Ssd1306::Start()+0x8c>
 8008078:	7c2e      	ldrb	r6, [r5, #16]
 800807a:	b14e      	cbz	r6, 8008090 <Ssd1306::Start()+0x4c>
 800807c:	3e01      	subs	r6, #1
 800807e:	2e01      	cmp	r6, #1
 8008080:	d929      	bls.n	80080d6 <Ssd1306::Start()+0x92>
 8008082:	2400      	movs	r4, #0
 8008084:	e024      	b.n	80080d0 <Ssd1306::Start()+0x8c>
 8008086:	2100      	movs	r1, #0
 8008088:	4608      	mov	r0, r1
 800808a:	f001 fb4f 	bl	800972c <gd32_i2c_write>
 800808e:	e7ef      	b.n	8008070 <Ssd1306::Start()+0x2c>
 8008090:	4f16      	ldr	r7, [pc, #88]	; (80080ec <Ssd1306::Start()+0xa8>)
 8008092:	4628      	mov	r0, r5
 8008094:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008098:	3601      	adds	r6, #1
 800809a:	f7ff feb5 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 800809e:	2e18      	cmp	r6, #24
 80080a0:	d1f7      	bne.n	8008092 <Ssd1306::Start()+0x4e>
 80080a2:	2300      	movs	r3, #0
 80080a4:	4a12      	ldr	r2, [pc, #72]	; (80080f0 <Ssd1306::Start()+0xac>)
 80080a6:	4618      	mov	r0, r3
 80080a8:	4611      	mov	r1, r2
 80080aa:	3301      	adds	r3, #1
 80080ac:	2b86      	cmp	r3, #134	; 0x86
 80080ae:	f802 0b01 	strb.w	r0, [r2], #1
 80080b2:	d1fa      	bne.n	80080aa <Ssd1306::Start()+0x66>
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	4628      	mov	r0, r5
 80080b8:	700b      	strb	r3, [r1, #0]
 80080ba:	f7ff ff31 	bl	8007f20 <Ssd1306::CheckSH1106()>
 80080be:	4628      	mov	r0, r5
 80080c0:	f7ff ff84 	bl	8007fcc <Ssd1306::Cls()>
 80080c4:	21af      	movs	r1, #175	; 0xaf
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7ff fe9e 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 80080cc:	2301      	movs	r3, #1
 80080ce:	71eb      	strb	r3, [r5, #7]
 80080d0:	4620      	mov	r0, r4
 80080d2:	b003      	add	sp, #12
 80080d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d6:	2600      	movs	r6, #0
 80080d8:	4f06      	ldr	r7, [pc, #24]	; (80080f4 <Ssd1306::Start()+0xb0>)
 80080da:	4628      	mov	r0, r5
 80080dc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080e0:	3601      	adds	r6, #1
 80080e2:	f7ff fe91 	bl	8007e08 <Ssd1306::SendCommand(unsigned char)>
 80080e6:	2e18      	cmp	r6, #24
 80080e8:	d1f7      	bne.n	80080da <Ssd1306::Start()+0x96>
 80080ea:	e7da      	b.n	80080a2 <Ssd1306::Start()+0x5e>
 80080ec:	0800bffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80080f0:	200016f4 	strdcs	r1, [r0], -r4
 80080f4:	0800bfe4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, fp, ip, sp, pc}

080080f8 <console_putc>:
 80080f8:	f000 bc84 	b.w	8008a04 <uart0_putc>

080080fc <console_puts>:
 80080fc:	f000 bca2 	b.w	8008a44 <uart0_puts>

08008100 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8008100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008104:	4617      	mov	r7, r2
 8008106:	461e      	mov	r6, r3
 8008108:	4d14      	ldr	r5, [pc, #80]	; (800815c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 800810c:	b086      	sub	sp, #24
 800810e:	6018      	str	r0, [r3, #0]
 8008110:	4604      	mov	r4, r0
 8008112:	f105 0803 	add.w	r8, r5, #3
 8008116:	2203      	movs	r2, #3
 8008118:	4628      	mov	r0, r5
 800811a:	f000 fb26 	bl	800876a <memmove>
 800811e:	4639      	mov	r1, r7
 8008120:	220b      	movs	r2, #11
 8008122:	4640      	mov	r0, r8
 8008124:	f000 fb21 	bl	800876a <memmove>
 8008128:	f105 030e 	add.w	r3, r5, #14
 800812c:	4631      	mov	r1, r6
 800812e:	2208      	movs	r2, #8
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fb1a 	bl	800876a <memmove>
 8008136:	2308      	movs	r3, #8
 8008138:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800813c:	230b      	movs	r3, #11
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	4b08      	ldr	r3, [pc, #32]	; (8008164 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8008142:	9005      	str	r0, [sp, #20]
 8008144:	e9cd 5300 	strd	r5, r3, [sp]
 8008148:	213f      	movs	r1, #63	; 0x3f
 800814a:	2303      	movs	r3, #3
 800814c:	4a06      	ldr	r2, [pc, #24]	; (8008168 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 800814e:	4807      	ldr	r0, [pc, #28]	; (800816c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8008150:	f7fa f8a6 	bl	80022a0 <snprintf>
 8008154:	4620      	mov	r0, r4
 8008156:	b006      	add	sp, #24
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	20001780 	andcs	r1, r0, r0, lsl #15
 8008160:	200017d8 	ldrdcs	r1, [r0], -r8
 8008164:	0800a564 	stmdaeq	r0, {r2, r5, r6, r8, sl, sp, pc}
 8008168:	0800c060 	stmdaeq	r0, {r5, r6, lr, pc}
 800816c:	20001796 	mulcs	r0, r6, r7

08008170 <FirmwareVersion::Print(char const*)>:
 8008170:	b510      	push	{r4, lr}
 8008172:	460c      	mov	r4, r1
 8008174:	4804      	ldr	r0, [pc, #16]	; (8008188 <FirmwareVersion::Print(char const*)+0x18>)
 8008176:	f7fa f8bb 	bl	80022f0 <puts>
 800817a:	b124      	cbz	r4, 8008186 <FirmwareVersion::Print(char const*)+0x16>
 800817c:	4620      	mov	r0, r4
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008182:	f7fa b8b5 	b.w	80022f0 <puts>
 8008186:	bd10      	pop	{r4, pc}
 8008188:	20001796 	mulcs	r0, r6, r7

0800818c <LedBlink::LedBlink()>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	2205      	movs	r2, #5
 8008190:	2300      	movs	r3, #0
 8008192:	e9c0 3200 	strd	r3, r2, [r0]
 8008196:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800819a:	6083      	str	r3, [r0, #8]
 800819c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80081a0:	6143      	str	r3, [r0, #20]
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <LedBlink::LedBlink()+0x3c>)
 80081a4:	4d09      	ldr	r5, [pc, #36]	; (80081cc <LedBlink::LedBlink()+0x40>)
 80081a6:	4604      	mov	r4, r0
 80081a8:	6018      	str	r0, [r3, #0]
 80081aa:	f240 6004 	movw	r0, #1540	; 0x604
 80081ae:	f000 feb1 	bl	8008f14 <rcu_periph_clock_enable>
 80081b2:	4628      	mov	r0, r5
 80081b4:	2301      	movs	r3, #1
 80081b6:	2203      	movs	r2, #3
 80081b8:	2110      	movs	r1, #16
 80081ba:	f000 fe19 	bl	8008df0 <gpio_init>
 80081be:	2301      	movs	r3, #1
 80081c0:	4620      	mov	r0, r4
 80081c2:	616b      	str	r3, [r5, #20]
 80081c4:	bd38      	pop	{r3, r4, r5, pc}
 80081c6:	bf00      	nop
 80081c8:	200017dc 	ldrdcs	r1, [r0], -ip
 80081cc:	40011000 	andmi	r1, r1, r0

080081d0 <LedBlink::SetMode(ledblink::Mode)>:
 80081d0:	6843      	ldr	r3, [r0, #4]
 80081d2:	428b      	cmp	r3, r1
 80081d4:	d02f      	beq.n	8008236 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80081d6:	6041      	str	r1, [r0, #4]
 80081d8:	2904      	cmp	r1, #4
 80081da:	d822      	bhi.n	8008222 <LedBlink::SetMode(ledblink::Mode)+0x52>
 80081dc:	e8df f001 	tbb	[pc, r1]
 80081e0:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80081e4:	23ff001d 	mvnscs	r0, #29
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	2201      	movs	r2, #1
 80081ee:	60c3      	str	r3, [r0, #12]
 80081f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081f4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	6880      	ldr	r0, [r0, #8]
 80081fc:	b1d8      	cbz	r0, 8008236 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	4718      	bx	r3
 8008204:	2301      	movs	r3, #1
 8008206:	6003      	str	r3, [r0, #0]
 8008208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800820c:	60c3      	str	r3, [r0, #12]
 800820e:	e7f4      	b.n	80081fa <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8008210:	2303      	movs	r3, #3
 8008212:	6003      	str	r3, [r0, #0]
 8008214:	f240 134d 	movw	r3, #333	; 0x14d
 8008218:	e7f8      	b.n	800820c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 800821a:	2305      	movs	r3, #5
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	23c8      	movs	r3, #200	; 0xc8
 8008220:	e7f4      	b.n	800820c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8008222:	2300      	movs	r3, #0
 8008224:	2201      	movs	r2, #1
 8008226:	6003      	str	r3, [r0, #0]
 8008228:	60c3      	str	r3, [r0, #12]
 800822a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800822e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8008232:	615a      	str	r2, [r3, #20]
 8008234:	e7e1      	b.n	80081fa <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8008236:	4770      	bx	lr

08008238 <Hardware::Hardware()>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4604      	mov	r4, r0
 800823c:	2500      	movs	r5, #0
 800823e:	b090      	sub	sp, #64	; 0x40
 8008240:	f000 f8d0 	bl	80083e4 <HwClock::HwClock()>
 8008244:	4b28      	ldr	r3, [pc, #160]	; (80082e8 <Hardware::Hardware()+0xb0>)
 8008246:	7325      	strb	r5, [r4, #12]
 8008248:	601c      	str	r4, [r3, #0]
 800824a:	f7f7 ff71 	bl	8000130 <console_init>
 800824e:	f000 fc09 	bl	8008a64 <systick_config>
 8008252:	f001 fd17 	bl	8009c84 <udelay_init()>
 8008256:	f001 fd13 	bl	8009c80 <micros_init()>
 800825a:	f240 701b 	movw	r0, #1819	; 0x71b
 800825e:	f000 fe59 	bl	8008f14 <rcu_periph_clock_enable>
 8008262:	f240 701c 	movw	r0, #1820	; 0x71c
 8008266:	f000 fe55 	bl	8008f14 <rcu_periph_clock_enable>
 800826a:	4e20      	ldr	r6, [pc, #128]	; (80082ec <Hardware::Hardware()+0xb4>)
 800826c:	f000 fe4a 	bl	8008f04 <pmu_backup_write_enable>
 8008270:	4629      	mov	r1, r5
 8008272:	2002      	movs	r0, #2
 8008274:	f000 fc84 	bl	8008b80 <bkp_data_write>
 8008278:	f240 7004 	movw	r0, #1796	; 0x704
 800827c:	f000 fe4a 	bl	8008f14 <rcu_periph_clock_enable>
 8008280:	4630      	mov	r0, r6
 8008282:	f000 ffa9 	bl	80091d8 <timer_deinit>
 8008286:	236b      	movs	r3, #107	; 0x6b
 8008288:	f8ad 300c 	strh.w	r3, [sp, #12]
 800828c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008290:	a903      	add	r1, sp, #12
 8008292:	4630      	mov	r0, r6
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	f001 f801 	bl	800929c <timer_init>
 800829a:	4630      	mov	r0, r6
 800829c:	f001 f856 	bl	800934c <timer_enable>
 80082a0:	f001 f964 	bl	800956c <gd32_adc_init()>
 80082a4:	2211      	movs	r2, #17
 80082a6:	230b      	movs	r3, #11
 80082a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082ac:	237a      	movs	r3, #122	; 0x7a
 80082ae:	a807      	add	r0, sp, #28
 80082b0:	930c      	str	r3, [sp, #48]	; 0x30
 80082b2:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80082b6:	9507      	str	r5, [sp, #28]
 80082b8:	950f      	str	r5, [sp, #60]	; 0x3c
 80082ba:	f000 faf9 	bl	80088b0 <mktime>
 80082be:	4629      	mov	r1, r5
 80082c0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80082c4:	a801      	add	r0, sp, #4
 80082c6:	f000 fb69 	bl	800899c <settimeofday>
 80082ca:	f001 f9ed 	bl	80096a8 <gd32_i2c_begin>
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f980 	bl	80085d4 <HwClock::RtcProbe()>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 f891 	bl	80083fc <HwClock::Print()>
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f8c2 	bl	8008464 <HwClock::HcToSys()>
 80082e0:	4620      	mov	r0, r4
 80082e2:	b010      	add	sp, #64	; 0x40
 80082e4:	bd70      	pop	{r4, r5, r6, pc}
 80082e6:	bf00      	nop
 80082e8:	200017e0 	andcs	r1, r0, r0, ror #15
 80082ec:	40001000 	andmi	r1, r0, r0

080082f0 <Hardware::SetTime(tm const*)>:
 80082f0:	b500      	push	{lr}
 80082f2:	680b      	ldr	r3, [r1, #0]
 80082f4:	b08b      	sub	sp, #44	; 0x2c
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	684b      	ldr	r3, [r1, #4]
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	688b      	ldr	r3, [r1, #8]
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	68cb      	ldr	r3, [r1, #12]
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	690b      	ldr	r3, [r1, #16]
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	694b      	ldr	r3, [r1, #20]
 800830a:	a901      	add	r1, sp, #4
 800830c:	9306      	str	r3, [sp, #24]
 800830e:	f000 f909 	bl	8008524 <HwClock::Set(rtc_time const*)>
 8008312:	2001      	movs	r0, #1
 8008314:	b00b      	add	sp, #44	; 0x2c
 8008316:	f85d fb04 	ldr.w	pc, [sp], #4

0800831a <Hardware::GetTime(tm*)>:
 800831a:	b513      	push	{r0, r1, r4, lr}
 800831c:	2000      	movs	r0, #0
 800831e:	460c      	mov	r4, r1
 8008320:	f000 fb54 	bl	80089cc <time>
 8008324:	9001      	str	r0, [sp, #4]
 8008326:	a801      	add	r0, sp, #4
 8008328:	f000 fa7e 	bl	8008828 <localtime>
 800832c:	6943      	ldr	r3, [r0, #20]
 800832e:	6163      	str	r3, [r4, #20]
 8008330:	6903      	ldr	r3, [r0, #16]
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	68c3      	ldr	r3, [r0, #12]
 8008336:	60e3      	str	r3, [r4, #12]
 8008338:	6883      	ldr	r3, [r0, #8]
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6843      	ldr	r3, [r0, #4]
 800833e:	6063      	str	r3, [r4, #4]
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	b002      	add	sp, #8
 8008346:	bd10      	pop	{r4, pc}

08008348 <Hardware::Reboot()>:
 8008348:	b508      	push	{r3, lr}
 800834a:	2300      	movs	r3, #0
 800834c:	4604      	mov	r4, r0
 800834e:	7303      	strb	r3, [r0, #12]
 8008350:	2104      	movs	r1, #4
 8008352:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008356:	f000 fd21 	bl	8008d9c <fwdgt_config>
 800835a:	4620      	mov	r0, r4
 800835c:	f7f8 ff5c 	bl	8001218 <Hardware::RebootHandler()>
 8008360:	2102      	movs	r1, #2
 8008362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008366:	f000 fd19 	bl	8008d9c <fwdgt_config>
 800836a:	2801      	cmp	r0, #1
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	7323      	strb	r3, [r4, #12]
 8008374:	d101      	bne.n	800837a <Hardware::Reboot()+0x32>
 8008376:	f000 fd01 	bl	8008d7c <fwdgt_enable>
 800837a:	2208      	movs	r2, #8
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <Hardware::Reboot()+0x6c>)
 800837e:	2501      	movs	r5, #1
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	480d      	ldr	r0, [pc, #52]	; (80083b8 <Hardware::Reboot()+0x70>)
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	227d      	movs	r2, #125	; 0x7d
 8008388:	490c      	ldr	r1, [pc, #48]	; (80083bc <Hardware::Reboot()+0x74>)
 800838a:	60da      	str	r2, [r3, #12]
 800838c:	68dc      	ldr	r4, [r3, #12]
 800838e:	b904      	cbnz	r4, 8008392 <Hardware::Reboot()+0x4a>
 8008390:	e7fe      	b.n	8008390 <Hardware::Reboot()+0x48>
 8008392:	6802      	ldr	r2, [r0, #0]
 8008394:	695e      	ldr	r6, [r3, #20]
 8008396:	1b92      	subs	r2, r2, r6
 8008398:	4294      	cmp	r4, r2
 800839a:	d8f8      	bhi.n	800838e <Hardware::Reboot()+0x46>
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	615a      	str	r2, [r3, #20]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	2a01      	cmp	r2, #1
 80083a4:	f082 0401 	eor.w	r4, r2, #1
 80083a8:	611c      	str	r4, [r3, #16]
 80083aa:	bf14      	ite	ne
 80083ac:	610d      	strne	r5, [r1, #16]
 80083ae:	614a      	streq	r2, [r1, #20]
 80083b0:	e7ec      	b.n	800838c <Hardware::Reboot()+0x44>
 80083b2:	bf00      	nop
 80083b4:	200017dc 	ldrdcs	r1, [r0], -ip
 80083b8:	2000181c 	andcs	r1, r0, ip, lsl r8
 80083bc:	40011000 	andmi	r1, r1, r0

080083c0 <Hardware::WatchdogInit()>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	2102      	movs	r1, #2
 80083c4:	4604      	mov	r4, r0
 80083c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80083ca:	f000 fce7 	bl	8008d9c <fwdgt_config>
 80083ce:	2801      	cmp	r0, #1
 80083d0:	bf0c      	ite	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	2300      	movne	r3, #0
 80083d6:	7323      	strb	r3, [r4, #12]
 80083d8:	d103      	bne.n	80083e2 <Hardware::WatchdogInit()+0x22>
 80083da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083de:	f000 bccd 	b.w	8008d7c <fwdgt_enable>
 80083e2:	bd10      	pop	{r4, pc}

080083e4 <HwClock::HwClock()>:
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083ea:	e9c0 2200 	strd	r2, r2, [r0]
 80083ee:	7282      	strb	r2, [r0, #10]
 80083f0:	4a01      	ldr	r2, [pc, #4]	; (80083f8 <HwClock::HwClock()+0x14>)
 80083f2:	8101      	strh	r1, [r0, #8]
 80083f4:	6010      	str	r0, [r2, #0]
 80083f6:	4770      	bx	lr
 80083f8:	200017e4 	andcs	r1, r0, r4, ror #15

080083fc <HwClock::Print()>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	7a83      	ldrb	r3, [r0, #10]
 8008400:	4604      	mov	r4, r0
 8008402:	b08e      	sub	sp, #56	; 0x38
 8008404:	b92b      	cbnz	r3, 8008412 <HwClock::Print()+0x16>
 8008406:	4812      	ldr	r0, [pc, #72]	; (8008450 <HwClock::Print()+0x54>)
 8008408:	b00e      	add	sp, #56	; 0x38
 800840a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840e:	f7f9 bf6f 	b.w	80022f0 <puts>
 8008412:	7a43      	ldrb	r3, [r0, #9]
 8008414:	480f      	ldr	r0, [pc, #60]	; (8008454 <HwClock::Print()+0x58>)
 8008416:	2b03      	cmp	r3, #3
 8008418:	bf96      	itet	ls
 800841a:	4a0f      	ldrls	r2, [pc, #60]	; (8008458 <HwClock::Print()+0x5c>)
 800841c:	490f      	ldrhi	r1, [pc, #60]	; (800845c <HwClock::Print()+0x60>)
 800841e:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8008422:	f7f9 ff2d 	bl	8002280 <printf>
 8008426:	a905      	add	r1, sp, #20
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f905 	bl	8008638 <HwClock::RtcGet(rtc_time*)>
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	9b06      	ldr	r3, [sp, #24]
 8008436:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	4808      	ldr	r0, [pc, #32]	; (8008460 <HwClock::Print()+0x64>)
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8008446:	3201      	adds	r2, #1
 8008448:	f7f9 ff1a 	bl	8002280 <printf>
 800844c:	b00e      	add	sp, #56	; 0x38
 800844e:	bd10      	pop	{r4, pc}
 8008450:	0800c084 	stmdaeq	r0, {r2, r7, lr, pc}
 8008454:	0800b16c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp, pc}
 8008458:	0800c0dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, lr, pc}
 800845c:	0800b994 	stmdaeq	r0, {r2, r4, r7, r8, fp, ip, sp, pc}
 8008460:	0800c095 	stmdaeq	r0, {r0, r2, r4, r7, lr, pc}

08008464 <HwClock::HcToSys()>:
 8008464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008468:	7a83      	ldrb	r3, [r0, #10]
 800846a:	4604      	mov	r4, r0
 800846c:	b0a3      	sub	sp, #140	; 0x8c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d04c      	beq.n	800850c <HwClock::HcToSys()+0xa8>
 8008472:	4f2a      	ldr	r7, [pc, #168]	; (800851c <HwClock::HcToSys()+0xb8>)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	7b1e      	ldrb	r6, [r3, #12]
 8008478:	b136      	cbz	r6, 8008488 <HwClock::HcToSys()+0x24>
 800847a:	2200      	movs	r2, #0
 800847c:	2104      	movs	r1, #4
 800847e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008482:	731a      	strb	r2, [r3, #12]
 8008484:	f000 fc8a 	bl	8008d9c <fwdgt_config>
 8008488:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800848c:	a907      	add	r1, sp, #28
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f8d2 	bl	8008638 <HwClock::RtcGet(rtc_time*)>
 8008494:	2100      	movs	r1, #0
 8008496:	a801      	add	r0, sp, #4
 8008498:	f000 fa56 	bl	8008948 <gettimeofday>
 800849c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80084a0:	fb08 2903 	mla	r9, r8, r3, r2
 80084a4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 80084a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084aa:	a819      	add	r0, sp, #100	; 0x64
 80084ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80084ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b0:	931c      	str	r3, [sp, #112]	; 0x70
 80084b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b4:	931d      	str	r3, [sp, #116]	; 0x74
 80084b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b8:	931e      	str	r3, [sp, #120]	; 0x78
 80084ba:	f000 f9f9 	bl	80088b0 <mktime>
 80084be:	4605      	mov	r5, r0
 80084c0:	4620      	mov	r0, r4
 80084c2:	a910      	add	r1, sp, #64	; 0x40
 80084c4:	f000 f8b8 	bl	8008638 <HwClock::RtcGet(rtc_time*)>
 80084c8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80084cc:	fb08 3302 	mla	r3, r8, r2, r3
 80084d0:	4599      	cmp	r9, r3
 80084d2:	d0f5      	beq.n	80084c0 <HwClock::HcToSys()+0x5c>
 80084d4:	2100      	movs	r1, #0
 80084d6:	a803      	add	r0, sp, #12
 80084d8:	f000 fa36 	bl	8008948 <gettimeofday>
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	9a03      	ldr	r2, [sp, #12]
 80084e0:	9902      	ldr	r1, [sp, #8]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	9505      	str	r5, [sp, #20]
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	d113      	bne.n	8008512 <HwClock::HcToSys()+0xae>
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 80084f0:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80084f4:	2100      	movs	r1, #0
 80084f6:	a805      	add	r0, sp, #20
 80084f8:	9206      	str	r2, [sp, #24]
 80084fa:	f000 fa4f 	bl	800899c <settimeofday>
 80084fe:	4b08      	ldr	r3, [pc, #32]	; (8008520 <HwClock::HcToSys()+0xbc>)
 8008500:	6838      	ldr	r0, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	b10e      	cbz	r6, 800850c <HwClock::HcToSys()+0xa8>
 8008508:	f7ff ff5a 	bl	80083c0 <Hardware::WatchdogInit()>
 800850c:	b023      	add	sp, #140	; 0x8c
 800850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008512:	1a5a      	subs	r2, r3, r1
 8008514:	bf48      	it	mi
 8008516:	1aca      	submi	r2, r1, r3
 8008518:	e7ec      	b.n	80084f4 <HwClock::HcToSys()+0x90>
 800851a:	bf00      	nop
 800851c:	200017e0 	andcs	r1, r0, r0, ror #15
 8008520:	2000181c 	andcs	r1, r0, ip, lsl r8

08008524 <HwClock::Set(rtc_time const*)>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	7a86      	ldrb	r6, [r0, #10]
 8008528:	4605      	mov	r5, r0
 800852a:	460c      	mov	r4, r1
 800852c:	b090      	sub	sp, #64	; 0x40
 800852e:	2e00      	cmp	r6, #0
 8008530:	d02b      	beq.n	800858a <HwClock::Set(rtc_time const*)+0x66>
 8008532:	2100      	movs	r1, #0
 8008534:	a801      	add	r0, sp, #4
 8008536:	f000 fa07 	bl	8008948 <gettimeofday>
 800853a:	4621      	mov	r1, r4
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f873 	bl	8008628 <HwClock::RtcSet(rtc_time const*)>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	a807      	add	r0, sp, #28
 8008546:	9307      	str	r3, [sp, #28]
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	9308      	str	r3, [sp, #32]
 800854c:	68a3      	ldr	r3, [r4, #8]
 800854e:	9309      	str	r3, [sp, #36]	; 0x24
 8008550:	68e3      	ldr	r3, [r4, #12]
 8008552:	930a      	str	r3, [sp, #40]	; 0x28
 8008554:	6923      	ldr	r3, [r4, #16]
 8008556:	930b      	str	r3, [sp, #44]	; 0x2c
 8008558:	6963      	ldr	r3, [r4, #20]
 800855a:	2400      	movs	r4, #0
 800855c:	930c      	str	r3, [sp, #48]	; 0x30
 800855e:	940f      	str	r4, [sp, #60]	; 0x3c
 8008560:	f000 f9a6 	bl	80088b0 <mktime>
 8008564:	4621      	mov	r1, r4
 8008566:	9003      	str	r0, [sp, #12]
 8008568:	a805      	add	r0, sp, #20
 800856a:	f000 f9ed 	bl	8008948 <gettimeofday>
 800856e:	9906      	ldr	r1, [sp, #24]
 8008570:	9b02      	ldr	r3, [sp, #8]
 8008572:	a803      	add	r0, sp, #12
 8008574:	1aca      	subs	r2, r1, r3
 8008576:	bf42      	ittt	mi
 8008578:	1a5b      	submi	r3, r3, r1
 800857a:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 800857e:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8008582:	2100      	movs	r1, #0
 8008584:	9204      	str	r2, [sp, #16]
 8008586:	f000 fa09 	bl	800899c <settimeofday>
 800858a:	4630      	mov	r0, r6
 800858c:	b010      	add	sp, #64	; 0x40
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <rtc_configuration()>:
 8008590:	b510      	push	{r4, lr}
 8008592:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008596:	f000 fd5f 	bl	8009058 <rcu_osci_on>
 800859a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800859e:	f000 fd11 	bl	8008fc4 <rcu_osci_stab_wait>
 80085a2:	2801      	cmp	r0, #1
 80085a4:	4604      	mov	r4, r0
 80085a6:	d113      	bne.n	80085d0 <rtc_configuration()+0x40>
 80085a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80085ac:	f000 fcf0 	bl	8008f90 <rcu_rtc_clock_config>
 80085b0:	f640 000f 	movw	r0, #2063	; 0x80f
 80085b4:	f000 fcae 	bl	8008f14 <rcu_periph_clock_enable>
 80085b8:	f000 fdf6 	bl	80091a8 <rtc_register_sync_wait>
 80085bc:	f000 fdec 	bl	8009198 <rtc_lwoff_wait>
 80085c0:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80085c4:	f000 fdd6 	bl	8009174 <rtc_prescaler_set>
 80085c8:	f000 fde6 	bl	8009198 <rtc_lwoff_wait>
 80085cc:	4620      	mov	r0, r4
 80085ce:	bd10      	pop	{r4, pc}
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7fc      	b.n	80085ce <rtc_configuration()+0x3e>

080085d4 <HwClock::RtcProbe()>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	2001      	movs	r0, #1
 80085da:	f000 fae7 	bl	8008bac <bkp_data_read>
 80085de:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 80085e2:	42a8      	cmp	r0, r5
 80085e4:	d019      	beq.n	800861a <HwClock::RtcProbe()+0x46>
 80085e6:	f7ff ffd3 	bl	8008590 <rtc_configuration()>
 80085ea:	b908      	cbnz	r0, 80085f0 <HwClock::RtcProbe()+0x1c>
 80085ec:	72a0      	strb	r0, [r4, #10]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	f000 fdd2 	bl	8009198 <rtc_lwoff_wait>
 80085f4:	2000      	movs	r0, #0
 80085f6:	f000 f9e9 	bl	80089cc <time>
 80085fa:	f000 fdab 	bl	8009154 <rtc_counter_set>
 80085fe:	f000 fdcb 	bl	8009198 <rtc_lwoff_wait>
 8008602:	4629      	mov	r1, r5
 8008604:	2001      	movs	r0, #1
 8008606:	f000 fabb 	bl	8008b80 <bkp_data_write>
 800860a:	2303      	movs	r3, #3
 800860c:	7263      	strb	r3, [r4, #9]
 800860e:	2301      	movs	r3, #1
 8008610:	72a3      	strb	r3, [r4, #10]
 8008612:	4b04      	ldr	r3, [pc, #16]	; (8008624 <HwClock::RtcProbe()+0x50>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	e7e9      	b.n	80085ee <HwClock::RtcProbe()+0x1a>
 800861a:	f000 fdc5 	bl	80091a8 <rtc_register_sync_wait>
 800861e:	f000 fdbb 	bl	8009198 <rtc_lwoff_wait>
 8008622:	e7f2      	b.n	800860a <HwClock::RtcProbe()+0x36>
 8008624:	2000181c 	andcs	r1, r0, ip, lsl r8

08008628 <HwClock::RtcSet(rtc_time const*)>:
 8008628:	b508      	push	{r3, lr}
 800862a:	4608      	mov	r0, r1
 800862c:	f000 f940 	bl	80088b0 <mktime>
 8008630:	f000 fd90 	bl	8009154 <rtc_counter_set>
 8008634:	2001      	movs	r0, #1
 8008636:	bd08      	pop	{r3, pc}

08008638 <HwClock::RtcGet(rtc_time*)>:
 8008638:	b513      	push	{r0, r1, r4, lr}
 800863a:	460c      	mov	r4, r1
 800863c:	f000 fdc2 	bl	80091c4 <rtc_counter_get>
 8008640:	9001      	str	r0, [sp, #4]
 8008642:	a801      	add	r0, sp, #4
 8008644:	f000 f8f0 	bl	8008828 <localtime>
 8008648:	1e61      	subs	r1, r4, #1
 800864a:	f100 0324 	add.w	r3, r0, #36	; 0x24
 800864e:	4298      	cmp	r0, r3
 8008650:	d102      	bne.n	8008658 <HwClock::RtcGet(rtc_time*)+0x20>
 8008652:	2001      	movs	r0, #1
 8008654:	b002      	add	sp, #8
 8008656:	bd10      	pop	{r4, pc}
 8008658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800865c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008660:	e7f5      	b.n	800864e <HwClock::RtcGet(rtc_time*)+0x16>

08008662 <operator delete(void*)>:
 8008662:	f000 b851 	b.w	8008708 <free>

08008666 <operator delete[](void*)>:
 8008666:	f000 b84f 	b.w	8008708 <free>

0800866a <operator new(unsigned int)>:
 800866a:	f000 b803 	b.w	8008674 <malloc>

0800866e <operator new[](unsigned int)>:
 800866e:	f000 b801 	b.w	8008674 <malloc>
	...

08008674 <malloc>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4604      	mov	r4, r0
 8008678:	4601      	mov	r1, r0
 800867a:	481c      	ldr	r0, [pc, #112]	; (80086ec <malloc+0x78>)
 800867c:	f7f9 fe00 	bl	8002280 <printf>
 8008680:	b17c      	cbz	r4, 80086a2 <malloc+0x2e>
 8008682:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <malloc+0x7c>)
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	b978      	cbnz	r0, 80086a8 <malloc+0x34>
 8008688:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <malloc+0x80>)
 800868a:	f104 031b 	add.w	r3, r4, #27
 800868e:	6811      	ldr	r1, [r2, #0]
 8008690:	4819      	ldr	r0, [pc, #100]	; (80086f8 <malloc+0x84>)
 8008692:	f023 030f 	bic.w	r3, r3, #15
 8008696:	440b      	add	r3, r1
 8008698:	4283      	cmp	r3, r0
 800869a:	d921      	bls.n	80086e0 <malloc+0x6c>
 800869c:	4817      	ldr	r0, [pc, #92]	; (80086fc <malloc+0x88>)
 800869e:	f7f9 fdef 	bl	8002280 <printf>
 80086a2:	2500      	movs	r5, #0
 80086a4:	4628      	mov	r0, r5
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	4284      	cmp	r4, r0
 80086aa:	d80a      	bhi.n	80086c2 <malloc+0x4e>
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	6899      	ldr	r1, [r3, #8]
 80086b0:	3201      	adds	r2, #1
 80086b2:	428a      	cmp	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	d900      	bls.n	80086ba <malloc+0x46>
 80086b8:	609a      	str	r2, [r3, #8]
 80086ba:	68d9      	ldr	r1, [r3, #12]
 80086bc:	b919      	cbnz	r1, 80086c6 <malloc+0x52>
 80086be:	4604      	mov	r4, r0
 80086c0:	e7e2      	b.n	8008688 <malloc+0x14>
 80086c2:	3310      	adds	r3, #16
 80086c4:	e7de      	b.n	8008684 <malloc+0x10>
 80086c6:	4604      	mov	r4, r0
 80086c8:	688a      	ldr	r2, [r1, #8]
 80086ca:	60da      	str	r2, [r3, #12]
 80086cc:	2300      	movs	r3, #0
 80086ce:	f101 050c 	add.w	r5, r1, #12
 80086d2:	608b      	str	r3, [r1, #8]
 80086d4:	4622      	mov	r2, r4
 80086d6:	462b      	mov	r3, r5
 80086d8:	4809      	ldr	r0, [pc, #36]	; (8008700 <malloc+0x8c>)
 80086da:	f7f9 fdd1 	bl	8002280 <printf>
 80086de:	e7e1      	b.n	80086a4 <malloc+0x30>
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <malloc+0x90>)
 80086e4:	e9c1 3400 	strd	r3, r4, [r1]
 80086e8:	e7f0      	b.n	80086cc <malloc+0x58>
 80086ea:	bf00      	nop
 80086ec:	0800c0ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, lr, pc}
 80086f0:	20000010 	andcs	r0, r0, r0, lsl r0
 80086f4:	2000000c 	andcs	r0, r0, ip
 80086f8:	2000b000 	andcs	fp, r0, r0
 80086fc:	0800c0f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, lr, pc}
 8008700:	0800c114 	stmdaeq	r0, {r2, r4, r8, lr, pc}
 8008704:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08008708 <free>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4604      	mov	r4, r0
 800870c:	b1c8      	cbz	r0, 8008742 <free+0x3a>
 800870e:	f1a0 050c 	sub.w	r5, r0, #12
 8008712:	4602      	mov	r2, r0
 8008714:	4629      	mov	r1, r5
 8008716:	480c      	ldr	r0, [pc, #48]	; (8008748 <free+0x40>)
 8008718:	f7f9 fdb2 	bl	8002280 <printf>
 800871c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <free+0x44>)
 8008722:	429a      	cmp	r2, r3
 8008724:	d10d      	bne.n	8008742 <free+0x3a>
 8008726:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <free+0x48>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	b152      	cbz	r2, 8008742 <free+0x3a>
 800872c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8008730:	4291      	cmp	r1, r2
 8008732:	d107      	bne.n	8008744 <free+0x3c>
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	f844 2c04 	str.w	r2, [r4, #-4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	60dd      	str	r5, [r3, #12]
 800873e:	3a01      	subs	r2, #1
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	3310      	adds	r3, #16
 8008746:	e7ef      	b.n	8008728 <free+0x20>
 8008748:	0800c13f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, lr, pc}
 800874c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8008750:	20000010 	andcs	r0, r0, r0, lsl r0

08008754 <memcpy>:
 8008754:	b510      	push	{r4, lr}
 8008756:	1e43      	subs	r3, r0, #1
 8008758:	440a      	add	r2, r1
 800875a:	4291      	cmp	r1, r2
 800875c:	d100      	bne.n	8008760 <memcpy+0xc>
 800875e:	bd10      	pop	{r4, pc}
 8008760:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008768:	e7f7      	b.n	800875a <memcpy+0x6>

0800876a <memmove>:
 800876a:	4288      	cmp	r0, r1
 800876c:	b510      	push	{r4, lr}
 800876e:	eb01 0302 	add.w	r3, r1, r2
 8008772:	d208      	bcs.n	8008786 <memmove+0x1c>
 8008774:	1e42      	subs	r2, r0, #1
 8008776:	4299      	cmp	r1, r3
 8008778:	d100      	bne.n	800877c <memmove+0x12>
 800877a:	bd10      	pop	{r4, pc}
 800877c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008780:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008784:	e7f7      	b.n	8008776 <memmove+0xc>
 8008786:	4601      	mov	r1, r0
 8008788:	4402      	add	r2, r0
 800878a:	428a      	cmp	r2, r1
 800878c:	d0f5      	beq.n	800877a <memmove+0x10>
 800878e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008796:	e7f8      	b.n	800878a <memmove+0x20>

08008798 <memset>:
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	b1c2      	cbz	r2, 80087ce <memset+0x36>
 800879c:	4603      	mov	r3, r0
 800879e:	b2c9      	uxtb	r1, r1
 80087a0:	075c      	lsls	r4, r3, #29
 80087a2:	d110      	bne.n	80087c6 <memset+0x2e>
 80087a4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80087a8:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80087ac:	463d      	mov	r5, r7
 80087ae:	461e      	mov	r6, r3
 80087b0:	f022 0407 	bic.w	r4, r2, #7
 80087b4:	441c      	add	r4, r3
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d10a      	bne.n	80087d0 <memset+0x38>
 80087ba:	4413      	add	r3, r2
 80087bc:	429c      	cmp	r4, r3
 80087be:	d006      	beq.n	80087ce <memset+0x36>
 80087c0:	f804 1b01 	strb.w	r1, [r4], #1
 80087c4:	e7fa      	b.n	80087bc <memset+0x24>
 80087c6:	3a01      	subs	r2, #1
 80087c8:	f803 1b01 	strb.w	r1, [r3], #1
 80087cc:	d1e8      	bne.n	80087a0 <memset+0x8>
 80087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d0:	f846 7b08 	str.w	r7, [r6], #8
 80087d4:	f846 5c04 	str.w	r5, [r6, #-4]
 80087d8:	e7ed      	b.n	80087b6 <memset+0x1e>

080087da <isleapyear>:
 80087da:	2264      	movs	r2, #100	; 0x64
 80087dc:	fb90 f3f2 	sdiv	r3, r0, r2
 80087e0:	fb02 0313 	mls	r3, r2, r3, r0
 80087e4:	b94b      	cbnz	r3, 80087fa <isleapyear+0x20>
 80087e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80087ea:	fb90 f2f3 	sdiv	r2, r0, r3
 80087ee:	fb03 0012 	mls	r0, r3, r2, r0
 80087f2:	fab0 f080 	clz	r0, r0
 80087f6:	0940      	lsrs	r0, r0, #5
 80087f8:	4770      	bx	lr
 80087fa:	f010 0f03 	tst.w	r0, #3
 80087fe:	bf0c      	ite	eq
 8008800:	2001      	moveq	r0, #1
 8008802:	2000      	movne	r0, #0
 8008804:	4770      	bx	lr
	...

08008808 <getdaysofmonth>:
 8008808:	b510      	push	{r4, lr}
 800880a:	4604      	mov	r4, r0
 800880c:	2c01      	cmp	r4, #1
 800880e:	4608      	mov	r0, r1
 8008810:	d102      	bne.n	8008818 <getdaysofmonth+0x10>
 8008812:	f7ff ffe2 	bl	80087da <isleapyear>
 8008816:	b918      	cbnz	r0, 8008820 <getdaysofmonth+0x18>
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <getdaysofmonth+0x1c>)
 800881a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800881e:	bd10      	pop	{r4, pc}
 8008820:	201d      	movs	r0, #29
 8008822:	e7fc      	b.n	800881e <getdaysofmonth+0x16>
 8008824:	0800c168 	stmdaeq	r0, {r3, r5, r6, r8, lr, pc}

08008828 <localtime>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	2800      	cmp	r0, #0
 800882c:	d03c      	beq.n	80088a8 <localtime+0x80>
 800882e:	213c      	movs	r1, #60	; 0x3c
 8008830:	6803      	ldr	r3, [r0, #0]
 8008832:	4d1e      	ldr	r5, [pc, #120]	; (80088ac <localtime+0x84>)
 8008834:	fb93 f2f1 	sdiv	r2, r3, r1
 8008838:	fb01 3312 	mls	r3, r1, r2, r3
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	fb92 f3f1 	sdiv	r3, r2, r1
 8008842:	fb01 2213 	mls	r2, r1, r3, r2
 8008846:	606a      	str	r2, [r5, #4]
 8008848:	2218      	movs	r2, #24
 800884a:	fb93 f4f2 	sdiv	r4, r3, r2
 800884e:	fb02 3314 	mls	r3, r2, r4, r3
 8008852:	60ab      	str	r3, [r5, #8]
 8008854:	2307      	movs	r3, #7
 8008856:	1d22      	adds	r2, r4, #4
 8008858:	fb92 f3f3 	sdiv	r3, r2, r3
 800885c:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008860:	f240 166d 	movw	r6, #365	; 0x16d
 8008864:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008868:	1ad2      	subs	r2, r2, r3
 800886a:	61aa      	str	r2, [r5, #24]
 800886c:	4608      	mov	r0, r1
 800886e:	f7ff ffb4 	bl	80087da <isleapyear>
 8008872:	2800      	cmp	r0, #0
 8008874:	bf14      	ite	ne
 8008876:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 800887a:	4633      	moveq	r3, r6
 800887c:	429c      	cmp	r4, r3
 800887e:	db02      	blt.n	8008886 <localtime+0x5e>
 8008880:	1ae4      	subs	r4, r4, r3
 8008882:	3101      	adds	r1, #1
 8008884:	e7f2      	b.n	800886c <localtime+0x44>
 8008886:	2600      	movs	r6, #0
 8008888:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 800888c:	616b      	str	r3, [r5, #20]
 800888e:	61ec      	str	r4, [r5, #28]
 8008890:	4630      	mov	r0, r6
 8008892:	f7ff ffb9 	bl	8008808 <getdaysofmonth>
 8008896:	4284      	cmp	r4, r0
 8008898:	db02      	blt.n	80088a0 <localtime+0x78>
 800889a:	1a24      	subs	r4, r4, r0
 800889c:	3601      	adds	r6, #1
 800889e:	e7f7      	b.n	8008890 <localtime+0x68>
 80088a0:	3401      	adds	r4, #1
 80088a2:	4802      	ldr	r0, [pc, #8]	; (80088ac <localtime+0x84>)
 80088a4:	612e      	str	r6, [r5, #16]
 80088a6:	60ec      	str	r4, [r5, #12]
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	bf00      	nop
 80088ac:	200017e8 	andcs	r1, r0, r8, ror #15

080088b0 <mktime>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	4604      	mov	r4, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d043      	beq.n	8008942 <mktime+0x92>
 80088ba:	6941      	ldr	r1, [r0, #20]
 80088bc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80088c0:	2b45      	cmp	r3, #69	; 0x45
 80088c2:	d83e      	bhi.n	8008942 <mktime+0x92>
 80088c4:	2600      	movs	r6, #0
 80088c6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80088ca:	f240 186d 	movw	r8, #365	; 0x16d
 80088ce:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80088d2:	42af      	cmp	r7, r5
 80088d4:	da24      	bge.n	8008920 <mktime+0x70>
 80088d6:	6927      	ldr	r7, [r4, #16]
 80088d8:	2f0b      	cmp	r7, #11
 80088da:	d832      	bhi.n	8008942 <mktime+0x92>
 80088dc:	2500      	movs	r5, #0
 80088de:	42af      	cmp	r7, r5
 80088e0:	d129      	bne.n	8008936 <mktime+0x86>
 80088e2:	68e5      	ldr	r5, [r4, #12]
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	dd2c      	ble.n	8008942 <mktime+0x92>
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ff8d 	bl	8008808 <getdaysofmonth>
 80088ee:	4285      	cmp	r5, r0
 80088f0:	dc27      	bgt.n	8008942 <mktime+0x92>
 80088f2:	2318      	movs	r3, #24
 80088f4:	3d01      	subs	r5, #1
 80088f6:	4435      	add	r5, r6
 80088f8:	435d      	muls	r5, r3
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	2b17      	cmp	r3, #23
 80088fe:	d820      	bhi.n	8008942 <mktime+0x92>
 8008900:	213c      	movs	r1, #60	; 0x3c
 8008902:	442b      	add	r3, r5
 8008904:	fb01 f203 	mul.w	r2, r1, r3
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	2b3b      	cmp	r3, #59	; 0x3b
 800890c:	d819      	bhi.n	8008942 <mktime+0x92>
 800890e:	6820      	ldr	r0, [r4, #0]
 8008910:	4413      	add	r3, r2
 8008912:	283b      	cmp	r0, #59	; 0x3b
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	d813      	bhi.n	8008942 <mktime+0x92>
 800891a:	4418      	add	r0, r3
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008920:	4628      	mov	r0, r5
 8008922:	f7ff ff5a 	bl	80087da <isleapyear>
 8008926:	2800      	cmp	r0, #0
 8008928:	bf14      	ite	ne
 800892a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 800892e:	4643      	moveq	r3, r8
 8008930:	3501      	adds	r5, #1
 8008932:	441e      	add	r6, r3
 8008934:	e7cd      	b.n	80088d2 <mktime+0x22>
 8008936:	4628      	mov	r0, r5
 8008938:	f7ff ff66 	bl	8008808 <getdaysofmonth>
 800893c:	3501      	adds	r5, #1
 800893e:	4406      	add	r6, r0
 8008940:	e7cd      	b.n	80088de <mktime+0x2e>
 8008942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008946:	e7e9      	b.n	800891c <mktime+0x6c>

08008948 <gettimeofday>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4b10      	ldr	r3, [pc, #64]	; (800898c <gettimeofday+0x44>)
 800894c:	4a10      	ldr	r2, [pc, #64]	; (8008990 <gettimeofday+0x48>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6814      	ldr	r4, [r2, #0]
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008958:	429c      	cmp	r4, r3
 800895a:	bf2c      	ite	cs
 800895c:	1ae4      	subcs	r4, r4, r3
 800895e:	1b1c      	subcc	r4, r3, r4
 8008960:	4354      	muls	r4, r2
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <gettimeofday+0x4c>)
 8008964:	4605      	mov	r5, r0
 8008966:	e9d3 2100 	ldrd	r2, r1, [r3]
 800896a:	18a4      	adds	r4, r4, r2
 800896c:	f141 0100 	adc.w	r1, r1, #0
 8008970:	e9c3 4100 	strd	r4, r1, [r3]
 8008974:	4620      	mov	r0, r4
 8008976:	2300      	movs	r3, #0
 8008978:	4a07      	ldr	r2, [pc, #28]	; (8008998 <gettimeofday+0x50>)
 800897a:	f7f7 fde3 	bl	8000544 <__aeabi_uldivmod>
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <gettimeofday+0x50>)
 8008980:	6028      	str	r0, [r5, #0]
 8008982:	fb03 4410 	mls	r4, r3, r0, r4
 8008986:	2000      	movs	r0, #0
 8008988:	606c      	str	r4, [r5, #4]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	2000181c 	andcs	r1, r0, ip, lsl r8
 8008990:	20001818 	andcs	r1, r0, r8, lsl r8
 8008994:	20001810 	andcs	r1, r0, r0, lsl r8
 8008998:	000f4240 	andeq	r4, pc, r0, asr #4

0800899c <settimeofday>:
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <settimeofday+0x20>)
 800899e:	b510      	push	{r4, lr}
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <settimeofday+0x24>)
 80089a4:	6804      	ldr	r4, [r0, #0]
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	6843      	ldr	r3, [r0, #4]
 80089aa:	4806      	ldr	r0, [pc, #24]	; (80089c4 <settimeofday+0x28>)
 80089ac:	17da      	asrs	r2, r3, #31
 80089ae:	fbc4 3200 	smlal	r3, r2, r4, r0
 80089b2:	4905      	ldr	r1, [pc, #20]	; (80089c8 <settimeofday+0x2c>)
 80089b4:	2000      	movs	r0, #0
 80089b6:	e9c1 3200 	strd	r3, r2, [r1]
 80089ba:	bd10      	pop	{r4, pc}
 80089bc:	2000181c 	andcs	r1, r0, ip, lsl r8
 80089c0:	20001818 	andcs	r1, r0, r8, lsl r8
 80089c4:	000f4240 	andeq	r4, pc, r0, asr #4
 80089c8:	20001810 	andcs	r1, r0, r0, lsl r8

080089cc <time>:
 80089cc:	b513      	push	{r0, r1, r4, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	2100      	movs	r1, #0
 80089d2:	4668      	mov	r0, sp
 80089d4:	f7ff ffb8 	bl	8008948 <gettimeofday>
 80089d8:	9800      	ldr	r0, [sp, #0]
 80089da:	b104      	cbz	r4, 80089de <time+0x12>
 80089dc:	6020      	str	r0, [r4, #0]
 80089de:	b002      	add	sp, #8
 80089e0:	bd10      	pop	{r4, pc}
	...

080089e4 <uart0_init>:
 80089e4:	2301      	movs	r3, #1
 80089e6:	b507      	push	{r0, r1, r2, lr}
 80089e8:	2208      	movs	r2, #8
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80089f0:	2300      	movs	r3, #0
 80089f2:	4803      	ldr	r0, [pc, #12]	; (8008a00 <uart0_init+0x1c>)
 80089f4:	f001 f85a 	bl	8009aac <gd32_uart_begin>
 80089f8:	b003      	add	sp, #12
 80089fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80089fe:	bf00      	nop
 8008a00:	40013800 	andmi	r3, r1, r0, lsl #16

08008a04 <uart0_putc>:
 8008a04:	280a      	cmp	r0, #10
 8008a06:	b538      	push	{r3, r4, r5, lr}
 8008a08:	4604      	mov	r4, r0
 8008a0a:	d10a      	bne.n	8008a22 <uart0_putc+0x1e>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <uart0_putc+0x38>)
 8008a0e:	2107      	movs	r1, #7
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 fd7d 	bl	8009510 <usart_flag_get>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0f9      	beq.n	8008a0e <uart0_putc+0xa>
 8008a1a:	220d      	movs	r2, #13
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <uart0_putc+0x3c>)
 8008a1e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008a22:	4d06      	ldr	r5, [pc, #24]	; (8008a3c <uart0_putc+0x38>)
 8008a24:	2107      	movs	r1, #7
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 fd72 	bl	8009510 <usart_flag_get>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d0f9      	beq.n	8008a24 <uart0_putc+0x20>
 8008a30:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <uart0_putc+0x3c>)
 8008a32:	b2e4      	uxtb	r4, r4
 8008a34:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8008a38:	bd38      	pop	{r3, r4, r5, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40013800 	andmi	r3, r1, r0, lsl #16
 8008a40:	40013000 	andmi	r3, r1, r0

08008a44 <uart0_puts>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	1e44      	subs	r4, r0, #1
 8008a48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008a4c:	b903      	cbnz	r3, 8008a50 <uart0_puts+0xc>
 8008a4e:	bd10      	pop	{r4, pc}
 8008a50:	2b0a      	cmp	r3, #10
 8008a52:	d102      	bne.n	8008a5a <uart0_puts+0x16>
 8008a54:	200d      	movs	r0, #13
 8008a56:	f7ff ffd5 	bl	8008a04 <uart0_putc>
 8008a5a:	7820      	ldrb	r0, [r4, #0]
 8008a5c:	f7ff ffd2 	bl	8008a04 <uart0_putc>
 8008a60:	e7f2      	b.n	8008a48 <uart0_puts+0x4>
	...

08008a64 <systick_config>:
 8008a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a68:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <systick_config+0x34>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a70:	3b01      	subs	r3, #1
 8008a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a76:	d20d      	bcs.n	8008a94 <systick_config+0x30>
 8008a78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008a7c:	21f0      	movs	r1, #240	; 0xf0
 8008a7e:	6153      	str	r3, [r2, #20]
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <systick_config+0x38>)
 8008a82:	2007      	movs	r0, #7
 8008a84:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6191      	str	r1, [r2, #24]
 8008a8c:	6110      	str	r0, [r2, #16]
 8008a8e:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8008a92:	4770      	bx	lr
 8008a94:	e7fe      	b.n	8008a94 <systick_config+0x30>
 8008a96:	bf00      	nop
 8008a98:	200000e0 	andcs	r0, r0, r0, ror #1
 8008a9c:	e000ed00 	and	lr, r0, r0, lsl #26

08008aa0 <SysTick_Handler>:
 8008aa0:	4a02      	ldr	r2, [pc, #8]	; (8008aac <SysTick_Handler+0xc>)
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	2000181c 	andcs	r1, r0, ip, lsl r8

08008ab0 <SystemInit>:
 8008ab0:	4b30      	ldr	r3, [pc, #192]	; (8008b74 <SystemInit+0xc4>)
 8008ab2:	4931      	ldr	r1, [pc, #196]	; (8008b78 <SystemInit+0xc8>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	f022 0203 	bic.w	r2, r2, #3
 8008ac2:	605a      	str	r2, [r3, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	400a      	ands	r2, r1
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	6858      	ldr	r0, [r3, #4]
 8008acc:	4a2b      	ldr	r2, [pc, #172]	; (8008b7c <SystemInit+0xcc>)
 8008ace:	4002      	ands	r2, r0
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	400a      	ands	r2, r1
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	f022 620f 	bic.w	r2, r2, #149946368	; 0x8f00000
 8008ae6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008aea:	605a      	str	r2, [r3, #4]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	400a      	ands	r2, r1
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	0389      	lsls	r1, r1, #14
 8008b08:	d401      	bmi.n	8008b0e <SystemInit+0x5e>
 8008b0a:	3a01      	subs	r2, #1
 8008b0c:	d1fa      	bne.n	8008b04 <SystemInit+0x54>
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	0390      	lsls	r0, r2, #14
 8008b12:	d400      	bmi.n	8008b16 <SystemInit+0x66>
 8008b14:	e7fe      	b.n	8008b14 <SystemInit+0x64>
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	605a      	str	r2, [r3, #4]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	605a      	str	r2, [r3, #4]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008b2c:	605a      	str	r2, [r3, #4]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008b34:	605a      	str	r2, [r3, #4]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 8008b3c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	f042 6202 	orr.w	r2, r2, #136314880	; 0x8200000
 8008b48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	0191      	lsls	r1, r2, #6
 8008b5a:	d5fc      	bpl.n	8008b56 <SystemInit+0xa6>
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	f022 0203 	bic.w	r2, r2, #3
 8008b62:	605a      	str	r2, [r3, #4]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	f042 0202 	orr.w	r2, r2, #2
 8008b6a:	605a      	str	r2, [r3, #4]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	0712      	lsls	r2, r2, #28
 8008b70:	d5fc      	bpl.n	8008b6c <SystemInit+0xbc>
 8008b72:	4770      	bx	lr
 8008b74:	40021000 	andmi	r1, r2, r0
 8008b78:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8008b7c:	e8ff000c 	ldm	pc!, {r2, r3}^	; <UNPREDICTABLE>

08008b80 <bkp_data_write>:
 8008b80:	f1a0 030b 	sub.w	r3, r0, #11
 8008b84:	2b1f      	cmp	r3, #31
 8008b86:	d804      	bhi.n	8008b92 <bkp_data_write+0x12>
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <bkp_data_write+0x28>)
 8008b8a:	4403      	add	r3, r0
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	8019      	strh	r1, [r3, #0]
 8008b90:	4770      	bx	lr
 8008b92:	1e43      	subs	r3, r0, #1
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	bf9f      	itttt	ls
 8008b98:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8008b9c:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8008ba0:	0080      	lslls	r0, r0, #2
 8008ba2:	8001      	strhls	r1, [r0, #0]
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	10001b05 	andne	r1, r0, r5, lsl #22

08008bac <bkp_data_read>:
 8008bac:	f1a0 030b 	sub.w	r3, r0, #11
 8008bb0:	2b1f      	cmp	r3, #31
 8008bb2:	d805      	bhi.n	8008bc0 <bkp_data_read+0x14>
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <bkp_data_read+0x2c>)
 8008bb6:	4403      	add	r3, r0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	8818      	ldrh	r0, [r3, #0]
 8008bbc:	b280      	uxth	r0, r0
 8008bbe:	4770      	bx	lr
 8008bc0:	1e43      	subs	r3, r0, #1
 8008bc2:	2b09      	cmp	r3, #9
 8008bc4:	d806      	bhi.n	8008bd4 <bkp_data_read+0x28>
 8008bc6:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008bca:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008bce:	0080      	lsls	r0, r0, #2
 8008bd0:	8800      	ldrh	r0, [r0, #0]
 8008bd2:	e7f3      	b.n	8008bbc <bkp_data_read+0x10>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4770      	bx	lr
 8008bd8:	10001b05 	andne	r1, r0, r5, lsl #22

08008bdc <dma_deinit>:
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <dma_deinit+0x34>)
 8008bde:	4298      	cmp	r0, r3
 8008be0:	d102      	bne.n	8008be8 <dma_deinit+0xc>
 8008be2:	2904      	cmp	r1, #4
 8008be4:	d900      	bls.n	8008be8 <dma_deinit+0xc>
 8008be6:	e7fe      	b.n	8008be6 <dma_deinit+0xa>
 8008be8:	2314      	movs	r3, #20
 8008bea:	fb03 0301 	mla	r3, r3, r1, r0
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	0089      	lsls	r1, r1, #2
 8008bf2:	f022 0201 	bic.w	r2, r2, #1
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	611a      	str	r2, [r3, #16]
 8008c00:	615a      	str	r2, [r3, #20]
 8008c02:	230f      	movs	r3, #15
 8008c04:	6842      	ldr	r2, [r0, #4]
 8008c06:	408b      	lsls	r3, r1
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	6043      	str	r3, [r0, #4]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40020400 	andmi	r0, r2, r0, lsl #8

08008c14 <dma_struct_para_init>:
 8008c14:	2300      	movs	r3, #0
 8008c16:	e9c0 3300 	strd	r3, r3, [r0]
 8008c1a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c22:	8303      	strh	r3, [r0, #24]
 8008c24:	7683      	strb	r3, [r0, #26]
 8008c26:	4770      	bx	lr

08008c28 <dma_init>:
 8008c28:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <dma_init+0x70>)
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	4298      	cmp	r0, r3
 8008c2e:	d102      	bne.n	8008c36 <dma_init+0xe>
 8008c30:	2904      	cmp	r1, #4
 8008c32:	d900      	bls.n	8008c36 <dma_init+0xe>
 8008c34:	e7fe      	b.n	8008c34 <dma_init+0xc>
 8008c36:	2314      	movs	r3, #20
 8008c38:	fb03 0101 	mla	r1, r3, r1, r0
 8008c3c:	6813      	ldr	r3, [r2, #0]
 8008c3e:	610b      	str	r3, [r1, #16]
 8008c40:	6893      	ldr	r3, [r2, #8]
 8008c42:	614b      	str	r3, [r1, #20]
 8008c44:	8a13      	ldrh	r3, [r2, #16]
 8008c46:	60cb      	str	r3, [r1, #12]
 8008c48:	68d4      	ldr	r4, [r2, #12]
 8008c4a:	6853      	ldr	r3, [r2, #4]
 8008c4c:	6888      	ldr	r0, [r1, #8]
 8008c4e:	4323      	orrs	r3, r4
 8008c50:	6954      	ldr	r4, [r2, #20]
 8008c52:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008c56:	4323      	orrs	r3, r4
 8008c58:	4303      	orrs	r3, r0
 8008c5a:	608b      	str	r3, [r1, #8]
 8008c5c:	7e13      	ldrb	r3, [r2, #24]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	688b      	ldr	r3, [r1, #8]
 8008c62:	bf0c      	ite	eq
 8008c64:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008c68:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008c6c:	608b      	str	r3, [r1, #8]
 8008c6e:	7e53      	ldrb	r3, [r2, #25]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	688b      	ldr	r3, [r1, #8]
 8008c74:	bf0c      	ite	eq
 8008c76:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008c7a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008c7e:	608b      	str	r3, [r1, #8]
 8008c80:	7e93      	ldrb	r3, [r2, #26]
 8008c82:	b923      	cbnz	r3, 8008c8e <dma_init+0x66>
 8008c84:	688b      	ldr	r3, [r1, #8]
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	608b      	str	r3, [r1, #8]
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	688b      	ldr	r3, [r1, #8]
 8008c90:	f043 0310 	orr.w	r3, r3, #16
 8008c94:	e7f9      	b.n	8008c8a <dma_init+0x62>
 8008c96:	bf00      	nop
 8008c98:	40020400 	andmi	r0, r2, r0, lsl #8

08008c9c <dma_circulation_disable>:
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <dma_circulation_disable+0x1c>)
 8008c9e:	4298      	cmp	r0, r3
 8008ca0:	d102      	bne.n	8008ca8 <dma_circulation_disable+0xc>
 8008ca2:	2904      	cmp	r1, #4
 8008ca4:	d900      	bls.n	8008ca8 <dma_circulation_disable+0xc>
 8008ca6:	e7fe      	b.n	8008ca6 <dma_circulation_disable+0xa>
 8008ca8:	2314      	movs	r3, #20
 8008caa:	4359      	muls	r1, r3
 8008cac:	3008      	adds	r0, #8
 8008cae:	580b      	ldr	r3, [r1, r0]
 8008cb0:	f023 0320 	bic.w	r3, r3, #32
 8008cb4:	500b      	str	r3, [r1, r0]
 8008cb6:	4770      	bx	lr
 8008cb8:	40020400 	andmi	r0, r2, r0, lsl #8

08008cbc <dma_memory_to_memory_disable>:
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <dma_memory_to_memory_disable+0x1c>)
 8008cbe:	4298      	cmp	r0, r3
 8008cc0:	d102      	bne.n	8008cc8 <dma_memory_to_memory_disable+0xc>
 8008cc2:	2904      	cmp	r1, #4
 8008cc4:	d900      	bls.n	8008cc8 <dma_memory_to_memory_disable+0xc>
 8008cc6:	e7fe      	b.n	8008cc6 <dma_memory_to_memory_disable+0xa>
 8008cc8:	2314      	movs	r3, #20
 8008cca:	4359      	muls	r1, r3
 8008ccc:	3008      	adds	r0, #8
 8008cce:	580b      	ldr	r3, [r1, r0]
 8008cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd4:	500b      	str	r3, [r1, r0]
 8008cd6:	4770      	bx	lr
 8008cd8:	40020400 	andmi	r0, r2, r0, lsl #8

08008cdc <fmc_bank0_unlock>:
 8008cdc:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <fmc_bank0_unlock+0x14>)
 8008cde:	691a      	ldr	r2, [r3, #16]
 8008ce0:	0612      	lsls	r2, r2, #24
 8008ce2:	bf41      	itttt	mi
 8008ce4:	4a03      	ldrmi	r2, [pc, #12]	; (8008cf4 <fmc_bank0_unlock+0x18>)
 8008ce6:	605a      	strmi	r2, [r3, #4]
 8008ce8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008cec:	605a      	strmi	r2, [r3, #4]
 8008cee:	4770      	bx	lr
 8008cf0:	40022000 	andmi	r2, r2, r0
 8008cf4:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008cf8 <fmc_bank1_unlock>:
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <fmc_bank1_unlock+0x14>)
 8008cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfc:	0612      	lsls	r2, r2, #24
 8008cfe:	bf41      	itttt	mi
 8008d00:	4a03      	ldrmi	r2, [pc, #12]	; (8008d10 <fmc_bank1_unlock+0x18>)
 8008d02:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008d04:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008d08:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008d0a:	4770      	bx	lr
 8008d0c:	40022000 	andmi	r2, r2, r0
 8008d10:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008d14 <fmc_bank0_lock>:
 8008d14:	4a02      	ldr	r2, [pc, #8]	; (8008d20 <fmc_bank0_lock+0xc>)
 8008d16:	6913      	ldr	r3, [r2, #16]
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	6113      	str	r3, [r2, #16]
 8008d1e:	4770      	bx	lr
 8008d20:	40022000 	andmi	r2, r2, r0

08008d24 <fmc_bank1_lock>:
 8008d24:	4a02      	ldr	r2, [pc, #8]	; (8008d30 <fmc_bank1_lock+0xc>)
 8008d26:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2c:	6513      	str	r3, [r2, #80]	; 0x50
 8008d2e:	4770      	bx	lr
 8008d30:	40022000 	andmi	r2, r2, r0

08008d34 <fmc_bank0_state_get>:
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <fmc_bank0_state_get+0x20>)
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	07d1      	lsls	r1, r2, #31
 8008d3a:	d407      	bmi.n	8008d4c <fmc_bank0_state_get+0x18>
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	06d2      	lsls	r2, r2, #27
 8008d40:	d406      	bmi.n	8008d50 <fmc_bank0_state_get+0x1c>
 8008d42:	68d8      	ldr	r0, [r3, #12]
 8008d44:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008d48:	0040      	lsls	r0, r0, #1
 8008d4a:	4770      	bx	lr
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	4770      	bx	lr
 8008d50:	2003      	movs	r0, #3
 8008d52:	4770      	bx	lr
 8008d54:	40022000 	andmi	r2, r2, r0

08008d58 <fmc_bank1_state_get>:
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <fmc_bank1_state_get+0x20>)
 8008d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d5c:	07d1      	lsls	r1, r2, #31
 8008d5e:	d407      	bmi.n	8008d70 <fmc_bank1_state_get+0x18>
 8008d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d62:	06d2      	lsls	r2, r2, #27
 8008d64:	d406      	bmi.n	8008d74 <fmc_bank1_state_get+0x1c>
 8008d66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008d68:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008d6c:	0040      	lsls	r0, r0, #1
 8008d6e:	4770      	bx	lr
 8008d70:	2001      	movs	r0, #1
 8008d72:	4770      	bx	lr
 8008d74:	2003      	movs	r0, #3
 8008d76:	4770      	bx	lr
 8008d78:	40022000 	andmi	r2, r2, r0

08008d7c <fwdgt_enable>:
 8008d7c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008d80:	4b01      	ldr	r3, [pc, #4]	; (8008d88 <fwdgt_enable+0xc>)
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40003000 	andmi	r3, r0, r0

08008d8c <fwdgt_counter_reload>:
 8008d8c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008d90:	4b01      	ldr	r3, [pc, #4]	; (8008d98 <fwdgt_counter_reload+0xc>)
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40003000 	andmi	r3, r0, r0

08008d9c <fwdgt_config>:
 8008d9c:	f245 5355 	movw	r3, #21845	; 0x5555
 8008da0:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <fwdgt_config+0x4c>)
 8008da2:	b510      	push	{r4, lr}
 8008da4:	4c11      	ldr	r4, [pc, #68]	; (8008dec <fwdgt_config+0x50>)
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	68d3      	ldr	r3, [r2, #12]
 8008daa:	3c01      	subs	r4, #1
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	d013      	beq.n	8008dda <fwdgt_config+0x3e>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1f8      	bne.n	8008da8 <fwdgt_config+0xc>
 8008db6:	6051      	str	r1, [r2, #4]
 8008db8:	490c      	ldr	r1, [pc, #48]	; (8008dec <fwdgt_config+0x50>)
 8008dba:	4a0b      	ldr	r2, [pc, #44]	; (8008de8 <fwdgt_config+0x4c>)
 8008dbc:	68d3      	ldr	r3, [r2, #12]
 8008dbe:	3901      	subs	r1, #1
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	d00d      	beq.n	8008de2 <fwdgt_config+0x46>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f8      	bne.n	8008dbc <fwdgt_config+0x20>
 8008dca:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008dce:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008dd2:	6090      	str	r0, [r2, #8]
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e002      	b.n	8008de0 <fwdgt_config+0x44>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0eb      	beq.n	8008db6 <fwdgt_config+0x1a>
 8008dde:	2000      	movs	r0, #0
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1fb      	bne.n	8008dde <fwdgt_config+0x42>
 8008de6:	e7f0      	b.n	8008dca <fwdgt_config+0x2e>
 8008de8:	40003000 	andmi	r3, r0, r0
 8008dec:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008df0 <gpio_init>:
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	f04f 0c0f 	mov.w	ip, #15
 8008df8:	06cf      	lsls	r7, r1, #27
 8008dfa:	f04f 0400 	mov.w	r4, #0
 8008dfe:	f04f 0701 	mov.w	r7, #1
 8008e02:	f001 050f 	and.w	r5, r1, #15
 8008e06:	bf48      	it	mi
 8008e08:	4315      	orrmi	r5, r2
 8008e0a:	fa23 f204 	lsr.w	r2, r3, r4
 8008e0e:	07d6      	lsls	r6, r2, #31
 8008e10:	d510      	bpl.n	8008e34 <gpio_init+0x44>
 8008e12:	00a2      	lsls	r2, r4, #2
 8008e14:	6806      	ldr	r6, [r0, #0]
 8008e16:	fa0c fe02 	lsl.w	lr, ip, r2
 8008e1a:	ea26 060e 	bic.w	r6, r6, lr
 8008e1e:	fa05 f202 	lsl.w	r2, r5, r2
 8008e22:	2928      	cmp	r1, #40	; 0x28
 8008e24:	ea42 0206 	orr.w	r2, r2, r6
 8008e28:	d128      	bne.n	8008e7c <gpio_init+0x8c>
 8008e2a:	fa07 f604 	lsl.w	r6, r7, r4
 8008e2e:	401e      	ands	r6, r3
 8008e30:	6146      	str	r6, [r0, #20]
 8008e32:	6002      	str	r2, [r0, #0]
 8008e34:	3401      	adds	r4, #1
 8008e36:	2c08      	cmp	r4, #8
 8008e38:	d1e7      	bne.n	8008e0a <gpio_init+0x1a>
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	f04f 0c0f 	mov.w	ip, #15
 8008e40:	2701      	movs	r7, #1
 8008e42:	f106 0208 	add.w	r2, r6, #8
 8008e46:	fa23 f402 	lsr.w	r4, r3, r2
 8008e4a:	07e4      	lsls	r4, r4, #31
 8008e4c:	d511      	bpl.n	8008e72 <gpio_init+0x82>
 8008e4e:	00b4      	lsls	r4, r6, #2
 8008e50:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008e54:	fa0c f804 	lsl.w	r8, ip, r4
 8008e58:	ea2e 0e08 	bic.w	lr, lr, r8
 8008e5c:	fa05 f404 	lsl.w	r4, r5, r4
 8008e60:	2928      	cmp	r1, #40	; 0x28
 8008e62:	ea44 040e 	orr.w	r4, r4, lr
 8008e66:	d110      	bne.n	8008e8a <gpio_init+0x9a>
 8008e68:	fa07 f202 	lsl.w	r2, r7, r2
 8008e6c:	401a      	ands	r2, r3
 8008e6e:	6142      	str	r2, [r0, #20]
 8008e70:	6044      	str	r4, [r0, #4]
 8008e72:	3601      	adds	r6, #1
 8008e74:	2e08      	cmp	r6, #8
 8008e76:	d1e4      	bne.n	8008e42 <gpio_init+0x52>
 8008e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7c:	2948      	cmp	r1, #72	; 0x48
 8008e7e:	bf02      	ittt	eq
 8008e80:	fa07 f604 	lsleq.w	r6, r7, r4
 8008e84:	401e      	andeq	r6, r3
 8008e86:	6106      	streq	r6, [r0, #16]
 8008e88:	e7d3      	b.n	8008e32 <gpio_init+0x42>
 8008e8a:	2948      	cmp	r1, #72	; 0x48
 8008e8c:	bf02      	ittt	eq
 8008e8e:	fa07 f202 	lsleq.w	r2, r7, r2
 8008e92:	401a      	andeq	r2, r3
 8008e94:	6102      	streq	r2, [r0, #16]
 8008e96:	e7eb      	b.n	8008e70 <gpio_init+0x80>

08008e98 <gpio_input_bit_get>:
 8008e98:	6883      	ldr	r3, [r0, #8]
 8008e9a:	420b      	tst	r3, r1
 8008e9c:	bf14      	ite	ne
 8008e9e:	2001      	movne	r0, #1
 8008ea0:	2000      	moveq	r0, #0
 8008ea2:	4770      	bx	lr

08008ea4 <gpio_pin_remap_config>:
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	4a16      	ldr	r2, [pc, #88]	; (8008f00 <gpio_pin_remap_config+0x5c>)
 8008ea8:	b530      	push	{r4, r5, lr}
 8008eaa:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008eae:	bfb4      	ite	lt
 8008eb0:	69d3      	ldrlt	r3, [r2, #28]
 8008eb2:	6853      	ldrge	r3, [r2, #4]
 8008eb4:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008eb8:	b284      	uxth	r4, r0
 8008eba:	d110      	bne.n	8008ede <gpio_pin_remap_config+0x3a>
 8008ebc:	6855      	ldr	r5, [r2, #4]
 8008ebe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008ec2:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8008ec6:	6055      	str	r5, [r2, #4]
 8008ec8:	b119      	cbz	r1, 8008ed2 <gpio_pin_remap_config+0x2e>
 8008eca:	0d42      	lsrs	r2, r0, #21
 8008ecc:	0112      	lsls	r2, r2, #4
 8008ece:	4094      	lsls	r4, r2
 8008ed0:	4323      	orrs	r3, r4
 8008ed2:	4a0b      	ldr	r2, [pc, #44]	; (8008f00 <gpio_pin_remap_config+0x5c>)
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	bfb4      	ite	lt
 8008ed8:	61d3      	strlt	r3, [r2, #28]
 8008eda:	6053      	strge	r3, [r2, #4]
 8008edc:	bd30      	pop	{r4, r5, pc}
 8008ede:	02c2      	lsls	r2, r0, #11
 8008ee0:	bf4d      	iteet	mi
 8008ee2:	2203      	movmi	r2, #3
 8008ee4:	0d42      	lsrpl	r2, r0, #21
 8008ee6:	0112      	lslpl	r2, r2, #4
 8008ee8:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008eec:	bf4c      	ite	mi
 8008eee:	40aa      	lslmi	r2, r5
 8008ef0:	fa04 f202 	lslpl.w	r2, r4, r2
 8008ef4:	ea23 0302 	bic.w	r3, r3, r2
 8008ef8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8008efc:	e7e4      	b.n	8008ec8 <gpio_pin_remap_config+0x24>
 8008efe:	bf00      	nop
 8008f00:	40010000 	andmi	r0, r1, r0

08008f04 <pmu_backup_write_enable>:
 8008f04:	4a02      	ldr	r2, [pc, #8]	; (8008f10 <pmu_backup_write_enable+0xc>)
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	4770      	bx	lr
 8008f10:	40007000 	andmi	r7, r0, r0

08008f14 <rcu_periph_clock_enable>:
 8008f14:	2201      	movs	r2, #1
 8008f16:	0983      	lsrs	r3, r0, #6
 8008f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f1c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	f000 001f 	and.w	r0, r0, #31
 8008f26:	4082      	lsls	r2, r0
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	4770      	bx	lr

08008f2e <rcu_periph_clock_disable>:
 8008f2e:	2101      	movs	r1, #1
 8008f30:	0983      	lsrs	r3, r0, #6
 8008f32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f36:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	f000 001f 	and.w	r0, r0, #31
 8008f40:	4081      	lsls	r1, r0
 8008f42:	ea22 0201 	bic.w	r2, r2, r1
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	4770      	bx	lr

08008f4a <rcu_periph_reset_enable>:
 8008f4a:	f7ff bfe3 	b.w	8008f14 <rcu_periph_clock_enable>

08008f4e <rcu_periph_reset_disable>:
 8008f4e:	f7ff bfee 	b.w	8008f2e <rcu_periph_clock_disable>
	...

08008f54 <rcu_adc_clock_config>:
 8008f54:	490c      	ldr	r1, [pc, #48]	; (8008f88 <rcu_adc_clock_config+0x34>)
 8008f56:	2805      	cmp	r0, #5
 8008f58:	684b      	ldr	r3, [r1, #4]
 8008f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f62:	d006      	beq.n	8008f72 <rcu_adc_clock_config+0x1e>
 8008f64:	d803      	bhi.n	8008f6e <rcu_adc_clock_config+0x1a>
 8008f66:	2804      	cmp	r0, #4
 8008f68:	d10a      	bne.n	8008f80 <rcu_adc_clock_config+0x2c>
 8008f6a:	604b      	str	r3, [r1, #4]
 8008f6c:	4770      	bx	lr
 8008f6e:	2807      	cmp	r0, #7
 8008f70:	d1fb      	bne.n	8008f6a <rcu_adc_clock_config+0x16>
 8008f72:	4a06      	ldr	r2, [pc, #24]	; (8008f8c <rcu_adc_clock_config+0x38>)
 8008f74:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f7e:	e7f4      	b.n	8008f6a <rcu_adc_clock_config+0x16>
 8008f80:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008f84:	e7f1      	b.n	8008f6a <rcu_adc_clock_config+0x16>
 8008f86:	bf00      	nop
 8008f88:	40021000 	andmi	r1, r2, r0
 8008f8c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08008f90 <rcu_rtc_clock_config>:
 8008f90:	4a03      	ldr	r2, [pc, #12]	; (8008fa0 <rcu_rtc_clock_config+0x10>)
 8008f92:	6a13      	ldr	r3, [r2, #32]
 8008f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f98:	4303      	orrs	r3, r0
 8008f9a:	6213      	str	r3, [r2, #32]
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	40021000 	andmi	r1, r2, r0

08008fa4 <rcu_flag_get>:
 8008fa4:	0983      	lsrs	r3, r0, #6
 8008fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008faa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f000 001f 	and.w	r0, r0, #31
 8008fb6:	4083      	lsls	r3, r0
 8008fb8:	4213      	tst	r3, r2
 8008fba:	bf14      	ite	ne
 8008fbc:	2001      	movne	r0, #1
 8008fbe:	2000      	moveq	r0, #0
 8008fc0:	4770      	bx	lr
	...

08008fc4 <rcu_osci_stab_wait>:
 8008fc4:	2818      	cmp	r0, #24
 8008fc6:	b508      	push	{r3, lr}
 8008fc8:	d03b      	beq.n	8009042 <rcu_osci_stab_wait+0x7e>
 8008fca:	d804      	bhi.n	8008fd6 <rcu_osci_stab_wait+0x12>
 8008fcc:	b378      	cbz	r0, 800902e <rcu_osci_stab_wait+0x6a>
 8008fce:	2810      	cmp	r0, #16
 8008fd0:	d012      	beq.n	8008ff8 <rcu_osci_stab_wait+0x34>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	bd08      	pop	{r3, pc}
 8008fd6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008fda:	d01c      	beq.n	8009016 <rcu_osci_stab_wait+0x52>
 8008fdc:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008fe0:	d1f7      	bne.n	8008fd2 <rcu_osci_stab_wait+0xe>
 8008fe2:	491c      	ldr	r1, [pc, #112]	; (8009054 <rcu_osci_stab_wait+0x90>)
 8008fe4:	f640 1001 	movw	r0, #2305	; 0x901
 8008fe8:	f7ff ffdc 	bl	8008fa4 <rcu_flag_get>
 8008fec:	b908      	cbnz	r0, 8008ff2 <rcu_osci_stab_wait+0x2e>
 8008fee:	3901      	subs	r1, #1
 8008ff0:	d1f8      	bne.n	8008fe4 <rcu_osci_stab_wait+0x20>
 8008ff2:	f640 1001 	movw	r0, #2305	; 0x901
 8008ff6:	e008      	b.n	800900a <rcu_osci_stab_wait+0x46>
 8008ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ffc:	2011      	movs	r0, #17
 8008ffe:	f7ff ffd1 	bl	8008fa4 <rcu_flag_get>
 8009002:	b908      	cbnz	r0, 8009008 <rcu_osci_stab_wait+0x44>
 8009004:	3901      	subs	r1, #1
 8009006:	d1f9      	bne.n	8008ffc <rcu_osci_stab_wait+0x38>
 8009008:	2011      	movs	r0, #17
 800900a:	f7ff ffcb 	bl	8008fa4 <rcu_flag_get>
 800900e:	3800      	subs	r0, #0
 8009010:	bf18      	it	ne
 8009012:	2001      	movne	r0, #1
 8009014:	e7de      	b.n	8008fd4 <rcu_osci_stab_wait+0x10>
 8009016:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 800901a:	f640 0001 	movw	r0, #2049	; 0x801
 800901e:	f7ff ffc1 	bl	8008fa4 <rcu_flag_get>
 8009022:	b908      	cbnz	r0, 8009028 <rcu_osci_stab_wait+0x64>
 8009024:	3901      	subs	r1, #1
 8009026:	d1f8      	bne.n	800901a <rcu_osci_stab_wait+0x56>
 8009028:	f640 0001 	movw	r0, #2049	; 0x801
 800902c:	e7ed      	b.n	800900a <rcu_osci_stab_wait+0x46>
 800902e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009032:	2001      	movs	r0, #1
 8009034:	f7ff ffb6 	bl	8008fa4 <rcu_flag_get>
 8009038:	b908      	cbnz	r0, 800903e <rcu_osci_stab_wait+0x7a>
 800903a:	3901      	subs	r1, #1
 800903c:	d1f9      	bne.n	8009032 <rcu_osci_stab_wait+0x6e>
 800903e:	2001      	movs	r0, #1
 8009040:	e7e3      	b.n	800900a <rcu_osci_stab_wait+0x46>
 8009042:	4904      	ldr	r1, [pc, #16]	; (8009054 <rcu_osci_stab_wait+0x90>)
 8009044:	2019      	movs	r0, #25
 8009046:	f7ff ffad 	bl	8008fa4 <rcu_flag_get>
 800904a:	b908      	cbnz	r0, 8009050 <rcu_osci_stab_wait+0x8c>
 800904c:	3901      	subs	r1, #1
 800904e:	d1f9      	bne.n	8009044 <rcu_osci_stab_wait+0x80>
 8009050:	2019      	movs	r0, #25
 8009052:	e7da      	b.n	800900a <rcu_osci_stab_wait+0x46>
 8009054:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08009058 <rcu_osci_on>:
 8009058:	f7ff bf5c 	b.w	8008f14 <rcu_periph_clock_enable>

0800905c <rcu_clock_freq_get>:
 800905c:	4b2f      	ldr	r3, [pc, #188]	; (800911c <rcu_clock_freq_get+0xc0>)
 800905e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	461f      	mov	r7, r3
 8009064:	b089      	sub	sp, #36	; 0x24
 8009066:	ad04      	add	r5, sp, #16
 8009068:	f103 0610 	add.w	r6, r3, #16
 800906c:	462a      	mov	r2, r5
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	3308      	adds	r3, #8
 8009074:	c203      	stmia	r2!, {r0, r1}
 8009076:	42b3      	cmp	r3, r6
 8009078:	4615      	mov	r5, r2
 800907a:	d1f7      	bne.n	800906c <rcu_clock_freq_get+0x10>
 800907c:	466b      	mov	r3, sp
 800907e:	6938      	ldr	r0, [r7, #16]
 8009080:	6871      	ldr	r1, [r6, #4]
 8009082:	4a27      	ldr	r2, [pc, #156]	; (8009120 <rcu_clock_freq_get+0xc4>)
 8009084:	c303      	stmia	r3!, {r0, r1}
 8009086:	c303      	stmia	r3!, {r0, r1}
 8009088:	6853      	ldr	r3, [r2, #4]
 800908a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800908e:	2b02      	cmp	r3, #2
 8009090:	d137      	bne.n	8009102 <rcu_clock_freq_get+0xa6>
 8009092:	6853      	ldr	r3, [r2, #4]
 8009094:	03dd      	lsls	r5, r3, #15
 8009096:	d510      	bpl.n	80090ba <rcu_clock_freq_get+0x5e>
 8009098:	6853      	ldr	r3, [r2, #4]
 800909a:	4922      	ldr	r1, [pc, #136]	; (8009124 <rcu_clock_freq_get+0xc8>)
 800909c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80090a0:	4b21      	ldr	r3, [pc, #132]	; (8009128 <rcu_clock_freq_get+0xcc>)
 80090a2:	bf08      	it	eq
 80090a4:	4619      	moveq	r1, r3
 80090a6:	6853      	ldr	r3, [r2, #4]
 80090a8:	6850      	ldr	r0, [r2, #4]
 80090aa:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80090ae:	0100      	lsls	r0, r0, #4
 80090b0:	d505      	bpl.n	80090be <rcu_clock_freq_get+0x62>
 80090b2:	f043 0310 	orr.w	r3, r3, #16
 80090b6:	3301      	adds	r3, #1
 80090b8:	e004      	b.n	80090c4 <rcu_clock_freq_get+0x68>
 80090ba:	491a      	ldr	r1, [pc, #104]	; (8009124 <rcu_clock_freq_get+0xc8>)
 80090bc:	e7f3      	b.n	80090a6 <rcu_clock_freq_get+0x4a>
 80090be:	2b0f      	cmp	r3, #15
 80090c0:	d0f9      	beq.n	80090b6 <rcu_clock_freq_get+0x5a>
 80090c2:	3302      	adds	r3, #2
 80090c4:	fb01 f003 	mul.w	r0, r1, r3
 80090c8:	6853      	ldr	r3, [r2, #4]
 80090ca:	6851      	ldr	r1, [r2, #4]
 80090cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80090d0:	6852      	ldr	r2, [r2, #4]
 80090d2:	3320      	adds	r3, #32
 80090d4:	446b      	add	r3, sp
 80090d6:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80090da:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80090de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80090e2:	3120      	adds	r1, #32
 80090e4:	3220      	adds	r2, #32
 80090e6:	4469      	add	r1, sp
 80090e8:	446a      	add	r2, sp
 80090ea:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80090ee:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80090f2:	fa20 f303 	lsr.w	r3, r0, r3
 80090f6:	2c03      	cmp	r4, #3
 80090f8:	d80e      	bhi.n	8009118 <rcu_clock_freq_get+0xbc>
 80090fa:	e8df f004 	tbb	[pc, r4]
 80090fe:	0a070405 	beq	81ca11a <__exidx_end+0x1bdf7a>
 8009102:	4809      	ldr	r0, [pc, #36]	; (8009128 <rcu_clock_freq_get+0xcc>)
 8009104:	e7e0      	b.n	80090c8 <rcu_clock_freq_get+0x6c>
 8009106:	4618      	mov	r0, r3
 8009108:	b009      	add	sp, #36	; 0x24
 800910a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910c:	fa23 f001 	lsr.w	r0, r3, r1
 8009110:	e7fa      	b.n	8009108 <rcu_clock_freq_get+0xac>
 8009112:	fa23 f002 	lsr.w	r0, r3, r2
 8009116:	e7f7      	b.n	8009108 <rcu_clock_freq_get+0xac>
 8009118:	2000      	movs	r0, #0
 800911a:	e7f5      	b.n	8009108 <rcu_clock_freq_get+0xac>
 800911c:	0800a0bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sp, pc}
 8009120:	40021000 	andmi	r1, r2, r0
 8009124:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8009128:	007a1200 	rsbseq	r1, sl, r0, lsl #4

0800912c <rtc_configuration_mode_enter>:
 800912c:	4a03      	ldr	r2, [pc, #12]	; (800913c <rtc_configuration_mode_enter+0x10>)
 800912e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8009132:	f043 0310 	orr.w	r3, r3, #16
 8009136:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 800913a:	4770      	bx	lr
 800913c:	40002000 	andmi	r2, r0, r0

08009140 <rtc_configuration_mode_exit>:
 8009140:	4a03      	ldr	r2, [pc, #12]	; (8009150 <rtc_configuration_mode_exit+0x10>)
 8009142:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 800914e:	4770      	bx	lr
 8009150:	40002000 	andmi	r2, r0, r0

08009154 <rtc_counter_set>:
 8009154:	b508      	push	{r3, lr}
 8009156:	f7ff ffe9 	bl	800912c <rtc_configuration_mode_enter>
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <rtc_counter_set+0x1c>)
 800915c:	0c02      	lsrs	r2, r0, #16
 800915e:	b280      	uxth	r0, r0
 8009160:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8009164:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8009168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800916c:	f7ff bfe8 	b.w	8009140 <rtc_configuration_mode_exit>
 8009170:	40002000 	andmi	r2, r0, r0

08009174 <rtc_prescaler_set>:
 8009174:	b508      	push	{r3, lr}
 8009176:	f7ff ffd9 	bl	800912c <rtc_configuration_mode_enter>
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <rtc_prescaler_set+0x20>)
 800917c:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8009180:	b280      	uxth	r0, r0
 8009182:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8009186:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 800918a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800918e:	f7ff bfd7 	b.w	8009140 <rtc_configuration_mode_exit>
 8009192:	bf00      	nop
 8009194:	40002000 	andmi	r2, r0, r0

08009198 <rtc_lwoff_wait>:
 8009198:	4a02      	ldr	r2, [pc, #8]	; (80091a4 <rtc_lwoff_wait+0xc>)
 800919a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800919e:	069b      	lsls	r3, r3, #26
 80091a0:	d5fb      	bpl.n	800919a <rtc_lwoff_wait+0x2>
 80091a2:	4770      	bx	lr
 80091a4:	40002000 	andmi	r2, r0, r0

080091a8 <rtc_register_sync_wait>:
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <rtc_register_sync_wait+0x18>)
 80091aa:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80091ae:	f022 0208 	bic.w	r2, r2, #8
 80091b2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80091b6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 80091ba:	0712      	lsls	r2, r2, #28
 80091bc:	d5fb      	bpl.n	80091b6 <rtc_register_sync_wait+0xe>
 80091be:	4770      	bx	lr
 80091c0:	40002000 	andmi	r2, r0, r0

080091c4 <rtc_counter_get>:
 80091c4:	4b03      	ldr	r3, [pc, #12]	; (80091d4 <rtc_counter_get+0x10>)
 80091c6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80091ca:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 80091ce:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80091d2:	4770      	bx	lr
 80091d4:	40002000 	andmi	r2, r0, r0

080091d8 <timer_deinit>:
 80091d8:	b508      	push	{r3, lr}
 80091da:	4b2d      	ldr	r3, [pc, #180]	; (8009290 <timer_deinit+0xb8>)
 80091dc:	4298      	cmp	r0, r3
 80091de:	d048      	beq.n	8009272 <timer_deinit+0x9a>
 80091e0:	d816      	bhi.n	8009210 <timer_deinit+0x38>
 80091e2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80091e6:	4298      	cmp	r0, r3
 80091e8:	d03c      	beq.n	8009264 <timer_deinit+0x8c>
 80091ea:	d807      	bhi.n	80091fc <timer_deinit+0x24>
 80091ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80091f0:	d02a      	beq.n	8009248 <timer_deinit+0x70>
 80091f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80091f6:	4298      	cmp	r0, r3
 80091f8:	d02d      	beq.n	8009256 <timer_deinit+0x7e>
 80091fa:	bd08      	pop	{r3, pc}
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <timer_deinit+0xbc>)
 80091fe:	4298      	cmp	r0, r3
 8009200:	d1fb      	bne.n	80091fa <timer_deinit+0x22>
 8009202:	f240 4003 	movw	r0, #1027	; 0x403
 8009206:	f7ff fea0 	bl	8008f4a <rcu_periph_reset_enable>
 800920a:	f240 4003 	movw	r0, #1027	; 0x403
 800920e:	e017      	b.n	8009240 <timer_deinit+0x68>
 8009210:	4b21      	ldr	r3, [pc, #132]	; (8009298 <timer_deinit+0xc0>)
 8009212:	4298      	cmp	r0, r3
 8009214:	d00e      	beq.n	8009234 <timer_deinit+0x5c>
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	4298      	cmp	r0, r3
 800921c:	d030      	beq.n	8009280 <timer_deinit+0xa8>
 800921e:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8009222:	4298      	cmp	r0, r3
 8009224:	d1e9      	bne.n	80091fa <timer_deinit+0x22>
 8009226:	f240 4005 	movw	r0, #1029	; 0x405
 800922a:	f7ff fe8e 	bl	8008f4a <rcu_periph_reset_enable>
 800922e:	f240 4005 	movw	r0, #1029	; 0x405
 8009232:	e005      	b.n	8009240 <timer_deinit+0x68>
 8009234:	f240 300b 	movw	r0, #779	; 0x30b
 8009238:	f7ff fe87 	bl	8008f4a <rcu_periph_reset_enable>
 800923c:	f240 300b 	movw	r0, #779	; 0x30b
 8009240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009244:	f7ff be83 	b.w	8008f4e <rcu_periph_reset_disable>
 8009248:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800924c:	f7ff fe7d 	bl	8008f4a <rcu_periph_reset_enable>
 8009250:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009254:	e7f4      	b.n	8009240 <timer_deinit+0x68>
 8009256:	f240 4001 	movw	r0, #1025	; 0x401
 800925a:	f7ff fe76 	bl	8008f4a <rcu_periph_reset_enable>
 800925e:	f240 4001 	movw	r0, #1025	; 0x401
 8009262:	e7ed      	b.n	8009240 <timer_deinit+0x68>
 8009264:	f240 4002 	movw	r0, #1026	; 0x402
 8009268:	f7ff fe6f 	bl	8008f4a <rcu_periph_reset_enable>
 800926c:	f240 4002 	movw	r0, #1026	; 0x402
 8009270:	e7e6      	b.n	8009240 <timer_deinit+0x68>
 8009272:	f240 4004 	movw	r0, #1028	; 0x404
 8009276:	f7ff fe68 	bl	8008f4a <rcu_periph_reset_enable>
 800927a:	f240 4004 	movw	r0, #1028	; 0x404
 800927e:	e7df      	b.n	8009240 <timer_deinit+0x68>
 8009280:	f240 300d 	movw	r0, #781	; 0x30d
 8009284:	f7ff fe61 	bl	8008f4a <rcu_periph_reset_enable>
 8009288:	f240 300d 	movw	r0, #781	; 0x30d
 800928c:	e7d8      	b.n	8009240 <timer_deinit+0x68>
 800928e:	bf00      	nop
 8009290:	40001000 	andmi	r1, r0, r0
 8009294:	40000c00 	andmi	r0, r0, r0, lsl #24
 8009298:	40012c00 	andmi	r2, r1, r0, lsl #24

0800929c <timer_init>:
 800929c:	880b      	ldrh	r3, [r1, #0]
 800929e:	6283      	str	r3, [r0, #40]	; 0x28
 80092a0:	4b26      	ldr	r3, [pc, #152]	; (800933c <timer_init+0xa0>)
 80092a2:	4298      	cmp	r0, r3
 80092a4:	d018      	beq.n	80092d8 <timer_init+0x3c>
 80092a6:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80092aa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80092ae:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 80092b2:	d011      	beq.n	80092d8 <timer_init+0x3c>
 80092b4:	4a22      	ldr	r2, [pc, #136]	; (8009340 <timer_init+0xa4>)
 80092b6:	4290      	cmp	r0, r2
 80092b8:	d00e      	beq.n	80092d8 <timer_init+0x3c>
 80092ba:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80092be:	4290      	cmp	r0, r2
 80092c0:	d00a      	beq.n	80092d8 <timer_init+0x3c>
 80092c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d006      	beq.n	80092d8 <timer_init+0x3c>
 80092ca:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d002      	beq.n	80092d8 <timer_init+0x3c>
 80092d2:	4b1c      	ldr	r3, [pc, #112]	; (8009344 <timer_init+0xa8>)
 80092d4:	4298      	cmp	r0, r3
 80092d6:	d10f      	bne.n	80092f8 <timer_init+0x5c>
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	6003      	str	r3, [r0, #0]
 80092e0:	884b      	ldrh	r3, [r1, #2]
 80092e2:	6802      	ldr	r2, [r0, #0]
 80092e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092e8:	4313      	orrs	r3, r2
 80092ea:	6003      	str	r3, [r0, #0]
 80092ec:	888b      	ldrh	r3, [r1, #4]
 80092ee:	6802      	ldr	r2, [r0, #0]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	4313      	orrs	r3, r2
 80092f6:	6003      	str	r3, [r0, #0]
 80092f8:	688b      	ldr	r3, [r1, #8]
 80092fa:	62c3      	str	r3, [r0, #44]	; 0x2c
 80092fc:	4b12      	ldr	r3, [pc, #72]	; (8009348 <timer_init+0xac>)
 80092fe:	4298      	cmp	r0, r3
 8009300:	d003      	beq.n	800930a <timer_init+0x6e>
 8009302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009306:	4298      	cmp	r0, r3
 8009308:	d104      	bne.n	8009314 <timer_init+0x78>
 800930a:	6943      	ldr	r3, [r0, #20]
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6143      	str	r3, [r0, #20]
 8009312:	4770      	bx	lr
 8009314:	6803      	ldr	r3, [r0, #0]
 8009316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931a:	6003      	str	r3, [r0, #0]
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	6802      	ldr	r2, [r0, #0]
 8009320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009324:	4313      	orrs	r3, r2
 8009326:	6003      	str	r3, [r0, #0]
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <timer_init+0xa0>)
 800932a:	4298      	cmp	r0, r3
 800932c:	d002      	beq.n	8009334 <timer_init+0x98>
 800932e:	4b04      	ldr	r3, [pc, #16]	; (8009340 <timer_init+0xa4>)
 8009330:	4298      	cmp	r0, r3
 8009332:	d1ea      	bne.n	800930a <timer_init+0x6e>
 8009334:	7b8b      	ldrb	r3, [r1, #14]
 8009336:	6303      	str	r3, [r0, #48]	; 0x30
 8009338:	e7e7      	b.n	800930a <timer_init+0x6e>
 800933a:	bf00      	nop
 800933c:	40012c00 	andmi	r2, r1, r0, lsl #24
 8009340:	40013400 	andmi	r3, r1, r0, lsl #8
 8009344:	40002000 	andmi	r2, r0, r0
 8009348:	40001000 	andmi	r1, r0, r0

0800934c <timer_enable>:
 800934c:	6803      	ldr	r3, [r0, #0]
 800934e:	f043 0301 	orr.w	r3, r3, #1
 8009352:	6003      	str	r3, [r0, #0]
 8009354:	4770      	bx	lr

08009356 <timer_channel_output_mode_config>:
 8009356:	2903      	cmp	r1, #3
 8009358:	d81a      	bhi.n	8009390 <timer_channel_output_mode_config+0x3a>
 800935a:	e8df f001 	tbb	[pc, r1]
 800935e:	1a120a02 	bne	848bb6e <__exidx_end+0x47f9ce>
 8009362:	6983      	ldr	r3, [r0, #24]
 8009364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009368:	6183      	str	r3, [r0, #24]
 800936a:	6983      	ldr	r3, [r0, #24]
 800936c:	4313      	orrs	r3, r2
 800936e:	6183      	str	r3, [r0, #24]
 8009370:	4770      	bx	lr
 8009372:	6983      	ldr	r3, [r0, #24]
 8009374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009378:	6183      	str	r3, [r0, #24]
 800937a:	6983      	ldr	r3, [r0, #24]
 800937c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009380:	e7f5      	b.n	800936e <timer_channel_output_mode_config+0x18>
 8009382:	69c3      	ldr	r3, [r0, #28]
 8009384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009388:	61c3      	str	r3, [r0, #28]
 800938a:	69c3      	ldr	r3, [r0, #28]
 800938c:	4313      	orrs	r3, r2
 800938e:	61c3      	str	r3, [r0, #28]
 8009390:	4770      	bx	lr
 8009392:	69c3      	ldr	r3, [r0, #28]
 8009394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009398:	61c3      	str	r3, [r0, #28]
 800939a:	69c3      	ldr	r3, [r0, #28]
 800939c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80093a0:	e7f5      	b.n	800938e <timer_channel_output_mode_config+0x38>

080093a2 <timer_channel_output_pulse_value_config>:
 80093a2:	2903      	cmp	r1, #3
 80093a4:	d80a      	bhi.n	80093bc <timer_channel_output_pulse_value_config+0x1a>
 80093a6:	e8df f001 	tbb	[pc, r1]
 80093aa:	08060402 	stmdaeq	r6, {r1, sl}
 80093ae:	6342      	str	r2, [r0, #52]	; 0x34
 80093b0:	4770      	bx	lr
 80093b2:	6382      	str	r2, [r0, #56]	; 0x38
 80093b4:	4770      	bx	lr
 80093b6:	63c2      	str	r2, [r0, #60]	; 0x3c
 80093b8:	4770      	bx	lr
 80093ba:	6402      	str	r2, [r0, #64]	; 0x40
 80093bc:	4770      	bx	lr

080093be <timer_interrupt_enable>:
 80093be:	68c3      	ldr	r3, [r0, #12]
 80093c0:	430b      	orrs	r3, r1
 80093c2:	60c3      	str	r3, [r0, #12]
 80093c4:	4770      	bx	lr

080093c6 <timer_interrupt_flag_clear>:
 80093c6:	43c9      	mvns	r1, r1
 80093c8:	6101      	str	r1, [r0, #16]
 80093ca:	4770      	bx	lr

080093cc <timer_flag_clear>:
 80093cc:	43c9      	mvns	r1, r1
 80093ce:	6101      	str	r1, [r0, #16]
 80093d0:	4770      	bx	lr
	...

080093d4 <usart_deinit>:
 80093d4:	b508      	push	{r3, lr}
 80093d6:	4b1d      	ldr	r3, [pc, #116]	; (800944c <usart_deinit+0x78>)
 80093d8:	4298      	cmp	r0, r3
 80093da:	d028      	beq.n	800942e <usart_deinit+0x5a>
 80093dc:	d808      	bhi.n	80093f0 <usart_deinit+0x1c>
 80093de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80093e2:	4298      	cmp	r0, r3
 80093e4:	d015      	beq.n	8009412 <usart_deinit+0x3e>
 80093e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ea:	4298      	cmp	r0, r3
 80093ec:	d018      	beq.n	8009420 <usart_deinit+0x4c>
 80093ee:	bd08      	pop	{r3, pc}
 80093f0:	4b17      	ldr	r3, [pc, #92]	; (8009450 <usart_deinit+0x7c>)
 80093f2:	4298      	cmp	r0, r3
 80093f4:	d022      	beq.n	800943c <usart_deinit+0x68>
 80093f6:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80093fa:	4298      	cmp	r0, r3
 80093fc:	d1f7      	bne.n	80093ee <usart_deinit+0x1a>
 80093fe:	f240 300e 	movw	r0, #782	; 0x30e
 8009402:	f7ff fda2 	bl	8008f4a <rcu_periph_reset_enable>
 8009406:	f240 300e 	movw	r0, #782	; 0x30e
 800940a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800940e:	f7ff bd9e 	b.w	8008f4e <rcu_periph_reset_disable>
 8009412:	f240 4011 	movw	r0, #1041	; 0x411
 8009416:	f7ff fd98 	bl	8008f4a <rcu_periph_reset_enable>
 800941a:	f240 4011 	movw	r0, #1041	; 0x411
 800941e:	e7f4      	b.n	800940a <usart_deinit+0x36>
 8009420:	f240 4012 	movw	r0, #1042	; 0x412
 8009424:	f7ff fd91 	bl	8008f4a <rcu_periph_reset_enable>
 8009428:	f240 4012 	movw	r0, #1042	; 0x412
 800942c:	e7ed      	b.n	800940a <usart_deinit+0x36>
 800942e:	f240 4013 	movw	r0, #1043	; 0x413
 8009432:	f7ff fd8a 	bl	8008f4a <rcu_periph_reset_enable>
 8009436:	f240 4013 	movw	r0, #1043	; 0x413
 800943a:	e7e6      	b.n	800940a <usart_deinit+0x36>
 800943c:	f240 4014 	movw	r0, #1044	; 0x414
 8009440:	f7ff fd83 	bl	8008f4a <rcu_periph_reset_enable>
 8009444:	f240 4014 	movw	r0, #1044	; 0x414
 8009448:	e7df      	b.n	800940a <usart_deinit+0x36>
 800944a:	bf00      	nop
 800944c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009450:	40005000 	andmi	r5, r0, r0

08009454 <usart_baudrate_set>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4b11      	ldr	r3, [pc, #68]	; (800949c <usart_baudrate_set+0x48>)
 8009458:	4604      	mov	r4, r0
 800945a:	4298      	cmp	r0, r3
 800945c:	460d      	mov	r5, r1
 800945e:	d01b      	beq.n	8009498 <usart_baudrate_set+0x44>
 8009460:	d809      	bhi.n	8009476 <usart_baudrate_set+0x22>
 8009462:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009466:	4298      	cmp	r0, r3
 8009468:	d016      	beq.n	8009498 <usart_baudrate_set+0x44>
 800946a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800946e:	4298      	cmp	r0, r3
 8009470:	d012      	beq.n	8009498 <usart_baudrate_set+0x44>
 8009472:	2000      	movs	r0, #0
 8009474:	e009      	b.n	800948a <usart_baudrate_set+0x36>
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <usart_baudrate_set+0x4c>)
 8009478:	4298      	cmp	r0, r3
 800947a:	d00d      	beq.n	8009498 <usart_baudrate_set+0x44>
 800947c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8009480:	4298      	cmp	r0, r3
 8009482:	d1f6      	bne.n	8009472 <usart_baudrate_set+0x1e>
 8009484:	2003      	movs	r0, #3
 8009486:	f7ff fde9 	bl	800905c <rcu_clock_freq_get>
 800948a:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 800948e:	fbb1 f1f5 	udiv	r1, r1, r5
 8009492:	b289      	uxth	r1, r1
 8009494:	60a1      	str	r1, [r4, #8]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	2002      	movs	r0, #2
 800949a:	e7f4      	b.n	8009486 <usart_baudrate_set+0x32>
 800949c:	40004c00 	andmi	r4, r0, r0, lsl #24
 80094a0:	40005000 	andmi	r5, r0, r0

080094a4 <usart_parity_config>:
 80094a4:	68c3      	ldr	r3, [r0, #12]
 80094a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80094aa:	60c3      	str	r3, [r0, #12]
 80094ac:	68c3      	ldr	r3, [r0, #12]
 80094ae:	430b      	orrs	r3, r1
 80094b0:	60c3      	str	r3, [r0, #12]
 80094b2:	4770      	bx	lr

080094b4 <usart_word_length_set>:
 80094b4:	68c3      	ldr	r3, [r0, #12]
 80094b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ba:	60c3      	str	r3, [r0, #12]
 80094bc:	68c3      	ldr	r3, [r0, #12]
 80094be:	430b      	orrs	r3, r1
 80094c0:	60c3      	str	r3, [r0, #12]
 80094c2:	4770      	bx	lr

080094c4 <usart_stop_bit_set>:
 80094c4:	6903      	ldr	r3, [r0, #16]
 80094c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80094ca:	6103      	str	r3, [r0, #16]
 80094cc:	6903      	ldr	r3, [r0, #16]
 80094ce:	430b      	orrs	r3, r1
 80094d0:	6103      	str	r3, [r0, #16]
 80094d2:	4770      	bx	lr

080094d4 <usart_transmit_config>:
 80094d4:	68c3      	ldr	r3, [r0, #12]
 80094d6:	f023 0308 	bic.w	r3, r3, #8
 80094da:	430b      	orrs	r3, r1
 80094dc:	60c3      	str	r3, [r0, #12]
 80094de:	4770      	bx	lr

080094e0 <usart_receive_config>:
 80094e0:	68c3      	ldr	r3, [r0, #12]
 80094e2:	f023 0304 	bic.w	r3, r3, #4
 80094e6:	430b      	orrs	r3, r1
 80094e8:	60c3      	str	r3, [r0, #12]
 80094ea:	4770      	bx	lr

080094ec <usart_hardware_flow_rts_config>:
 80094ec:	6943      	ldr	r3, [r0, #20]
 80094ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094f2:	430b      	orrs	r3, r1
 80094f4:	6143      	str	r3, [r0, #20]
 80094f6:	4770      	bx	lr

080094f8 <usart_hardware_flow_cts_config>:
 80094f8:	6943      	ldr	r3, [r0, #20]
 80094fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094fe:	430b      	orrs	r3, r1
 8009500:	6143      	str	r3, [r0, #20]
 8009502:	4770      	bx	lr

08009504 <usart_dma_transmit_config>:
 8009504:	6943      	ldr	r3, [r0, #20]
 8009506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800950a:	430b      	orrs	r3, r1
 800950c:	6143      	str	r3, [r0, #20]
 800950e:	4770      	bx	lr

08009510 <usart_flag_get>:
 8009510:	098b      	lsrs	r3, r1, #6
 8009512:	581a      	ldr	r2, [r3, r0]
 8009514:	2301      	movs	r3, #1
 8009516:	f001 011f 	and.w	r1, r1, #31
 800951a:	408b      	lsls	r3, r1
 800951c:	4213      	tst	r3, r2
 800951e:	bf14      	ite	ne
 8009520:	2001      	movne	r0, #1
 8009522:	2000      	moveq	r0, #0
 8009524:	4770      	bx	lr

08009526 <usart_interrupt_enable>:
 8009526:	2301      	movs	r3, #1
 8009528:	b510      	push	{r4, lr}
 800952a:	f3c1 1289 	ubfx	r2, r1, #6, #10
 800952e:	5814      	ldr	r4, [r2, r0]
 8009530:	f001 011f 	and.w	r1, r1, #31
 8009534:	408b      	lsls	r3, r1
 8009536:	4323      	orrs	r3, r4
 8009538:	5013      	str	r3, [r2, r0]
 800953a:	bd10      	pop	{r4, pc}

0800953c <usart_interrupt_disable>:
 800953c:	2201      	movs	r2, #1
 800953e:	b510      	push	{r4, lr}
 8009540:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8009544:	5823      	ldr	r3, [r4, r0]
 8009546:	f001 011f 	and.w	r1, r1, #31
 800954a:	408a      	lsls	r2, r1
 800954c:	ea23 0302 	bic.w	r3, r3, r2
 8009550:	5023      	str	r3, [r4, r0]
 8009552:	bd10      	pop	{r4, pc}

08009554 <usart_interrupt_flag_clear>:
 8009554:	2201      	movs	r2, #1
 8009556:	b510      	push	{r4, lr}
 8009558:	0d8c      	lsrs	r4, r1, #22
 800955a:	5823      	ldr	r3, [r4, r0]
 800955c:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8009560:	408a      	lsls	r2, r1
 8009562:	ea23 0302 	bic.w	r3, r3, r2
 8009566:	5023      	str	r3, [r4, r0]
 8009568:	bd10      	pop	{r4, pc}
	...

0800956c <gd32_adc_init()>:
 800956c:	b510      	push	{r4, lr}
 800956e:	f240 6009 	movw	r0, #1545	; 0x609
 8009572:	4c21      	ldr	r4, [pc, #132]	; (80095f8 <gd32_adc_init()+0x8c>)
 8009574:	f7ff fcce 	bl	8008f14 <rcu_periph_clock_enable>
 8009578:	2005      	movs	r0, #5
 800957a:	f7ff fceb 	bl	8008f54 <rcu_adc_clock_config>
 800957e:	4620      	mov	r0, r4
 8009580:	2201      	movs	r2, #1
 8009582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009586:	f000 fbb9 	bl	8009cfc <adc_special_function_config>
 800958a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800958e:	4620      	mov	r0, r4
 8009590:	2102      	movs	r1, #2
 8009592:	f000 fc52 	bl	8009e3a <adc_external_trigger_source_config>
 8009596:	2100      	movs	r1, #0
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fbd7 	bl	8009d4c <adc_data_alignment_config>
 800959e:	2000      	movs	r0, #0
 80095a0:	f000 fb9c 	bl	8009cdc <adc_mode_config>
 80095a4:	2202      	movs	r2, #2
 80095a6:	4620      	mov	r0, r4
 80095a8:	4611      	mov	r1, r2
 80095aa:	f000 fbfb 	bl	8009da4 <adc_channel_length_config>
 80095ae:	4620      	mov	r0, r4
 80095b0:	2307      	movs	r3, #7
 80095b2:	2210      	movs	r2, #16
 80095b4:	2100      	movs	r1, #0
 80095b6:	f000 fc12 	bl	8009dde <adc_inserted_channel_config>
 80095ba:	2307      	movs	r3, #7
 80095bc:	4620      	mov	r0, r4
 80095be:	2211      	movs	r2, #17
 80095c0:	2101      	movs	r1, #1
 80095c2:	f000 fc0c 	bl	8009dde <adc_inserted_channel_config>
 80095c6:	2201      	movs	r2, #1
 80095c8:	2102      	movs	r1, #2
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fc46 	bl	8009e5c <adc_external_trigger_config>
 80095d0:	f000 fbde 	bl	8009d90 <adc_tempsensor_vrefint_enable>
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 fbc2 	bl	8009d5e <adc_enable>
 80095da:	2100      	movs	r1, #0
 80095dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095e0:	f000 fb64 	bl	8009cac <udelay(unsigned int, unsigned int)>
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 fbc2 	bl	8009d6e <adc_calibration_enable>
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f0:	2102      	movs	r1, #2
 80095f2:	f000 bc4e 	b.w	8009e92 <adc_software_trigger_enable>
 80095f6:	bf00      	nop
 80095f8:	40012400 	andmi	r2, r1, r0, lsl #8
 80095fc:	00000000 	andeq	r0, r0, r0

08009600 <gd32_adc_gettemp()>:
 8009600:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <gd32_adc_gettemp()+0x70>)
 8009602:	b510      	push	{r4, lr}
 8009604:	f8d3 443c 	ldr.w	r4, [r3, #1084]	; 0x43c
 8009608:	2102      	movs	r1, #2
 800960a:	481a      	ldr	r0, [pc, #104]	; (8009674 <gd32_adc_gettemp()+0x74>)
 800960c:	f000 fc41 	bl	8009e92 <adc_software_trigger_enable>
 8009610:	4620      	mov	r0, r4
 8009612:	f7f7 f8f3 	bl	80007fc <__aeabi_ui2d>
 8009616:	a310      	add	r3, pc, #64	; (adr r3, 8009658 <gd32_adc_gettemp()+0x58>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f7 f968 	bl	80008f0 <__aeabi_dmul>
 8009620:	2200      	movs	r2, #0
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <gd32_adc_gettemp()+0x78>)
 8009624:	f7f7 f964 	bl	80008f0 <__aeabi_dmul>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	a10c      	add	r1, pc, #48	; (adr r1, 8009660 <gd32_adc_gettemp()+0x60>)
 800962e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009632:	f7f6 ffa5 	bl	8000580 <__aeabi_dsub>
 8009636:	2200      	movs	r2, #0
 8009638:	4b10      	ldr	r3, [pc, #64]	; (800967c <gd32_adc_gettemp()+0x7c>)
 800963a:	f7f7 f959 	bl	80008f0 <__aeabi_dmul>
 800963e:	a30a      	add	r3, pc, #40	; (adr r3, 8009668 <gd32_adc_gettemp()+0x68>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f7 fa7e 	bl	8000b44 <__aeabi_ddiv>
 8009648:	2200      	movs	r2, #0
 800964a:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <gd32_adc_gettemp()+0x80>)
 800964c:	f7f6 ff9a 	bl	8000584 <__adddf3>
 8009650:	f7f6 fd7e 	bl	8000150 <__aeabi_d2f>
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800965c:	400a6666 	andmi	r6, sl, r6, ror #12
 8009660:	ae147ae1 	vnmlage.f32	s14, s9, s3
 8009664:	3ff6e147 	svccc	0x00f6e147
 8009668:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
 800966c:	40113333 	andsmi	r3, r1, r3, lsr r3
 8009670:	40012000 	andmi	r2, r1, r0
 8009674:	40012400 	andmi	r2, r1, r0, lsl #8
 8009678:	3f300000 	svccc	0x00300000
 800967c:	408f4000 	addmi	r4, pc, r0
 8009680:	40390000 	eorsmi	r0, r9, r0

08009684 <_stop() [clone .isra.0]>:
 8009684:	b508      	push	{r3, lr}
 8009686:	4806      	ldr	r0, [pc, #24]	; (80096a0 <_stop() [clone .isra.0]+0x1c>)
 8009688:	f000 fc96 	bl	8009fb8 <i2c_stop_on_bus>
 800968c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009690:	4904      	ldr	r1, [pc, #16]	; (80096a4 <_stop() [clone .isra.0]+0x20>)
 8009692:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8009696:	0592      	lsls	r2, r2, #22
 8009698:	d501      	bpl.n	800969e <_stop() [clone .isra.0]+0x1a>
 800969a:	3b01      	subs	r3, #1
 800969c:	d1f9      	bne.n	8009692 <_stop() [clone .isra.0]+0xe>
 800969e:	bd08      	pop	{r3, pc}
 80096a0:	40005400 	andmi	r5, r0, r0, lsl #8
 80096a4:	40005000 	andmi	r5, r0, r0

080096a8 <gd32_i2c_begin>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	f240 7015 	movw	r0, #1813	; 0x715
 80096ae:	f7ff fc31 	bl	8008f14 <rcu_periph_clock_enable>
 80096b2:	4c15      	ldr	r4, [pc, #84]	; (8009708 <gd32_i2c_begin+0x60>)
 80096b4:	f240 6003 	movw	r0, #1539	; 0x603
 80096b8:	f7ff fc2c 	bl	8008f14 <rcu_periph_clock_enable>
 80096bc:	f240 6003 	movw	r0, #1539	; 0x603
 80096c0:	f7ff fc28 	bl	8008f14 <rcu_periph_clock_enable>
 80096c4:	4620      	mov	r0, r4
 80096c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ca:	2203      	movs	r2, #3
 80096cc:	211c      	movs	r1, #28
 80096ce:	f7ff fb8f 	bl	8008df0 <gpio_init>
 80096d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096d6:	2203      	movs	r2, #3
 80096d8:	4620      	mov	r0, r4
 80096da:	211c      	movs	r1, #28
 80096dc:	f7ff fb88 	bl	8008df0 <gpio_init>
 80096e0:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 80096e4:	2101      	movs	r1, #1
 80096e6:	2002      	movs	r0, #2
 80096e8:	f7ff fbdc 	bl	8008ea4 <gpio_pin_remap_config>
 80096ec:	4620      	mov	r0, r4
 80096ee:	4907      	ldr	r1, [pc, #28]	; (800970c <gd32_i2c_begin+0x64>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	f000 fbdb 	bl	8009eac <i2c_clock_config>
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 fc54 	bl	8009fa4 <i2c_enable>
 80096fc:	4620      	mov	r0, r4
 80096fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009702:	2101      	movs	r1, #1
 8009704:	f000 bc34 	b.w	8009f70 <i2c_ack_config>
 8009708:	40010c00 	andmi	r0, r1, r0, lsl #24
 800970c:	00061a80 	andeq	r1, r6, r0, lsl #21

08009710 <gd32_i2c_set_baudrate>:
 8009710:	4601      	mov	r1, r0
 8009712:	2200      	movs	r2, #0
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <gd32_i2c_set_baudrate+0xc>)
 8009716:	f000 bbc9 	b.w	8009eac <i2c_clock_config>
 800971a:	bf00      	nop
 800971c:	40005400 	andmi	r5, r0, r0, lsl #8

08009720 <gd32_i2c_set_address>:
 8009720:	4b01      	ldr	r3, [pc, #4]	; (8009728 <gd32_i2c_set_address+0x8>)
 8009722:	0040      	lsls	r0, r0, #1
 8009724:	7018      	strb	r0, [r3, #0]
 8009726:	4770      	bx	lr
 8009728:	20001820 	andcs	r1, r0, r0, lsr #16

0800972c <gd32_i2c_write>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	4604      	mov	r4, r0
 8009730:	460f      	mov	r7, r1
 8009732:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009736:	4e2e      	ldr	r6, [pc, #184]	; (80097f0 <gd32_i2c_write+0xc4>)
 8009738:	f240 6101 	movw	r1, #1537	; 0x601
 800973c:	4630      	mov	r0, r6
 800973e:	f000 fc45 	bl	8009fcc <i2c_flag_get>
 8009742:	b9b0      	cbnz	r0, 8009772 <gd32_i2c_write+0x46>
 8009744:	482a      	ldr	r0, [pc, #168]	; (80097f0 <gd32_i2c_write+0xc4>)
 8009746:	f000 fc32 	bl	8009fae <i2c_start_on_bus>
 800974a:	f640 75ff 	movw	r5, #4095	; 0xfff
 800974e:	4e28      	ldr	r6, [pc, #160]	; (80097f0 <gd32_i2c_write+0xc4>)
 8009750:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009754:	4630      	mov	r0, r6
 8009756:	f000 fc39 	bl	8009fcc <i2c_flag_get>
 800975a:	b190      	cbz	r0, 8009782 <gd32_i2c_write+0x56>
 800975c:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <gd32_i2c_write+0xc8>)
 800975e:	f06f 0201 	mvn.w	r2, #1
 8009762:	7819      	ldrb	r1, [r3, #0]
 8009764:	4822      	ldr	r0, [pc, #136]	; (80097f0 <gd32_i2c_write+0xc4>)
 8009766:	f000 fc15 	bl	8009f94 <i2c_master_addressing>
 800976a:	f640 75ff 	movw	r5, #4095	; 0xfff
 800976e:	4e20      	ldr	r6, [pc, #128]	; (80097f0 <gd32_i2c_write+0xc4>)
 8009770:	e00c      	b.n	800978c <gd32_i2c_write+0x60>
 8009772:	3d01      	subs	r5, #1
 8009774:	d1e0      	bne.n	8009738 <gd32_i2c_write+0xc>
 8009776:	f7ff ff85 	bl	8009684 <_stop() [clone .isra.0]>
 800977a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800977e:	4240      	negs	r0, r0
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009782:	3d01      	subs	r5, #1
 8009784:	d1e4      	bne.n	8009750 <gd32_i2c_write+0x24>
 8009786:	e7f6      	b.n	8009776 <gd32_i2c_write+0x4a>
 8009788:	3d01      	subs	r5, #1
 800978a:	d0f4      	beq.n	8009776 <gd32_i2c_write+0x4a>
 800978c:	f240 5101 	movw	r1, #1281	; 0x501
 8009790:	4630      	mov	r0, r6
 8009792:	f000 fc1b 	bl	8009fcc <i2c_flag_get>
 8009796:	2800      	cmp	r0, #0
 8009798:	d0f6      	beq.n	8009788 <gd32_i2c_write+0x5c>
 800979a:	f240 5101 	movw	r1, #1281	; 0x501
 800979e:	4814      	ldr	r0, [pc, #80]	; (80097f0 <gd32_i2c_write+0xc4>)
 80097a0:	f000 fc1f 	bl	8009fe2 <i2c_flag_clear>
 80097a4:	f640 75ff 	movw	r5, #4095	; 0xfff
 80097a8:	4e11      	ldr	r6, [pc, #68]	; (80097f0 <gd32_i2c_write+0xc4>)
 80097aa:	f240 5107 	movw	r1, #1287	; 0x507
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 fc0c 	bl	8009fcc <i2c_flag_get>
 80097b4:	2801      	cmp	r0, #1
 80097b6:	d107      	bne.n	80097c8 <gd32_i2c_write+0x9c>
 80097b8:	4e0d      	ldr	r6, [pc, #52]	; (80097f0 <gd32_i2c_write+0xc4>)
 80097ba:	4427      	add	r7, r4
 80097bc:	42a7      	cmp	r7, r4
 80097be:	d106      	bne.n	80097ce <gd32_i2c_write+0xa2>
 80097c0:	f7ff ff60 	bl	8009684 <_stop() [clone .isra.0]>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7da      	b.n	800977e <gd32_i2c_write+0x52>
 80097c8:	3d01      	subs	r5, #1
 80097ca:	d1ee      	bne.n	80097aa <gd32_i2c_write+0x7e>
 80097cc:	e7d3      	b.n	8009776 <gd32_i2c_write+0x4a>
 80097ce:	4630      	mov	r0, r6
 80097d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d4:	f000 fbf5 	bl	8009fc2 <i2c_data_transmit>
 80097d8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80097dc:	f240 5102 	movw	r1, #1282	; 0x502
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 fbf3 	bl	8009fcc <i2c_flag_get>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d1e8      	bne.n	80097bc <gd32_i2c_write+0x90>
 80097ea:	3d01      	subs	r5, #1
 80097ec:	d1f6      	bne.n	80097dc <gd32_i2c_write+0xb0>
 80097ee:	e7c2      	b.n	8009776 <gd32_i2c_write+0x4a>
 80097f0:	40005400 	andmi	r5, r0, r0, lsl #8
 80097f4:	20001820 	andcs	r1, r0, r0, lsr #16

080097f8 <gd32_i2c_read>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	4680      	mov	r8, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009804:	4f4b      	ldr	r7, [pc, #300]	; (8009934 <gd32_i2c_read+0x13c>)
 8009806:	f240 6101 	movw	r1, #1537	; 0x601
 800980a:	4638      	mov	r0, r7
 800980c:	f000 fbde 	bl	8009fcc <i2c_flag_get>
 8009810:	4605      	mov	r5, r0
 8009812:	bb08      	cbnz	r0, 8009858 <gd32_i2c_read+0x60>
 8009814:	2c02      	cmp	r4, #2
 8009816:	d103      	bne.n	8009820 <gd32_i2c_read+0x28>
 8009818:	4601      	mov	r1, r0
 800981a:	4846      	ldr	r0, [pc, #280]	; (8009934 <gd32_i2c_read+0x13c>)
 800981c:	f000 fbb1 	bl	8009f82 <i2c_ackpos_config>
 8009820:	4844      	ldr	r0, [pc, #272]	; (8009934 <gd32_i2c_read+0x13c>)
 8009822:	f000 fbc4 	bl	8009fae <i2c_start_on_bus>
 8009826:	f640 76ff 	movw	r6, #4095	; 0xfff
 800982a:	4f42      	ldr	r7, [pc, #264]	; (8009934 <gd32_i2c_read+0x13c>)
 800982c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009830:	4638      	mov	r0, r7
 8009832:	f000 fbcb 	bl	8009fcc <i2c_flag_get>
 8009836:	b1a8      	cbz	r0, 8009864 <gd32_i2c_read+0x6c>
 8009838:	4b3f      	ldr	r3, [pc, #252]	; (8009938 <gd32_i2c_read+0x140>)
 800983a:	2201      	movs	r2, #1
 800983c:	7819      	ldrb	r1, [r3, #0]
 800983e:	483d      	ldr	r0, [pc, #244]	; (8009934 <gd32_i2c_read+0x13c>)
 8009840:	f000 fba8 	bl	8009f94 <i2c_master_addressing>
 8009844:	2c02      	cmp	r4, #2
 8009846:	d803      	bhi.n	8009850 <gd32_i2c_read+0x58>
 8009848:	2100      	movs	r1, #0
 800984a:	483a      	ldr	r0, [pc, #232]	; (8009934 <gd32_i2c_read+0x13c>)
 800984c:	f000 fb90 	bl	8009f70 <i2c_ack_config>
 8009850:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009854:	4f37      	ldr	r7, [pc, #220]	; (8009934 <gd32_i2c_read+0x13c>)
 8009856:	e00a      	b.n	800986e <gd32_i2c_read+0x76>
 8009858:	3e01      	subs	r6, #1
 800985a:	d1d4      	bne.n	8009806 <gd32_i2c_read+0xe>
 800985c:	f7ff ff12 	bl	8009684 <_stop() [clone .isra.0]>
 8009860:	2504      	movs	r5, #4
 8009862:	e04d      	b.n	8009900 <gd32_i2c_read+0x108>
 8009864:	3e01      	subs	r6, #1
 8009866:	d1e1      	bne.n	800982c <gd32_i2c_read+0x34>
 8009868:	e7f8      	b.n	800985c <gd32_i2c_read+0x64>
 800986a:	3e01      	subs	r6, #1
 800986c:	d0f6      	beq.n	800985c <gd32_i2c_read+0x64>
 800986e:	f240 5101 	movw	r1, #1281	; 0x501
 8009872:	4638      	mov	r0, r7
 8009874:	f000 fbaa 	bl	8009fcc <i2c_flag_get>
 8009878:	2800      	cmp	r0, #0
 800987a:	d0f6      	beq.n	800986a <gd32_i2c_read+0x72>
 800987c:	f240 5101 	movw	r1, #1281	; 0x501
 8009880:	482c      	ldr	r0, [pc, #176]	; (8009934 <gd32_i2c_read+0x13c>)
 8009882:	f000 fbae 	bl	8009fe2 <i2c_flag_clear>
 8009886:	2c01      	cmp	r4, #1
 8009888:	d102      	bne.n	8009890 <gd32_i2c_read+0x98>
 800988a:	482a      	ldr	r0, [pc, #168]	; (8009934 <gd32_i2c_read+0x13c>)
 800988c:	f000 fb94 	bl	8009fb8 <i2c_stop_on_bus>
 8009890:	f640 77ff 	movw	r7, #4095	; 0xfff
 8009894:	4e27      	ldr	r6, [pc, #156]	; (8009934 <gd32_i2c_read+0x13c>)
 8009896:	e022      	b.n	80098de <gd32_i2c_read+0xe6>
 8009898:	2c03      	cmp	r4, #3
 800989a:	d134      	bne.n	8009906 <gd32_i2c_read+0x10e>
 800989c:	f640 79ff 	movw	r9, #4095	; 0xfff
 80098a0:	e002      	b.n	80098a8 <gd32_i2c_read+0xb0>
 80098a2:	f1b9 0901 	subs.w	r9, r9, #1
 80098a6:	d0d9      	beq.n	800985c <gd32_i2c_read+0x64>
 80098a8:	f240 5102 	movw	r1, #1282	; 0x502
 80098ac:	4630      	mov	r0, r6
 80098ae:	f000 fb8d 	bl	8009fcc <i2c_flag_get>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d0f5      	beq.n	80098a2 <gd32_i2c_read+0xaa>
 80098b6:	2100      	movs	r1, #0
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 fb59 	bl	8009f70 <i2c_ack_config>
 80098be:	f240 5106 	movw	r1, #1286	; 0x506
 80098c2:	4630      	mov	r0, r6
 80098c4:	f000 fb82 	bl	8009fcc <i2c_flag_get>
 80098c8:	b138      	cbz	r0, 80098da <gd32_i2c_read+0xe2>
 80098ca:	4630      	mov	r0, r6
 80098cc:	f000 fb7b 	bl	8009fc6 <i2c_data_receive>
 80098d0:	f640 77ff 	movw	r7, #4095	; 0xfff
 80098d4:	f808 0b01 	strb.w	r0, [r8], #1
 80098d8:	3c01      	subs	r4, #1
 80098da:	3f01      	subs	r7, #1
 80098dc:	d0be      	beq.n	800985c <gd32_i2c_read+0x64>
 80098de:	2c00      	cmp	r4, #0
 80098e0:	d1da      	bne.n	8009898 <gd32_i2c_read+0xa0>
 80098e2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80098e6:	4915      	ldr	r1, [pc, #84]	; (800993c <gd32_i2c_read+0x144>)
 80098e8:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80098ec:	0592      	lsls	r2, r2, #22
 80098ee:	d41d      	bmi.n	800992c <gd32_i2c_read+0x134>
 80098f0:	2101      	movs	r1, #1
 80098f2:	4810      	ldr	r0, [pc, #64]	; (8009934 <gd32_i2c_read+0x13c>)
 80098f4:	f000 fb3c 	bl	8009f70 <i2c_ack_config>
 80098f8:	2101      	movs	r1, #1
 80098fa:	480e      	ldr	r0, [pc, #56]	; (8009934 <gd32_i2c_read+0x13c>)
 80098fc:	f000 fb41 	bl	8009f82 <i2c_ackpos_config>
 8009900:	4628      	mov	r0, r5
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	2c02      	cmp	r4, #2
 8009908:	d1d9      	bne.n	80098be <gd32_i2c_read+0xc6>
 800990a:	f640 79ff 	movw	r9, #4095	; 0xfff
 800990e:	e002      	b.n	8009916 <gd32_i2c_read+0x11e>
 8009910:	f1b9 0901 	subs.w	r9, r9, #1
 8009914:	d0a2      	beq.n	800985c <gd32_i2c_read+0x64>
 8009916:	f240 5102 	movw	r1, #1282	; 0x502
 800991a:	4630      	mov	r0, r6
 800991c:	f000 fb56 	bl	8009fcc <i2c_flag_get>
 8009920:	2800      	cmp	r0, #0
 8009922:	d0f5      	beq.n	8009910 <gd32_i2c_read+0x118>
 8009924:	4630      	mov	r0, r6
 8009926:	f000 fb47 	bl	8009fb8 <i2c_stop_on_bus>
 800992a:	e7c8      	b.n	80098be <gd32_i2c_read+0xc6>
 800992c:	3b01      	subs	r3, #1
 800992e:	d1db      	bne.n	80098e8 <gd32_i2c_read+0xf0>
 8009930:	e796      	b.n	8009860 <gd32_i2c_read+0x68>
 8009932:	bf00      	nop
 8009934:	40005400 	andmi	r5, r0, r0, lsl #8
 8009938:	20001820 	andcs	r1, r0, r0, lsr #16
 800993c:	40005000 	andmi	r5, r0, r0

08009940 <gd32_spi_dma_begin()>:
 8009940:	b530      	push	{r4, r5, lr}
 8009942:	f240 6002 	movw	r0, #1538	; 0x602
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	f7ff fae4 	bl	8008f14 <rcu_periph_clock_enable>
 800994c:	f240 6003 	movw	r0, #1539	; 0x603
 8009950:	f7ff fae0 	bl	8008f14 <rcu_periph_clock_enable>
 8009954:	f240 700f 	movw	r0, #1807	; 0x70f
 8009958:	f7ff fadc 	bl	8008f14 <rcu_periph_clock_enable>
 800995c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009960:	f7ff fad8 	bl	8008f14 <rcu_periph_clock_enable>
 8009964:	2338      	movs	r3, #56	; 0x38
 8009966:	2203      	movs	r2, #3
 8009968:	2118      	movs	r1, #24
 800996a:	4829      	ldr	r0, [pc, #164]	; (8009a10 <gd32_spi_dma_begin()+0xd0>)
 800996c:	f7ff fa40 	bl	8008df0 <gpio_init>
 8009970:	4c28      	ldr	r4, [pc, #160]	; (8009a14 <gd32_spi_dma_begin()+0xd4>)
 8009972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009976:	2203      	movs	r2, #3
 8009978:	2118      	movs	r1, #24
 800997a:	4827      	ldr	r0, [pc, #156]	; (8009a18 <gd32_spi_dma_begin()+0xd8>)
 800997c:	f7ff fa38 	bl	8008df0 <gpio_init>
 8009980:	2101      	movs	r1, #1
 8009982:	4826      	ldr	r0, [pc, #152]	; (8009a1c <gd32_spi_dma_begin()+0xdc>)
 8009984:	f7ff fa8e 	bl	8008ea4 <gpio_pin_remap_config>
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fb80 	bl	800a08e <i2s_disable>
 800998e:	2300      	movs	r3, #0
 8009990:	4620      	mov	r0, r4
 8009992:	461a      	mov	r2, r3
 8009994:	4922      	ldr	r1, [pc, #136]	; (8009a20 <gd32_spi_dma_begin()+0xe0>)
 8009996:	f000 fb45 	bl	800a024 <i2s_psc_config>
 800999a:	2300      	movs	r3, #0
 800999c:	2210      	movs	r2, #16
 800999e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fb2f 	bl	800a006 <i2s_init>
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fb6b 	bl	800a084 <i2s_enable>
 80099ae:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 80099b2:	f240 5001 	movw	r0, #1281	; 0x501
 80099b6:	f7ff faad 	bl	8008f14 <rcu_periph_clock_enable>
 80099ba:	2101      	movs	r1, #1
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff f90d 	bl	8008bdc <dma_deinit>
 80099c2:	a801      	add	r0, sp, #4
 80099c4:	f7ff f926 	bl	8008c14 <dma_struct_para_init>
 80099c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099cc:	2501      	movs	r5, #1
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80099d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d8:	4912      	ldr	r1, [pc, #72]	; (8009a24 <gd32_spi_dma_begin()+0xe4>)
 80099da:	4620      	mov	r0, r4
 80099dc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80099e0:	9206      	str	r2, [sp, #24]
 80099e2:	4629      	mov	r1, r5
 80099e4:	aa01      	add	r2, sp, #4
 80099e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80099ea:	f88d 501e 	strb.w	r5, [sp, #30]
 80099ee:	f7ff f91b 	bl	8008c28 <dma_init>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7ff f951 	bl	8008c9c <dma_circulation_disable>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff f95d 	bl	8008cbc <dma_memory_to_memory_disable>
 8009a02:	2200      	movs	r2, #0
 8009a04:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <gd32_spi_dma_begin()+0xe8>)
 8009a06:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8009a0a:	b009      	add	sp, #36	; 0x24
 8009a0c:	bd30      	pop	{r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009a14:	40003c00 	andmi	r3, r0, r0, lsl #24
 8009a18:	40010800 	andmi	r0, r1, r0, lsl #16
 8009a1c:	00300400 	eorseq	r0, r0, r0, lsl #8
 8009a20:	00030d40 	andeq	r0, r3, r0, asr #26
 8009a24:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8009a28:	40020000 	andmi	r0, r2, r0

08009a2c <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4c08      	ldr	r4, [pc, #32]	; (8009a50 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8009a30:	4605      	mov	r5, r0
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fb2b 	bl	800a08e <i2s_disable>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	0969      	lsrs	r1, r5, #5
 8009a40:	f000 faf0 	bl	800a024 <i2s_psc_config>
 8009a44:	4620      	mov	r0, r4
 8009a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a4a:	f000 bb1b 	b.w	800a084 <i2s_enable>
 8009a4e:	bf00      	nop
 8009a50:	40003c00 	andmi	r3, r0, r0, lsl #24

08009a54 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009a54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	4801      	ldr	r0, [pc, #4]	; (8009a60 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	20001824 	andcs	r1, r0, r4, lsr #16

08009a64 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8009a64:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8009a66:	3101      	adds	r1, #1
 8009a68:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8009a6c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009a78:	f043 0301 	orr.w	r3, r3, #1
 8009a7c:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8009a80:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8009a84:	4803      	ldr	r0, [pc, #12]	; (8009a94 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8009a86:	2100      	movs	r1, #0
 8009a88:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8009a8c:	f000 bb04 	b.w	800a098 <spi_dma_enable>
 8009a90:	40020000 	andmi	r0, r2, r0
 8009a94:	40003c00 	andmi	r3, r0, r0, lsl #24

08009a98 <gd32_spi_dma_tx_is_active()>:
 8009a98:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <gd32_spi_dma_tx_is_active()+0x10>)
 8009a9a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8009a9e:	3800      	subs	r0, #0
 8009aa0:	bf18      	it	ne
 8009aa2:	2001      	movne	r0, #1
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	40020000 	andmi	r0, r2, r0

08009aac <gd32_uart_begin>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	461e      	mov	r6, r3
 8009ab0:	4b63      	ldr	r3, [pc, #396]	; (8009c40 <gd32_uart_begin+0x194>)
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4298      	cmp	r0, r3
 8009ab6:	460f      	mov	r7, r1
 8009ab8:	4615      	mov	r5, r2
 8009aba:	d03b      	beq.n	8009b34 <gd32_uart_begin+0x88>
 8009abc:	d80a      	bhi.n	8009ad4 <gd32_uart_begin+0x28>
 8009abe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	d02f      	beq.n	8009b26 <gd32_uart_begin+0x7a>
 8009ac6:	f240 7012 	movw	r0, #1810	; 0x712
 8009aca:	f7ff fa23 	bl	8008f14 <rcu_periph_clock_enable>
 8009ace:	f240 6004 	movw	r0, #1540	; 0x604
 8009ad2:	e008      	b.n	8009ae6 <gd32_uart_begin+0x3a>
 8009ad4:	4b5b      	ldr	r3, [pc, #364]	; (8009c44 <gd32_uart_begin+0x198>)
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	d02f      	beq.n	8009b3a <gd32_uart_begin+0x8e>
 8009ada:	f240 600e 	movw	r0, #1550	; 0x60e
 8009ade:	f7ff fa19 	bl	8008f14 <rcu_periph_clock_enable>
 8009ae2:	f240 6003 	movw	r0, #1539	; 0x603
 8009ae6:	f7ff fa15 	bl	8008f14 <rcu_periph_clock_enable>
 8009aea:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009aee:	f7ff fa11 	bl	8008f14 <rcu_periph_clock_enable>
 8009af2:	4b53      	ldr	r3, [pc, #332]	; (8009c40 <gd32_uart_begin+0x194>)
 8009af4:	429c      	cmp	r4, r3
 8009af6:	f000 8084 	beq.w	8009c02 <gd32_uart_begin+0x156>
 8009afa:	d829      	bhi.n	8009b50 <gd32_uart_begin+0xa4>
 8009afc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d071      	beq.n	8009be8 <gd32_uart_begin+0x13c>
 8009b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b08:	2203      	movs	r2, #3
 8009b0a:	2118      	movs	r1, #24
 8009b0c:	484e      	ldr	r0, [pc, #312]	; (8009c48 <gd32_uart_begin+0x19c>)
 8009b0e:	f7ff f96f 	bl	8008df0 <gpio_init>
 8009b12:	2104      	movs	r1, #4
 8009b14:	484c      	ldr	r0, [pc, #304]	; (8009c48 <gd32_uart_begin+0x19c>)
 8009b16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	f7ff f968 	bl	8008df0 <gpio_init>
 8009b20:	2101      	movs	r1, #1
 8009b22:	484a      	ldr	r0, [pc, #296]	; (8009c4c <gd32_uart_begin+0x1a0>)
 8009b24:	e025      	b.n	8009b72 <gd32_uart_begin+0xc6>
 8009b26:	f240 7011 	movw	r0, #1809	; 0x711
 8009b2a:	f7ff f9f3 	bl	8008f14 <rcu_periph_clock_enable>
 8009b2e:	f240 6002 	movw	r0, #1538	; 0x602
 8009b32:	e7d8      	b.n	8009ae6 <gd32_uart_begin+0x3a>
 8009b34:	f240 7013 	movw	r0, #1811	; 0x713
 8009b38:	e7c7      	b.n	8009aca <gd32_uart_begin+0x1e>
 8009b3a:	f240 7014 	movw	r0, #1812	; 0x714
 8009b3e:	f7ff f9e9 	bl	8008f14 <rcu_periph_clock_enable>
 8009b42:	f240 6004 	movw	r0, #1540	; 0x604
 8009b46:	f7ff f9e5 	bl	8008f14 <rcu_periph_clock_enable>
 8009b4a:	f240 6005 	movw	r0, #1541	; 0x605
 8009b4e:	e7ca      	b.n	8009ae6 <gd32_uart_begin+0x3a>
 8009b50:	4b3c      	ldr	r3, [pc, #240]	; (8009c44 <gd32_uart_begin+0x198>)
 8009b52:	429c      	cmp	r4, r3
 8009b54:	d062      	beq.n	8009c1c <gd32_uart_begin+0x170>
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	2203      	movs	r2, #3
 8009b5a:	2118      	movs	r1, #24
 8009b5c:	483c      	ldr	r0, [pc, #240]	; (8009c50 <gd32_uart_begin+0x1a4>)
 8009b5e:	f7ff f947 	bl	8008df0 <gpio_init>
 8009b62:	2104      	movs	r1, #4
 8009b64:	483a      	ldr	r0, [pc, #232]	; (8009c50 <gd32_uart_begin+0x1a4>)
 8009b66:	2380      	movs	r3, #128	; 0x80
 8009b68:	2203      	movs	r2, #3
 8009b6a:	f7ff f941 	bl	8008df0 <gpio_init>
 8009b6e:	2101      	movs	r1, #1
 8009b70:	2004      	movs	r0, #4
 8009b72:	f7ff f997 	bl	8008ea4 <gpio_pin_remap_config>
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7ff fc2c 	bl	80093d4 <usart_deinit>
 8009b7c:	68e3      	ldr	r3, [r4, #12]
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b84:	4620      	mov	r0, r4
 8009b86:	60e3      	str	r3, [r4, #12]
 8009b88:	f7ff fc64 	bl	8009454 <usart_baudrate_set>
 8009b8c:	f1a5 0309 	sub.w	r3, r5, #9
 8009b90:	4259      	negs	r1, r3
 8009b92:	4159      	adcs	r1, r3
 8009b94:	4620      	mov	r0, r4
 8009b96:	0309      	lsls	r1, r1, #12
 8009b98:	f7ff fc8c 	bl	80094b4 <usart_word_length_set>
 8009b9c:	9906      	ldr	r1, [sp, #24]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	1e8a      	subs	r2, r1, #2
 8009ba2:	4251      	negs	r1, r2
 8009ba4:	4151      	adcs	r1, r2
 8009ba6:	0349      	lsls	r1, r1, #13
 8009ba8:	f7ff fc8c 	bl	80094c4 <usart_stop_bit_set>
 8009bac:	2e01      	cmp	r6, #1
 8009bae:	d041      	beq.n	8009c34 <gd32_uart_begin+0x188>
 8009bb0:	2e02      	cmp	r6, #2
 8009bb2:	d142      	bne.n	8009c3a <gd32_uart_begin+0x18e>
 8009bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7ff fc73 	bl	80094a4 <usart_parity_config>
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff fc93 	bl	80094ec <usart_hardware_flow_rts_config>
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7ff fc95 	bl	80094f8 <usart_hardware_flow_cts_config>
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7ff fc85 	bl	80094e0 <usart_receive_config>
 8009bd6:	2108      	movs	r1, #8
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff fc7b 	bl	80094d4 <usart_transmit_config>
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009be4:	60e3      	str	r3, [r4, #12]
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	2304      	movs	r3, #4
 8009bea:	2203      	movs	r2, #3
 8009bec:	2118      	movs	r1, #24
 8009bee:	4819      	ldr	r0, [pc, #100]	; (8009c54 <gd32_uart_begin+0x1a8>)
 8009bf0:	f7ff f8fe 	bl	8008df0 <gpio_init>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	2203      	movs	r2, #3
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	4816      	ldr	r0, [pc, #88]	; (8009c54 <gd32_uart_begin+0x1a8>)
 8009bfc:	f7ff f8f8 	bl	8008df0 <gpio_init>
 8009c00:	e7b9      	b.n	8009b76 <gd32_uart_begin+0xca>
 8009c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c06:	2203      	movs	r2, #3
 8009c08:	2118      	movs	r1, #24
 8009c0a:	480f      	ldr	r0, [pc, #60]	; (8009c48 <gd32_uart_begin+0x19c>)
 8009c0c:	f7ff f8f0 	bl	8008df0 <gpio_init>
 8009c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c14:	2203      	movs	r2, #3
 8009c16:	2104      	movs	r1, #4
 8009c18:	480b      	ldr	r0, [pc, #44]	; (8009c48 <gd32_uart_begin+0x19c>)
 8009c1a:	e7ef      	b.n	8009bfc <gd32_uart_begin+0x150>
 8009c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c20:	2203      	movs	r2, #3
 8009c22:	2118      	movs	r1, #24
 8009c24:	4808      	ldr	r0, [pc, #32]	; (8009c48 <gd32_uart_begin+0x19c>)
 8009c26:	f7ff f8e3 	bl	8008df0 <gpio_init>
 8009c2a:	2304      	movs	r3, #4
 8009c2c:	2203      	movs	r2, #3
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4809      	ldr	r0, [pc, #36]	; (8009c58 <gd32_uart_begin+0x1ac>)
 8009c32:	e7e3      	b.n	8009bfc <gd32_uart_begin+0x150>
 8009c34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c38:	e7be      	b.n	8009bb8 <gd32_uart_begin+0x10c>
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	e7bc      	b.n	8009bb8 <gd32_uart_begin+0x10c>
 8009c3e:	bf00      	nop
 8009c40:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009c44:	40005000 	andmi	r5, r0, r0
 8009c48:	40011000 	andmi	r1, r1, r0
 8009c4c:	00140010 	andseq	r0, r4, r0, lsl r0
 8009c50:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009c54:	40010800 	andmi	r0, r1, r0, lsl #16
 8009c58:	40011400 	andmi	r1, r1, r0, lsl #8

08009c5c <mac_address_get(unsigned char*)>:
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	4a07      	ldr	r2, [pc, #28]	; (8009c7c <mac_address_get(unsigned char*)+0x20>)
 8009c60:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8009c64:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8009c68:	7001      	strb	r1, [r0, #0]
 8009c6a:	7042      	strb	r2, [r0, #1]
 8009c6c:	0e1a      	lsrs	r2, r3, #24
 8009c6e:	7082      	strb	r2, [r0, #2]
 8009c70:	0c1a      	lsrs	r2, r3, #16
 8009c72:	70c2      	strb	r2, [r0, #3]
 8009c74:	0a1a      	lsrs	r2, r3, #8
 8009c76:	7102      	strb	r2, [r0, #4]
 8009c78:	7143      	strb	r3, [r0, #5]
 8009c7a:	4770      	bx	lr
 8009c7c:	1ffff000 	svcne	0x00fff000

08009c80 <micros_init()>:
 8009c80:	4770      	bx	lr
	...

08009c84 <udelay_init()>:
 8009c84:	4a07      	ldr	r2, [pc, #28]	; (8009ca4 <udelay_init()+0x20>)
 8009c86:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c8e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009c92:	2200      	movs	r2, #0
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <udelay_init()+0x24>)
 8009c96:	605a      	str	r2, [r3, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	e000ed00 	and	lr, r0, r0, lsl #26
 8009ca8:	e0001000 	and	r1, r0, r0

08009cac <udelay(unsigned int, unsigned int)>:
 8009cac:	236c      	movs	r3, #108	; 0x6c
 8009cae:	b530      	push	{r4, r5, lr}
 8009cb0:	4358      	muls	r0, r3
 8009cb2:	b909      	cbnz	r1, 8009cb8 <udelay(unsigned int, unsigned int)+0xc>
 8009cb4:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <udelay(unsigned int, unsigned int)+0x2c>)
 8009cb6:	6859      	ldr	r1, [r3, #4]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4c07      	ldr	r4, [pc, #28]	; (8009cd8 <udelay(unsigned int, unsigned int)+0x2c>)
 8009cbc:	6862      	ldr	r2, [r4, #4]
 8009cbe:	4291      	cmp	r1, r2
 8009cc0:	d0fc      	beq.n	8009cbc <udelay(unsigned int, unsigned int)+0x10>
 8009cc2:	bf2a      	itet	cs
 8009cc4:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009cc8:	189b      	addcc	r3, r3, r2
 8009cca:	195b      	addcs	r3, r3, r5
 8009ccc:	1a5b      	subs	r3, r3, r1
 8009cce:	4283      	cmp	r3, r0
 8009cd0:	d300      	bcc.n	8009cd4 <udelay(unsigned int, unsigned int)+0x28>
 8009cd2:	bd30      	pop	{r4, r5, pc}
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	e7f1      	b.n	8009cbc <udelay(unsigned int, unsigned int)+0x10>
 8009cd8:	e0001000 	and	r1, r0, r0

08009cdc <adc_mode_config>:
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <adc_mode_config+0x1c>)
 8009cde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009ce2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009ce6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009cea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009cee:	4302      	orrs	r2, r0
 8009cf0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40012000 	andmi	r2, r1, r0

08009cfc <adc_special_function_config>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009d02:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009d06:	f001 0102 	and.w	r1, r1, #2
 8009d0a:	b17a      	cbz	r2, 8009d2c <adc_special_function_config+0x30>
 8009d0c:	b11b      	cbz	r3, 8009d16 <adc_special_function_config+0x1a>
 8009d0e:	6843      	ldr	r3, [r0, #4]
 8009d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d14:	6043      	str	r3, [r0, #4]
 8009d16:	b11c      	cbz	r4, 8009d20 <adc_special_function_config+0x24>
 8009d18:	6843      	ldr	r3, [r0, #4]
 8009d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d1e:	6043      	str	r3, [r0, #4]
 8009d20:	b119      	cbz	r1, 8009d2a <adc_special_function_config+0x2e>
 8009d22:	6883      	ldr	r3, [r0, #8]
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	6083      	str	r3, [r0, #8]
 8009d2a:	bd10      	pop	{r4, pc}
 8009d2c:	b11b      	cbz	r3, 8009d36 <adc_special_function_config+0x3a>
 8009d2e:	6843      	ldr	r3, [r0, #4]
 8009d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d34:	6043      	str	r3, [r0, #4]
 8009d36:	b11c      	cbz	r4, 8009d40 <adc_special_function_config+0x44>
 8009d38:	6843      	ldr	r3, [r0, #4]
 8009d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d3e:	6043      	str	r3, [r0, #4]
 8009d40:	2900      	cmp	r1, #0
 8009d42:	d0f2      	beq.n	8009d2a <adc_special_function_config+0x2e>
 8009d44:	6883      	ldr	r3, [r0, #8]
 8009d46:	f023 0302 	bic.w	r3, r3, #2
 8009d4a:	e7ed      	b.n	8009d28 <adc_special_function_config+0x2c>

08009d4c <adc_data_alignment_config>:
 8009d4c:	6883      	ldr	r3, [r0, #8]
 8009d4e:	b119      	cbz	r1, 8009d58 <adc_data_alignment_config+0xc>
 8009d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d54:	6083      	str	r3, [r0, #8]
 8009d56:	4770      	bx	lr
 8009d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d5c:	e7fa      	b.n	8009d54 <adc_data_alignment_config+0x8>

08009d5e <adc_enable>:
 8009d5e:	6883      	ldr	r3, [r0, #8]
 8009d60:	07db      	lsls	r3, r3, #31
 8009d62:	bf5e      	ittt	pl
 8009d64:	6883      	ldrpl	r3, [r0, #8]
 8009d66:	f043 0301 	orrpl.w	r3, r3, #1
 8009d6a:	6083      	strpl	r3, [r0, #8]
 8009d6c:	4770      	bx	lr

08009d6e <adc_calibration_enable>:
 8009d6e:	6883      	ldr	r3, [r0, #8]
 8009d70:	f100 0208 	add.w	r2, r0, #8
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	6083      	str	r3, [r0, #8]
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d4fc      	bmi.n	8009d7a <adc_calibration_enable+0xc>
 8009d80:	6883      	ldr	r3, [r0, #8]
 8009d82:	f043 0304 	orr.w	r3, r3, #4
 8009d86:	6083      	str	r3, [r0, #8]
 8009d88:	6813      	ldr	r3, [r2, #0]
 8009d8a:	075b      	lsls	r3, r3, #29
 8009d8c:	d4fc      	bmi.n	8009d88 <adc_calibration_enable+0x1a>
 8009d8e:	4770      	bx	lr

08009d90 <adc_tempsensor_vrefint_enable>:
 8009d90:	4a03      	ldr	r2, [pc, #12]	; (8009da0 <adc_tempsensor_vrefint_enable+0x10>)
 8009d92:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8009d96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d9a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009d9e:	4770      	bx	lr
 8009da0:	40012000 	andmi	r2, r1, r0

08009da4 <adc_channel_length_config>:
 8009da4:	2901      	cmp	r1, #1
 8009da6:	d002      	beq.n	8009dae <adc_channel_length_config+0xa>
 8009da8:	2902      	cmp	r1, #2
 8009daa:	d00c      	beq.n	8009dc6 <adc_channel_length_config+0x22>
 8009dac:	4770      	bx	lr
 8009dae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009db0:	3a01      	subs	r2, #1
 8009db2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009db6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009db8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009dba:	0512      	lsls	r2, r2, #20
 8009dbc:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009dc4:	4770      	bx	lr
 8009dc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009dc8:	3a01      	subs	r2, #1
 8009dca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009dce:	6383      	str	r3, [r0, #56]	; 0x38
 8009dd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009dd2:	0512      	lsls	r2, r2, #20
 8009dd4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	6382      	str	r2, [r0, #56]	; 0x38
 8009ddc:	4770      	bx	lr

08009dde <adc_inserted_channel_config>:
 8009dde:	b530      	push	{r4, r5, lr}
 8009de0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009de2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009de4:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8009de8:	1a61      	subs	r1, r4, r1
 8009dea:	f06f 0404 	mvn.w	r4, #4
 8009dee:	4361      	muls	r1, r4
 8009df0:	241f      	movs	r4, #31
 8009df2:	310f      	adds	r1, #15
 8009df4:	408c      	lsls	r4, r1
 8009df6:	ea25 0504 	bic.w	r5, r5, r4
 8009dfa:	fa02 f101 	lsl.w	r1, r2, r1
 8009dfe:	4329      	orrs	r1, r5
 8009e00:	2a09      	cmp	r2, #9
 8009e02:	6381      	str	r1, [r0, #56]	; 0x38
 8009e04:	d80b      	bhi.n	8009e1e <adc_inserted_channel_config+0x40>
 8009e06:	2407      	movs	r4, #7
 8009e08:	6901      	ldr	r1, [r0, #16]
 8009e0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009e0e:	4094      	lsls	r4, r2
 8009e10:	ea21 0104 	bic.w	r1, r1, r4
 8009e14:	fa03 f202 	lsl.w	r2, r3, r2
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	6102      	str	r2, [r0, #16]
 8009e1c:	bd30      	pop	{r4, r5, pc}
 8009e1e:	2a11      	cmp	r2, #17
 8009e20:	d8fc      	bhi.n	8009e1c <adc_inserted_channel_config+0x3e>
 8009e22:	2407      	movs	r4, #7
 8009e24:	3a0a      	subs	r2, #10
 8009e26:	68c1      	ldr	r1, [r0, #12]
 8009e28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009e2c:	4094      	lsls	r4, r2
 8009e2e:	ea21 0104 	bic.w	r1, r1, r4
 8009e32:	4093      	lsls	r3, r2
 8009e34:	430b      	orrs	r3, r1
 8009e36:	60c3      	str	r3, [r0, #12]
 8009e38:	e7f0      	b.n	8009e1c <adc_inserted_channel_config+0x3e>

08009e3a <adc_external_trigger_source_config>:
 8009e3a:	2901      	cmp	r1, #1
 8009e3c:	d002      	beq.n	8009e44 <adc_external_trigger_source_config+0xa>
 8009e3e:	2902      	cmp	r1, #2
 8009e40:	d008      	beq.n	8009e54 <adc_external_trigger_source_config+0x1a>
 8009e42:	4770      	bx	lr
 8009e44:	6883      	ldr	r3, [r0, #8]
 8009e46:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009e4a:	6083      	str	r3, [r0, #8]
 8009e4c:	6883      	ldr	r3, [r0, #8]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	6083      	str	r3, [r0, #8]
 8009e52:	4770      	bx	lr
 8009e54:	6883      	ldr	r3, [r0, #8]
 8009e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e5a:	e7f6      	b.n	8009e4a <adc_external_trigger_source_config+0x10>

08009e5c <adc_external_trigger_config>:
 8009e5c:	f001 0301 	and.w	r3, r1, #1
 8009e60:	f001 0102 	and.w	r1, r1, #2
 8009e64:	b152      	cbz	r2, 8009e7c <adc_external_trigger_config+0x20>
 8009e66:	b11b      	cbz	r3, 8009e70 <adc_external_trigger_config+0x14>
 8009e68:	6883      	ldr	r3, [r0, #8]
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e6e:	6083      	str	r3, [r0, #8]
 8009e70:	b119      	cbz	r1, 8009e7a <adc_external_trigger_config+0x1e>
 8009e72:	6883      	ldr	r3, [r0, #8]
 8009e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e78:	6083      	str	r3, [r0, #8]
 8009e7a:	4770      	bx	lr
 8009e7c:	b11b      	cbz	r3, 8009e86 <adc_external_trigger_config+0x2a>
 8009e7e:	6883      	ldr	r3, [r0, #8]
 8009e80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e84:	6083      	str	r3, [r0, #8]
 8009e86:	2900      	cmp	r1, #0
 8009e88:	d0f7      	beq.n	8009e7a <adc_external_trigger_config+0x1e>
 8009e8a:	6883      	ldr	r3, [r0, #8]
 8009e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e90:	e7f2      	b.n	8009e78 <adc_external_trigger_config+0x1c>

08009e92 <adc_software_trigger_enable>:
 8009e92:	07ca      	lsls	r2, r1, #31
 8009e94:	bf42      	ittt	mi
 8009e96:	6883      	ldrmi	r3, [r0, #8]
 8009e98:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009e9c:	6083      	strmi	r3, [r0, #8]
 8009e9e:	078b      	lsls	r3, r1, #30
 8009ea0:	bf42      	ittt	mi
 8009ea2:	6883      	ldrmi	r3, [r0, #8]
 8009ea4:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009ea8:	6083      	strmi	r3, [r0, #8]
 8009eaa:	4770      	bx	lr

08009eac <i2c_clock_config>:
 8009eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eae:	4605      	mov	r5, r0
 8009eb0:	2002      	movs	r0, #2
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4617      	mov	r7, r2
 8009eb6:	f7ff f8d1 	bl	800905c <rcu_clock_freq_get>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4828      	ldr	r0, [pc, #160]	; (8009f60 <i2c_clock_config+0xb4>)
 8009ebe:	4a29      	ldr	r2, [pc, #164]	; (8009f64 <i2c_clock_config+0xb8>)
 8009ec0:	fbb3 f0f0 	udiv	r0, r3, r0
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	bf34      	ite	cc
 8009ec8:	4601      	movcc	r1, r0
 8009eca:	2136      	movcs	r1, #54	; 0x36
 8009ecc:	686e      	ldr	r6, [r5, #4]
 8009ece:	4a26      	ldr	r2, [pc, #152]	; (8009f68 <i2c_clock_config+0xbc>)
 8009ed0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8009ed4:	430e      	orrs	r6, r1
 8009ed6:	4294      	cmp	r4, r2
 8009ed8:	606e      	str	r6, [r5, #4]
 8009eda:	d816      	bhi.n	8009f0a <i2c_clock_config+0x5e>
 8009edc:	3001      	adds	r0, #1
 8009ede:	2835      	cmp	r0, #53	; 0x35
 8009ee0:	d90d      	bls.n	8009efe <i2c_clock_config+0x52>
 8009ee2:	2236      	movs	r2, #54	; 0x36
 8009ee4:	622a      	str	r2, [r5, #32]
 8009ee6:	0064      	lsls	r4, r4, #1
 8009ee8:	fbb3 f4f4 	udiv	r4, r3, r4
 8009eec:	2c04      	cmp	r4, #4
 8009eee:	bf38      	it	cc
 8009ef0:	2404      	movcc	r4, #4
 8009ef2:	69ea      	ldr	r2, [r5, #28]
 8009ef4:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8009ef8:	4314      	orrs	r4, r2
 8009efa:	61ec      	str	r4, [r5, #28]
 8009efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009efe:	2802      	cmp	r0, #2
 8009f00:	d801      	bhi.n	8009f06 <i2c_clock_config+0x5a>
 8009f02:	2202      	movs	r2, #2
 8009f04:	e7ee      	b.n	8009ee4 <i2c_clock_config+0x38>
 8009f06:	6228      	str	r0, [r5, #32]
 8009f08:	e7ed      	b.n	8009ee6 <i2c_clock_config+0x3a>
 8009f0a:	4a18      	ldr	r2, [pc, #96]	; (8009f6c <i2c_clock_config+0xc0>)
 8009f0c:	4294      	cmp	r4, r2
 8009f0e:	d8f5      	bhi.n	8009efc <i2c_clock_config+0x50>
 8009f10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f14:	4351      	muls	r1, r2
 8009f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f1a:	fbb1 f1f2 	udiv	r1, r1, r2
 8009f1e:	3101      	adds	r1, #1
 8009f20:	6229      	str	r1, [r5, #32]
 8009f22:	b9a7      	cbnz	r7, 8009f4e <i2c_clock_config+0xa2>
 8009f24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009f28:	fbb3 f4f4 	udiv	r4, r3, r4
 8009f2c:	69eb      	ldr	r3, [r5, #28]
 8009f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f32:	61eb      	str	r3, [r5, #28]
 8009f34:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8009f38:	b90b      	cbnz	r3, 8009f3e <i2c_clock_config+0x92>
 8009f3a:	f044 0401 	orr.w	r4, r4, #1
 8009f3e:	69eb      	ldr	r3, [r5, #28]
 8009f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f44:	61eb      	str	r3, [r5, #28]
 8009f46:	69eb      	ldr	r3, [r5, #28]
 8009f48:	4323      	orrs	r3, r4
 8009f4a:	61eb      	str	r3, [r5, #28]
 8009f4c:	e7d6      	b.n	8009efc <i2c_clock_config+0x50>
 8009f4e:	2219      	movs	r2, #25
 8009f50:	4354      	muls	r4, r2
 8009f52:	fbb3 f4f4 	udiv	r4, r3, r4
 8009f56:	69eb      	ldr	r3, [r5, #28]
 8009f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f5c:	e7e9      	b.n	8009f32 <i2c_clock_config+0x86>
 8009f5e:	bf00      	nop
 8009f60:	000f4240 	andeq	r4, pc, r0, asr #4
 8009f64:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8009f68:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009f6c:	00061a80 	andeq	r1, r6, r0, lsl #21

08009f70 <i2c_ack_config>:
 8009f70:	6803      	ldr	r3, [r0, #0]
 8009f72:	2901      	cmp	r1, #1
 8009f74:	bf0c      	ite	eq
 8009f76:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8009f7a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009f7e:	6003      	str	r3, [r0, #0]
 8009f80:	4770      	bx	lr

08009f82 <i2c_ackpos_config>:
 8009f82:	6803      	ldr	r3, [r0, #0]
 8009f84:	b919      	cbnz	r1, 8009f8e <i2c_ackpos_config+0xc>
 8009f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f8a:	6003      	str	r3, [r0, #0]
 8009f8c:	4770      	bx	lr
 8009f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f92:	e7fa      	b.n	8009f8a <i2c_ackpos_config+0x8>

08009f94 <i2c_master_addressing>:
 8009f94:	3202      	adds	r2, #2
 8009f96:	bf0c      	ite	eq
 8009f98:	f021 0101 	biceq.w	r1, r1, #1
 8009f9c:	f041 0101 	orrne.w	r1, r1, #1
 8009fa0:	6101      	str	r1, [r0, #16]
 8009fa2:	4770      	bx	lr

08009fa4 <i2c_enable>:
 8009fa4:	6803      	ldr	r3, [r0, #0]
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	4770      	bx	lr

08009fae <i2c_start_on_bus>:
 8009fae:	6803      	ldr	r3, [r0, #0]
 8009fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb4:	6003      	str	r3, [r0, #0]
 8009fb6:	4770      	bx	lr

08009fb8 <i2c_stop_on_bus>:
 8009fb8:	6803      	ldr	r3, [r0, #0]
 8009fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fbe:	6003      	str	r3, [r0, #0]
 8009fc0:	4770      	bx	lr

08009fc2 <i2c_data_transmit>:
 8009fc2:	6101      	str	r1, [r0, #16]
 8009fc4:	4770      	bx	lr

08009fc6 <i2c_data_receive>:
 8009fc6:	6900      	ldr	r0, [r0, #16]
 8009fc8:	b2c0      	uxtb	r0, r0
 8009fca:	4770      	bx	lr

08009fcc <i2c_flag_get>:
 8009fcc:	098b      	lsrs	r3, r1, #6
 8009fce:	581a      	ldr	r2, [r3, r0]
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f001 011f 	and.w	r1, r1, #31
 8009fd6:	408b      	lsls	r3, r1
 8009fd8:	4213      	tst	r3, r2
 8009fda:	bf14      	ite	ne
 8009fdc:	2001      	movne	r0, #1
 8009fde:	2000      	moveq	r0, #0
 8009fe0:	4770      	bx	lr

08009fe2 <i2c_flag_clear>:
 8009fe2:	f240 5301 	movw	r3, #1281	; 0x501
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	d102      	bne.n	8009ff2 <i2c_flag_clear+0x10>
 8009fec:	6943      	ldr	r3, [r0, #20]
 8009fee:	6983      	ldr	r3, [r0, #24]
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	098c      	lsrs	r4, r1, #6
 8009ff6:	5823      	ldr	r3, [r4, r0]
 8009ff8:	f001 011f 	and.w	r1, r1, #31
 8009ffc:	408a      	lsls	r2, r1
 8009ffe:	ea23 0302 	bic.w	r3, r3, r2
 800a002:	5023      	str	r3, [r4, r0]
 800a004:	e7f4      	b.n	8009ff0 <i2c_flag_clear+0xe>

0800a006 <i2s_init>:
 800a006:	b510      	push	{r4, lr}
 800a008:	69c4      	ldr	r4, [r0, #28]
 800a00a:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 800a00e:	f024 0408 	bic.w	r4, r4, #8
 800a012:	0424      	lsls	r4, r4, #16
 800a014:	0c24      	lsrs	r4, r4, #16
 800a016:	431c      	orrs	r4, r3
 800a018:	4314      	orrs	r4, r2
 800a01a:	430c      	orrs	r4, r1
 800a01c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800a020:	61c4      	str	r4, [r0, #28]
 800a022:	bd10      	pop	{r4, pc}

0800a024 <i2s_psc_config>:
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	461f      	mov	r7, r3
 800a028:	2302      	movs	r3, #2
 800a02a:	4605      	mov	r5, r0
 800a02c:	6203      	str	r3, [r0, #32]
 800a02e:	2000      	movs	r0, #0
 800a030:	460c      	mov	r4, r1
 800a032:	4616      	mov	r6, r2
 800a034:	f7ff f812 	bl	800905c <rcu_clock_freq_get>
 800a038:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800a03c:	f04f 030a 	mov.w	r3, #10
 800a040:	d11b      	bne.n	800a07a <i2s_psc_config+0x56>
 800a042:	0a00      	lsrs	r0, r0, #8
 800a044:	4358      	muls	r0, r3
 800a046:	fbb0 f4f4 	udiv	r4, r0, r4
 800a04a:	230a      	movs	r3, #10
 800a04c:	3405      	adds	r4, #5
 800a04e:	fbb4 f4f3 	udiv	r4, r4, r3
 800a052:	f004 0301 	and.w	r3, r4, #1
 800a056:	0864      	lsrs	r4, r4, #1
 800a058:	1ea2      	subs	r2, r4, #2
 800a05a:	2afd      	cmp	r2, #253	; 0xfd
 800a05c:	bf86      	itte	hi
 800a05e:	2300      	movhi	r3, #0
 800a060:	2402      	movhi	r4, #2
 800a062:	021b      	lslls	r3, r3, #8
 800a064:	431c      	orrs	r4, r3
 800a066:	433c      	orrs	r4, r7
 800a068:	622c      	str	r4, [r5, #32]
 800a06a:	69eb      	ldr	r3, [r5, #28]
 800a06c:	f023 0307 	bic.w	r3, r3, #7
 800a070:	61eb      	str	r3, [r5, #28]
 800a072:	69eb      	ldr	r3, [r5, #28]
 800a074:	4333      	orrs	r3, r6
 800a076:	61eb      	str	r3, [r5, #28]
 800a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07a:	b90e      	cbnz	r6, 800a080 <i2s_psc_config+0x5c>
 800a07c:	0940      	lsrs	r0, r0, #5
 800a07e:	e7e1      	b.n	800a044 <i2s_psc_config+0x20>
 800a080:	0980      	lsrs	r0, r0, #6
 800a082:	e7df      	b.n	800a044 <i2s_psc_config+0x20>

0800a084 <i2s_enable>:
 800a084:	69c3      	ldr	r3, [r0, #28]
 800a086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a08a:	61c3      	str	r3, [r0, #28]
 800a08c:	4770      	bx	lr

0800a08e <i2s_disable>:
 800a08e:	69c3      	ldr	r3, [r0, #28]
 800a090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a094:	61c3      	str	r3, [r0, #28]
 800a096:	4770      	bx	lr

0800a098 <spi_dma_enable>:
 800a098:	6843      	ldr	r3, [r0, #4]
 800a09a:	b919      	cbnz	r1, 800a0a4 <spi_dma_enable+0xc>
 800a09c:	f043 0302 	orr.w	r3, r3, #2
 800a0a0:	6043      	str	r3, [r0, #4]
 800a0a2:	4770      	bx	lr
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	e7fa      	b.n	800a0a0 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

0800a0ac <vtable for RDMResponder-0xc4>:
 800a0ac:	00000000 	andeq	r0, r0, r0
 800a0b0:	18002000 	stmdane	r0, {sp}
 800a0b4:	00180400 	andseq	r0, r8, r0, lsl #8
 800a0b8:	00000007 	andeq	r0, r0, r7
	...
 800a0c4:	03020100 	movweq	r0, #8448	; 0x2100
 800a0c8:	08070604 	stmdaeq	r7, {r2, r9, sl}
 800a0cc:	00000009 	andeq	r0, r0, r9
 800a0d0:	03020100 	movweq	r0, #8448	; 0x2100
 800a0d4:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 800a0d8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a0dc:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 800a0e0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 800a0e4:	6f430064 	svcvs	0x00430064
 800a0e8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a0ec:	646f4d20 	strbtvs	r4, [pc], #-3360	; 800a0f4 <_etext+0x48>
 800a0f0:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 800a0f4:	3a33343a 	bcc	8cd71e4 <__exidx_end+0xccb044>
 800a0f8:	44003832 	strmi	r3, [r0], #-2098	; 0xfffff7ce
 800a0fc:	31206365 			; <UNDEFINED> instruction: 0x31206365
 800a100:	30322037 	eorscc	r2, r2, r7, lsr r0
 800a104:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 800a108:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 800a10c:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 800a110:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 800a114:	6f43005d 	svcvs	0x0043005d
 800a118:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a11c:	646f6d20 	strbtvs	r6, [pc], #-3360	; 800a124 <_etext+0x78>
 800a120:	4f200065 	svcmi	0x00200065
 800a124:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 800a128:	73252074 			; <UNDEFINED> instruction: 0x73252074
 800a12c:	6554000a 	ldrbvs	r0, [r4, #-10]
 800a130:	70207473 	eorvc	r7, r0, r3, ror r4
 800a134:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a138:	3a206e72 	bcc	8825b08 <__exidx_end+0x819968>
 800a13c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800a140:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 800a144:	4452000a 	ldrbmi	r0, [r2], #-10
 800a148:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 800a14c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 800a150:	20726564 	rsbscs	r6, r2, r4, ror #10
 800a154:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800a158:	0031206c 	eorseq	r2, r1, ip, rrx
 800a15c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 800a160:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 800a164:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800a168:	3a732500 	bcc	9cd3570 <__exidx_end+0x1cc73d0>
 800a16c:	00007525 	andeq	r7, r0, r5, lsr #10

0800a170 <vtable for RDMResponder>:
	...
 800a178:	080010bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, ip}
 800a17c:	08001105 	stmdaeq	r0, {r0, r2, r8, ip}
 800a180:	08001069 	stmdaeq	r0, {r0, r3, r5, r6, ip}
 800a184:	0800109d 	stmdaeq	r0, {r0, r2, r3, r4, r7, ip}

0800a188 <vtable for PixelDmxStartStop>:
	...
 800a190:	08001043 	stmdaeq	r0, {r0, r1, r6, ip}
 800a194:	0800105d 	stmdaeq	r0, {r0, r2, r3, r4, r6, ip}
 800a198:	08001045 	stmdaeq	r0, {r0, r2, r6, ip}
 800a19c:	08001051 	stmdaeq	r0, {r0, r4, r6, ip}

0800a1a0 <SOFTWARE_VERSION>:
 800a1a0:	00352e31 	eorseq	r2, r5, r1, lsr lr

0800a1a4 <gamma10_0>:
 800a1a4:	03020100 	movweq	r0, #8448	; 0x2100
 800a1a8:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800a1ac:	0b0a0908 	bleq	828c5d4 <__exidx_end+0x280434>
 800a1b0:	0f0e0d0c 	svceq	0x000e0d0c
 800a1b4:	13121110 	tstne	r2, #16, 2
 800a1b8:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800a1bc:	1b1a1918 	blne	8690624 <__exidx_end+0x684484>
 800a1c0:	1f1e1d1c 	svcne	0x001e1d1c
 800a1c4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800a1c8:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800a1cc:	2b2a2928 	blcs	8a94674 <__exidx_end+0xa884d4>
 800a1d0:	2f2e2d2c 	svccs	0x002e2d2c
 800a1d4:	33323130 	teqcc	r2, #48, 2
 800a1d8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800a1dc:	3b3a3938 	blcc	8e986c4 <__exidx_end+0xe8c524>
 800a1e0:	3f3e3d3c 	svccc	0x003e3d3c
 800a1e4:	43424140 	movtmi	r4, #8512	; 0x2140
 800a1e8:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800a1ec:	4b4a4948 	blmi	929c714 <__exidx_end+0x1290574>
 800a1f0:	4f4e4d4c 	svcmi	0x004e4d4c
 800a1f4:	53525150 	cmppl	r2, #80, 2
 800a1f8:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800a1fc:	5b5a5958 	blpl	96a0764 <__exidx_end+0x16945c4>
 800a200:	5f5e5d5c 	svcpl	0x005e5d5c
 800a204:	63626160 	cmnvs	r2, #96, 2
 800a208:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800a20c:	6b6a6968 	blvs	9aa47b4 <__exidx_end+0x1a98614>
 800a210:	6f6e6d6c 	svcvs	0x006e6d6c
 800a214:	73727170 	cmnvc	r2, #112, 2
 800a218:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800a21c:	7b7a7978 	blvc	9ea8804 <__exidx_end+0x1e9c664>
 800a220:	7f7e7d7c 	svcvc	0x007e7d7c
 800a224:	83828180 	orrhi	r8, r2, #128, 2
 800a228:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800a22c:	8b8a8988 	blhi	62ac854 <__heap_size+0x62ab854>
 800a230:	8f8e8d8c 	svchi	0x008e8d8c
 800a234:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800a238:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800a23c:	9b9a9998 	blls	66b08a4 <__heap_size+0x66af8a4>
 800a240:	9f9e9d9c 	svcls	0x009e9d9c
 800a244:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800a248:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800a24c:	abaaa9a8 	blge	6ab48f4 <__heap_size+0x6ab38f4>
 800a250:	afaeadac 	svcge	0x00aeadac
 800a254:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800a258:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800a25c:	bbbab9b8 	bllt	6eb8944 <__heap_size+0x6eb7944>
 800a260:	bfbebdbc 	svclt	0x00bebdbc
 800a264:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800a268:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800a26c:	cbcac9c8 	blgt	72bc994 <__heap_size+0x72bb994>
 800a270:	cfcecdcc 	svcgt	0x00cecdcc
 800a274:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800a278:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800a27c:	dbdad9d8 	blle	76c09e4 <__heap_size+0x76bf9e4>
 800a280:	dfdedddc 	svcle	0x00dedddc
 800a284:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800a288:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800a28c:	ebeae9e8 	bl	7ac4a34 <__heap_size+0x7ac3a34>
 800a290:	efeeedec 	svc	0x00eeedec
 800a294:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800a298:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800a29c:	fbfaf9f8 	blx	7ec8a86 <__heap_size+0x7ec7a86>
 800a2a0:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800a2a4:	30322d25 	eorscc	r2, r2, r5, lsr #26
 800a2a8:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 800a2ac:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 800a2b0:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 800a2b4:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a2b8:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a2bc:	50007335 	andpl	r7, r0, r5, lsr r3
 800a2c0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a2c4:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a2c8:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a2cc:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a2d0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a2d4:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a2d8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a2dc:	614d0074 	hvcvs	53252	; 0xd004
 800a2e0:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a2e4:	50207473 	eorpl	r7, r0, r3, ror r4
 800a2e8:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a2ec:	50006e72 	andpl	r6, r0, r2, ror lr
 800a2f0:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a2f4:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a2f8:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a2fc:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a301 <SOFTWARE_VERSION>:
 800a301:	00352e31 	eorseq	r2, r5, r1, lsr lr
 800a305:	00555043 	subseq	r5, r5, r3, asr #32
 800a309:	 	andeq	r0, r0, r0

0800a30c <vtable for CpuTemperature>:
	...
 800a314:	08002735 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, sp}
 800a318:	08002745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, sp}
 800a31c:	08002731 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, sp}
 800a320:	08002737 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, sl, sp}

0800a324 <vtable for RDMSensorBH170>:
	...
 800a32c:	080029b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, fp, sp}
 800a330:	080029b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, sp}
 800a334:	0800286b 	stmdaeq	r0, {r0, r1, r3, r5, r6, fp, sp}
 800a338:	08002939 	stmdaeq	r0, {r0, r3, r4, r5, r8, fp, sp}

0800a33c <vtable for RDMSensorMCP9808>:
	...
 800a344:	080029a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, sp}
 800a348:	080029ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, fp, sp}
 800a34c:	08002871 	stmdaeq	r0, {r0, r4, r5, r6, fp, sp}
 800a350:	08002929 	stmdaeq	r0, {r0, r3, r5, r8, fp, sp}

0800a354 <vtable for RDMSensorHTU21DHumidity>:
	...
 800a35c:	0800299b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, fp, sp}
 800a360:	0800299d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp}
 800a364:	08002877 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, fp, sp}
 800a368:	08002919 	stmdaeq	r0, {r0, r3, r4, r8, fp, sp}

0800a36c <vtable for RDMSensorHTU21DTemperature>:
	...
 800a374:	0800298d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, sp}
 800a378:	0800298f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, fp, sp}
 800a37c:	0800287d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, sp}
 800a380:	08002909 	stmdaeq	r0, {r0, r3, r8, fp, sp}

0800a384 <vtable for RDMSensorINA219Current>:
	...
 800a38c:	0800297f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, fp, sp}
 800a390:	08002981 	stmdaeq	r0, {r0, r7, r8, fp, sp}
 800a394:	08002883 	stmdaeq	r0, {r0, r1, r7, fp, sp}
 800a398:	080028ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, sp}

0800a39c <vtable for RDMSensorINA219Power>:
	...
 800a3a4:	08002971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, sp}
 800a3a8:	08002973 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, fp, sp}
 800a3ac:	08002889 	stmdaeq	r0, {r0, r3, r7, fp, sp}
 800a3b0:	080028dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, sp}

0800a3b4 <vtable for RDMSensorINA219Voltage>:
	...
 800a3bc:	08002963 	stmdaeq	r0, {r0, r1, r5, r6, r8, fp, sp}
 800a3c0:	08002965 	stmdaeq	r0, {r0, r2, r5, r6, r8, fp, sp}
 800a3c4:	0800288f 	stmdaeq	r0, {r0, r1, r2, r3, r7, fp, sp}
 800a3c8:	080028c1 	stmdaeq	r0, {r0, r6, r7, fp, sp}

0800a3cc <vtable for RDMSensorSI7021Humidity>:
	...
 800a3d4:	08002955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, sp}
 800a3d8:	08002957 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, fp, sp}
 800a3dc:	08002895 	stmdaeq	r0, {r0, r2, r4, r7, fp, sp}
 800a3e0:	080028b1 	stmdaeq	r0, {r0, r4, r5, r7, fp, sp}

0800a3e4 <vtable for RDMSensorSI7021Temperature>:
	...
 800a3ec:	08002947 	stmdaeq	r0, {r0, r1, r2, r6, r8, fp, sp}
 800a3f0:	08002949 	stmdaeq	r0, {r0, r3, r6, r8, fp, sp}
 800a3f4:	0800289b 	stmdaeq	r0, {r0, r1, r3, r4, r7, fp, sp}
 800a3f8:	080028a1 	stmdaeq	r0, {r0, r5, r7, fp, sp}

0800a3fc <sensor::bh1750::DESCRIPTION>:
 800a3fc:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a400:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a404:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a408:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a40a <sensor::htu21d::temperature::DESCRIPTION>:
 800a40a:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a40e:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a412:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a416:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a41a:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a41e <sensor::htu21d::humidity::DESCRIPTION>:
 800a41e:	616c6552 	cmnvs	ip, r2, asr r5
 800a422:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a426:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a42a:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a42e:	 	svcvs	0x00500079

0800a430 <sensor::ina219::power::DESCRIPTION>:
 800a430:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a434:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a436 <sensor::ina219::current::DESCRIPTION>:
 800a436:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a43a:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a43e <sensor::ina219::voltage::DESCRIPTION>:
 800a43e:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a442:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a446 <sensor::si7021::temperature::DESCRIPTION>:
 800a446:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a44a:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a44e:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a452:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a456:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a45a <sensor::si7021::humidity::DESCRIPTION>:
 800a45a:	616c6552 	cmnvs	ip, r2, asr r5
 800a45e:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a462:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a466:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a46a:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a46c <sensor::mcp9808::DESCRIPTION>:
 800a46c:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a470:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a474:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a478:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a47c:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a480 <vtable for RDMSensor>:
	...
 800a498:	204d4452 	subcs	r4, sp, r2, asr r4
 800a49c:	70736552 	rsbsvc	r6, r3, r2, asr r5
 800a4a0:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 800a4a4:	6f632072 	svcvs	0x00632072
 800a4a8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a4ac:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a4b0:	0a6e6f69 	beq	9ba625c <__exidx_end+0x1b9a0bc>
 800a4b4:	72502000 	subsvc	r2, r0, #0
 800a4b8:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 800a4bc:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 800a4c0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 800a4c4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800a4c8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 800a4cc:	4420000a 	strtmi	r0, [r0], #-10
 800a4d0:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 800a4d4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 800a4d8:	20207373 	eorcs	r7, r0, r3, ror r3
 800a4dc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a4e0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a4e4:	4420000a 	strtmi	r0, [r0], #-10
 800a4e8:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 800a4ec:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 800a4f0:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 800a4f4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a4f8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a4fc:	5020000a 	eorpl	r0, r0, sl
 800a500:	6f737265 	svcvs	0x00737265
 800a504:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 800a508:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 800a50c:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 800a510:	20642520 	rsbcs	r2, r4, r0, lsr #10
 800a514:	2a2e255b 	bcs	8b93a88 <__exidx_end+0xb878e8>
 800a518:	000a5d73 	andeq	r5, sl, r3, ror sp
 800a51c:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 800a520:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a524:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 800a528:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a52c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a530:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a534:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 800a538:	73726f73 	cmnvc	r2, #460	; 0x1cc
 800a53c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a540:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a544:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a548:	000a6425 	andeq	r6, sl, r5, lsr #8

0800a54c <vtable for RDMDeviceResponder>:
	...
 800a554:	08004085 	stmdaeq	r0, {r0, r2, r7, lr}
 800a558:	080040a5 	stmdaeq	r0, {r0, r2, r5, r7, lr}
 800a55c:	08004081 	stmdaeq	r0, {r0, r7, lr}
 800a560:	08004083 	stmdaeq	r0, {r0, r1, r7, lr}
 800a564:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a568:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a56c:	45004352 	strmi	r4, [r0, #-850]	; 0xfffffcae
 800a570:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 800a574:	00646564 	rsbeq	r6, r4, r4, ror #10

0800a578 <UID_ALL>:
 800a578:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a57c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a580 <RDMHandler::PID_DEFINITIONS>:
 800a580:	00000060 	andeq	r0, r0, r0, rrx
 800a584:	080045c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, lr}
	...
 800a594:	01010000 	mrseq	r0, (UNDEF: 1)
 800a598:	00000080 	andeq	r0, r0, r0, lsl #1
 800a59c:	080046cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, lr}
	...
 800a5ac:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5b0:	00000081 	andeq	r0, r0, r1, lsl #1
 800a5b4:	080046e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, lr}
	...
 800a5c4:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5c8:	00000082 	andeq	r0, r0, r2, lsl #1
 800a5cc:	08004709 	stmdaeq	r0, {r0, r3, r8, r9, sl, lr}
 800a5d0:	00000000 	andeq	r0, r0, r0
 800a5d4:	08005105 	stmdaeq	r0, {r0, r2, r8, ip, lr}
 800a5d8:	00000000 	andeq	r0, r0, r0
 800a5dc:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5e0:	00000090 	muleq	r0, r0, r0
 800a5e4:	08004631 	stmdaeq	r0, {r0, r4, r5, r9, sl, lr}
 800a5e8:	00000000 	andeq	r0, r0, r0
 800a5ec:	0800504d 	stmdaeq	r0, {r0, r2, r3, r6, ip, lr}
 800a5f0:	00000000 	andeq	r0, r0, r0
 800a5f4:	01010100 	mrseq	r0, (UNDEF: 17)
 800a5f8:	00001000 	andeq	r1, r0, r0
 800a5fc:	08004769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, lr}
 800a600:	00000000 	andeq	r0, r0, r0
 800a604:	080049e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, fp, lr}
 800a608:	00000000 	andeq	r0, r0, r0
 800a60c:	01010000 	mrseq	r0, (UNDEF: 1)
 800a610:	00001001 	andeq	r1, r0, r1
	...
 800a61c:	080049a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, lr}
 800a620:	00000000 	andeq	r0, r0, r0
 800a624:	01010100 	mrseq	r0, (UNDEF: 17)
 800a628:	00000050 	andeq	r0, r0, r0, asr r0
 800a62c:	0800455d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, lr}
	...
 800a63c:	00010000 	andeq	r0, r1, r0
 800a640:	00000070 	andeq	r0, r0, r0, ror r0
 800a644:	080046b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, lr}
	...
 800a654:	00010100 	andeq	r0, r1, r0, lsl #2
 800a658:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a65c:	0800477d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, lr}
	...
 800a66c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a670:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a674:	0800477d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, lr}
 800a678:	00000000 	andeq	r0, r0, r0
 800a67c:	08004a65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp, lr}
 800a680:	00000000 	andeq	r0, r0, r0
 800a684:	00010100 	andeq	r0, r1, r0, lsl #2
 800a688:	000000c0 	andeq	r0, r0, r0, asr #1
 800a68c:	08004745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, lr}
	...
 800a69c:	00010000 	andeq	r0, r1, r0
 800a6a0:	000000c1 	andeq	r0, r0, r1, asr #1
 800a6a4:	08004aad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, fp, lr}
	...
 800a6b4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6b8:	000000c2 	andeq	r0, r0, r2, asr #1
 800a6bc:	080048ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, lr}
	...
 800a6cc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6d0:	000000e0 	andeq	r0, r0, r0, ror #1
 800a6d4:	0800479d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, lr}
 800a6d8:	00000000 	andeq	r0, r0, r0
 800a6dc:	08004acd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, lr}
 800a6e0:	00000000 	andeq	r0, r0, r0
 800a6e4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6e8:	000000e1 	andeq	r0, r0, r1, ror #1
 800a6ec:	08004b1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp, lr}
	...
 800a6fc:	00010101 	andeq	r0, r1, r1, lsl #2
 800a700:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a704:	080047d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, lr}
 800a708:	00000000 	andeq	r0, r0, r0
 800a70c:	08004ba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp, lr}
 800a710:	00000000 	andeq	r0, r0, r0
 800a714:	00010000 	andeq	r0, r1, r0
 800a718:	00000120 	andeq	r0, r0, r0, lsr #2
 800a71c:	08004909 	stmdaeq	r0, {r0, r3, r8, fp, lr}
	...
 800a72c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a730:	00000121 	andeq	r0, r0, r1, lsr #2
 800a734:	08004fd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, fp, lr}
	...
 800a744:	00010102 	andeq	r0, r1, r2, lsl #2
 800a748:	00000200 	andeq	r0, r0, r0, lsl #4
 800a74c:	08004bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, lr}
	...
 800a75c:	00010101 	andeq	r0, r1, r1, lsl #2
 800a760:	00000201 	andeq	r0, r0, r1, lsl #4
 800a764:	08004ca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, lr}
 800a768:	00000000 	andeq	r0, r0, r0
 800a76c:	08004d21 	stmdaeq	r0, {r0, r5, r8, sl, fp, lr}
 800a770:	00000000 	andeq	r0, r0, r0
 800a774:	00010101 	andeq	r0, r1, r1, lsl #2
 800a778:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800a784:	08004dd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, fp, lr}
 800a788:	00000000 	andeq	r0, r0, r0
 800a78c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a790:	00000400 	andeq	r0, r0, r0, lsl #8
 800a794:	08004815 	stmdaeq	r0, {r0, r2, r4, fp, lr}
 800a798:	00000000 	andeq	r0, r0, r0
 800a79c:	08004e21 	stmdaeq	r0, {r0, r5, r9, sl, fp, lr}
 800a7a0:	00000000 	andeq	r0, r0, r0
 800a7a4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7a8:	00000500 	andeq	r0, r0, r0, lsl #10
 800a7ac:	0800483d 	stmdaeq	r0, {r0, r2, r3, r4, r5, fp, lr}
 800a7b0:	00000000 	andeq	r0, r0, r0
 800a7b4:	08004e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, lr}
 800a7b8:	00000000 	andeq	r0, r0, r0
 800a7bc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7c0:	00000501 	andeq	r0, r0, r1, lsl #10
 800a7c4:	08004859 	stmdaeq	r0, {r0, r3, r4, r6, fp, lr}
 800a7c8:	00000000 	andeq	r0, r0, r0
 800a7cc:	08004e75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sl, fp, lr}
 800a7d0:	00000000 	andeq	r0, r0, r0
 800a7d4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7d8:	00000603 	andeq	r0, r0, r3, lsl #12
 800a7dc:	08004875 	stmdaeq	r0, {r0, r2, r4, r5, r6, fp, lr}
 800a7e0:	00000000 	andeq	r0, r0, r0
 800a7e4:	08004ebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, lr}
 800a7e8:	00000000 	andeq	r0, r0, r0
 800a7ec:	00010100 	andeq	r0, r1, r0, lsl #2
 800a7f0:	00001010 	andeq	r1, r0, r0, lsl r0
 800a7f4:	080048bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, lr}
 800a7f8:	00000000 	andeq	r0, r0, r0
 800a7fc:	08004f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, lr}
 800a800:	00000000 	andeq	r0, r0, r0
 800a804:	00010100 	andeq	r0, r1, r0, lsl #2
 800a808:	00001020 	andeq	r1, r0, r0, lsr #32
 800a80c:	080048cb 	stmdaeq	r0, {r0, r1, r3, r6, r7, fp, lr}
 800a810:	00000000 	andeq	r0, r0, r0
 800a814:	08004f53 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, fp, lr}
 800a818:	00000000 	andeq	r0, r0, r0
 800a81c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a820:	00001021 	andeq	r1, r0, r1, lsr #32
 800a824:	08004f87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, sl, fp, lr}
	...
 800a834:	00010101 	andeq	r0, r1, r1, lsl #2
 800a838:	00001040 	andeq	r1, r0, r0, asr #32
 800a83c:	080053d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, ip, lr}
 800a840:	00000000 	andeq	r0, r0, r0
 800a844:	080053ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, ip, lr}
 800a848:	00000000 	andeq	r0, r0, r0
 800a84c:	00010100 	andeq	r0, r1, r0, lsl #2

0800a850 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800a850:	00000060 	andeq	r0, r0, r0, rrx
 800a854:	080045c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, lr}
	...
 800a864:	00010100 	andeq	r0, r1, r0, lsl #2
 800a868:	000000c0 	andeq	r0, r0, r0, asr #1
 800a86c:	08004745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, lr}
	...
 800a87c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a880:	00001000 	andeq	r1, r0, r0
 800a884:	08004769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, lr}
 800a888:	00000000 	andeq	r0, r0, r0
 800a88c:	080049e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, fp, lr}
 800a890:	00000000 	andeq	r0, r0, r0
 800a894:	00010100 	andeq	r0, r1, r0, lsl #2
 800a898:	00000050 	andeq	r0, r0, r0, asr r0
 800a89c:	0800455d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, lr}
	...
 800a8ac:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8b0:	00000070 	andeq	r0, r0, r0, ror r0
 800a8b4:	080046b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, lr}
	...
 800a8c4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8c8:	000000e0 	andeq	r0, r0, r0, ror #1
 800a8cc:	0800479d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, lr}
 800a8d0:	00000000 	andeq	r0, r0, r0
 800a8d4:	08004acd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, lr}
 800a8d8:	00000000 	andeq	r0, r0, r0
 800a8dc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a8e0:	000000e1 	andeq	r0, r0, r1, ror #1
 800a8e4:	08004b1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp, lr}
	...
 800a8f4:	00010101 	andeq	r0, r1, r1, lsl #2
 800a8f8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a8fc:	080047d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, lr}
 800a900:	00000000 	andeq	r0, r0, r0
 800a904:	08004ba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp, lr}
 800a908:	00000000 	andeq	r0, r0, r0
 800a90c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a910:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a914:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a918:	6f697469 	svcvs	0x00697469
 800a91c:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a920:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a924:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a928:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a92c:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a930:	614d2079 	hvcvs	53769	; 0xd209
 800a934:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a938:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a93c:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a940:	6f430074 	svcvs	0x00430074
 800a944:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a948:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a94c:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a950:	61727462 	cmnvs	r2, r2, ror #8
 800a954:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a958:	6f432065 	svcvs	0x00432065
 800a95c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a960:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a964:	80e22072 	rschi	r2, r2, r2, ror r0
 800a968:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a96c:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a970:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a974:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a978:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a97c:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a980:	6f6c6f43 	svcvs	0x006c6f43
 800a984:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a988:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a98c:	209380e2 	addscs	r8, r3, r2, ror #1
 800a990:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a994:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a998:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a99c:	62755300 	rsbsvs	r5, r5, #0, 6
 800a9a0:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a9a4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a9a8:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a930 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a9ac:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a9b0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a9b4:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a9b8:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a9bc:	41006174 	tstmi	r0, r4, ror r1
 800a9c0:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a9c4:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a9c8:	6f6c6f43 	svcvs	0x006c6f43
 800a9cc:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a9d0:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a9d4:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800a9d8:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800a9dc:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a9e0:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a9e4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a9e8:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a9ec:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a9f0:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800a9f4:	41006e65 	tstmi	r0, r5, ror #28
 800a9f8:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a9fc:	20657669 	rsbcs	r7, r5, r9, ror #12
 800aa00:	6f6c6f43 	svcvs	0x006c6f43
 800aa04:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800aa08:	20726578 	rsbscs	r6, r2, r8, ror r5
 800aa0c:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800aa10:	43006575 	movwmi	r6, #1397	; 0x575
 800aa14:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800aa18:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800aa1c:	61726570 	cmnvs	r2, r0, ror r5
 800aa20:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800aa24:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800aa28:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800aa2c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800aa30:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800aa34:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800aa38:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a9c0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800aa3c:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800aa40:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800aa44:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800aa48:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800aa4c:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800aa50:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800aa54:	6f432065 	svcvs	0x00432065
 800aa58:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800aa5c:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800aa60:	202d2072 	eorcs	r2, sp, r2, ror r0
 800aa64:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800aa68:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800aa6c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800aa70:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800aa74:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800aa78:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800aa7c:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800aa80:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800aa84:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800aa88:	00657469 	rsbeq	r7, r5, r9, ror #8
 800aa8c:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800aa90:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800aa94:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800aa1c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800aa98:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800aa9c:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800aaa0:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800aaa4:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800aaa8:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800aaac:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800aab0:	61727462 	cmnvs	r2, r2, ror #8
 800aab4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800aab8:	6f432065 	svcvs	0x00432065
 800aabc:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800aac0:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800aac4:	202d2072 	eorcs	r2, sp, r2, ror r0
 800aac8:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800aacc:	53006575 	movwpl	r6, #1397	; 0x575
 800aad0:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800aad4:	6f697461 	svcvs	0x00697461
 800aad8:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800aadc:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800aae0:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800aae4:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800aae8:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800aaec:	61746f52 	cmnvs	r4, r2, asr pc
 800aaf0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800aaf4:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800aaf8:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800aafc:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ab00:	73697250 	cmnvc	r9, #80, 4
 800ab04:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800ab08:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800ab0c:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800ab10:	20737463 	rsbscs	r7, r3, r3, ror #8
 800ab14:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800ab18:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800ab1c:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800ab20:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800ab24:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800ab28:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800ab2c:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800ab30:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800ab34:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800ab38:	6f724600 	svcvs	0x00724600
 800ab3c:	442f7473 	strtmi	r7, [pc], #-1139	; 800ab44 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800ab40:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800ab44:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800ab48:	72745300 	rsbsvc	r5, r4, #0, 6
 800ab4c:	2f65626f 	svccs	0x0065626f
 800ab50:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800ab54:	00726574 	rsbseq	r6, r2, r4, ror r5
 800ab58:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800a9f8 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800ab5c:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800ab60:	72460073 	subvc	r0, r6, #115	; 0x73
 800ab64:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800ab68:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800ab6c:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800ab70:	72460072 	subvc	r0, r6, #114	; 0x72
 800ab74:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800ab78:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800ab7c:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800ab80:	6f722072 	svcvs	0x00722072
 800ab84:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800ab88:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800ab8c:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800ab90:	61420072 	hvcvs	8194	; 0x2002
 800ab94:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800ab98:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800ab9c:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800aba0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800aba4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a9dc <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800aba8:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800abac:	6f697463 	svcvs	0x00697463
 800abb0:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800abb4:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800abb8:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800abbc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800abc0:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800abc4:	6e6e6168 	powvsez	f6, f6, #0.0
 800abc8:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800abcc:	6f726361 	svcvs	0x00726361
 800abd0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800abd4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800aa0c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800abd8:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800abdc:	6f207961 	svcvs	0x00207961
 800abe0:	6f702072 	svcvs	0x00702072
 800abe4:	20726577 	rsbscs	r6, r2, r7, ror r5
 800abe8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800abec:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800abf0:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800abf4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800abf8:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800abfc:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800ac00:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800ac04:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ac08:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800ac0c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800ac10:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800ac14:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800ac18:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800ac1c:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800ac20:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ac24:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800ac28:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800ac30 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800ac2c:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800ac30:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800ac34:	6f632079 	svcvs	0x00632079
 800ac38:	6f72746e 	svcvs	0x0072746e
 800ac3c:	7020736c 	eorvc	r7, r0, ip, ror #6
 800ac40:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ac44:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ac48:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800ac4c:	73657270 	cmnvc	r5, #112, 4
 800ac50:	73746e65 	cmnvc	r4, #1616	; 0x650
 800ac54:	616f4320 	cmnvs	pc, r0, lsr #6
 800ac58:	20657372 	rsbcs	r7, r5, r2, ror r3
 800ac5c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ac60:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800ac64:	70207469 	eorvc	r7, r0, r9, ror #8
 800ac68:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ac6c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ac70:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800ac74:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800ac78:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800ac7c:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800ac80:	20746962 	rsbscs	r6, r4, r2, ror #18
 800ac84:	61726170 	cmnvs	r2, r0, ror r1
 800ac88:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800ac8c:	53007372 	movwpl	r7, #882	; 0x372
 800ac90:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800ac94:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800ac98:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800ac9c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800aca0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800aca4:	6f662065 	svcvs	0x00662065
 800aca8:	73612072 	cmnvc	r1, #114	; 0x72
 800acac:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800acb0:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800acb4:	72617020 	rsbvc	r7, r1, #32
 800acb8:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800acbc:	53007265 	movwpl	r7, #613	; 0x265
 800acc0:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800acc4:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800acc8:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800accc:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800acd0:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800acd4:	20797469 	rsbscs	r7, r9, r9, ror #8
 800acd8:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800acdc:	6f737361 	svcvs	0x00737361
 800ace0:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ace4:	70206465 	eorvc	r6, r0, r5, ror #8
 800ace8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800acec:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800acf0:	6f6c5300 	svcvs	0x006c5300
 800acf4:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800acf8:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800acfc:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800ad00:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ad04:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800ab50 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800ad08:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800ad0c:	6f666e69 	svcvs	0x00666e69
 800ad10:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800ad14:	72617020 	rsbvc	r7, r1, #32
 800ad18:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ad1c:	53007265 	movwpl	r7, #613	; 0x265
 800ad20:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800ad24:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800ad28:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800ad2c:	70207865 	eorvc	r7, r0, r5, ror #16
 800ad30:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800ad34:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ad38:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800ad3c:	6f737361 	svcvs	0x00737361
 800ad40:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800ad44:	70206465 	eorvc	r6, r0, r5, ror #8
 800ad48:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800ad4c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800ad50:	6f6c5300 	svcvs	0x006c5300
 800ad54:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800ad58:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800ad5c:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800ad60:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ad64:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800ad68:	6f662064 	svcvs	0x00662064
 800ad6c:	73612072 	cmnvc	r1, #114	; 0x72
 800ad70:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800ad74:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800ad78:	72617020 	rsbvc	r7, r1, #32
 800ad7c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ad80:	43007265 	movwmi	r7, #613	; 0x265
 800ad84:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800ad88:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800ad8c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800ad90:	6f722f78 	svcvs	0x00722f78
 800ad94:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800ad98:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800ad9c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ada0:	00006c6f 	andeq	r6, r0, pc, ror #24

0800ada4 <s_tTableC2>:
 800ada4:	00000001 	andeq	r0, r0, r1
 800ada8:	0800a91e 	stmdaeq	r0, {r1, r2, r3, r4, r8, fp, sp, pc}
 800adac:	00000002 	andeq	r0, r0, r2
 800adb0:	0800a928 	stmdaeq	r0, {r3, r5, r8, fp, sp, pc}
 800adb4:	00000101 	andeq	r0, r0, r1, lsl #2
 800adb8:	0800a939 	stmdaeq	r0, {r0, r3, r4, r5, r8, fp, sp, pc}
 800adbc:	00000102 	andeq	r0, r0, r2, lsl #2
 800adc0:	0800a93d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, fp, sp, pc}
 800adc4:	00000201 	andeq	r0, r0, r1, lsl #4
 800adc8:	0800a942 	stmdaeq	r0, {r1, r6, r8, fp, sp, pc}
 800adcc:	00000202 	andeq	r0, r0, r2, lsl #4
 800add0:	0800a94e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp, pc}
 800add4:	00000203 	andeq	r0, r0, r3, lsl #4
 800add8:	0800a974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, sp, pc}
 800addc:	00000204 	andeq	r0, r0, r4, lsl #4
 800ade0:	0800a99d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, fp, sp, pc}
 800ade4:	00000205 	andeq	r0, r0, r5, lsl #4
 800ade8:	0800a9bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, fp, sp, pc}
 800adec:	00000206 	andeq	r0, r0, r6, lsl #4
 800adf0:	0800a9da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, sp, pc}
 800adf4:	00000207 	andeq	r0, r0, r7, lsl #4
 800adf8:	0800a9f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, fp, sp, pc}
 800adfc:	00000208 	andeq	r0, r0, r8, lsl #4
 800ae00:	0800aa13 	stmdaeq	r0, {r0, r1, r4, r9, fp, sp, pc}
 800ae04:	00000211 	andeq	r0, r0, r1, lsl r2
 800ae08:	0800aa30 	stmdaeq	r0, {r4, r5, r9, fp, sp, pc}
 800ae0c:	00000212 	andeq	r0, r0, r2, lsl r2
 800ae10:	0800aa4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, sp, pc}
 800ae14:	00000213 	andeq	r0, r0, r3, lsl r2
 800ae18:	0800aa6a 	stmdaeq	r0, {r1, r3, r5, r6, r9, fp, sp, pc}
 800ae1c:	00000214 	andeq	r0, r0, r4, lsl r2
 800ae20:	0800aa8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, sp, pc}
 800ae24:	00000215 	andeq	r0, r0, r5, lsl r2
 800ae28:	0800aaae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, fp, sp, pc}
 800ae2c:	00000216 	andeq	r0, r0, r6, lsl r2
 800ae30:	0800aacb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, fp, sp, pc}
 800ae34:	00000217 	andeq	r0, r0, r7, lsl r2
 800ae38:	0800aacf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r9, fp, sp, pc}
 800ae3c:	00000301 	andeq	r0, r0, r1, lsl #6
 800ae40:	0800aada 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, fp, sp, pc}
 800ae44:	00000302 	andeq	r0, r0, r2, lsl #6
 800ae48:	0800aaec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp, sp, pc}
 800ae4c:	00000303 	andeq	r0, r0, r3, lsl #6
 800ae50:	0800ab00 	stmdaeq	r0, {r8, r9, fp, sp, pc}
 800ae54:	00000304 	andeq	r0, r0, r4, lsl #6
 800ae58:	0800ab0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp, pc}
 800ae5c:	00000401 	andeq	r0, r0, r1, lsl #8
 800ae60:	0800ab1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, sp, pc}
 800ae64:	00000402 	andeq	r0, r0, r2, lsl #8
 800ae68:	0800ab29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, sp, pc}
 800ae6c:	00000403 	andeq	r0, r0, r3, lsl #8
 800ae70:	0800ab39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, fp, sp, pc}
 800ae74:	00000404 	andeq	r0, r0, r4, lsl #8
 800ae78:	0800ab49 	stmdaeq	r0, {r0, r3, r6, r8, r9, fp, sp, pc}
 800ae7c:	00000405 	andeq	r0, r0, r5, lsl #8
 800ae80:	0800ab58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, sp, pc}
 800ae84:	00000406 	andeq	r0, r0, r6, lsl #8
 800ae88:	0800ab62 	stmdaeq	r0, {r1, r5, r6, r8, r9, fp, sp, pc}
 800ae8c:	00000407 	andeq	r0, r0, r7, lsl #8
 800ae90:	0800ab72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp, pc}
 800ae94:	00000408 	andeq	r0, r0, r8, lsl #8
 800ae98:	0800ab8b 	stmdaeq	r0, {r0, r1, r3, r7, r8, r9, fp, sp, pc}
 800ae9c:	00000409 	andeq	r0, r0, r9, lsl #8
 800aea0:	0800ab92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, sp, pc}
 800aea4:	00000501 	andeq	r0, r0, r1, lsl #10
 800aea8:	0800ab9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp, sp, pc}
 800aeac:	00000502 	andeq	r0, r0, r2, lsl #10
 800aeb0:	0800abb3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, r9, fp, sp, pc}
 800aeb4:	00000504 	andeq	r0, r0, r4, lsl #10
 800aeb8:	0800abcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, fp, sp, pc}
 800aebc:	00000505 	andeq	r0, r0, r5, lsl #10
 800aec0:	0800abd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp, sp, pc}
 800aec4:	00000506 	andeq	r0, r0, r6, lsl #10
 800aec8:	0800abf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, sp, pc}
 800aecc:	00000507 	andeq	r0, r0, r7, lsl #10
 800aed0:	0800abfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, pc}
 800aed4:	00000508 	andeq	r0, r0, r8, lsl #10
 800aed8:	0800ac0b 	stmdaeq	r0, {r0, r1, r3, sl, fp, sp, pc}
 800aedc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800aee0:	0800a910 	stmdaeq	r0, {r4, r8, fp, sp, pc}
 800aee4:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800aee8:	2f2f3a73 	svccs	0x002f3a73
 800aeec:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 800aef0:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 800aef4:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 800aef8:	4d445200 	sfmmi	f5, 2, [r4, #-0]
 800aefc:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800af00:	20656369 	rsbcs	r6, r5, r9, ror #6
 800af04:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 800af08:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 800af0c:	6f697461 	svcvs	0x00697461
 800af10:	20000a6e 	andcs	r0, r0, lr, ror #20
 800af14:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 800af18:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 800af1c:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 800af20:	6d614e20 	stclvs	14, cr4, [r1, #-128]!	; 0xffffff80
 800af24:	203a2065 	eorscs	r2, sl, r5, rrx
 800af28:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800af2c:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800af30:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800af34:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800af38:	20726572 	rsbscs	r6, r2, r2, ror r5
 800af3c:	20204449 	eorcs	r4, r0, r9, asr #8
 800af40:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800af44:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800af48:	0a58322e 	beq	9617808 <__exidx_end+0x160b668>
 800af4c:	65532000 	ldrbvs	r2, [r3, #-0]
 800af50:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
 800af54:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
 800af58:	20726562 	rsbscs	r6, r2, r2, ror #10
 800af5c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800af60:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800af64:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800af68:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800af6c:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800af70:	000a5832 	andeq	r5, sl, r2, lsr r8
 800af74:	6f6f5220 	svcvs	0x006f5220
 800af78:	616c2074 	smcvs	49668	; 0xc204
 800af7c:	206c6562 	rsbcs	r6, ip, r2, ror #10
 800af80:	20202020 	eorcs	r2, r0, r0, lsr #32
 800af84:	3a202020 	bcc	881300c <__exidx_end+0x806e6c>
 800af88:	2a2e2520 	bcs	8b94410 <__exidx_end+0xb88270>
 800af8c:	20000a73 	andcs	r0, r0, r3, ror sl
 800af90:	646f7250 	strbtvs	r7, [pc], #-592	; 800af98 <s_tTableC2+0x1f4>
 800af94:	20746375 	rsbscs	r6, r4, r5, ror r3
 800af98:	65746143 	ldrbvs	r6, [r4, #-323]!	; 0xfffffebd
 800af9c:	79726f67 	ldmdbvc	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
 800afa0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800afa4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800afa8:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 800afac:	5020000a 	eorpl	r0, r0, sl
 800afb0:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800afb4:	44207463 	strtmi	r7, [r0], #-1123	; 0xfffffb9d
 800afb8:	69617465 	stmdbvs	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 800afbc:	2020206c 	eorcs	r2, r0, ip, rrx
 800afc0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800afc4:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800afc8:	0a58322e 	beq	9617888 <__exidx_end+0x160b6e8>
	...

0800afcd <DEVICE_LABEL>:
 800afcd:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800afd1:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800afd5:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 800afd9:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 800afdd:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 800afe1:	 	subseq	r0, r0, r5, rrx

0800afe3 <RDMConst::MANUFACTURER_ID>:
 800afe3:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800afe5 <RDMConst::MANUFACTURER_NAME>:
 800afe5:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800afe9:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800afed:	6f2e7777 	svcvs	0x002e7777
 800aff1:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800aff5:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800aff9:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800affd:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800b001:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800b005:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800b009:	6f632058 	svcvs	0x00632058
 800b00d:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800b011:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800b015:	0a6e6f69 	beq	9ba6dc1 <__exidx_end+0x1b9ac21>
 800b019:	754f2000 	strbvc	r2, [pc, #-0]	; 800b021 <RDMConst::MANUFACTURER_NAME+0x3c>
 800b01d:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 800b021:	203a2073 	eorscs	r2, sl, r3, ror r0
 800b025:	000a6425 	andeq	r6, sl, r5, lsr #8
 800b029:	6f724720 	svcvs	0x00724720
 800b02d:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 800b031:	6f632067 	svcvs	0x00632067
 800b035:	20746e75 	rsbscs	r6, r4, r5, ror lr
 800b039:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800b03d:	72475b20 	subvc	r5, r7, #32, 22	; 0x8000
 800b041:	7370756f 	cmnvc	r0, #465567744	; 0x1bc00000
 800b045:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b049:	000a5d64 	andeq	r5, sl, r4, ror #26
 800b04d:	 	andeq	r0, r0, r0

0800b050 <vtable for WS28xxDmx>:
	...
 800b058:	080056f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, ip, lr}
 800b05c:	08005715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, ip, lr}
 800b060:	08005869 	stmdaeq	r0, {r0, r3, r5, r6, fp, ip, lr}
 800b064:	08005881 	stmdaeq	r0, {r0, r7, fp, ip, lr}
 800b068:	0800574d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, lr}
 800b06c:	08005727 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, sl, ip, lr}
 800b070:	0800584d 	stmdaeq	r0, {r0, r2, r3, r6, fp, ip, lr}
 800b074:	08005863 	stmdaeq	r0, {r0, r1, r5, r6, fp, ip, lr}
 800b078:	08005899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, lr}
 800b07c:	080056e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, ip, lr}
 800b080:	080056ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
 800b084:	080058d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, ip, lr}

0800b088 <vtable for PixelDmxParamsRdm>:
	...
 800b090:	08005a71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, ip, lr}
 800b094:	08005a73 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
 800b098:	08005a5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, fp, ip, lr}
 800b09c:	08005a5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, fp, ip, lr}
 800b0a0:	08005a95 	stmdaeq	r0, {r0, r2, r4, r7, r9, fp, ip, lr}
 800b0a4:	08005a49 	stmdaeq	r0, {r0, r3, r6, r9, fp, ip, lr}
 800b0a8:	08005a4b 	stmdaeq	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
 800b0ac:	08005a4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, ip, lr}
 800b0b0:	08005a4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, fp, ip, lr}
 800b0b4:	08005a53 	stmdaeq	r0, {r0, r1, r4, r6, r9, fp, ip, lr}
 800b0b8:	08005a57 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, fp, ip, lr}
 800b0bc:	08005a5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, fp, ip, lr}
 800b0c0:	00736559 	rsbseq	r6, r3, r9, asr r5
 800b0c4:	50006f4e 	andpl	r6, r0, lr, asr #30
 800b0c8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 800b0cc:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800b0d0:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 800b0d4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 800b0d8:	000a6e6f 	andeq	r6, sl, pc, ror #28
 800b0dc:	70795420 	rsbsvc	r5, r9, r0, lsr #8
 800b0e0:	20202065 	eorcs	r2, r0, r5, rrx
 800b0e4:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b0e8:	255b2073 	ldrbcs	r2, [fp, #-115]	; 0xffffff8d
 800b0ec:	000a5d64 	andeq	r5, sl, r4, ror #26
 800b0f0:	756f4320 	strbvc	r4, [pc, #-800]!	; 800add8 <s_tTableC2+0x34>
 800b0f4:	2020746e 	eorcs	r7, r0, lr, ror #8
 800b0f8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800b0fc:	20000a64 	andcs	r0, r0, r4, ror #20
 800b100:	7070614d 	rsbsvc	r6, r0, sp, asr #2
 800b104:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800b108:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 800b10c:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800b110:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b114:	20483054 	subcs	r3, r8, r4, asr r0
 800b118:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b11c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b120:	5b206632 	blpl	88249f0 <__exidx_end+0x818850>
 800b124:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b128:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b12c:	20483154 	subcs	r3, r8, r4, asr r1
 800b130:	20202020 	eorcs	r2, r0, r0, lsr #32
 800b134:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800b138:	5b206632 	blpl	8824a08 <__exidx_end+0x818868>
 800b13c:	58257830 	stmdapl	r5!, {r4, r5, fp, ip, sp, lr}
 800b140:	20000a5d 	andcs	r0, r0, sp, asr sl
 800b144:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
 800b148:	72426c61 	subvc	r6, r2, #24832	; 0x6100
 800b14c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 800b150:	7373656e 	cmnvc	r3, #461373440	; 0x1b800000
 800b154:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800b158:	4720000a 	strmi	r0, [r0, -sl]!
 800b15c:	616d6d61 	cmnvs	sp, r1, ror #26
 800b160:	726f6320 	rsbvc	r6, pc, #32, 6	; 0x80000000
 800b164:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800b168:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800b16c:	000a7325 	andeq	r7, sl, r5, lsr #6
 800b170:	6f6c4320 	svcvs	0x006c4320
 800b174:	203a6b63 	eorscs	r6, sl, r3, ror #22
 800b178:	48207525 	stmdami	r0!, {r0, r2, r5, r8, sl, ip, sp, lr}
 800b17c:	00000a7a 	andeq	r0, r0, sl, ror sl

0800b180 <CSWTCH.9>:
 800b180:	0800b394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, sp, pc}
 800b184:	0800b494 	stmdaeq	r0, {r2, r4, r7, sl, ip, sp, pc}
 800b188:	0800b594 	stmdaeq	r0, {r2, r4, r7, r8, sl, ip, sp, pc}
 800b18c:	0800b694 	stmdaeq	r0, {r2, r4, r7, r9, sl, ip, sp, pc}
 800b190:	0800b794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip, sp, pc}

0800b194 <gamma10_0>:
 800b194:	03020100 	movweq	r0, #8448	; 0x2100
 800b198:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800b19c:	0b0a0908 	bleq	828d5c4 <__exidx_end+0x281424>
 800b1a0:	0f0e0d0c 	svceq	0x000e0d0c
 800b1a4:	13121110 	tstne	r2, #16, 2
 800b1a8:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800b1ac:	1b1a1918 	blne	8691614 <__exidx_end+0x685474>
 800b1b0:	1f1e1d1c 	svcne	0x001e1d1c
 800b1b4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b1b8:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800b1bc:	2b2a2928 	blcs	8a95664 <__exidx_end+0xa894c4>
 800b1c0:	2f2e2d2c 	svccs	0x002e2d2c
 800b1c4:	33323130 	teqcc	r2, #48, 2
 800b1c8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b1cc:	3b3a3938 	blcc	8e996b4 <__exidx_end+0xe8d514>
 800b1d0:	3f3e3d3c 	svccc	0x003e3d3c
 800b1d4:	43424140 	movtmi	r4, #8512	; 0x2140
 800b1d8:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b1dc:	4b4a4948 	blmi	929d704 <__exidx_end+0x1291564>
 800b1e0:	4f4e4d4c 	svcmi	0x004e4d4c
 800b1e4:	53525150 	cmppl	r2, #80, 2
 800b1e8:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800b1ec:	5b5a5958 	blpl	96a1754 <__exidx_end+0x16955b4>
 800b1f0:	5f5e5d5c 	svcpl	0x005e5d5c
 800b1f4:	63626160 	cmnvs	r2, #96, 2
 800b1f8:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800b1fc:	6b6a6968 	blvs	9aa57a4 <__exidx_end+0x1a99604>
 800b200:	6f6e6d6c 	svcvs	0x006e6d6c
 800b204:	73727170 	cmnvc	r2, #112, 2
 800b208:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800b20c:	7b7a7978 	blvc	9ea97f4 <__exidx_end+0x1e9d654>
 800b210:	7f7e7d7c 	svcvc	0x007e7d7c
 800b214:	83828180 	orrhi	r8, r2, #128, 2
 800b218:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800b21c:	8b8a8988 	blhi	62ad844 <__heap_size+0x62ac844>
 800b220:	8f8e8d8c 	svchi	0x008e8d8c
 800b224:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800b228:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800b22c:	9b9a9998 	blls	66b1894 <__heap_size+0x66b0894>
 800b230:	9f9e9d9c 	svcls	0x009e9d9c
 800b234:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800b238:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800b23c:	abaaa9a8 	blge	6ab58e4 <__heap_size+0x6ab48e4>
 800b240:	afaeadac 	svcge	0x00aeadac
 800b244:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800b248:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800b24c:	bbbab9b8 	bllt	6eb9934 <__heap_size+0x6eb8934>
 800b250:	bfbebdbc 	svclt	0x00bebdbc
 800b254:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800b258:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800b25c:	cbcac9c8 	blgt	72bd984 <__heap_size+0x72bc984>
 800b260:	cfcecdcc 	svcgt	0x00cecdcc
 800b264:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800b268:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800b26c:	dbdad9d8 	blle	76c19d4 <__heap_size+0x76c09d4>
 800b270:	dfdedddc 	svcle	0x00dedddc
 800b274:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800b278:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800b27c:	ebeae9e8 	bl	7ac5a24 <__heap_size+0x7ac4a24>
 800b280:	efeeedec 	svc	0x00eeedec
 800b284:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800b288:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800b28c:	fbfaf9f8 	blx	7ec9a76 <__heap_size+0x7ec8a76>
 800b290:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0800b294 <gamma20_0>:
	...
 800b2a0:	01010101 	tsteq	r1, r1, lsl #2
 800b2a4:	01010101 	tsteq	r1, r1, lsl #2
 800b2a8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b2ac:	03030202 	movweq	r0, #12802	; 0x3202
 800b2b0:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b2b4:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b2b8:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b2bc:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b2c0:	09080808 	stmdbeq	r8, {r3, fp}
 800b2c4:	0a0a0909 	beq	828d6f0 <__exidx_end+0x281550>
 800b2c8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b2cc:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b2d0:	100f0f0e 	andne	r0, pc, lr, lsl #30
 800b2d4:	12111110 	andsne	r1, r1, #16, 2
 800b2d8:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b2dc:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b2e0:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b2e4:	1b1a1a19 	blne	8691b50 <__exidx_end+0x6859b0>
 800b2e8:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b2ec:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b2f0:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b2f4:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b2f8:	2a292827 	bcs	8a5539c <__exidx_end+0xa491fc>
 800b2fc:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b300:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 800b304:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b308:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b30c:	3b3a3938 	blcc	8e997f4 <__exidx_end+0xe8d654>
 800b310:	3f3e3d3c 	svccc	0x003e3d3c
 800b314:	43424140 	movtmi	r4, #8512	; 0x2140
 800b318:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b31c:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b320:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b324:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 800b328:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 800b32c:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 800b330:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b334:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 800b338:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 800b33c:	7371706f 	cmnvc	r1, #111	; 0x6f
 800b340:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 800b344:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 800b348:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 800b34c:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 800b350:	8f8e8c8b 	svchi	0x008e8c8b
 800b354:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 800b358:	9b9a9897 	blls	66b15bc <__heap_size+0x66b05bc>
 800b35c:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 800b360:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b364:	afadabaa 	svcge	0x00adabaa
 800b368:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 800b36c:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 800b370:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 800b374:	cac8c7c5 	bgt	723d290 <__heap_size+0x723c290>
 800b378:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 800b37c:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b380:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 800b384:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 800b388:	efedebe9 	svc	0x00edebe9
 800b38c:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b390:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b394 <gamma21_0>:
	...
 800b3a0:	01010000 	mrseq	r0, (UNDEF: 1)
 800b3a4:	01010101 	tsteq	r1, r1, lsl #2
 800b3a8:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b3ac:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b3b0:	03030302 	movweq	r0, #13058	; 0x3302
 800b3b4:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b3b8:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 800b3bc:	06060505 	streq	r0, [r6], -r5, lsl #10
 800b3c0:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b3c4:	09080808 	stmdbeq	r8, {r3, fp}
 800b3c8:	0a0a0909 	beq	828d7f4 <__exidx_end+0x281654>
 800b3cc:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b3d0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b3d4:	0f0f0e0e 	svceq	0x000f0e0e
 800b3d8:	11111010 	tstne	r1, r0, lsl r0
 800b3dc:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 800b3e0:	16151514 			; <UNDEFINED> instruction: 0x16151514
 800b3e4:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 800b3e8:	1b1a1919 	blne	8691854 <__exidx_end+0x6856b4>
 800b3ec:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 800b3f0:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 800b3f4:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b3f8:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b3fc:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b400:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 800b404:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b408:	33333231 	teqcc	r3, #268435459	; 0x10000003
 800b40c:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b410:	3b3a3938 	blcc	8e998f8 <__exidx_end+0xe8d758>
 800b414:	3f3e3d3c 	svccc	0x003e3d3c
 800b418:	43424140 	movtmi	r4, #8512	; 0x2140
 800b41c:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b420:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 800b424:	504f4e4d 	subpl	r4, pc, sp, asr #28
 800b428:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 800b42c:	5a585756 	bpl	962118c <__exidx_end+0x1614fec>
 800b430:	5f5d5c5b 	svcpl	0x005d5c5b
 800b434:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 800b438:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b43c:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 800b440:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 800b444:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b448:	7f7e7c7b 	svcvc	0x007e7c7b
 800b44c:	85838281 	strhi	r8, [r3, #641]	; 0x281
 800b450:	8b898886 	blhi	626d670 <__heap_size+0x626c670>
 800b454:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 800b458:	97969493 			; <UNDEFINED> instruction: 0x97969493
 800b45c:	9e9c9b99 	vmovls.32	r9, d28[0]
 800b460:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b464:	abaaa8a6 	blge	6ab5704 <__heap_size+0x6ab4704>
 800b468:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 800b46c:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 800b470:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 800b474:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 800b478:	cfcdcbca 	svcgt	0x00cdcbca
 800b47c:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 800b480:	dfdddbd9 	svcle	0x00dddbd9
 800b484:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 800b488:	eeeceae8 	vfms.f32	s29, s25, s17
 800b48c:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 800b490:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0800b494 <gamma22_0>:
	...
 800b4a0:	01000000 	mrseq	r0, (UNDEF: 0)
 800b4a4:	01010101 	tsteq	r1, r1, lsl #2
 800b4a8:	01010101 	tsteq	r1, r1, lsl #2
 800b4ac:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b4b0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b4b4:	03030303 	movweq	r0, #13059	; 0x3303
 800b4b8:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 800b4bc:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b4c0:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b4c4:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b4c8:	09080808 	stmdbeq	r8, {r3, fp}
 800b4cc:	0a0a0909 	beq	828d8f8 <__exidx_end+0x281758>
 800b4d0:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b4d4:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b4d8:	0f0f0e0e 	svceq	0x000f0e0e
 800b4dc:	11111010 	tstne	r1, r0, lsl r0
 800b4e0:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b4e4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b4e8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b4ec:	1a1a1919 	bne	8691958 <__exidx_end+0x6857b8>
 800b4f0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b4f4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b4f8:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b4fc:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b500:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b504:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b508:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b50c:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b510:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b514:	3b3a3938 	blcc	8e999fc <__exidx_end+0xe8d85c>
 800b518:	3f3e3d3c 	svccc	0x003e3d3c
 800b51c:	43424140 	movtmi	r4, #8512	; 0x2140
 800b520:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800b524:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b528:	514f4e4d 	cmppl	pc, sp, asr #28
 800b52c:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 800b530:	5a595857 	bpl	9661694 <__exidx_end+0x16554f4>
 800b534:	5f5e5d5b 	svcpl	0x005e5d5b
 800b538:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 800b53c:	6a696766 	bvs	9a652dc <__exidx_end+0x1a5913c>
 800b540:	6f6e6d6b 	svcvs	0x006e6d6b
 800b544:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b548:	7b797877 	blvc	9e6972c <__exidx_end+0x1e5d58c>
 800b54c:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 800b550:	87858482 	strhi	r8, [r5, r2, lsl #9]
 800b554:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 800b558:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 800b55c:	9a999795 	bls	66713b8 <__heap_size+0x66703b8>
 800b560:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 800b564:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 800b568:	afadacaa 	svcge	0x00adacaa
 800b56c:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 800b570:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 800b574:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 800b578:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 800b57c:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 800b580:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 800b584:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 800b588:	eeeceae7 	vfms.f32	s29, s25, s15
 800b58c:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 800b590:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0800b594 <gamma23_0>:
	...
 800b5a4:	01010100 	mrseq	r0, (UNDEF: 17)
 800b5a8:	01010101 	tsteq	r1, r1, lsl #2
 800b5ac:	01010101 	tsteq	r1, r1, lsl #2
 800b5b0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b5b4:	03020202 	movweq	r0, #8706	; 0x2202
 800b5b8:	03030303 	movweq	r0, #13059	; 0x3303
 800b5bc:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b5c0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b5c4:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b5c8:	07070707 	streq	r0, [r7, -r7, lsl #14]
 800b5cc:	09080808 	stmdbeq	r8, {r3, fp}
 800b5d0:	0a0a0a09 	beq	828ddfc <__exidx_end+0x281c5c>
 800b5d4:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b5d8:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 800b5dc:	0f0f0e0e 	svceq	0x000f0e0e
 800b5e0:	11111010 	tstne	r1, r0, lsl r0
 800b5e4:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b5e8:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 800b5ec:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b5f0:	1a1a1918 	bne	8691a58 <__exidx_end+0x6858b8>
 800b5f4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b5f8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b5fc:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b600:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b604:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 800b608:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 800b60c:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b610:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 800b614:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800b618:	3b3a3938 	blcc	8e99b00 <__exidx_end+0xe8d960>
 800b61c:	3f3e3d3c 	svccc	0x003e3d3c
 800b620:	43424140 	movtmi	r4, #8512	; 0x2140
 800b624:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 800b628:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 800b62c:	51504f4e 	cmppl	r0, lr, asr #30
 800b630:	56555452 			; <UNDEFINED> instruction: 0x56555452
 800b634:	5b5a5957 	blpl	96a1b98 <__exidx_end+0x16959f8>
 800b638:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 800b63c:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 800b640:	6b6a6867 	blvs	9aa57e4 <__exidx_end+0x1a99644>
 800b644:	71706e6d 	cmnvc	r0, sp, ror #28
 800b648:	77757472 			; <UNDEFINED> instruction: 0x77757472
 800b64c:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 800b650:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 800b654:	8a888685 	bhi	622d070 <__heap_size+0x622c070>
 800b658:	908f8d8b 	addls	r8, pc, fp, lsl #27
 800b65c:	97959492 			; <UNDEFINED> instruction: 0x97959492
 800b660:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 800b664:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 800b668:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 800b66c:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 800b670:	bbb9b7b6 	bllt	6e79550 <__heap_size+0x6e78550>
 800b674:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 800b678:	cbc9c7c5 	blgt	727d594 <__heap_size+0x727c594>
 800b67c:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 800b680:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 800b684:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 800b688:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 800b68c:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 800b690:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b694 <gamma24_0>:
	...
 800b6a4:	01000000 	mrseq	r0, (UNDEF: 0)
 800b6a8:	01010101 	tsteq	r1, r1, lsl #2
 800b6ac:	01010101 	tsteq	r1, r1, lsl #2
 800b6b0:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 800b6b4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b6b8:	03030202 	movweq	r0, #12802	; 0x3202
 800b6bc:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 800b6c0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b6c4:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 800b6c8:	06060606 	streq	r0, [r6], -r6, lsl #12
 800b6cc:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b6d0:	09090808 	stmdbeq	r9, {r3, fp}
 800b6d4:	0a0a0a09 	beq	828df00 <__exidx_end+0x281d60>
 800b6d8:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 800b6dc:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b6e0:	0f0f0e0e 	svceq	0x000f0e0e
 800b6e4:	11111010 	tstne	r1, r0, lsl r0
 800b6e8:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b6ec:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b6f0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b6f4:	1a1a1918 	bne	8691b5c <__exidx_end+0x6859bc>
 800b6f8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b6fc:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b700:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800b704:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 800b708:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 800b70c:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 800b710:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 800b714:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b718:	37363535 			; <UNDEFINED> instruction: 0x37363535
 800b71c:	3b3a3938 	blcc	8e99c04 <__exidx_end+0xe8da64>
 800b720:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 800b724:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 800b728:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 800b72c:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 800b730:	5251504e 	subspl	r5, r1, #78	; 0x4e
 800b734:	57565553 			; <UNDEFINED> instruction: 0x57565553
 800b738:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 800b73c:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 800b740:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 800b744:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 800b748:	7372706f 	cmnvc	r2, #111	; 0x6f
 800b74c:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 800b750:	7f7e7c7b 	svcvc	0x007e7c7b
 800b754:	86848381 	strhi	r8, [r4], r1, lsl #7
 800b758:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 800b75c:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 800b760:	9b999795 	blls	66715bc <__heap_size+0x66705bc>
 800b764:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 800b768:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 800b76c:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 800b770:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 800b774:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 800b778:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 800b77c:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 800b780:	dad8d6d4 	ble	76412d8 <__heap_size+0x76402d8>
 800b784:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 800b788:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 800b78c:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 800b790:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b794 <gamma25_0>:
	...
 800b7a8:	01010000 	mrseq	r0, (UNDEF: 1)
 800b7ac:	01010101 	tsteq	r1, r1, lsl #2
 800b7b0:	01010101 	tsteq	r1, r1, lsl #2
 800b7b4:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 800b7b8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b7bc:	03030302 	movweq	r0, #13058	; 0x3302
 800b7c0:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 800b7c4:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 800b7c8:	06050505 	streq	r0, [r5], -r5, lsl #10
 800b7cc:	07060606 	streq	r0, [r6, -r6, lsl #12]
 800b7d0:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 800b7d4:	09090808 	stmdbeq	r9, {r3, fp}
 800b7d8:	0a0a0a09 	beq	828e004 <__exidx_end+0x281e64>
 800b7dc:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 800b7e0:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 800b7e4:	0f0f0f0e 	svceq	0x000f0f0e
 800b7e8:	11111010 	tstne	r1, r0, lsl r0
 800b7ec:	13131212 	tstne	r3, #536870913	; 0x20000001
 800b7f0:	16151414 			; <UNDEFINED> instruction: 0x16151414
 800b7f4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 800b7f8:	1a1a1919 	bne	8691c64 <__exidx_end+0x685ac4>
 800b7fc:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 800b800:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 800b804:	23222121 			; <UNDEFINED> instruction: 0x23222121
 800b808:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 800b80c:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 800b810:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 800b814:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 800b818:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 800b81c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b820:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 800b824:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 800b828:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 800b82c:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 800b830:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 800b834:	53525150 	cmppl	r2, #80, 2
 800b838:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b83c:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 800b840:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 800b844:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 800b848:	6f6e6c6b 	svcvs	0x006e6c6b
 800b84c:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 800b850:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 800b854:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 800b858:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 800b85c:	908e8d8b 	addls	r8, lr, fp, lsl #27
 800b860:	97969492 			; <UNDEFINED> instruction: 0x97969492
 800b864:	9f9d9b99 	svcls	0x009d9b99
 800b868:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 800b86c:	aeacaaa8 	vfmage.f32	s20, s25, s17
 800b870:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 800b874:	bfbdbab8 	svclt	0x00bdbab8
 800b878:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 800b87c:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 800b880:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 800b884:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 800b888:	ebe9e7e4 	bl	7a85820 <__heap_size+0x7a84820>
 800b88c:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 800b890:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0800b894 <gamma25_5>:
 800b894:	01010100 	mrseq	r0, (UNDEF: 17)
 800b898:	01010101 	tsteq	r1, r1, lsl #2
 800b89c:	01010101 	tsteq	r1, r1, lsl #2
 800b8a0:	01010101 	tsteq	r1, r1, lsl #2
 800b8a4:	01010101 	tsteq	r1, r1, lsl #2
 800b8a8:	01010101 	tsteq	r1, r1, lsl #2
 800b8ac:	01010101 	tsteq	r1, r1, lsl #2
 800b8b0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b8b4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 800b8b8:	03030302 	movweq	r0, #13058	; 0x3302
 800b8bc:	03030303 	movweq	r0, #13059	; 0x3303
 800b8c0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 800b8c4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 800b8c8:	06060605 	streq	r0, [r6], -r5, lsl #12
 800b8cc:	07070706 	streq	r0, [r7, -r6, lsl #14]
 800b8d0:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 800b8d4:	0a090909 	beq	824dd00 <__exidx_end+0x241b60>
 800b8d8:	0b0b0a0a 	bleq	82ce108 <__exidx_end+0x2c1f68>
 800b8dc:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 800b8e0:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 800b8e4:	100f0f0f 	andne	r0, pc, pc, lsl #30
 800b8e8:	12111110 	andsne	r1, r1, #16, 2
 800b8ec:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 800b8f0:	16161514 			; <UNDEFINED> instruction: 0x16161514
 800b8f4:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 800b8f8:	1b1a1a19 	blne	8692164 <__exidx_end+0x685fc4>
 800b8fc:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 800b900:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 800b904:	23232221 			; <UNDEFINED> instruction: 0x23232221
 800b908:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 800b90c:	2a292827 	bcs	8a559b0 <__exidx_end+0xa49810>
 800b910:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 800b914:	31302f2e 	teqcc	r0, lr, lsr #30
 800b918:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 800b91c:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 800b920:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 800b924:	41403f3e 	cmpmi	r0, lr, lsr pc
 800b928:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 800b92c:	4a494846 	bmi	925da4c <__exidx_end+0x12518ac>
 800b930:	4f4e4c4b 	svcmi	0x004e4c4b
 800b934:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 800b938:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 800b93c:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 800b940:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 800b944:	6a686765 	bvs	9a256e0 <__exidx_end+0x1a19540>
 800b948:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 800b94c:	76747371 			; <UNDEFINED> instruction: 0x76747371
 800b950:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 800b954:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 800b958:	8a888685 	bhi	622d374 <__heap_size+0x622c374>
 800b95c:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 800b960:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 800b964:	9f9d9c9a 	svcls	0x009d9c9a
 800b968:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 800b96c:	afadaba9 	svcge	0x00adaba9
 800b970:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 800b974:	bfbdbbb9 	svclt	0x00bdbbb9
 800b978:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 800b97c:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 800b980:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 800b984:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 800b988:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 800b98c:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 800b990:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 800b994:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 800b998:	006e776f 	rsbeq	r7, lr, pc, ror #14

0800b99c <CSWTCH.18>:
 800b99c:	02020200 	andeq	r0, r2, #0, 4
 800b9a0:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800b9a4:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0800b9a6 <PixelType::MAPS>:
 800b9a6:	00424752 	subeq	r4, r2, r2, asr r7
 800b9aa:	00474252 	subeq	r4, r7, r2, asr r2
 800b9ae:	00425247 	subeq	r5, r2, r7, asr #4
 800b9b2:	00524247 	subseq	r4, r2, r7, asr #4
 800b9b6:	00475242 	subeq	r5, r7, r2, asr #4
 800b9ba:	00524742 	subseq	r4, r2, r2, asr #14

0800b9be <PixelType::TYPES>:
 800b9be:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9c2:	00003130 	andeq	r3, r0, r0, lsr r1
 800b9c6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9ca:	00003131 	andeq	r3, r0, r1, lsr r1
 800b9ce:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9d2:	00003231 	andeq	r3, r0, r1, lsr r2
 800b9d6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9da:	00423231 	subeq	r3, r2, r1, lsr r2
 800b9de:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9e2:	00003331 	andeq	r3, r0, r1, lsr r3
 800b9e6:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800b9ea:	00003531 	andeq	r3, r0, r1, lsr r5
 800b9ee:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b9f2:	00003231 	andeq	r3, r0, r1, lsr r2
 800b9f6:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800b9fa:	00573231 	subseq	r3, r7, r1, lsr r2
 800b9fe:	31534355 	cmpcc	r3, r5, asr r3
 800ba02:	00333039 	eorseq	r3, r3, r9, lsr r0
 800ba06:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800ba0a:	00333039 	eorseq	r3, r3, r9, lsr r0
 800ba0e:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800ba12:	00003231 	andeq	r3, r0, r1, lsr r2
 800ba16:	31415041 	cmpcc	r1, r1, asr #32
 800ba1a:	00003230 	andeq	r3, r0, r0, lsr r2
 800ba1e:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800ba22:	00003232 	andeq	r3, r0, r2, lsr r2
 800ba26:	31383950 	teqcc	r8, r0, asr r9
 800ba2a:	00000033 	andeq	r0, r0, r3, lsr r0

0800ba2e <s_patternName>:
 800ba2e:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800ba3a:	61520000 	cmpvs	r2, r0
 800ba3e:	6f626e69 	svcvs	0x00626e69
 800ba42:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800ba46:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800ba4a:	61656854 	cmnvs	r5, r4, asr r8
 800ba4e:	20726574 	rsbscs	r6, r2, r4, ror r5
 800ba52:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800ba56:	6f430065 	svcvs	0x00430065
 800ba5a:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800ba5e:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800ba62:	00000065 	andeq	r0, r0, r5, rrx
 800ba66:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800ba6a:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800ba6e:	00000000 	andeq	r0, r0, r0
 800ba72:	61460000 	mrsvs	r0, (UNDEF: 70)
 800ba76:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800ba82 <gamma10_0>:
 800ba82:	03020100 	movweq	r0, #8448	; 0x2100
 800ba86:	07060504 	streq	r0, [r6, -r4, lsl #10]
 800ba8a:	0b0a0908 	bleq	828deb2 <__exidx_end+0x281d12>
 800ba8e:	0f0e0d0c 	svceq	0x000e0d0c
 800ba92:	13121110 	tstne	r2, #16, 2
 800ba96:	17161514 			; <UNDEFINED> instruction: 0x17161514
 800ba9a:	1b1a1918 	blne	8691f02 <__exidx_end+0x685d62>
 800ba9e:	1f1e1d1c 	svcne	0x001e1d1c
 800baa2:	23222120 			; <UNDEFINED> instruction: 0x23222120
 800baa6:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 800baaa:	2b2a2928 	blcs	8a95f52 <__exidx_end+0xa89db2>
 800baae:	2f2e2d2c 	svccs	0x002e2d2c
 800bab2:	33323130 	teqcc	r2, #48, 2
 800bab6:	37363534 			; <UNDEFINED> instruction: 0x37363534
 800baba:	3b3a3938 	blcc	8e99fa2 <__exidx_end+0xe8de02>
 800babe:	3f3e3d3c 	svccc	0x003e3d3c
 800bac2:	43424140 	movtmi	r4, #8512	; 0x2140
 800bac6:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 800baca:	4b4a4948 	blmi	929dff2 <__exidx_end+0x1291e52>
 800bace:	4f4e4d4c 	svcmi	0x004e4d4c
 800bad2:	53525150 	cmppl	r2, #80, 2
 800bad6:	57565554 			; <UNDEFINED> instruction: 0x57565554
 800bada:	5b5a5958 	blpl	96a2042 <__exidx_end+0x1695ea2>
 800bade:	5f5e5d5c 	svcpl	0x005e5d5c
 800bae2:	63626160 	cmnvs	r2, #96, 2
 800bae6:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 800baea:	6b6a6968 	blvs	9aa6092 <__exidx_end+0x1a99ef2>
 800baee:	6f6e6d6c 	svcvs	0x006e6d6c
 800baf2:	73727170 	cmnvc	r2, #112, 2
 800baf6:	77767574 			; <UNDEFINED> instruction: 0x77767574
 800bafa:	7b7a7978 	blvc	9eaa0e2 <__exidx_end+0x1e9df42>
 800bafe:	7f7e7d7c 	svcvc	0x007e7d7c
 800bb02:	83828180 	orrhi	r8, r2, #128, 2
 800bb06:	87868584 	strhi	r8, [r6, r4, lsl #11]
 800bb0a:	8b8a8988 	blhi	62ae132 <__heap_size+0x62ad132>
 800bb0e:	8f8e8d8c 	svchi	0x008e8d8c
 800bb12:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 800bb16:	97969594 			; <UNDEFINED> instruction: 0x97969594
 800bb1a:	9b9a9998 	blls	66b2182 <__heap_size+0x66b1182>
 800bb1e:	9f9e9d9c 	svcls	0x009e9d9c
 800bb22:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 800bb26:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 800bb2a:	abaaa9a8 	blge	6ab61d2 <__heap_size+0x6ab51d2>
 800bb2e:	afaeadac 	svcge	0x00aeadac
 800bb32:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 800bb36:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 800bb3a:	bbbab9b8 	bllt	6eba222 <__heap_size+0x6eb9222>
 800bb3e:	bfbebdbc 	svclt	0x00bebdbc
 800bb42:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 800bb46:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 800bb4a:	cbcac9c8 	blgt	72be272 <__heap_size+0x72bd272>
 800bb4e:	cfcecdcc 	svcgt	0x00cecdcc
 800bb52:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 800bb56:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 800bb5a:	dbdad9d8 	blle	76c22c2 <__heap_size+0x76c12c2>
 800bb5e:	dfdedddc 	svcle	0x00dedddc
 800bb62:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 800bb66:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 800bb6a:	ebeae9e8 	bl	7ac6312 <__heap_size+0x7ac5312>
 800bb6e:	efeeedec 	svc	0x00eeedec
 800bb72:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 800bb76:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 800bb7a:	fbfaf9f8 	blx	7eca364 <__heap_size+0x7ec9364>
 800bb7e:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
 800bb82:	46006f6c 	strmi	r6, [r0], -ip, ror #30
 800bb86:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 800bb8a:	20657261 	rsbcs	r7, r5, r1, ror #4
 800bb8e:	2a2e2556 	bcs	8b950ee <__exidx_end+0xb88f4e>
 800bb92:	4d440073 	stclmi	0, cr0, [r4, #-460]	; 0xfffffe34
 800bb96:	3a532058 	bcc	94d3cfe <__exidx_end+0x14c7b5e>
 800bb9a:	20753325 	rsbscs	r3, r5, r5, lsr #6
 800bb9e:	33253a46 			; <UNDEFINED> instruction: 0x33253a46
 800bba2:	 	rsbeq	r0, r0, r5, ror r0

0800bba4 <s_aStorSize>:
 800bba4:	00000060 	andeq	r0, r0, r0, rrx
 800bba8:	00000090 	muleq	r0, r0, r0
 800bbac:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbb0:	00000040 	andeq	r0, r0, r0, asr #32
 800bbb4:	00000060 	andeq	r0, r0, r0, rrx
 800bbb8:	00000040 	andeq	r0, r0, r0, asr #32
 800bbbc:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbc0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbc4:	000001e0 	andeq	r0, r0, r0, ror #3
 800bbc8:	00000040 	andeq	r0, r0, r0, asr #32
 800bbcc:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbd0:	00000060 	andeq	r0, r0, r0, rrx
 800bbd4:	00000030 	andeq	r0, r0, r0, lsr r0
 800bbd8:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbdc:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800bbe0:	00000030 	andeq	r0, r0, r0, lsr r0
 800bbe4:	00000040 	andeq	r0, r0, r0, asr #32
 800bbe8:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbec:	00000060 	andeq	r0, r0, r0, rrx
 800bbf0:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbf4:	00000400 	andeq	r0, r0, r0, lsl #8
 800bbf8:	00000020 	andeq	r0, r0, r0, lsr #32
 800bbfc:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc00:	00000040 	andeq	r0, r0, r0, asr #32
 800bc04:	00000060 	andeq	r0, r0, r0, rrx
 800bc08:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc0c:	00000020 	andeq	r0, r0, r0, lsr #32
 800bc10:	000000c0 	andeq	r0, r0, r0, asr #1

0800bc14 <vtable for StoreDisplayUdf>:
	...
 800bc1c:	080074d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, ip, sp, lr}
 800bc20:	08007525 	stmdaeq	r0, {r0, r2, r5, r8, sl, ip, sp, lr}
 800bc24:	08007501 	stmdaeq	r0, {r0, r8, sl, ip, sp, lr}
 800bc28:	080074dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp, lr}

0800bc2c <vtable for StorePixelDmx>:
	...
 800bc34:	08007597 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, sl, ip, sp, lr}
 800bc38:	08007701 	stmdaeq	r0, {r0, r8, r9, sl, ip, sp, lr}
 800bc3c:	0800759d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, ip, sp, lr}
 800bc40:	08007715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, ip, sp, lr}
 800bc44:	080076cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, ip, sp, lr}
 800bc48:	08007699 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, ip, sp, lr}
 800bc4c:	08007661 	stmdaeq	r0, {r0, r5, r6, r9, sl, ip, sp, lr}
 800bc50:	08007629 	stmdaeq	r0, {r0, r3, r5, r9, sl, ip, sp, lr}
 800bc54:	080075f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 800bc58:	080075c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, ip, sp, lr}
 800bc5c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bc60:	00000000 	andeq	r0, r0, r0
 800bc64:	08007599 	stmdaeq	r0, {r0, r3, r4, r7, r8, sl, ip, sp, lr}
 800bc68:	0800770d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, ip, sp, lr}
 800bc6c:	080076f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
 800bc70:	080076c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, ip, sp, lr}
 800bc74:	08007691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
 800bc78:	08007659 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, ip, sp, lr}
 800bc7c:	08007621 	stmdaeq	r0, {r0, r5, r9, sl, ip, sp, lr}
 800bc80:	080075ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}

0800bc84 <vtable for StoreRDMDevice>:
	...
 800bc8c:	08007751 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, ip, sp, lr}
 800bc90:	080077c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, ip, sp, lr}
 800bc94:	08007759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800bc98:	080077d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 800bc9c:	0800777d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 800bca0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800bca4:	00000000 	andeq	r0, r0, r0
 800bca8:	08007753 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}
 800bcac:	080077cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
 800bcb0:	080077b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}

0800bcb4 <vtable for StoreRDMSensors>:
	...
 800bcbc:	08007811 	stmdaeq	r0, {r0, r4, fp, ip, sp, lr}
 800bcc0:	0800785d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 800bcc4:	08007839 	stmdaeq	r0, {r0, r3, r4, r5, fp, ip, sp, lr}
 800bcc8:	08007815 	stmdaeq	r0, {r0, r2, r4, fp, ip, sp, lr}

0800bccc <vtable for StoreRDMSubDevices>:
	...
 800bcd4:	0800787d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, ip, sp, lr}
 800bcd8:	080078c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, ip, sp, lr}
 800bcdc:	080078a5 	stmdaeq	r0, {r0, r2, r5, r7, fp, ip, sp, lr}
 800bce0:	08007881 	stmdaeq	r0, {r0, r7, fp, ip, sp, lr}
 800bce4:	3a434d46 	bcc	90df204 <__exidx_end+0x10d3064>
 800bce8:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800bcec:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800bcf0:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800bcf4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800bcf8:	6f742068 	svcvs	0x00742068
 800bcfc:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800bd00:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800bd04:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800bd08:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800bd0c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800bd10:	6f4e000a 	svcvs	0x004e000a
 800bd14:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 800bd18:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 800bd1c:	756f6620 	strbvc	r6, [pc, #-1568]!	; 800b704 <gamma24_0+0x70>
 800bd20:	5300646e 	movwpl	r6, #1134	; 0x46e
 800bd24:	30313148 	eorscc	r3, r1, r8, asr #2
 800bd28:	53530036 	cmppl	r3, #54	; 0x36
 800bd2c:	30333144 	eorscc	r3, r3, r4, asr #2
 800bd30:	73250036 			; <UNDEFINED> instruction: 0x73250036
 800bd34:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
 800bd38:	2964252c 	stmdbcs	r4!, {r2, r3, r5, r8, sl, sp}^
 800bd3c:	aa40000a 	bge	900bd6c <__exidx_end+0xfffbcc>
 800bd40:	00eeaaee 	rsceq	sl, lr, lr, ror #21

0800bd44 <_OledFont8x6>:
 800bd44:	00000040 	andeq	r0, r0, r0, asr #32
 800bd48:	40000000 	andmi	r0, r0, r0
 800bd4c:	005f0000 	subseq	r0, pc, r0
 800bd50:	00400000 	subeq	r0, r0, r0
 800bd54:	00070007 	andeq	r0, r7, r7
 800bd58:	7f144000 	svcvc	0x00144000
 800bd5c:	00147f14 	andseq	r7, r4, r4, lsl pc
 800bd60:	7f2a2440 	svcvc	0x002a2440
 800bd64:	4000122a 	andmi	r1, r0, sl, lsr #4
 800bd68:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800bd6c:	36400062 	strbcc	r0, [r0], -r2, rrx
 800bd70:	50205649 	eorpl	r5, r0, r9, asr #12
 800bd74:	08004000 	stmdaeq	r0, {lr}
 800bd78:	00000307 	andeq	r0, r0, r7, lsl #6
 800bd7c:	221c0040 	andscs	r0, ip, #64	; 0x40
 800bd80:	40000041 	andmi	r0, r0, r1, asr #32
 800bd84:	1c224100 	stfnes	f4, [r2], #-0
 800bd88:	2a400000 	bcs	900bd90 <__exidx_end+0xfffbf0>
 800bd8c:	2a1c7f1c 	bcs	872ba04 <__exidx_end+0x71f864>
 800bd90:	08084000 	stmdaeq	r8, {lr}
 800bd94:	0008083e 	andeq	r0, r8, lr, lsr r8
 800bd98:	70800040 	addvc	r0, r0, r0, asr #32
 800bd9c:	40000030 	andmi	r0, r0, r0, lsr r0
 800bda0:	08080808 	stmdaeq	r8, {r3, fp}
 800bda4:	00400008 	subeq	r0, r0, r8
 800bda8:	00606000 	rsbeq	r6, r0, r0
 800bdac:	10204000 	eorne	r4, r0, r0
 800bdb0:	00020408 	andeq	r0, r2, r8, lsl #8
 800bdb4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800bdb8:	40003e45 	andmi	r3, r0, r5, asr #28
 800bdbc:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800bdc0:	72400000 	subvc	r0, r0, #0
 800bdc4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800bdc8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800bdcc:	00334d49 	eorseq	r4, r3, r9, asr #26
 800bdd0:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800bdd4:	4000107f 	andmi	r1, r0, pc, ror r0
 800bdd8:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800bddc:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800bde0:	3149494a 	cmpcc	r9, sl, asr #18
 800bde4:	21414000 	mrscs	r4, (UNDEF: 65)
 800bde8:	00070911 	andeq	r0, r7, r1, lsl r9
 800bdec:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800bdf0:	40003649 	andmi	r3, r0, r9, asr #12
 800bdf4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800bdf8:	0040001e 	subeq	r0, r0, lr, lsl r0
 800bdfc:	00001400 	andeq	r1, r0, r0, lsl #8
 800be00:	40004000 	andmi	r4, r0, r0
 800be04:	00000034 	andeq	r0, r0, r4, lsr r0
 800be08:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800be0c:	40004122 	andmi	r4, r0, r2, lsr #2
 800be10:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800be14:	00400014 	subeq	r0, r0, r4, lsl r0
 800be18:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800be1c:	01024000 	mrseq	r4, (UNDEF: 2)
 800be20:	00060959 	andeq	r0, r6, r9, asr r9
 800be24:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800be28:	40004e59 	andmi	r4, r0, r9, asr lr
 800be2c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800be30:	7f40007c 	svcvc	0x0040007c
 800be34:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800be38:	413e4000 	teqmi	lr, r0
 800be3c:	00224141 	eoreq	r4, r2, r1, asr #2
 800be40:	41417f40 	cmpmi	r1, r0, asr #30
 800be44:	40003e41 	andmi	r3, r0, r1, asr #28
 800be48:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800be4c:	7f400041 	svcvc	0x00400041
 800be50:	01090909 	tsteq	r9, r9, lsl #18
 800be54:	413e4000 	teqmi	lr, r0
 800be58:	00735141 	rsbseq	r5, r3, r1, asr #2
 800be5c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800be60:	40007f08 	andmi	r7, r0, r8, lsl #30
 800be64:	417f4100 	cmnmi	pc, r0, lsl #2
 800be68:	20400000 	subcs	r0, r0, r0
 800be6c:	013f4140 	teqeq	pc, r0, asr #2
 800be70:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800be74:	00412214 	subeq	r2, r1, r4, lsl r2
 800be78:	40407f40 	submi	r7, r0, r0, asr #30
 800be7c:	40004040 	andmi	r4, r0, r0, asr #32
 800be80:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800be84:	7f40007f 	svcvc	0x0040007f
 800be88:	7f100804 	svcvc	0x00100804
 800be8c:	413e4000 	teqmi	lr, r0
 800be90:	003e4141 	eorseq	r4, lr, r1, asr #2
 800be94:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800be98:	40000609 	andmi	r0, r0, r9, lsl #12
 800be9c:	2151413e 	cmpcs	r1, lr, lsr r1
 800bea0:	7f40005e 	svcvc	0x0040005e
 800bea4:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800bea8:	49264000 	stmdbmi	r6!, {lr}
 800beac:	00324949 	eorseq	r4, r2, r9, asr #18
 800beb0:	7f010340 	svcvc	0x00010340
 800beb4:	40000301 	andmi	r0, r0, r1, lsl #6
 800beb8:	4040403f 	submi	r4, r0, pc, lsr r0
 800bebc:	1f40003f 	svcne	0x0040003f
 800bec0:	1f204020 	svcne	0x00204020
 800bec4:	403f4000 	eorsmi	r4, pc, r0
 800bec8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800becc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800bed0:	40006314 	andmi	r6, r0, r4, lsl r3
 800bed4:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800bed8:	61400003 	cmpvs	r0, r3
 800bedc:	434d4959 	movtmi	r4, #55641	; 0xd959
 800bee0:	7f004000 	svcvc	0x00004000
 800bee4:	00414141 	subeq	r4, r1, r1, asr #2
 800bee8:	08040240 	stmdaeq	r4, {r6, r9}
 800beec:	40002010 	andmi	r2, r0, r0, lsl r0
 800bef0:	41414100 	mrsmi	r4, (UNDEF: 81)
 800bef4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800bef8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800befc:	40404000 	submi	r4, r0, r0
 800bf00:	00404040 	subeq	r4, r0, r0, asr #32
 800bf04:	07030040 	streq	r0, [r3, -r0, asr #32]
 800bf08:	40000008 	andmi	r0, r0, r8
 800bf0c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800bf10:	7f400040 	svcvc	0x00400040
 800bf14:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800bf18:	44384000 	ldrtmi	r4, [r8], #-0
 800bf1c:	00284444 	eoreq	r4, r8, r4, asr #8
 800bf20:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800bf24:	40007f28 	andmi	r7, r0, r8, lsr #30
 800bf28:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800bf2c:	00400018 	subeq	r0, r0, r8, lsl r0
 800bf30:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800bf34:	a4184000 	ldrge	r4, [r8], #-0
 800bf38:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800bf3c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800bf40:	40007804 	andmi	r7, r0, r4, lsl #16
 800bf44:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800bf48:	20400000 	subcs	r0, r0, r0
 800bf4c:	003d4040 	eorseq	r4, sp, r0, asr #32
 800bf50:	107f4000 	rsbsne	r4, pc, r0
 800bf54:	00004428 	andeq	r4, r0, r8, lsr #8
 800bf58:	7f410040 	svcvc	0x00410040
 800bf5c:	40000040 	andmi	r0, r0, r0, asr #32
 800bf60:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800bf64:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800bf68:	78040408 	stmdavc	r4, {r3, sl}
 800bf6c:	44384000 	ldrtmi	r4, [r8], #-0
 800bf70:	00384444 	eorseq	r4, r8, r4, asr #8
 800bf74:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800bf78:	40001824 	andmi	r1, r0, r4, lsr #16
 800bf7c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800bf80:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800bf84:	08040408 	stmdaeq	r4, {r3, sl}
 800bf88:	54484000 	strbpl	r4, [r8], #-0
 800bf8c:	00245454 	eoreq	r5, r4, r4, asr r4
 800bf90:	3f040440 	svccc	0x00040440
 800bf94:	40002444 	andmi	r2, r0, r4, asr #8
 800bf98:	2040403c 	subcs	r4, r0, ip, lsr r0
 800bf9c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800bfa0:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800bfa4:	403c4000 	eorsmi	r4, ip, r0
 800bfa8:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800bfac:	10284440 	eorne	r4, r8, r0, asr #8
 800bfb0:	40004428 	andmi	r4, r0, r8, lsr #8
 800bfb4:	9090904c 	addsls	r9, r0, ip, asr #32
 800bfb8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800bfbc:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800bfc0:	08004000 	stmdaeq	r0, {lr}
 800bfc4:	00004136 	andeq	r4, r0, r6, lsr r1
 800bfc8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800bfcc:	40000000 	andmi	r0, r0, r0
 800bfd0:	08364100 	ldmdaeq	r6!, {r8, lr}
 800bfd4:	02400000 	subeq	r0, r0, #0
 800bfd8:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800bfdc:	263c4000 	ldrtcs	r4, [ip], -r0
 800bfe0:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800bfe4 <oled_128x32_init>:
 800bfe4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800bfe8:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800bfec:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800bff0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800bff4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800bff8:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800bffc <oled_128x64_init>:
 800bffc:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800c000:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800c004:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800c008:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800c00c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800c010:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800c014 <vtable for Ssd1306>:
	...
 800c01c:	08007d09 	stmdaeq	r0, {r0, r3, r8, sl, fp, ip, sp, lr}
 800c020:	08007d35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, ip, sp, lr}
 800c024:	08008045 	stmdaeq	r0, {r0, r2, r6, pc}
 800c028:	08007fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800c02c:	08007e99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, ip, sp, lr}
 800c030:	08007d55 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, fp, ip, sp, lr}
 800c034:	08007d7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800c038:	08007e6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800c03c:	08007e29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, ip, sp, lr}
 800c040:	08007d0b 	stmdaeq	r0, {r0, r1, r3, r8, sl, fp, ip, sp, lr}
 800c044:	08007ed5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800c048:	08007ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 800c04c:	08007efb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 800c050:	08007d0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp, ip, sp, lr}
 800c054:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800c058:	5b1b006d 	blpl	86cc214 <__exidx_end+0x6c0074>
 800c05c:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800c060:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800c064:	205d732a 	subscs	r7, sp, sl, lsr #6
 800c068:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800c06c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800c070:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800c074:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800c078:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800c07c:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800c080:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800c084:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800c088:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800c08c:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800c090:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800c094:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800c098:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800c09c:	252f6432 	strcs	r6, [pc, #-1074]!	; 800bc72 <vtable for StorePixelDmx+0x46>
 800c0a0:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800c0a4:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800c0a8:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800c0ac:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800c0b0:	000a6432 	andeq	r6, sl, r2, lsr r4
 800c0b4:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800c0b8:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800c0bc:	33534400 	cmpcc	r3, #0, 8
 800c0c0:	00313332 	eorseq	r3, r1, r2, lsr r3
 800c0c4:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800c0c8:	00333635 	eorseq	r3, r3, r5, lsr r6
 800c0cc:	5f434f53 	svcpl	0x00434f53
 800c0d0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800c0d4:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800c0d8:	00000000 	andeq	r0, r0, r0

0800c0dc <CSWTCH.7>:
 800c0dc:	0800c0b4 	stmdaeq	r0, {r2, r4, r5, r7, lr, pc}
 800c0e0:	0800c0bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, lr, pc}
 800c0e4:	0800c0c4 	stmdaeq	r0, {r2, r6, r7, lr, pc}
 800c0e8:	0800c0cc 	stmdaeq	r0, {r2, r3, r6, r7, lr, pc}
 800c0ec:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800c0f0:	203a636f 	eorscs	r6, sl, pc, ror #6
 800c0f4:	000a7525 	andeq	r7, sl, r5, lsr #10
 800c0f8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800c0fc:	203a636f 	eorscs	r6, sl, pc, ror #6
 800c100:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 800c104:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 800c108:	6b636f6c 	blvs	98e7ec0 <__exidx_end+0x18dbd20>
 800c10c:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 800c110:	000a7469 	andeq	r7, sl, r9, ror #8
 800c114:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800c118:	203a636f 	eorscs	r6, sl, pc, ror #6
 800c11c:	6f6c4270 	svcvs	0x006c4270
 800c120:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 800c124:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 800c128:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 800c12c:	7a697320 	bvc	9a68db4 <__exidx_end+0x1a5cc14>
 800c130:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 800c134:	6164202c 	cmnvs	r4, ip, lsr #32
 800c138:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 800c13c:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 800c140:	3a656572 	bcc	9965710 <__exidx_end+0x1959570>
 800c144:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 800c148:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 800c14c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 800c150:	203d2072 	eorscs	r2, sp, r2, ror r0
 800c154:	202c7025 	eorcs	r7, ip, r5, lsr #32
 800c158:	6f6c4270 	svcvs	0x006c4270
 800c15c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 800c160:	0a702520 	beq	9c155e8 <__exidx_end+0x1c09448>
 800c164:	00000000 	andeq	r0, r0, r0

0800c168 <days_of_month>:
 800c168:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 800c170:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c174:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c178:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c17c:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c180:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c184:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c188:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c18c:	0000001f 	andeq	r0, r0, pc, lsl r0
 800c190:	0000001e 	andeq	r0, r0, lr, lsl r0
 800c194:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800c198 <__exidx_start>:
 800c198:	7fff6168 	svcvc	0x00ff6168
 800c19c:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800c1a0 <.ARM.attributes>:
 800c1a0:	00002e41 	andeq	r2, r0, r1, asr #28
 800c1a4:	61656100 	cmnvs	r5, r0, lsl #2
 800c1a8:	01006962 	tsteq	r0, r2, ror #18
 800c1ac:	00000024 	andeq	r0, r0, r4, lsr #32
 800c1b0:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800c1b4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800c1b8:	0600334d 	streq	r3, [r0], -sp, asr #6
 800c1bc:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 800c1c0:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 800c1c4:	17011501 	strne	r1, [r1, -r1, lsl #10]
 800c1c8:	1a011803 	bne	80521dc <__exidx_end+0x4603c>
 800c1cc:	Address 0x000000000800c1cc is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f5 <RDMResponder::m_IsSubDeviceActive>:
200001f5:	 	andeq	r0, r0, r0

200001f8 <RDMResponder::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSensors::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <RDMSubDevices::s_pThis>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_IsActive>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_pLightSet>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <DMXReceiver::s_bDisableOutput>:
2000020c:	00000000 	andeq	r0, r0, r0

20000210 <s_RxBuffer>:
	...

20000420 <s_TxBuffer>:
	...

20000624 <sv_PortState>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <sv_nRxDmxPackets>:
	...

20000638 <sv_nUartsSending>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <Dmx::s_pThis>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <gv_RdmDataReceiveEnd>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMDeviceResponder::s_pThis>:
20000644:	00000000 	andeq	r0, r0, r0

20000648 <RDMIdentify::m_bIsEnabled>:
	...

20000649 <RDMIdentify::m_nMode>:
20000649:	 	andeq	r0, r0, r0

2000064c <RDMIdentify::s_pThis>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <WS28xxDmx::s_pThis>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelDmxParamsRdm::s_Data>:
20000658:	00000000 	andeq	r0, r0, r0

2000065c <PixelPatterns::m_PortConfig>:
	...

2000067c <PixelPatterns::m_nActivePorts>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_pScannerColours>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_nCount>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelPatterns::m_pOutput>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_pThis>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <PixelTestPattern::s_Pattern>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <s_tmp>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <WS28xx::s_pThis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <Network::s_pThis>:
2000069c:	00000000 	andeq	r0, r0, r0

200006a0 <DisplayUdf::s_pThis>:
200006a0:	00000000 	andeq	r0, r0, r0

200006a4 <ConfigStore::s_nWaitMillis>:
200006a4:	00000000 	andeq	r0, r0, r0

200006a8 <ConfigStore::s_SpiFlashData>:
	...

200016a8 <ConfigStore::s_nStartAddress>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <ConfigStore::s_bHaveFlashChip>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <ConfigStore::s_nSpiFlashStoreSize>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <ConfigStore::s_State>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <ConfigStore::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <ConfigStore::s_bIsNew>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreDisplayUdf::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StorePixelDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <StoreRDMDevice::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <StoreRDMSensors::s_pThis>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <StoreRDMSubDevices::s_pThis>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <FlashCode::s_pThis>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashcode::s_nAddress>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashcode::s_State>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashcode::s_nPage>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <flashcode::s_pData>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <flashcode::s_isBank0>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <flashcode::s_nLength>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <Display::s_pThis>:
200016f0:	00000000 	andeq	r0, r0, r0

200016f4 <_ClearBuffer>:
	...

2000177c <Ssd1306::s_pThis>:
2000177c:	00000000 	andeq	r0, r0, r0

20001780 <FirmwareVersion::s_FirmwareVersion>:
	...

20001796 <FirmwareVersion::s_Print>:
	...

200017d8 <FirmwareVersion::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <LedBlink::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <Hardware::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <HwClock::s_pThis>:
200017e4:	00000000 	andeq	r0, r0, r0

200017e8 <Tm>:
	...

20001810 <s_micros>:
	...

20001818 <set_timer>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_nSysTickMillis>:
2000181c:	00000000 	andeq	r0, r0, r0

20001820 <s_nAddress>:
20001820:	00000000 	andeq	r0, r0, r0

20001824 <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
