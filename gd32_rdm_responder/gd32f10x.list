
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	080012c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip}
 8000008:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800000c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000010:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000014:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000018:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
	...
 800002c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000030:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800003c:	080088c5 	stmdaeq	r0, {r0, r2, r6, r7, fp, pc}
 8000040:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000044:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000048:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800004c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000050:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000054:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000058:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800005c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000060:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000064:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000068:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800006c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000070:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000074:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000078:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800007c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000080:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000084:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000088:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800008c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000090:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000094:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000098:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800009c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000a0:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000a4:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000a8:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000ac:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000b0:	08003691 	stmdaeq	r0, {r0, r4, r7, r9, sl, ip, sp}
 80000b4:	08003731 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, ip, sp}
 80000b8:	08003775 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, sl, ip, sp}
 80000bc:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000c0:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000c4:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000c8:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000cc:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000d0:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000d4:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000d8:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000dc:	08003499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, sp}
 80000e0:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000e4:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000e8:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000ec:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000f0:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000f4:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 80000f8:	00000000 	andeq	r0, r0, r0
 80000fc:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000100:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000104:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000108:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800010c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000110:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000114:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000118:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800011c:	08003795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, ip, sp}
 8000120:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000124:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 8000128:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}
 800012c:	08001315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f008 fb57 	bl	80087e4 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fb84 	bl	8008844 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f008 fb81 	bl	8008844 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800b430 	stmdaeq	r0, {r4, r5, sl, ip, sp, pc}
 800014c:	0800b436 	stmdaeq	r0, {r1, r2, r4, r5, sl, ip, sp, pc}

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b976 	b.w	8000454 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	4688      	mov	r8, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14d      	bne.n	800022c <__udivmoddi4+0xac>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d968      	bls.n	8000268 <__udivmoddi4+0xe8>
 8000196:	fab2 f282 	clz	r2, r2
 800019a:	b152      	cbz	r2, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa01 f302 	lsl.w	r3, r1, r2
 80001a0:	f1c2 0120 	rsb	r1, r2, #32
 80001a4:	fa20 f101 	lsr.w	r1, r0, r1
 80001a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ac:	ea41 0803 	orr.w	r8, r1, r3
 80001b0:	4094      	lsls	r4, r2
 80001b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ba:	fa1f fe8c 	uxth.w	lr, ip
 80001be:	fb01 8817 	mls	r8, r1, r7, r8
 80001c2:	fb07 f00e 	mul.w	r0, r7, lr
 80001c6:	0c23      	lsrs	r3, r4, #16
 80001c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001cc:	4298      	cmp	r0, r3
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0303 	adds.w	r3, ip, r3
 80001d4:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80001d8:	f080 811e 	bcs.w	8000418 <__udivmoddi4+0x298>
 80001dc:	4298      	cmp	r0, r3
 80001de:	f240 811b 	bls.w	8000418 <__udivmoddi4+0x298>
 80001e2:	3f02      	subs	r7, #2
 80001e4:	4463      	add	r3, ip
 80001e6:	1a1b      	subs	r3, r3, r0
 80001e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001ec:	fb01 3310 	mls	r3, r1, r0, r3
 80001f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001fa:	45a6      	cmp	lr, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000206:	f080 8109 	bcs.w	800041c <__udivmoddi4+0x29c>
 800020a:	45a6      	cmp	lr, r4
 800020c:	f240 8106 	bls.w	800041c <__udivmoddi4+0x29c>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	eba4 040e 	sub.w	r4, r4, lr
 800021a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021e:	b11e      	cbz	r6, 8000228 <__udivmoddi4+0xa8>
 8000220:	2300      	movs	r3, #0
 8000222:	40d4      	lsrs	r4, r2
 8000224:	e9c6 4300 	strd	r4, r3, [r6]
 8000228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022c:	428b      	cmp	r3, r1
 800022e:	d908      	bls.n	8000242 <__udivmoddi4+0xc2>
 8000230:	2e00      	cmp	r6, #0
 8000232:	f000 80ee 	beq.w	8000412 <__udivmoddi4+0x292>
 8000236:	2100      	movs	r1, #0
 8000238:	e9c6 0500 	strd	r0, r5, [r6]
 800023c:	4608      	mov	r0, r1
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d14a      	bne.n	80002e0 <__udivmoddi4+0x160>
 800024a:	42ab      	cmp	r3, r5
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xd4>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 80fc 	bhi.w	800044c <__udivmoddi4+0x2cc>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb65 0303 	sbc.w	r3, r5, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4698      	mov	r8, r3
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e2      	beq.n	8000228 <__udivmoddi4+0xa8>
 8000262:	e9c6 4800 	strd	r4, r8, [r6]
 8000266:	e7df      	b.n	8000228 <__udivmoddi4+0xa8>
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xec>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	f040 8091 	bne.w	8000398 <__udivmoddi4+0x218>
 8000276:	eba1 000c 	sub.w	r0, r1, ip
 800027a:	2101      	movs	r1, #1
 800027c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000280:	fa1f fe8c 	uxth.w	lr, ip
 8000284:	fbb0 f3f7 	udiv	r3, r0, r7
 8000288:	fb07 0013 	mls	r0, r7, r3, r0
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000292:	fb0e f003 	mul.w	r0, lr, r3
 8000296:	42a8      	cmp	r0, r5
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x12c>
 800029a:	eb1c 0505 	adds.w	r5, ip, r5
 800029e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x12a>
 80002a4:	42a8      	cmp	r0, r5
 80002a6:	f200 80ce 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 80002aa:	4643      	mov	r3, r8
 80002ac:	1a2d      	subs	r5, r5, r0
 80002ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80002b2:	fb07 5510 	mls	r5, r7, r0, r5
 80002b6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	45a6      	cmp	lr, r4
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x156>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x154>
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	f200 80b6 	bhi.w	8000440 <__udivmoddi4+0x2c0>
 80002d4:	4628      	mov	r0, r5
 80002d6:	eba4 040e 	sub.w	r4, r4, lr
 80002da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002de:	e79e      	b.n	800021e <__udivmoddi4+0x9e>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbba f8f9 	udiv	r8, sl, r9
 80002fa:	fa20 f307 	lsr.w	r3, r0, r7
 80002fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000302:	408d      	lsls	r5, r1
 8000304:	fa1f fe8c 	uxth.w	lr, ip
 8000308:	431d      	orrs	r5, r3
 800030a:	fa00 f301 	lsl.w	r3, r0, r1
 800030e:	fb08 f00e 	mul.w	r0, r8, lr
 8000312:	0c2c      	lsrs	r4, r5, #16
 8000314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000318:	42a0      	cmp	r0, r4
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90b      	bls.n	8000338 <__udivmoddi4+0x1b8>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000328:	f080 8088 	bcs.w	800043c <__udivmoddi4+0x2bc>
 800032c:	42a0      	cmp	r0, r4
 800032e:	f240 8085 	bls.w	800043c <__udivmoddi4+0x2bc>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	4464      	add	r4, ip
 8000338:	1a24      	subs	r4, r4, r0
 800033a:	fbb4 f0f9 	udiv	r0, r4, r9
 800033e:	fb09 4410 	mls	r4, r9, r0, r4
 8000342:	fb00 fe0e 	mul.w	lr, r0, lr
 8000346:	b2ad      	uxth	r5, r5
 8000348:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x1e2>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000358:	d26c      	bcs.n	8000434 <__udivmoddi4+0x2b4>
 800035a:	45a6      	cmp	lr, r4
 800035c:	d96a      	bls.n	8000434 <__udivmoddi4+0x2b4>
 800035e:	3802      	subs	r0, #2
 8000360:	4464      	add	r4, ip
 8000362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000366:	fba0 9502 	umull	r9, r5, r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	42ac      	cmp	r4, r5
 8000370:	46c8      	mov	r8, r9
 8000372:	46ae      	mov	lr, r5
 8000374:	d356      	bcc.n	8000424 <__udivmoddi4+0x2a4>
 8000376:	d053      	beq.n	8000420 <__udivmoddi4+0x2a0>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d069      	beq.n	8000450 <__udivmoddi4+0x2d0>
 800037c:	ebb3 0208 	subs.w	r2, r3, r8
 8000380:	eb64 040e 	sbc.w	r4, r4, lr
 8000384:	fa22 f301 	lsr.w	r3, r2, r1
 8000388:	fa04 f707 	lsl.w	r7, r4, r7
 800038c:	431f      	orrs	r7, r3
 800038e:	40cc      	lsrs	r4, r1
 8000390:	e9c6 7400 	strd	r7, r4, [r6]
 8000394:	2100      	movs	r1, #0
 8000396:	e747      	b.n	8000228 <__udivmoddi4+0xa8>
 8000398:	fa0c fc02 	lsl.w	ip, ip, r2
 800039c:	f1c2 0120 	rsb	r1, r2, #32
 80003a0:	fa25 f301 	lsr.w	r3, r5, r1
 80003a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ac:	4095      	lsls	r5, r2
 80003ae:	430d      	orrs	r5, r1
 80003b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b4:	fb07 3311 	mls	r3, r7, r1, r3
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	0c28      	lsrs	r0, r5, #16
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	fb01 f30e 	mul.w	r3, r1, lr
 80003c6:	4283      	cmp	r3, r0
 80003c8:	fa04 f402 	lsl.w	r4, r4, r2
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x260>
 80003ce:	eb1c 0000 	adds.w	r0, ip, r0
 80003d2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003d6:	d22f      	bcs.n	8000438 <__udivmoddi4+0x2b8>
 80003d8:	4283      	cmp	r3, r0
 80003da:	d92d      	bls.n	8000438 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	4460      	add	r0, ip
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e6:	fb07 0013 	mls	r0, r7, r3, r0
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003f0:	fb03 f00e 	mul.w	r0, r3, lr
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x28a>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000400:	d216      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 8000402:	42a8      	cmp	r0, r5
 8000404:	d914      	bls.n	8000430 <__udivmoddi4+0x2b0>
 8000406:	3b02      	subs	r3, #2
 8000408:	4465      	add	r5, ip
 800040a:	1a28      	subs	r0, r5, r0
 800040c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000410:	e738      	b.n	8000284 <__udivmoddi4+0x104>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e707      	b.n	8000228 <__udivmoddi4+0xa8>
 8000418:	462f      	mov	r7, r5
 800041a:	e6e4      	b.n	80001e6 <__udivmoddi4+0x66>
 800041c:	4618      	mov	r0, r3
 800041e:	e6f9      	b.n	8000214 <__udivmoddi4+0x94>
 8000420:	454b      	cmp	r3, r9
 8000422:	d2a9      	bcs.n	8000378 <__udivmoddi4+0x1f8>
 8000424:	ebb9 0802 	subs.w	r8, r9, r2
 8000428:	eb65 0e0c 	sbc.w	lr, r5, ip
 800042c:	3801      	subs	r0, #1
 800042e:	e7a3      	b.n	8000378 <__udivmoddi4+0x1f8>
 8000430:	4643      	mov	r3, r8
 8000432:	e7ea      	b.n	800040a <__udivmoddi4+0x28a>
 8000434:	4628      	mov	r0, r5
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e2>
 8000438:	4641      	mov	r1, r8
 800043a:	e7d1      	b.n	80003e0 <__udivmoddi4+0x260>
 800043c:	46d0      	mov	r8, sl
 800043e:	e77b      	b.n	8000338 <__udivmoddi4+0x1b8>
 8000440:	4464      	add	r4, ip
 8000442:	3802      	subs	r0, #2
 8000444:	e747      	b.n	80002d6 <__udivmoddi4+0x156>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	e72f      	b.n	80002ac <__udivmoddi4+0x12c>
 800044c:	4608      	mov	r0, r1
 800044e:	e706      	b.n	800025e <__udivmoddi4+0xde>
 8000450:	4631      	mov	r1, r6
 8000452:	e6e9      	b.n	8000228 <__udivmoddi4+0xa8>

08000454 <__aeabi_idiv0>:
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	; 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_dmul>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8de 	bleq	80009ac <__aeabi_dmul+0x1dc>
 80007f0:	442c      	add	r4, r5
 80007f2:	ea81 0603 	eor.w	r6, r1, r3
 80007f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80007fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80007fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000802:	bf18      	it	ne
 8000804:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800080c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000810:	d038      	beq.n	8000884 <__aeabi_dmul+0xb4>
 8000812:	fba0 ce02 	umull	ip, lr, r0, r2
 8000816:	f04f 0500 	mov.w	r5, #0
 800081a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800081e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000822:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000826:	f04f 0600 	mov.w	r6, #0
 800082a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800082e:	f09c 0f00 	teq	ip, #0
 8000832:	bf18      	it	ne
 8000834:	f04e 0e01 	orrne.w	lr, lr, #1
 8000838:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800083c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000840:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000844:	d204      	bcs.n	8000850 <__aeabi_dmul+0x80>
 8000846:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800084a:	416d      	adcs	r5, r5
 800084c:	eb46 0606 	adc.w	r6, r6, r6
 8000850:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000854:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000858:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800085c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000860:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000864:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000868:	bf88      	it	hi
 800086a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086e:	d81e      	bhi.n	80008ae <__aeabi_dmul+0xde>
 8000870:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000874:	bf08      	it	eq
 8000876:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000888:	ea46 0101 	orr.w	r1, r6, r1
 800088c:	ea40 0002 	orr.w	r0, r0, r2
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	f300 80ab 	bgt.w	8000a08 <__aeabi_dmul+0x238>
 80008b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008b6:	bfde      	ittt	le
 80008b8:	2000      	movle	r0, #0
 80008ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008be:	bd70      	pople	{r4, r5, r6, pc}
 80008c0:	f1c4 0400 	rsb	r4, r4, #0
 80008c4:	3c20      	subs	r4, #32
 80008c6:	da35      	bge.n	8000934 <__aeabi_dmul+0x164>
 80008c8:	340c      	adds	r4, #12
 80008ca:	dc1b      	bgt.n	8000904 <__aeabi_dmul+0x134>
 80008cc:	f104 0414 	add.w	r4, r4, #20
 80008d0:	f1c4 0520 	rsb	r5, r4, #32
 80008d4:	fa00 f305 	lsl.w	r3, r0, r5
 80008d8:	fa20 f004 	lsr.w	r0, r0, r4
 80008dc:	fa01 f205 	lsl.w	r2, r1, r5
 80008e0:	ea40 0002 	orr.w	r0, r0, r2
 80008e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80008e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008f0:	fa21 f604 	lsr.w	r6, r1, r4
 80008f4:	eb42 0106 	adc.w	r1, r2, r6
 80008f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008fc:	bf08      	it	eq
 80008fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f1c4 040c 	rsb	r4, r4, #12
 8000908:	f1c4 0520 	rsb	r5, r4, #32
 800090c:	fa00 f304 	lsl.w	r3, r0, r4
 8000910:	fa20 f005 	lsr.w	r0, r0, r5
 8000914:	fa01 f204 	lsl.w	r2, r1, r4
 8000918:	ea40 0002 	orr.w	r0, r0, r2
 800091c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000920:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000924:	f141 0100 	adc.w	r1, r1, #0
 8000928:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800092c:	bf08      	it	eq
 800092e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000932:	bd70      	pop	{r4, r5, r6, pc}
 8000934:	f1c4 0520 	rsb	r5, r4, #32
 8000938:	fa00 f205 	lsl.w	r2, r0, r5
 800093c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000940:	fa20 f304 	lsr.w	r3, r0, r4
 8000944:	fa01 f205 	lsl.w	r2, r1, r5
 8000948:	ea43 0302 	orr.w	r3, r3, r2
 800094c:	fa21 f004 	lsr.w	r0, r1, r4
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	fa21 f204 	lsr.w	r2, r1, r4
 8000958:	ea20 0002 	bic.w	r0, r0, r2
 800095c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000964:	bf08      	it	eq
 8000966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f094 0f00 	teq	r4, #0
 8000970:	d10f      	bne.n	8000992 <__aeabi_dmul+0x1c2>
 8000972:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000976:	0040      	lsls	r0, r0, #1
 8000978:	eb41 0101 	adc.w	r1, r1, r1
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	bf08      	it	eq
 8000982:	3c01      	subeq	r4, #1
 8000984:	d0f7      	beq.n	8000976 <__aeabi_dmul+0x1a6>
 8000986:	ea41 0106 	orr.w	r1, r1, r6
 800098a:	f095 0f00 	teq	r5, #0
 800098e:	bf18      	it	ne
 8000990:	4770      	bxne	lr
 8000992:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000996:	0052      	lsls	r2, r2, #1
 8000998:	eb43 0303 	adc.w	r3, r3, r3
 800099c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009a0:	bf08      	it	eq
 80009a2:	3d01      	subeq	r5, #1
 80009a4:	d0f7      	beq.n	8000996 <__aeabi_dmul+0x1c6>
 80009a6:	ea43 0306 	orr.w	r3, r3, r6
 80009aa:	4770      	bx	lr
 80009ac:	ea94 0f0c 	teq	r4, ip
 80009b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b4:	bf18      	it	ne
 80009b6:	ea95 0f0c 	teqne	r5, ip
 80009ba:	d00c      	beq.n	80009d6 <__aeabi_dmul+0x206>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	d1d1      	bne.n	800096c <__aeabi_dmul+0x19c>
 80009c8:	ea81 0103 	eor.w	r1, r1, r3
 80009cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009da:	bf06      	itte	eq
 80009dc:	4610      	moveq	r0, r2
 80009de:	4619      	moveq	r1, r3
 80009e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009e4:	d019      	beq.n	8000a1a <__aeabi_dmul+0x24a>
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	d102      	bne.n	80009f2 <__aeabi_dmul+0x222>
 80009ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80009f0:	d113      	bne.n	8000a1a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	d105      	bne.n	8000a04 <__aeabi_dmul+0x234>
 80009f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80009fc:	bf1c      	itt	ne
 80009fe:	4610      	movne	r0, r2
 8000a00:	4619      	movne	r1, r3
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dmul+0x24a>
 8000a04:	ea81 0103 	eor.w	r1, r1, r3
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
 8000a1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a22:	bd70      	pop	{r4, r5, r6, pc}

08000a24 <__aeabi_ddiv>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a32:	bf1d      	ittte	ne
 8000a34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a38:	ea94 0f0c 	teqne	r4, ip
 8000a3c:	ea95 0f0c 	teqne	r5, ip
 8000a40:	f000 f8a7 	bleq	8000b92 <__aeabi_ddiv+0x16e>
 8000a44:	eba4 0405 	sub.w	r4, r4, r5
 8000a48:	ea81 0e03 	eor.w	lr, r1, r3
 8000a4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a54:	f000 8088 	beq.w	8000b68 <__aeabi_ddiv+0x144>
 8000a58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a7c:	429d      	cmp	r5, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4296      	cmpeq	r6, r2
 8000a82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a8a:	d202      	bcs.n	8000a92 <__aeabi_ddiv+0x6e>
 8000a8c:	085b      	lsrs	r3, r3, #1
 8000a8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a92:	1ab6      	subs	r6, r6, r2
 8000a94:	eb65 0503 	sbc.w	r5, r5, r3
 8000a98:	085b      	lsrs	r3, r3, #1
 8000a9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000aa2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000aa6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000aae:	bf22      	ittt	cs
 8000ab0:	1ab6      	subcs	r6, r6, r2
 8000ab2:	4675      	movcs	r5, lr
 8000ab4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	ea4f 0232 	mov.w	r2, r2, rrx
 8000abe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ac6:	bf22      	ittt	cs
 8000ac8:	1ab6      	subcs	r6, r6, r2
 8000aca:	4675      	movcs	r5, lr
 8000acc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ad6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ada:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ade:	bf22      	ittt	cs
 8000ae0:	1ab6      	subcs	r6, r6, r2
 8000ae2:	4675      	movcs	r5, lr
 8000ae4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000af2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000af6:	bf22      	ittt	cs
 8000af8:	1ab6      	subcs	r6, r6, r2
 8000afa:	4675      	movcs	r5, lr
 8000afc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b00:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b04:	d018      	beq.n	8000b38 <__aeabi_ddiv+0x114>
 8000b06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b22:	d1c0      	bne.n	8000aa6 <__aeabi_ddiv+0x82>
 8000b24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b28:	d10b      	bne.n	8000b42 <__aeabi_ddiv+0x11e>
 8000b2a:	ea41 0100 	orr.w	r1, r1, r0
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b36:	e7b6      	b.n	8000aa6 <__aeabi_ddiv+0x82>
 8000b38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b3c:	bf04      	itt	eq
 8000b3e:	4301      	orreq	r1, r0
 8000b40:	2000      	moveq	r0, #0
 8000b42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b46:	bf88      	it	hi
 8000b48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b4c:	f63f aeaf 	bhi.w	80008ae <__aeabi_dmul+0xde>
 8000b50:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b54:	bf04      	itt	eq
 8000b56:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b5e:	f150 0000 	adcs.w	r0, r0, #0
 8000b62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b74:	bfc2      	ittt	gt
 8000b76:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b7e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b84:	f04f 0e00 	mov.w	lr, #0
 8000b88:	3c01      	subs	r4, #1
 8000b8a:	e690      	b.n	80008ae <__aeabi_dmul+0xde>
 8000b8c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b90:	e68d      	b.n	80008ae <__aeabi_dmul+0xde>
 8000b92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b96:	ea94 0f0c 	teq	r4, ip
 8000b9a:	bf08      	it	eq
 8000b9c:	ea95 0f0c 	teqeq	r5, ip
 8000ba0:	f43f af3b 	beq.w	8000a1a <__aeabi_dmul+0x24a>
 8000ba4:	ea94 0f0c 	teq	r4, ip
 8000ba8:	d10a      	bne.n	8000bc0 <__aeabi_ddiv+0x19c>
 8000baa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000bae:	f47f af34 	bne.w	8000a1a <__aeabi_dmul+0x24a>
 8000bb2:	ea95 0f0c 	teq	r5, ip
 8000bb6:	f47f af25 	bne.w	8000a04 <__aeabi_dmul+0x234>
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	e72c      	b.n	8000a1a <__aeabi_dmul+0x24a>
 8000bc0:	ea95 0f0c 	teq	r5, ip
 8000bc4:	d106      	bne.n	8000bd4 <__aeabi_ddiv+0x1b0>
 8000bc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000bca:	f43f aefd 	beq.w	80009c8 <__aeabi_dmul+0x1f8>
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e722      	b.n	8000a1a <__aeabi_dmul+0x24a>
 8000bd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bd8:	bf18      	it	ne
 8000bda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bde:	f47f aec5 	bne.w	800096c <__aeabi_dmul+0x19c>
 8000be2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000be6:	f47f af0d 	bne.w	8000a04 <__aeabi_dmul+0x234>
 8000bea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000bee:	f47f aeeb 	bne.w	80009c8 <__aeabi_dmul+0x1f8>
 8000bf2:	e712      	b.n	8000a1a <__aeabi_dmul+0x24a>

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fmul>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d06f      	beq.n	8000fa8 <__aeabi_fmul+0xf8>
 8000ec8:	441a      	add	r2, r3
 8000eca:	ea80 0c01 	eor.w	ip, r0, r1
 8000ece:	0240      	lsls	r0, r0, #9
 8000ed0:	bf18      	it	ne
 8000ed2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ed6:	d01e      	beq.n	8000f16 <__aeabi_fmul+0x66>
 8000ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000edc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ee0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ee4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ee8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ef0:	bf3e      	ittt	cc
 8000ef2:	0049      	lslcc	r1, r1, #1
 8000ef4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ef8:	005b      	lslcc	r3, r3, #1
 8000efa:	ea40 0001 	orr.w	r0, r0, r1
 8000efe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000f02:	2afd      	cmp	r2, #253	; 0xfd
 8000f04:	d81d      	bhi.n	8000f42 <__aeabi_fmul+0x92>
 8000f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f0e:	bf08      	it	eq
 8000f10:	f020 0001 	biceq.w	r0, r0, #1
 8000f14:	4770      	bx	lr
 8000f16:	f090 0f00 	teq	r0, #0
 8000f1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	0249      	lsleq	r1, r1, #9
 8000f22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f2a:	3a7f      	subs	r2, #127	; 0x7f
 8000f2c:	bfc2      	ittt	gt
 8000f2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f36:	4770      	bxgt	lr
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	3a01      	subs	r2, #1
 8000f42:	dc5d      	bgt.n	8001000 <__aeabi_fmul+0x150>
 8000f44:	f112 0f19 	cmn.w	r2, #25
 8000f48:	bfdc      	itt	le
 8000f4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f4e:	4770      	bxle	lr
 8000f50:	f1c2 0200 	rsb	r2, r2, #0
 8000f54:	0041      	lsls	r1, r0, #1
 8000f56:	fa21 f102 	lsr.w	r1, r1, r2
 8000f5a:	f1c2 0220 	rsb	r2, r2, #32
 8000f5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f66:	f140 0000 	adc.w	r0, r0, #0
 8000f6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f6e:	bf08      	it	eq
 8000f70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f74:	4770      	bx	lr
 8000f76:	f092 0f00 	teq	r2, #0
 8000f7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0040      	lsleq	r0, r0, #1
 8000f82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f86:	3a01      	subeq	r2, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fmul+0xce>
 8000f8a:	ea40 000c 	orr.w	r0, r0, ip
 8000f8e:	f093 0f00 	teq	r3, #0
 8000f92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0049      	lsleq	r1, r1, #1
 8000f9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9e:	3b01      	subeq	r3, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fmul+0xe6>
 8000fa2:	ea41 010c 	orr.w	r1, r1, ip
 8000fa6:	e78f      	b.n	8000ec8 <__aeabi_fmul+0x18>
 8000fa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	bf18      	it	ne
 8000fb2:	ea93 0f0c 	teqne	r3, ip
 8000fb6:	d00a      	beq.n	8000fce <__aeabi_fmul+0x11e>
 8000fb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fbc:	bf18      	it	ne
 8000fbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	d1d8      	bne.n	8000f76 <__aeabi_fmul+0xc6>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	4770      	bx	lr
 8000fce:	f090 0f00 	teq	r0, #0
 8000fd2:	bf17      	itett	ne
 8000fd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fd8:	4608      	moveq	r0, r1
 8000fda:	f091 0f00 	teqne	r1, #0
 8000fde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000fe2:	d014      	beq.n	800100e <__aeabi_fmul+0x15e>
 8000fe4:	ea92 0f0c 	teq	r2, ip
 8000fe8:	d101      	bne.n	8000fee <__aeabi_fmul+0x13e>
 8000fea:	0242      	lsls	r2, r0, #9
 8000fec:	d10f      	bne.n	800100e <__aeabi_fmul+0x15e>
 8000fee:	ea93 0f0c 	teq	r3, ip
 8000ff2:	d103      	bne.n	8000ffc <__aeabi_fmul+0x14c>
 8000ff4:	024b      	lsls	r3, r1, #9
 8000ff6:	bf18      	it	ne
 8000ff8:	4608      	movne	r0, r1
 8000ffa:	d108      	bne.n	800100e <__aeabi_fmul+0x15e>
 8000ffc:	ea80 0001 	eor.w	r0, r0, r1
 8001000:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001004:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001008:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800100c:	4770      	bx	lr
 800100e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001012:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001016:	4770      	bx	lr

08001018 <__aeabi_fdiv>:
 8001018:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800101c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001020:	bf1e      	ittt	ne
 8001022:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001026:	ea92 0f0c 	teqne	r2, ip
 800102a:	ea93 0f0c 	teqne	r3, ip
 800102e:	d069      	beq.n	8001104 <__aeabi_fdiv+0xec>
 8001030:	eba2 0203 	sub.w	r2, r2, r3
 8001034:	ea80 0c01 	eor.w	ip, r0, r1
 8001038:	0249      	lsls	r1, r1, #9
 800103a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800103e:	d037      	beq.n	80010b0 <__aeabi_fdiv+0x98>
 8001040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001044:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001048:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800104c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001050:	428b      	cmp	r3, r1
 8001052:	bf38      	it	cc
 8001054:	005b      	lslcc	r3, r3, #1
 8001056:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800105a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800105e:	428b      	cmp	r3, r1
 8001060:	bf24      	itt	cs
 8001062:	1a5b      	subcs	r3, r3, r1
 8001064:	ea40 000c 	orrcs.w	r0, r0, ip
 8001068:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800106c:	bf24      	itt	cs
 800106e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001072:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001076:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800107a:	bf24      	itt	cs
 800107c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001080:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001084:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001088:	bf24      	itt	cs
 800108a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800108e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	bf18      	it	ne
 8001096:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800109a:	d1e0      	bne.n	800105e <__aeabi_fdiv+0x46>
 800109c:	2afd      	cmp	r2, #253	; 0xfd
 800109e:	f63f af50 	bhi.w	8000f42 <__aeabi_fmul+0x92>
 80010a2:	428b      	cmp	r3, r1
 80010a4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010a8:	bf08      	it	eq
 80010aa:	f020 0001 	biceq.w	r0, r0, #1
 80010ae:	4770      	bx	lr
 80010b0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80010b4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010b8:	327f      	adds	r2, #127	; 0x7f
 80010ba:	bfc2      	ittt	gt
 80010bc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80010c0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010c4:	4770      	bxgt	lr
 80010c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	3a01      	subs	r2, #1
 80010d0:	e737      	b.n	8000f42 <__aeabi_fmul+0x92>
 80010d2:	f092 0f00 	teq	r2, #0
 80010d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010da:	bf02      	ittt	eq
 80010dc:	0040      	lsleq	r0, r0, #1
 80010de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010e2:	3a01      	subeq	r2, #1
 80010e4:	d0f9      	beq.n	80010da <__aeabi_fdiv+0xc2>
 80010e6:	ea40 000c 	orr.w	r0, r0, ip
 80010ea:	f093 0f00 	teq	r3, #0
 80010ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010f2:	bf02      	ittt	eq
 80010f4:	0049      	lsleq	r1, r1, #1
 80010f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010fa:	3b01      	subeq	r3, #1
 80010fc:	d0f9      	beq.n	80010f2 <__aeabi_fdiv+0xda>
 80010fe:	ea41 010c 	orr.w	r1, r1, ip
 8001102:	e795      	b.n	8001030 <__aeabi_fdiv+0x18>
 8001104:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001108:	ea92 0f0c 	teq	r2, ip
 800110c:	d108      	bne.n	8001120 <__aeabi_fdiv+0x108>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	f47f af7d 	bne.w	800100e <__aeabi_fmul+0x15e>
 8001114:	ea93 0f0c 	teq	r3, ip
 8001118:	f47f af70 	bne.w	8000ffc <__aeabi_fmul+0x14c>
 800111c:	4608      	mov	r0, r1
 800111e:	e776      	b.n	800100e <__aeabi_fmul+0x15e>
 8001120:	ea93 0f0c 	teq	r3, ip
 8001124:	d104      	bne.n	8001130 <__aeabi_fdiv+0x118>
 8001126:	024b      	lsls	r3, r1, #9
 8001128:	f43f af4c 	beq.w	8000fc4 <__aeabi_fmul+0x114>
 800112c:	4608      	mov	r0, r1
 800112e:	e76e      	b.n	800100e <__aeabi_fmul+0x15e>
 8001130:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001134:	bf18      	it	ne
 8001136:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800113a:	d1ca      	bne.n	80010d2 <__aeabi_fdiv+0xba>
 800113c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001140:	f47f af5c 	bne.w	8000ffc <__aeabi_fmul+0x14c>
 8001144:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001148:	f47f af3c 	bne.w	8000fc4 <__aeabi_fmul+0x114>
 800114c:	e75f      	b.n	800100e <__aeabi_fmul+0x15e>
 800114e:	bf00      	nop

08001150 <__gesf2>:
 8001150:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001154:	e006      	b.n	8001164 <__cmpsf2+0x4>
 8001156:	bf00      	nop

08001158 <__lesf2>:
 8001158:	f04f 0c01 	mov.w	ip, #1
 800115c:	e002      	b.n	8001164 <__cmpsf2+0x4>
 800115e:	bf00      	nop

08001160 <__cmpsf2>:
 8001160:	f04f 0c01 	mov.w	ip, #1
 8001164:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001168:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800116c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001170:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001174:	bf18      	it	ne
 8001176:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800117a:	d011      	beq.n	80011a0 <__cmpsf2+0x40>
 800117c:	b001      	add	sp, #4
 800117e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001182:	bf18      	it	ne
 8001184:	ea90 0f01 	teqne	r0, r1
 8001188:	bf58      	it	pl
 800118a:	ebb2 0003 	subspl.w	r0, r2, r3
 800118e:	bf88      	it	hi
 8001190:	17c8      	asrhi	r0, r1, #31
 8001192:	bf38      	it	cc
 8001194:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001198:	bf18      	it	ne
 800119a:	f040 0001 	orrne.w	r0, r0, #1
 800119e:	4770      	bx	lr
 80011a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011a4:	d102      	bne.n	80011ac <__cmpsf2+0x4c>
 80011a6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011aa:	d105      	bne.n	80011b8 <__cmpsf2+0x58>
 80011ac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011b0:	d1e4      	bne.n	800117c <__cmpsf2+0x1c>
 80011b2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011b6:	d0e1      	beq.n	800117c <__cmpsf2+0x1c>
 80011b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <__aeabi_cfrcmple>:
 80011c0:	4684      	mov	ip, r0
 80011c2:	4608      	mov	r0, r1
 80011c4:	4661      	mov	r1, ip
 80011c6:	e7ff      	b.n	80011c8 <__aeabi_cfcmpeq>

080011c8 <__aeabi_cfcmpeq>:
 80011c8:	b50f      	push	{r0, r1, r2, r3, lr}
 80011ca:	f7ff ffc9 	bl	8001160 <__cmpsf2>
 80011ce:	2800      	cmp	r0, #0
 80011d0:	bf48      	it	mi
 80011d2:	f110 0f00 	cmnmi.w	r0, #0
 80011d6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011d8 <__aeabi_fcmpeq>:
 80011d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011dc:	f7ff fff4 	bl	80011c8 <__aeabi_cfcmpeq>
 80011e0:	bf0c      	ite	eq
 80011e2:	2001      	moveq	r0, #1
 80011e4:	2000      	movne	r0, #0
 80011e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ea:	bf00      	nop

080011ec <__aeabi_fcmplt>:
 80011ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f0:	f7ff ffea 	bl	80011c8 <__aeabi_cfcmpeq>
 80011f4:	bf34      	ite	cc
 80011f6:	2001      	movcc	r0, #1
 80011f8:	2000      	movcs	r0, #0
 80011fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011fe:	bf00      	nop

08001200 <__aeabi_fcmple>:
 8001200:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001204:	f7ff ffe0 	bl	80011c8 <__aeabi_cfcmpeq>
 8001208:	bf94      	ite	ls
 800120a:	2001      	movls	r0, #1
 800120c:	2000      	movhi	r0, #0
 800120e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001212:	bf00      	nop

08001214 <__aeabi_fcmpge>:
 8001214:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001218:	f7ff ffd2 	bl	80011c0 <__aeabi_cfrcmple>
 800121c:	bf94      	ite	ls
 800121e:	2001      	movls	r0, #1
 8001220:	2000      	movhi	r0, #0
 8001222:	f85d fb08 	ldr.w	pc, [sp], #8
 8001226:	bf00      	nop

08001228 <__aeabi_fcmpgt>:
 8001228:	f84d ed08 	str.w	lr, [sp, #-8]!
 800122c:	f7ff ffc8 	bl	80011c0 <__aeabi_cfrcmple>
 8001230:	bf34      	ite	cc
 8001232:	2001      	movcc	r0, #1
 8001234:	2000      	movcs	r0, #0
 8001236:	f85d fb08 	ldr.w	pc, [sp], #8
 800123a:	bf00      	nop

0800123c <__aeabi_f2iz>:
 800123c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001240:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001244:	d30f      	bcc.n	8001266 <__aeabi_f2iz+0x2a>
 8001246:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800124a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800124e:	d90d      	bls.n	800126c <__aeabi_f2iz+0x30>
 8001250:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001258:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800125c:	fa23 f002 	lsr.w	r0, r3, r2
 8001260:	bf18      	it	ne
 8001262:	4240      	negne	r0, r0
 8001264:	4770      	bx	lr
 8001266:	f04f 0000 	mov.w	r0, #0
 800126a:	4770      	bx	lr
 800126c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001270:	d101      	bne.n	8001276 <__aeabi_f2iz+0x3a>
 8001272:	0242      	lsls	r2, r0, #9
 8001274:	d105      	bne.n	8001282 <__aeabi_f2iz+0x46>
 8001276:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800127a:	bf08      	it	eq
 800127c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001280:	4770      	bx	lr
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	4770      	bx	lr

08001288 <__aeabi_f2uiz>:
 8001288:	0042      	lsls	r2, r0, #1
 800128a:	d20e      	bcs.n	80012aa <__aeabi_f2uiz+0x22>
 800128c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001290:	d30b      	bcc.n	80012aa <__aeabi_f2uiz+0x22>
 8001292:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001296:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800129a:	d409      	bmi.n	80012b0 <__aeabi_f2uiz+0x28>
 800129c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80012a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012a4:	fa23 f002 	lsr.w	r0, r3, r2
 80012a8:	4770      	bx	lr
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	4770      	bx	lr
 80012b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80012b4:	d101      	bne.n	80012ba <__aeabi_f2uiz+0x32>
 80012b6:	0242      	lsls	r2, r0, #9
 80012b8:	d102      	bne.n	80012c0 <__aeabi_f2uiz+0x38>
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012be:	4770      	bx	lr
 80012c0:	f04f 0000 	mov.w	r0, #0
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <Reset_Handler>:
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <Zerobss+0x10>)
 80012ca:	4685      	mov	sp, r0
 80012cc:	2100      	movs	r1, #0
 80012ce:	e003      	b.n	80012d8 <DataInit>

080012d0 <CopyData>:
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <Zerobss+0x14>)
 80012d2:	585b      	ldr	r3, [r3, r1]
 80012d4:	5043      	str	r3, [r0, r1]
 80012d6:	3104      	adds	r1, #4

080012d8 <DataInit>:
 80012d8:	480a      	ldr	r0, [pc, #40]	; (8001304 <Zerobss+0x18>)
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <Zerobss+0x1c>)
 80012dc:	1842      	adds	r2, r0, r1
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3f6      	bcc.n	80012d0 <CopyData>
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <Zerobss+0x20>)
 80012e4:	e002      	b.n	80012ec <Zerobss>

080012e6 <FillZerobss>:
 80012e6:	2300      	movs	r3, #0
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <Zerobss>:
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <Zerobss+0x24>)
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>
 80012f2:	f007 faef 	bl	80088d4 <SystemInit>
 80012f6:	f000 f8fd 	bl	80014f4 <main>
 80012fa:	4770      	bx	lr
 80012fc:	2000c000 	andcs	ip, r0, r0
 8001300:	0800b5dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 8001304:	20000000 	andcs	r0, r0, r0
 8001308:	200000e4 	andcs	r0, r0, r4, ror #1
 800130c:	200000e8 	andcs	r0, r0, r8, ror #1
 8001310:	2000981c 	andcs	r9, r0, ip, lsl r8

08001314 <ADC0_1_IRQHandler>:
 8001314:	e7fe      	b.n	8001314 <ADC0_1_IRQHandler>

08001316 <FactoryDefaults::~FactoryDefaults()>:
 8001316:	4770      	bx	lr

08001318 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8001318:	4770      	bx	lr
	...

0800131c <PixelDmxStartStop::Start()>:
 800131c:	2204      	movs	r2, #4
 800131e:	4b01      	ldr	r3, [pc, #4]	; (8001324 <PixelDmxStartStop::Start()+0x8>)
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	4770      	bx	lr
 8001324:	40011000 	andmi	r1, r1, r0

08001328 <PixelDmxStartStop::Stop()>:
 8001328:	2204      	movs	r2, #4
 800132a:	4b01      	ldr	r3, [pc, #4]	; (8001330 <PixelDmxStartStop::Stop()+0x8>)
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	4770      	bx	lr
 8001330:	40011000 	andmi	r1, r1, r0

08001334 <Reboot::~Reboot()>:
 8001334:	4770      	bx	lr

08001336 <Reboot::~Reboot()>:
 8001336:	b510      	push	{r4, lr}
 8001338:	4604      	mov	r4, r0
 800133a:	f007 f86c 	bl	8008416 <operator delete(void*)>
 800133e:	4620      	mov	r0, r4
 8001340:	bd10      	pop	{r4, pc}

08001342 <FactoryDefaults::~FactoryDefaults()>:
 8001342:	b510      	push	{r4, lr}
 8001344:	4604      	mov	r4, r0
 8001346:	f007 f866 	bl	8008416 <operator delete(void*)>
 800134a:	4620      	mov	r0, r4
 800134c:	bd10      	pop	{r4, pc}

0800134e <PixelDmxStartStop::~PixelDmxStartStop()>:
 800134e:	b510      	push	{r4, lr}
 8001350:	4604      	mov	r4, r0
 8001352:	f007 f860 	bl	8008416 <operator delete(void*)>
 8001356:	4620      	mov	r0, r4
 8001358:	bd10      	pop	{r4, pc}
	...

0800135c <RDMResponder::PersonalityUpdate(LightSet*)>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	4e0a      	ldr	r6, [pc, #40]	; (8001388 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 8001360:	4604      	mov	r4, r0
 8001362:	6830      	ldr	r0, [r6, #0]
 8001364:	460d      	mov	r5, r1
 8001366:	4281      	cmp	r1, r0
 8001368:	d007      	beq.n	800137a <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 800136a:	6803      	ldr	r3, [r0, #0]
 800136c:	2100      	movs	r1, #0
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4798      	blx	r3
 8001372:	2200      	movs	r2, #0
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 8001376:	6035      	str	r5, [r6, #0]
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	4620      	mov	r0, r4
 800137c:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 8001380:	f000 fbde 	bl	8001b40 <RDMResponder::PersonalityUpdate(unsigned int)>
 8001384:	bd70      	pop	{r4, r5, r6, pc}
 8001386:	bf00      	nop
 8001388:	20000204 	andcs	r0, r0, r4, lsl #4
 800138c:	20000200 	andcs	r0, r0, r0, lsl #4

08001390 <FactoryDefaults::Set()>:
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <FactoryDefaults::Set()+0xc>)
 8001392:	210b      	movs	r1, #11
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f005 bdb7 	b.w	8006f08 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800139a:	bf00      	nop
 800139c:	200016ac 	andcs	r1, r0, ip, lsr #13

080013a0 <Reboot::Run()>:
 80013a0:	4b01      	ldr	r3, [pc, #4]	; (80013a8 <Reboot::Run()+0x8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	f005 bc92 	b.w	8006ccc <WS28xx::Blackout()>
 80013a8:	20000694 	mulcs	r0, r4, r6

080013ac <RDMResponder::DmxStartAddressUpdate()>:
 80013ac:	b508      	push	{r3, lr}
 80013ae:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80013b2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
 80013b6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80013ba:	b289      	uxth	r1, r1
 80013bc:	f000 fbb4 	bl	8001b28 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 80013c0:	bd08      	pop	{r3, pc}

080013c2 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 80013c2:	b110      	cbz	r0, 80013ca <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4718      	bx	r3
 80013ca:	4770      	bx	lr

080013cc <RDMResponder::~RDMResponder()>:
 80013cc:	b510      	push	{r4, lr}
 80013ce:	4604      	mov	r4, r0
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <RDMResponder::~RDMResponder()+0x3c>)
 80013d2:	f840 3b8c 	str.w	r3, [r0], #140
 80013d6:	f001 fef3 	bl	80031c0 <RDMSubDevices::~RDMSubDevices()>
 80013da:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80013de:	f001 f8c1 	bl	8002564 <RDMSensors::~RDMSensors()>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2201      	movs	r2, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80013ec:	f002 fadc 	bl	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <RDMResponder::~RDMResponder()+0x40>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	6803      	ldr	r3, [r0, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	4798      	blx	r3
 80013fc:	2200      	movs	r2, #0
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <RDMResponder::~RDMResponder()+0x44>)
 8001400:	4620      	mov	r0, r4
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	bd10      	pop	{r4, pc}
 8001406:	bf00      	nop
 8001408:	0800a2b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, pc}
 800140c:	20000204 	andcs	r0, r0, r4, lsl #4
 8001410:	20000200 	andcs	r0, r0, r0, lsl #4

08001414 <RDMResponder::~RDMResponder()>:
 8001414:	b510      	push	{r4, lr}
 8001416:	4604      	mov	r4, r0
 8001418:	f7ff ffd8 	bl	80013cc <RDMResponder::~RDMResponder()>
 800141c:	4620      	mov	r0, r4
 800141e:	f006 fffa 	bl	8008416 <operator delete(void*)>
 8001422:	4620      	mov	r0, r4
 8001424:	bd10      	pop	{r4, pc}
	...

08001428 <Display::SetSleep(bool)>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4604      	mov	r4, r0
 800142c:	6980      	ldr	r0, [r0, #24]
 800142e:	460d      	mov	r5, r1
 8001430:	b138      	cbz	r0, 8001442 <Display::SetSleep(bool)+0x1a>
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	7421      	strb	r1, [r4, #16]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	4798      	blx	r3
 800143a:	b915      	cbnz	r5, 8001442 <Display::SetSleep(bool)+0x1a>
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <Display::SetSleep(bool)+0x1c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6063      	str	r3, [r4, #4]
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	20001814 	andcs	r1, r0, r4, lsl r8

08001448 <Display::Printf(unsigned char, char const*, ...)>:
 8001448:	b40c      	push	{r2, r3}
 800144a:	b570      	push	{r4, r5, r6, lr}
 800144c:	6984      	ldr	r4, [r0, #24]
 800144e:	4605      	mov	r5, r0
 8001450:	460e      	mov	r6, r1
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	b174      	cbz	r4, 8001474 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8001456:	ab0f      	add	r3, sp, #60	; 0x3c
 8001458:	2120      	movs	r1, #32
 800145a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800145c:	a802      	add	r0, sp, #8
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f000 ff78 	bl	8002354 <vsnprintf>
 8001464:	4604      	mov	r4, r0
 8001466:	69a8      	ldr	r0, [r5, #24]
 8001468:	4631      	mov	r1, r6
 800146a:	6803      	ldr	r3, [r0, #0]
 800146c:	aa02      	add	r2, sp, #8
 800146e:	69dd      	ldr	r5, [r3, #28]
 8001470:	b2a3      	uxth	r3, r4
 8001472:	47a8      	blx	r5
 8001474:	4620      	mov	r0, r4
 8001476:	b00a      	add	sp, #40	; 0x28
 8001478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800147c:	b002      	add	sp, #8
 800147e:	4770      	bx	lr

08001480 <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 8001480:	2300      	movs	r3, #0
 8001482:	b570      	push	{r4, r5, r6, lr}
 8001484:	4604      	mov	r4, r0
 8001486:	460e      	mov	r6, r1
 8001488:	4615      	mov	r5, r2
 800148a:	6043      	str	r3, [r0, #4]
 800148c:	6283      	str	r3, [r0, #40]	; 0x28
 800148e:	b992      	cbnz	r2, 80014b6 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x36>
 8001490:	8002      	strh	r2, [r0, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	f104 0208 	add.w	r2, r4, #8
 8001498:	62a3      	str	r3, [r4, #40]	; 0x28
 800149a:	1e71      	subs	r1, r6, #1
 800149c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80014a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80014a4:	b173      	cbz	r3, 80014c4 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x44>
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d00c      	beq.n	80014c4 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x44>
 80014aa:	f802 3b01 	strb.w	r3, [r2], #1
 80014ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014b0:	3301      	adds	r3, #1
 80014b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80014b4:	e7f4      	b.n	80014a0 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x20>
 80014b6:	6813      	ldr	r3, [r2, #0]
 80014b8:	4610      	mov	r0, r2
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	4798      	blx	r3
 80014be:	6065      	str	r5, [r4, #4]
 80014c0:	8020      	strh	r0, [r4, #0]
 80014c2:	e7e6      	b.n	8001492 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 80014c4:	4620      	mov	r0, r4
 80014c6:	bd70      	pop	{r4, r5, r6, pc}

080014c8 <is_config_mode()>:
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4c09      	ldr	r4, [pc, #36]	; (80014f0 <is_config_mode()+0x28>)
 80014cc:	f240 6002 	movw	r0, #1538	; 0x602
 80014d0:	f007 fc3e 	bl	8008d50 <rcu_periph_clock_enable>
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	2203      	movs	r2, #3
 80014d8:	4620      	mov	r0, r4
 80014da:	2148      	movs	r1, #72	; 0x48
 80014dc:	f007 fba6 	bl	8008c2c <gpio_init>
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	4620      	mov	r0, r4
 80014e4:	f007 fbf6 	bl	8008cd4 <gpio_input_bit_get>
 80014e8:	fab0 f080 	clz	r0, r0
 80014ec:	0940      	lsrs	r0, r0, #5
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	40010800 	andmi	r0, r1, r0, lsl #16

080014f4 <main>:
 80014f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014f8:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 80014fc:	a81f      	add	r0, sp, #124	; 0x7c
 80014fe:	f006 fd6f 	bl	8007fe0 <Hardware::Hardware()>
 8001502:	a817      	add	r0, sp, #92	; 0x5c
 8001504:	f006 f930 	bl	8007768 <Network::Network()>
 8001508:	a824      	add	r0, sp, #144	; 0x90
 800150a:	f006 fd13 	bl	8007f34 <LedBlink::LedBlink()>
 800150e:	a87a      	add	r0, sp, #488	; 0x1e8
 8001510:	f006 f950 	bl	80077b4 <DisplayUdf::DisplayUdf()>
 8001514:	4bb0      	ldr	r3, [pc, #704]	; (80017d8 <main+0x2e4>)
 8001516:	4ab1      	ldr	r2, [pc, #708]	; (80017dc <main+0x2e8>)
 8001518:	49b1      	ldr	r1, [pc, #708]	; (80017e0 <main+0x2ec>)
 800151a:	a804      	add	r0, sp, #16
 800151c:	f006 fcc4 	bl	8007ea8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8001520:	a805      	add	r0, sp, #20
 8001522:	f005 ffa9 	bl	8007478 <FlashRom::FlashRom()>
 8001526:	a806      	add	r0, sp, #24
 8001528:	f005 fcc8 	bl	8006ebc <SpiFlashStore::SpiFlashStore()>
 800152c:	2101      	movs	r1, #1
 800152e:	a824      	add	r0, sp, #144	; 0x90
 8001530:	f006 fd22 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 8001534:	f7ff ffc8 	bl	80014c8 <is_config_mode()>
 8001538:	4daa      	ldr	r5, [pc, #680]	; (80017e4 <main+0x2f0>)
 800153a:	2100      	movs	r1, #0
 800153c:	4606      	mov	r6, r0
 800153e:	ac2a      	add	r4, sp, #168	; 0xa8
 8001540:	a804      	add	r0, sp, #16
 8001542:	f006 fce9 	bl	8007f18 <FirmwareVersion::Print(char const*)>
 8001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800154e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001552:	a811      	add	r0, sp, #68	; 0x44
 8001554:	f005 ff84 	bl	8007460 <StoreWS28xxDmx::StoreWS28xxDmx()>
 8001558:	a911      	add	r1, sp, #68	; 0x44
 800155a:	a844      	add	r0, sp, #272	; 0x110
 800155c:	f004 f93e 	bl	80057dc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8001560:	a844      	add	r0, sp, #272	; 0x110
 8001562:	f004 f963 	bl	800582c <WS28xxDmxParams::Load()>
 8001566:	b130      	cbz	r0, 8001576 <main+0x82>
 8001568:	a844      	add	r0, sp, #272	; 0x110
 800156a:	a92a      	add	r1, sp, #168	; 0xa8
 800156c:	f004 f96a 	bl	8005844 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 8001570:	a844      	add	r0, sp, #272	; 0x110
 8001572:	f004 f99d 	bl	80058b0 <WS28xxDmxParams::Dump()>
 8001576:	ab09      	add	r3, sp, #36	; 0x24
 8001578:	ac0a      	add	r4, sp, #40	; 0x28
 800157a:	2101      	movs	r1, #1
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	aa08      	add	r2, sp, #32
 8001580:	ab1b      	add	r3, sp, #108	; 0x6c
 8001582:	a82a      	add	r0, sp, #168	; 0xa8
 8001584:	9401      	str	r4, [sp, #4]
 8001586:	f003 ff23 	bl	80053d0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800158a:	a82a      	add	r0, sp, #168	; 0xa8
 800158c:	f003 ff78 	bl	8005480 <PixelDmxConfiguration::Dump()>
 8001590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001592:	2b01      	cmp	r3, #1
 8001594:	d909      	bls.n	80015aa <main+0xb6>
 8001596:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8001598:	9a08      	ldr	r2, [sp, #32]
 800159a:	024b      	lsls	r3, r1, #9
 800159c:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 80015a0:	bf94      	ite	ls
 80015a2:	fbb3 f3f2 	udivls	r3, r3, r2
 80015a6:	23aa      	movhi	r3, #170	; 0xaa
 80015a8:	932b      	str	r3, [sp, #172]	; 0xac
 80015aa:	a92a      	add	r1, sp, #168	; 0xa8
 80015ac:	a869      	add	r0, sp, #420	; 0x1a4
 80015ae:	f004 f8d5 	bl	800575c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80015b2:	4f8d      	ldr	r7, [pc, #564]	; (80017e8 <main+0x2f4>)
 80015b4:	4b8d      	ldr	r3, [pc, #564]	; (80017ec <main+0x2f8>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	2110      	movs	r1, #16
 80015ba:	4638      	mov	r0, r7
 80015bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80015be:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 80015c2:	2304      	movs	r3, #4
 80015c4:	f8cd 81dc 	str.w	r8, [sp, #476]	; 0x1dc
 80015c8:	f007 fb30 	bl	8008c2c <gpio_init>
 80015cc:	2304      	movs	r3, #4
 80015ce:	ac0b      	add	r4, sp, #44	; 0x2c
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	2101      	movs	r1, #1
 80015d4:	9478      	str	r4, [sp, #480]	; 0x1e0
 80015d6:	a807      	add	r0, sp, #28
 80015d8:	f89d 413a 	ldrb.w	r4, [sp, #314]	; 0x13a
 80015dc:	f004 fa2a 	bl	8005a34 <PixelPatterns::PixelPatterns(unsigned int)>
 80015e0:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <main+0x2fc>)
 80015e2:	2c05      	cmp	r4, #5
 80015e4:	601c      	str	r4, [r3, #0]
 80015e6:	f340 81ea 	ble.w	80019be <main+0x4ca>
 80015ea:	4641      	mov	r1, r8
 80015ec:	a80c      	add	r0, sp, #48	; 0x30
 80015ee:	f003 ff63 	bl	80054b8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>
 80015f2:	a80d      	add	r0, sp, #52	; 0x34
 80015f4:	f005 fe24 	bl	8007240 <StoreRDMSensors::StoreRDMSensors()>
 80015f8:	a90d      	add	r1, sp, #52	; 0x34
 80015fa:	a85b      	add	r0, sp, #364	; 0x16c
 80015fc:	f001 f8be 	bl	800277c <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 8001600:	a85b      	add	r0, sp, #364	; 0x16c
 8001602:	f001 f8bd 	bl	8002780 <RDMSensorsParams::Load()>
 8001606:	b128      	cbz	r0, 8001614 <main+0x120>
 8001608:	a85b      	add	r0, sp, #364	; 0x16c
 800160a:	f001 f8dd 	bl	80027c8 <RDMSensorsParams::Set()>
 800160e:	a85b      	add	r0, sp, #364	; 0x16c
 8001610:	f001 f8c2 	bl	8002798 <RDMSensorsParams::Dump()>
 8001614:	a80e      	add	r0, sp, #56	; 0x38
 8001616:	f005 fe47 	bl	80072a8 <StoreRDMSubDevices::StoreRDMSubDevices()>
 800161a:	a90e      	add	r1, sp, #56	; 0x38
 800161c:	a88e      	add	r0, sp, #568	; 0x238
 800161e:	f001 fe9d 	bl	800335c <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 8001622:	a88e      	add	r0, sp, #568	; 0x238
 8001624:	f001 fe9c 	bl	8003360 <RDMSubDevicesParams::Load()>
 8001628:	b128      	cbz	r0, 8001636 <main+0x142>
 800162a:	a88e      	add	r0, sp, #568	; 0x238
 800162c:	f001 fea5 	bl	800337a <RDMSubDevicesParams::Set()>
 8001630:	a88e      	add	r0, sp, #568	; 0x238
 8001632:	f001 fea1 	bl	8003378 <RDMSubDevicesParams::Dump()>
 8001636:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001638:	f004 fc64 	bl	8005f04 <PixelType::GetType(pixel::Type)>
 800163c:	4605      	mov	r5, r0
 800163e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001640:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8001644:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
 8001648:	f004 fc68 	bl	8005f1c <PixelType::GetMap(pixel::Map)>
 800164c:	462b      	mov	r3, r5
 800164e:	211f      	movs	r1, #31
 8001650:	4a68      	ldr	r2, [pc, #416]	; (80017f4 <main+0x300>)
 8001652:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001656:	f8cd 8000 	str.w	r8, [sp]
 800165a:	a832      	add	r0, sp, #200	; 0xc8
 800165c:	f000 fe62 	bl	8002324 <snprintf>
 8001660:	202c      	movs	r0, #44	; 0x2c
 8001662:	f006 fedc 	bl	800841e <operator new(unsigned int)>
 8001666:	4605      	mov	r5, r0
 8001668:	aa69      	add	r2, sp, #420	; 0x1a4
 800166a:	a932      	add	r1, sp, #200	; 0xc8
 800166c:	f7ff ff08 	bl	8001480 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8001670:	202c      	movs	r0, #44	; 0x2c
 8001672:	9513      	str	r5, [sp, #76]	; 0x4c
 8001674:	f006 fed3 	bl	800841e <operator new(unsigned int)>
 8001678:	4605      	mov	r5, r0
 800167a:	495f      	ldr	r1, [pc, #380]	; (80017f8 <main+0x304>)
 800167c:	aa0c      	add	r2, sp, #48	; 0x30
 800167e:	f7ff feff 	bl	8001480 <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 8001682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001684:	a8d6      	add	r0, sp, #856	; 0x358
 8001686:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800168a:	9514      	str	r5, [sp, #80]	; 0x50
 800168c:	f002 f9ba 	bl	8003a04 <Dmx::Dmx()>
 8001690:	ada2      	add	r5, sp, #648	; 0x288
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <main+0x308>)
 8001694:	2202      	movs	r2, #2
 8001696:	a913      	add	r1, sp, #76	; 0x4c
 8001698:	4628      	mov	r0, r5
 800169a:	f8c3 8000 	str.w	r8, [r3]
 800169e:	f002 fbf1 	bl	8003e84 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 80016a2:	2101      	movs	r1, #1
 80016a4:	a8dd      	add	r0, sp, #884	; 0x374
 80016a6:	f002 fdbe 	bl	8004226 <RDMHandler::RDMHandler(bool)>
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <main+0x30c>)
 80016ac:	4628      	mov	r0, r5
 80016ae:	93a2      	str	r3, [sp, #648]	; 0x288
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <main+0x310>)
 80016b2:	601d      	str	r5, [r3, #0]
 80016b4:	f002 fc44 	bl	8003f40 <RDMDeviceResponder::Init()>
 80016b8:	a815      	add	r0, sp, #84	; 0x54
 80016ba:	f005 fd8b 	bl	80071d4 <StoreRDMDevice::StoreRDMDevice()>
 80016be:	a915      	add	r1, sp, #84	; 0x54
 80016c0:	a84f      	add	r0, sp, #316	; 0x13c
 80016c2:	f002 fb47 	bl	8003d54 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 80016c6:	a84f      	add	r0, sp, #316	; 0x13c
 80016c8:	f002 fb56 	bl	8003d78 <RDMDeviceParams::Load()>
 80016cc:	b130      	cbz	r0, 80016dc <main+0x1e8>
 80016ce:	a84f      	add	r0, sp, #316	; 0x13c
 80016d0:	a9a3      	add	r1, sp, #652	; 0x28c
 80016d2:	f002 fb5c 	bl	8003d8e <RDMDeviceParams::Set(RDMDevice*)>
 80016d6:	a84f      	add	r0, sp, #316	; 0x13c
 80016d8:	f002 fb8e 	bl	8003df8 <RDMDeviceParams::Dump()>
 80016dc:	ab16      	add	r3, sp, #88	; 0x58
 80016de:	93c1      	str	r3, [sp, #772]	; 0x304
 80016e0:	ab0f      	add	r3, sp, #60	; 0x3c
 80016e2:	93d5      	str	r3, [sp, #852]	; 0x354
 80016e4:	2301      	movs	r3, #1
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <main+0x314>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80016ec:	a8d6      	add	r0, sp, #856	; 0x358
 80016ee:	461a      	mov	r2, r3
 80016f0:	f002 f95a 	bl	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80016f4:	2e00      	cmp	r6, #0
 80016f6:	f040 8144 	bne.w	8001982 <main+0x48e>
 80016fa:	1e23      	subs	r3, r4, #0
 80016fc:	bf18      	it	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800180c <main+0x318>
 8001704:	4628      	mov	r0, r5
 8001706:	f888 3000 	strb.w	r3, [r8]
 800170a:	f002 fca5 	bl	8004058 <RDMDeviceResponder::Print()>
 800170e:	f898 1000 	ldrb.w	r1, [r8]
 8001712:	4a3f      	ldr	r2, [pc, #252]	; (8001810 <main+0x31c>)
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <main+0x320>)
 8001716:	4840      	ldr	r0, [pc, #256]	; (8001818 <main+0x324>)
 8001718:	2900      	cmp	r1, #0
 800171a:	bf14      	ite	ne
 800171c:	4611      	movne	r1, r2
 800171e:	4619      	moveq	r1, r3
 8001720:	f000 fdf0 	bl	8002304 <printf>
 8001724:	2e00      	cmp	r6, #0
 8001726:	f040 8146 	bne.w	80019b6 <main+0x4c2>
 800172a:	a869      	add	r0, sp, #420	; 0x1a4
 800172c:	f004 f8c2 	bl	80058b4 <WS28xxDmx::Print()>
 8001730:	b13c      	cbz	r4, 8001742 <main+0x24e>
 8001732:	4620      	mov	r0, r4
 8001734:	f004 f99e 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001738:	4622      	mov	r2, r4
 800173a:	4601      	mov	r1, r0
 800173c:	4837      	ldr	r0, [pc, #220]	; (800181c <main+0x328>)
 800173e:	f000 fde1 	bl	8002304 <printf>
 8001742:	4937      	ldr	r1, [pc, #220]	; (8001820 <main+0x32c>)
 8001744:	a87a      	add	r0, sp, #488	; 0x1e8
 8001746:	f006 f847 	bl	80077d8 <DisplayUdf::SetTitle(char const*, ...)>
 800174a:	2203      	movs	r2, #3
 800174c:	2102      	movs	r1, #2
 800174e:	a87a      	add	r0, sp, #488	; 0x1e8
 8001750:	f006 f8aa 	bl	80078a8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8001754:	220d      	movs	r2, #13
 8001756:	2106      	movs	r1, #6
 8001758:	a87a      	add	r0, sp, #488	; 0x1e8
 800175a:	f006 f8a5 	bl	80078a8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800175e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001760:	f004 fbd0 	bl	8005f04 <PixelType::GetType(pixel::Type)>
 8001764:	4680      	mov	r8, r0
 8001766:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001768:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 800176c:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
 8001770:	f004 fbd4 	bl	8005f1c <PixelType::GetMap(pixel::Map)>
 8001774:	4643      	mov	r3, r8
 8001776:	2107      	movs	r1, #7
 8001778:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <main+0x330>)
 800177a:	e9cd a001 	strd	sl, r0, [sp, #4]
 800177e:	f8cd 9000 	str.w	r9, [sp]
 8001782:	a87a      	add	r0, sp, #488	; 0x1e8
 8001784:	f7ff fe60 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001788:	a810      	add	r0, sp, #64	; 0x40
 800178a:	f005 fcc7 	bl	800711c <StoreDisplayUdf::StoreDisplayUdf()>
 800178e:	a910      	add	r1, sp, #64	; 0x40
 8001790:	a83a      	add	r0, sp, #232	; 0xe8
 8001792:	f006 f8a2 	bl	80078da <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8001796:	a83a      	add	r0, sp, #232	; 0xe8
 8001798:	f006 f8ac 	bl	80078f4 <DisplayUdfParams::Load()>
 800179c:	b130      	cbz	r0, 80017ac <main+0x2b8>
 800179e:	a83a      	add	r0, sp, #232	; 0xe8
 80017a0:	a97a      	add	r1, sp, #488	; 0x1e8
 80017a2:	f006 f8b3 	bl	800790c <DisplayUdfParams::Set(DisplayUdf*)>
 80017a6:	a83a      	add	r0, sp, #232	; 0xe8
 80017a8:	f006 f8e3 	bl	8007972 <DisplayUdfParams::Dump()>
 80017ac:	a87a      	add	r0, sp, #488	; 0x1e8
 80017ae:	f006 f827 	bl	8007800 <DisplayUdf::Show()>
 80017b2:	2e00      	cmp	r6, #0
 80017b4:	f000 80e7 	beq.w	8001986 <main+0x492>
 80017b8:	2103      	movs	r1, #3
 80017ba:	9880      	ldr	r0, [sp, #512]	; 0x200
 80017bc:	f7ff fe01 	bl	80013c2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80017c0:	9880      	ldr	r0, [sp, #512]	; 0x200
 80017c2:	2104      	movs	r1, #4
 80017c4:	f7ff fdfd 	bl	80013c2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80017c8:	9880      	ldr	r0, [sp, #512]	; 0x200
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d03c      	beq.n	8001848 <main+0x354>
 80017ce:	2300      	movs	r3, #0
 80017d0:	7904      	ldrb	r4, [r0, #4]
 80017d2:	4915      	ldr	r1, [pc, #84]	; (8001828 <main+0x334>)
 80017d4:	e02a      	b.n	800182c <main+0x338>
 80017d6:	bf00      	nop
 80017d8:	08009f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip, pc}
 80017dc:	08009f1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, ip, pc}
 80017e0:	08009fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80017e4:	08009eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, ip, pc}
 80017e8:	40011000 	andmi	r1, r1, r0
 80017ec:	08009fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip, pc}
 80017f0:	2000068c 	andcs	r0, r0, ip, lsl #13
 80017f4:	08009f27 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}
 80017f8:	08009f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 80017fc:	20000204 	andcs	r0, r0, r4, lsl #4
 8001800:	08009f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp, ip, pc}
 8001804:	200001f4 	strdcs	r0, [r0], -r4
 8001808:	08009fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip, pc}
 800180c:	20000208 	andcs	r0, r0, r8, lsl #4
 8001810:	08009ef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8001814:	08009efe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8001818:	08009f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip, pc}
 800181c:	08009f4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, r9, sl, fp, ip, pc}
 8001820:	08009f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}
 8001824:	08009f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
 8001828:	08009f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, pc}
 800182c:	429c      	cmp	r4, r3
 800182e:	f103 0301 	add.w	r3, r3, #1
 8001832:	dd03      	ble.n	800183c <main+0x348>
 8001834:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001838:	2a00      	cmp	r2, #0
 800183a:	d1f7      	bne.n	800182c <main+0x338>
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	2104      	movs	r1, #4
 8001840:	69d4      	ldr	r4, [r2, #28]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4a67      	ldr	r2, [pc, #412]	; (80019e4 <main+0x4f0>)
 8001846:	47a0      	blx	r4
 8001848:	2105      	movs	r1, #5
 800184a:	9880      	ldr	r0, [sp, #512]	; 0x200
 800184c:	f7ff fdb9 	bl	80013c2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001850:	2102      	movs	r1, #2
 8001852:	a824      	add	r0, sp, #144	; 0x90
 8001854:	f006 fb90 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 8001858:	2004      	movs	r0, #4
 800185a:	f006 fde0 	bl	800841e <operator new(unsigned int)>
 800185e:	4b62      	ldr	r3, [pc, #392]	; (80019e8 <main+0x4f4>)
 8001860:	9022      	str	r0, [sp, #136]	; 0x88
 8001862:	6003      	str	r3, [r0, #0]
 8001864:	2102      	movs	r1, #2
 8001866:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800186a:	f007 f9b5 	bl	8008bd8 <fwdgt_config>
 800186e:	2801      	cmp	r0, #1
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800187a:	d101      	bne.n	8001880 <main+0x38c>
 800187c:	f007 f99c 	bl	8008bb8 <fwdgt_enable>
 8001880:	4c5a      	ldr	r4, [pc, #360]	; (80019ec <main+0x4f8>)
 8001882:	4e5b      	ldr	r6, [pc, #364]	; (80019f0 <main+0x4fc>)
 8001884:	f04f 0801 	mov.w	r8, #1
 8001888:	f007 f99e 	bl	8008bc8 <fwdgt_counter_reload>
 800188c:	4628      	mov	r0, r5
 800188e:	f000 fddf 	bl	8002450 <RDMResponder::Run()>
 8001892:	a806      	add	r0, sp, #24
 8001894:	f005 fbbe 	bl	8007014 <SpiFlashStore::Flash()>
 8001898:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800189a:	b17a      	cbz	r2, 80018bc <main+0x3c8>
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80018a0:	1a5b      	subs	r3, r3, r1
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d80a      	bhi.n	80018bc <main+0x3c8>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80018aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f083 0201 	eor.w	r2, r3, #1
 80018b2:	9228      	str	r2, [sp, #160]	; 0xa0
 80018b4:	bf14      	ite	ne
 80018b6:	f8c7 8010 	strne.w	r8, [r7, #16]
 80018ba:	617b      	streq	r3, [r7, #20]
 80018bc:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 80018be:	b162      	cbz	r2, 80018da <main+0x3e6>
 80018c0:	f89d 31f8 	ldrb.w	r3, [sp, #504]	; 0x1f8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d170      	bne.n	80019aa <main+0x4b6>
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 80018cc:	1a5b      	subs	r3, r3, r1
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d203      	bcs.n	80018da <main+0x3e6>
 80018d2:	2101      	movs	r1, #1
 80018d4:	a87a      	add	r0, sp, #488	; 0x1e8
 80018d6:	f7ff fda7 	bl	8001428 <Display::SetSleep(bool)>
 80018da:	6833      	ldr	r3, [r6, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0d3      	beq.n	8001888 <main+0x394>
 80018e0:	a807      	add	r0, sp, #28
 80018e2:	f004 fae5 	bl	8005eb0 <PixelPatterns::Run()>
 80018e6:	e7cd      	b.n	8001884 <main+0x390>
 80018e8:	2300      	movs	r3, #0
 80018ea:	2264      	movs	r2, #100	; 0x64
 80018ec:	4619      	mov	r1, r3
 80018ee:	a807      	add	r0, sp, #28
 80018f0:	f004 f8cc 	bl	8005a8c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80018f4:	e679      	b.n	80015ea <main+0xf6>
 80018f6:	2200      	movs	r2, #0
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	4611      	mov	r1, r2
 80018fc:	e9cd 3200 	strd	r3, r2, [sp]
 8001900:	a807      	add	r0, sp, #28
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <main+0x500>)
 8001904:	f004 f8d6 	bl	8005ab4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001908:	e66f      	b.n	80015ea <main+0xf6>
 800190a:	2100      	movs	r1, #0
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <main+0x500>)
 8001910:	9100      	str	r1, [sp, #0]
 8001912:	a807      	add	r0, sp, #28
 8001914:	f004 f8ea 	bl	8005aec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001918:	e667      	b.n	80015ea <main+0xf6>
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001920:	2100      	movs	r1, #0
 8001922:	a807      	add	r0, sp, #28
 8001924:	f004 f8fc 	bl	8005b20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001928:	e65f      	b.n	80015ea <main+0xf6>
 800192a:	2200      	movs	r2, #0
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001932:	230a      	movs	r3, #10
 8001934:	4611      	mov	r1, r2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	a807      	add	r0, sp, #28
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <main+0x500>)
 800193c:	f004 f922 	bl	8005b84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001940:	e653      	b.n	80015ea <main+0xf6>
 8001942:	2500      	movs	r5, #0
 8001944:	46aa      	mov	sl, r5
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <main+0x504>)
 8001948:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80019fc <main+0x508>
 800194c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8001a00 <main+0x50c>
 8001950:	61dd      	str	r5, [r3, #28]
 8001952:	f8db 3000 	ldr.w	r3, [fp]
 8001956:	42ab      	cmp	r3, r5
 8001958:	d90a      	bls.n	8001970 <main+0x47c>
 800195a:	2300      	movs	r3, #0
 800195c:	f8cd a000 	str.w	sl, [sp]
 8001960:	4629      	mov	r1, r5
 8001962:	461a      	mov	r2, r3
 8001964:	f8d9 0000 	ldr.w	r0, [r9]
 8001968:	f004 fb54 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800196c:	3501      	adds	r5, #1
 800196e:	e7f0      	b.n	8001952 <main+0x45e>
 8001970:	f007 ffb4 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8001974:	2800      	cmp	r0, #0
 8001976:	d1fb      	bne.n	8001970 <main+0x47c>
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <main+0x50c>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f005 f98a 	bl	8006c94 <WS28xx::Update()>
 8001980:	e633      	b.n	80015ea <main+0xf6>
 8001982:	2300      	movs	r3, #0
 8001984:	e6bc      	b.n	8001700 <main+0x20c>
 8001986:	2c00      	cmp	r4, #0
 8001988:	f43f af62 	beq.w	8001850 <main+0x35c>
 800198c:	2106      	movs	r1, #6
 800198e:	9880      	ldr	r0, [sp, #512]	; 0x200
 8001990:	f7ff fd17 	bl	80013c2 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001994:	4620      	mov	r0, r4
 8001996:	f004 f86d 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800199a:	2106      	movs	r1, #6
 800199c:	4603      	mov	r3, r0
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <main+0x510>)
 80019a0:	9400      	str	r4, [sp, #0]
 80019a2:	a87a      	add	r0, sp, #488	; 0x1e8
 80019a4:	f7ff fd50 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 80019a8:	e752      	b.n	8001850 <main+0x35c>
 80019aa:	f006 f87a 	bl	8007aa2 <display::timeout::gpio_renew()>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d093      	beq.n	80018da <main+0x3e6>
 80019b2:	2100      	movs	r1, #0
 80019b4:	e78e      	b.n	80018d4 <main+0x3e0>
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <main+0x514>)
 80019b8:	f000 fcdc 	bl	8002374 <puts>
 80019bc:	e6c1      	b.n	8001742 <main+0x24e>
 80019be:	2c05      	cmp	r4, #5
 80019c0:	f63f ae13 	bhi.w	80015ea <main+0xf6>
 80019c4:	a301      	add	r3, pc, #4	; (adr r3, 80019cc <main+0x4d8>)
 80019c6:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	08001943 	stmdaeq	r0, {r0, r1, r6, r8, fp, ip}
 80019d0:	080018e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, fp, ip}
 80019d4:	080018f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, fp, ip}
 80019d8:	0800190b 	stmdaeq	r0, {r0, r1, r3, r8, fp, ip}
 80019dc:	0800191b 	stmdaeq	r0, {r0, r1, r3, r4, r8, fp, ip}
 80019e0:	0800192b 	stmdaeq	r0, {r0, r1, r3, r5, r8, fp, ip}
 80019e4:	08009f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, pc}
 80019e8:	08009fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
 80019ec:	20001814 	andcs	r1, r0, r4, lsl r8
 80019f0:	2000068c 	andcs	r0, r0, ip, lsl #13
 80019f4:	00646464 	rsbeq	r6, r4, r4, ror #8
 80019f8:	20000658 	andcs	r0, r0, r8, asr r6
 80019fc:	20000680 	andcs	r0, r0, r0, lsl #13
 8001a00:	20000684 	andcs	r0, r0, r4, lsl #13
 8001a04:	08009f89 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, fp, ip, pc}
 8001a08:	08009f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip, pc}

08001a0c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001a0c:	b110      	cbz	r0, 8001a14 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001a0e:	6803      	ldr	r3, [r0, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4718      	bx	r3
 8001a14:	4770      	bx	lr

08001a16 <Display::TextStatus(char const*)>:
 8001a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	6980      	ldr	r0, [r0, #24]
 8001a1e:	460d      	mov	r5, r1
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d031      	beq.n	8001a88 <Display::TextStatus(char const*)+0x72>
 8001a24:	7947      	ldrb	r7, [r0, #5]
 8001a26:	6803      	ldr	r3, [r0, #0]
 8001a28:	1e7e      	subs	r6, r7, #1
 8001a2a:	b2f6      	uxtb	r6, r6
 8001a2c:	4632      	mov	r2, r6
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f890 9004 	ldrb.w	r9, [r0, #4]
 8001a36:	f04f 0800 	mov.w	r8, #0
 8001a3a:	4798      	blx	r3
 8001a3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001a40:	45c1      	cmp	r9, r8
 8001a42:	69a0      	ldr	r0, [r4, #24]
 8001a44:	d907      	bls.n	8001a56 <Display::TextStatus(char const*)+0x40>
 8001a46:	b118      	cbz	r0, 8001a50 <Display::TextStatus(char const*)+0x3a>
 8001a48:	6803      	ldr	r3, [r0, #0]
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4798      	blx	r3
 8001a50:	f108 0801 	add.w	r8, r8, #1
 8001a54:	e7f4      	b.n	8001a40 <Display::TextStatus(char const*)+0x2a>
 8001a56:	b120      	cbz	r0, 8001a62 <Display::TextStatus(char const*)+0x4c>
 8001a58:	6803      	ldr	r3, [r0, #0]
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4798      	blx	r3
 8001a62:	69a0      	ldr	r0, [r4, #24]
 8001a64:	b180      	cbz	r0, 8001a88 <Display::TextStatus(char const*)+0x72>
 8001a66:	2300      	movs	r3, #0
 8001a68:	7901      	ldrb	r1, [r0, #4]
 8001a6a:	5cea      	ldrb	r2, [r5, r3]
 8001a6c:	b11a      	cbz	r2, 8001a76 <Display::TextStatus(char const*)+0x60>
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	4299      	cmp	r1, r3
 8001a72:	4613      	mov	r3, r2
 8001a74:	dcf9      	bgt.n	8001a6a <Display::TextStatus(char const*)+0x54>
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	4639      	mov	r1, r7
 8001a7a:	69d4      	ldr	r4, [r2, #28]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	462a      	mov	r2, r5
 8001a80:	46a4      	mov	ip, r4
 8001a82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a86:	4760      	bx	ip
 8001a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a8c <PixelDmxParamsRdm::Display(unsigned char const*)>:
 8001a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	4d20      	ldr	r5, [pc, #128]	; (8001b14 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 8001a92:	7908      	ldrb	r0, [r1, #4]
 8001a94:	460c      	mov	r4, r1
 8001a96:	682e      	ldr	r6, [r5, #0]
 8001a98:	b085      	sub	sp, #20
 8001a9a:	bb40      	cbnz	r0, 8001aee <PixelDmxParamsRdm::Display(unsigned char const*)+0x62>
 8001a9c:	2106      	movs	r1, #6
 8001a9e:	69b0      	ldr	r0, [r6, #24]
 8001aa0:	f7ff ffb4 	bl	8001a0c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001aa4:	7820      	ldrb	r0, [r4, #0]
 8001aa6:	682f      	ldr	r7, [r5, #0]
 8001aa8:	f004 fa2c 	bl	8005f04 <PixelType::GetType(pixel::Type)>
 8001aac:	4606      	mov	r6, r0
 8001aae:	78e0      	ldrb	r0, [r4, #3]
 8001ab0:	f894 8001 	ldrb.w	r8, [r4, #1]
 8001ab4:	f894 9002 	ldrb.w	r9, [r4, #2]
 8001ab8:	f004 fa30 	bl	8005f1c <PixelType::GetMap(pixel::Map)>
 8001abc:	4633      	mov	r3, r6
 8001abe:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001ac2:	2107      	movs	r1, #7
 8001ac4:	4638      	mov	r0, r7
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8001ac8:	f8cd 8000 	str.w	r8, [sp]
 8001acc:	f7ff fcbc 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001ad0:	7963      	ldrb	r3, [r4, #5]
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8001ad6:	d113      	bne.n	8001b00 <PixelDmxParamsRdm::Display(unsigned char const*)+0x74>
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	b92a      	cbnz	r2, 8001ae8 <PixelDmxParamsRdm::Display(unsigned char const*)+0x5c>
 8001adc:	2201      	movs	r2, #1
 8001ade:	4910      	ldr	r1, [pc, #64]	; (8001b20 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8001ae0:	6828      	ldr	r0, [r5, #0]
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	f7ff ff97 	bl	8001a16 <Display::TextStatus(char const*)>
 8001ae8:	b005      	add	sp, #20
 8001aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aee:	f003 ffc1 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001af2:	2106      	movs	r1, #6
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <PixelDmxParamsRdm::Display(unsigned char const*)+0x98>)
 8001af8:	4630      	mov	r0, r6
 8001afa:	f7ff fca5 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001afe:	e7d1      	b.n	8001aa4 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001b00:	2200      	movs	r2, #0
 8001b02:	2108      	movs	r1, #8
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	6998      	ldr	r0, [r3, #24]
 8001b0a:	b005      	add	sp, #20
 8001b0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b10:	f7ff bf7c 	b.w	8001a0c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001b14:	200016e8 	andcs	r1, r0, r8, ror #13
 8001b18:	08009ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8001b1c:	200000e8 	andcs	r0, r0, r8, ror #1
 8001b20:	0800a007 	stmdaeq	r0, {r0, r1, r2, sp, pc}
 8001b24:	08009fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001b28 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001b28:	4b01      	ldr	r3, [pc, #4]	; (8001b30 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	f005 be68 	b.w	8007800 <DisplayUdf::Show()>
 8001b30:	200016e8 	andcs	r1, r0, r8, ror #13

08001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001b34:	b110      	cbz	r0, 8001b3c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001b36:	6803      	ldr	r3, [r0, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4718      	bx	r3
 8001b3c:	4770      	bx	lr
	...

08001b40 <RDMResponder::PersonalityUpdate(unsigned int)>:
 8001b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b44:	4c32      	ldr	r4, [pc, #200]	; (8001c10 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 8001b46:	4f33      	ldr	r7, [pc, #204]	; (8001c14 <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	6998      	ldr	r0, [r3, #24]
 8001b4e:	460d      	mov	r5, r1
 8001b50:	2107      	movs	r1, #7
 8001b52:	f7ff ffef 	bl	8001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f8d4 8000 	ldr.w	r8, [r4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f004 f9d0 	bl	8005f04 <PixelType::GetType(pixel::Type)>
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	4606      	mov	r6, r0
 8001b68:	e9d2 3905 	ldrd	r3, r9, [r2, #20]
 8001b6c:	fb03 f709 	mul.w	r7, r3, r9
 8001b70:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b72:	6898      	ldr	r0, [r3, #8]
 8001b74:	f004 f9d2 	bl	8005f1c <PixelType::GetMap(pixel::Map)>
 8001b78:	4633      	mov	r3, r6
 8001b7a:	2107      	movs	r1, #7
 8001b7c:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 8001b82:	4640      	mov	r0, r8
 8001b84:	9700      	str	r7, [sp, #0]
 8001b86:	f7ff fc5f 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	f005 fe38 	bl	8007800 <DisplayUdf::Show()>
 8001b90:	2d01      	cmp	r5, #1
 8001b92:	d115      	bne.n	8001bc0 <RDMResponder::PersonalityUpdate(unsigned int)+0x80>
 8001b94:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 8001b96:	681d      	ldr	r5, [r3, #0]
 8001b98:	b17d      	cbz	r5, 8001bba <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	6998      	ldr	r0, [r3, #24]
 8001ba0:	f7ff ffc8 	bl	8001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	6824      	ldr	r4, [r4, #0]
 8001ba8:	f003 ff64 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001bac:	2106      	movs	r1, #6
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <RDMResponder::PersonalityUpdate(unsigned int)+0xe0>)
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	9500      	str	r5, [sp, #0]
 8001bb6:	f7ff fc47 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001bba:	b005      	add	sp, #20
 8001bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bc0:	2d02      	cmp	r5, #2
 8001bc2:	d1fa      	bne.n	8001bba <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	6998      	ldr	r0, [r3, #24]
 8001bca:	f7ff ffb3 	bl	8001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	6998      	ldr	r0, [r3, #24]
 8001bd4:	f7ff ffae 	bl	8001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	6998      	ldr	r0, [r3, #24]
 8001bdc:	b180      	cbz	r0, 8001c00 <RDMResponder::PersonalityUpdate(unsigned int)+0xc0>
 8001bde:	2300      	movs	r3, #0
 8001be0:	7905      	ldrb	r5, [r0, #4]
 8001be2:	4910      	ldr	r1, [pc, #64]	; (8001c24 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 8001be4:	42ab      	cmp	r3, r5
 8001be6:	f103 0301 	add.w	r3, r3, #1
 8001bea:	da03      	bge.n	8001bf4 <RDMResponder::PersonalityUpdate(unsigned int)+0xb4>
 8001bec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d1f7      	bne.n	8001be4 <RDMResponder::PersonalityUpdate(unsigned int)+0xa4>
 8001bf4:	6802      	ldr	r2, [r0, #0]
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	69d5      	ldr	r5, [r2, #28]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 8001bfe:	47a8      	blx	r5
 8001c00:	2105      	movs	r1, #5
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	6998      	ldr	r0, [r3, #24]
 8001c06:	b005      	add	sp, #20
 8001c08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c0c:	f7ff bf92 	b.w	8001b34 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001c10:	200016e8 	andcs	r1, r0, r8, ror #13
 8001c14:	20000654 	andcs	r0, r0, r4, asr r6
 8001c18:	08009f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
 8001c1c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001c20:	08009f89 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, fp, ip, pc}
 8001c24:	08009f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip, pc}

08001c28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	2905      	cmp	r1, #5
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	dc4c      	bgt.n	8001cca <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 8001c32:	6019      	str	r1, [r3, #0]
 8001c34:	2905      	cmp	r1, #5
 8001c36:	d809      	bhi.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001c38:	e8df f001 	tbb	[pc, r1]
 8001c3c:	130a032c 	movwne	r0, #41772	; 0xa32c
 8001c40:	2300211a 	movwcs	r2, #282	; 0x11a
 8001c44:	2264      	movs	r2, #100	; 0x64
 8001c46:	4619      	mov	r1, r3
 8001c48:	f003 ff20 	bl	8005a8c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e03d      	b.n	8001ccc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 8001c50:	2200      	movs	r2, #0
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	4611      	mov	r1, r2
 8001c56:	e9cd 3200 	strd	r3, r2, [sp]
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001c5c:	f003 ff2a 	bl	8005ab4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001c60:	e7f4      	b.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001c62:	2100      	movs	r1, #0
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001c68:	9100      	str	r1, [sp, #0]
 8001c6a:	f003 ff3f 	bl	8005aec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001c6e:	e7ed      	b.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001c76:	2100      	movs	r1, #0
 8001c78:	f003 ff52 	bl	8005b20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001c7c:	e7e6      	b.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001c86:	230a      	movs	r3, #10
 8001c88:	4611      	mov	r1, r2
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 8001c8e:	f003 ff79 	bl	8005b84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001c92:	e7db      	b.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001c94:	2400      	movs	r4, #0
 8001c96:	4626      	mov	r6, r4
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb0>)
 8001c9a:	4f10      	ldr	r7, [pc, #64]	; (8001cdc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 8001c9c:	4d10      	ldr	r5, [pc, #64]	; (8001ce0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8001c9e:	61dc      	str	r4, [r3, #28]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	42a3      	cmp	r3, r4
 8001ca4:	d908      	bls.n	8001cb8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4621      	mov	r1, r4
 8001caa:	461a      	mov	r2, r3
 8001cac:	6828      	ldr	r0, [r5, #0]
 8001cae:	9600      	str	r6, [sp, #0]
 8001cb0:	f004 f9b0 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001cb4:	3401      	adds	r4, #1
 8001cb6:	e7f3      	b.n	8001ca0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001cb8:	f007 fe10 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8001cbc:	2800      	cmp	r0, #0
 8001cbe:	d1fb      	bne.n	8001cb8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	f004 ffe6 	bl	8006c94 <WS28xx::Update()>
 8001cc8:	e7c0      	b.n	8001c4c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	b005      	add	sp, #20
 8001cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd0:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001cd4:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001cd8:	20000658 	andcs	r0, r0, r8, asr r6
 8001cdc:	20000680 	andcs	r0, r0, r0, lsl #13
 8001ce0:	20000684 	andcs	r0, r0, r4, lsl #13

08001ce4 <rdm::selftest::Get()>:
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <rdm::selftest::Get()+0x8>)
 8001ce6:	7818      	ldrb	r0, [r3, #0]
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	2000068c 	andcs	r0, r0, ip, lsl #13

08001cf0 <rdm::selftest::Set(unsigned char)>:
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <rdm::selftest::Set(unsigned char)+0x54>)
 8001cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	f7ff ff95 	bl	8001c28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001cfe:	4605      	mov	r5, r0
 8001d00:	b1b0      	cbz	r0, 8001d30 <rdm::selftest::Set(unsigned char)+0x40>
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <rdm::selftest::Set(unsigned char)+0x58>)
 8001d04:	b1bc      	cbz	r4, 8001d36 <rdm::selftest::Set(unsigned char)+0x46>
 8001d06:	2201      	movs	r2, #1
 8001d08:	4e10      	ldr	r6, [pc, #64]	; (8001d4c <rdm::selftest::Set(unsigned char)+0x5c>)
 8001d0a:	701a      	strb	r2, [r3, #0]
 8001d0c:	6833      	ldr	r3, [r6, #0]
 8001d0e:	6998      	ldr	r0, [r3, #24]
 8001d10:	b118      	cbz	r0, 8001d1a <rdm::selftest::Set(unsigned char)+0x2a>
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	2106      	movs	r1, #6
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	4798      	blx	r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	6836      	ldr	r6, [r6, #0]
 8001d1e:	f003 fea9 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001d22:	2106      	movs	r1, #6
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <rdm::selftest::Set(unsigned char)+0x60>)
 8001d28:	4630      	mov	r0, r6
 8001d2a:	9400      	str	r4, [sp, #0]
 8001d2c:	f7ff fb8c 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8001d30:	4628      	mov	r0, r5
 8001d32:	b002      	add	sp, #8
 8001d34:	bd70      	pop	{r4, r5, r6, pc}
 8001d36:	701c      	strb	r4, [r3, #0]
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <rdm::selftest::Set(unsigned char)+0x64>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f005 fd60 	bl	8007800 <DisplayUdf::Show()>
 8001d40:	e7f6      	b.n	8001d30 <rdm::selftest::Set(unsigned char)+0x40>
 8001d42:	bf00      	nop
 8001d44:	20000688 	andcs	r0, r0, r8, lsl #13
 8001d48:	20000208 	andcs	r0, r0, r8, lsl #4
 8001d4c:	200016ec 	andcs	r1, r0, ip, ror #13
 8001d50:	08009f89 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, fp, ip, pc}
 8001d54:	200016e8 	andcs	r1, r0, r8, ror #13

08001d58 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	f003 fe8a 	bl	8005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001d60:	b140      	cbz	r0, 8001d74 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4613      	mov	r3, r2
 8001d66:	7819      	ldrb	r1, [r3, #0]
 8001d68:	3201      	adds	r2, #1
 8001d6a:	2900      	cmp	r1, #0
 8001d6c:	d1fa      	bne.n	8001d64 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001d6e:	1a1b      	subs	r3, r3, r0
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	e000      	b.n	8001d76 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1e>
 8001d74:	6020      	str	r0, [r4, #0]
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	2905      	cmp	r1, #5
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	dc18      	bgt.n	8001db2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>)
 8001d82:	6019      	str	r1, [r3, #0]
 8001d84:	2905      	cmp	r1, #5
 8001d86:	d814      	bhi.n	8001db2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001d88:	e8df f001 	tbb	[pc, r1]
 8001d8c:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001d90:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001d94:	2264      	movs	r2, #100	; 0x64
 8001d96:	4619      	mov	r1, r3
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001d9e:	f003 be75 	b.w	8005a8c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	2200      	movs	r2, #0
 8001da6:	e9cd 3200 	strd	r3, r2, [sp]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001dae:	f003 fe81 	bl	8005ab4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001db2:	b005      	add	sp, #20
 8001db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db6:	2100      	movs	r1, #0
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001dbc:	9100      	str	r1, [sp, #0]
 8001dbe:	f003 fe95 	bl	8005aec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001dc2:	e7f6      	b.n	8001db2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001dca:	2100      	movs	r1, #0
 8001dcc:	b005      	add	sp, #20
 8001dce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001dd2:	f003 bea5 	b.w	8005b20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001dde:	230a      	movs	r3, #10
 8001de0:	4611      	mov	r1, r2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001de6:	f003 fecd 	bl	8005b84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001dea:	e7e2      	b.n	8001db2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001dec:	2400      	movs	r4, #0
 8001dee:	4626      	mov	r6, r4
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb8>)
 8001df2:	4f10      	ldr	r7, [pc, #64]	; (8001e34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xbc>)
 8001df4:	4d10      	ldr	r5, [pc, #64]	; (8001e38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001df6:	61dc      	str	r4, [r3, #28]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	d908      	bls.n	8001e10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x98>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4621      	mov	r1, r4
 8001e02:	461a      	mov	r2, r3
 8001e04:	6828      	ldr	r0, [r5, #0]
 8001e06:	9600      	str	r6, [sp, #0]
 8001e08:	f004 f904 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001e0c:	3401      	adds	r4, #1
 8001e0e:	e7f3      	b.n	8001df8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001e10:	f007 fd64 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	d1fb      	bne.n	8001e10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x98>
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	b005      	add	sp, #20
 8001e1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001e22:	f004 bf37 	b.w	8006c94 <WS28xx::Update()>
 8001e26:	bf00      	nop
 8001e28:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001e2c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001e30:	20000658 	andcs	r0, r0, r8, asr r6
 8001e34:	20000680 	andcs	r0, r0, r0, lsl #13
 8001e38:	20000684 	andcs	r0, r0, r4, lsl #13

08001e3c <RDMIdentify::On(rdm::identify::Mode)>:
 8001e3c:	29ff      	cmp	r1, #255	; 0xff
 8001e3e:	d10d      	bne.n	8001e5c <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <RDMIdentify::On(rdm::identify::Mode)+0x24>)
 8001e42:	781a      	ldrb	r2, [r3, #0]
 8001e44:	b952      	cbnz	r2, 8001e5c <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	f7ff bf8e 	b.w	8001d78 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200000e9 	andcs	r0, r0, r9, ror #1
 8001e64:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001e68:	200000ec 	andcs	r0, r0, ip, ror #1
 8001e6c:	20000688 	andcs	r0, r0, r8, lsl #13

08001e70 <RDMIdentify::Off(rdm::identify::Mode)>:
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <RDMIdentify::Off(rdm::identify::Mode)+0x18>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	b13a      	cbz	r2, 8001e86 <RDMIdentify::Off(rdm::identify::Mode)+0x16>
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <RDMIdentify::Off(rdm::identify::Mode)+0x1c>)
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <RDMIdentify::Off(rdm::identify::Mode)+0x20>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f7ff bf79 	b.w	8001d78 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001e86:	4770      	bx	lr
 8001e88:	200000e9 	andcs	r0, r0, r9, ror #1
 8001e8c:	200000ec 	andcs	r0, r0, ip, ror #1
 8001e90:	20000688 	andcs	r0, r0, r8, lsl #13

08001e94 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001e94:	2805      	cmp	r0, #5
 8001e96:	d81c      	bhi.n	8001ed2 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x3e>
 8001e98:	e8df f000 	tbb	[pc, r0]
 8001e9c:	0f0b0703 	svceq	0x000b0703
 8001ea0:	23041713 	movwcs	r1, #18195	; 0x4713
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	2305      	movs	r3, #5
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	4770      	bx	lr
 8001eb2:	230e      	movs	r3, #14
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	2303      	movs	r3, #3
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	4770      	bx	lr
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x58>)
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	2307      	movs	r3, #7
 8001ecc:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x5c>)
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	4770      	bx	lr
 8001ed2:	2309      	movs	r3, #9
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x60>)
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	0800a012 	stmdaeq	r0, {r1, r4, sp, pc}
 8001ee0:	0800a020 	stmdaeq	r0, {r5, sp, pc}
 8001ee4:	0800a017 	stmdaeq	r0, {r0, r1, r2, r4, sp, pc}
 8001ee8:	0800a026 	stmdaeq	r0, {r1, r2, r5, sp, pc}
 8001eec:	0800a02a 	stmdaeq	r0, {r1, r3, r5, sp, pc}
 8001ef0:	0800a037 	stmdaeq	r0, {r0, r1, r2, r4, r5, sp, pc}
 8001ef4:	0800a03f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sp, pc}

08001ef8 <RDMSoftwareVersion::GetVersion()>:
 8001ef8:	4800      	ldr	r0, [pc, #0]	; (8001efc <RDMSoftwareVersion::GetVersion()+0x4>)
 8001efa:	4770      	bx	lr
 8001efc:	0800a049 	stmdaeq	r0, {r0, r3, r6, sp, pc}

08001f00 <RDMSoftwareVersion::GetVersionLength()>:
 8001f00:	2003      	movs	r0, #3
 8001f02:	4770      	bx	lr

08001f04 <RDMSoftwareVersion::GetVersionId()>:
 8001f04:	4800      	ldr	r0, [pc, #0]	; (8001f08 <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001f06:	4770      	bx	lr
 8001f08:	6218e707 	andsvs	lr, r8, #1835008	; 0x1c0000

08001f0c <_xputch>:
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b410      	push	{r4}
 8001f10:	4c08      	ldr	r4, [pc, #32]	; (8001f34 <_xputch+0x28>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4608      	mov	r0, r1
 8001f16:	6821      	ldr	r1, [r4, #0]
 8001f18:	3201      	adds	r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	b139      	cbz	r1, 8001f2e <_xputch+0x22>
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da02      	bge.n	8001f2a <_xputch+0x1e>
 8001f24:	1c4b      	adds	r3, r1, #1
 8001f26:	6023      	str	r3, [r4, #0]
 8001f28:	7008      	strb	r0, [r1, #0]
 8001f2a:	bc10      	pop	{r4}
 8001f2c:	4770      	bx	lr
 8001f2e:	bc10      	pop	{r4}
 8001f30:	f005 bfb6 	b.w	8007ea0 <console_putc>
 8001f34:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001f38 <_format_int>:
 8001f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	461f      	mov	r7, r3
 8001f3e:	b091      	sub	sp, #68	; 0x44
 8001f40:	ea52 0307 	orrs.w	r3, r2, r7
 8001f44:	4680      	mov	r8, r0
 8001f46:	4616      	mov	r6, r2
 8001f48:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001f4c:	d138      	bne.n	8001fc0 <_format_int+0x88>
 8001f4e:	2330      	movs	r3, #48	; 0x30
 8001f50:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001f54:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001f58:	f8d8 3000 	ldr.w	r3, [r8]
 8001f5c:	07d8      	lsls	r0, r3, #31
 8001f5e:	d508      	bpl.n	8001f72 <_format_int+0x3a>
 8001f60:	466a      	mov	r2, sp
 8001f62:	2030      	movs	r0, #48	; 0x30
 8001f64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001f68:	1b2e      	subs	r6, r5, r4
 8001f6a:	428e      	cmp	r6, r1
 8001f6c:	da01      	bge.n	8001f72 <_format_int+0x3a>
 8001f6e:	4294      	cmp	r4, r2
 8001f70:	d843      	bhi.n	8001ffa <_format_int+0xc2>
 8001f72:	0699      	lsls	r1, r3, #26
 8001f74:	d508      	bpl.n	8001f88 <_format_int+0x50>
 8001f76:	466a      	mov	r2, sp
 8001f78:	2030      	movs	r0, #48	; 0x30
 8001f7a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8001f7e:	1b2e      	subs	r6, r5, r4
 8001f80:	428e      	cmp	r6, r1
 8001f82:	da01      	bge.n	8001f88 <_format_int+0x50>
 8001f84:	4294      	cmp	r4, r2
 8001f86:	d83b      	bhi.n	8002000 <_format_int+0xc8>
 8001f88:	071a      	lsls	r2, r3, #28
 8001f8a:	bf44      	itt	mi
 8001f8c:	222d      	movmi	r2, #45	; 0x2d
 8001f8e:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001f92:	065b      	lsls	r3, r3, #25
 8001f94:	d408      	bmi.n	8001fa8 <_format_int+0x70>
 8001f96:	466b      	mov	r3, sp
 8001f98:	2120      	movs	r1, #32
 8001f9a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8001f9e:	1b28      	subs	r0, r5, r4
 8001fa0:	4290      	cmp	r0, r2
 8001fa2:	da01      	bge.n	8001fa8 <_format_int+0x70>
 8001fa4:	429c      	cmp	r4, r3
 8001fa6:	d82e      	bhi.n	8002006 <_format_int+0xce>
 8001fa8:	1b2d      	subs	r5, r5, r4
 8001faa:	3401      	adds	r4, #1
 8001fac:	ab10      	add	r3, sp, #64	; 0x40
 8001fae:	429c      	cmp	r4, r3
 8001fb0:	d32c      	bcc.n	800200c <_format_int+0xd4>
 8001fb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001fb6:	42ab      	cmp	r3, r5
 8001fb8:	dc2e      	bgt.n	8002018 <_format_int+0xe0>
 8001fba:	b011      	add	sp, #68	; 0x44
 8001fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc0:	462c      	mov	r4, r5
 8001fc2:	46eb      	mov	fp, sp
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	4639      	mov	r1, r7
 8001fc8:	220a      	movs	r2, #10
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f7fe f8c0 	bl	8000150 <__aeabi_uldivmod>
 8001fd0:	46b2      	mov	sl, r6
 8001fd2:	3230      	adds	r2, #48	; 0x30
 8001fd4:	46b9      	mov	r9, r7
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4630      	mov	r0, r6
 8001fda:	4639      	mov	r1, r7
 8001fdc:	f804 2901 	strb.w	r2, [r4], #-1
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	f7fe f8b5 	bl	8000150 <__aeabi_uldivmod>
 8001fe6:	f1ba 0f0a 	cmp.w	sl, #10
 8001fea:	f179 0300 	sbcs.w	r3, r9, #0
 8001fee:	4606      	mov	r6, r0
 8001ff0:	460f      	mov	r7, r1
 8001ff2:	d3b1      	bcc.n	8001f58 <_format_int+0x20>
 8001ff4:	455c      	cmp	r4, fp
 8001ff6:	d1e5      	bne.n	8001fc4 <_format_int+0x8c>
 8001ff8:	e7ae      	b.n	8001f58 <_format_int+0x20>
 8001ffa:	f804 0901 	strb.w	r0, [r4], #-1
 8001ffe:	e7b3      	b.n	8001f68 <_format_int+0x30>
 8002000:	f804 0901 	strb.w	r0, [r4], #-1
 8002004:	e7bb      	b.n	8001f7e <_format_int+0x46>
 8002006:	f804 1901 	strb.w	r1, [r4], #-1
 800200a:	e7c8      	b.n	8001f9e <_format_int+0x66>
 800200c:	4640      	mov	r0, r8
 800200e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002012:	f7ff ff7b 	bl	8001f0c <_xputch>
 8002016:	e7c9      	b.n	8001fac <_format_int+0x74>
 8002018:	2120      	movs	r1, #32
 800201a:	4640      	mov	r0, r8
 800201c:	f7ff ff76 	bl	8001f0c <_xputch>
 8002020:	3501      	adds	r5, #1
 8002022:	e7c6      	b.n	8001fb2 <_format_int+0x7a>

08002024 <_format_hex>:
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b091      	sub	sp, #68	; 0x44
 8002028:	4606      	mov	r6, r0
 800202a:	6804      	ldr	r4, [r0, #0]
 800202c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8002030:	bb61      	cbnz	r1, 800208c <_format_hex+0x68>
 8002032:	2330      	movs	r3, #48	; 0x30
 8002034:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8002038:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800203c:	07e5      	lsls	r5, r4, #31
 800203e:	d507      	bpl.n	8002050 <_format_hex+0x2c>
 8002040:	4669      	mov	r1, sp
 8002042:	2530      	movs	r5, #48	; 0x30
 8002044:	6870      	ldr	r0, [r6, #4]
 8002046:	1ad7      	subs	r7, r2, r3
 8002048:	4287      	cmp	r7, r0
 800204a:	da01      	bge.n	8002050 <_format_hex+0x2c>
 800204c:	428b      	cmp	r3, r1
 800204e:	d831      	bhi.n	80020b4 <_format_hex+0x90>
 8002050:	06a0      	lsls	r0, r4, #26
 8002052:	d507      	bpl.n	8002064 <_format_hex+0x40>
 8002054:	4669      	mov	r1, sp
 8002056:	2530      	movs	r5, #48	; 0x30
 8002058:	68b0      	ldr	r0, [r6, #8]
 800205a:	1ad7      	subs	r7, r2, r3
 800205c:	4287      	cmp	r7, r0
 800205e:	da01      	bge.n	8002064 <_format_hex+0x40>
 8002060:	428b      	cmp	r3, r1
 8002062:	d82a      	bhi.n	80020ba <_format_hex+0x96>
 8002064:	0661      	lsls	r1, r4, #25
 8002066:	d407      	bmi.n	8002078 <_format_hex+0x54>
 8002068:	4669      	mov	r1, sp
 800206a:	2420      	movs	r4, #32
 800206c:	68b0      	ldr	r0, [r6, #8]
 800206e:	1ad5      	subs	r5, r2, r3
 8002070:	4285      	cmp	r5, r0
 8002072:	da01      	bge.n	8002078 <_format_hex+0x54>
 8002074:	428b      	cmp	r3, r1
 8002076:	d823      	bhi.n	80020c0 <_format_hex+0x9c>
 8002078:	1ad5      	subs	r5, r2, r3
 800207a:	1c5c      	adds	r4, r3, #1
 800207c:	ab10      	add	r3, sp, #64	; 0x40
 800207e:	429c      	cmp	r4, r3
 8002080:	d321      	bcc.n	80020c6 <_format_hex+0xa2>
 8002082:	68b3      	ldr	r3, [r6, #8]
 8002084:	429d      	cmp	r5, r3
 8002086:	db24      	blt.n	80020d2 <_format_hex+0xae>
 8002088:	b011      	add	sp, #68	; 0x44
 800208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800208c:	f014 0f02 	tst.w	r4, #2
 8002090:	bf0c      	ite	eq
 8002092:	2757      	moveq	r7, #87	; 0x57
 8002094:	2737      	movne	r7, #55	; 0x37
 8002096:	4613      	mov	r3, r2
 8002098:	466d      	mov	r5, sp
 800209a:	f001 000f 	and.w	r0, r1, #15
 800209e:	2809      	cmp	r0, #9
 80020a0:	bf94      	ite	ls
 80020a2:	3030      	addls	r0, #48	; 0x30
 80020a4:	19c0      	addhi	r0, r0, r7
 80020a6:	0909      	lsrs	r1, r1, #4
 80020a8:	f803 0901 	strb.w	r0, [r3], #-1
 80020ac:	d0c6      	beq.n	800203c <_format_hex+0x18>
 80020ae:	42ab      	cmp	r3, r5
 80020b0:	d1f3      	bne.n	800209a <_format_hex+0x76>
 80020b2:	e7c3      	b.n	800203c <_format_hex+0x18>
 80020b4:	f803 5901 	strb.w	r5, [r3], #-1
 80020b8:	e7c5      	b.n	8002046 <_format_hex+0x22>
 80020ba:	f803 5901 	strb.w	r5, [r3], #-1
 80020be:	e7cc      	b.n	800205a <_format_hex+0x36>
 80020c0:	f803 4901 	strb.w	r4, [r3], #-1
 80020c4:	e7d3      	b.n	800206e <_format_hex+0x4a>
 80020c6:	4630      	mov	r0, r6
 80020c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020cc:	f7ff ff1e 	bl	8001f0c <_xputch>
 80020d0:	e7d4      	b.n	800207c <_format_hex+0x58>
 80020d2:	2120      	movs	r1, #32
 80020d4:	4630      	mov	r0, r6
 80020d6:	f7ff ff19 	bl	8001f0c <_xputch>
 80020da:	3501      	adds	r5, #1
 80020dc:	e7d1      	b.n	8002082 <_format_hex+0x5e>
	...

080020e0 <_vprintf>:
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	2700      	movs	r7, #0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4614      	mov	r4, r2
 80020ea:	f04f 080a 	mov.w	r8, #10
 80020ee:	b086      	sub	sp, #24
 80020f0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80020f4:	7819      	ldrb	r1, [r3, #0]
 80020f6:	b919      	cbnz	r1, 8002100 <_vprintf+0x20>
 80020f8:	9804      	ldr	r0, [sp, #16]
 80020fa:	b006      	add	sp, #24
 80020fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002100:	2925      	cmp	r1, #37	; 0x25
 8002102:	f103 0501 	add.w	r5, r3, #1
 8002106:	d004      	beq.n	8002112 <_vprintf+0x32>
 8002108:	a801      	add	r0, sp, #4
 800210a:	f7ff feff 	bl	8001f0c <_xputch>
 800210e:	462b      	mov	r3, r5
 8002110:	e7f0      	b.n	80020f4 <_vprintf+0x14>
 8002112:	785a      	ldrb	r2, [r3, #1]
 8002114:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8002118:	2a30      	cmp	r2, #48	; 0x30
 800211a:	9703      	str	r7, [sp, #12]
 800211c:	d126      	bne.n	800216c <_vprintf+0x8c>
 800211e:	2220      	movs	r2, #32
 8002120:	9201      	str	r2, [sp, #4]
 8002122:	1c9d      	adds	r5, r3, #2
 8002124:	2200      	movs	r2, #0
 8002126:	462e      	mov	r6, r5
 8002128:	4613      	mov	r3, r2
 800212a:	7831      	ldrb	r1, [r6, #0]
 800212c:	4635      	mov	r5, r6
 800212e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8002132:	2809      	cmp	r0, #9
 8002134:	f106 0601 	add.w	r6, r6, #1
 8002138:	d91c      	bls.n	8002174 <_vprintf+0x94>
 800213a:	b12a      	cbz	r2, 8002148 <_vprintf+0x68>
 800213c:	9303      	str	r3, [sp, #12]
 800213e:	b11b      	cbz	r3, 8002148 <_vprintf+0x68>
 8002140:	9b01      	ldr	r3, [sp, #4]
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	292e      	cmp	r1, #46	; 0x2e
 800214a:	d122      	bne.n	8002192 <_vprintf+0xb2>
 800214c:	786b      	ldrb	r3, [r5, #1]
 800214e:	2b2a      	cmp	r3, #42	; 0x2a
 8002150:	d014      	beq.n	800217c <_vprintf+0x9c>
 8002152:	2100      	movs	r1, #0
 8002154:	460a      	mov	r2, r1
 8002156:	1c68      	adds	r0, r5, #1
 8002158:	7803      	ldrb	r3, [r0, #0]
 800215a:	4605      	mov	r5, r0
 800215c:	3b30      	subs	r3, #48	; 0x30
 800215e:	2b09      	cmp	r3, #9
 8002160:	f100 0001 	add.w	r0, r0, #1
 8002164:	d92f      	bls.n	80021c6 <_vprintf+0xe6>
 8002166:	b181      	cbz	r1, 800218a <_vprintf+0xaa>
 8002168:	9202      	str	r2, [sp, #8]
 800216a:	e00e      	b.n	800218a <_vprintf+0xaa>
 800216c:	2a2d      	cmp	r2, #45	; 0x2d
 800216e:	d1d9      	bne.n	8002124 <_vprintf+0x44>
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	e7d5      	b.n	8002120 <_vprintf+0x40>
 8002174:	2201      	movs	r2, #1
 8002176:	fb08 0303 	mla	r3, r8, r3, r0
 800217a:	e7d6      	b.n	800212a <_vprintf+0x4a>
 800217c:	f854 3b04 	ldr.w	r3, [r4], #4
 8002180:	3502      	adds	r5, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	bfb8      	it	lt
 8002186:	425b      	neglt	r3, r3
 8002188:	9302      	str	r3, [sp, #8]
 800218a:	9b01      	ldr	r3, [sp, #4]
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	782b      	ldrb	r3, [r5, #0]
 8002194:	2b6c      	cmp	r3, #108	; 0x6c
 8002196:	bf04      	itt	eq
 8002198:	9b01      	ldreq	r3, [sp, #4]
 800219a:	3501      	addeq	r5, #1
 800219c:	7829      	ldrb	r1, [r5, #0]
 800219e:	bf04      	itt	eq
 80021a0:	f043 0304 	orreq.w	r3, r3, #4
 80021a4:	9301      	streq	r3, [sp, #4]
 80021a6:	2978      	cmp	r1, #120	; 0x78
 80021a8:	d8ae      	bhi.n	8002108 <_vprintf+0x28>
 80021aa:	296f      	cmp	r1, #111	; 0x6f
 80021ac:	d80f      	bhi.n	80021ce <_vprintf+0xee>
 80021ae:	2963      	cmp	r1, #99	; 0x63
 80021b0:	d045      	beq.n	800223e <_vprintf+0x15e>
 80021b2:	d825      	bhi.n	8002200 <_vprintf+0x120>
 80021b4:	2958      	cmp	r1, #88	; 0x58
 80021b6:	d1a7      	bne.n	8002108 <_vprintf+0x28>
 80021b8:	9b01      	ldr	r3, [sp, #4]
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80021c4:	e051      	b.n	800226a <_vprintf+0x18a>
 80021c6:	2101      	movs	r1, #1
 80021c8:	fb08 3202 	mla	r2, r8, r2, r3
 80021cc:	e7c4      	b.n	8002158 <_vprintf+0x78>
 80021ce:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d898      	bhi.n	8002108 <_vprintf+0x28>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <_vprintf+0xfc>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	0800224d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sp}
 80021e0:	08002109 	stmdaeq	r0, {r0, r3, r8, sp}
 80021e4:	08002109 	stmdaeq	r0, {r0, r3, r8, sp}
 80021e8:	08002273 	stmdaeq	r0, {r0, r1, r4, r5, r6, r9, sp}
 80021ec:	08002109 	stmdaeq	r0, {r0, r3, r8, sp}
 80021f0:	080022e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sp}
 80021f4:	08002109 	stmdaeq	r0, {r0, r3, r8, sp}
 80021f8:	08002109 	stmdaeq	r0, {r0, r3, r8, sp}
 80021fc:	080021c1 	stmdaeq	r0, {r0, r6, r7, r8, sp}
 8002200:	2964      	cmp	r1, #100	; 0x64
 8002202:	d002      	beq.n	800220a <_vprintf+0x12a>
 8002204:	2969      	cmp	r1, #105	; 0x69
 8002206:	f47f af7f 	bne.w	8002108 <_vprintf+0x28>
 800220a:	9901      	ldr	r1, [sp, #4]
 800220c:	074e      	lsls	r6, r1, #29
 800220e:	bf43      	ittte	mi
 8002210:	3407      	addmi	r4, #7
 8002212:	f024 0307 	bicmi.w	r3, r4, #7
 8002216:	461c      	movmi	r4, r3
 8002218:	f854 2b04 	ldrpl.w	r2, [r4], #4
 800221c:	bf4a      	itet	mi
 800221e:	685b      	ldrmi	r3, [r3, #4]
 8002220:	17d3      	asrpl	r3, r2, #31
 8002222:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	da05      	bge.n	8002236 <_vprintf+0x156>
 800222a:	f041 0108 	orr.w	r1, r1, #8
 800222e:	4252      	negs	r2, r2
 8002230:	9101      	str	r1, [sp, #4]
 8002232:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002236:	a801      	add	r0, sp, #4
 8002238:	f7ff fe7e 	bl	8001f38 <_format_int>
 800223c:	e004      	b.n	8002248 <_vprintf+0x168>
 800223e:	f854 1b04 	ldr.w	r1, [r4], #4
 8002242:	a801      	add	r0, sp, #4
 8002244:	f7ff fe62 	bl	8001f0c <_xputch>
 8002248:	3501      	adds	r5, #1
 800224a:	e760      	b.n	800210e <_vprintf+0x2e>
 800224c:	2308      	movs	r3, #8
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	2320      	movs	r3, #32
 8002252:	2130      	movs	r1, #48	; 0x30
 8002254:	f854 6b04 	ldr.w	r6, [r4], #4
 8002258:	a801      	add	r0, sp, #4
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f7ff fe56 	bl	8001f0c <_xputch>
 8002260:	2178      	movs	r1, #120	; 0x78
 8002262:	a801      	add	r0, sp, #4
 8002264:	f7ff fe52 	bl	8001f0c <_xputch>
 8002268:	4631      	mov	r1, r6
 800226a:	a801      	add	r0, sp, #4
 800226c:	f7ff feda 	bl	8002024 <_format_hex>
 8002270:	e7ea      	b.n	8002248 <_vprintf+0x168>
 8002272:	2600      	movs	r6, #0
 8002274:	f854 9b04 	ldr.w	r9, [r4], #4
 8002278:	f819 3006 	ldrb.w	r3, [r9, r6]
 800227c:	b993      	cbnz	r3, 80022a4 <_vprintf+0x1c4>
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	07d9      	lsls	r1, r3, #31
 8002282:	d503      	bpl.n	800228c <_vprintf+0x1ac>
 8002284:	9b02      	ldr	r3, [sp, #8]
 8002286:	429e      	cmp	r6, r3
 8002288:	bfa8      	it	ge
 800228a:	461e      	movge	r6, r3
 800228c:	9b01      	ldr	r3, [sp, #4]
 800228e:	f106 0a01 	add.w	sl, r6, #1
 8002292:	065a      	lsls	r2, r3, #25
 8002294:	d403      	bmi.n	800229e <_vprintf+0x1be>
 8002296:	9b03      	ldr	r3, [sp, #12]
 8002298:	429e      	cmp	r6, r3
 800229a:	db05      	blt.n	80022a8 <_vprintf+0x1c8>
 800229c:	4656      	mov	r6, sl
 800229e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80022a2:	e00d      	b.n	80022c0 <_vprintf+0x1e0>
 80022a4:	3601      	adds	r6, #1
 80022a6:	e7e7      	b.n	8002278 <_vprintf+0x198>
 80022a8:	2120      	movs	r1, #32
 80022aa:	a801      	add	r0, sp, #4
 80022ac:	f7ff fe2e 	bl	8001f0c <_xputch>
 80022b0:	4656      	mov	r6, sl
 80022b2:	e7eb      	b.n	800228c <_vprintf+0x1ac>
 80022b4:	a801      	add	r0, sp, #4
 80022b6:	f7ff fe29 	bl	8001f0c <_xputch>
 80022ba:	9b02      	ldr	r3, [sp, #8]
 80022bc:	3b01      	subs	r3, #1
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	07db      	lsls	r3, r3, #31
 80022c4:	d501      	bpl.n	80022ca <_vprintf+0x1ea>
 80022c6:	9b02      	ldr	r3, [sp, #8]
 80022c8:	b11b      	cbz	r3, 80022d2 <_vprintf+0x1f2>
 80022ca:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80022ce:	2900      	cmp	r1, #0
 80022d0:	d1f0      	bne.n	80022b4 <_vprintf+0x1d4>
 80022d2:	9b03      	ldr	r3, [sp, #12]
 80022d4:	42b3      	cmp	r3, r6
 80022d6:	ddb7      	ble.n	8002248 <_vprintf+0x168>
 80022d8:	2120      	movs	r1, #32
 80022da:	a801      	add	r0, sp, #4
 80022dc:	f7ff fe16 	bl	8001f0c <_xputch>
 80022e0:	3601      	adds	r6, #1
 80022e2:	e7f6      	b.n	80022d2 <_vprintf+0x1f2>
 80022e4:	9b01      	ldr	r3, [sp, #4]
 80022e6:	f013 0304 	ands.w	r3, r3, #4
 80022ea:	bf1d      	ittte	ne
 80022ec:	3407      	addne	r4, #7
 80022ee:	f024 0307 	bicne.w	r3, r4, #7
 80022f2:	461c      	movne	r4, r3
 80022f4:	f854 2b04 	ldreq.w	r2, [r4], #4
 80022f8:	bf1c      	itt	ne
 80022fa:	f854 2b08 	ldrne.w	r2, [r4], #8
 80022fe:	685b      	ldrne	r3, [r3, #4]
 8002300:	e799      	b.n	8002236 <_vprintf+0x156>
 8002302:	bf00      	nop

08002304 <printf>:
 8002304:	b40f      	push	{r0, r1, r2, r3}
 8002306:	b507      	push	{r0, r1, r2, lr}
 8002308:	aa04      	add	r2, sp, #16
 800230a:	f852 1b04 	ldr.w	r1, [r2], #4
 800230e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	f7ff fee4 	bl	80020e0 <_vprintf>
 8002318:	b003      	add	sp, #12
 800231a:	f85d eb04 	ldr.w	lr, [sp], #4
 800231e:	b004      	add	sp, #16
 8002320:	4770      	bx	lr
	...

08002324 <snprintf>:
 8002324:	b40c      	push	{r2, r3}
 8002326:	460b      	mov	r3, r1
 8002328:	b513      	push	{r0, r1, r4, lr}
 800232a:	4c09      	ldr	r4, [pc, #36]	; (8002350 <snprintf+0x2c>)
 800232c:	aa04      	add	r2, sp, #16
 800232e:	f852 1b04 	ldr.w	r1, [r2], #4
 8002332:	6020      	str	r0, [r4, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	f7ff fed2 	bl	80020e0 <_vprintf>
 800233c:	2300      	movs	r3, #0
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	7013      	strb	r3, [r2, #0]
 8002344:	b002      	add	sp, #8
 8002346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800234a:	b002      	add	sp, #8
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08002354 <vsnprintf>:
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	4605      	mov	r5, r0
 8002358:	4c05      	ldr	r4, [pc, #20]	; (8002370 <vsnprintf+0x1c>)
 800235a:	4608      	mov	r0, r1
 800235c:	4611      	mov	r1, r2
 800235e:	461a      	mov	r2, r3
 8002360:	6025      	str	r5, [r4, #0]
 8002362:	f7ff febd 	bl	80020e0 <_vprintf>
 8002366:	2300      	movs	r3, #0
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	6023      	str	r3, [r4, #0]
 800236c:	7013      	strb	r3, [r2, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08002374 <puts>:
 8002374:	b508      	push	{r3, lr}
 8002376:	f005 fd95 	bl	8007ea4 <console_puts>
 800237a:	200a      	movs	r0, #10
 800237c:	f005 fd90 	bl	8007ea0 <console_putc>
 8002380:	2001      	movs	r0, #1
 8002382:	bd08      	pop	{r3, pc}

08002384 <DMXReceiver::Run(short&)>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <DMXReceiver::Run(short&)+0x8c>)
 8002388:	4607      	mov	r7, r0
 800238a:	781e      	ldrb	r6, [r3, #0]
 800238c:	460d      	mov	r5, r1
 800238e:	b11e      	cbz	r6, 8002398 <DMXReceiver::Run(short&)+0x14>
 8002390:	2400      	movs	r4, #0
 8002392:	802c      	strh	r4, [r5, #0]
 8002394:	4620      	mov	r0, r4
 8002396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002398:	4631      	mov	r1, r6
 800239a:	f001 fc25 	bl	8003be8 <Dmx::GetUpdatesPerSecond(unsigned int)>
 800239e:	4604      	mov	r4, r0
 80023a0:	b998      	cbnz	r0, 80023ca <DMXReceiver::Run(short&)+0x46>
 80023a2:	4e1c      	ldr	r6, [pc, #112]	; (8002414 <DMXReceiver::Run(short&)+0x90>)
 80023a4:	7833      	ldrb	r3, [r6, #0]
 80023a6:	b15b      	cbz	r3, 80023c0 <DMXReceiver::Run(short&)+0x3c>
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <DMXReceiver::Run(short&)+0x94>)
 80023aa:	4621      	mov	r1, r4
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	6803      	ldr	r3, [r0, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4798      	blx	r3
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <DMXReceiver::Run(short&)+0x98>)
 80023b6:	2102      	movs	r1, #2
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	7034      	strb	r4, [r6, #0]
 80023bc:	f005 fddc 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	2400      	movs	r4, #0
 80023c6:	802b      	strh	r3, [r5, #0]
 80023c8:	e7e4      	b.n	8002394 <DMXReceiver::Run(short&)+0x10>
 80023ca:	4631      	mov	r1, r6
 80023cc:	4638      	mov	r0, r7
 80023ce:	f001 fbf7 	bl	8003bc0 <Dmx::GetDmxAvailable(unsigned int)>
 80023d2:	2800      	cmp	r0, #0
 80023d4:	d0dc      	beq.n	8002390 <DMXReceiver::Run(short&)+0xc>
 80023d6:	4f10      	ldr	r7, [pc, #64]	; (8002418 <DMXReceiver::Run(short&)+0x94>)
 80023d8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80023dc:	1c44      	adds	r4, r0, #1
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	802b      	strh	r3, [r5, #0]
 80023e2:	6802      	ldr	r2, [r0, #0]
 80023e4:	4631      	mov	r1, r6
 80023e6:	6915      	ldr	r5, [r2, #16]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4622      	mov	r2, r4
 80023ec:	47a8      	blx	r5
 80023ee:	4d09      	ldr	r5, [pc, #36]	; (8002414 <DMXReceiver::Run(short&)+0x90>)
 80023f0:	7829      	ldrb	r1, [r5, #0]
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d1ce      	bne.n	8002394 <DMXReceiver::Run(short&)+0x10>
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4798      	blx	r3
 80023fe:	2301      	movs	r3, #1
 8002400:	702b      	strb	r3, [r5, #0]
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <DMXReceiver::Run(short&)+0x98>)
 8002404:	2103      	movs	r1, #3
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f005 fdb6 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 800240c:	e7c2      	b.n	8002394 <DMXReceiver::Run(short&)+0x10>
 800240e:	bf00      	nop
 8002410:	20000208 	andcs	r0, r0, r8, lsl #4
 8002414:	20000200 	andcs	r0, r0, r0, lsl #4
 8002418:	20000204 	andcs	r0, r0, r4, lsl #4
 800241c:	200017d8 	ldrdcs	r1, [r0], -r8

08002420 <RDMResponder::HandleResponse(unsigned char*)>:
 8002420:	780a      	ldrb	r2, [r1, #0]
 8002422:	b510      	push	{r4, lr}
 8002424:	2acc      	cmp	r2, #204	; 0xcc
 8002426:	d107      	bne.n	8002438 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002428:	788c      	ldrb	r4, [r1, #2]
 800242a:	2000      	movs	r0, #0
 800242c:	3402      	adds	r4, #2
 800242e:	4622      	mov	r2, r4
 8002430:	f001 fc3a 	bl	8003ca8 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8002434:	4620      	mov	r0, r4
 8002436:	bd10      	pop	{r4, pc}
 8002438:	2afe      	cmp	r2, #254	; 0xfe
 800243a:	d105      	bne.n	8002448 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 800243c:	2218      	movs	r2, #24
 800243e:	2000      	movs	r0, #0
 8002440:	f001 fc44 	bl	8003ccc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 8002444:	2418      	movs	r4, #24
 8002446:	e7f5      	b.n	8002434 <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002448:	f06f 0402 	mvn.w	r4, #2
 800244c:	e7f2      	b.n	8002434 <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

08002450 <RDMResponder::Run()>:
 8002450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002452:	4604      	mov	r4, r0
 8002454:	f10d 0106 	add.w	r1, sp, #6
 8002458:	30d0      	adds	r0, #208	; 0xd0
 800245a:	f7ff ff93 	bl	8002384 <DMXReceiver::Run(short&)>
 800245e:	4e1f      	ldr	r6, [pc, #124]	; (80024dc <RDMResponder::Run()+0x8c>)
 8002460:	4601      	mov	r1, r0
 8002462:	6830      	ldr	r0, [r6, #0]
 8002464:	8883      	ldrh	r3, [r0, #4]
 8002466:	b153      	cbz	r3, 800247e <RDMResponder::Run()+0x2e>
 8002468:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800246c:	1c53      	adds	r3, r2, #1
 800246e:	d120      	bne.n	80024b2 <RDMResponder::Run()+0x62>
 8002470:	4d1b      	ldr	r5, [pc, #108]	; (80024e0 <RDMResponder::Run()+0x90>)
 8002472:	782b      	ldrb	r3, [r5, #0]
 8002474:	b11b      	cbz	r3, 800247e <RDMResponder::Run()+0x2e>
 8002476:	f000 ff24 	bl	80032c2 <RDMSubDevices::Stop()>
 800247a:	2300      	movs	r3, #0
 800247c:	702b      	strb	r3, [r5, #0]
 800247e:	2000      	movs	r0, #0
 8002480:	f000 ffe2 	bl	8003448 <Rdm::Receive(unsigned int)>
 8002484:	b198      	cbz	r0, 80024ae <RDMResponder::Run()+0x5e>
 8002486:	7803      	ldrb	r3, [r0, #0]
 8002488:	2bcc      	cmp	r3, #204	; 0xcc
 800248a:	d120      	bne.n	80024ce <RDMResponder::Run()+0x7e>
 800248c:	7d03      	ldrb	r3, [r0, #20]
 800248e:	2b20      	cmp	r3, #32
 8002490:	d003      	beq.n	800249a <RDMResponder::Run()+0x4a>
 8002492:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002496:	2b10      	cmp	r3, #16
 8002498:	d11c      	bne.n	80024d4 <RDMResponder::Run()+0x84>
 800249a:	1c41      	adds	r1, r0, #1
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <RDMResponder::Run()+0x94>)
 800249e:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 80024a2:	f002 fda1 	bl	8004fe8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80024a6:	4620      	mov	r0, r4
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <RDMResponder::Run()+0x94>)
 80024aa:	f7ff ffb9 	bl	8002420 <RDMResponder::HandleResponse(unsigned char*)>
 80024ae:	b002      	add	sp, #8
 80024b0:	bd70      	pop	{r4, r5, r6, pc}
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d0e3      	beq.n	800247e <RDMResponder::Run()+0x2e>
 80024b6:	4d0a      	ldr	r5, [pc, #40]	; (80024e0 <RDMResponder::Run()+0x90>)
 80024b8:	b292      	uxth	r2, r2
 80024ba:	f000 ff12 	bl	80032e2 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 80024be:	782b      	ldrb	r3, [r5, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1dc      	bne.n	800247e <RDMResponder::Run()+0x2e>
 80024c4:	6830      	ldr	r0, [r6, #0]
 80024c6:	f000 feec 	bl	80032a2 <RDMSubDevices::Start()>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e7d6      	b.n	800247c <RDMResponder::Run()+0x2c>
 80024ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d2:	e7ec      	b.n	80024ae <RDMResponder::Run()+0x5e>
 80024d4:	f06f 0001 	mvn.w	r0, #1
 80024d8:	e7e9      	b.n	80024ae <RDMResponder::Run()+0x5e>
 80024da:	bf00      	nop
 80024dc:	200001fc 	strdcs	r0, [r0], -ip
 80024e0:	200001f3 	strdcs	r0, [r0], -r3
 80024e4:	200000f4 	strdcs	r0, [r0], -r4

080024e8 <CpuTemperature::Initialize()>:
 80024e8:	2001      	movs	r0, #1
 80024ea:	4770      	bx	lr

080024ec <CpuTemperature::~CpuTemperature()>:
 80024ec:	4770      	bx	lr

080024ee <CpuTemperature::GetValue()>:
 80024ee:	b508      	push	{r3, lr}
 80024f0:	f006 ffb2 	bl	8009458 <gd32_adc_gettemp()>
 80024f4:	f7fe fea2 	bl	800123c <__aeabi_f2iz>
 80024f8:	b200      	sxth	r0, r0
 80024fa:	bd08      	pop	{r3, pc}

080024fc <CpuTemperature::~CpuTemperature()>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	f005 ff89 	bl	8008416 <operator delete(void*)>
 8002504:	4620      	mov	r0, r4
 8002506:	bd10      	pop	{r4, pc}

08002508 <RDMSensors::RDMSensors()>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2600      	movs	r6, #0
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <RDMSensors::RDMSensors()+0x4c>)
 800250e:	4604      	mov	r4, r0
 8002510:	6018      	str	r0, [r3, #0]
 8002512:	6006      	str	r6, [r0, #0]
 8002514:	7106      	strb	r6, [r0, #4]
 8002516:	2040      	movs	r0, #64	; 0x40
 8002518:	f005 ff83 	bl	8008422 <operator new[](unsigned int)>
 800251c:	6020      	str	r0, [r4, #0]
 800251e:	2040      	movs	r0, #64	; 0x40
 8002520:	f005 ff7d 	bl	800841e <operator new(unsigned int)>
 8002524:	4605      	mov	r5, r0
 8002526:	7921      	ldrb	r1, [r4, #4]
 8002528:	f000 faca 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RDMSensors::RDMSensors()+0x50>)
 800252e:	4628      	mov	r0, r5
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <RDMSensors::RDMSensors()+0x54>)
 8002534:	490a      	ldr	r1, [pc, #40]	; (8002560 <RDMSensors::RDMSensors()+0x58>)
 8002536:	60ab      	str	r3, [r5, #8]
 8002538:	3354      	adds	r3, #84	; 0x54
 800253a:	60eb      	str	r3, [r5, #12]
 800253c:	2355      	movs	r3, #85	; 0x55
 800253e:	71ee      	strb	r6, [r5, #7]
 8002540:	822b      	strh	r3, [r5, #16]
 8002542:	f000 facf 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 8002546:	4629      	mov	r1, r5
 8002548:	4620      	mov	r0, r4
 800254a:	f000 f85b 	bl	8002604 <RDMSensors::Add(RDMSensor*)>
 800254e:	4620      	mov	r0, r4
 8002550:	bd70      	pop	{r4, r5, r6, pc}
 8002552:	bf00      	nop
 8002554:	200001f8 	strdcs	r0, [r0], -r8
 8002558:	0800a05c 	stmdaeq	r0, {r2, r3, r4, r6, sp, pc}
 800255c:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002560:	0800a04d 	stmdaeq	r0, {r0, r2, r3, r6, sp, pc}

08002564 <RDMSensors::~RDMSensors()>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	2500      	movs	r5, #0
 8002568:	4604      	mov	r4, r0
 800256a:	462e      	mov	r6, r5
 800256c:	7923      	ldrb	r3, [r4, #4]
 800256e:	6820      	ldr	r0, [r4, #0]
 8002570:	42ab      	cmp	r3, r5
 8002572:	d90a      	bls.n	800258a <RDMSensors::~RDMSensors()+0x26>
 8002574:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8002578:	b128      	cbz	r0, 8002586 <RDMSensors::~RDMSensors()+0x22>
 800257a:	6803      	ldr	r3, [r0, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4798      	blx	r3
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8002586:	3501      	adds	r5, #1
 8002588:	e7f0      	b.n	800256c <RDMSensors::~RDMSensors()+0x8>
 800258a:	b108      	cbz	r0, 8002590 <RDMSensors::~RDMSensors()+0x2c>
 800258c:	f005 ff45 	bl	800841a <operator delete[](void*)>
 8002590:	4620      	mov	r0, r4
 8002592:	bd70      	pop	{r4, r5, r6, pc}

08002594 <RDMSensors::GetDefintion(unsigned char)>:
 8002594:	6803      	ldr	r3, [r0, #0]
 8002596:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800259a:	3006      	adds	r0, #6
 800259c:	4770      	bx	lr

0800259e <RDMSensors::GetValues(unsigned char)>:
 800259e:	6803      	ldr	r3, [r0, #0]
 80025a0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025a4:	f000 baac 	b.w	8002b00 <RDMSensor::GetValues()>

080025a8 <RDMSensors::SetValues(unsigned char)>:
 80025a8:	29ff      	cmp	r1, #255	; 0xff
 80025aa:	b538      	push	{r3, r4, r5, lr}
 80025ac:	4604      	mov	r4, r0
 80025ae:	d10a      	bne.n	80025c6 <RDMSensors::SetValues(unsigned char)+0x1e>
 80025b0:	2500      	movs	r5, #0
 80025b2:	7923      	ldrb	r3, [r4, #4]
 80025b4:	42ab      	cmp	r3, r5
 80025b6:	d90d      	bls.n	80025d4 <RDMSensors::SetValues(unsigned char)+0x2c>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80025be:	f000 fab4 	bl	8002b2a <RDMSensor::SetValues()>
 80025c2:	3501      	adds	r5, #1
 80025c4:	e7f5      	b.n	80025b2 <RDMSensors::SetValues(unsigned char)+0xa>
 80025c6:	6803      	ldr	r3, [r0, #0]
 80025c8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d0:	f000 baab 	b.w	8002b2a <RDMSensor::SetValues()>
 80025d4:	bd38      	pop	{r3, r4, r5, pc}

080025d6 <RDMSensors::SetRecord(unsigned char)>:
 80025d6:	29ff      	cmp	r1, #255	; 0xff
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4604      	mov	r4, r0
 80025dc:	d10a      	bne.n	80025f4 <RDMSensors::SetRecord(unsigned char)+0x1e>
 80025de:	2500      	movs	r5, #0
 80025e0:	7923      	ldrb	r3, [r4, #4]
 80025e2:	42ab      	cmp	r3, r5
 80025e4:	d90d      	bls.n	8002602 <RDMSensors::SetRecord(unsigned char)+0x2c>
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80025ec:	f000 faa7 	bl	8002b3e <RDMSensor::Record()>
 80025f0:	3501      	adds	r5, #1
 80025f2:	e7f5      	b.n	80025e0 <RDMSensors::SetRecord(unsigned char)+0xa>
 80025f4:	6803      	ldr	r3, [r0, #0]
 80025f6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025fe:	f000 ba9e 	b.w	8002b3e <RDMSensor::Record()>
 8002602:	bd38      	pop	{r3, r4, r5, pc}

08002604 <RDMSensors::Add(RDMSensor*)>:
 8002604:	4603      	mov	r3, r0
 8002606:	6800      	ldr	r0, [r0, #0]
 8002608:	b510      	push	{r4, lr}
 800260a:	b148      	cbz	r0, 8002620 <RDMSensors::Add(RDMSensor*)+0x1c>
 800260c:	791a      	ldrb	r2, [r3, #4]
 800260e:	2a10      	cmp	r2, #16
 8002610:	bf1b      	ittet	ne
 8002612:	1c54      	addne	r4, r2, #1
 8002614:	711c      	strbne	r4, [r3, #4]
 8002616:	2000      	moveq	r0, #0
 8002618:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
 800261c:	bf18      	it	ne
 800261e:	2001      	movne	r0, #1
 8002620:	bd10      	pop	{r4, pc}

08002622 <RDMSensorBH170::Initialize()>:
 8002622:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002626:	4770      	bx	lr

08002628 <RDMSensorMCP9808::Initialize()>:
 8002628:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800262c:	4770      	bx	lr

0800262e <RDMSensorHTU21DHumidity::Initialize()>:
 800262e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002632:	4770      	bx	lr

08002634 <RDMSensorHTU21DTemperature::Initialize()>:
 8002634:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002638:	4770      	bx	lr

0800263a <RDMSensorINA219Current::Initialize()>:
 800263a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800263e:	4770      	bx	lr

08002640 <RDMSensorINA219Power::Initialize()>:
 8002640:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002644:	4770      	bx	lr

08002646 <RDMSensorINA219Voltage::Initialize()>:
 8002646:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800264a:	4770      	bx	lr

0800264c <RDMSensorSI7021Humidity::Initialize()>:
 800264c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002650:	4770      	bx	lr

08002652 <RDMSensorSI7021Temperature::Initialize()>:
 8002652:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002656:	4770      	bx	lr

08002658 <RDMSensorSI7021Temperature::GetValue()>:
 8002658:	b508      	push	{r3, lr}
 800265a:	3040      	adds	r0, #64	; 0x40
 800265c:	f000 fd7c 	bl	8003158 <sensor::SI7021::GetTemperature()>
 8002660:	f7fe fdec 	bl	800123c <__aeabi_f2iz>
 8002664:	b200      	sxth	r0, r0
 8002666:	bd08      	pop	{r3, pc}

08002668 <RDMSensorSI7021Humidity::GetValue()>:
 8002668:	b508      	push	{r3, lr}
 800266a:	3040      	adds	r0, #64	; 0x40
 800266c:	f000 fd8a 	bl	8003184 <sensor::SI7021::GetHumidity()>
 8002670:	f7fe fde4 	bl	800123c <__aeabi_f2iz>
 8002674:	b200      	sxth	r0, r0
 8002676:	bd08      	pop	{r3, pc}

08002678 <RDMSensorINA219Voltage::GetValue()>:
 8002678:	b508      	push	{r3, lr}
 800267a:	3040      	adds	r0, #64	; 0x40
 800267c:	f000 fc76 	bl	8002f6c <sensor::INA219::GetBusVoltage()>
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <RDMSensorINA219Voltage::GetValue()+0x18>)
 8002682:	f7fe fc15 	bl	8000eb0 <__aeabi_fmul>
 8002686:	f7fe fdd9 	bl	800123c <__aeabi_f2iz>
 800268a:	b200      	sxth	r0, r0
 800268c:	bd08      	pop	{r3, pc}
 800268e:	bf00      	nop
 8002690:	447a0000 	ldrbtmi	r0, [sl], #-0

08002694 <RDMSensorINA219Power::GetValue()>:
 8002694:	b508      	push	{r3, lr}
 8002696:	3040      	adds	r0, #64	; 0x40
 8002698:	f000 fc74 	bl	8002f84 <sensor::INA219::GetBusPower()>
 800269c:	f7fe fdce 	bl	800123c <__aeabi_f2iz>
 80026a0:	b200      	sxth	r0, r0
 80026a2:	bd08      	pop	{r3, pc}

080026a4 <RDMSensorINA219Current::GetValue()>:
 80026a4:	b508      	push	{r3, lr}
 80026a6:	3040      	adds	r0, #64	; 0x40
 80026a8:	f000 fc48 	bl	8002f3c <sensor::INA219::GetShuntCurrent()>
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <RDMSensorINA219Current::GetValue()+0x18>)
 80026ae:	f7fe fbff 	bl	8000eb0 <__aeabi_fmul>
 80026b2:	f7fe fdc3 	bl	800123c <__aeabi_f2iz>
 80026b6:	b200      	sxth	r0, r0
 80026b8:	bd08      	pop	{r3, pc}
 80026ba:	bf00      	nop
 80026bc:	447a0000 	ldrbtmi	r0, [sl], #-0

080026c0 <RDMSensorHTU21DTemperature::GetValue()>:
 80026c0:	b508      	push	{r3, lr}
 80026c2:	3040      	adds	r0, #64	; 0x40
 80026c4:	f000 fb16 	bl	8002cf4 <sensor::HTU21D::GetTemperature()>
 80026c8:	f7fe fdb8 	bl	800123c <__aeabi_f2iz>
 80026cc:	b200      	sxth	r0, r0
 80026ce:	bd08      	pop	{r3, pc}

080026d0 <RDMSensorHTU21DHumidity::GetValue()>:
 80026d0:	b508      	push	{r3, lr}
 80026d2:	3040      	adds	r0, #64	; 0x40
 80026d4:	f000 fb24 	bl	8002d20 <sensor::HTU21D::GetHumidity()>
 80026d8:	f7fe fdb0 	bl	800123c <__aeabi_f2iz>
 80026dc:	b200      	sxth	r0, r0
 80026de:	bd08      	pop	{r3, pc}

080026e0 <RDMSensorMCP9808::GetValue()>:
 80026e0:	b508      	push	{r3, lr}
 80026e2:	3040      	adds	r0, #64	; 0x40
 80026e4:	f000 fcbe 	bl	8003064 <sensor::MCP9808::Get()>
 80026e8:	f7fe fda8 	bl	800123c <__aeabi_f2iz>
 80026ec:	b200      	sxth	r0, r0
 80026ee:	bd08      	pop	{r3, pc}

080026f0 <RDMSensorBH170::GetValue()>:
 80026f0:	b508      	push	{r3, lr}
 80026f2:	3040      	adds	r0, #64	; 0x40
 80026f4:	f000 fa7c 	bl	8002bf0 <sensor::BH170::Get()>
 80026f8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80026fc:	bd08      	pop	{r3, pc}

080026fe <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 80026fe:	4770      	bx	lr

08002700 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4604      	mov	r4, r0
 8002704:	f005 fe87 	bl	8008416 <operator delete(void*)>
 8002708:	4620      	mov	r0, r4
 800270a:	bd10      	pop	{r4, pc}

0800270c <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 800270c:	4770      	bx	lr

0800270e <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 800270e:	b510      	push	{r4, lr}
 8002710:	4604      	mov	r4, r0
 8002712:	f005 fe80 	bl	8008416 <operator delete(void*)>
 8002716:	4620      	mov	r0, r4
 8002718:	bd10      	pop	{r4, pc}

0800271a <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 800271a:	4770      	bx	lr

0800271c <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 800271c:	b510      	push	{r4, lr}
 800271e:	4604      	mov	r4, r0
 8002720:	f005 fe79 	bl	8008416 <operator delete(void*)>
 8002724:	4620      	mov	r0, r4
 8002726:	bd10      	pop	{r4, pc}

08002728 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002728:	4770      	bx	lr

0800272a <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 800272a:	b510      	push	{r4, lr}
 800272c:	4604      	mov	r4, r0
 800272e:	f005 fe72 	bl	8008416 <operator delete(void*)>
 8002732:	4620      	mov	r0, r4
 8002734:	bd10      	pop	{r4, pc}

08002736 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002736:	4770      	bx	lr

08002738 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002738:	b510      	push	{r4, lr}
 800273a:	4604      	mov	r4, r0
 800273c:	f005 fe6b 	bl	8008416 <operator delete(void*)>
 8002740:	4620      	mov	r0, r4
 8002742:	bd10      	pop	{r4, pc}

08002744 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8002744:	4770      	bx	lr

08002746 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 8002746:	b510      	push	{r4, lr}
 8002748:	4604      	mov	r4, r0
 800274a:	f005 fe64 	bl	8008416 <operator delete(void*)>
 800274e:	4620      	mov	r0, r4
 8002750:	bd10      	pop	{r4, pc}

08002752 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8002752:	4770      	bx	lr

08002754 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	f005 fe5d 	bl	8008416 <operator delete(void*)>
 800275c:	4620      	mov	r0, r4
 800275e:	bd10      	pop	{r4, pc}

08002760 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002760:	4770      	bx	lr

08002762 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002762:	b510      	push	{r4, lr}
 8002764:	4604      	mov	r4, r0
 8002766:	f005 fe56 	bl	8008416 <operator delete(void*)>
 800276a:	4620      	mov	r0, r4
 800276c:	bd10      	pop	{r4, pc}

0800276e <RDMSensorBH170::~RDMSensorBH170()>:
 800276e:	4770      	bx	lr

08002770 <RDMSensorBH170::~RDMSensorBH170()>:
 8002770:	b510      	push	{r4, lr}
 8002772:	4604      	mov	r4, r0
 8002774:	f005 fe4f 	bl	8008416 <operator delete(void*)>
 8002778:	4620      	mov	r0, r4
 800277a:	bd10      	pop	{r4, pc}

0800277c <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 800277c:	6001      	str	r1, [r0, #0]
 800277e:	4770      	bx	lr

08002780 <RDMSensorsParams::Load()>:
 8002780:	b508      	push	{r3, lr}
 8002782:	2300      	movs	r3, #0
 8002784:	4601      	mov	r1, r0
 8002786:	6043      	str	r3, [r0, #4]
 8002788:	6800      	ldr	r0, [r0, #0]
 800278a:	b120      	cbz	r0, 8002796 <RDMSensorsParams::Load()+0x16>
 800278c:	6803      	ldr	r3, [r0, #0]
 800278e:	3104      	adds	r1, #4
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	4798      	blx	r3
 8002794:	2001      	movs	r0, #1
 8002796:	bd08      	pop	{r3, pc}

08002798 <RDMSensorsParams::Dump()>:
 8002798:	4770      	bx	lr
	...

0800279c <RDMSensorsParams::Add(RDMSensor*)>:
 800279c:	b538      	push	{r3, r4, r5, lr}
 800279e:	680b      	ldr	r3, [r1, #0]
 80027a0:	4608      	mov	r0, r1
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	460c      	mov	r4, r1
 80027a6:	4798      	blx	r3
 80027a8:	4605      	mov	r5, r0
 80027aa:	b130      	cbz	r0, 80027ba <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 80027ae:	4621      	mov	r1, r4
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	f7ff ff27 	bl	8002604 <RDMSensors::Add(RDMSensor*)>
 80027b6:	4628      	mov	r0, r5
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	4620      	mov	r0, r4
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4798      	blx	r3
 80027c2:	e7f8      	b.n	80027b6 <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 80027c4:	200001f8 	strdcs	r0, [r0], -r8

080027c8 <RDMSensorsParams::Set()>:
 80027c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4605      	mov	r5, r0
 80027ce:	4607      	mov	r7, r0
 80027d0:	f04f 0800 	mov.w	r8, #0
 80027d4:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8002a54 <RDMSensorsParams::Set()+0x28c>
 80027d8:	686b      	ldr	r3, [r5, #4]
 80027da:	4543      	cmp	r3, r8
 80027dc:	f240 8137 	bls.w	8002a4e <RDMSensorsParams::Set()+0x286>
 80027e0:	4b9d      	ldr	r3, [pc, #628]	; (8002a58 <RDMSensorsParams::Set()+0x290>)
 80027e2:	7a7e      	ldrb	r6, [r7, #9]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	791c      	ldrb	r4, [r3, #4]
 80027e8:	7a3b      	ldrb	r3, [r7, #8]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d827      	bhi.n	800283e <RDMSensorsParams::Set()+0x76>
 80027ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027f2:	002a0005 	eoreq	r0, sl, r5
 80027f6:	00d5006b 	sbcseq	r0, r5, fp, rrx
 80027fa:	204c00f0 	strdcs	r0, [ip], #-0
 80027fe:	f005 fe0e 	bl	800841e <operator new(unsigned int)>
 8002802:	4681      	mov	r9, r0
 8002804:	4621      	mov	r1, r4
 8002806:	f000 f95b 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 800280a:	4631      	mov	r1, r6
 800280c:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002810:	f000 f9ba 	bl	8002b88 <sensor::BH170::BH170(unsigned char)>
 8002814:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <RDMSensorsParams::Set()+0x294>)
 8002816:	241a      	movs	r4, #26
 8002818:	f8c9 3000 	str.w	r3, [r9]
 800281c:	2318      	movs	r3, #24
 800281e:	f889 3007 	strb.w	r3, [r9, #7]
 8002822:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002826:	e9c9 4302 	strd	r4, r3, [r9, #8]
 800282a:	498d      	ldr	r1, [pc, #564]	; (8002a60 <RDMSensorsParams::Set()+0x298>)
 800282c:	f8a9 3010 	strh.w	r3, [r9, #16]
 8002830:	4648      	mov	r0, r9
 8002832:	f000 f957 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 8002836:	4649      	mov	r1, r9
 8002838:	4628      	mov	r0, r5
 800283a:	f7ff ffaf 	bl	800279c <RDMSensorsParams::Add(RDMSensor*)>
 800283e:	f108 0801 	add.w	r8, r8, #1
 8002842:	3703      	adds	r7, #3
 8002844:	e7c8      	b.n	80027d8 <RDMSensorsParams::Set()+0x10>
 8002846:	204c      	movs	r0, #76	; 0x4c
 8002848:	f005 fde9 	bl	800841e <operator new(unsigned int)>
 800284c:	4682      	mov	sl, r0
 800284e:	4621      	mov	r1, r4
 8002850:	f000 f936 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 8002854:	4631      	mov	r1, r6
 8002856:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800285a:	f000 f9e9 	bl	8002c30 <sensor::HTU21D::HTU21D(unsigned char)>
 800285e:	4a81      	ldr	r2, [pc, #516]	; (8002a64 <RDMSensorsParams::Set()+0x29c>)
 8002860:	f04f 0900 	mov.w	r9, #0
 8002864:	f8ca 2000 	str.w	r2, [sl]
 8002868:	221f      	movs	r2, #31
 800286a:	f88a 2007 	strb.w	r2, [sl, #7]
 800286e:	2264      	movs	r2, #100	; 0x64
 8002870:	4650      	mov	r0, sl
 8002872:	497d      	ldr	r1, [pc, #500]	; (8002a68 <RDMSensorsParams::Set()+0x2a0>)
 8002874:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002878:	f8aa 2010 	strh.w	r2, [sl, #16]
 800287c:	f000 f932 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 8002880:	4651      	mov	r1, sl
 8002882:	4628      	mov	r0, r5
 8002884:	f7ff ff8a 	bl	800279c <RDMSensorsParams::Add(RDMSensor*)>
 8002888:	2800      	cmp	r0, #0
 800288a:	d0d8      	beq.n	800283e <RDMSensorsParams::Set()+0x76>
 800288c:	204c      	movs	r0, #76	; 0x4c
 800288e:	f005 fdc6 	bl	800841e <operator new(unsigned int)>
 8002892:	4682      	mov	sl, r0
 8002894:	1c61      	adds	r1, r4, #1
 8002896:	b2c9      	uxtb	r1, r1
 8002898:	f000 f912 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 800289c:	4631      	mov	r1, r6
 800289e:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80028a2:	f000 f9c5 	bl	8002c30 <sensor::HTU21D::HTU21D(unsigned char)>
 80028a6:	4a71      	ldr	r2, [pc, #452]	; (8002a6c <RDMSensorsParams::Set()+0x2a4>)
 80028a8:	4b71      	ldr	r3, [pc, #452]	; (8002a70 <RDMSensorsParams::Set()+0x2a8>)
 80028aa:	f8ca 2000 	str.w	r2, [sl]
 80028ae:	227d      	movs	r2, #125	; 0x7d
 80028b0:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 80028b4:	496f      	ldr	r1, [pc, #444]	; (8002a74 <RDMSensorsParams::Set()+0x2ac>)
 80028b6:	f88a 9007 	strb.w	r9, [sl, #7]
 80028ba:	f8aa 2010 	strh.w	r2, [sl, #16]
 80028be:	4650      	mov	r0, sl
 80028c0:	f000 f910 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 80028c4:	4651      	mov	r1, sl
 80028c6:	e7b7      	b.n	8002838 <RDMSensorsParams::Set()+0x70>
 80028c8:	2060      	movs	r0, #96	; 0x60
 80028ca:	f005 fda8 	bl	800841e <operator new(unsigned int)>
 80028ce:	4682      	mov	sl, r0
 80028d0:	4621      	mov	r1, r4
 80028d2:	f000 f8f5 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 80028d6:	4631      	mov	r1, r6
 80028d8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80028dc:	f000 faee 	bl	8002ebc <sensor::INA219::INA219(unsigned char)>
 80028e0:	4a65      	ldr	r2, [pc, #404]	; (8002a78 <RDMSensorsParams::Set()+0x2b0>)
 80028e2:	f04f 0902 	mov.w	r9, #2
 80028e6:	f8ca 2000 	str.w	r2, [sl]
 80028ea:	4a64      	ldr	r2, [pc, #400]	; (8002a7c <RDMSensorsParams::Set()+0x2b4>)
 80028ec:	4650      	mov	r0, sl
 80028ee:	f8ca 2008 	str.w	r2, [sl, #8]
 80028f2:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 80028f6:	f8ca 200c 	str.w	r2, [sl, #12]
 80028fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028fe:	4960      	ldr	r1, [pc, #384]	; (8002a80 <RDMSensorsParams::Set()+0x2b8>)
 8002900:	f88a 9007 	strb.w	r9, [sl, #7]
 8002904:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002908:	f000 f8ec 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 800290c:	4651      	mov	r1, sl
 800290e:	4628      	mov	r0, r5
 8002910:	f7ff ff44 	bl	800279c <RDMSensorsParams::Add(RDMSensor*)>
 8002914:	2800      	cmp	r0, #0
 8002916:	d092      	beq.n	800283e <RDMSensorsParams::Set()+0x76>
 8002918:	2060      	movs	r0, #96	; 0x60
 800291a:	f005 fd80 	bl	800841e <operator new(unsigned int)>
 800291e:	4682      	mov	sl, r0
 8002920:	1c61      	adds	r1, r4, #1
 8002922:	b2c9      	uxtb	r1, r1
 8002924:	f000 f8cc 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 8002928:	4631      	mov	r1, r6
 800292a:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800292e:	f000 fac5 	bl	8002ebc <sensor::INA219::INA219(unsigned char)>
 8002932:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002936:	4a53      	ldr	r2, [pc, #332]	; (8002a84 <RDMSensorsParams::Set()+0x2bc>)
 8002938:	4650      	mov	r0, sl
 800293a:	f8ca 2000 	str.w	r2, [sl]
 800293e:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <RDMSensorsParams::Set()+0x2c0>)
 8002940:	f88a 9007 	strb.w	r9, [sl, #7]
 8002944:	f8ca 2008 	str.w	r2, [sl, #8]
 8002948:	440a      	add	r2, r1
 800294a:	f8ca 200c 	str.w	r2, [sl, #12]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	494e      	ldr	r1, [pc, #312]	; (8002a8c <RDMSensorsParams::Set()+0x2c4>)
 8002952:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002956:	f000 f8c5 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 800295a:	4651      	mov	r1, sl
 800295c:	4628      	mov	r0, r5
 800295e:	f7ff ff1d 	bl	800279c <RDMSensorsParams::Add(RDMSensor*)>
 8002962:	2060      	movs	r0, #96	; 0x60
 8002964:	f005 fd5b 	bl	800841e <operator new(unsigned int)>
 8002968:	4682      	mov	sl, r0
 800296a:	eb04 0109 	add.w	r1, r4, r9
 800296e:	b2c9      	uxtb	r1, r1
 8002970:	f000 f8a6 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 8002974:	4631      	mov	r1, r6
 8002976:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 800297a:	f000 fa9f 	bl	8002ebc <sensor::INA219::INA219(unsigned char)>
 800297e:	4a44      	ldr	r2, [pc, #272]	; (8002a90 <RDMSensorsParams::Set()+0x2c8>)
 8002980:	4844      	ldr	r0, [pc, #272]	; (8002a94 <RDMSensorsParams::Set()+0x2cc>)
 8002982:	f8ca 2000 	str.w	r2, [sl]
 8002986:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <RDMSensorsParams::Set()+0x2d0>)
 8002988:	4944      	ldr	r1, [pc, #272]	; (8002a9c <RDMSensorsParams::Set()+0x2d4>)
 800298a:	e9ca 0202 	strd	r0, r2, [sl, #8]
 800298e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002992:	f88a 9007 	strb.w	r9, [sl, #7]
 8002996:	f8aa 2010 	strh.w	r2, [sl, #16]
 800299a:	e790      	b.n	80028be <RDMSensorsParams::Set()+0xf6>
 800299c:	204c      	movs	r0, #76	; 0x4c
 800299e:	f005 fd3e 	bl	800841e <operator new(unsigned int)>
 80029a2:	4681      	mov	r9, r0
 80029a4:	4621      	mov	r1, r4
 80029a6:	f000 f88b 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 80029aa:	4631      	mov	r1, r6
 80029ac:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80029b0:	f000 fb1a 	bl	8002fe8 <sensor::MCP9808::MCP9808(unsigned char)>
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <RDMSensorsParams::Set()+0x2d8>)
 80029b6:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <RDMSensorsParams::Set()+0x2dc>)
 80029b8:	f8c9 3000 	str.w	r3, [r9]
 80029bc:	2300      	movs	r3, #0
 80029be:	f889 3007 	strb.w	r3, [r9, #7]
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <RDMSensorsParams::Set()+0x2e0>)
 80029c4:	4939      	ldr	r1, [pc, #228]	; (8002aac <RDMSensorsParams::Set()+0x2e4>)
 80029c6:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80029ca:	2328      	movs	r3, #40	; 0x28
 80029cc:	f8a9 3010 	strh.w	r3, [r9, #16]
 80029d0:	e72e      	b.n	8002830 <RDMSensorsParams::Set()+0x68>
 80029d2:	204c      	movs	r0, #76	; 0x4c
 80029d4:	f005 fd23 	bl	800841e <operator new(unsigned int)>
 80029d8:	4682      	mov	sl, r0
 80029da:	4621      	mov	r1, r4
 80029dc:	f000 f870 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 80029e0:	4631      	mov	r1, r6
 80029e2:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80029e6:	f000 fb55 	bl	8003094 <sensor::SI7021::SI7021(unsigned char)>
 80029ea:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <RDMSensorsParams::Set()+0x2e8>)
 80029ec:	f04f 0900 	mov.w	r9, #0
 80029f0:	f8ca 2000 	str.w	r2, [sl]
 80029f4:	221f      	movs	r2, #31
 80029f6:	f88a 2007 	strb.w	r2, [sl, #7]
 80029fa:	2264      	movs	r2, #100	; 0x64
 80029fc:	4650      	mov	r0, sl
 80029fe:	492d      	ldr	r1, [pc, #180]	; (8002ab4 <RDMSensorsParams::Set()+0x2ec>)
 8002a00:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002a04:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a08:	f000 f86c 	bl	8002ae4 <RDMSensor::SetDescription(char const*)>
 8002a0c:	4651      	mov	r1, sl
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f7ff fec4 	bl	800279c <RDMSensorsParams::Add(RDMSensor*)>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	f43f af12 	beq.w	800283e <RDMSensorsParams::Set()+0x76>
 8002a1a:	204c      	movs	r0, #76	; 0x4c
 8002a1c:	f005 fcff 	bl	800841e <operator new(unsigned int)>
 8002a20:	4682      	mov	sl, r0
 8002a22:	1c61      	adds	r1, r4, #1
 8002a24:	b2c9      	uxtb	r1, r1
 8002a26:	f000 f84b 	bl	8002ac0 <RDMSensor::RDMSensor(unsigned char)>
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002a30:	f000 fb30 	bl	8003094 <sensor::SI7021::SI7021(unsigned char)>
 8002a34:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <RDMSensorsParams::Set()+0x2f0>)
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <RDMSensorsParams::Set()+0x2a8>)
 8002a38:	f8ca 2000 	str.w	r2, [sl]
 8002a3c:	227d      	movs	r2, #125	; 0x7d
 8002a3e:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002a42:	491e      	ldr	r1, [pc, #120]	; (8002abc <RDMSensorsParams::Set()+0x2f4>)
 8002a44:	f88a 9007 	strb.w	r9, [sl, #7]
 8002a48:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a4c:	e737      	b.n	80028be <RDMSensorsParams::Set()+0xf6>
 8002a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a52:	bf00      	nop
 8002a54:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d
 8002a58:	200001f8 	strdcs	r0, [r0], -r8
 8002a5c:	0800a074 	stmdaeq	r0, {r2, r4, r5, r6, sp, pc}
 8002a60:	0800a144 	stmdaeq	r0, {r2, r6, r8, sp, pc}
 8002a64:	0800a0a4 	stmdaeq	r0, {r2, r5, r7, sp, pc}
 8002a68:	0800a166 	stmdaeq	r0, {r1, r2, r5, r6, r8, sp, pc}
 8002a6c:	0800a0bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, sp, pc}
 8002a70:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002a74:	0800a152 	stmdaeq	r0, {r1, r4, r6, r8, sp, pc}
 8002a78:	0800a0d4 	stmdaeq	r0, {r2, r4, r6, r7, sp, pc}
 8002a7c:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002a80:	0800a17e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sp, pc}
 8002a84:	0800a0ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sp, pc}
 8002a88:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002a8c:	0800a178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, pc}
 8002a90:	0800a104 	stmdaeq	r0, {r2, r8, sp, pc}
 8002a94:	83000305 	movwhi	r0, #773	; 0x305
 8002a98:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002a9c:	0800a186 	stmdaeq	r0, {r1, r2, r7, r8, sp, pc}
 8002aa0:	0800a08c 	stmdaeq	r0, {r2, r3, r7, sp, pc}
 8002aa4:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002aa8:	00120064 	andseq	r0, r2, r4, rrx
 8002aac:	0800a1b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sp, pc}
 8002ab0:	0800a11c 	stmdaeq	r0, {r2, r3, r4, r8, sp, pc}
 8002ab4:	0800a1a2 	stmdaeq	r0, {r1, r5, r7, r8, sp, pc}
 8002ab8:	0800a134 	stmdaeq	r0, {r2, r4, r5, r8, sp, pc}
 8002abc:	0800a18e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sp, pc}

08002ac0 <RDMSensor::RDMSensor(unsigned char)>:
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002ac2:	7101      	strb	r1, [r0, #4]
 8002ac4:	6002      	str	r2, [r0, #0]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002acc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ad0:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002ad2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ad6:	7181      	strb	r1, [r0, #6]
 8002ad8:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002adc:	8702      	strh	r2, [r0, #56]	; 0x38
 8002ade:	4770      	bx	lr
 8002ae0:	0800a1d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, pc}

08002ae4 <RDMSensor::SetDescription(char const*)>:
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	f100 0212 	add.w	r2, r0, #18
 8002aec:	5ccc      	ldrb	r4, [r1, r3]
 8002aee:	b124      	cbz	r4, 8002afa <RDMSensor::SetDescription(char const*)+0x16>
 8002af0:	3301      	adds	r3, #1
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	f802 4b01 	strb.w	r4, [r2], #1
 8002af8:	d1f8      	bne.n	8002aec <RDMSensor::SetDescription(char const*)+0x8>
 8002afa:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <RDMSensor::GetValues()>:
 8002b00:	6803      	ldr	r3, [r0, #0]
 8002b02:	b510      	push	{r4, lr}
 8002b04:	4604      	mov	r4, r0
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4798      	blx	r3
 8002b0a:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002b0e:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b10:	4283      	cmp	r3, r0
 8002b12:	bfa8      	it	ge
 8002b14:	4603      	movge	r3, r0
 8002b16:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b18:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	bfb8      	it	lt
 8002b20:	4618      	movlt	r0, r3
 8002b22:	8720      	strh	r0, [r4, #56]	; 0x38
 8002b24:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002b28:	bd10      	pop	{r4, pc}

08002b2a <RDMSensor::SetValues()>:
 8002b2a:	6803      	ldr	r3, [r0, #0]
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4604      	mov	r4, r0
 8002b32:	4798      	blx	r3
 8002b34:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b36:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002b38:	8720      	strh	r0, [r4, #56]	; 0x38
 8002b3a:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <RDMSensor::Record()>:
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	b510      	push	{r4, lr}
 8002b42:	4604      	mov	r4, r0
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4798      	blx	r3
 8002b48:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002b4c:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b4e:	4283      	cmp	r3, r0
 8002b50:	bfa8      	it	ge
 8002b52:	4603      	movge	r3, r0
 8002b54:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b56:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002b5a:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002b5c:	4298      	cmp	r0, r3
 8002b5e:	bfb8      	it	lt
 8002b60:	4618      	movlt	r0, r3
 8002b62:	8720      	strh	r0, [r4, #56]	; 0x38
 8002b64:	bd10      	pop	{r4, pc}

08002b66 <HAL_I2C::Write(char)>:
 8002b66:	b513      	push	{r0, r1, r4, lr}
 8002b68:	4604      	mov	r4, r0
 8002b6a:	7800      	ldrb	r0, [r0, #0]
 8002b6c:	f88d 1007 	strb.w	r1, [sp, #7]
 8002b70:	f006 fcfc 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002b74:	6860      	ldr	r0, [r4, #4]
 8002b76:	f006 fcf1 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	f10d 0007 	add.w	r0, sp, #7
 8002b80:	f006 fcfa 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002b84:	b002      	add	sp, #8
 8002b86:	bd10      	pop	{r4, pc}

08002b88 <sensor::BH170::BH170(unsigned char)>:
 8002b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b8a:	1e0c      	subs	r4, r1, #0
 8002b8c:	bf08      	it	eq
 8002b8e:	2423      	moveq	r4, #35	; 0x23
 8002b90:	2600      	movs	r6, #0
 8002b92:	4f16      	ldr	r7, [pc, #88]	; (8002bec <sensor::BH170::BH170(unsigned char)+0x64>)
 8002b94:	7004      	strb	r4, [r0, #0]
 8002b96:	6047      	str	r7, [r0, #4]
 8002b98:	7206      	strb	r6, [r0, #8]
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f006 fce5 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f006 fcda 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002ba8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002bac:	2b07      	cmp	r3, #7
 8002bae:	d902      	bls.n	8002bb6 <sensor::BH170::BH170(unsigned char)+0x2e>
 8002bb0:	3c50      	subs	r4, #80	; 0x50
 8002bb2:	2c0f      	cmp	r4, #15
 8002bb4:	d814      	bhi.n	8002be0 <sensor::BH170::BH170(unsigned char)+0x58>
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	f10d 0007 	add.w	r0, sp, #7
 8002bbc:	f006 fd42 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002bc0:	fab0 f080 	clz	r0, r0
 8002bc4:	0940      	lsrs	r0, r0, #5
 8002bc6:	7228      	strb	r0, [r5, #8]
 8002bc8:	b138      	cbz	r0, 8002bda <sensor::BH170::BH170(unsigned char)+0x52>
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f7ff ffca 	bl	8002b66 <HAL_I2C::Write(char)>
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f7ff ffc6 	bl	8002b66 <HAL_I2C::Write(char)>
 8002bda:	4628      	mov	r0, r5
 8002bdc:	b003      	add	sp, #12
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be0:	4631      	mov	r1, r6
 8002be2:	4630      	mov	r0, r6
 8002be4:	f006 fcc8 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002be8:	e7ea      	b.n	8002bc0 <sensor::BH170::BH170(unsigned char)+0x38>
 8002bea:	bf00      	nop
 8002bec:	00061a80 	andeq	r1, r6, r0, lsl #21

08002bf0 <sensor::BH170::Get()>:
 8002bf0:	b513      	push	{r0, r1, r4, lr}
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	7800      	ldrb	r0, [r0, #0]
 8002bf8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002bfc:	f006 fcb6 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002c00:	6860      	ldr	r0, [r4, #4]
 8002c02:	f006 fcab 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002c06:	2102      	movs	r1, #2
 8002c08:	a801      	add	r0, sp, #4
 8002c0a:	f006 fd1b 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002c0e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c12:	ba40      	rev16	r0, r0
 8002c14:	b280      	uxth	r0, r0
 8002c16:	f7fe f8f3 	bl	8000e00 <__aeabi_ui2f>
 8002c1a:	4904      	ldr	r1, [pc, #16]	; (8002c2c <sensor::BH170::Get()+0x3c>)
 8002c1c:	f7fe f9fc 	bl	8001018 <__aeabi_fdiv>
 8002c20:	f7fe fb32 	bl	8001288 <__aeabi_f2uiz>
 8002c24:	b280      	uxth	r0, r0
 8002c26:	b002      	add	sp, #8
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	3f99999a 	svccc	0x0099999a

08002c30 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c32:	1e0c      	subs	r4, r1, #0
 8002c34:	bf08      	it	eq
 8002c36:	2440      	moveq	r4, #64	; 0x40
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4f11      	ldr	r7, [pc, #68]	; (8002c80 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002c3c:	7004      	strb	r4, [r0, #0]
 8002c3e:	6047      	str	r7, [r0, #4]
 8002c40:	7206      	strb	r6, [r0, #8]
 8002c42:	4605      	mov	r5, r0
 8002c44:	4620      	mov	r0, r4
 8002c46:	f006 fc91 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f006 fc86 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002c50:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002c54:	2b07      	cmp	r3, #7
 8002c56:	d902      	bls.n	8002c5e <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002c58:	3c50      	subs	r4, #80	; 0x50
 8002c5a:	2c0f      	cmp	r4, #15
 8002c5c:	d80b      	bhi.n	8002c76 <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002c5e:	2101      	movs	r1, #1
 8002c60:	f10d 0007 	add.w	r0, sp, #7
 8002c64:	f006 fcee 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002c68:	fab0 f380 	clz	r3, r0
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	722b      	strb	r3, [r5, #8]
 8002c72:	b003      	add	sp, #12
 8002c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c76:	4631      	mov	r1, r6
 8002c78:	4630      	mov	r0, r6
 8002c7a:	f006 fc7d 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002c7e:	e7f3      	b.n	8002c68 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002c80:	00061a80 	andeq	r1, r6, r0, lsl #21

08002c84 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	7800      	ldrb	r0, [r0, #0]
 8002c8a:	f88d 1004 	strb.w	r1, [sp, #4]
 8002c8e:	f006 fc6d 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002c92:	6860      	ldr	r0, [r4, #4]
 8002c94:	f006 fc62 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002c98:	2101      	movs	r1, #1
 8002c9a:	a801      	add	r0, sp, #4
 8002c9c:	f006 fc6c 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002ca2:	2508      	movs	r5, #8
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	f88d 3006 	strb.w	r3, [sp, #6]
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f242 7010 	movw	r0, #10000	; 0x2710
 8002cb6:	f006 fefd 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8002cba:	7820      	ldrb	r0, [r4, #0]
 8002cbc:	f006 fc56 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002cc0:	6860      	ldr	r0, [r4, #4]
 8002cc2:	f006 fc4b 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	a801      	add	r0, sp, #4
 8002cca:	f006 fcbb 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002cce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d001      	beq.n	8002cde <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 8002cda:	3d01      	subs	r5, #1
 8002cdc:	d1e8      	bne.n	8002cb0 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002cde:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ce2:	ba40      	rev16	r0, r0
 8002ce4:	f020 0003 	bic.w	r0, r0, #3
 8002ce8:	b280      	uxth	r0, r0
 8002cea:	b003      	add	sp, #12
 8002cec:	bd30      	pop	{r4, r5, pc}
 8002cee:	bf00      	nop
 8002cf0:	08009ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, pc}

08002cf4 <sensor::HTU21D::GetTemperature()>:
 8002cf4:	b508      	push	{r3, lr}
 8002cf6:	21f3      	movs	r1, #243	; 0xf3
 8002cf8:	f7ff ffc4 	bl	8002c84 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002cfc:	f7fe f880 	bl	8000e00 <__aeabi_ui2f>
 8002d00:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002d04:	f7fe f8d4 	bl	8000eb0 <__aeabi_fmul>
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <sensor::HTU21D::GetTemperature()+0x24>)
 8002d0a:	f7fe f8d1 	bl	8000eb0 <__aeabi_fmul>
 8002d0e:	4903      	ldr	r1, [pc, #12]	; (8002d1c <sensor::HTU21D::GetTemperature()+0x28>)
 8002d10:	f7fd ffc4 	bl	8000c9c <__aeabi_fsub>
 8002d14:	bd08      	pop	{r3, pc}
 8002d16:	bf00      	nop
 8002d18:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002d1c:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08002d20 <sensor::HTU21D::GetHumidity()>:
 8002d20:	b508      	push	{r3, lr}
 8002d22:	21f5      	movs	r1, #245	; 0xf5
 8002d24:	f7ff ffae 	bl	8002c84 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002d28:	f7fe f86a 	bl	8000e00 <__aeabi_ui2f>
 8002d2c:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002d30:	f7fe f8be 	bl	8000eb0 <__aeabi_fmul>
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <sensor::HTU21D::GetHumidity()+0x24>)
 8002d36:	f7fe f8bb 	bl	8000eb0 <__aeabi_fmul>
 8002d3a:	4903      	ldr	r1, [pc, #12]	; (8002d48 <sensor::HTU21D::GetHumidity()+0x28>)
 8002d3c:	f7fd ffae 	bl	8000c9c <__aeabi_fsub>
 8002d40:	bd08      	pop	{r3, pc}
 8002d42:	bf00      	nop
 8002d44:	42fa0000 	rscsmi	r0, sl, #0
 8002d48:	40c00000 	sbcmi	r0, r0, r0

08002d4c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002d4c:	b513      	push	{r0, r1, r4, lr}
 8002d4e:	4604      	mov	r4, r0
 8002d50:	0a13      	lsrs	r3, r2, #8
 8002d52:	7800      	ldrb	r0, [r0, #0]
 8002d54:	f88d 1004 	strb.w	r1, [sp, #4]
 8002d58:	f88d 3005 	strb.w	r3, [sp, #5]
 8002d5c:	f88d 2006 	strb.w	r2, [sp, #6]
 8002d60:	f006 fc04 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002d64:	6860      	ldr	r0, [r4, #4]
 8002d66:	f006 fbf9 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	a801      	add	r0, sp, #4
 8002d6e:	f006 fc03 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002d72:	b002      	add	sp, #8
 8002d74:	bd10      	pop	{r4, pc}

08002d76 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8002d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d78:	4604      	mov	r4, r0
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	4615      	mov	r5, r2
 8002d7e:	7800      	ldrb	r0, [r0, #0]
 8002d80:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002d84:	f88d 1004 	strb.w	r1, [sp, #4]
 8002d88:	f006 fbf0 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002d8c:	6860      	ldr	r0, [r4, #4]
 8002d8e:	f006 fbe5 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002d92:	2101      	movs	r1, #1
 8002d94:	a801      	add	r0, sp, #4
 8002d96:	f006 fbef 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f006 fe89 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8002da2:	2102      	movs	r1, #2
 8002da4:	a801      	add	r0, sp, #4
 8002da6:	f006 fc4d 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002daa:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002dae:	ba40      	rev16	r0, r0
 8002db0:	b280      	uxth	r0, r0
 8002db2:	b002      	add	sp, #8
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002db8 <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002db8:	880b      	ldrh	r3, [r1, #0]
 8002dba:	b510      	push	{r4, lr}
 8002dbc:	b1d3      	cbz	r3, 8002df4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	d102      	bne.n	8002dca <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8002dc4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002dc8:	6182      	str	r2, [r0, #24]
 8002dca:	884a      	ldrh	r2, [r1, #2]
 8002dcc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002dd0:	d019      	beq.n	8002e06 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8002dd2:	d812      	bhi.n	8002dfa <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8002dd4:	b1da      	cbz	r2, 8002e0e <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8002dd6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002dda:	d016      	beq.n	8002e0a <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	888b      	ldrh	r3, [r1, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	88cb      	ldrh	r3, [r1, #6]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	890b      	ldrh	r3, [r1, #8]
 8002de8:	2100      	movs	r1, #0
 8002dea:	431a      	orrs	r2, r3
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f7ff ffad 	bl	8002d4c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002df2:	bd10      	pop	{r4, pc}
 8002df4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002df8:	e7e6      	b.n	8002dc8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002dfa:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002dfe:	d1ed      	bne.n	8002ddc <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002e00:	4c04      	ldr	r4, [pc, #16]	; (8002e14 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8002e02:	6144      	str	r4, [r0, #20]
 8002e04:	e7ea      	b.n	8002ddc <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002e06:	4c04      	ldr	r4, [pc, #16]	; (8002e18 <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002e08:	e7fb      	b.n	8002e02 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e0a:	4c04      	ldr	r4, [pc, #16]	; (8002e1c <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002e0c:	e7f9      	b.n	8002e02 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e0e:	4c04      	ldr	r4, [pc, #16]	; (8002e20 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002e10:	e7f7      	b.n	8002e02 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e12:	bf00      	nop
 8002e14:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002e18:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002e1c:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002e20:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08002e24 <sensor::INA219::Calibrate(float, float)>:
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	61c1      	str	r1, [r0, #28]
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	460e      	mov	r6, r1
 8002e2e:	4610      	mov	r0, r2
 8002e30:	491d      	ldr	r1, [pc, #116]	; (8002ea8 <sensor::INA219::Calibrate(float, float)+0x84>)
 8002e32:	f7fe f8f1 	bl	8001018 <__aeabi_fdiv>
 8002e36:	491d      	ldr	r1, [pc, #116]	; (8002eac <sensor::INA219::Calibrate(float, float)+0x88>)
 8002e38:	f7fe f83a 	bl	8000eb0 <__aeabi_fmul>
 8002e3c:	f7fe fa24 	bl	8001288 <__aeabi_f2uiz>
 8002e40:	b280      	uxth	r0, r0
 8002e42:	f7fd ffdd 	bl	8000e00 <__aeabi_ui2f>
 8002e46:	4919      	ldr	r1, [pc, #100]	; (8002eac <sensor::INA219::Calibrate(float, float)+0x88>)
 8002e48:	f7fe f8e6 	bl	8001018 <__aeabi_fdiv>
 8002e4c:	4918      	ldr	r1, [pc, #96]	; (8002eb0 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002e4e:	f7fe f8e3 	bl	8001018 <__aeabi_fdiv>
 8002e52:	4680      	mov	r8, r0
 8002e54:	f7fe f9f2 	bl	800123c <__aeabi_f2iz>
 8002e58:	4607      	mov	r7, r0
 8002e5a:	f7fd ffd5 	bl	8000e08 <__aeabi_i2f>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	4601      	mov	r1, r0
 8002e62:	4640      	mov	r0, r8
 8002e64:	f7fe f9b8 	bl	80011d8 <__aeabi_fcmpeq>
 8002e68:	b918      	cbnz	r0, 8002e72 <sensor::INA219::Calibrate(float, float)+0x4e>
 8002e6a:	1c78      	adds	r0, r7, #1
 8002e6c:	f7fd ffcc 	bl	8000e08 <__aeabi_i2f>
 8002e70:	4604      	mov	r4, r0
 8002e72:	4620      	mov	r0, r4
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002e76:	f7fe f81b 	bl	8000eb0 <__aeabi_fmul>
 8002e7a:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <sensor::INA219::Calibrate(float, float)+0x90>)
 8002e7c:	60e8      	str	r0, [r5, #12]
 8002e7e:	4604      	mov	r4, r0
 8002e80:	f7fe f816 	bl	8000eb0 <__aeabi_fmul>
 8002e84:	4631      	mov	r1, r6
 8002e86:	6128      	str	r0, [r5, #16]
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7fe f811 	bl	8000eb0 <__aeabi_fmul>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <sensor::INA219::Calibrate(float, float)+0x94>)
 8002e92:	f7fe f8c1 	bl	8001018 <__aeabi_fdiv>
 8002e96:	f7fe f9f7 	bl	8001288 <__aeabi_f2uiz>
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	b282      	uxth	r2, r0
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f7ff ff54 	bl	8002d4c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ea8:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 8002eac:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002eb0:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8002eb4:	41a00000 	movmi	r0, r0
 8002eb8:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002ebc <sensor::INA219::INA219(unsigned char)>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	1e0c      	subs	r4, r1, #0
 8002ec0:	bf08      	it	eq
 8002ec2:	2440      	moveq	r4, #64	; 0x40
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	4f1a      	ldr	r7, [pc, #104]	; (8002f30 <sensor::INA219::INA219(unsigned char)+0x74>)
 8002ec8:	b085      	sub	sp, #20
 8002eca:	7004      	strb	r4, [r0, #0]
 8002ecc:	6047      	str	r7, [r0, #4]
 8002ece:	7206      	strb	r6, [r0, #8]
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f006 fb4a 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f006 fb3f 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002ede:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002ee2:	2b07      	cmp	r3, #7
 8002ee4:	d902      	bls.n	8002eec <sensor::INA219::INA219(unsigned char)+0x30>
 8002ee6:	3c50      	subs	r4, #80	; 0x50
 8002ee8:	2c0f      	cmp	r4, #15
 8002eea:	d81c      	bhi.n	8002f26 <sensor::INA219::INA219(unsigned char)+0x6a>
 8002eec:	2101      	movs	r1, #1
 8002eee:	a801      	add	r0, sp, #4
 8002ef0:	f006 fba8 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002ef4:	fab0 f080 	clz	r0, r0
 8002ef8:	0940      	lsrs	r0, r0, #5
 8002efa:	7228      	strb	r0, [r5, #8]
 8002efc:	b180      	cbz	r0, 8002f20 <sensor::INA219::INA219(unsigned char)+0x64>
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <sensor::INA219::INA219(unsigned char)+0x78>)
 8002f00:	ab01      	add	r3, sp, #4
 8002f02:	6810      	ldr	r0, [r2, #0]
 8002f04:	6851      	ldr	r1, [r2, #4]
 8002f06:	8912      	ldrh	r2, [r2, #8]
 8002f08:	c303      	stmia	r3!, {r0, r1}
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	a901      	add	r1, sp, #4
 8002f10:	f7ff ff52 	bl	8002db8 <sensor::INA219::Configure(sensor::ina219::Config&)>
 8002f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f18:	4628      	mov	r0, r5
 8002f1a:	4907      	ldr	r1, [pc, #28]	; (8002f38 <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002f1c:	f7ff ff82 	bl	8002e24 <sensor::INA219::Calibrate(float, float)>
 8002f20:	4628      	mov	r0, r5
 8002f22:	b005      	add	sp, #20
 8002f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f26:	4631      	mov	r1, r6
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f006 fb25 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002f2e:	e7e1      	b.n	8002ef4 <sensor::INA219::INA219(unsigned char)+0x38>
 8002f30:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002f34:	08009ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, ip, pc}
 8002f38:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002f3c <sensor::INA219::GetShuntCurrent()>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
 8002f40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f44:	2104      	movs	r1, #4
 8002f46:	f7ff ff16 	bl	8002d76 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002f4a:	f7fd ff5d 	bl	8000e08 <__aeabi_i2f>
 8002f4e:	68e1      	ldr	r1, [r4, #12]
 8002f50:	f7fd ffae 	bl	8000eb0 <__aeabi_fmul>
 8002f54:	bd10      	pop	{r4, pc}

08002f56 <sensor::INA219::GetBusVoltageRaw()>:
 8002f56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	b508      	push	{r3, lr}
 8002f5e:	f7ff ff0a 	bl	8002d76 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002f62:	f340 004f 	sbfx	r0, r0, #1, #16
 8002f66:	f020 0003 	bic.w	r0, r0, #3
 8002f6a:	bd08      	pop	{r3, pc}

08002f6c <sensor::INA219::GetBusVoltage()>:
 8002f6c:	b508      	push	{r3, lr}
 8002f6e:	f7ff fff2 	bl	8002f56 <sensor::INA219::GetBusVoltageRaw()>
 8002f72:	f7fd ff49 	bl	8000e08 <__aeabi_i2f>
 8002f76:	4902      	ldr	r1, [pc, #8]	; (8002f80 <sensor::INA219::GetBusVoltage()+0x14>)
 8002f78:	f7fd ff9a 	bl	8000eb0 <__aeabi_fmul>
 8002f7c:	bd08      	pop	{r3, pc}
 8002f7e:	bf00      	nop
 8002f80:	3a83126f 	bcc	60c7944 <__heap_size+0x60c6944>

08002f84 <sensor::INA219::GetBusPower()>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f8c:	2103      	movs	r1, #3
 8002f8e:	f7ff fef2 	bl	8002d76 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002f92:	f7fd ff39 	bl	8000e08 <__aeabi_i2f>
 8002f96:	6921      	ldr	r1, [r4, #16]
 8002f98:	f7fd ff8a 	bl	8000eb0 <__aeabi_fmul>
 8002f9c:	bd10      	pop	{r4, pc}

08002f9e <HAL_I2C::ReadRegister16(unsigned char)>:
 8002f9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	2501      	movs	r5, #1
 8002fa4:	7800      	ldrb	r0, [r0, #0]
 8002fa6:	f88d 1000 	strb.w	r1, [sp]
 8002faa:	f88d 5001 	strb.w	r5, [sp, #1]
 8002fae:	f006 fadd 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002fb2:	6860      	ldr	r0, [r4, #4]
 8002fb4:	f006 fad2 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4668      	mov	r0, sp
 8002fbc:	f006 fadc 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	7820      	ldrb	r0, [r4, #0]
 8002fc4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002fc8:	f006 fad0 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8002fcc:	6860      	ldr	r0, [r4, #4]
 8002fce:	f006 fac5 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	a801      	add	r0, sp, #4
 8002fd6:	f006 fb35 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8002fda:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002fde:	ba40      	rev16	r0, r0
 8002fe0:	b280      	uxth	r0, r0
 8002fe2:	b003      	add	sp, #12
 8002fe4:	bd30      	pop	{r4, r5, pc}
	...

08002fe8 <sensor::MCP9808::MCP9808(unsigned char)>:
 8002fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fea:	1e0d      	subs	r5, r1, #0
 8002fec:	bf08      	it	eq
 8002fee:	2518      	moveq	r5, #24
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	4f1b      	ldr	r7, [pc, #108]	; (8003060 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 8002ff4:	7005      	strb	r5, [r0, #0]
 8002ff6:	6047      	str	r7, [r0, #4]
 8002ff8:	7206      	strb	r6, [r0, #8]
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f006 fab5 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8003002:	4638      	mov	r0, r7
 8003004:	f006 faaa 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8003008:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800300c:	2b07      	cmp	r3, #7
 800300e:	d902      	bls.n	8003016 <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8003010:	3d50      	subs	r5, #80	; 0x50
 8003012:	2d0f      	cmp	r5, #15
 8003014:	d81f      	bhi.n	8003056 <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 8003016:	2101      	movs	r1, #1
 8003018:	f10d 0007 	add.w	r0, sp, #7
 800301c:	f006 fb12 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8003020:	fab0 f080 	clz	r0, r0
 8003024:	0940      	lsrs	r0, r0, #5
 8003026:	7220      	strb	r0, [r4, #8]
 8003028:	b190      	cbz	r0, 8003050 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800302a:	2106      	movs	r1, #6
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff ffb6 	bl	8002f9e <HAL_I2C::ReadRegister16(unsigned char)>
 8003032:	2854      	cmp	r0, #84	; 0x54
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	7223      	strb	r3, [r4, #8]
 800303c:	d108      	bne.n	8003050 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800303e:	2107      	movs	r1, #7
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ffac 	bl	8002f9e <HAL_I2C::ReadRegister16(unsigned char)>
 8003046:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800304a:	4258      	negs	r0, r3
 800304c:	4158      	adcs	r0, r3
 800304e:	7220      	strb	r0, [r4, #8]
 8003050:	4620      	mov	r0, r4
 8003052:	b003      	add	sp, #12
 8003054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003056:	4631      	mov	r1, r6
 8003058:	4630      	mov	r0, r6
 800305a:	f006 fa8d 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 800305e:	e7df      	b.n	8003020 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8003060:	00061a80 	andeq	r1, r6, r0, lsl #21

08003064 <sensor::MCP9808::Get()>:
 8003064:	b510      	push	{r4, lr}
 8003066:	2105      	movs	r1, #5
 8003068:	f7ff ff99 	bl	8002f9e <HAL_I2C::ReadRegister16(unsigned char)>
 800306c:	4604      	mov	r4, r0
 800306e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003072:	f7fd fec9 	bl	8000e08 <__aeabi_i2f>
 8003076:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800307a:	f7fd ff19 	bl	8000eb0 <__aeabi_fmul>
 800307e:	04e2      	lsls	r2, r4, #19
 8003080:	4603      	mov	r3, r0
 8003082:	d504      	bpl.n	800308e <sensor::MCP9808::Get()+0x2a>
 8003084:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003088:	f7fd fe08 	bl	8000c9c <__aeabi_fsub>
 800308c:	4603      	mov	r3, r0
 800308e:	4618      	mov	r0, r3
 8003090:	bd10      	pop	{r4, pc}
	...

08003094 <sensor::SI7021::SI7021(unsigned char)>:
 8003094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003096:	1e0c      	subs	r4, r1, #0
 8003098:	bf08      	it	eq
 800309a:	2440      	moveq	r4, #64	; 0x40
 800309c:	2600      	movs	r6, #0
 800309e:	4f11      	ldr	r7, [pc, #68]	; (80030e4 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80030a0:	7004      	strb	r4, [r0, #0]
 80030a2:	6047      	str	r7, [r0, #4]
 80030a4:	7206      	strb	r6, [r0, #8]
 80030a6:	4605      	mov	r5, r0
 80030a8:	4620      	mov	r0, r4
 80030aa:	f006 fa5f 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 80030ae:	4638      	mov	r0, r7
 80030b0:	f006 fa54 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 80030b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d902      	bls.n	80030c2 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80030bc:	3c50      	subs	r4, #80	; 0x50
 80030be:	2c0f      	cmp	r4, #15
 80030c0:	d80b      	bhi.n	80030da <sensor::SI7021::SI7021(unsigned char)+0x46>
 80030c2:	2101      	movs	r1, #1
 80030c4:	f10d 0007 	add.w	r0, sp, #7
 80030c8:	f006 fabc 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 80030cc:	fab0 f380 	clz	r3, r0
 80030d0:	4628      	mov	r0, r5
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	722b      	strb	r3, [r5, #8]
 80030d6:	b003      	add	sp, #12
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	4631      	mov	r1, r6
 80030dc:	4630      	mov	r0, r6
 80030de:	f006 fa4b 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 80030e2:	e7f3      	b.n	80030cc <sensor::SI7021::SI7021(unsigned char)+0x38>
 80030e4:	00061a80 	andeq	r1, r6, r0, lsl #21

080030e8 <sensor::SI7021::ReadRaw(unsigned char)>:
 80030e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030ea:	4604      	mov	r4, r0
 80030ec:	7800      	ldrb	r0, [r0, #0]
 80030ee:	f88d 1004 	strb.w	r1, [sp, #4]
 80030f2:	f006 fa3b 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 80030f6:	6860      	ldr	r0, [r4, #4]
 80030f8:	f006 fa30 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 80030fc:	2101      	movs	r1, #1
 80030fe:	a801      	add	r0, sp, #4
 8003100:	f006 fa3a 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8003104:	4b13      	ldr	r3, [pc, #76]	; (8003154 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 8003106:	2508      	movs	r5, #8
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800310e:	2300      	movs	r3, #0
 8003110:	f88d 3006 	strb.w	r3, [sp, #6]
 8003114:	2100      	movs	r1, #0
 8003116:	f242 7010 	movw	r0, #10000	; 0x2710
 800311a:	f006 fccb 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 800311e:	7820      	ldrb	r0, [r4, #0]
 8003120:	f006 fa24 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8003124:	6860      	ldr	r0, [r4, #4]
 8003126:	f006 fa19 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 800312a:	2103      	movs	r1, #3
 800312c:	a801      	add	r0, sp, #4
 800312e:	f006 fa89 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8003132:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d001      	beq.n	8003142 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 800313e:	3d01      	subs	r5, #1
 8003140:	d1e8      	bne.n	8003114 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 8003142:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003146:	ba40      	rev16	r0, r0
 8003148:	f020 0003 	bic.w	r0, r0, #3
 800314c:	b280      	uxth	r0, r0
 800314e:	b003      	add	sp, #12
 8003150:	bd30      	pop	{r4, r5, pc}
 8003152:	bf00      	nop
 8003154:	08009eda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, sl, fp, ip, pc}

08003158 <sensor::SI7021::GetTemperature()>:
 8003158:	b508      	push	{r3, lr}
 800315a:	21f3      	movs	r1, #243	; 0xf3
 800315c:	f7ff ffc4 	bl	80030e8 <sensor::SI7021::ReadRaw(unsigned char)>
 8003160:	f7fd fe4e 	bl	8000e00 <__aeabi_ui2f>
 8003164:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8003168:	f7fd fea2 	bl	8000eb0 <__aeabi_fmul>
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <sensor::SI7021::GetTemperature()+0x24>)
 800316e:	f7fd fe9f 	bl	8000eb0 <__aeabi_fmul>
 8003172:	4903      	ldr	r1, [pc, #12]	; (8003180 <sensor::SI7021::GetTemperature()+0x28>)
 8003174:	f7fd fd92 	bl	8000c9c <__aeabi_fsub>
 8003178:	bd08      	pop	{r3, pc}
 800317a:	bf00      	nop
 800317c:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8003180:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08003184 <sensor::SI7021::GetHumidity()>:
 8003184:	b508      	push	{r3, lr}
 8003186:	21f5      	movs	r1, #245	; 0xf5
 8003188:	f7ff ffae 	bl	80030e8 <sensor::SI7021::ReadRaw(unsigned char)>
 800318c:	f7fd fe38 	bl	8000e00 <__aeabi_ui2f>
 8003190:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8003194:	f7fd fe8c 	bl	8000eb0 <__aeabi_fmul>
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <sensor::SI7021::GetHumidity()+0x24>)
 800319a:	f7fd fe89 	bl	8000eb0 <__aeabi_fmul>
 800319e:	4903      	ldr	r1, [pc, #12]	; (80031ac <sensor::SI7021::GetHumidity()+0x28>)
 80031a0:	f7fd fd7c 	bl	8000c9c <__aeabi_fsub>
 80031a4:	bd08      	pop	{r3, pc}
 80031a6:	bf00      	nop
 80031a8:	42fa0000 	rscsmi	r0, sl, #0
 80031ac:	40c00000 	sbcmi	r0, r0, r0

080031b0 <RDMSubDevices::RDMSubDevices()>:
 80031b0:	2200      	movs	r2, #0
 80031b2:	6002      	str	r2, [r0, #0]
 80031b4:	8082      	strh	r2, [r0, #4]
 80031b6:	4a01      	ldr	r2, [pc, #4]	; (80031bc <RDMSubDevices::RDMSubDevices()+0xc>)
 80031b8:	6010      	str	r0, [r2, #0]
 80031ba:	4770      	bx	lr
 80031bc:	200001fc 	strdcs	r0, [r0], -ip

080031c0 <RDMSubDevices::~RDMSubDevices()>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	2500      	movs	r5, #0
 80031c4:	4604      	mov	r4, r0
 80031c6:	462f      	mov	r7, r5
 80031c8:	88a3      	ldrh	r3, [r4, #4]
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	d90a      	bls.n	80031e6 <RDMSubDevices::~RDMSubDevices()+0x26>
 80031d0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80031d4:	00ae      	lsls	r6, r5, #2
 80031d6:	b110      	cbz	r0, 80031de <RDMSubDevices::~RDMSubDevices()+0x1e>
 80031d8:	6803      	ldr	r3, [r0, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4798      	blx	r3
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	3501      	adds	r5, #1
 80031e2:	519f      	str	r7, [r3, r6]
 80031e4:	e7f0      	b.n	80031c8 <RDMSubDevices::~RDMSubDevices()+0x8>
 80031e6:	b108      	cbz	r0, 80031ec <RDMSubDevices::~RDMSubDevices()+0x2c>
 80031e8:	f005 f917 	bl	800841a <operator delete[](void*)>
 80031ec:	4620      	mov	r0, r4
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031f0 <RDMSubDevices::GetInfo(unsigned short)>:
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80031f6:	3901      	subs	r1, #1
 80031f8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80031fc:	3010      	adds	r0, #16
 80031fe:	4770      	bx	lr

08003200 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003200:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003204:	6800      	ldr	r0, [r0, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	4611      	mov	r1, r2
 800320a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800320e:	f000 b8c1 	b.w	8003394 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08003212 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8003212:	b410      	push	{r4}
 8003214:	460c      	mov	r4, r1
 8003216:	6800      	ldr	r0, [r0, #0]
 8003218:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800321c:	3c01      	subs	r4, #1
 800321e:	4611      	mov	r1, r2
 8003220:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003224:	461a      	mov	r2, r3
 8003226:	bc10      	pop	{r4}
 8003228:	f000 b8c9 	b.w	80033be <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800322c <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 800322c:	6803      	ldr	r3, [r0, #0]
 800322e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003232:	3901      	subs	r1, #1
 8003234:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003238:	8a58      	ldrh	r0, [r3, #18]
 800323a:	4770      	bx	lr

0800323c <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 800323c:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003240:	6800      	ldr	r0, [r0, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	4611      	mov	r1, r2
 8003246:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800324a:	f000 b897 	b.w	800337c <RDMSubDevice::SetDmxStartAddress(unsigned short)>

0800324e <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 800324e:	6803      	ldr	r3, [r0, #0]
 8003250:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003254:	3901      	subs	r1, #1
 8003256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800325a:	8a18      	ldrh	r0, [r3, #16]
 800325c:	4770      	bx	lr

0800325e <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003264:	3901      	subs	r1, #1
 8003266:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800326a:	7d18      	ldrb	r0, [r3, #20]
 800326c:	4770      	bx	lr

0800326e <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 800326e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003272:	6800      	ldr	r0, [r0, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	4611      	mov	r1, r2
 8003278:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800327c:	f000 b8ae 	b.w	80033dc <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

08003280 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 8003280:	6803      	ldr	r3, [r0, #0]
 8003282:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003286:	3901      	subs	r1, #1
 8003288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800328c:	7d58      	ldrb	r0, [r3, #21]
 800328e:	4770      	bx	lr

08003290 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 8003290:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003294:	6800      	ldr	r0, [r0, #0]
 8003296:	3b01      	subs	r3, #1
 8003298:	4611      	mov	r1, r2
 800329a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800329e:	f000 b872 	b.w	8003386 <RDMSubDevice::GetPersonality(unsigned char)>

080032a2 <RDMSubDevices::Start()>:
 80032a2:	b538      	push	{r3, r4, r5, lr}
 80032a4:	4605      	mov	r5, r0
 80032a6:	2400      	movs	r4, #0
 80032a8:	88ab      	ldrh	r3, [r5, #4]
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	d908      	bls.n	80032c0 <RDMSubDevices::Start()+0x1e>
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032b4:	b110      	cbz	r0, 80032bc <RDMSubDevices::Start()+0x1a>
 80032b6:	6803      	ldr	r3, [r0, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	4798      	blx	r3
 80032bc:	3401      	adds	r4, #1
 80032be:	e7f3      	b.n	80032a8 <RDMSubDevices::Start()+0x6>
 80032c0:	bd38      	pop	{r3, r4, r5, pc}

080032c2 <RDMSubDevices::Stop()>:
 80032c2:	b538      	push	{r3, r4, r5, lr}
 80032c4:	4605      	mov	r5, r0
 80032c6:	2400      	movs	r4, #0
 80032c8:	88ab      	ldrh	r3, [r5, #4]
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d908      	bls.n	80032e0 <RDMSubDevices::Stop()+0x1e>
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032d4:	b110      	cbz	r0, 80032dc <RDMSubDevices::Stop()+0x1a>
 80032d6:	6803      	ldr	r3, [r0, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	4798      	blx	r3
 80032dc:	3401      	adds	r4, #1
 80032de:	e7f3      	b.n	80032c8 <RDMSubDevices::Stop()+0x6>
 80032e0:	bd38      	pop	{r3, r4, r5, pc}

080032e2 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 80032e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e4:	4605      	mov	r5, r0
 80032e6:	460f      	mov	r7, r1
 80032e8:	4616      	mov	r6, r2
 80032ea:	2400      	movs	r4, #0
 80032ec:	88ab      	ldrh	r3, [r5, #4]
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	d911      	bls.n	8003316 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x34>
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032f8:	b158      	cbz	r0, 8003312 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x30>
 80032fa:	8a43      	ldrh	r3, [r0, #18]
 80032fc:	8a02      	ldrh	r2, [r0, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	42b3      	cmp	r3, r6
 8003306:	d804      	bhi.n	8003312 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x30>
 8003308:	6803      	ldr	r3, [r0, #0]
 800330a:	4632      	mov	r2, r6
 800330c:	4639      	mov	r1, r7
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4798      	blx	r3
 8003312:	3401      	adds	r4, #1
 8003314:	e7ea      	b.n	80032ec <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>
 8003316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003318 <RDMSubDevices::GetFactoryDefaults()>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	2400      	movs	r4, #0
 800331e:	88ab      	ldrh	r3, [r5, #4]
 8003320:	42a3      	cmp	r3, r4
 8003322:	d90a      	bls.n	800333a <RDMSubDevices::GetFactoryDefaults()+0x22>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800332a:	b908      	cbnz	r0, 8003330 <RDMSubDevices::GetFactoryDefaults()+0x18>
 800332c:	3401      	adds	r4, #1
 800332e:	e7f6      	b.n	800331e <RDMSubDevices::GetFactoryDefaults()+0x6>
 8003330:	f000 f87c 	bl	800342c <RDMSubDevice::GetFactoryDefaults()>
 8003334:	2800      	cmp	r0, #0
 8003336:	d1f9      	bne.n	800332c <RDMSubDevices::GetFactoryDefaults()+0x14>
 8003338:	bd38      	pop	{r3, r4, r5, pc}
 800333a:	2001      	movs	r0, #1
 800333c:	e7fc      	b.n	8003338 <RDMSubDevices::GetFactoryDefaults()+0x20>

0800333e <RDMSubDevices::SetFactoryDefaults()>:
 800333e:	b538      	push	{r3, r4, r5, lr}
 8003340:	4605      	mov	r5, r0
 8003342:	2400      	movs	r4, #0
 8003344:	88ab      	ldrh	r3, [r5, #4]
 8003346:	42a3      	cmp	r3, r4
 8003348:	d907      	bls.n	800335a <RDMSubDevices::SetFactoryDefaults()+0x1c>
 800334a:	682b      	ldr	r3, [r5, #0]
 800334c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003350:	b108      	cbz	r0, 8003356 <RDMSubDevices::SetFactoryDefaults()+0x18>
 8003352:	f000 f845 	bl	80033e0 <RDMSubDevice::SetFactoryDefaults()>
 8003356:	3401      	adds	r4, #1
 8003358:	e7f4      	b.n	8003344 <RDMSubDevices::SetFactoryDefaults()+0x6>
 800335a:	bd38      	pop	{r3, r4, r5, pc}

0800335c <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 800335c:	6001      	str	r1, [r0, #0]
 800335e:	4770      	bx	lr

08003360 <RDMSubDevicesParams::Load()>:
 8003360:	b508      	push	{r3, lr}
 8003362:	2300      	movs	r3, #0
 8003364:	4601      	mov	r1, r0
 8003366:	6043      	str	r3, [r0, #4]
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	b120      	cbz	r0, 8003376 <RDMSubDevicesParams::Load()+0x16>
 800336c:	6803      	ldr	r3, [r0, #0]
 800336e:	3104      	adds	r1, #4
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4798      	blx	r3
 8003374:	2001      	movs	r0, #1
 8003376:	bd08      	pop	{r3, pc}

08003378 <RDMSubDevicesParams::Dump()>:
 8003378:	4770      	bx	lr

0800337a <RDMSubDevicesParams::Set()>:
 800337a:	4770      	bx	lr

0800337c <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 800337c:	6803      	ldr	r3, [r0, #0]
 800337e:	8241      	strh	r1, [r0, #18]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2100      	movs	r1, #0
 8003384:	4718      	bx	r3

08003386 <RDMSubDevice::GetPersonality(unsigned char)>:
 8003386:	6843      	ldr	r3, [r0, #4]
 8003388:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800338c:	3901      	subs	r1, #1
 800338e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003392:	4770      	bx	lr

08003394 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 8003394:	f100 0316 	add.w	r3, r0, #22
 8003398:	600b      	str	r3, [r1, #0]
 800339a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800339e:	710b      	strb	r3, [r1, #4]
 80033a0:	4770      	bx	lr

080033a2 <RDMSubDevice::SetLabel(char const*)>:
 80033a2:	2300      	movs	r3, #0
 80033a4:	b510      	push	{r4, lr}
 80033a6:	f100 0216 	add.w	r2, r0, #22
 80033aa:	5ccc      	ldrb	r4, [r1, r3]
 80033ac:	b124      	cbz	r4, 80033b8 <RDMSubDevice::SetLabel(char const*)+0x16>
 80033ae:	3301      	adds	r3, #1
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f802 4b01 	strb.w	r4, [r2], #1
 80033b6:	d1f8      	bne.n	80033aa <RDMSubDevice::SetLabel(char const*)+0x8>
 80033b8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033bc:	bd10      	pop	{r4, pc}

080033be <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 80033be:	2300      	movs	r3, #0
 80033c0:	b530      	push	{r4, r5, lr}
 80033c2:	f100 0416 	add.w	r4, r0, #22
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d905      	bls.n	80033d6 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 80033ca:	5ccd      	ldrb	r5, [r1, r3]
 80033cc:	3301      	adds	r3, #1
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f804 5b01 	strb.w	r5, [r4], #1
 80033d4:	d1f7      	bne.n	80033c6 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 80033d6:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033da:	bd30      	pop	{r4, r5, pc}

080033dc <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 80033dc:	7501      	strb	r1, [r0, #20]
 80033de:	4770      	bx	lr

080033e0 <RDMSubDevice::SetFactoryDefaults()>:
 80033e0:	7a03      	ldrb	r3, [r0, #8]
 80033e2:	b510      	push	{r4, lr}
 80033e4:	b94b      	cbnz	r3, 80033fa <RDMSubDevice::SetFactoryDefaults()+0x1a>
 80033e6:	f100 0138 	add.w	r1, r0, #56	; 0x38
 80033ea:	f7ff ffda 	bl	80033a2 <RDMSubDevice::SetLabel(char const*)>
 80033ee:	8983      	ldrh	r3, [r0, #12]
 80033f0:	8243      	strh	r3, [r0, #18]
 80033f2:	7b83      	ldrb	r3, [r0, #14]
 80033f4:	7503      	strb	r3, [r0, #20]
 80033f6:	2301      	movs	r3, #1
 80033f8:	7203      	strb	r3, [r0, #8]
 80033fa:	bd10      	pop	{r4, pc}

080033fc <RDMSubDevice::CalculateChecksum()>:
 80033fc:	4602      	mov	r2, r0
 80033fe:	b510      	push	{r4, lr}
 8003400:	8a43      	ldrh	r3, [r0, #18]
 8003402:	7d00      	ldrb	r0, [r0, #20]
 8003404:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 8003408:	4403      	add	r3, r0
 800340a:	b298      	uxth	r0, r3
 800340c:	f102 0316 	add.w	r3, r2, #22
 8003410:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003414:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003418:	32ea      	adds	r2, #234	; 0xea
 800341a:	18d1      	adds	r1, r2, r3
 800341c:	428c      	cmp	r4, r1
 800341e:	d904      	bls.n	800342a <RDMSubDevice::CalculateChecksum()+0x2e>
 8003420:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003424:	4408      	add	r0, r1
 8003426:	b280      	uxth	r0, r0
 8003428:	e7f7      	b.n	800341a <RDMSubDevice::CalculateChecksum()+0x1e>
 800342a:	bd10      	pop	{r4, pc}

0800342c <RDMSubDevice::GetFactoryDefaults()>:
 800342c:	7a03      	ldrb	r3, [r0, #8]
 800342e:	b510      	push	{r4, lr}
 8003430:	4604      	mov	r4, r0
 8003432:	b133      	cbz	r3, 8003442 <RDMSubDevice::GetFactoryDefaults()+0x16>
 8003434:	f7ff ffe2 	bl	80033fc <RDMSubDevice::CalculateChecksum()>
 8003438:	8963      	ldrh	r3, [r4, #10]
 800343a:	4283      	cmp	r3, r0
 800343c:	bf1c      	itt	ne
 800343e:	2300      	movne	r3, #0
 8003440:	7223      	strbne	r3, [r4, #8]
 8003442:	7a20      	ldrb	r0, [r4, #8]
 8003444:	bd10      	pop	{r4, pc}
	...

08003448 <Rdm::Receive(unsigned int)>:
 8003448:	4b02      	ldr	r3, [pc, #8]	; (8003454 <Rdm::Receive(unsigned int)+0xc>)
 800344a:	4601      	mov	r1, r0
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	f000 bc19 	b.w	8003c84 <Dmx::RdmReceive(unsigned int)>
 8003452:	bf00      	nop
 8003454:	20000638 	andcs	r0, r0, r8, lsr r6

08003458 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003458:	2300      	movs	r3, #0
 800345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345e:	4604      	mov	r4, r0
 8003460:	460e      	mov	r6, r1
 8003462:	4617      	mov	r7, r2
 8003464:	4d0b      	ldr	r5, [pc, #44]	; (8003494 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 8003466:	461a      	mov	r2, r3
 8003468:	4601      	mov	r1, r0
 800346a:	6828      	ldr	r0, [r5, #0]
 800346c:	f000 fa9c 	bl	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003470:	463b      	mov	r3, r7
 8003472:	4632      	mov	r2, r6
 8003474:	4621      	mov	r1, r4
 8003476:	6828      	ldr	r0, [r5, #0]
 8003478:	f000 fbbe 	bl	8003bf8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800347c:	2100      	movs	r1, #0
 800347e:	2004      	movs	r0, #4
 8003480:	f006 fb18 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003484:	2301      	movs	r3, #1
 8003486:	4621      	mov	r1, r4
 8003488:	6828      	ldr	r0, [r5, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003490:	f000 ba8a 	b.w	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003494:	20000638 	andcs	r0, r0, r8, lsr r6

08003498 <USART2_IRQHandler>:
 8003498:	b510      	push	{r4, lr}
 800349a:	f3bf 8f5f 	dmb	sy
 800349e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034a2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80034a6:	f013 0f02 	tst.w	r3, #2
 80034aa:	4b74      	ldr	r3, [pc, #464]	; (800367c <USART2_IRQHandler+0x1e4>)
 80034ac:	d00e      	beq.n	80034cc <USART2_IRQHandler+0x34>
 80034ae:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 80034b2:	f021 0102 	bic.w	r1, r1, #2
 80034b6:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
 80034ba:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034c4:	2202      	movs	r2, #2
 80034c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80034ca:	bd10      	pop	{r4, pc}
 80034cc:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80034d0:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	290a      	cmp	r1, #10
 80034da:	f200 80ca 	bhi.w	8003672 <USART2_IRQHandler+0x1da>
 80034de:	e8df f001 	tbb	[pc, r1]
 80034e2:	c810c806 	ldmdagt	r0, {r1, r2, fp, lr, pc}
 80034e6:	6d5f482c 	ldclvs	8, cr4, [pc, #-176]	; 800343c <RDMSubDevice::GetFactoryDefaults()+0x10>
 80034ea:	00ac9886 	adceq	r9, ip, r6, lsl #17
 80034ee:	2108      	movs	r1, #8
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 80034f8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 80034fc:	f3bf 8f5f 	dmb	sy
 8003500:	e7e3      	b.n	80034ca <USART2_IRQHandler+0x32>
 8003502:	b11a      	cbz	r2, 800350c <USART2_IRQHandler+0x74>
 8003504:	2acc      	cmp	r2, #204	; 0xcc
 8003506:	d012      	beq.n	800352e <USART2_IRQHandler+0x96>
 8003508:	2200      	movs	r2, #0
 800350a:	e00d      	b.n	8003528 <USART2_IRQHandler+0x90>
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	2201      	movs	r2, #1
 8003510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003514:	4a5a      	ldr	r2, [pc, #360]	; (8003680 <USART2_IRQHandler+0x1e8>)
 8003516:	6851      	ldr	r1, [r2, #4]
 8003518:	3101      	adds	r1, #1
 800351a:	6051      	str	r1, [r2, #4]
 800351c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003520:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 8003524:	60d1      	str	r1, [r2, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800352c:	e7e6      	b.n	80034fc <USART2_IRQHandler+0x64>
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <USART2_IRQHandler+0x1ec>)
 8003532:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003536:	2205      	movs	r2, #5
 8003538:	e7f6      	b.n	8003528 <USART2_IRQHandler+0x90>
 800353a:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800353e:	b288      	uxth	r0, r1
 8003540:	541a      	strb	r2, [r3, r0]
 8003542:	1c4a      	adds	r2, r1, #1
 8003544:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003548:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800354c:	d904      	bls.n	8003558 <USART2_IRQHandler+0xc0>
 800354e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003552:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003556:	e7d7      	b.n	8003508 <USART2_IRQHandler+0x70>
 8003558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800355c:	4848      	ldr	r0, [pc, #288]	; (8003680 <USART2_IRQHandler+0x1e8>)
 800355e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 8003562:	68c3      	ldr	r3, [r0, #12]
 8003564:	60c1      	str	r1, [r0, #12]
 8003566:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 800356a:	3304      	adds	r3, #4
 800356c:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 8003570:	e7c4      	b.n	80034fc <USART2_IRQHandler+0x64>
 8003572:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 8003576:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800357a:	541a      	strb	r2, [r3, r0]
 800357c:	1c41      	adds	r1, r0, #1
 800357e:	3817      	subs	r0, #23
 8003580:	b289      	uxth	r1, r1
 8003582:	4422      	add	r2, r4
 8003584:	28e7      	cmp	r0, #231	; 0xe7
 8003586:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800358a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800358e:	d804      	bhi.n	800359a <USART2_IRQHandler+0x102>
 8003590:	789a      	ldrb	r2, [r3, #2]
 8003592:	428a      	cmp	r2, r1
 8003594:	d101      	bne.n	800359a <USART2_IRQHandler+0x102>
 8003596:	2206      	movs	r2, #6
 8003598:	e7c6      	b.n	8003528 <USART2_IRQHandler+0x90>
 800359a:	29ff      	cmp	r1, #255	; 0xff
 800359c:	d9ae      	bls.n	80034fc <USART2_IRQHandler+0x64>
 800359e:	e7b3      	b.n	8003508 <USART2_IRQHandler+0x70>
 80035a0:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80035a4:	545a      	strb	r2, [r3, r1]
 80035a6:	3101      	adds	r1, #1
 80035a8:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80035ac:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80035b0:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 80035b4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80035b8:	2207      	movs	r2, #7
 80035ba:	e7b5      	b.n	8003528 <USART2_IRQHandler+0x90>
 80035bc:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80035c0:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80035c4:	545a      	strb	r2, [r3, r1]
 80035c6:	1a82      	subs	r2, r0, r2
 80035c8:	b292      	uxth	r2, r2
 80035ca:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80035ce:	b912      	cbnz	r2, 80035d6 <USART2_IRQHandler+0x13e>
 80035d0:	785a      	ldrb	r2, [r3, #1]
 80035d2:	2a01      	cmp	r2, #1
 80035d4:	d001      	beq.n	80035da <USART2_IRQHandler+0x142>
 80035d6:	2200      	movs	r2, #0
 80035d8:	e7bb      	b.n	8003552 <USART2_IRQHandler+0xba>
 80035da:	3101      	adds	r1, #1
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <USART2_IRQHandler+0x1f0>)
 80035de:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80035e2:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80035e6:	6851      	ldr	r1, [r2, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <USART2_IRQHandler+0x1f4>)
 80035ea:	6011      	str	r1, [r2, #0]
 80035ec:	e78c      	b.n	8003508 <USART2_IRQHandler+0x70>
 80035ee:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80035f2:	2aaa      	cmp	r2, #170	; 0xaa
 80035f4:	545a      	strb	r2, [r3, r1]
 80035f6:	f101 0101 	add.w	r1, r1, #1
 80035fa:	b289      	uxth	r1, r1
 80035fc:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003600:	d002      	beq.n	8003608 <USART2_IRQHandler+0x170>
 8003602:	2909      	cmp	r1, #9
 8003604:	f47f af7a 	bne.w	80034fc <USART2_IRQHandler+0x64>
 8003608:	2200      	movs	r2, #0
 800360a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800360e:	2209      	movs	r2, #9
 8003610:	e78a      	b.n	8003528 <USART2_IRQHandler+0x90>
 8003612:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8003616:	545a      	strb	r2, [r3, r1]
 8003618:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800361c:	3101      	adds	r1, #1
 800361e:	3201      	adds	r2, #1
 8003620:	b292      	uxth	r2, r2
 8003622:	2a0c      	cmp	r2, #12
 8003624:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003628:	d002      	beq.n	8003630 <USART2_IRQHandler+0x198>
 800362a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800362e:	e765      	b.n	80034fc <USART2_IRQHandler+0x64>
 8003630:	2200      	movs	r2, #0
 8003632:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 8003636:	220a      	movs	r2, #10
 8003638:	e776      	b.n	8003528 <USART2_IRQHandler+0x90>
 800363a:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800363e:	545a      	strb	r2, [r3, r1]
 8003640:	1c4a      	adds	r2, r1, #1
 8003642:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8003646:	b292      	uxth	r2, r2
 8003648:	3101      	adds	r1, #1
 800364a:	b289      	uxth	r1, r1
 800364c:	2904      	cmp	r1, #4
 800364e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003652:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 8003656:	f47f af51 	bne.w	80034fc <USART2_IRQHandler+0x64>
 800365a:	2100      	movs	r1, #0
 800365c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003660:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 8003664:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <USART2_IRQHandler+0x1f0>)
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	4b07      	ldr	r3, [pc, #28]	; (800368c <USART2_IRQHandler+0x1f4>)
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e744      	b.n	80034fc <USART2_IRQHandler+0x64>
 8003672:	2200      	movs	r2, #0
 8003674:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003678:	e756      	b.n	8003528 <USART2_IRQHandler+0x90>
 800367a:	bf00      	nop
 800367c:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003680:	20000628 	andcs	r0, r0, r8, lsr #12
 8003684:	00cc0001 	sbceq	r0, ip, r1
 8003688:	e0001000 	and	r1, r0, r0
 800368c:	2000063c 	andcs	r0, r0, ip, lsr r6

08003690 <TIMER1_IRQHandler>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	f3bf 8f5f 	dmb	sy
 8003696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800369a:	691c      	ldr	r4, [r3, #16]
 800369c:	4e1f      	ldr	r6, [pc, #124]	; (800371c <TIMER1_IRQHandler+0x8c>)
 800369e:	07a7      	lsls	r7, r4, #30
 80036a0:	8835      	ldrh	r5, [r6, #0]
 80036a2:	d518      	bpl.n	80036d6 <TIMER1_IRQHandler+0x46>
 80036a4:	4f1e      	ldr	r7, [pc, #120]	; (8003720 <TIMER1_IRQHandler+0x90>)
 80036a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036aa:	2203      	movs	r2, #3
 80036ac:	2110      	movs	r1, #16
 80036ae:	4638      	mov	r0, r7
 80036b0:	f005 fabc 	bl	8008c2c <gpio_init>
 80036b4:	07ed      	lsls	r5, r5, #31
 80036b6:	d506      	bpl.n	80036c6 <TIMER1_IRQHandler+0x36>
 80036b8:	8833      	ldrh	r3, [r6, #0]
 80036ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036be:	8033      	strh	r3, [r6, #0]
 80036c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4621      	mov	r1, r4
 80036c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80036cc:	f005 fda7 	bl	800921e <timer_interrupt_flag_clear>
 80036d0:	f3bf 8f5f 	dmb	sy
 80036d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d6:	0760      	lsls	r0, r4, #29
 80036d8:	d509      	bpl.n	80036ee <TIMER1_IRQHandler+0x5e>
 80036da:	05e9      	lsls	r1, r5, #23
 80036dc:	d5f3      	bpl.n	80036c6 <TIMER1_IRQHandler+0x36>
 80036de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e2:	2203      	movs	r2, #3
 80036e4:	2118      	movs	r1, #24
 80036e6:	480e      	ldr	r0, [pc, #56]	; (8003720 <TIMER1_IRQHandler+0x90>)
 80036e8:	f005 faa0 	bl	8008c2c <gpio_init>
 80036ec:	e7eb      	b.n	80036c6 <TIMER1_IRQHandler+0x36>
 80036ee:	0722      	lsls	r2, r4, #28
 80036f0:	d5e9      	bpl.n	80036c6 <TIMER1_IRQHandler+0x36>
 80036f2:	05eb      	lsls	r3, r5, #23
 80036f4:	d5e7      	bpl.n	80036c6 <TIMER1_IRQHandler+0x36>
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <TIMER1_IRQHandler+0x94>)
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	480a      	ldr	r0, [pc, #40]	; (8003728 <TIMER1_IRQHandler+0x98>)
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	61da      	str	r2, [r3, #28]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <TIMER1_IRQHandler+0x9c>)
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
 8003708:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800370c:	621a      	str	r2, [r3, #32]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	61da      	str	r2, [r3, #28]
 8003716:	f005 fe21 	bl	800935c <usart_dma_transmit_config>
 800371a:	e7d4      	b.n	80036c6 <TIMER1_IRQHandler+0x36>
 800371c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003720:	40011000 	andmi	r1, r1, r0
 8003724:	40020000 	andmi	r0, r2, r0
 8003728:	40004800 	andmi	r4, r0, r0, lsl #16
 800372c:	2000041c 	andcs	r0, r0, ip, lsl r4

08003730 <TIMER2_IRQHandler>:
 8003730:	b508      	push	{r3, lr}
 8003732:	f3bf 8f5f 	dmb	sy
 8003736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800373a:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800373e:	078b      	lsls	r3, r1, #30
 8003740:	d50d      	bpl.n	800375e <TIMER2_IRQHandler+0x2e>
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <TIMER2_IRQHandler+0x3c>)
 8003744:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003748:	2a04      	cmp	r2, #4
 800374a:	d108      	bne.n	800375e <TIMER2_IRQHandler+0x2e>
 800374c:	2200      	movs	r2, #0
 800374e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003752:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800375a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800375e:	4804      	ldr	r0, [pc, #16]	; (8003770 <TIMER2_IRQHandler+0x40>)
 8003760:	f005 fd5d 	bl	800921e <timer_interrupt_flag_clear>
 8003764:	f3bf 8f5f 	dmb	sy
 8003768:	bd08      	pop	{r3, pc}
 800376a:	bf00      	nop
 800376c:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003770:	40000400 	andmi	r0, r0, r0, lsl #8

08003774 <TIMER3_IRQHandler>:
 8003774:	b508      	push	{r3, lr}
 8003776:	f3bf 8f5f 	dmb	sy
 800377a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800377e:	4804      	ldr	r0, [pc, #16]	; (8003790 <TIMER3_IRQHandler+0x1c>)
 8003780:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8003784:	f005 fd4b 	bl	800921e <timer_interrupt_flag_clear>
 8003788:	f3bf 8f5f 	dmb	sy
 800378c:	bd08      	pop	{r3, pc}
 800378e:	bf00      	nop
 8003790:	40000800 	andmi	r0, r0, r0, lsl #16

08003794 <TIMER6_IRQHandler>:
 8003794:	b508      	push	{r3, lr}
 8003796:	f3bf 8f5f 	dmb	sy
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <TIMER6_IRQHandler+0x24>)
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <TIMER6_IRQHandler+0x28>)
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	1a52      	subs	r2, r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	2101      	movs	r1, #1
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	f005 fd37 	bl	800921e <timer_interrupt_flag_clear>
 80037b0:	f3bf 8f5f 	dmb	sy
 80037b4:	bd08      	pop	{r3, pc}
 80037b6:	bf00      	nop
 80037b8:	20000628 	andcs	r0, r0, r8, lsr #12
 80037bc:	40001400 	andmi	r1, r0, r0, lsl #8

080037c0 <Dmx::ClearData(unsigned int)>:
 80037c0:	f44f 7301 	mov.w	r3, #516	; 0x204
 80037c4:	b510      	push	{r4, lr}
 80037c6:	2400      	movs	r4, #0
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <Dmx::ClearData(unsigned int)+0x2c>)
 80037ca:	fb03 2301 	mla	r3, r3, r1, r2
 80037ce:	f203 2002 	addw	r0, r3, #514	; 0x202
 80037d2:	f823 4b02 	strh.w	r4, [r3], #2
 80037d6:	4283      	cmp	r3, r0
 80037d8:	d1fb      	bne.n	80037d2 <Dmx::ClearData(unsigned int)+0x12>
 80037da:	f44f 7301 	mov.w	r3, #516	; 0x204
 80037de:	fb03 2201 	mla	r2, r3, r1, r2
 80037e2:	f240 2301 	movw	r3, #513	; 0x201
 80037e6:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 80037ea:	bd10      	pop	{r4, pc}
 80037ec:	2000041c 	andcs	r0, r0, ip, lsl r4

080037f0 <Dmx::StartData(unsigned int, unsigned int)>:
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80037f6:	6943      	ldr	r3, [r0, #20]
 80037f8:	460c      	mov	r4, r1
 80037fa:	4615      	mov	r5, r2
 80037fc:	b085      	sub	sp, #20
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d16a      	bne.n	80038d8 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 8003802:	4e47      	ldr	r6, [pc, #284]	; (8003920 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 8003804:	8834      	ldrh	r4, [r6, #0]
 8003806:	2c00      	cmp	r4, #0
 8003808:	d15b      	bne.n	80038c2 <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800380a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800380e:	f005 fa9f 	bl	8008d50 <rcu_periph_clock_enable>
 8003812:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003816:	f005 fc0b 	bl	8009030 <timer_deinit>
 800381a:	236b      	movs	r3, #107	; 0x6b
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 8003820:	4669      	mov	r1, sp
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003828:	9302      	str	r3, [sp, #8]
 800382a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800382e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003832:	f88d 400e 	strb.w	r4, [sp, #14]
 8003836:	f005 fc5d 	bl	80090f4 <timer_init>
 800383a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800383e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003842:	f005 fcef 	bl	8009224 <timer_flag_clear>
 8003846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800384a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800384e:	f005 fce6 	bl	800921e <timer_interrupt_flag_clear>
 8003852:	2210      	movs	r2, #16
 8003854:	4621      	mov	r1, r4
 8003856:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800385a:	f005 fca8 	bl	80091ae <timer_channel_output_mode_config>
 800385e:	2210      	movs	r2, #16
 8003860:	2101      	movs	r1, #1
 8003862:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003866:	f005 fca2 	bl	80091ae <timer_channel_output_mode_config>
 800386a:	4f2f      	ldr	r7, [pc, #188]	; (8003928 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800386c:	2210      	movs	r2, #16
 800386e:	2102      	movs	r1, #2
 8003870:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003874:	f005 fc9b 	bl	80091ae <timer_channel_output_mode_config>
 8003878:	4622      	mov	r2, r4
 800387a:	4621      	mov	r1, r4
 800387c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003880:	f005 fcbb 	bl	80091fa <timer_channel_output_pulse_value_config>
 8003884:	2101      	movs	r1, #1
 8003886:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800388a:	883a      	ldrh	r2, [r7, #0]
 800388c:	f005 fcb5 	bl	80091fa <timer_channel_output_pulse_value_config>
 8003890:	4b26      	ldr	r3, [pc, #152]	; (800392c <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2102      	movs	r1, #2
 8003898:	441a      	add	r2, r3
 800389a:	b292      	uxth	r2, r2
 800389c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038a0:	f005 fcab 	bl	80091fa <timer_channel_output_pulse_value_config>
 80038a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038a8:	210e      	movs	r1, #14
 80038aa:	f005 fcb4 	bl	8009216 <timer_interrupt_enable>
 80038ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 80038b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038b8:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f005 fc71 	bl	80091a4 <timer_enable>
 80038c2:	2201      	movs	r2, #1
 80038c4:	8831      	ldrh	r1, [r6, #0]
 80038c6:	fa02 f305 	lsl.w	r3, r2, r5
 80038ca:	430b      	orrs	r3, r1
 80038cc:	8033      	strh	r3, [r6, #0]
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 80038d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80038d4:	b005      	add	sp, #20
 80038d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d8:	f44f 7204 	mov.w	r2, #528	; 0x210
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 80038de:	fb02 3305 	mla	r3, r2, r5, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80038e8:	2107      	movs	r1, #7
 80038ea:	4620      	mov	r0, r4
 80038ec:	f005 fd3c 	bl	8009368 <usart_flag_get>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d0f9      	beq.n	80038e8 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 80038f4:	4620      	mov	r0, r4
 80038f6:	4911      	ldr	r1, [pc, #68]	; (800393c <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 80038f8:	f005 fd57 	bl	80093aa <usart_interrupt_flag_clear>
 80038fc:	f240 3105 	movw	r1, #773	; 0x305
 8003900:	4620      	mov	r0, r4
 8003902:	f005 fd39 	bl	8009378 <usart_interrupt_enable>
 8003906:	2202      	movs	r2, #2
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800390a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800390e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003912:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800391e:	e7d9      	b.n	80038d4 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 8003920:	20000624 	andcs	r0, r0, r4, lsr #12
 8003924:	20000000 	andcs	r0, r0, r0
 8003928:	20000008 	andcs	r0, r0, r8
 800392c:	20000004 	andcs	r0, r0, r4
 8003930:	e000e100 	and	lr, r0, r0, lsl #2
 8003934:	20000620 	andcs	r0, r0, r0, lsr #12
 8003938:	2000020c 	andcs	r0, r0, ip, lsl #4
 800393c:	00050305 	andeq	r0, r5, r5, lsl #6

08003940 <Dmx::StopData(unsigned int, unsigned int)>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d16      	ldr	r5, [pc, #88]	; (800399c <Dmx::StopData(unsigned int, unsigned int)+0x5c>)
 8003944:	4614      	mov	r4, r2
 8003946:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800394a:	4603      	mov	r3, r0
 800394c:	4608      	mov	r0, r1
 800394e:	b17a      	cbz	r2, 8003970 <Dmx::StopData(unsigned int, unsigned int)+0x30>
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	b973      	cbnz	r3, 8003972 <Dmx::StopData(unsigned int, unsigned int)+0x32>
 8003954:	2201      	movs	r2, #1
 8003956:	4912      	ldr	r1, [pc, #72]	; (80039a0 <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 8003958:	f104 0308 	add.w	r3, r4, #8
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	40a2      	lsls	r2, r4
 8003962:	4313      	orrs	r3, r2
 8003964:	880a      	ldrh	r2, [r1, #0]
 8003966:	4013      	ands	r3, r2
 8003968:	800b      	strh	r3, [r1, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8003970:	bd38      	pop	{r3, r4, r5, pc}
 8003972:	f240 3105 	movw	r1, #773	; 0x305
 8003976:	f005 fd0b 	bl	8009390 <usart_interrupt_disable>
 800397a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 8003980:	fb02 3304 	mla	r3, r2, r4, r3
 8003984:	2200      	movs	r2, #0
 8003986:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800398a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800398e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003992:	f023 0302 	bic.w	r3, r3, #2
 8003996:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800399a:	e7e6      	b.n	800396a <Dmx::StopData(unsigned int, unsigned int)+0x2a>
 800399c:	20000620 	andcs	r0, r0, r0, lsr #12
 80039a0:	20000624 	andcs	r0, r0, r4, lsr #12
 80039a4:	2000020c 	andcs	r0, r0, ip, lsl #4

080039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 80039a8:	b570      	push	{r4, r5, r6, lr}
 80039aa:	461d      	mov	r5, r3
 80039ac:	6943      	ldr	r3, [r0, #20]
 80039ae:	4606      	mov	r6, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	4614      	mov	r4, r2
 80039b4:	d014      	beq.n	80039e0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 80039b6:	6142      	str	r2, [r0, #20]
 80039b8:	4910      	ldr	r1, [pc, #64]	; (80039fc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	f7ff ffc0 	bl	8003940 <Dmx::StopData(unsigned int, unsigned int)>
 80039c0:	b934      	cbnz	r4, 80039d0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 80039c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 80039c8:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 80039cc:	b94d      	cbnz	r5, 80039e2 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	2c01      	cmp	r4, #1
 80039d2:	d1fb      	bne.n	80039cc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 80039d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 80039da:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80039de:	e7f5      	b.n	80039cc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 80039e0:	b135      	cbz	r5, 80039f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 80039e2:	4630      	mov	r0, r6
 80039e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039e8:	2200      	movs	r2, #0
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 80039ec:	f7ff bf00 	b.w	80037f0 <Dmx::StartData(unsigned int, unsigned int)>
 80039f0:	462a      	mov	r2, r5
 80039f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039f6:	4901      	ldr	r1, [pc, #4]	; (80039fc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 80039f8:	f7ff bfa2 	b.w	8003940 <Dmx::StopData(unsigned int, unsigned int)>
 80039fc:	40004800 	andmi	r4, r0, r0, lsl #16
 8003a00:	40010000 	andmi	r0, r1, r0

08003a04 <Dmx::Dmx()>:
 8003a04:	225c      	movs	r2, #92	; 0x5c
 8003a06:	230c      	movs	r3, #12
 8003a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a0c:	e9c0 2300 	strd	r2, r3, [r0]
 8003a10:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003a14:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1c:	2400      	movs	r4, #0
 8003a1e:	4605      	mov	r5, r0
 8003a20:	8203      	strh	r3, [r0, #16]
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <Dmx::Dmx()+0x194>)
 8003a24:	b08b      	sub	sp, #44	; 0x2c
 8003a26:	6018      	str	r0, [r3, #0]
 8003a28:	4b5c      	ldr	r3, [pc, #368]	; (8003b9c <Dmx::Dmx()+0x198>)
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	801c      	strh	r4, [r3, #0]
 8003a2e:	2110      	movs	r1, #16
 8003a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a34:	485a      	ldr	r0, [pc, #360]	; (8003ba0 <Dmx::Dmx()+0x19c>)
 8003a36:	f005 f8f9 	bl	8008c2c <gpio_init>
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f7ff febf 	bl	80037c0 <Dmx::ClearData(unsigned int)>
 8003a42:	4b58      	ldr	r3, [pc, #352]	; (8003ba4 <Dmx::Dmx()+0x1a0>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	4628      	mov	r0, r5
 8003a48:	601c      	str	r4, [r3, #0]
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7ff ffac 	bl	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003a50:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <Dmx::Dmx()+0x1a4>)
 8003a52:	4e56      	ldr	r6, [pc, #344]	; (8003bac <Dmx::Dmx()+0x1a8>)
 8003a54:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003a58:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003a5c:	f005 f978 	bl	8008d50 <rcu_periph_clock_enable>
 8003a60:	f240 5001 	movw	r0, #1281	; 0x501
 8003a64:	f005 f974 	bl	8008d50 <rcu_periph_clock_enable>
 8003a68:	4630      	mov	r0, r6
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f004 ffd0 	bl	8008a10 <dma_deinit>
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <Dmx::Dmx()+0x1ac>)
 8003a72:	2701      	movs	r7, #1
 8003a74:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7c:	9308      	str	r3, [sp, #32]
 8003a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a82:	aa03      	add	r2, sp, #12
 8003a84:	4639      	mov	r1, r7
 8003a86:	4630      	mov	r0, r6
 8003a88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003a8c:	9406      	str	r4, [sp, #24]
 8003a8e:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8003a92:	f004 ffe3 	bl	8008a5c <dma_init>
 8003a96:	4639      	mov	r1, r7
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f005 f819 	bl	8008ad0 <dma_circulation_disable>
 8003a9e:	4639      	mov	r1, r7
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f005 f825 	bl	8008af0 <dma_memory_to_memory_disable>
 8003aa6:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 8003aaa:	f240 7001 	movw	r0, #1793	; 0x701
 8003aae:	f005 f94f 	bl	8008d50 <rcu_periph_clock_enable>
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f005 fabc 	bl	8009030 <timer_deinit>
 8003ab8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003abc:	236b      	movs	r3, #107	; 0x6b
 8003abe:	4630      	mov	r0, r6
 8003ac0:	a903      	add	r1, sp, #12
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	f8ad 4010 	strh.w	r4, [sp, #16]
 8003ac8:	f8cd 9014 	str.w	r9, [sp, #20]
 8003acc:	f8ad 4018 	strh.w	r4, [sp, #24]
 8003ad0:	f88d 401a 	strb.w	r4, [sp, #26]
 8003ad4:	f005 fb0e 	bl	80090f4 <timer_init>
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4630      	mov	r0, r6
 8003adc:	f005 fba2 	bl	8009224 <timer_flag_clear>
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f005 fb9b 	bl	800921e <timer_interrupt_flag_clear>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	2210      	movs	r2, #16
 8003aee:	f005 fb5e 	bl	80091ae <timer_channel_output_mode_config>
 8003af2:	4639      	mov	r1, r7
 8003af4:	4630      	mov	r0, r6
 8003af6:	2210      	movs	r2, #16
 8003af8:	f005 fb59 	bl	80091ae <timer_channel_output_mode_config>
 8003afc:	4630      	mov	r0, r6
 8003afe:	2210      	movs	r2, #16
 8003b00:	2102      	movs	r1, #2
 8003b02:	f005 fb54 	bl	80091ae <timer_channel_output_mode_config>
 8003b06:	2210      	movs	r2, #16
 8003b08:	2103      	movs	r1, #3
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	f005 fb4f 	bl	80091ae <timer_channel_output_mode_config>
 8003b10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b14:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003bb4 <Dmx::Dmx()+0x1b0>
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003b1e:	f8c8 3000 	str.w	r3, [r8]
 8003b22:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003b26:	f005 fb3d 	bl	80091a4 <timer_enable>
 8003b2a:	f240 7005 	movw	r0, #1797	; 0x705
 8003b2e:	f005 f90f 	bl	8008d50 <rcu_periph_clock_enable>
 8003b32:	4630      	mov	r0, r6
 8003b34:	f005 fa7c 	bl	8009030 <timer_deinit>
 8003b38:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8003b3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003b40:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b44:	4630      	mov	r0, r6
 8003b46:	a903      	add	r1, sp, #12
 8003b48:	9305      	str	r3, [sp, #20]
 8003b4a:	f005 fad3 	bl	80090f4 <timer_init>
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4630      	mov	r0, r6
 8003b52:	f005 fb67 	bl	8009224 <timer_flag_clear>
 8003b56:	4649      	mov	r1, r9
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f005 fb60 	bl	800921e <timer_interrupt_flag_clear>
 8003b5e:	4639      	mov	r1, r7
 8003b60:	4630      	mov	r0, r6
 8003b62:	f005 fb58 	bl	8009216 <timer_interrupt_enable>
 8003b66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003b70:	f8c8 3004 	str.w	r3, [r8, #4]
 8003b74:	f005 fb16 	bl	80091a4 <timer_enable>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	490e      	ldr	r1, [pc, #56]	; (8003bb8 <Dmx::Dmx()+0x1b4>)
 8003b80:	4623      	mov	r3, r4
 8003b82:	480e      	ldr	r0, [pc, #56]	; (8003bbc <Dmx::Dmx()+0x1b8>)
 8003b84:	f005 feb4 	bl	80098f0 <gd32_uart_begin>
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8003b90:	b00b      	add	sp, #44	; 0x2c
 8003b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b96:	bf00      	nop
 8003b98:	20000638 	andcs	r0, r0, r8, lsr r6
 8003b9c:	20000624 	andcs	r0, r0, r4, lsr #12
 8003ba0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003ba4:	20000620 	andcs	r0, r0, r0, lsr #12
 8003ba8:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003bac:	40020000 	andmi	r0, r2, r0
 8003bb0:	40004804 	andmi	r4, r0, r4, lsl #16
 8003bb4:	e000e100 	and	lr, r0, r0, lsl #2
 8003bb8:	0003d090 	muleq	r3, r0, r0
 8003bbc:	40004800 	andmi	r4, r0, r0, lsl #16

08003bc0 <Dmx::GetDmxAvailable(unsigned int)>:
 8003bc0:	f44f 7304 	mov.w	r3, #528	; 0x210
 8003bc4:	4807      	ldr	r0, [pc, #28]	; (8003be4 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003bc6:	fb03 0001 	mla	r0, r3, r1, r0
 8003bca:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003bce:	f413 4100 	ands.w	r1, r3, #32768	; 0x8000
 8003bd2:	bf1b      	ittet	ne
 8003bd4:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8003bd8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003bdc:	4608      	moveq	r0, r1
 8003bde:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 8003be2:	4770      	bx	lr
 8003be4:	2000020c 	andcs	r0, r0, ip, lsl #4

08003be8 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8003be8:	f3bf 8f5f 	dmb	sy
 8003bec:	4b01      	ldr	r3, [pc, #4]	; (8003bf4 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003bee:	0109      	lsls	r1, r1, #4
 8003bf0:	5858      	ldr	r0, [r3, r1]
 8003bf2:	4770      	bx	lr
 8003bf4:	20000628 	andcs	r0, r0, r8, lsr #12

08003bf8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	4614      	mov	r4, r2
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	4e1f      	ldr	r6, [pc, #124]	; (8003c7c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003c00:	2106      	movs	r1, #6
 8003c02:	4630      	mov	r0, r6
 8003c04:	f005 fbb0 	bl	8009368 <usart_flag_get>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d0f9      	beq.n	8003c00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003c0c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003c10:	4e1b      	ldr	r6, [pc, #108]	; (8003c80 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c16:	2203      	movs	r2, #3
 8003c18:	4630      	mov	r0, r6
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	f005 f806 	bl	8008c2c <gpio_init>
 8003c20:	6177      	str	r7, [r6, #20]
 8003c22:	2100      	movs	r1, #0
 8003c24:	20b0      	movs	r0, #176	; 0xb0
 8003c26:	f005 ff45 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	2203      	movs	r2, #3
 8003c30:	2118      	movs	r1, #24
 8003c32:	f004 fffb 	bl	8008c2c <gpio_init>
 8003c36:	2100      	movs	r1, #0
 8003c38:	200c      	movs	r0, #12
 8003c3a:	f005 ff3b 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003c3e:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003c42:	4f0e      	ldr	r7, [pc, #56]	; (8003c7c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003c44:	4425      	add	r5, r4
 8003c46:	42ac      	cmp	r4, r5
 8003c48:	d10b      	bne.n	8003c62 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8003c4a:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
 8003c4e:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003c50:	2106      	movs	r1, #6
 8003c52:	4628      	mov	r0, r5
 8003c54:	f005 fb88 	bl	8009368 <usart_flag_get>
 8003c58:	2801      	cmp	r0, #1
 8003c5a:	d00d      	beq.n	8003c78 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 8003c5c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8003c60:	e7f6      	b.n	8003c50 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x58>
 8003c62:	2107      	movs	r1, #7
 8003c64:	4638      	mov	r0, r7
 8003c66:	f005 fb7f 	bl	8009368 <usart_flag_get>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d0f9      	beq.n	8003c62 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8003c6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c72:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8003c76:	e7e6      	b.n	8003c46 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x4e>
 8003c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40004800 	andmi	r4, r0, r0, lsl #16
 8003c80:	40011000 	andmi	r1, r1, r0

08003c84 <Dmx::RdmReceive(unsigned int)>:
 8003c84:	f44f 7304 	mov.w	r3, #528	; 0x210
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <Dmx::RdmReceive(unsigned int)+0x20>)
 8003c8a:	fb03 0101 	mla	r1, r3, r1, r0
 8003c8e:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 8003c92:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 8003c96:	bf1e      	ittt	ne
 8003c98:	2300      	movne	r3, #0
 8003c9a:	4608      	movne	r0, r1
 8003c9c:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	2000020c 	andcs	r0, r0, ip, lsl #4

08003ca8 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	4616      	mov	r6, r2
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 8003cb2:	20c8      	movs	r0, #200	; 0xc8
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	f005 fefd 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003cc4:	f7ff bbc8 	b.w	8003458 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003cc8:	2000063c 	andcs	r0, r0, ip, lsr r6

08003ccc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	20c8      	movs	r0, #200	; 0xc8
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	4615      	mov	r5, r2
 8003cdc:	f005 feea 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	4f19      	ldr	r7, [pc, #100]	; (8003d48 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6838      	ldr	r0, [r7, #0]
 8003cea:	f7ff fe5d 	bl	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003cee:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003cf2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8003d4c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>
 8003cf6:	4425      	add	r5, r4
 8003cf8:	42ac      	cmp	r4, r5
 8003cfa:	d10c      	bne.n	8003d16 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x4a>
 8003cfc:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003d00:	4e12      	ldr	r6, [pc, #72]	; (8003d4c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003d02:	2106      	movs	r1, #6
 8003d04:	4630      	mov	r0, r6
 8003d06:	f005 fb2f 	bl	8009368 <usart_flag_get>
 8003d0a:	2801      	cmp	r0, #1
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	d00d      	beq.n	8003d2c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x60>
 8003d10:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003d14:	e7f5      	b.n	8003d02 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x36>
 8003d16:	2107      	movs	r1, #7
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f005 fb25 	bl	8009368 <usart_flag_get>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0f9      	beq.n	8003d16 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x4a>
 8003d22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d26:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8003d2a:	e7e5      	b.n	8003cf8 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2c>
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2004      	movs	r0, #4
 8003d30:	f005 fec0 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 8003d34:	4623      	mov	r3, r4
 8003d36:	4622      	mov	r2, r4
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d40:	f7ff be32 	b.w	80039a8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003d44:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003d48:	20000638 	andcs	r0, r0, r8, lsr r6
 8003d4c:	40004800 	andmi	r4, r0, r0, lsl #16

08003d50 <memcpy.isra.0>:
 8003d50:	f004 bbfc 	b.w	800854c <memcpy>

08003d54 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	6001      	str	r1, [r0, #0]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	6041      	str	r1, [r0, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	3008      	adds	r0, #8
 8003d62:	f004 fc15 	bl	8008590 <memset>
 8003d66:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 8003d68:	4620      	mov	r0, r4
 8003d6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d6c:	237f      	movs	r3, #127	; 0x7f
 8003d6e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003d72:	bd10      	pop	{r4, pc}
 8003d74:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

08003d78 <RDMDeviceParams::Load()>:
 8003d78:	4601      	mov	r1, r0
 8003d7a:	6800      	ldr	r0, [r0, #0]
 8003d7c:	b130      	cbz	r0, 8003d8c <RDMDeviceParams::Load()+0x14>
 8003d7e:	b508      	push	{r3, lr}
 8003d80:	6803      	ldr	r3, [r0, #0]
 8003d82:	3104      	adds	r1, #4
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4798      	blx	r3
 8003d88:	2001      	movs	r0, #1
 8003d8a:	bd08      	pop	{r3, pc}
 8003d8c:	4770      	bx	lr

08003d8e <RDMDeviceParams::Set(RDMDevice*)>:
 8003d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d90:	6843      	ldr	r3, [r0, #4]
 8003d92:	460c      	mov	r4, r1
 8003d94:	07d9      	lsls	r1, r3, #31
 8003d96:	4605      	mov	r5, r0
 8003d98:	d518      	bpl.n	8003dcc <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003d9a:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003d9e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8003da2:	2e20      	cmp	r6, #32
 8003da4:	bf28      	it	cs
 8003da6:	2620      	movcs	r6, #32
 8003da8:	f100 0108 	add.w	r1, r0, #8
 8003dac:	b1e3      	cbz	r3, 8003de8 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 8003dae:	f104 070a 	add.w	r7, r4, #10
 8003db2:	4638      	mov	r0, r7
 8003db4:	4632      	mov	r2, r6
 8003db6:	f7ff ffcb 	bl	8003d50 <memcpy.isra.0>
 8003dba:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003dbc:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 8003dc0:	b120      	cbz	r0, 8003dcc <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003dc2:	6803      	ldr	r3, [r0, #0]
 8003dc4:	4632      	mov	r2, r6
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4798      	blx	r3
 8003dcc:	686b      	ldr	r3, [r5, #4]
 8003dce:	079a      	lsls	r2, r3, #30
 8003dd0:	bf44      	itt	mi
 8003dd2:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003dd6:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 8003dda:	075b      	lsls	r3, r3, #29
 8003ddc:	bf44      	itt	mi
 8003dde:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8003de2:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 8003de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de8:	4632      	mov	r2, r6
 8003dea:	f104 0053 	add.w	r0, r4, #83	; 0x53
 8003dee:	f7ff ffaf 	bl	8003d50 <memcpy.isra.0>
 8003df2:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
 8003df6:	e7e9      	b.n	8003dcc <RDMDeviceParams::Set(RDMDevice*)+0x3e>

08003df8 <RDMDeviceParams::Dump()>:
 8003df8:	4770      	bx	lr

08003dfa <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003dfa:	4770      	bx	lr

08003dfc <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003dfc:	4770      	bx	lr
	...

08003e00 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	4604      	mov	r4, r0
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003e06:	f840 3b8c 	str.w	r3, [r0], #140
 8003e0a:	f7ff f9d9 	bl	80031c0 <RDMSubDevices::~RDMSubDevices()>
 8003e0e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003e12:	f7fe fba7 	bl	8002564 <RDMSensors::~RDMSensors()>
 8003e16:	4620      	mov	r0, r4
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	bf00      	nop
 8003e1c:	0800a2b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, pc}

08003e20 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4604      	mov	r4, r0
 8003e24:	f7ff ffec 	bl	8003e00 <RDMDeviceResponder::~RDMDeviceResponder()>
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f004 faf4 	bl	8008416 <operator delete(void*)>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}

08003e32 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8003e32:	b470      	push	{r4, r5, r6}
 8003e34:	790a      	ldrb	r2, [r1, #4]
 8003e36:	680b      	ldr	r3, [r1, #0]
 8003e38:	2a20      	cmp	r2, #32
 8003e3a:	bf28      	it	cs
 8003e3c:	2220      	movcs	r2, #32
 8003e3e:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 8003e42:	189c      	adds	r4, r3, r2
 8003e44:	b189      	cbz	r1, 8003e6a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 8003e46:	f100 010a 	add.w	r1, r0, #10
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	d004      	beq.n	8003e5a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x28>
 8003e50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e54:	f805 6b01 	strb.w	r6, [r5], #1
 8003e58:	e7f8      	b.n	8003e4c <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x1a>
 8003e5a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8003e5e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003e60:	b170      	cbz	r0, 8003e80 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x4e>
 8003e62:	bc70      	pop	{r4, r5, r6}
 8003e64:	6803      	ldr	r3, [r0, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4718      	bx	r3
 8003e6a:	f100 0153 	add.w	r1, r0, #83	; 0x53
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	d004      	beq.n	8003e7c <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x4a>
 8003e72:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003e76:	f801 5b01 	strb.w	r5, [r1], #1
 8003e7a:	e7f8      	b.n	8003e6e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3c>
 8003e7c:	f880 2073 	strb.w	r2, [r0, #115]	; 0x73
 8003e80:	bc70      	pop	{r4, r5, r6}
 8003e82:	4770      	bx	lr

08003e84 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8003e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	1d07      	adds	r7, r0, #4
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	4615      	mov	r5, r2
 8003e90:	f001 f9e6 	bl	8005260 <RDMDevice::RDMDevice()>
 8003e94:	4620      	mov	r0, r4
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb0>)
 8003e98:	f840 3b80 	str.w	r3, [r0], #128
 8003e9c:	f001 f9a0 	bl	80051e0 <RDMIdentify::RDMIdentify()>
 8003ea0:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003ea4:	f7fe fb30 	bl	8002508 <RDMSensors::RDMSensors()>
 8003ea8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8003eac:	f7ff f980 	bl	80031b0 <RDMSubDevices::RDMSubDevices()>
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb4>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601c      	str	r4, [r3, #0]
 8003eb6:	2365      	movs	r3, #101	; 0x65
 8003eb8:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
 8003ebc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003ec0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 8003eca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003ece:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8003ed2:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8003ed6:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8003eda:	428b      	cmp	r3, r1
 8003edc:	d002      	beq.n	8003ee4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x60>
 8003ede:	f803 2b01 	strb.w	r2, [r3], #1
 8003ee2:	e7fa      	b.n	8003eda <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x56>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
 8003eea:	428b      	cmp	r3, r1
 8003eec:	d002      	beq.n	8003ef4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x70>
 8003eee:	f803 2b01 	strb.w	r2, [r3], #1
 8003ef2:	e7fa      	b.n	8003eea <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x66>
 8003ef4:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 8003ef8:	f7fd fffe 	bl	8001ef8 <RDMSoftwareVersion::GetVersion()>
 8003efc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8003f00:	f7fd fffe 	bl	8001f00 <RDMSoftwareVersion::GetVersionLength()>
 8003f04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f08:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	b91b      	cbnz	r3, 8003f1a <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x96>
 8003f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f16:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb8>)
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2317      	movs	r3, #23
 8003f22:	4669      	mov	r1, sp
 8003f24:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f28:	f7ff ff83 	bl	8003e32 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	b003      	add	sp, #12
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	0800a2b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, pc}
 8003f38:	20000640 	andcs	r0, r0, r0, asr #12
 8003f3c:	0800a294 	stmdaeq	r0, {r2, r4, r7, r9, sp, pc}

08003f40 <RDMDeviceResponder::Init()>:
 8003f40:	2301      	movs	r3, #1
 8003f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f44:	4604      	mov	r4, r0
 8003f46:	f06f 050d 	mvn.w	r5, #13
 8003f4a:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8003f4e:	f100 0357 	add.w	r3, r0, #87	; 0x57
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8003f58:	4669      	mov	r1, sp
 8003f5a:	3004      	adds	r0, #4
 8003f5c:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f60:	f7ff ff67 	bl	8003e32 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003f64:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8003f68:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8003f6c:	f104 020e 	add.w	r2, r4, #14
 8003f70:	1b2d      	subs	r5, r5, r4
 8003f72:	18a9      	adds	r1, r5, r2
 8003f74:	4288      	cmp	r0, r1
 8003f76:	d904      	bls.n	8003f82 <RDMDeviceResponder::Init()+0x42>
 8003f78:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003f7c:	440b      	add	r3, r1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	e7f7      	b.n	8003f72 <RDMDeviceResponder::Init()+0x32>
 8003f82:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8003f86:	f7fd ffbd 	bl	8001f04 <RDMSoftwareVersion::GetVersionId()>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003f96:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8003f9a:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
 8003f9e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8003fa2:	0a1a      	lsrs	r2, r3, #8
 8003fa4:	0e03      	lsrs	r3, r0, #24
 8003fa6:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8003faa:	0c03      	lsrs	r3, r0, #16
 8003fac:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8003fb0:	0a03      	lsrs	r3, r0, #8
 8003fb2:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8003fb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fba:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 8003fbe:	f884 00a6 	strb.w	r0, [r4, #166]	; 0xa6
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8b4 6090 	ldrh.w	r6, [r4, #144]	; 0x90
 8003fc8:	685d      	ldr	r5, [r3, #4]
 8003fca:	bb05      	cbnz	r5, 800400e <RDMDeviceResponder::Init()+0xce>
 8003fcc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8003fd0:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8003fd4:	0a1a      	lsrs	r2, r3, #8
 8003fd6:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 8003fda:	f884 20ab 	strb.w	r2, [r4, #171]	; 0xab
 8003fde:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8003fe8:	0a33      	lsrs	r3, r6, #8
 8003fea:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8003fee:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 8003ff2:	f884 60ae 	strb.w	r6, [r4, #174]	; 0xae
 8003ff6:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 8003ffa:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8003ffe:	f104 039d 	add.w	r3, r4, #157	; 0x9d
 8004002:	428b      	cmp	r3, r1
 8004004:	d01e      	beq.n	8004044 <RDMDeviceResponder::Init()+0x104>
 8004006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400a:	749a      	strb	r2, [r3, #18]
 800400c:	e7f9      	b.n	8004002 <RDMDeviceResponder::Init()+0xc2>
 800400e:	682b      	ldr	r3, [r5, #0]
 8004010:	4628      	mov	r0, r5
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	4798      	blx	r3
 8004016:	0a00      	lsrs	r0, r0, #8
 8004018:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	4628      	mov	r0, r5
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	4798      	blx	r3
 8004024:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	4628      	mov	r0, r5
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4798      	blx	r3
 8004030:	0a00      	lsrs	r0, r0, #8
 8004032:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	4628      	mov	r0, r5
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4798      	blx	r3
 800403e:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8004042:	e7ce      	b.n	8003fe2 <RDMDeviceResponder::Init()+0xa2>
 8004044:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004048:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 800404c:	4413      	add	r3, r2
 800404e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004052:	b002      	add	sp, #8
 8004054:	bd70      	pop	{r4, r5, r6, pc}
	...

08004058 <RDMDeviceResponder::Print()>:
 8004058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800405a:	4604      	mov	r4, r0
 800405c:	3004      	adds	r0, #4
 800405e:	f001 f975 	bl	800534c <RDMDevice::Print()>
 8004062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004066:	481c      	ldr	r0, [pc, #112]	; (80040d8 <RDMDeviceResponder::Print()+0x80>)
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800406c:	f7fe f94a 	bl	8002304 <printf>
 8004070:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
 8004074:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
 8004078:	4818      	ldr	r0, [pc, #96]	; (80040dc <RDMDeviceResponder::Print()+0x84>)
 800407a:	f7fe f943 	bl	8002304 <printf>
 800407e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004082:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 8004086:	4816      	ldr	r0, [pc, #88]	; (80040e0 <RDMDeviceResponder::Print()+0x88>)
 8004088:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800408c:	f7fe f93a 	bl	8002304 <printf>
 8004090:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004094:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 8004098:	3508      	adds	r5, #8
 800409a:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800409e:	4811      	ldr	r0, [pc, #68]	; (80040e4 <RDMDeviceResponder::Print()+0x8c>)
 80040a0:	f7fe f930 	bl	8002304 <printf>
 80040a4:	f894 20aa 	ldrb.w	r2, [r4, #170]	; 0xaa
 80040a8:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 80040ac:	b2f3      	uxtb	r3, r6
 80040ae:	9500      	str	r5, [sp, #0]
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <RDMDeviceResponder::Print()+0x90>)
 80040b2:	f7fe f927 	bl	8002304 <printf>
 80040b6:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
 80040ba:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 80040be:	480b      	ldr	r0, [pc, #44]	; (80040ec <RDMDeviceResponder::Print()+0x94>)
 80040c0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80040c4:	f7fe f91e 	bl	8002304 <printf>
 80040c8:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
 80040cc:	4808      	ldr	r0, [pc, #32]	; (80040f0 <RDMDeviceResponder::Print()+0x98>)
 80040ce:	b002      	add	sp, #8
 80040d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040d4:	f7fe b916 	b.w	8002304 <printf>
 80040d8:	0800a1e0 	stmdaeq	r0, {r5, r6, r7, r8, sp, pc}
 80040dc:	0800a1fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sp, pc}
 80040e0:	0800a216 	stmdaeq	r0, {r1, r2, r4, r9, sp, pc}
 80040e4:	0800a22e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sp, pc}
 80040e8:	0800a246 	stmdaeq	r0, {r1, r2, r6, r9, sp, pc}
 80040ec:	0800a264 	stmdaeq	r0, {r2, r5, r6, r9, sp, pc}
 80040f0:	0800a27c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, pc}

080040f4 <memcmp>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	3901      	subs	r1, #1
 80040f8:	4402      	add	r2, r0
 80040fa:	4290      	cmp	r0, r2
 80040fc:	d008      	beq.n	8004110 <memcmp+0x1c>
 80040fe:	7803      	ldrb	r3, [r0, #0]
 8004100:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004104:	42a3      	cmp	r3, r4
 8004106:	d001      	beq.n	800410c <memcmp+0x18>
 8004108:	1b18      	subs	r0, r3, r4
 800410a:	bd10      	pop	{r4, pc}
 800410c:	3001      	adds	r0, #1
 800410e:	e7f4      	b.n	80040fa <memcmp+0x6>
 8004110:	2000      	movs	r0, #0
 8004112:	e7fa      	b.n	800410a <memcmp+0x16>

08004114 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 8004114:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 8004118:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800411c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004120:	3b01      	subs	r3, #1
 8004122:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004126:	6858      	ldr	r0, [r3, #4]
 8004128:	6803      	ldr	r3, [r0, #0]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	4718      	bx	r3

0800412e <memcpy.isra.0>:
 800412e:	3801      	subs	r0, #1
 8004130:	440a      	add	r2, r1
 8004132:	4291      	cmp	r1, r2
 8004134:	d004      	beq.n	8004140 <memcpy.isra.0+0x12>
 8004136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800413a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800413e:	e7f8      	b.n	8004132 <memcpy.isra.0+0x4>
 8004140:	4770      	bx	lr

08004142 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 8004142:	b570      	push	{r4, r5, r6, lr}
 8004144:	4604      	mov	r4, r0
 8004146:	1e50      	subs	r0, r2, #1
 8004148:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800414c:	4615      	mov	r5, r2
 800414e:	d221      	bcs.n	8004194 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8004150:	b129      	cbz	r1, 800415e <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 8004152:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800415a:	f7ff b86f 	b.w	800323c <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 800415e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8004162:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 8004166:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800416a:	3b01      	subs	r3, #1
 800416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004170:	6858      	ldr	r0, [r3, #4]
 8004172:	b178      	cbz	r0, 8004194 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8004174:	6803      	ldr	r3, [r0, #0]
 8004176:	4629      	mov	r1, r5
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4798      	blx	r3
 800417c:	b120      	cbz	r0, 8004188 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 800417e:	0a2b      	lsrs	r3, r5, #8
 8004180:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 8004184:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	4620      	mov	r0, r4
 800418c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4718      	bx	r3
 8004194:	bd70      	pop	{r4, r5, r6, pc}

08004196 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 8004196:	b111      	cbz	r1, 800419e <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 8004198:	308c      	adds	r0, #140	; 0x8c
 800419a:	f7ff b879 	b.w	8003290 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 800419e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80041a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80041a6:	3a01      	subs	r2, #1
 80041a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80041ac:	4770      	bx	lr

080041ae <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 80041ae:	b111      	cbz	r1, 80041b6 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 80041b0:	308c      	adds	r0, #140	; 0x8c
 80041b2:	f7ff b865 	b.w	8003280 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 80041b6:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
 80041ba:	4770      	bx	lr

080041bc <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	4604      	mov	r4, r0
 80041c0:	b121      	cbz	r1, 80041cc <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 80041c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041c6:	308c      	adds	r0, #140	; 0x8c
 80041c8:	f7ff b851 	b.w	800326e <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 80041cc:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80041d0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80041d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80041d8:	3a01      	subs	r2, #1
 80041da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041de:	685d      	ldr	r5, [r3, #4]
 80041e0:	b305      	cbz	r5, 8004224 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	4628      	mov	r0, r5
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4798      	blx	r3
 80041ea:	0a00      	lsrs	r0, r0, #8
 80041ec:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	4628      	mov	r0, r5
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	4798      	blx	r3
 80041f8:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4798      	blx	r3
 8004204:	0a00      	lsrs	r0, r0, #8
 8004206:	f884 00ab 	strb.w	r0, [r4, #171]	; 0xab
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	4628      	mov	r0, r5
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4798      	blx	r3
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 8004218:	4629      	mov	r1, r5
 800421a:	4620      	mov	r0, r4
 800421c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4718      	bx	r3
 8004224:	bd70      	pop	{r4, r5, r6, pc}

08004226 <RDMHandler::RDMHandler(bool)>:
 8004226:	2200      	movs	r2, #0
 8004228:	7001      	strb	r1, [r0, #0]
 800422a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800422e:	7042      	strb	r2, [r0, #1]
 8004230:	4770      	bx	lr

08004232 <RDMHandler::HandleString(char const*, unsigned int)>:
 8004232:	6883      	ldr	r3, [r0, #8]
 8004234:	75da      	strb	r2, [r3, #23]
 8004236:	3318      	adds	r3, #24
 8004238:	440a      	add	r2, r1
 800423a:	4291      	cmp	r1, r2
 800423c:	d004      	beq.n	8004248 <RDMHandler::HandleString(char const*, unsigned int)+0x16>
 800423e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8004242:	f803 0b01 	strb.w	r0, [r3], #1
 8004246:	e7f8      	b.n	800423a <RDMHandler::HandleString(char const*, unsigned int)+0x8>
 8004248:	4770      	bx	lr
	...

0800424c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 8004252:	25cc      	movs	r5, #204	; 0xcc
 8004254:	701d      	strb	r5, [r3, #0]
 8004256:	7825      	ldrb	r5, [r4, #0]
 8004258:	705d      	strb	r5, [r3, #1]
 800425a:	7ba5      	ldrb	r5, [r4, #14]
 800425c:	73dd      	strb	r5, [r3, #15]
 800425e:	2500      	movs	r5, #0
 8004260:	745d      	strb	r5, [r3, #17]
 8004262:	7c65      	ldrb	r5, [r4, #17]
 8004264:	749d      	strb	r5, [r3, #18]
 8004266:	7ca5      	ldrb	r5, [r4, #18]
 8004268:	74dd      	strb	r5, [r3, #19]
 800426a:	7ce5      	ldrb	r5, [r4, #19]
 800426c:	3501      	adds	r5, #1
 800426e:	751d      	strb	r5, [r3, #20]
 8004270:	7d25      	ldrb	r5, [r4, #20]
 8004272:	755d      	strb	r5, [r3, #21]
 8004274:	7d65      	ldrb	r5, [r4, #21]
 8004276:	759d      	strb	r5, [r3, #22]
 8004278:	b119      	cbz	r1, 8004282 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800427a:	1e4d      	subs	r5, r1, #1
 800427c:	2d01      	cmp	r5, #1
 800427e:	d921      	bls.n	80042c4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	7dda      	ldrb	r2, [r3, #23]
 8004284:	7419      	strb	r1, [r3, #16]
 8004286:	3218      	adds	r2, #24
 8004288:	709a      	strb	r2, [r3, #2]
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x98>)
 800428c:	f104 0108 	add.w	r1, r4, #8
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	1cdd      	adds	r5, r3, #3
 8004294:	3204      	adds	r2, #4
 8004296:	340e      	adds	r4, #14
 8004298:	f811 6b01 	ldrb.w	r6, [r1], #1
 800429c:	f805 6b01 	strb.w	r6, [r5], #1
 80042a0:	f812 6b01 	ldrb.w	r6, [r2], #1
 80042a4:	42a1      	cmp	r1, r4
 80042a6:	716e      	strb	r6, [r5, #5]
 80042a8:	d1f6      	bne.n	8004298 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4c>
 80042aa:	2200      	movs	r2, #0
 80042ac:	7899      	ldrb	r1, [r3, #2]
 80042ae:	4613      	mov	r3, r2
 80042b0:	6884      	ldr	r4, [r0, #8]
 80042b2:	4291      	cmp	r1, r2
 80042b4:	eb04 0502 	add.w	r5, r4, r2
 80042b8:	d90d      	bls.n	80042d6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 80042ba:	5ca5      	ldrb	r5, [r4, r2]
 80042bc:	3201      	adds	r2, #1
 80042be:	442b      	add	r3, r5
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	e7f6      	b.n	80042b2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x66>
 80042c4:	7419      	strb	r1, [r3, #16]
 80042c6:	2102      	movs	r1, #2
 80042c8:	251a      	movs	r5, #26
 80042ca:	75d9      	strb	r1, [r3, #23]
 80042cc:	0a11      	lsrs	r1, r2, #8
 80042ce:	709d      	strb	r5, [r3, #2]
 80042d0:	7619      	strb	r1, [r3, #24]
 80042d2:	765a      	strb	r2, [r3, #25]
 80042d4:	e7d9      	b.n	800428a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 80042d6:	0a1a      	lsrs	r2, r3, #8
 80042d8:	702a      	strb	r2, [r5, #0]
 80042da:	6882      	ldr	r2, [r0, #8]
 80042dc:	440a      	add	r2, r1
 80042de:	7053      	strb	r3, [r2, #1]
 80042e0:	e7ce      	b.n	8004280 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 80042e2:	bf00      	nop
 80042e4:	20000640 	andcs	r0, r0, r0, asr #12

080042e8 <RDMHandler::RespondMessageAck()>:
 80042e8:	6843      	ldr	r3, [r0, #4]
 80042ea:	7d9a      	ldrb	r2, [r3, #22]
 80042ec:	b90a      	cbnz	r2, 80042f2 <RDMHandler::RespondMessageAck()+0xa>
 80042ee:	2218      	movs	r2, #24
 80042f0:	705a      	strb	r2, [r3, #1]
 80042f2:	2200      	movs	r2, #0
 80042f4:	4611      	mov	r1, r2
 80042f6:	f7ff bfa9 	b.w	800424c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

080042fc <RDMHandler::GetSupportedParameters(unsigned short)>:
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 80042fe:	2900      	cmp	r1, #0
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8004302:	bf08      	it	eq
 8004304:	461a      	moveq	r2, r3
 8004306:	b4f0      	push	{r4, r5, r6, r7}
 8004308:	bf14      	ite	ne
 800430a:	2108      	movne	r1, #8
 800430c:	211e      	moveq	r1, #30
 800430e:	2518      	movs	r5, #24
 8004310:	4614      	mov	r4, r2
 8004312:	2300      	movs	r3, #0
 8004314:	fb05 2501 	mla	r5, r5, r1, r2
 8004318:	7d66      	ldrb	r6, [r4, #21]
 800431a:	b10e      	cbz	r6, 8004320 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 800431c:	3301      	adds	r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3418      	adds	r4, #24
 8004322:	42ac      	cmp	r4, r5
 8004324:	d1f8      	bne.n	8004318 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 8004326:	6886      	ldr	r6, [r0, #8]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	75f3      	strb	r3, [r6, #23]
 800432c:	230c      	movs	r3, #12
 800432e:	4359      	muls	r1, r3
 8004330:	2300      	movs	r3, #0
 8004332:	461c      	mov	r4, r3
 8004334:	f102 0c15 	add.w	ip, r2, #21
 8004338:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 800433c:	b14d      	cbz	r5, 8004352 <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 800433e:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8004342:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 8004346:	0a2d      	lsrs	r5, r5, #8
 8004348:	763d      	strb	r5, [r7, #24]
 800434a:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800434e:	3401      	adds	r4, #1
 8004350:	767d      	strb	r5, [r7, #25]
 8004352:	330c      	adds	r3, #12
 8004354:	4299      	cmp	r1, r3
 8004356:	d1ef      	bne.n	8004338 <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 8004358:	bcf0      	pop	{r4, r5, r6, r7}
 800435a:	f7ff bfc5 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800435e:	bf00      	nop
 8004360:	0800a2e0 	stmdaeq	r0, {r5, r6, r7, r9, sp, pc}
 8004364:	0800a5b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, sp, pc}

08004368 <RDMHandler::GetDeviceInfo(unsigned short)>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 800436c:	4605      	mov	r5, r0
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	b349      	cbz	r1, 80043c6 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8004372:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004376:	f7fe ff3b 	bl	80031f0 <RDMSubDevices::GetInfo(unsigned short)>
 800437a:	b1b8      	cbz	r0, 80043ac <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 800437c:	8803      	ldrh	r3, [r0, #0]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 8004384:	8803      	ldrh	r3, [r0, #0]
 8004386:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 800438a:	7903      	ldrb	r3, [r0, #4]
 800438c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 8004390:	7943      	ldrb	r3, [r0, #5]
 8004392:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 8004396:	8843      	ldrh	r3, [r0, #2]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 800439e:	8843      	ldrh	r3, [r0, #2]
 80043a0:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 80043a4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80043a8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 80043ac:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80043b0:	2213      	movs	r2, #19
 80043b2:	68a8      	ldr	r0, [r5, #8]
 80043b4:	75c2      	strb	r2, [r0, #23]
 80043b6:	3018      	adds	r0, #24
 80043b8:	f7ff feb9 	bl	800412e <memcpy.isra.0>
 80043bc:	4628      	mov	r0, r5
 80043be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043c2:	f7ff bf91 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80043c6:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 80043ca:	e7f1      	b.n	80043b0 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 80043cc:	20000640 	andcs	r0, r0, r0, asr #12

080043d0 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	2301      	movs	r3, #1
 80043d4:	6886      	ldr	r6, [r0, #8]
 80043d6:	4605      	mov	r5, r0
 80043d8:	75f3      	strb	r3, [r6, #23]
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 80043dc:	681c      	ldr	r4, [r3, #0]
 80043de:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 80043e2:	b37b      	cbz	r3, 8004444 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 80043e4:	f06f 0c0d 	mvn.w	ip, #13
 80043e8:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
 80043ec:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 80043f0:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
 80043f4:	f104 020e 	add.w	r2, r4, #14
 80043f8:	ebac 0c04 	sub.w	ip, ip, r4
 80043fc:	eb0c 0002 	add.w	r0, ip, r2
 8004400:	42b8      	cmp	r0, r7
 8004402:	d204      	bcs.n	800440e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 8004404:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004408:	4403      	add	r3, r0
 800440a:	b29b      	uxth	r3, r3
 800440c:	e7f6      	b.n	80043fc <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800440e:	4299      	cmp	r1, r3
 8004410:	d008      	beq.n	8004424 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 8004412:	2300      	movs	r3, #0
 8004414:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004418:	7633      	strb	r3, [r6, #24]
 800441a:	4628      	mov	r0, r5
 800441c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004420:	f7ff bf62 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004424:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004428:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800442c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8004430:	440b      	add	r3, r1
 8004432:	429a      	cmp	r2, r3
 8004434:	d1ed      	bne.n	8004412 <RDMHandler::GetFactoryDefaults(unsigned short)+0x42>
 8004436:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800443a:	f7fe ff6d 	bl	8003318 <RDMSubDevices::GetFactoryDefaults()>
 800443e:	4603      	mov	r3, r0
 8004440:	2800      	cmp	r0, #0
 8004442:	d0e7      	beq.n	8004414 <RDMHandler::GetFactoryDefaults(unsigned short)+0x44>
 8004444:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 8004448:	e7e6      	b.n	8004418 <RDMHandler::GetFactoryDefaults(unsigned short)+0x48>
 800444a:	bf00      	nop
 800444c:	20000640 	andcs	r0, r0, r0, asr #12

08004450 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 8004450:	2102      	movs	r1, #2
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800445a:	6883      	ldr	r3, [r0, #8]
 800445c:	75d9      	strb	r1, [r3, #23]
 800445e:	0a11      	lsrs	r1, r2, #8
 8004460:	7619      	strb	r1, [r3, #24]
 8004462:	765a      	strb	r2, [r3, #25]
 8004464:	f7ff bf40 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004468:	20000640 	andcs	r0, r0, r0, asr #12

0800446c <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800446c:	b510      	push	{r4, lr}
 800446e:	4604      	mov	r4, r0
 8004470:	2209      	movs	r2, #9
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8004474:	f7ff fedd 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 8004478:	4620      	mov	r0, r4
 800447a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447e:	f7ff bf33 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004482:	bf00      	nop
 8004484:	0800a2c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, pc}

08004488 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 8004488:	b510      	push	{r4, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 8004494:	312f      	adds	r1, #47	; 0x2f
 8004496:	f7ff fecc 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 800449a:	4620      	mov	r0, r4
 800449c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a0:	f7ff bf22 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80044a4:	20000640 	andcs	r0, r0, r0, asr #12

080044a8 <RDMHandler::GetDeviceLabel(unsigned short)>:
 80044a8:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 80044aa:	b513      	push	{r0, r1, r4, lr}
 80044ac:	4604      	mov	r4, r0
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	b171      	cbz	r1, 80044d0 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 80044b2:	466a      	mov	r2, sp
 80044b4:	308c      	adds	r0, #140	; 0x8c
 80044b6:	f7fe fea3 	bl	8003200 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 80044ba:	4620      	mov	r0, r4
 80044bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80044c0:	9900      	ldr	r1, [sp, #0]
 80044c2:	f7ff feb6 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7ff ff0e 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 80044cc:	b002      	add	sp, #8
 80044ce:	bd10      	pop	{r4, pc}
 80044d0:	f100 030e 	add.w	r3, r0, #14
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80044da:	f88d 3004 	strb.w	r3, [sp, #4]
 80044de:	e7ec      	b.n	80044ba <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 80044e0:	20000640 	andcs	r0, r0, r0, asr #12

080044e4 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 80044e4:	b510      	push	{r4, lr}
 80044e6:	4604      	mov	r4, r0
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 80044f0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80044f4:	f7ff fe9d 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 80044f8:	4620      	mov	r0, r4
 80044fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fe:	f7ff bef3 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004502:	bf00      	nop
 8004504:	20000640 	andcs	r0, r0, r0, asr #12

08004508 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 8004508:	2201      	movs	r2, #1
 800450a:	6883      	ldr	r3, [r0, #8]
 800450c:	75da      	strb	r2, [r3, #23]
 800450e:	4a02      	ldr	r2, [pc, #8]	; (8004518 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	761a      	strb	r2, [r3, #24]
 8004514:	f7ff bee8 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004518:	20000644 	andcs	r0, r0, r4, asr #12

0800451c <RDMHandler::GetLanguage(unsigned short)>:
 800451c:	b510      	push	{r4, lr}
 800451e:	4604      	mov	r4, r0
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 8004522:	2202      	movs	r2, #2
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	31c3      	adds	r1, #195	; 0xc3
 8004528:	f7ff fe83 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 800452c:	4620      	mov	r0, r4
 800452e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004532:	f7ff bed9 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004536:	bf00      	nop
 8004538:	20000640 	andcs	r0, r0, r0, asr #12

0800453c <RDMHandler::GetPersonality(unsigned short)>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	4f0d      	ldr	r7, [pc, #52]	; (8004574 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 8004540:	4604      	mov	r4, r0
 8004542:	460e      	mov	r6, r1
 8004544:	6838      	ldr	r0, [r7, #0]
 8004546:	b189      	cbz	r1, 800456c <RDMHandler::GetPersonality(unsigned short)+0x30>
 8004548:	308c      	adds	r0, #140	; 0x8c
 800454a:	f7fe fe88 	bl	800325e <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 800454e:	4605      	mov	r5, r0
 8004550:	4631      	mov	r1, r6
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f7ff fe2b 	bl	80041ae <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004558:	2202      	movs	r2, #2
 800455a:	68a3      	ldr	r3, [r4, #8]
 800455c:	7658      	strb	r0, [r3, #25]
 800455e:	75da      	strb	r2, [r3, #23]
 8004560:	761d      	strb	r5, [r3, #24]
 8004562:	4620      	mov	r0, r4
 8004564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004568:	f7ff bebe 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800456c:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
 8004570:	e7ee      	b.n	8004550 <RDMHandler::GetPersonality(unsigned short)+0x14>
 8004572:	bf00      	nop
 8004574:	20000640 	andcs	r0, r0, r0, asr #12

08004578 <RDMHandler::GetDmxStartAddress(unsigned short)>:
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 800457a:	b510      	push	{r4, lr}
 800457c:	4604      	mov	r4, r0
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	b169      	cbz	r1, 800459e <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8004582:	308c      	adds	r0, #140	; 0x8c
 8004584:	f7fe fe52 	bl	800322c <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 8004588:	2202      	movs	r2, #2
 800458a:	68a3      	ldr	r3, [r4, #8]
 800458c:	75da      	strb	r2, [r3, #23]
 800458e:	0a02      	lsrs	r2, r0, #8
 8004590:	7658      	strb	r0, [r3, #25]
 8004592:	761a      	strb	r2, [r3, #24]
 8004594:	4620      	mov	r0, r4
 8004596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459a:	f7ff bea5 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800459e:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 80045a2:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 80045a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80045aa:	b298      	uxth	r0, r3
 80045ac:	e7ec      	b.n	8004588 <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 80045ae:	bf00      	nop
 80045b0:	20000640 	andcs	r0, r0, r0, asr #12

080045b4 <RDMHandler::GetDeviceHours(unsigned short)>:
 80045b4:	2104      	movs	r1, #4
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 80045bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c0:	6883      	ldr	r3, [r0, #8]
 80045c2:	75d9      	strb	r1, [r3, #23]
 80045c4:	2100      	movs	r1, #0
 80045c6:	7619      	strb	r1, [r3, #24]
 80045c8:	7659      	strb	r1, [r3, #25]
 80045ca:	0a11      	lsrs	r1, r2, #8
 80045cc:	7699      	strb	r1, [r3, #26]
 80045ce:	76da      	strb	r2, [r3, #27]
 80045d0:	f7ff be8a 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80045d4:	20001814 	andcs	r1, r0, r4, lsl r8
 80045d8:	0036ee80 	eorseq	lr, r6, r0, lsl #29

080045dc <RDMHandler::GetDisplayInvert(unsigned short)>:
 80045dc:	2301      	movs	r3, #1
 80045de:	6882      	ldr	r2, [r0, #8]
 80045e0:	75d3      	strb	r3, [r2, #23]
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	b103      	cbz	r3, 80045ec <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 80045ea:	79db      	ldrb	r3, [r3, #7]
 80045ec:	7613      	strb	r3, [r2, #24]
 80045ee:	f7ff be7b 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80045f2:	bf00      	nop
 80045f4:	200016ec 	andcs	r1, r0, ip, ror #13

080045f8 <RDMHandler::GetDisplayLevel(unsigned short)>:
 80045f8:	2301      	movs	r3, #1
 80045fa:	6882      	ldr	r2, [r0, #8]
 80045fc:	75d3      	strb	r3, [r2, #23]
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	b103      	cbz	r3, 8004608 <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 8004606:	799b      	ldrb	r3, [r3, #6]
 8004608:	7613      	strb	r3, [r2, #24]
 800460a:	f7ff be6d 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800460e:	bf00      	nop
 8004610:	200016ec 	andcs	r1, r0, ip, ror #13

08004614 <RDMHandler::GetRealTimeClock(unsigned short)>:
 8004614:	b510      	push	{r4, lr}
 8004616:	4604      	mov	r4, r0
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	a901      	add	r1, sp, #4
 8004620:	f003 fd51 	bl	80080c6 <Hardware::GetTime(tm*)>
 8004624:	9a06      	ldr	r2, [sp, #24]
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 800462c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004630:	765a      	strb	r2, [r3, #25]
 8004632:	9a05      	ldr	r2, [sp, #20]
 8004634:	4620      	mov	r0, r4
 8004636:	3201      	adds	r2, #1
 8004638:	769a      	strb	r2, [r3, #26]
 800463a:	9a04      	ldr	r2, [sp, #16]
 800463c:	7619      	strb	r1, [r3, #24]
 800463e:	76da      	strb	r2, [r3, #27]
 8004640:	9a03      	ldr	r2, [sp, #12]
 8004642:	771a      	strb	r2, [r3, #28]
 8004644:	9a02      	ldr	r2, [sp, #8]
 8004646:	775a      	strb	r2, [r3, #29]
 8004648:	9a01      	ldr	r2, [sp, #4]
 800464a:	779a      	strb	r2, [r3, #30]
 800464c:	2207      	movs	r2, #7
 800464e:	75da      	strb	r2, [r3, #23]
 8004650:	f7ff fe4a 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 8004654:	b00a      	add	sp, #40	; 0x28
 8004656:	bd10      	pop	{r4, pc}
 8004658:	200017dc 	ldrdcs	r1, [r0], -ip

0800465c <RDMHandler::GetPowerState(unsigned short)>:
 800465c:	2201      	movs	r2, #1
 800465e:	6883      	ldr	r3, [r0, #8]
 8004660:	75da      	strb	r2, [r3, #23]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	761a      	strb	r2, [r3, #24]
 8004666:	f7ff be3f 	b.w	80042e8 <RDMHandler::RespondMessageAck()>

0800466a <RDMHandler::GetPerformSelfTest(unsigned short)>:
 800466a:	b538      	push	{r3, r4, r5, lr}
 800466c:	2301      	movs	r3, #1
 800466e:	6885      	ldr	r5, [r0, #8]
 8004670:	4604      	mov	r4, r0
 8004672:	75eb      	strb	r3, [r5, #23]
 8004674:	f7fd fb36 	bl	8001ce4 <rdm::selftest::Get()>
 8004678:	3800      	subs	r0, #0
 800467a:	bf18      	it	ne
 800467c:	2001      	movne	r0, #1
 800467e:	7628      	strb	r0, [r5, #24]
 8004680:	4620      	mov	r0, r4
 8004682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004686:	f7ff be2f 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
	...

0800468c <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 800468c:	b510      	push	{r4, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	2208      	movs	r2, #8
 8004692:	4904      	ldr	r1, [pc, #16]	; (80046a4 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8004694:	f7ff fdcd 	bl	8004232 <RDMHandler::HandleString(char const*, unsigned int)>
 8004698:	4620      	mov	r0, r4
 800469a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469e:	f7ff be23 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80046a2:	bf00      	nop
 80046a4:	0800a2ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sp, pc}

080046a8 <RDMHandler::GetSlotInfo(unsigned short)>:
 80046a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004734 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 80046b0:	4606      	mov	r6, r0
 80046b2:	6887      	ldr	r7, [r0, #8]
 80046b4:	4689      	mov	r9, r1
 80046b6:	f8d8 0000 	ldr.w	r0, [r8]
 80046ba:	b349      	cbz	r1, 8004710 <RDMHandler::GetSlotInfo(unsigned short)+0x68>
 80046bc:	308c      	adds	r0, #140	; 0x8c
 80046be:	f7fe fdc6 	bl	800324e <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 80046c2:	f04f 0a00 	mov.w	sl, #0
 80046c6:	282e      	cmp	r0, #46	; 0x2e
 80046c8:	bf28      	it	cs
 80046ca:	202e      	movcs	r0, #46	; 0x2e
 80046cc:	4654      	mov	r4, sl
 80046ce:	b285      	uxth	r5, r0
 80046d0:	fa1f f18a 	uxth.w	r1, sl
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d223      	bcs.n	8004720 <RDMHandler::GetSlotInfo(unsigned short)+0x78>
 80046d8:	f1b9 0f00 	cmp.w	r9, #0
 80046dc:	d115      	bne.n	800470a <RDMHandler::GetSlotInfo(unsigned short)+0x62>
 80046de:	f8d8 0000 	ldr.w	r0, [r8]
 80046e2:	aa01      	add	r2, sp, #4
 80046e4:	f7ff fd16 	bl	8004114 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 80046e8:	b178      	cbz	r0, 800470a <RDMHandler::GetSlotInfo(unsigned short)+0x62>
 80046ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046ee:	193a      	adds	r2, r7, r4
 80046f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80046f4:	7693      	strb	r3, [r2, #26]
 80046f6:	1d23      	adds	r3, r4, #4
 80046f8:	0a08      	lsrs	r0, r1, #8
 80046fa:	443b      	add	r3, r7
 80046fc:	f882 9018 	strb.w	r9, [r2, #24]
 8004700:	f882 a019 	strb.w	sl, [r2, #25]
 8004704:	76d0      	strb	r0, [r2, #27]
 8004706:	3405      	adds	r4, #5
 8004708:	7619      	strb	r1, [r3, #24]
 800470a:	f10a 0a01 	add.w	sl, sl, #1
 800470e:	e7df      	b.n	80046d0 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 8004710:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004714:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
 8004718:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800471c:	b298      	uxth	r0, r3
 800471e:	e7d0      	b.n	80046c2 <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8004720:	b2e4      	uxtb	r4, r4
 8004722:	75fc      	strb	r4, [r7, #23]
 8004724:	3418      	adds	r4, #24
 8004726:	4630      	mov	r0, r6
 8004728:	70bc      	strb	r4, [r7, #2]
 800472a:	f7ff fddd 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 800472e:	b002      	add	sp, #8
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	20000640 	andcs	r0, r0, r0, asr #12

08004738 <RDMHandler::RespondMessageNack(unsigned short)>:
 8004738:	460a      	mov	r2, r1
 800473a:	2102      	movs	r1, #2
 800473c:	f7ff bd86 	b.w	800424c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

08004740 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 8004740:	b510      	push	{r4, lr}
 8004742:	6843      	ldr	r3, [r0, #4]
 8004744:	4604      	mov	r4, r0
 8004746:	7d9a      	ldrb	r2, [r3, #22]
 8004748:	2a01      	cmp	r2, #1
 800474a:	d004      	beq.n	8004756 <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800474c:	2101      	movs	r1, #1
 800474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004752:	f7ff bff1 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004756:	7ddb      	ldrb	r3, [r3, #23]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800475c:	2bff      	cmp	r3, #255	; 0xff
 800475e:	d001      	beq.n	8004764 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 8004760:	2106      	movs	r1, #6
 8004762:	e7f4      	b.n	800474e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004764:	2100      	movs	r1, #0
 8004766:	68a2      	ldr	r2, [r4, #8]
 8004768:	2bff      	cmp	r3, #255	; 0xff
 800476a:	75d1      	strb	r1, [r2, #23]
 800476c:	d102      	bne.n	8004774 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800476e:	2104      	movs	r1, #4
 8004770:	4620      	mov	r0, r4
 8004772:	e7ec      	b.n	800474e <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	f003 fcbc 	bl	80080f4 <Hardware::Reboot()>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0f6      	beq.n	800476e <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	200017dc 	ldrdcs	r1, [r0], -ip

08004788 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	6843      	ldr	r3, [r0, #4]
 800478c:	460d      	mov	r5, r1
 800478e:	7d99      	ldrb	r1, [r3, #22]
 8004790:	4604      	mov	r4, r0
 8004792:	2901      	cmp	r1, #1
 8004794:	d004      	beq.n	80047a0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 8004796:	2101      	movs	r1, #1
 8004798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800479c:	f7ff bfcc 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 80047a0:	7ddb      	ldrb	r3, [r3, #23]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d901      	bls.n	80047aa <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 80047a6:	2106      	movs	r1, #6
 80047a8:	e7f6      	b.n	8004798 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 80047ac:	4f12      	ldr	r7, [pc, #72]	; (80047f8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 80047ae:	6816      	ldr	r6, [r2, #0]
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 80047b2:	6810      	ldr	r0, [r2, #0]
 80047b4:	4a12      	ldr	r2, [pc, #72]	; (8004800 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 80047b6:	b983      	cbnz	r3, 80047da <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 80047b8:	2102      	movs	r1, #2
 80047ba:	7013      	strb	r3, [r2, #0]
 80047bc:	f003 fbdc 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 80047c0:	7839      	ldrb	r1, [r7, #0]
 80047c2:	b111      	cbz	r1, 80047ca <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80047c4:	4630      	mov	r0, r6
 80047c6:	f7fd fb53 	bl	8001e70 <RDMIdentify::Off(rdm::identify::Mode)>
 80047ca:	b98d      	cbnz	r5, 80047f0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 80047cc:	68a3      	ldr	r3, [r4, #8]
 80047ce:	4620      	mov	r0, r4
 80047d0:	75dd      	strb	r5, [r3, #23]
 80047d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047d6:	f7ff bd87 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80047da:	7011      	strb	r1, [r2, #0]
 80047dc:	2104      	movs	r1, #4
 80047de:	f003 fbcb 	bl	8007f78 <LedBlink::SetMode(ledblink::Mode)>
 80047e2:	7839      	ldrb	r1, [r7, #0]
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d0f0      	beq.n	80047ca <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7fd fb27 	bl	8001e3c <RDMIdentify::On(rdm::identify::Mode)>
 80047ee:	e7ec      	b.n	80047ca <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000648 	andcs	r0, r0, r8, asr #12
 80047f8:	20000645 	andcs	r0, r0, r5, asr #12
 80047fc:	200017d8 	ldrdcs	r1, [r0], -r8
 8004800:	20000644 	andcs	r0, r0, r4, asr #12

08004804 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004804:	b470      	push	{r4, r5, r6}
 8004806:	6842      	ldr	r2, [r0, #4]
 8004808:	4603      	mov	r3, r0
 800480a:	7d94      	ldrb	r4, [r2, #22]
 800480c:	2c02      	cmp	r4, #2
 800480e:	d003      	beq.n	8004818 <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 8004810:	2101      	movs	r1, #1
 8004812:	bc70      	pop	{r4, r5, r6}
 8004814:	f7ff bf90 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004818:	4c0b      	ldr	r4, [pc, #44]	; (8004848 <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 800481a:	7dd6      	ldrb	r6, [r2, #23]
 800481c:	6824      	ldr	r4, [r4, #0]
 800481e:	f894 50c3 	ldrb.w	r5, [r4, #195]	; 0xc3
 8004822:	42ae      	cmp	r6, r5
 8004824:	d104      	bne.n	8004830 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 8004826:	7e15      	ldrb	r5, [r2, #24]
 8004828:	f894 20c4 	ldrb.w	r2, [r4, #196]	; 0xc4
 800482c:	4295      	cmp	r5, r2
 800482e:	d002      	beq.n	8004836 <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 8004830:	2106      	movs	r1, #6
 8004832:	4618      	mov	r0, r3
 8004834:	e7ed      	b.n	8004812 <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 8004836:	b921      	cbnz	r1, 8004842 <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 8004838:	6883      	ldr	r3, [r0, #8]
 800483a:	75d9      	strb	r1, [r3, #23]
 800483c:	bc70      	pop	{r4, r5, r6}
 800483e:	f7ff bd53 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004842:	bc70      	pop	{r4, r5, r6}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000640 	andcs	r0, r0, r0, asr #12

0800484c <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 800484c:	6842      	ldr	r2, [r0, #4]
 800484e:	7d92      	ldrb	r2, [r2, #22]
 8004850:	b112      	cbz	r2, 8004858 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 8004852:	2101      	movs	r1, #1
 8004854:	f7ff bf70 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004858:	2104      	movs	r1, #4
 800485a:	6883      	ldr	r3, [r0, #8]
 800485c:	75d9      	strb	r1, [r3, #23]
 800485e:	761a      	strb	r2, [r3, #24]
 8004860:	765a      	strb	r2, [r3, #25]
 8004862:	769a      	strb	r2, [r3, #26]
 8004864:	76da      	strb	r2, [r3, #27]
 8004866:	f7ff bd3f 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
	...

0800486c <RDMHandler::SetPersonality(bool, unsigned short)>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	6843      	ldr	r3, [r0, #4]
 8004870:	4615      	mov	r5, r2
 8004872:	7d9a      	ldrb	r2, [r3, #22]
 8004874:	4604      	mov	r4, r0
 8004876:	2a01      	cmp	r2, #1
 8004878:	d004      	beq.n	8004884 <RDMHandler::SetPersonality(bool, unsigned short)+0x18>
 800487a:	2101      	movs	r1, #1
 800487c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004880:	f7ff bf5a 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004884:	4f0c      	ldr	r7, [pc, #48]	; (80048b8 <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>)
 8004886:	7dde      	ldrb	r6, [r3, #23]
 8004888:	4629      	mov	r1, r5
 800488a:	6838      	ldr	r0, [r7, #0]
 800488c:	f7ff fc8f 	bl	80041ae <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004890:	b10e      	cbz	r6, 8004896 <RDMHandler::SetPersonality(bool, unsigned short)+0x2a>
 8004892:	4286      	cmp	r6, r0
 8004894:	d902      	bls.n	800489c <RDMHandler::SetPersonality(bool, unsigned short)+0x30>
 8004896:	2106      	movs	r1, #6
 8004898:	4620      	mov	r0, r4
 800489a:	e7ef      	b.n	800487c <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 800489c:	4632      	mov	r2, r6
 800489e:	6838      	ldr	r0, [r7, #0]
 80048a0:	4629      	mov	r1, r5
 80048a2:	f7ff fc8b 	bl	80041bc <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 80048a6:	2200      	movs	r2, #0
 80048a8:	68a3      	ldr	r3, [r4, #8]
 80048aa:	4620      	mov	r0, r4
 80048ac:	75da      	strb	r2, [r3, #23]
 80048ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048b2:	f7ff bd19 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80048b6:	bf00      	nop
 80048b8:	20000640 	andcs	r0, r0, r0, asr #12

080048bc <RDMHandler::GetPersonalityDescription(unsigned short)>:
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	6843      	ldr	r3, [r0, #4]
 80048c2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800493c <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 80048c6:	7dde      	ldrb	r6, [r3, #23]
 80048c8:	4604      	mov	r4, r0
 80048ca:	f8d9 0000 	ldr.w	r0, [r9]
 80048ce:	460f      	mov	r7, r1
 80048d0:	f7ff fc6d 	bl	80041ae <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80048d4:	b10e      	cbz	r6, 80048da <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 80048d6:	4286      	cmp	r6, r0
 80048d8:	d905      	bls.n	80048e6 <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 80048da:	4620      	mov	r0, r4
 80048dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	2106      	movs	r1, #6
 80048e2:	f7ff bf29 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 80048e6:	4632      	mov	r2, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f8d9 0000 	ldr.w	r0, [r9]
 80048ee:	f7ff fc52 	bl	8004196 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 80048f2:	8803      	ldrh	r3, [r0, #0]
 80048f4:	68a5      	ldr	r5, [r4, #8]
 80048f6:	0a1a      	lsrs	r2, r3, #8
 80048f8:	4639      	mov	r1, r7
 80048fa:	766a      	strb	r2, [r5, #25]
 80048fc:	76ab      	strb	r3, [r5, #26]
 80048fe:	4632      	mov	r2, r6
 8004900:	f8d9 0000 	ldr.w	r0, [r9]
 8004904:	762e      	strb	r6, [r5, #24]
 8004906:	f7ff fc46 	bl	8004196 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 800490a:	2300      	movs	r3, #0
 800490c:	f105 081b 	add.w	r8, r5, #27
 8004910:	1dc1      	adds	r1, r0, #7
 8004912:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004914:	b2da      	uxtb	r2, r3
 8004916:	42b3      	cmp	r3, r6
 8004918:	d208      	bcs.n	800492c <RDMHandler::GetPersonalityDescription(unsigned short)+0x70>
 800491a:	3301      	adds	r3, #1
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d004      	beq.n	800492a <RDMHandler::GetPersonalityDescription(unsigned short)+0x6e>
 8004920:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004924:	f808 2b01 	strb.w	r2, [r8], #1
 8004928:	e7f3      	b.n	8004912 <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 800492a:	2220      	movs	r2, #32
 800492c:	3203      	adds	r2, #3
 800492e:	75ea      	strb	r2, [r5, #23]
 8004930:	4620      	mov	r0, r4
 8004932:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004936:	f7ff bcd7 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800493a:	bf00      	nop
 800493c:	20000640 	andcs	r0, r0, r0, asr #12

08004940 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	6846      	ldr	r6, [r0, #4]
 8004944:	460d      	mov	r5, r1
 8004946:	7db3      	ldrb	r3, [r6, #22]
 8004948:	4604      	mov	r4, r0
 800494a:	2b02      	cmp	r3, #2
 800494c:	4611      	mov	r1, r2
 800494e:	d004      	beq.n	800495a <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 8004950:	2101      	movs	r1, #1
 8004952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004956:	f7ff beef 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 800495a:	7df2      	ldrb	r2, [r6, #23]
 800495c:	7e33      	ldrb	r3, [r6, #24]
 800495e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004962:	b29a      	uxth	r2, r3
 8004964:	1e53      	subs	r3, r2, #1
 8004966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496a:	d301      	bcc.n	8004970 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 800496c:	2106      	movs	r1, #6
 800496e:	e7f0      	b.n	8004952 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	f7ff fbe5 	bl	8004142 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004978:	b935      	cbnz	r5, 8004988 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 800497a:	68a3      	ldr	r3, [r4, #8]
 800497c:	4620      	mov	r0, r4
 800497e:	75dd      	strb	r5, [r3, #23]
 8004980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004984:	f7ff bcb0 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	bf00      	nop
 800498c:	20000640 	andcs	r0, r0, r0, asr #12

08004990 <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	6843      	ldr	r3, [r0, #4]
 8004994:	4605      	mov	r5, r0
 8004996:	7dde      	ldrb	r6, [r3, #23]
 8004998:	2eff      	cmp	r6, #255	; 0xff
 800499a:	d004      	beq.n	80049a6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <RDMHandler::GetSensorDefinition(unsigned short)+0xa4>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	7903      	ldrb	r3, [r0, #4]
 80049a2:	42b3      	cmp	r3, r6
 80049a4:	d805      	bhi.n	80049b2 <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 80049a6:	4628      	mov	r0, r5
 80049a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049ac:	2106      	movs	r1, #6
 80049ae:	f7ff bec3 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 80049b2:	4631      	mov	r1, r6
 80049b4:	68ac      	ldr	r4, [r5, #8]
 80049b6:	f7fd fded 	bl	8002594 <RDMSensors::GetDefintion(unsigned char)>
 80049ba:	7803      	ldrb	r3, [r0, #0]
 80049bc:	42b3      	cmp	r3, r6
 80049be:	d1f2      	bne.n	80049a6 <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 80049c0:	7623      	strb	r3, [r4, #24]
 80049c2:	7843      	ldrb	r3, [r0, #1]
 80049c4:	f100 010c 	add.w	r1, r0, #12
 80049c8:	7663      	strb	r3, [r4, #25]
 80049ca:	7883      	ldrb	r3, [r0, #2]
 80049cc:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80049d0:	76a3      	strb	r3, [r4, #26]
 80049d2:	78c3      	ldrb	r3, [r0, #3]
 80049d4:	76e3      	strb	r3, [r4, #27]
 80049d6:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80049da:	7723      	strb	r3, [r4, #28]
 80049dc:	8883      	ldrh	r3, [r0, #4]
 80049de:	7763      	strb	r3, [r4, #29]
 80049e0:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80049e4:	77a3      	strb	r3, [r4, #30]
 80049e6:	88c3      	ldrh	r3, [r0, #6]
 80049e8:	77e3      	strb	r3, [r4, #31]
 80049ea:	f990 3009 	ldrsb.w	r3, [r0, #9]
 80049ee:	f884 3020 	strb.w	r3, [r4, #32]
 80049f2:	8903      	ldrh	r3, [r0, #8]
 80049f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80049f8:	f990 300b 	ldrsb.w	r3, [r0, #11]
 80049fc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004a00:	8943      	ldrh	r3, [r0, #10]
 8004a02:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8004a06:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004a0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004a0e:	230d      	movs	r3, #13
 8004a10:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8004a14:	f1a3 060d 	sub.w	r6, r3, #13
 8004a18:	42b7      	cmp	r7, r6
 8004a1a:	dd05      	ble.n	8004a28 <RDMHandler::GetSensorDefinition(unsigned short)+0x98>
 8004a1c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004a20:	3301      	adds	r3, #1
 8004a22:	f802 6b01 	strb.w	r6, [r2], #1
 8004a26:	e7f3      	b.n	8004a10 <RDMHandler::GetSensorDefinition(unsigned short)+0x80>
 8004a28:	75e3      	strb	r3, [r4, #23]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a30:	f7ff bc5a 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004a34:	200001f8 	strdcs	r0, [r0], -r8

08004a38 <RDMHandler::GetSensorValue(unsigned short)>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	6843      	ldr	r3, [r0, #4]
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	7d9a      	ldrb	r2, [r3, #22]
 8004a40:	2a01      	cmp	r2, #1
 8004a42:	d004      	beq.n	8004a4e <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004a44:	2101      	movs	r1, #1
 8004a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a4a:	f7ff be75 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004a4e:	7dde      	ldrb	r6, [r3, #23]
 8004a50:	2eff      	cmp	r6, #255	; 0xff
 8004a52:	d004      	beq.n	8004a5e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004a54:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	7903      	ldrb	r3, [r0, #4]
 8004a5a:	42b3      	cmp	r3, r6
 8004a5c:	d802      	bhi.n	8004a64 <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004a5e:	2106      	movs	r1, #6
 8004a60:	4628      	mov	r0, r5
 8004a62:	e7f0      	b.n	8004a46 <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004a64:	4631      	mov	r1, r6
 8004a66:	68ac      	ldr	r4, [r5, #8]
 8004a68:	f7fd fd99 	bl	800259e <RDMSensors::GetValues(unsigned char)>
 8004a6c:	7a03      	ldrb	r3, [r0, #8]
 8004a6e:	42b3      	cmp	r3, r6
 8004a70:	d1f5      	bne.n	8004a5e <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004a72:	2309      	movs	r3, #9
 8004a74:	75e3      	strb	r3, [r4, #23]
 8004a76:	2321      	movs	r3, #33	; 0x21
 8004a78:	70a3      	strb	r3, [r4, #2]
 8004a7a:	7a03      	ldrb	r3, [r0, #8]
 8004a7c:	7623      	strb	r3, [r4, #24]
 8004a7e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004a82:	7663      	strb	r3, [r4, #25]
 8004a84:	8803      	ldrh	r3, [r0, #0]
 8004a86:	76a3      	strb	r3, [r4, #26]
 8004a88:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004a8c:	76e3      	strb	r3, [r4, #27]
 8004a8e:	8843      	ldrh	r3, [r0, #2]
 8004a90:	7723      	strb	r3, [r4, #28]
 8004a92:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004a96:	7763      	strb	r3, [r4, #29]
 8004a98:	8883      	ldrh	r3, [r0, #4]
 8004a9a:	77a3      	strb	r3, [r4, #30]
 8004a9c:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004aa0:	77e3      	strb	r3, [r4, #31]
 8004aa2:	88c3      	ldrh	r3, [r0, #6]
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f884 3020 	strb.w	r3, [r4, #32]
 8004aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aae:	f7ff bc1b 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004ab2:	bf00      	nop
 8004ab4:	200001f8 	strdcs	r0, [r0], -r8

08004ab8 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	6843      	ldr	r3, [r0, #4]
 8004abe:	4606      	mov	r6, r0
 8004ac0:	7d9a      	ldrb	r2, [r3, #22]
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	2a01      	cmp	r2, #1
 8004ac6:	d004      	beq.n	8004ad2 <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004ac8:	2101      	movs	r1, #1
 8004aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	f7ff be33 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ad2:	7ddf      	ldrb	r7, [r3, #23]
 8004ad4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004b68 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004ad8:	2fff      	cmp	r7, #255	; 0xff
 8004ada:	f8d8 3000 	ldr.w	r3, [r8]
 8004ade:	d004      	beq.n	8004aea <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004ae0:	791a      	ldrb	r2, [r3, #4]
 8004ae2:	42ba      	cmp	r2, r7
 8004ae4:	d801      	bhi.n	8004aea <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004ae6:	2106      	movs	r1, #6
 8004ae8:	e7ef      	b.n	8004aca <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004aea:	4639      	mov	r1, r7
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd fd5b 	bl	80025a8 <RDMSensors::SetValues(unsigned char)>
 8004af2:	bbb5      	cbnz	r5, 8004b62 <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004af4:	2fff      	cmp	r7, #255	; 0xff
 8004af6:	68b4      	ldr	r4, [r6, #8]
 8004af8:	d112      	bne.n	8004b20 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004afa:	2309      	movs	r3, #9
 8004afc:	75e3      	strb	r3, [r4, #23]
 8004afe:	2321      	movs	r3, #33	; 0x21
 8004b00:	7625      	strb	r5, [r4, #24]
 8004b02:	70a3      	strb	r3, [r4, #2]
 8004b04:	7665      	strb	r5, [r4, #25]
 8004b06:	76a5      	strb	r5, [r4, #26]
 8004b08:	76e5      	strb	r5, [r4, #27]
 8004b0a:	7725      	strb	r5, [r4, #28]
 8004b0c:	7765      	strb	r5, [r4, #29]
 8004b0e:	77a5      	strb	r5, [r4, #30]
 8004b10:	77e5      	strb	r5, [r4, #31]
 8004b12:	f884 5020 	strb.w	r5, [r4, #32]
 8004b16:	4630      	mov	r0, r6
 8004b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1c:	f7ff bbe4 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004b20:	4639      	mov	r1, r7
 8004b22:	f8d8 0000 	ldr.w	r0, [r8]
 8004b26:	f7fd fd3a 	bl	800259e <RDMSensors::GetValues(unsigned char)>
 8004b2a:	2309      	movs	r3, #9
 8004b2c:	75e3      	strb	r3, [r4, #23]
 8004b2e:	2321      	movs	r3, #33	; 0x21
 8004b30:	70a3      	strb	r3, [r4, #2]
 8004b32:	7a03      	ldrb	r3, [r0, #8]
 8004b34:	7623      	strb	r3, [r4, #24]
 8004b36:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004b3a:	7663      	strb	r3, [r4, #25]
 8004b3c:	8803      	ldrh	r3, [r0, #0]
 8004b3e:	76a3      	strb	r3, [r4, #26]
 8004b40:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004b44:	76e3      	strb	r3, [r4, #27]
 8004b46:	8843      	ldrh	r3, [r0, #2]
 8004b48:	7723      	strb	r3, [r4, #28]
 8004b4a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004b4e:	7763      	strb	r3, [r4, #29]
 8004b50:	8883      	ldrh	r3, [r0, #4]
 8004b52:	77a3      	strb	r3, [r4, #30]
 8004b54:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004b58:	77e3      	strb	r3, [r4, #31]
 8004b5a:	88c3      	ldrh	r3, [r0, #6]
 8004b5c:	f884 3020 	strb.w	r3, [r4, #32]
 8004b60:	e7d9      	b.n	8004b16 <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b66:	bf00      	nop
 8004b68:	200001f8 	strdcs	r0, [r0], -r8

08004b6c <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	6843      	ldr	r3, [r0, #4]
 8004b70:	4604      	mov	r4, r0
 8004b72:	7d9a      	ldrb	r2, [r3, #22]
 8004b74:	460d      	mov	r5, r1
 8004b76:	2a01      	cmp	r2, #1
 8004b78:	d004      	beq.n	8004b84 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b80:	f7ff bdda 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004b84:	7dd9      	ldrb	r1, [r3, #23]
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004b88:	29ff      	cmp	r1, #255	; 0xff
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	7903      	ldrb	r3, [r0, #4]
 8004b8e:	d103      	bne.n	8004b98 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004b90:	b923      	cbnz	r3, 8004b9c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004b92:	2106      	movs	r1, #6
 8004b94:	4620      	mov	r0, r4
 8004b96:	e7f1      	b.n	8004b7c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d2fa      	bcs.n	8004b92 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004b9c:	f7fd fd1b 	bl	80025d6 <RDMSensors::SetRecord(unsigned char)>
 8004ba0:	b935      	cbnz	r5, 8004bb0 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	75dd      	strb	r5, [r3, #23]
 8004ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bac:	f7ff bb9c 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200001f8 	strdcs	r0, [r0], -r8

08004bb8 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004bb8:	2104      	movs	r1, #4
 8004bba:	f7ff bdbd 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004bc0 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	6843      	ldr	r3, [r0, #4]
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	7d9a      	ldrb	r2, [r3, #22]
 8004bc8:	2a01      	cmp	r2, #1
 8004bca:	d004      	beq.n	8004bd6 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f7ff bdb1 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004bd6:	7ddd      	ldrb	r5, [r3, #23]
 8004bd8:	2d02      	cmp	r5, #2
 8004bda:	d102      	bne.n	8004be2 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004bdc:	2106      	movs	r1, #6
 8004bde:	f7ff fdab 	bl	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004be2:	1e6b      	subs	r3, r5, #1
 8004be4:	4259      	negs	r1, r3
 8004be6:	4159      	adcs	r1, r3
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6998      	ldr	r0, [r3, #24]
 8004bee:	b110      	cbz	r0, 8004bf6 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004bf0:	6803      	ldr	r3, [r0, #0]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4798      	blx	r3
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	68a3      	ldr	r3, [r4, #8]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	75da      	strb	r2, [r3, #23]
 8004bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c02:	f7ff bb71 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004c06:	bf00      	nop
 8004c08:	200016ec 	andcs	r1, r0, ip, ror #13

08004c0c <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	6843      	ldr	r3, [r0, #4]
 8004c10:	4604      	mov	r4, r0
 8004c12:	7d99      	ldrb	r1, [r3, #22]
 8004c14:	2901      	cmp	r1, #1
 8004c16:	d004      	beq.n	8004c22 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	f7ff bd8b 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c22:	4e0b      	ldr	r6, [pc, #44]	; (8004c50 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004c24:	7ddd      	ldrb	r5, [r3, #23]
 8004c26:	6830      	ldr	r0, [r6, #0]
 8004c28:	b105      	cbz	r5, 8004c2c <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	f7fc fbfc 	bl	8001428 <Display::SetSleep(bool)>
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	6998      	ldr	r0, [r3, #24]
 8004c34:	b118      	cbz	r0, 8004c3e <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004c36:	6803      	ldr	r3, [r0, #0]
 8004c38:	4629      	mov	r1, r5
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4798      	blx	r3
 8004c3e:	2200      	movs	r2, #0
 8004c40:	68a3      	ldr	r3, [r4, #8]
 8004c42:	4620      	mov	r0, r4
 8004c44:	75da      	strb	r2, [r3, #23]
 8004c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c4a:	f7ff bb4d 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004c4e:	bf00      	nop
 8004c50:	200016ec 	andcs	r1, r0, ip, ror #13

08004c54 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	6843      	ldr	r3, [r0, #4]
 8004c58:	4604      	mov	r4, r0
 8004c5a:	7d9a      	ldrb	r2, [r3, #22]
 8004c5c:	b08a      	sub	sp, #40	; 0x28
 8004c5e:	2a07      	cmp	r2, #7
 8004c60:	d005      	beq.n	8004c6e <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004c62:	2101      	movs	r1, #1
 8004c64:	b00a      	add	sp, #40	; 0x28
 8004c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6a:	f7ff bd65 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004c6e:	7dd8      	ldrb	r0, [r3, #23]
 8004c70:	7e1a      	ldrb	r2, [r3, #24]
 8004c72:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004c76:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004c7a:	9206      	str	r2, [sp, #24]
 8004c7c:	7e5a      	ldrb	r2, [r3, #25]
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	9205      	str	r2, [sp, #20]
 8004c82:	7e9a      	ldrb	r2, [r3, #26]
 8004c84:	9204      	str	r2, [sp, #16]
 8004c86:	7eda      	ldrb	r2, [r3, #27]
 8004c88:	9203      	str	r2, [sp, #12]
 8004c8a:	7f1a      	ldrb	r2, [r3, #28]
 8004c8c:	7f5b      	ldrb	r3, [r3, #29]
 8004c8e:	9202      	str	r2, [sp, #8]
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	b979      	cbnz	r1, 8004cb4 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004c94:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004c96:	a901      	add	r1, sp, #4
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f003 f9ff 	bl	800809c <Hardware::SetTime(tm const*)>
 8004c9e:	b918      	cbnz	r0, 8004ca8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff fd48 	bl	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	4620      	mov	r0, r4
 8004cae:	75da      	strb	r2, [r3, #23]
 8004cb0:	f7ff fb1a 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 8004cb4:	b00a      	add	sp, #40	; 0x28
 8004cb6:	bd10      	pop	{r4, pc}
 8004cb8:	200017dc 	ldrdcs	r1, [r0], -ip

08004cbc <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004cbc:	6842      	ldr	r2, [r0, #4]
 8004cbe:	7d91      	ldrb	r1, [r2, #22]
 8004cc0:	2901      	cmp	r1, #1
 8004cc2:	d002      	beq.n	8004cca <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	f7ff bd37 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004cca:	7dd1      	ldrb	r1, [r2, #23]
 8004ccc:	1eca      	subs	r2, r1, #3
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	2afb      	cmp	r2, #251	; 0xfb
 8004cd2:	d801      	bhi.n	8004cd8 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004cd4:	2106      	movs	r1, #6
 8004cd6:	e7f6      	b.n	8004cc6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004cd8:	29ff      	cmp	r1, #255	; 0xff
 8004cda:	d104      	bne.n	8004ce6 <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6883      	ldr	r3, [r0, #8]
 8004ce0:	75da      	strb	r2, [r3, #23]
 8004ce2:	f7ff bb01 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	e7ed      	b.n	8004cc6 <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004cea <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004cea:	b510      	push	{r4, lr}
 8004cec:	6843      	ldr	r3, [r0, #4]
 8004cee:	4604      	mov	r4, r0
 8004cf0:	7d9a      	ldrb	r2, [r3, #22]
 8004cf2:	2a01      	cmp	r2, #1
 8004cf4:	d004      	beq.n	8004d00 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfc:	f7ff bd1c 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d00:	7dd8      	ldrb	r0, [r3, #23]
 8004d02:	f7fc fff5 	bl	8001cf0 <rdm::selftest::Set(unsigned char)>
 8004d06:	b910      	cbnz	r0, 8004d0e <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004d08:	2106      	movs	r1, #6
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	e7f4      	b.n	8004cf8 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	4620      	mov	r0, r4
 8004d14:	75da      	strb	r2, [r3, #23]
 8004d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d1a:	f7ff bae5 	b.w	80042e8 <RDMHandler::RespondMessageAck()>

08004d1e <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004d1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d20:	6845      	ldr	r5, [r0, #4]
 8004d22:	4604      	mov	r4, r0
 8004d24:	a901      	add	r1, sp, #4
 8004d26:	7de8      	ldrb	r0, [r5, #23]
 8004d28:	f7fd f816 	bl	8001d58 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	b928      	cbnz	r0, 8004d3c <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004d30:	2106      	movs	r1, #6
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff fd00 	bl	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd30      	pop	{r4, r5, pc}
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	2a20      	cmp	r2, #32
 8004d40:	bf84      	itt	hi
 8004d42:	2220      	movhi	r2, #32
 8004d44:	9201      	strhi	r2, [sp, #4]
 8004d46:	9901      	ldr	r1, [sp, #4]
 8004d48:	68a2      	ldr	r2, [r4, #8]
 8004d4a:	1c48      	adds	r0, r1, #1
 8004d4c:	75d0      	strb	r0, [r2, #23]
 8004d4e:	7de8      	ldrb	r0, [r5, #23]
 8004d50:	3219      	adds	r2, #25
 8004d52:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004d56:	4419      	add	r1, r3
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d004      	beq.n	8004d66 <RDMHandler::GetSelfTestDescription(unsigned short)+0x48>
 8004d5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004d60:	f802 0b01 	strb.w	r0, [r2], #1
 8004d64:	e7f8      	b.n	8004d58 <RDMHandler::GetSelfTestDescription(unsigned short)+0x3a>
 8004d66:	4620      	mov	r0, r4
 8004d68:	f7ff fabe 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 8004d6c:	e7e4      	b.n	8004d38 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
	...

08004d70 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d72:	4604      	mov	r4, r0
 8004d74:	b961      	cbnz	r1, 8004d90 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004d76:	6846      	ldr	r6, [r0, #4]
 8004d78:	466a      	mov	r2, sp
 8004d7a:	7df3      	ldrb	r3, [r6, #23]
 8004d7c:	7e35      	ldrb	r5, [r6, #24]
 8004d7e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <RDMHandler::GetSlotDescription(unsigned short)+0x78>)
 8004d84:	b2ad      	uxth	r5, r5
 8004d86:	4629      	mov	r1, r5
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f7ff f9c3 	bl	8004114 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004d8e:	b928      	cbnz	r0, 8004d9c <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004d90:	2106      	movs	r1, #6
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff fcd0 	bl	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f8bd 1000 	ldrh.w	r1, [sp]
 8004da2:	aa01      	add	r2, sp, #4
 8004da4:	f000 fa3a 	bl	800521c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d0f0      	beq.n	8004d90 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004dae:	9a01      	ldr	r2, [sp, #4]
 8004db0:	2a20      	cmp	r2, #32
 8004db2:	bf84      	itt	hi
 8004db4:	2220      	movhi	r2, #32
 8004db6:	9201      	strhi	r2, [sp, #4]
 8004db8:	9901      	ldr	r1, [sp, #4]
 8004dba:	68a2      	ldr	r2, [r4, #8]
 8004dbc:	1c88      	adds	r0, r1, #2
 8004dbe:	75d0      	strb	r0, [r2, #23]
 8004dc0:	7df0      	ldrb	r0, [r6, #23]
 8004dc2:	321a      	adds	r2, #26
 8004dc4:	f802 0c02 	strb.w	r0, [r2, #-2]
 8004dc8:	7e30      	ldrb	r0, [r6, #24]
 8004dca:	4419      	add	r1, r3
 8004dcc:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	d004      	beq.n	8004dde <RDMHandler::GetSlotDescription(unsigned short)+0x6e>
 8004dd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004dd8:	f802 0b01 	strb.w	r0, [r2], #1
 8004ddc:	e7f8      	b.n	8004dd0 <RDMHandler::GetSlotDescription(unsigned short)+0x60>
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff fa82 	bl	80042e8 <RDMHandler::RespondMessageAck()>
 8004de4:	e7d8      	b.n	8004d98 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004de6:	bf00      	nop
 8004de8:	20000640 	andcs	r0, r0, r0, asr #12

08004dec <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dee:	6843      	ldr	r3, [r0, #4]
 8004df0:	4605      	mov	r5, r0
 8004df2:	7d9b      	ldrb	r3, [r3, #22]
 8004df4:	460e      	mov	r6, r1
 8004df6:	b12b      	cbz	r3, 8004e04 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004df8:	2101      	movs	r1, #1
 8004dfa:	b003      	add	sp, #12
 8004dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004e00:	f7ff bc9a 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004e04:	f06f 070d 	mvn.w	r7, #13
 8004e08:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xbc>)
 8004e0a:	4669      	mov	r1, sp
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004e18:	1d20      	adds	r0, r4, #4
 8004e1a:	f88d 3004 	strb.w	r3, [sp, #4]
 8004e1e:	f7ff f808 	bl	8003e32 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004e22:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8004e26:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004e2a:	f104 020e 	add.w	r2, r4, #14
 8004e2e:	1b3f      	subs	r7, r7, r4
 8004e30:	18b9      	adds	r1, r7, r2
 8004e32:	4288      	cmp	r0, r1
 8004e34:	d904      	bls.n	8004e40 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x54>
 8004e36:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004e3a:	440b      	add	r3, r1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	e7f7      	b.n	8004e30 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8004e40:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
 8004e44:	2201      	movs	r2, #1
 8004e46:	2100      	movs	r1, #0
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7ff f9b7 	bl	80041bc <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4620      	mov	r0, r4
 8004e52:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
 8004e56:	f7ff f974 	bl	8004142 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004e5a:	2213      	movs	r2, #19
 8004e5c:	f104 019d 	add.w	r1, r4, #157	; 0x9d
 8004e60:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8004e64:	f7ff f963 	bl	800412e <memcpy.isra.0>
 8004e68:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8004e6c:	f7fe fa67 	bl	800333e <RDMSubDevices::SetFactoryDefaults()>
 8004e70:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8004e74:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
 8004e78:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8004e82:	2301      	movs	r3, #1
 8004e84:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 8004e88:	b110      	cbz	r0, 8004e90 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xa4>
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4798      	blx	r3
 8004e90:	b93e      	cbnz	r6, 8004ea2 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb6>
 8004e92:	4628      	mov	r0, r5
 8004e94:	68ab      	ldr	r3, [r5, #8]
 8004e96:	75de      	strb	r6, [r3, #23]
 8004e98:	b003      	add	sp, #12
 8004e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004e9e:	f7ff ba23 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004ea2:	b003      	add	sp, #12
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000640 	andcs	r0, r0, r0, asr #12

08004eac <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8004eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eae:	6845      	ldr	r5, [r0, #4]
 8004eb0:	460e      	mov	r6, r1
 8004eb2:	7dab      	ldrb	r3, [r5, #22]
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	4611      	mov	r1, r2
 8004eba:	d905      	bls.n	8004ec8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	b002      	add	sp, #8
 8004ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ec4:	f7ff bc38 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8004eca:	6810      	ldr	r0, [r2, #0]
 8004ecc:	f105 0217 	add.w	r2, r5, #23
 8004ed0:	b159      	cbz	r1, 8004eea <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8004ed2:	308c      	adds	r0, #140	; 0x8c
 8004ed4:	f7fe f99d 	bl	8003212 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8004ed8:	b97e      	cbnz	r6, 8004efa <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8004eda:	4620      	mov	r0, r4
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	75de      	strb	r6, [r3, #23]
 8004ee0:	b002      	add	sp, #8
 8004ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ee6:	f7ff b9ff 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8004eea:	4669      	mov	r1, sp
 8004eec:	3004      	adds	r0, #4
 8004eee:	9200      	str	r2, [sp, #0]
 8004ef0:	f88d 3004 	strb.w	r3, [sp, #4]
 8004ef4:	f7fe ff9d 	bl	8003e32 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004ef8:	e7ee      	b.n	8004ed8 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 8004efa:	b002      	add	sp, #8
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
 8004efe:	bf00      	nop
 8004f00:	20000640 	andcs	r0, r0, r0, asr #12

08004f04 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8004f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f08:	4616      	mov	r6, r2
 8004f0a:	2700      	movs	r7, #0
 8004f0c:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 8004f10:	2c20      	cmp	r4, #32
 8004f12:	46be      	mov	lr, r7
 8004f14:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8004f18:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004f1c:	d004      	beq.n	8004f28 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 8004f1e:	2105      	movs	r1, #5
 8004f20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f24:	f7ff bc08 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8004f28:	4c2d      	ldr	r4, [pc, #180]	; (8004fe0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8004f2a:	6824      	ldr	r4, [r4, #0]
 8004f2c:	88a4      	ldrh	r4, [r4, #4]
 8004f2e:	4294      	cmp	r4, r2
 8004f30:	d205      	bcs.n	8004f3e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004f32:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004f36:	42a2      	cmp	r2, r4
 8004f38:	d001      	beq.n	8004f3e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004f3a:	2109      	movs	r1, #9
 8004f3c:	e7f0      	b.n	8004f20 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004f3e:	f04f 0c1e 	mov.w	ip, #30
 8004f42:	2400      	movs	r4, #0
 8004f44:	4d27      	ldr	r5, [pc, #156]	; (8004fe4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 8004f46:	f8b5 9000 	ldrh.w	r9, [r5]
 8004f4a:	4599      	cmp	r9, r3
 8004f4c:	bf02      	ittt	eq
 8004f4e:	462c      	moveq	r4, r5
 8004f50:	7daf      	ldrbeq	r7, [r5, #22]
 8004f52:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8004f56:	f1bc 0c01 	subs.w	ip, ip, #1
 8004f5a:	f105 0518 	add.w	r5, r5, #24
 8004f5e:	d1f2      	bne.n	8004f46 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 8004f60:	b90c      	cbnz	r4, 8004f66 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004f62:	2100      	movs	r1, #0
 8004f64:	e7dc      	b.n	8004f20 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004f66:	7803      	ldrb	r3, [r0, #0]
 8004f68:	b19b      	cbz	r3, 8004f92 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 8004f6a:	2f00      	cmp	r7, #0
 8004f6c:	d0f9      	beq.n	8004f62 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 8004f6e:	2e20      	cmp	r6, #32
 8004f70:	d121      	bne.n	8004fb6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 8004f72:	2900      	cmp	r1, #0
 8004f74:	d131      	bne.n	8004fda <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 8004f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d0dd      	beq.n	8004f3a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	b913      	cbnz	r3, 8004f88 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 8004f82:	68a1      	ldr	r1, [r4, #8]
 8004f84:	07cd      	lsls	r5, r1, #31
 8004f86:	d5ca      	bpl.n	8004f1e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 8004f88:	7d21      	ldrb	r1, [r4, #20]
 8004f8a:	4541      	cmp	r1, r8
 8004f8c:	d005      	beq.n	8004f9a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 8004f8e:	2101      	movs	r1, #1
 8004f90:	e7c6      	b.n	8004f20 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004f92:	f1be 0f00 	cmp.w	lr, #0
 8004f96:	d1ea      	bne.n	8004f6e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 8004f98:	e7e3      	b.n	8004f62 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 8004f9a:	68a1      	ldr	r1, [r4, #8]
 8004f9c:	eb00 0461 	add.w	r4, r0, r1, asr #1
 8004fa0:	104d      	asrs	r5, r1, #1
 8004fa2:	07c9      	lsls	r1, r1, #31
 8004fa4:	bf48      	it	mi
 8004fa6:	5941      	ldrmi	r1, [r0, r5]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fae:	bf48      	it	mi
 8004fb0:	58cb      	ldrmi	r3, [r1, r3]
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4718      	bx	r3
 8004fb6:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8004fba:	f003 0401 	and.w	r4, r3, #1
 8004fbe:	b90d      	cbnz	r5, 8004fc4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	d0ac      	beq.n	8004f1e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 8004fc4:	105e      	asrs	r6, r3, #1
 8004fc6:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8004fca:	b10c      	cbz	r4, 8004fd0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8004fcc:	5980      	ldr	r0, [r0, r6]
 8004fce:	5945      	ldr	r5, [r0, r5]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	4718      	bx	r3
 8004fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fde:	bf00      	nop
 8004fe0:	200001fc 	strdcs	r0, [r0], -ip
 8004fe4:	0800a2e0 	stmdaeq	r0, {r5, r6, r7, r9, sp, pc}

08004fe8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8004fe8:	23ff      	movs	r3, #255	; 0xff
 8004fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fee:	7013      	strb	r3, [r2, #0]
 8004ff0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8004ff4:	7d0b      	ldrb	r3, [r1, #20]
 8004ff6:	f891 8015 	ldrb.w	r8, [r1, #21]
 8004ffa:	f101 0b02 	add.w	fp, r1, #2
 8004ffe:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 8005002:	4b57      	ldr	r3, [pc, #348]	; (8005160 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x178>)
 8005004:	4607      	mov	r7, r0
 8005006:	460d      	mov	r5, r1
 8005008:	4614      	mov	r4, r2
 800500a:	4956      	ldr	r1, [pc, #344]	; (8005164 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x17c>)
 800500c:	2206      	movs	r2, #6
 800500e:	4658      	mov	r0, fp
 8005010:	f8d3 9000 	ldr.w	r9, [r3]
 8005014:	f7ff f86e 	bl	80040f4 <memcmp>
 8005018:	f109 0604 	add.w	r6, r9, #4
 800501c:	4682      	mov	sl, r0
 800501e:	2202      	movs	r2, #2
 8005020:	4631      	mov	r1, r6
 8005022:	4658      	mov	r0, fp
 8005024:	fa1f f888 	uxth.w	r8, r8
 8005028:	f7ff f864 	bl	80040f4 <memcmp>
 800502c:	b928      	cbnz	r0, 800503a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x52>
 800502e:	2204      	movs	r2, #4
 8005030:	494c      	ldr	r1, [pc, #304]	; (8005164 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x17c>)
 8005032:	18a8      	adds	r0, r5, r2
 8005034:	f7ff f85e 	bl	80040f4 <memcmp>
 8005038:	b160      	cbz	r0, 8005054 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6c>
 800503a:	4631      	mov	r1, r6
 800503c:	2206      	movs	r2, #6
 800503e:	4658      	mov	r0, fp
 8005040:	f7ff f858 	bl	80040f4 <memcmp>
 8005044:	4601      	mov	r1, r0
 8005046:	b130      	cbz	r0, 8005056 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 8005048:	f1ba 0f00 	cmp.w	sl, #0
 800504c:	d04a      	beq.n	80050e4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfc>
 800504e:	b003      	add	sp, #12
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	2101      	movs	r1, #1
 8005056:	2301      	movs	r3, #1
 8005058:	7cea      	ldrb	r2, [r5, #19]
 800505a:	2a10      	cmp	r2, #16
 800505c:	d16e      	bne.n	800513c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x154>
 800505e:	f1b8 0f01 	cmp.w	r8, #1
 8005062:	d142      	bne.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x102>
 8005064:	787b      	ldrb	r3, [r7, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f1      	bne.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800506a:	2206      	movs	r2, #6
 800506c:	4631      	mov	r1, r6
 800506e:	f105 0017 	add.w	r0, r5, #23
 8005072:	f7ff f83f 	bl	80040f4 <memcmp>
 8005076:	2800      	cmp	r0, #0
 8005078:	dce9      	bgt.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800507a:	2206      	movs	r2, #6
 800507c:	4630      	mov	r0, r6
 800507e:	f105 011d 	add.w	r1, r5, #29
 8005082:	f7ff f837 	bl	80040f4 <memcmp>
 8005086:	2800      	cmp	r0, #0
 8005088:	dce1      	bgt.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800508a:	23fe      	movs	r3, #254	; 0xfe
 800508c:	7023      	strb	r3, [r4, #0]
 800508e:	7063      	strb	r3, [r4, #1]
 8005090:	70a3      	strb	r3, [r4, #2]
 8005092:	70e3      	strb	r3, [r4, #3]
 8005094:	7123      	strb	r3, [r4, #4]
 8005096:	7163      	strb	r3, [r4, #5]
 8005098:	71a3      	strb	r3, [r4, #6]
 800509a:	23aa      	movs	r3, #170	; 0xaa
 800509c:	4622      	mov	r2, r4
 800509e:	71e3      	strb	r3, [r4, #7]
 80050a0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80050a4:	f109 090a 	add.w	r9, r9, #10
 80050a8:	7831      	ldrb	r1, [r6, #0]
 80050aa:	3202      	adds	r2, #2
 80050ac:	f061 0155 	orn	r1, r1, #85	; 0x55
 80050b0:	7191      	strb	r1, [r2, #6]
 80050b2:	f816 1b01 	ldrb.w	r1, [r6], #1
 80050b6:	f041 0155 	orr.w	r1, r1, #85	; 0x55
 80050ba:	71d1      	strb	r1, [r2, #7]
 80050bc:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050c0:	454e      	cmp	r6, r9
 80050c2:	440b      	add	r3, r1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	d1ef      	bne.n	80050a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc0>
 80050c8:	0a1a      	lsrs	r2, r3, #8
 80050ca:	f062 0155 	orn	r1, r2, #85	; 0x55
 80050ce:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 80050d2:	7562      	strb	r2, [r4, #21]
 80050d4:	f063 0255 	orn	r2, r3, #85	; 0x55
 80050d8:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80050dc:	7521      	strb	r1, [r4, #20]
 80050de:	75a2      	strb	r2, [r4, #22]
 80050e0:	75e3      	strb	r3, [r4, #23]
 80050e2:	e7b4      	b.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80050e4:	4651      	mov	r1, sl
 80050e6:	4653      	mov	r3, sl
 80050e8:	e7b6      	b.n	8005058 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80050ea:	f1b8 0f03 	cmp.w	r8, #3
 80050ee:	d118      	bne.n	8005122 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13a>
 80050f0:	7daa      	ldrb	r2, [r5, #22]
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d1ab      	bne.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80050f6:	707a      	strb	r2, [r7, #1]
 80050f8:	f1ba 0f00 	cmp.w	sl, #0
 80050fc:	d0a7      	beq.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0a5      	beq.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005102:	2302      	movs	r3, #2
 8005104:	75e3      	strb	r3, [r4, #23]
 8005106:	4b18      	ldr	r3, [pc, #96]	; (8005168 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x180>)
 8005108:	7622      	strb	r2, [r4, #24]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	7662      	strb	r2, [r4, #25]
 800510e:	889b      	ldrh	r3, [r3, #4]
 8005110:	b10b      	cbz	r3, 8005116 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x12e>
 8005112:	2302      	movs	r3, #2
 8005114:	7663      	strb	r3, [r4, #25]
 8005116:	4638      	mov	r0, r7
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511e:	f7ff b8e3 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 8005122:	f1b8 0f02 	cmp.w	r8, #2
 8005126:	d192      	bne.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005128:	7daa      	ldrb	r2, [r5, #22]
 800512a:	2a00      	cmp	r2, #0
 800512c:	d18f      	bne.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800512e:	2101      	movs	r1, #1
 8005130:	7079      	strb	r1, [r7, #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d08b      	beq.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 8005136:	f884 8017 	strb.w	r8, [r4, #23]
 800513a:	e7e4      	b.n	8005106 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x11e>
 800513c:	7c68      	ldrb	r0, [r5, #17]
 800513e:	7cab      	ldrb	r3, [r5, #18]
 8005140:	f1ba 0f00 	cmp.w	sl, #0
 8005144:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8005148:	b29b      	uxth	r3, r3
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	7dab      	ldrb	r3, [r5, #22]
 800514e:	bf08      	it	eq
 8005150:	2101      	moveq	r1, #1
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	4638      	mov	r0, r7
 8005156:	4643      	mov	r3, r8
 8005158:	f7ff fed4 	bl	8004f04 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800515c:	e777      	b.n	800504e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x66>
 800515e:	bf00      	nop
 8005160:	20000640 	andcs	r0, r0, r0, asr #12
 8005164:	0800a2d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp, pc}
 8005168:	200001fc 	strdcs	r0, [r0], -ip

0800516c <RDMHandler::GetIdentifyMode(unsigned short)>:
 800516c:	2201      	movs	r2, #1
 800516e:	6883      	ldr	r3, [r0, #8]
 8005170:	75da      	strb	r2, [r3, #23]
 8005172:	4a02      	ldr	r2, [pc, #8]	; (800517c <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	761a      	strb	r2, [r3, #24]
 8005178:	f7ff b8b6 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 800517c:	20000645 	andcs	r0, r0, r5, asr #12

08005180 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	6843      	ldr	r3, [r0, #4]
 8005184:	4604      	mov	r4, r0
 8005186:	7d9a      	ldrb	r2, [r3, #22]
 8005188:	460d      	mov	r5, r1
 800518a:	2a01      	cmp	r2, #1
 800518c:	d004      	beq.n	8005198 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 800518e:	2101      	movs	r1, #1
 8005190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005194:	f7ff bad0 	b.w	8004738 <RDMHandler::RespondMessageNack(unsigned short)>
 8005198:	7dd9      	ldrb	r1, [r3, #23]
 800519a:	1e4b      	subs	r3, r1, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2bfd      	cmp	r3, #253	; 0xfd
 80051a0:	d801      	bhi.n	80051a6 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 80051a2:	2106      	movs	r1, #6
 80051a4:	e7f4      	b.n	8005190 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 80051ac:	7019      	strb	r1, [r3, #0]
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b15b      	cbz	r3, 80051cc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80051b4:	b151      	cbz	r1, 80051cc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 80051b6:	21ff      	movs	r1, #255	; 0xff
 80051b8:	f7fc fe40 	bl	8001e3c <RDMIdentify::On(rdm::identify::Mode)>
 80051bc:	b94d      	cbnz	r5, 80051d2 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	4620      	mov	r0, r4
 80051c2:	75dd      	strb	r5, [r3, #23]
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f7ff b88e 	b.w	80042e8 <RDMHandler::RespondMessageAck()>
 80051cc:	f7fc fe50 	bl	8001e70 <RDMIdentify::Off(rdm::identify::Mode)>
 80051d0:	e7f4      	b.n	80051bc <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000648 	andcs	r0, r0, r8, asr #12
 80051d8:	20000645 	andcs	r0, r0, r5, asr #12
 80051dc:	20000644 	andcs	r0, r0, r4, asr #12

080051e0 <RDMIdentify::RDMIdentify()>:
 80051e0:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <RDMIdentify::RDMIdentify()+0x8>)
 80051e2:	6018      	str	r0, [r3, #0]
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000648 	andcs	r0, r0, r8, asr #12

080051ec <RDMSlotInfo::bsearch(unsigned short)>:
 80051ec:	b530      	push	{r4, r5, lr}
 80051ee:	2128      	movs	r1, #40	; 0x28
 80051f0:	4604      	mov	r4, r0
 80051f2:	2200      	movs	r2, #0
 80051f4:	4d08      	ldr	r5, [pc, #32]	; (8005218 <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 80051f6:	1a8b      	subs	r3, r1, r2
 80051f8:	eb02 0063 	add.w	r0, r2, r3, asr #1
 80051fc:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
 8005200:	42a3      	cmp	r3, r4
 8005202:	d205      	bcs.n	8005210 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 8005204:	1c42      	adds	r2, r0, #1
 8005206:	428a      	cmp	r2, r1
 8005208:	ddf5      	ble.n	80051f6 <RDMSlotInfo::bsearch(unsigned short)+0xa>
 800520a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800520e:	bd30      	pop	{r4, r5, pc}
 8005210:	d9fd      	bls.n	800520e <RDMSlotInfo::bsearch(unsigned short)+0x22>
 8005212:	1e41      	subs	r1, r0, #1
 8005214:	e7f7      	b.n	8005206 <RDMSlotInfo::bsearch(unsigned short)+0x1a>
 8005216:	bf00      	nop
 8005218:	0800ab04 	stmdaeq	r0, {r2, r8, r9, fp, sp, pc}

0800521c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 800521c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005220:	4299      	cmp	r1, r3
 8005222:	b510      	push	{r4, lr}
 8005224:	4614      	mov	r4, r2
 8005226:	d103      	bne.n	8005230 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 8005228:	4611      	mov	r1, r2
 800522a:	f7fc fe33 	bl	8001e94 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 800522e:	bd10      	pop	{r4, pc}
 8005230:	4608      	mov	r0, r1
 8005232:	f7ff ffdb 	bl	80051ec <RDMSlotInfo::bsearch(unsigned short)>
 8005236:	2800      	cmp	r0, #0
 8005238:	da02      	bge.n	8005240 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 800523a:	2000      	movs	r0, #0
 800523c:	6020      	str	r0, [r4, #0]
 800523e:	e7f6      	b.n	800522e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 8005242:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005246:	6840      	ldr	r0, [r0, #4]
 8005248:	4602      	mov	r2, r0
 800524a:	4613      	mov	r3, r2
 800524c:	7819      	ldrb	r1, [r3, #0]
 800524e:	3201      	adds	r2, #1
 8005250:	2900      	cmp	r1, #0
 8005252:	d1fa      	bne.n	800524a <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 8005254:	1a1b      	subs	r3, r3, r0
 8005256:	b29b      	uxth	r3, r3
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	e7e8      	b.n	800522e <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 800525c:	0800ab04 	stmdaeq	r0, {r2, r8, r9, fp, sp, pc}

08005260 <RDMDevice::RDMDevice()>:
 8005260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005262:	4b35      	ldr	r3, [pc, #212]	; (8005338 <RDMDevice::RDMDevice()+0xd8>)
 8005264:	4a35      	ldr	r2, [pc, #212]	; (800533c <RDMDevice::RDMDevice()+0xdc>)
 8005266:	7859      	ldrb	r1, [r3, #1]
 8005268:	4604      	mov	r4, r0
 800526a:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 800526e:	7818      	ldrb	r0, [r3, #0]
 8005270:	2300      	movs	r3, #0
 8005272:	4615      	mov	r5, r2
 8005274:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 8005278:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800527c:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 8005280:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8005284:	67a3      	str	r3, [r4, #120]	; 0x78
 8005286:	4613      	mov	r3, r2
 8005288:	781e      	ldrb	r6, [r3, #0]
 800528a:	3201      	adds	r2, #1
 800528c:	2e00      	cmp	r6, #0
 800528e:	d1fa      	bne.n	8005286 <RDMDevice::RDMDevice()+0x26>
 8005290:	1b5b      	subs	r3, r3, r5
 8005292:	2b20      	cmp	r3, #32
 8005294:	bf28      	it	cs
 8005296:	2320      	movcs	r3, #32
 8005298:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800529c:	462e      	mov	r6, r5
 800529e:	461a      	mov	r2, r3
 80052a0:	4f26      	ldr	r7, [pc, #152]	; (800533c <RDMDevice::RDMDevice()+0xdc>)
 80052a2:	3a01      	subs	r2, #1
 80052a4:	d304      	bcc.n	80052b0 <RDMDevice::RDMDevice()+0x50>
 80052a6:	f817 cb01 	ldrb.w	ip, [r7], #1
 80052aa:	f806 cb01 	strb.w	ip, [r6], #1
 80052ae:	e7f8      	b.n	80052a2 <RDMDevice::RDMDevice()+0x42>
 80052b0:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80052b4:	4b22      	ldr	r3, [pc, #136]	; (8005340 <RDMDevice::RDMDevice()+0xe0>)
 80052b6:	7020      	strb	r0, [r4, #0]
 80052b8:	7061      	strb	r1, [r4, #1]
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4669      	mov	r1, sp
 80052be:	f002 fa63 	bl	8007788 <Network::MacAddressCopyTo(unsigned char*)>
 80052c2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80052c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80052ca:	70a3      	strb	r3, [r4, #2]
 80052cc:	7263      	strb	r3, [r4, #9]
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <RDMDevice::RDMDevice()+0xe4>)
 80052d0:	70e2      	strb	r2, [r4, #3]
 80052d2:	7222      	strb	r2, [r4, #8]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80052da:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80052de:	7121      	strb	r1, [r4, #4]
 80052e0:	7160      	strb	r0, [r4, #5]
 80052e2:	71a0      	strb	r0, [r4, #6]
 80052e4:	71e1      	strb	r1, [r4, #7]
 80052e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80052ea:	2900      	cmp	r1, #0
 80052ec:	d1fb      	bne.n	80052e6 <RDMDevice::RDMDevice()+0x86>
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	bf28      	it	cs
 80052f4:	2320      	movcs	r3, #32
 80052f6:	461a      	mov	r2, r3
 80052f8:	4912      	ldr	r1, [pc, #72]	; (8005344 <RDMDevice::RDMDevice()+0xe4>)
 80052fa:	3a01      	subs	r2, #1
 80052fc:	d304      	bcc.n	8005308 <RDMDevice::RDMDevice()+0xa8>
 80052fe:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005302:	f805 0b01 	strb.w	r0, [r5], #1
 8005306:	e7f8      	b.n	80052fa <RDMDevice::RDMDevice()+0x9a>
 8005308:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800530c:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 8005310:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005312:	2314      	movs	r3, #20
 8005314:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <RDMDevice::RDMDevice()+0xe8>)
 8005316:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800531a:	f104 0067 	add.w	r0, r4, #103	; 0x67
 800531e:	f104 0353 	add.w	r3, r4, #83	; 0x53
 8005322:	4298      	cmp	r0, r3
 8005324:	d004      	beq.n	8005330 <RDMDevice::RDMDevice()+0xd0>
 8005326:	f812 1b01 	ldrb.w	r1, [r2], #1
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f8      	b.n	8005322 <RDMDevice::RDMDevice()+0xc2>
 8005330:	4620      	mov	r0, r4
 8005332:	b003      	add	sp, #12
 8005334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005336:	bf00      	nop
 8005338:	0800ad41 	stmdaeq	r0, {r0, r6, r8, sl, fp, sp, pc}
 800533c:	0800ad43 	stmdaeq	r0, {r0, r1, r6, r8, sl, fp, sp, pc}
 8005340:	200016e4 	andcs	r1, r0, r4, ror #13
 8005344:	0800ac44 	stmdaeq	r0, {r2, r6, sl, fp, sp, pc}
 8005348:	0800ad2c 	stmdaeq	r0, {r2, r3, r5, r8, sl, fp, sp, pc}

0800534c <RDMDevice::Print()>:
 800534c:	b513      	push	{r0, r1, r4, lr}
 800534e:	4604      	mov	r4, r0
 8005350:	4818      	ldr	r0, [pc, #96]	; (80053b4 <RDMDevice::Print()+0x68>)
 8005352:	f7fc ffd7 	bl	8002304 <printf>
 8005356:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800535a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800535e:	4816      	ldr	r0, [pc, #88]	; (80053b8 <RDMDevice::Print()+0x6c>)
 8005360:	f7fc ffd0 	bl	8002304 <printf>
 8005364:	7862      	ldrb	r2, [r4, #1]
 8005366:	7821      	ldrb	r1, [r4, #0]
 8005368:	4814      	ldr	r0, [pc, #80]	; (80053bc <RDMDevice::Print()+0x70>)
 800536a:	f7fc ffcb 	bl	8002304 <printf>
 800536e:	79a3      	ldrb	r3, [r4, #6]
 8005370:	7a22      	ldrb	r2, [r4, #8]
 8005372:	7a61      	ldrb	r1, [r4, #9]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4812      	ldr	r0, [pc, #72]	; (80053c0 <RDMDevice::Print()+0x74>)
 8005378:	79e3      	ldrb	r3, [r4, #7]
 800537a:	f7fc ffc3 	bl	8002304 <printf>
 800537e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8005382:	f104 020a 	add.w	r2, r4, #10
 8005386:	480f      	ldr	r0, [pc, #60]	; (80053c4 <RDMDevice::Print()+0x78>)
 8005388:	f7fc ffbc 	bl	8002304 <printf>
 800538c:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8005390:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8005394:	0a09      	lsrs	r1, r1, #8
 8005396:	480c      	ldr	r0, [pc, #48]	; (80053c8 <RDMDevice::Print()+0x7c>)
 8005398:	f7fc ffb4 	bl	8002304 <printf>
 800539c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 80053a0:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80053a4:	4809      	ldr	r0, [pc, #36]	; (80053cc <RDMDevice::Print()+0x80>)
 80053a6:	0a09      	lsrs	r1, r1, #8
 80053a8:	b002      	add	sp, #8
 80053aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ae:	f7fc bfa9 	b.w	8002304 <printf>
 80053b2:	bf00      	nop
 80053b4:	0800ac58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp, pc}
 80053b8:	0800ac72 	stmdaeq	r0, {r1, r4, r5, r6, sl, fp, sp, pc}
 80053bc:	0800ac8d 	stmdaeq	r0, {r0, r2, r3, r7, sl, fp, sp, pc}
 80053c0:	0800acac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, sp, pc}
 80053c4:	0800acd3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sl, fp, sp, pc}
 80053c8:	0800acee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp, sp, pc}
 80053cc:	0800ad0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp, sp, pc}

080053d0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 80053d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	460e      	mov	r6, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4604      	mov	r4, r0
 80053da:	4690      	mov	r8, r2
 80053dc:	461d      	mov	r5, r3
 80053de:	9f06      	ldr	r7, [sp, #24]
 80053e0:	f000 fa98 	bl	8005914 <PixelConfiguration::Validate(unsigned int&)>
 80053e4:	2e01      	cmp	r6, #1
 80053e6:	d009      	beq.n	80053fc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 80053e8:	7ce2      	ldrb	r2, [r4, #19]
 80053ea:	b93a      	cbnz	r2, 80053fc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 80053ec:	2e04      	cmp	r6, #4
 80053ee:	d13f      	bne.n	8005470 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa0>
 80053f0:	2303      	movs	r3, #3
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	4641      	mov	r1, r8
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 fa8c 	bl	8005914 <PixelConfiguration::Validate(unsigned int&)>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	2b07      	cmp	r3, #7
 8005400:	bf0d      	iteet	eq
 8005402:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005406:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800540a:	22aa      	movne	r2, #170	; 0xaa
 800540c:	2180      	moveq	r1, #128	; 0x80
 800540e:	bf15      	itete	ne
 8005410:	e9c5 2300 	strdne	r2, r3, [r5]
 8005414:	e9c5 1300 	strdeq	r1, r3, [r5]
 8005418:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800541c:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 8005420:	69a2      	ldr	r2, [r4, #24]
 8005422:	60ab      	str	r3, [r5, #8]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	b10a      	cbz	r2, 800542c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 8005428:	429a      	cmp	r2, r3
 800542a:	d900      	bls.n	800542e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800542c:	61a3      	str	r3, [r4, #24]
 800542e:	69a2      	ldr	r2, [r4, #24]
 8005430:	fbb3 f3f2 	udiv	r3, r3, r2
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	6963      	ldr	r3, [r4, #20]
 8005438:	682a      	ldr	r2, [r5, #0]
 800543a:	42b3      	cmp	r3, r6
 800543c:	bf94      	ite	ls
 800543e:	6163      	strls	r3, [r4, #20]
 8005440:	6166      	strhi	r6, [r4, #20]
 8005442:	1c53      	adds	r3, r2, #1
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	2e01      	cmp	r6, #1
 8005448:	fbb2 f2f3 	udiv	r2, r2, r3
 800544c:	9b07      	ldr	r3, [sp, #28]
 800544e:	f102 0201 	add.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	bf09      	itett	eq
 8005456:	682a      	ldreq	r2, [r5, #0]
 8005458:	6963      	ldrne	r3, [r4, #20]
 800545a:	1c53      	addeq	r3, r2, #1
 800545c:	683a      	ldreq	r2, [r7, #0]
 800545e:	bf16      	itet	ne
 8005460:	435a      	mulne	r2, r3
 8005462:	fbb2 f2f3 	udiveq	r2, r2, r3
 8005466:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800546a:	60ea      	str	r2, [r5, #12]
 800546c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0be      	beq.n	80053f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 8005476:	3b0b      	subs	r3, #11
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf88      	it	hi
 800547c:	6022      	strhi	r2, [r4, #0]
 800547e:	e7b9      	b.n	80053f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

08005480 <PixelDmxConfiguration::Dump()>:
 8005480:	4770      	bx	lr

08005482 <LightSet::Blackout(bool)>:
 8005482:	4770      	bx	lr

08005484 <LightSet::Print()>:
 8005484:	4770      	bx	lr

08005486 <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 8005486:	2000      	movs	r0, #0
 8005488:	4770      	bx	lr

0800548a <PixelDmxParamsRdm::GetDmxStartAddress()>:
 800548a:	2001      	movs	r0, #1
 800548c:	4770      	bx	lr

0800548e <PixelDmxParamsRdm::GetDmxFootprint()>:
 800548e:	2006      	movs	r0, #6
 8005490:	4770      	bx	lr

08005492 <PixelDmxParamsRdm::Stop(unsigned int)>:
 8005492:	4770      	bx	lr

08005494 <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8005494:	2905      	cmp	r1, #5
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	bf9f      	itttt	ls
 800549c:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80054a0:	7090      	strbls	r0, [r2, #2]
 80054a2:	8013      	strhls	r3, [r2, #0]
 80054a4:	2001      	movls	r0, #1
 80054a6:	4770      	bx	lr

080054a8 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 80054a8:	4770      	bx	lr

080054aa <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	f002 ffb2 	bl	8008416 <operator delete(void*)>
 80054b2:	4620      	mov	r0, r4
 80054b4:	bd10      	pop	{r4, pc}
	...

080054b8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>:
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0xc>)
 80054ba:	6003      	str	r3, [r0, #0]
 80054bc:	4b02      	ldr	r3, [pc, #8]	; (80054c8 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0x10>)
 80054be:	6019      	str	r1, [r3, #0]
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	0800ad68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, sp, pc}
 80054c8:	2000064c 	andcs	r0, r0, ip, asr #12

080054cc <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80054cc:	2b05      	cmp	r3, #5
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	4614      	mov	r4, r2
 80054d4:	d934      	bls.n	8005540 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 80054d6:	7953      	ldrb	r3, [r2, #5]
 80054d8:	b933      	cbnz	r3, 80054e8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 80054da:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80054dc:	7013      	strb	r3, [r2, #0]
 80054de:	4621      	mov	r1, r4
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7fc fad3 	bl	8001a8c <PixelDmxParamsRdm::Display(unsigned char const*)>
 80054e6:	e02b      	b.n	8005540 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 80054e8:	2bff      	cmp	r3, #255	; 0xff
 80054ea:	d124      	bne.n	8005536 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 80054ee:	7811      	ldrb	r1, [r2, #0]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d1f4      	bne.n	80054de <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 80054f4:	4d14      	ldr	r5, [pc, #80]	; (8005548 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 80054f6:	7013      	strb	r3, [r2, #0]
 80054f8:	6828      	ldr	r0, [r5, #0]
 80054fa:	7821      	ldrb	r1, [r4, #0]
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	290e      	cmp	r1, #14
 8005500:	bf28      	it	cs
 8005502:	210e      	movcs	r1, #14
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	4798      	blx	r3
 8005508:	6828      	ldr	r0, [r5, #0]
 800550a:	7861      	ldrb	r1, [r4, #1]
 800550c:	6803      	ldr	r3, [r0, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4798      	blx	r3
 8005512:	6828      	ldr	r0, [r5, #0]
 8005514:	78a1      	ldrb	r1, [r4, #2]
 8005516:	6803      	ldr	r3, [r0, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4798      	blx	r3
 800551c:	6828      	ldr	r0, [r5, #0]
 800551e:	78e1      	ldrb	r1, [r4, #3]
 8005520:	6803      	ldr	r3, [r0, #0]
 8005522:	2906      	cmp	r1, #6
 8005524:	bf28      	it	cs
 8005526:	2106      	movcs	r1, #6
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4798      	blx	r3
 800552c:	6828      	ldr	r0, [r5, #0]
 800552e:	7921      	ldrb	r1, [r4, #4]
 8005530:	6803      	ldr	r3, [r0, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4798      	blx	r3
 8005536:	7963      	ldrb	r3, [r4, #5]
 8005538:	3b01      	subs	r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2bfd      	cmp	r3, #253	; 0xfd
 800553e:	d8ce      	bhi.n	80054de <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	bf00      	nop
 8005544:	20000650 	andcs	r0, r0, r0, asr r6
 8005548:	2000064c 	andcs	r0, r0, ip, asr #12

0800554c <WS28xxDmx::GetDmxStartAddress()>:
 800554c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800554e:	4770      	bx	lr

08005550 <WS28xxDmx::GetDmxFootprint()>:
 8005550:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8005552:	4770      	bx	lr

08005554 <WS28xxDmx::~WS28xxDmx()>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 8005558:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800555a:	4604      	mov	r4, r0
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	b12d      	cbz	r5, 800556c <WS28xxDmx::~WS28xxDmx()+0x18>
 8005560:	4628      	mov	r0, r5
 8005562:	f001 fb39 	bl	8006bd8 <WS28xx::~WS28xx()>
 8005566:	4628      	mov	r0, r5
 8005568:	f002 ff55 	bl	8008416 <operator delete(void*)>
 800556c:	4620      	mov	r0, r4
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	0800ad9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp, pc}

08005574 <WS28xxDmx::~WS28xxDmx()>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4604      	mov	r4, r0
 8005578:	f7ff ffec 	bl	8005554 <WS28xxDmx::~WS28xxDmx()>
 800557c:	4620      	mov	r0, r4
 800557e:	f002 ff4a 	bl	8008416 <operator delete(void*)>
 8005582:	4620      	mov	r0, r4
 8005584:	bd10      	pop	{r4, pc}

08005586 <WS28xxDmx::Blackout(bool)>:
 8005586:	b538      	push	{r3, r4, r5, lr}
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 8005590:	f004 f9a4 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8005594:	2800      	cmp	r0, #0
 8005596:	d1fb      	bne.n	8005590 <WS28xxDmx::Blackout(bool)+0xa>
 8005598:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800559a:	b11c      	cbz	r4, 80055a4 <WS28xxDmx::Blackout(bool)+0x1e>
 800559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a0:	f001 bb94 	b.w	8006ccc <WS28xx::Blackout()>
 80055a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a8:	f001 bb74 	b.w	8006c94 <WS28xx::Update()>

080055ac <WS28xxDmx::Start(unsigned int)>:
 80055ac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055b0:	b93b      	cbnz	r3, 80055c2 <WS28xxDmx::Start(unsigned int)+0x16>
 80055b2:	2301      	movs	r3, #1
 80055b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80055b8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80055ba:	b110      	cbz	r0, 80055c2 <WS28xxDmx::Start(unsigned int)+0x16>
 80055bc:	6803      	ldr	r3, [r0, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4718      	bx	r3
 80055c2:	4770      	bx	lr

080055c4 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 80055c4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 80055c6:	b508      	push	{r3, lr}
 80055c8:	428a      	cmp	r2, r1
 80055ca:	d101      	bne.n	80055d0 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 80055cc:	2001      	movs	r0, #1
 80055ce:	bd08      	pop	{r3, pc}
 80055d0:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80055d2:	440a      	add	r2, r1
 80055d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80055d8:	dc0b      	bgt.n	80055f2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 80055da:	1e4a      	subs	r2, r1, #1
 80055dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80055e0:	d207      	bcs.n	80055f2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 80055e2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80055e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0f0      	beq.n	80055cc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 80055ea:	6803      	ldr	r3, [r0, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	4798      	blx	r3
 80055f0:	e7ec      	b.n	80055cc <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e7eb      	b.n	80055ce <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

080055f6 <WS28xxDmx::Stop(unsigned int)>:
 80055f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	b16b      	cbz	r3, 800561c <WS28xxDmx::Stop(unsigned int)+0x26>
 8005600:	2300      	movs	r3, #0
 8005602:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005606:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005608:	b108      	cbz	r0, 800560e <WS28xxDmx::Stop(unsigned int)+0x18>
 800560a:	f001 fb5f 	bl	8006ccc <WS28xx::Blackout()>
 800560e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005610:	b120      	cbz	r0, 800561c <WS28xxDmx::Stop(unsigned int)+0x26>
 8005612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005616:	6803      	ldr	r3, [r0, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4718      	bx	r3
 800561c:	bd10      	pop	{r4, pc}

0800561e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800561e:	4603      	mov	r3, r0
 8005620:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8005622:	4288      	cmp	r0, r1
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	d30f      	bcc.n	800564a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800562a:	7090      	strb	r0, [r2, #2]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	fbb1 f0f3 	udiv	r0, r1, r3
 8005632:	fb03 1110 	mls	r1, r3, r0, r1
 8005636:	2903      	cmp	r1, #3
 8005638:	d80e      	bhi.n	8005658 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800563a:	e8df f001 	tbb	[pc, r1]
 800563e:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 8005642:	f240 2305 	movw	r3, #517	; 0x205
 8005646:	2001      	movs	r0, #1
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	4770      	bx	lr
 800564c:	f240 2306 	movw	r3, #518	; 0x206
 8005650:	e7f9      	b.n	8005646 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8005652:	f240 2307 	movw	r3, #519	; 0x207
 8005656:	e7f6      	b.n	8005646 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 8005658:	f240 2312 	movw	r3, #530	; 0x212
 800565c:	e7f3      	b.n	8005646 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800565e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800565e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005662:	b085      	sub	sp, #20
 8005664:	4606      	mov	r6, r0
 8005666:	4690      	mov	r8, r2
 8005668:	4699      	mov	r9, r3
 800566a:	9103      	str	r1, [sp, #12]
 800566c:	f004 f936 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8005670:	2800      	cmp	r0, #0
 8005672:	d170      	bne.n	8005756 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	6972      	ldr	r2, [r6, #20]
 8005678:	f003 0103 	and.w	r1, r3, #3
 800567c:	6a33      	ldr	r3, [r6, #32]
 800567e:	2902      	cmp	r1, #2
 8005680:	fbb9 f7f3 	udiv	r7, r9, r3
 8005684:	d02b      	beq.n	80056de <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 8005686:	2903      	cmp	r1, #3
 8005688:	d030      	beq.n	80056ec <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8e>
 800568a:	2901      	cmp	r1, #1
 800568c:	6875      	ldr	r5, [r6, #4]
 800568e:	d027      	beq.n	80056e0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 8005690:	4297      	cmp	r7, r2
 8005692:	bf28      	it	cs
 8005694:	4617      	movcs	r7, r2
 8005696:	4295      	cmp	r5, r2
 8005698:	d92a      	bls.n	80056f0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x92>
 800569a:	4605      	mov	r5, r0
 800569c:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800569e:	3c01      	subs	r4, #1
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	4444      	add	r4, r8
 80056a4:	d12c      	bne.n	8005700 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa2>
 80056a6:	42af      	cmp	r7, r5
 80056a8:	d948      	bls.n	800573c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 80056aa:	eba4 0308 	sub.w	r3, r4, r8
 80056ae:	4599      	cmp	r9, r3
 80056b0:	d944      	bls.n	800573c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 80056b2:	f04f 0a00 	mov.w	sl, #0
 80056b6:	69b3      	ldr	r3, [r6, #24]
 80056b8:	f894 f000 	pld	[r4]
 80056bc:	fb03 fb05 	mul.w	fp, r3, r5
 80056c0:	69b3      	ldr	r3, [r6, #24]
 80056c2:	4553      	cmp	r3, sl
 80056c4:	d917      	bls.n	80056f6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 80056c6:	78a2      	ldrb	r2, [r4, #2]
 80056c8:	7863      	ldrb	r3, [r4, #1]
 80056ca:	9200      	str	r2, [sp, #0]
 80056cc:	eb0b 010a 	add.w	r1, fp, sl
 80056d0:	7822      	ldrb	r2, [r4, #0]
 80056d2:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80056d4:	f000 fc9e 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80056d8:	f10a 0a01 	add.w	sl, sl, #1
 80056dc:	e7f0      	b.n	80056c0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 80056de:	68b5      	ldr	r5, [r6, #8]
 80056e0:	442f      	add	r7, r5
 80056e2:	4297      	cmp	r7, r2
 80056e4:	bf28      	it	cs
 80056e6:	4617      	movcs	r7, r2
 80056e8:	4604      	mov	r4, r0
 80056ea:	e7d9      	b.n	80056a0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 80056ec:	68f5      	ldr	r5, [r6, #12]
 80056ee:	e7f7      	b.n	80056e0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 80056f0:	4605      	mov	r5, r0
 80056f2:	4604      	mov	r4, r0
 80056f4:	e7d4      	b.n	80056a0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 80056f6:	3501      	adds	r5, #1
 80056f8:	3403      	adds	r4, #3
 80056fa:	e7d4      	b.n	80056a6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 80056fc:	3501      	adds	r5, #1
 80056fe:	3404      	adds	r4, #4
 8005700:	42af      	cmp	r7, r5
 8005702:	d91b      	bls.n	800573c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 8005704:	eba4 0308 	sub.w	r3, r4, r8
 8005708:	4599      	cmp	r9, r3
 800570a:	d917      	bls.n	800573c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800570c:	f04f 0a00 	mov.w	sl, #0
 8005710:	69b3      	ldr	r3, [r6, #24]
 8005712:	f894 f000 	pld	[r4]
 8005716:	fb03 fb05 	mul.w	fp, r3, r5
 800571a:	69b3      	ldr	r3, [r6, #24]
 800571c:	4553      	cmp	r3, sl
 800571e:	d9ed      	bls.n	80056fc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
 8005720:	78e2      	ldrb	r2, [r4, #3]
 8005722:	7863      	ldrb	r3, [r4, #1]
 8005724:	9201      	str	r2, [sp, #4]
 8005726:	78a2      	ldrb	r2, [r4, #2]
 8005728:	eb0b 010a 	add.w	r1, fp, sl
 800572c:	9200      	str	r2, [sp, #0]
 800572e:	7822      	ldrb	r2, [r4, #0]
 8005730:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8005732:	f001 f93b 	bl	80069ac <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8005736:	f10a 0a01 	add.w	sl, sl, #1
 800573a:	e7ee      	b.n	800571a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbc>
 800573c:	6933      	ldr	r3, [r6, #16]
 800573e:	9a03      	ldr	r2, [sp, #12]
 8005740:	429a      	cmp	r2, r3
 8005742:	d108      	bne.n	8005756 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 8005744:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 8005748:	b92b      	cbnz	r3, 8005756 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800574a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800574c:	b005      	add	sp, #20
 800574e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005752:	f001 ba9f 	b.w	8006c94 <WS28xx::Update()>
 8005756:	b005      	add	sp, #20
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800575c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 8005760:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005762:	6003      	str	r3, [r0, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	460d      	mov	r5, r1
 8005768:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800576c:	2101      	movs	r1, #1
 800576e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8005772:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 8005776:	8483      	strh	r3, [r0, #36]	; 0x24
 8005778:	6283      	str	r3, [r0, #40]	; 0x28
 800577a:	63c3      	str	r3, [r0, #60]	; 0x3c
 800577c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8005780:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 8005782:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8005784:	6018      	str	r0, [r3, #0]
 8005786:	f100 031c 	add.w	r3, r0, #28
 800578a:	8602      	strh	r2, [r0, #48]	; 0x30
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	f100 0314 	add.w	r3, r0, #20
 8005792:	4604      	mov	r4, r0
 8005794:	f100 0220 	add.w	r2, r0, #32
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	1d03      	adds	r3, r0, #4
 800579c:	4628      	mov	r0, r5
 800579e:	f7ff fe17 	bl	80053d0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 80057a2:	201c      	movs	r0, #28
 80057a4:	f002 fe3b 	bl	800841e <operator new(unsigned int)>
 80057a8:	4606      	mov	r6, r0
 80057aa:	4629      	mov	r1, r5
 80057ac:	f001 fa32 	bl	8006c14 <WS28xx::WS28xx(PixelConfiguration&)>
 80057b0:	4630      	mov	r0, r6
 80057b2:	6366      	str	r6, [r4, #52]	; 0x34
 80057b4:	f001 fa8a 	bl	8006ccc <WS28xx::Blackout()>
 80057b8:	69ab      	ldr	r3, [r5, #24]
 80057ba:	6a22      	ldr	r2, [r4, #32]
 80057bc:	61a3      	str	r3, [r4, #24]
 80057be:	8bab      	ldrh	r3, [r5, #28]
 80057c0:	4628      	mov	r0, r5
 80057c2:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80057c4:	6963      	ldr	r3, [r4, #20]
 80057c6:	4353      	muls	r3, r2
 80057c8:	8623      	strh	r3, [r4, #48]	; 0x30
 80057ca:	f7ff fe59 	bl	8005480 <PixelDmxConfiguration::Dump()>
 80057ce:	4620      	mov	r0, r4
 80057d0:	b002      	add	sp, #8
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	0800ad9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, sp, pc}
 80057d8:	20000654 	andcs	r0, r0, r4, asr r6

080057dc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 80057dc:	2200      	movs	r2, #0
 80057de:	6001      	str	r1, [r0, #0]
 80057e0:	4910      	ldr	r1, [pc, #64]	; (8005824 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 80057e2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80057e6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80057ea:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80057ee:	81c1      	strh	r1, [r0, #14]
 80057f0:	213d      	movs	r1, #61	; 0x3d
 80057f2:	8201      	strh	r1, [r0, #16]
 80057f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057f8:	8241      	strh	r1, [r0, #18]
 80057fa:	2101      	movs	r1, #1
 80057fc:	7541      	strb	r1, [r0, #21]
 80057fe:	2106      	movs	r1, #6
 8005800:	75c1      	strb	r1, [r0, #23]
 8005802:	4909      	ldr	r1, [pc, #36]	; (8005828 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 8005804:	7302      	strb	r2, [r0, #12]
 8005806:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800580a:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800580e:	6201      	str	r1, [r0, #32]
 8005810:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 8005814:	6241      	str	r1, [r0, #36]	; 0x24
 8005816:	211d      	movs	r1, #29
 8005818:	7582      	strb	r2, [r0, #22]
 800581a:	8501      	strh	r1, [r0, #40]	; 0x28
 800581c:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	0100aa03 	tsteq	r0, r3, lsl #20
 8005828:	00090005 	andeq	r0, r9, r5

0800582c <WS28xxDmxParams::Load()>:
 800582c:	b508      	push	{r3, lr}
 800582e:	2300      	movs	r3, #0
 8005830:	4601      	mov	r1, r0
 8005832:	6043      	str	r3, [r0, #4]
 8005834:	6800      	ldr	r0, [r0, #0]
 8005836:	b120      	cbz	r0, 8005842 <WS28xxDmxParams::Load()+0x16>
 8005838:	6803      	ldr	r3, [r0, #0]
 800583a:	3104      	adds	r1, #4
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4798      	blx	r3
 8005840:	2001      	movs	r0, #1
 8005842:	bd08      	pop	{r3, pc}

08005844 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 8005844:	6843      	ldr	r3, [r0, #4]
 8005846:	07da      	lsls	r2, r3, #31
 8005848:	bf44      	itt	mi
 800584a:	7a02      	ldrbmi	r2, [r0, #8]
 800584c:	600a      	strmi	r2, [r1, #0]
 800584e:	079a      	lsls	r2, r3, #30
 8005850:	d505      	bpl.n	800585e <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8005852:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8005856:	2a00      	cmp	r2, #0
 8005858:	bf08      	it	eq
 800585a:	22aa      	moveq	r2, #170	; 0xaa
 800585c:	604a      	str	r2, [r1, #4]
 800585e:	059a      	lsls	r2, r3, #22
 8005860:	bf44      	itt	mi
 8005862:	7dc2      	ldrbmi	r2, [r0, #23]
 8005864:	608a      	strmi	r2, [r1, #8]
 8005866:	055a      	lsls	r2, r3, #21
 8005868:	bf44      	itt	mi
 800586a:	7e02      	ldrbmi	r2, [r0, #24]
 800586c:	740a      	strbmi	r2, [r1, #16]
 800586e:	051a      	lsls	r2, r3, #20
 8005870:	bf44      	itt	mi
 8005872:	7e42      	ldrbmi	r2, [r0, #25]
 8005874:	744a      	strbmi	r2, [r1, #17]
 8005876:	06da      	lsls	r2, r3, #27
 8005878:	bf44      	itt	mi
 800587a:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800587e:	60ca      	strmi	r2, [r1, #12]
 8005880:	069a      	lsls	r2, r3, #26
 8005882:	bf44      	itt	mi
 8005884:	7c82      	ldrbmi	r2, [r0, #18]
 8005886:	748a      	strbmi	r2, [r1, #18]
 8005888:	075a      	lsls	r2, r3, #29
 800588a:	d50b      	bpl.n	80058a4 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800588c:	7ac2      	ldrb	r2, [r0, #11]
 800588e:	b510      	push	{r4, lr}
 8005890:	7b04      	ldrb	r4, [r0, #12]
 8005892:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005896:	838a      	strh	r2, [r1, #28]
 8005898:	05da      	lsls	r2, r3, #23
 800589a:	bf44      	itt	mi
 800589c:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 80058a0:	618b      	strmi	r3, [r1, #24]
 80058a2:	bd10      	pop	{r4, pc}
 80058a4:	05db      	lsls	r3, r3, #23
 80058a6:	bf44      	itt	mi
 80058a8:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 80058ac:	618b      	strmi	r3, [r1, #24]
 80058ae:	4770      	bx	lr

080058b0 <WS28xxDmxParams::Dump()>:
 80058b0:	4770      	bx	lr
	...

080058b4 <WS28xxDmx::Print()>:
 80058b4:	b510      	push	{r4, lr}
 80058b6:	4604      	mov	r4, r0
 80058b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80058ba:	f000 fb69 	bl	8005f90 <WS28xx::Print()>
 80058be:	4805      	ldr	r0, [pc, #20]	; (80058d4 <WS28xxDmx::Print()+0x20>)
 80058c0:	f7fc fd20 	bl	8002304 <printf>
 80058c4:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058cc:	4802      	ldr	r0, [pc, #8]	; (80058d8 <WS28xxDmx::Print()+0x24>)
 80058ce:	f7fc bd19 	b.w	8002304 <printf>
 80058d2:	bf00      	nop
 80058d4:	0800adc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, sp, pc}
 80058d8:	0800adde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, pc}

080058dc <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 80058dc:	f020 0308 	bic.w	r3, r0, #8
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d006      	beq.n	80058f2 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 80058e4:	2808      	cmp	r0, #8
 80058e6:	d006      	beq.n	80058f6 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 80058e8:	280a      	cmp	r0, #10
 80058ea:	bf14      	ite	ne
 80058ec:	2002      	movne	r0, #2
 80058ee:	2005      	moveq	r0, #5
 80058f0:	4770      	bx	lr
 80058f2:	2000      	movs	r0, #0
 80058f4:	4770      	bx	lr
 80058f6:	2004      	movs	r0, #4
 80058f8:	4770      	bx	lr

080058fa <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 80058fa:	23c0      	movs	r3, #192	; 0xc0
 80058fc:	2803      	cmp	r0, #3
 80058fe:	700b      	strb	r3, [r1, #0]
 8005900:	d006      	beq.n	8005910 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8005902:	3808      	subs	r0, #8
 8005904:	2803      	cmp	r0, #3
 8005906:	bf34      	ite	cc
 8005908:	23fc      	movcc	r3, #252	; 0xfc
 800590a:	23f0      	movcs	r3, #240	; 0xf0
 800590c:	7013      	strb	r3, [r2, #0]
 800590e:	4770      	bx	lr
 8005910:	23f8      	movs	r3, #248	; 0xf8
 8005912:	e7fb      	b.n	800590c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>

08005914 <PixelConfiguration::Validate(unsigned int&)>:
 8005914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005916:	e9d0 5300 	ldrd	r5, r3, [r0]
 800591a:	2d07      	cmp	r5, #7
 800591c:	4604      	mov	r4, r0
 800591e:	6882      	ldr	r2, [r0, #8]
 8005920:	d129      	bne.n	8005976 <PixelConfiguration::Validate(unsigned int&)+0x62>
 8005922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005926:	bf28      	it	cs
 8005928:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800592c:	6043      	str	r3, [r0, #4]
 800592e:	2304      	movs	r3, #4
 8005930:	600b      	str	r3, [r1, #0]
 8005932:	2301      	movs	r3, #1
 8005934:	2a06      	cmp	r2, #6
 8005936:	74e3      	strb	r3, [r4, #19]
 8005938:	d103      	bne.n	8005942 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800593a:	4628      	mov	r0, r5
 800593c:	f7ff ffce 	bl	80058dc <PixelConfiguration::GetRgbMapping(pixel::Type)>
 8005940:	60a0      	str	r0, [r4, #8]
 8005942:	7c63      	ldrb	r3, [r4, #17]
 8005944:	7c22      	ldrb	r2, [r4, #16]
 8005946:	4628      	mov	r0, r5
 8005948:	429a      	cmp	r2, r3
 800594a:	bf28      	it	cs
 800594c:	2300      	movcs	r3, #0
 800594e:	f10d 0207 	add.w	r2, sp, #7
 8005952:	bf28      	it	cs
 8005954:	8223      	strhcs	r3, [r4, #16]
 8005956:	f10d 0106 	add.w	r1, sp, #6
 800595a:	f7ff ffce 	bl	80058fa <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800595e:	7c23      	ldrb	r3, [r4, #16]
 8005960:	b913      	cbnz	r3, 8005968 <PixelConfiguration::Validate(unsigned int&)+0x54>
 8005962:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005966:	7423      	strb	r3, [r4, #16]
 8005968:	7c63      	ldrb	r3, [r4, #17]
 800596a:	b913      	cbnz	r3, 8005972 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800596c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005970:	7463      	strb	r3, [r4, #17]
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 8005974:	e020      	b.n	80059b8 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8005976:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800597a:	bf28      	it	cs
 800597c:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005980:	6043      	str	r3, [r0, #4]
 8005982:	2303      	movs	r3, #3
 8005984:	600b      	str	r3, [r1, #0]
 8005986:	f1a5 030b 	sub.w	r3, r5, #11
 800598a:	2b01      	cmp	r3, #1
 800598c:	d806      	bhi.n	800599c <PixelConfiguration::Validate(unsigned int&)+0x88>
 800598e:	7c83      	ldrb	r3, [r0, #18]
 8005990:	2b1f      	cmp	r3, #31
 8005992:	d81d      	bhi.n	80059d0 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 8005994:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005998:	74a3      	strb	r3, [r4, #18]
 800599a:	e000      	b.n	800599e <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800599c:	b9d5      	cbnz	r5, 80059d4 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800599e:	2300      	movs	r3, #0
 80059a0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80059a4:	2a06      	cmp	r2, #6
 80059a6:	bf08      	it	eq
 80059a8:	60a3      	streq	r3, [r4, #8]
 80059aa:	2d0d      	cmp	r5, #13
 80059ac:	74e3      	strb	r3, [r4, #19]
 80059ae:	8221      	strh	r1, [r4, #16]
 80059b0:	68e3      	ldr	r3, [r4, #12]
 80059b2:	d109      	bne.n	80059c8 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 80059b4:	b913      	cbnz	r3, 80059bc <PixelConfiguration::Validate(unsigned int&)+0xa8>
 80059b6:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 80059b8:	60e3      	str	r3, [r4, #12]
 80059ba:	e003      	b.n	80059c4 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d900      	bls.n	80059c4 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 80059c2:	60e2      	str	r2, [r4, #12]
 80059c4:	b003      	add	sp, #12
 80059c6:	bd30      	pop	{r4, r5, pc}
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f4      	beq.n	80059b6 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 80059cc:	4a06      	ldr	r2, [pc, #24]	; (80059e8 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 80059ce:	e7f6      	b.n	80059be <PixelConfiguration::Validate(unsigned int&)+0xaa>
 80059d0:	23ff      	movs	r3, #255	; 0xff
 80059d2:	e7e1      	b.n	8005998 <PixelConfiguration::Validate(unsigned int&)+0x84>
 80059d4:	2d0d      	cmp	r5, #13
 80059d6:	d0e2      	beq.n	800599e <PixelConfiguration::Validate(unsigned int&)+0x8a>
 80059d8:	e7ab      	b.n	8005932 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 80059da:	bf00      	nop
 80059dc:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 80059e0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80059e4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80059e8:	017d7840 	cmneq	sp, r0, asr #16

080059ec <PixelConfiguration::Dump()>:
 80059ec:	4770      	bx	lr
	...

080059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 80059f0:	b507      	push	{r0, r1, r2, lr}
 80059f2:	b2cb      	uxtb	r3, r1
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	f3c1 4207 	ubfx	r2, r1, #16, #8
 80059fa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80059fe:	4601      	mov	r1, r0
 8005a00:	4803      	ldr	r0, [pc, #12]	; (8005a10 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 8005a02:	6800      	ldr	r0, [r0, #0]
 8005a04:	f000 fb06 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005a08:	b003      	add	sp, #12
 8005a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a0e:	bf00      	nop
 8005a10:	20000684 	andcs	r0, r0, r4, lsl #13

08005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	2400      	movs	r4, #0
 8005a18:	4d05      	ldr	r5, [pc, #20]	; (8005a30 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005a1a:	682b      	ldr	r3, [r5, #0]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d905      	bls.n	8005a2c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 8005a20:	4620      	mov	r0, r4
 8005a22:	2100      	movs	r1, #0
 8005a24:	f7ff ffe4 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005a28:	3401      	adds	r4, #1
 8005a2a:	e7f6      	b.n	8005a1a <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005a2c:	bd38      	pop	{r3, r4, r5, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000680 	andcs	r0, r0, r0, lsl #13

08005a34 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005a34:	2901      	cmp	r1, #1
 8005a36:	bf28      	it	cs
 8005a38:	2101      	movcs	r1, #1
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005a54:	61da      	str	r2, [r3, #28]
 8005a56:	6019      	str	r1, [r3, #0]
 8005a58:	619a      	str	r2, [r3, #24]
 8005a5a:	4770      	bx	lr
 8005a5c:	20000694 	mulcs	r0, r4, r6
 8005a60:	20000684 	andcs	r0, r0, r4, lsl #13
 8005a64:	20000678 	andcs	r0, r0, r8, ror r6
 8005a68:	20000680 	andcs	r0, r0, r0, lsl #13
 8005a6c:	20001814 	andcs	r1, r0, r4, lsl r8
 8005a70:	20000658 	andcs	r0, r0, r8, asr r6

08005a74 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005a74:	2805      	cmp	r0, #5
 8005a76:	bfdd      	ittte	le
 8005a78:	220e      	movle	r2, #14
 8005a7a:	4b02      	ldrle	r3, [pc, #8]	; (8005a84 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8005a7c:	fb02 3000 	mlale	r0, r2, r0, r3
 8005a80:	4801      	ldrgt	r0, [pc, #4]	; (8005a88 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005a82:	4770      	bx	lr
 8005a84:	0800ae0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, sp, pc}
 8005a88:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}

08005a8c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	460e      	mov	r6, r1
 8005a90:	4615      	mov	r5, r2
 8005a92:	461c      	mov	r4, r3
 8005a94:	f7ff ffbe 	bl	8005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005aa2:	61cb      	str	r3, [r1, #28]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	604d      	str	r5, [r1, #4]
 8005aa8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005aac:	618c      	str	r4, [r1, #24]
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	20000658 	andcs	r0, r0, r8, asr r6

08005ab4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	461c      	mov	r4, r3
 8005aba:	4615      	mov	r5, r2
 8005abc:	f7ff ffaa 	bl	8005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	4908      	ldr	r1, [pc, #32]	; (8005ae4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005ac4:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005ac8:	61cb      	str	r3, [r1, #28]
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005ad0:	604b      	str	r3, [r1, #4]
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	610b      	str	r3, [r1, #16]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	614b      	str	r3, [r1, #20]
 8005adc:	9b05      	ldr	r3, [sp, #20]
 8005ade:	618b      	str	r3, [r1, #24]
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000658 	andcs	r0, r0, r8, asr r6
 8005ae8:	20000680 	andcs	r0, r0, r0, lsl #13

08005aec <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	460e      	mov	r6, r1
 8005af0:	461d      	mov	r5, r3
 8005af2:	4614      	mov	r4, r2
 8005af4:	f7ff ff8e 	bl	8005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005af8:	2303      	movs	r3, #3
 8005afa:	4907      	ldr	r1, [pc, #28]	; (8005b18 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005afc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005b00:	61cb      	str	r3, [r1, #28]
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005b04:	604d      	str	r5, [r1, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	608c      	str	r4, [r1, #8]
 8005b0a:	610b      	str	r3, [r1, #16]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	614b      	str	r3, [r1, #20]
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	618b      	str	r3, [r1, #24]
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	bf00      	nop
 8005b18:	20000658 	andcs	r0, r0, r8, asr r6
 8005b1c:	20000680 	andcs	r0, r0, r0, lsl #13

08005b20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	460e      	mov	r6, r1
 8005b24:	461d      	mov	r5, r3
 8005b26:	4614      	mov	r4, r2
 8005b28:	f7ff ff74 	bl	8005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	4912      	ldr	r1, [pc, #72]	; (8005b78 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005b30:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005b34:	604d      	str	r5, [r1, #4]
 8005b36:	4d11      	ldr	r5, [pc, #68]	; (8005b7c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005b38:	61cb      	str	r3, [r1, #28]
 8005b3a:	6828      	ldr	r0, [r5, #0]
 8005b3c:	608c      	str	r4, [r1, #8]
 8005b3e:	1e43      	subs	r3, r0, #1
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	610b      	str	r3, [r1, #16]
 8005b46:	2300      	movs	r3, #0
 8005b48:	4c0d      	ldr	r4, [pc, #52]	; (8005b80 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005b4a:	614b      	str	r3, [r1, #20]
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	b993      	cbnz	r3, 8005b76 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 8005b50:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005b54:	4298      	cmp	r0, r3
 8005b56:	bf2c      	ite	cs
 8005b58:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005b5c:	0080      	lslcc	r0, r0, #2
 8005b5e:	f002 fc60 	bl	8008422 <operator new[](unsigned int)>
 8005b62:	2200      	movs	r2, #0
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	6020      	str	r0, [r4, #0]
 8005b68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b6c:	4298      	cmp	r0, r3
 8005b6e:	d002      	beq.n	8005b76 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 8005b70:	f840 2b04 	str.w	r2, [r0], #4
 8005b74:	e7fa      	b.n	8005b6c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	20000658 	andcs	r0, r0, r8, asr r6
 8005b7c:	20000680 	andcs	r0, r0, r0, lsl #13
 8005b80:	2000067c 	andcs	r0, r0, ip, ror r6

08005b84 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	460e      	mov	r6, r1
 8005b88:	461c      	mov	r4, r3
 8005b8a:	4615      	mov	r5, r2
 8005b8c:	f7ff ff42 	bl	8005a14 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005b90:	2305      	movs	r3, #5
 8005b92:	4907      	ldr	r1, [pc, #28]	; (8005bb0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005b94:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005b98:	61cb      	str	r3, [r1, #28]
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005ba0:	604b      	str	r3, [r1, #4]
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	610b      	str	r3, [r1, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	614b      	str	r3, [r1, #20]
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	618b      	str	r3, [r1, #24]
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	20000658 	andcs	r0, r0, r8, asr r6

08005bb4 <PixelPatterns::Wheel(unsigned char)>:
 8005bb4:	43c9      	mvns	r1, r1
 8005bb6:	b2c9      	uxtb	r1, r1
 8005bb8:	2954      	cmp	r1, #84	; 0x54
 8005bba:	d809      	bhi.n	8005bd0 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005bbc:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 8005bc0:	3801      	subs	r0, #1
 8005bc2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005bc6:	b2c3      	uxtb	r3, r0
 8005bc8:	b2c8      	uxtb	r0, r1
 8005bca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8005bce:	4770      	bx	lr
 8005bd0:	29a9      	cmp	r1, #169	; 0xa9
 8005bd2:	d80b      	bhi.n	8005bec <PixelPatterns::Wheel(unsigned char)+0x38>
 8005bd4:	3955      	subs	r1, #85	; 0x55
 8005bd6:	b2c9      	uxtb	r1, r1
 8005bd8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8005bdc:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 8005be0:	b2c3      	uxtb	r3, r0
 8005be2:	1e48      	subs	r0, r1, #1
 8005be4:	b2c0      	uxtb	r0, r0
 8005be6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005bea:	4770      	bx	lr
 8005bec:	3156      	adds	r1, #86	; 0x56
 8005bee:	b2c9      	uxtb	r1, r1
 8005bf0:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 8005bf4:	3801      	subs	r0, #1
 8005bf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005bfa:	b2c3      	uxtb	r3, r0
 8005bfc:	b2c8      	uxtb	r0, r1
 8005bfe:	0400      	lsls	r0, r0, #16
 8005c00:	e7f1      	b.n	8005be6 <PixelPatterns::Wheel(unsigned char)+0x32>
	...

08005c04 <PixelPatterns::Increment(unsigned int)>:
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <PixelPatterns::Increment(unsigned int)+0x38>)
 8005c06:	b510      	push	{r4, lr}
 8005c08:	014c      	lsls	r4, r1, #5
 8005c0a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005c0e:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8005c12:	b930      	cbnz	r0, 8005c22 <PixelPatterns::Increment(unsigned int)+0x1e>
 8005c14:	690a      	ldr	r2, [r1, #16]
 8005c16:	3301      	adds	r3, #1
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	bf18      	it	ne
 8005c1c:	4618      	movne	r0, r3
 8005c1e:	6148      	str	r0, [r1, #20]
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	b92b      	cbnz	r3, 8005c30 <PixelPatterns::Increment(unsigned int)+0x2c>
 8005c24:	4422      	add	r2, r4
 8005c26:	6913      	ldr	r3, [r2, #16]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	6153      	str	r3, [r2, #20]
 8005c2e:	e7f7      	b.n	8005c20 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005c30:	3b01      	subs	r3, #1
 8005c32:	614b      	str	r3, [r1, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f3      	bne.n	8005c20 <PixelPatterns::Increment(unsigned int)+0x1c>
 8005c38:	e7f4      	b.n	8005c24 <PixelPatterns::Increment(unsigned int)+0x20>
 8005c3a:	bf00      	nop
 8005c3c:	20000658 	andcs	r0, r0, r8, asr r6

08005c40 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8005c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4604      	mov	r4, r0
 8005c46:	460d      	mov	r5, r1
 8005c48:	2600      	movs	r6, #0
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005c4c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005c90 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8005c50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005c54:	695f      	ldr	r7, [r3, #20]
 8005c56:	f8d8 1000 	ldr.w	r1, [r8]
 8005c5a:	b2b2      	uxth	r2, r6
 8005c5c:	4291      	cmp	r1, r2
 8005c5e:	f106 0601 	add.w	r6, r6, #1
 8005c62:	d90c      	bls.n	8005c7e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 8005c64:	0213      	lsls	r3, r2, #8
 8005c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c6a:	443b      	add	r3, r7
 8005c6c:	b2d9      	uxtb	r1, r3
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7ff ffa0 	bl	8005bb4 <PixelPatterns::Wheel(unsigned char)>
 8005c74:	4601      	mov	r1, r0
 8005c76:	4610      	mov	r0, r2
 8005c78:	f7ff feba 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005c7c:	e7eb      	b.n	8005c56 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 8005c7e:	4629      	mov	r1, r5
 8005c80:	4620      	mov	r0, r4
 8005c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	f7ff bfbd 	b.w	8005c04 <PixelPatterns::Increment(unsigned int)>
 8005c8a:	bf00      	nop
 8005c8c:	20000658 	andcs	r0, r0, r8, asr r6
 8005c90:	20000680 	andcs	r0, r0, r0, lsl #13

08005c94 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	4605      	mov	r5, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	f04f 0b00 	mov.w	fp, #0
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8005ca2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8005cf0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8005ca6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005caa:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8005cae:	f8df a044 	ldr.w	sl, [pc, #68]	; 8005cf4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 8005cb2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 8005cb6:	f8d9 3000 	ldr.w	r3, [r9]
 8005cba:	fa1f f08b 	uxth.w	r0, fp
 8005cbe:	4283      	cmp	r3, r0
 8005cc0:	d90d      	bls.n	8005cde <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 8005cc2:	eb08 0300 	add.w	r3, r8, r0
 8005cc6:	fb0a f303 	mul.w	r3, sl, r3
 8005cca:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8005cce:	bf94      	ite	ls
 8005cd0:	4631      	movls	r1, r6
 8005cd2:	4639      	movhi	r1, r7
 8005cd4:	f7ff fe8c 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005cd8:	f10b 0b01 	add.w	fp, fp, #1
 8005cdc:	e7eb      	b.n	8005cb6 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f7ff bf8d 	b.w	8005c04 <PixelPatterns::Increment(unsigned int)>
 8005cea:	bf00      	nop
 8005cec:	20000658 	andcs	r0, r0, r8, asr r6
 8005cf0:	20000680 	andcs	r0, r0, r0, lsl #13
 8005cf4:	aaaaaaab 	bge	6ab07a8 <__heap_size+0x6aaf7a8>

08005cf8 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 8005d00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	6958      	ldr	r0, [r3, #20]
 8005d08:	f7ff fe72 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d14:	f7ff bf76 	b.w	8005c04 <PixelPatterns::Increment(unsigned int)>
 8005d18:	20000658 	andcs	r0, r0, r8, asr r6

08005d1c <PixelPatterns::ScannerUpdate(unsigned int)>:
 8005d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	460d      	mov	r5, r1
 8005d22:	f04f 0900 	mov.w	r9, #0
 8005d26:	4a27      	ldr	r2, [pc, #156]	; (8005dc4 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 8005d28:	b085      	sub	sp, #20
 8005d2a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005d2e:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8005d32:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8005d36:	00b3      	lsls	r3, r6, #2
 8005d38:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8005dc8 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 8005d3c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005dcc <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8005d40:	9002      	str	r0, [sp, #8]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	1bbf      	subs	r7, r7, r6
 8005d46:	f8db 1000 	ldr.w	r1, [fp]
 8005d4a:	fa1f f489 	uxth.w	r4, r9
 8005d4e:	42a1      	cmp	r1, r4
 8005d50:	d930      	bls.n	8005db4 <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d10b      	bne.n	8005d6e <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 8005d56:	4651      	mov	r1, sl
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f7ff fe49 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005d5e:	f8d8 1000 	ldr.w	r1, [r8]
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	f841 a003 	str.w	sl, [r1, r3]
 8005d68:	f109 0901 	add.w	r9, r9, #1
 8005d6c:	e7eb      	b.n	8005d46 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 8005d6e:	42a7      	cmp	r7, r4
 8005d70:	d108      	bne.n	8005d84 <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 8005d72:	4651      	mov	r1, sl
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff fe3b 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005d7a:	f8d8 1000 	ldr.w	r1, [r8]
 8005d7e:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 8005d82:	e7f1      	b.n	8005d68 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 8005d84:	f8d8 1000 	ldr.w	r1, [r8]
 8005d88:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005d8c:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8005d90:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 8005d94:	0209      	lsls	r1, r1, #8
 8005d96:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005d9a:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8005d9e:	4301      	orrs	r1, r0
 8005da0:	4620      	mov	r0, r4
 8005da2:	9103      	str	r1, [sp, #12]
 8005da4:	f7ff fe24 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005da8:	f8d8 0000 	ldr.w	r0, [r8]
 8005dac:	9903      	ldr	r1, [sp, #12]
 8005dae:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8005db2:	e7d9      	b.n	8005d68 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 8005db4:	4629      	mov	r1, r5
 8005db6:	9802      	ldr	r0, [sp, #8]
 8005db8:	b005      	add	sp, #20
 8005dba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbe:	f7ff bf21 	b.w	8005c04 <PixelPatterns::Increment(unsigned int)>
 8005dc2:	bf00      	nop
 8005dc4:	20000658 	andcs	r0, r0, r8, asr r6
 8005dc8:	20000680 	andcs	r0, r0, r0, lsl #13
 8005dcc:	2000067c 	andcs	r0, r0, ip, ror r6

08005dd0 <PixelPatterns::FadeUpdate(unsigned int)>:
 8005dd0:	4a21      	ldr	r2, [pc, #132]	; (8005e58 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005dda:	4605      	mov	r5, r0
 8005ddc:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 8005de0:	460c      	mov	r4, r1
 8005de2:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 8005de6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005dea:	434a      	muls	r2, r1
 8005dec:	1a77      	subs	r7, r6, r1
 8005dee:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8005df2:	fb07 220c 	mla	r2, r7, ip, r2
 8005df6:	fbb2 f2f6 	udiv	r2, r2, r6
 8005dfa:	0212      	lsls	r2, r2, #8
 8005dfc:	fa1f fc82 	uxth.w	ip, r2
 8005e00:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8005e04:	434a      	muls	r2, r1
 8005e06:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 8005e0a:	fb07 220e 	mla	r2, r7, lr, r2
 8005e0e:	fbb2 f2f6 	udiv	r2, r2, r6
 8005e12:	0412      	lsls	r2, r2, #16
 8005e14:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005e18:	ea4c 0202 	orr.w	r2, ip, r2
 8005e1c:	fa5f fc83 	uxtb.w	ip, r3
 8005e20:	b2c3      	uxtb	r3, r0
 8005e22:	434b      	muls	r3, r1
 8005e24:	fb07 330c 	mla	r3, r7, ip, r3
 8005e28:	fbb3 f3f6 	udiv	r3, r3, r6
 8005e2c:	2700      	movs	r7, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8005e5c <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005e34:	ea42 0603 	orr.w	r6, r2, r3
 8005e38:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3c:	42bb      	cmp	r3, r7
 8005e3e:	d905      	bls.n	8005e4c <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 8005e40:	4638      	mov	r0, r7
 8005e42:	4631      	mov	r1, r6
 8005e44:	f7ff fdd4 	bl	80059f0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e48:	3701      	adds	r7, #1
 8005e4a:	e7f5      	b.n	8005e38 <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e54:	f7ff bed6 	b.w	8005c04 <PixelPatterns::Increment(unsigned int)>
 8005e58:	20000658 	andcs	r0, r0, r8, asr r6
 8005e5c:	20000680 	andcs	r0, r0, r0, lsl #13

08005e60 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8005e64:	014e      	lsls	r6, r1, #5
 8005e66:	599c      	ldr	r4, [r3, r6]
 8005e68:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8005e6c:	686f      	ldr	r7, [r5, #4]
 8005e6e:	1b14      	subs	r4, r2, r4
 8005e70:	42bc      	cmp	r4, r7
 8005e72:	d319      	bcc.n	8005ea8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005e74:	519a      	str	r2, [r3, r6]
 8005e76:	69eb      	ldr	r3, [r5, #28]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d814      	bhi.n	8005ea8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005e7e:	e8df f003 	tbb	[pc, r3]
 8005e82:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8005e86:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8005e8a:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	f7ff ff00 	bl	8005c94 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8005e94:	e7fa      	b.n	8005e8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005e96:	f7ff ff2f 	bl	8005cf8 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8005e9a:	e7f7      	b.n	8005e8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005e9c:	f7ff ff3e 	bl	8005d1c <PixelPatterns::ScannerUpdate(unsigned int)>
 8005ea0:	e7f4      	b.n	8005e8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005ea2:	f7ff ff95 	bl	8005dd0 <PixelPatterns::FadeUpdate(unsigned int)>
 8005ea6:	e7f1      	b.n	8005e8c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e7f0      	b.n	8005e8e <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8005eac:	20000658 	andcs	r0, r0, r8, asr r6

08005eb0 <PixelPatterns::Run()>:
 8005eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	f003 fd11 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8005eba:	4604      	mov	r4, r0
 8005ebc:	b9c8      	cbnz	r0, 8005ef2 <PixelPatterns::Run()+0x42>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <PixelPatterns::Run()+0x48>)
 8005ec2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8005efc <PixelPatterns::Run()+0x4c>
 8005ec6:	681f      	ldr	r7, [r3, #0]
 8005ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ecc:	b2f1      	uxtb	r1, r6
 8005ece:	428b      	cmp	r3, r1
 8005ed0:	f106 0601 	add.w	r6, r6, #1
 8005ed4:	d906      	bls.n	8005ee4 <PixelPatterns::Run()+0x34>
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f7ff ffc1 	bl	8005e60 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 8005ede:	4304      	orrs	r4, r0
 8005ee0:	b2e4      	uxtb	r4, r4
 8005ee2:	e7f1      	b.n	8005ec8 <PixelPatterns::Run()+0x18>
 8005ee4:	b12c      	cbz	r4, 8005ef2 <PixelPatterns::Run()+0x42>
 8005ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <PixelPatterns::Run()+0x50>)
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	f000 bed1 	b.w	8006c94 <WS28xx::Update()>
 8005ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20001814 	andcs	r1, r0, r4, lsl r8
 8005efc:	20000678 	andcs	r0, r0, r8, ror r6
 8005f00:	20000684 	andcs	r0, r0, r4, lsl #13

08005f04 <PixelType::GetType(pixel::Type)>:
 8005f04:	280d      	cmp	r0, #13
 8005f06:	bfda      	itte	le
 8005f08:	4b02      	ldrle	r3, [pc, #8]	; (8005f14 <PixelType::GetType(pixel::Type)+0x10>)
 8005f0a:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8005f0e:	4802      	ldrgt	r0, [pc, #8]	; (8005f18 <PixelType::GetType(pixel::Type)+0x14>)
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	0800ae76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r9, sl, fp, sp, pc}
 8005f18:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}

08005f1c <PixelType::GetMap(pixel::Map)>:
 8005f1c:	2805      	cmp	r0, #5
 8005f1e:	bfda      	itte	le
 8005f20:	4b02      	ldrle	r3, [pc, #8]	; (8005f2c <PixelType::GetMap(pixel::Map)+0x10>)
 8005f22:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8005f26:	4802      	ldrgt	r0, [pc, #8]	; (8005f30 <PixelType::GetMap(pixel::Map)+0x14>)
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	0800ae5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, sl, fp, sp, pc}
 8005f30:	0800a03f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sp, pc}

08005f34 <PixelType::ConvertTxH(unsigned char)>:
 8005f34:	28f0      	cmp	r0, #240	; 0xf0
 8005f36:	d010      	beq.n	8005f5a <PixelType::ConvertTxH(unsigned char)+0x26>
 8005f38:	d807      	bhi.n	8005f4a <PixelType::ConvertTxH(unsigned char)+0x16>
 8005f3a:	28c0      	cmp	r0, #192	; 0xc0
 8005f3c:	d00f      	beq.n	8005f5e <PixelType::ConvertTxH(unsigned char)+0x2a>
 8005f3e:	28e0      	cmp	r0, #224	; 0xe0
 8005f40:	d00f      	beq.n	8005f62 <PixelType::ConvertTxH(unsigned char)+0x2e>
 8005f42:	2880      	cmp	r0, #128	; 0x80
 8005f44:	d113      	bne.n	8005f6e <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005f46:	480b      	ldr	r0, [pc, #44]	; (8005f74 <PixelType::ConvertTxH(unsigned char)+0x40>)
 8005f48:	4770      	bx	lr
 8005f4a:	28fc      	cmp	r0, #252	; 0xfc
 8005f4c:	d00b      	beq.n	8005f66 <PixelType::ConvertTxH(unsigned char)+0x32>
 8005f4e:	28fe      	cmp	r0, #254	; 0xfe
 8005f50:	d00b      	beq.n	8005f6a <PixelType::ConvertTxH(unsigned char)+0x36>
 8005f52:	28f8      	cmp	r0, #248	; 0xf8
 8005f54:	d10b      	bne.n	8005f6e <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005f56:	4808      	ldr	r0, [pc, #32]	; (8005f78 <PixelType::ConvertTxH(unsigned char)+0x44>)
 8005f58:	4770      	bx	lr
 8005f5a:	4808      	ldr	r0, [pc, #32]	; (8005f7c <PixelType::ConvertTxH(unsigned char)+0x48>)
 8005f5c:	4770      	bx	lr
 8005f5e:	4808      	ldr	r0, [pc, #32]	; (8005f80 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 8005f60:	4770      	bx	lr
 8005f62:	4808      	ldr	r0, [pc, #32]	; (8005f84 <PixelType::ConvertTxH(unsigned char)+0x50>)
 8005f64:	4770      	bx	lr
 8005f66:	4808      	ldr	r0, [pc, #32]	; (8005f88 <PixelType::ConvertTxH(unsigned char)+0x54>)
 8005f68:	4770      	bx	lr
 8005f6a:	4808      	ldr	r0, [pc, #32]	; (8005f8c <PixelType::ConvertTxH(unsigned char)+0x58>)
 8005f6c:	4770      	bx	lr
 8005f6e:	2000      	movs	r0, #0
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 8005f78:	3f480000 	svccc	0x00480000
 8005f7c:	3f200000 	svccc	0x00200000
 8005f80:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 8005f84:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 8005f88:	3f700000 	svccc	0x00700000
 8005f8c:	3f8c0000 	svccc	0x008c0000

08005f90 <WS28xx::Print()>:
 8005f90:	b513      	push	{r0, r1, r4, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	4819      	ldr	r0, [pc, #100]	; (8005ffc <WS28xx::Print()+0x6c>)
 8005f96:	f7fc f9b5 	bl	8002304 <printf>
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	f7ff ffb2 	bl	8005f04 <PixelType::GetType(pixel::Type)>
 8005fa0:	6822      	ldr	r2, [r4, #0]
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4816      	ldr	r0, [pc, #88]	; (8006000 <WS28xx::Print()+0x70>)
 8005fa6:	f7fc f9ad 	bl	8002304 <printf>
 8005faa:	6861      	ldr	r1, [r4, #4]
 8005fac:	4815      	ldr	r0, [pc, #84]	; (8006004 <WS28xx::Print()+0x74>)
 8005fae:	f7fc f9a9 	bl	8002304 <printf>
 8005fb2:	7ca3      	ldrb	r3, [r4, #18]
 8005fb4:	b1fb      	cbz	r3, 8005ff6 <WS28xx::Print()+0x66>
 8005fb6:	68a0      	ldr	r0, [r4, #8]
 8005fb8:	f7ff ffb0 	bl	8005f1c <PixelType::GetMap(pixel::Map)>
 8005fbc:	68a2      	ldr	r2, [r4, #8]
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	4811      	ldr	r0, [pc, #68]	; (8006008 <WS28xx::Print()+0x78>)
 8005fc2:	f7fc f99f 	bl	8002304 <printf>
 8005fc6:	7c20      	ldrb	r0, [r4, #16]
 8005fc8:	f7ff ffb4 	bl	8005f34 <PixelType::ConvertTxH(unsigned char)>
 8005fcc:	f7fa fba8 	bl	8000720 <__aeabi_f2d>
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	7c21      	ldrb	r1, [r4, #16]
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	9100      	str	r1, [sp, #0]
 8005fd8:	480c      	ldr	r0, [pc, #48]	; (800600c <WS28xx::Print()+0x7c>)
 8005fda:	f7fc f993 	bl	8002304 <printf>
 8005fde:	7c60      	ldrb	r0, [r4, #17]
 8005fe0:	f7ff ffa8 	bl	8005f34 <PixelType::ConvertTxH(unsigned char)>
 8005fe4:	f7fa fb9c 	bl	8000720 <__aeabi_f2d>
 8005fe8:	460b      	mov	r3, r1
 8005fea:	7c61      	ldrb	r1, [r4, #17]
 8005fec:	4602      	mov	r2, r0
 8005fee:	9100      	str	r1, [sp, #0]
 8005ff0:	4807      	ldr	r0, [pc, #28]	; (8006010 <WS28xx::Print()+0x80>)
 8005ff2:	f7fc f987 	bl	8002304 <printf>
 8005ff6:	b002      	add	sp, #8
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop
 8005ffc:	0800aee6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, fp, sp, pc}
 8006000:	0800aef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp, sp, pc}
 8006004:	0800af0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, sp, pc}
 8006008:	0800af1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, fp, sp, pc}
 800600c:	0800af2f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp, pc}
 8006010:	0800af47 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, fp, sp, pc}

08006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 8006014:	b530      	push	{r4, r5, lr}
 8006016:	7c84      	ldrb	r4, [r0, #18]
 8006018:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800601c:	b994      	cbnz	r4, 8006044 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800601e:	6804      	ldr	r4, [r0, #0]
 8006020:	f1a4 0e0b 	sub.w	lr, r4, #11
 8006024:	f1be 0f01 	cmp.w	lr, #1
 8006028:	d93d      	bls.n	80060a6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800602a:	b9d4      	cbnz	r4, 8006062 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800602c:	6944      	ldr	r4, [r0, #20]
 800602e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006032:	5462      	strb	r2, [r4, r1]
 8006034:	6942      	ldr	r2, [r0, #20]
 8006036:	440a      	add	r2, r1
 8006038:	7053      	strb	r3, [r2, #1]
 800603a:	6943      	ldr	r3, [r0, #20]
 800603c:	4419      	add	r1, r3
 800603e:	f881 c002 	strb.w	ip, [r1, #2]
 8006042:	bd30      	pop	{r4, r5, pc}
 8006044:	6884      	ldr	r4, [r0, #8]
 8006046:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800604a:	00c9      	lsls	r1, r1, #3
 800604c:	2c05      	cmp	r4, #5
 800604e:	f200 812d 	bhi.w	80062ac <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 8006052:	e8df f014 	tbh	[pc, r4, lsl #1]
 8006056:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800605a:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800605e:	0202003b 	andeq	r0, r2, #59	; 0x3b
 8006062:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 8006066:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800606a:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800606e:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 8006072:	f004 040c 	and.w	r4, r4, #12
 8006076:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800607a:	ea4e 0e04 	orr.w	lr, lr, r4
 800607e:	6944      	ldr	r4, [r0, #20]
 8006080:	3101      	adds	r1, #1
 8006082:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 8006086:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800608a:	6944      	ldr	r4, [r0, #20]
 800608c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8006090:	f884 c001 	strb.w	ip, [r4, #1]
 8006094:	6944      	ldr	r4, [r0, #20]
 8006096:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800609a:	70a3      	strb	r3, [r4, #2]
 800609c:	6943      	ldr	r3, [r0, #20]
 800609e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80060a2:	70ca      	strb	r2, [r1, #3]
 80060a4:	bd30      	pop	{r4, r5, pc}
 80060a6:	6944      	ldr	r4, [r0, #20]
 80060a8:	7cc5      	ldrb	r5, [r0, #19]
 80060aa:	3101      	adds	r1, #1
 80060ac:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 80060b0:	6944      	ldr	r4, [r0, #20]
 80060b2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80060b6:	7062      	strb	r2, [r4, #1]
 80060b8:	6942      	ldr	r2, [r0, #20]
 80060ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80060be:	7093      	strb	r3, [r2, #2]
 80060c0:	6943      	ldr	r3, [r0, #20]
 80060c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80060c6:	f881 c003 	strb.w	ip, [r1, #3]
 80060ca:	bd30      	pop	{r4, r5, pc}
 80060cc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80060d0:	bf0c      	ite	eq
 80060d2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060d6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060da:	6945      	ldr	r5, [r0, #20]
 80060dc:	1c4c      	adds	r4, r1, #1
 80060de:	f805 e004 	strb.w	lr, [r5, r4]
 80060e2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80060e6:	bf0c      	ite	eq
 80060e8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80060ec:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80060f0:	6945      	ldr	r5, [r0, #20]
 80060f2:	1c8c      	adds	r4, r1, #2
 80060f4:	f805 e004 	strb.w	lr, [r5, r4]
 80060f8:	f01c 0f20 	tst.w	ip, #32
 80060fc:	bf0c      	ite	eq
 80060fe:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006102:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006106:	6945      	ldr	r5, [r0, #20]
 8006108:	1ccc      	adds	r4, r1, #3
 800610a:	f805 e004 	strb.w	lr, [r5, r4]
 800610e:	f01c 0f10 	tst.w	ip, #16
 8006112:	bf0c      	ite	eq
 8006114:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006118:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800611c:	6945      	ldr	r5, [r0, #20]
 800611e:	1d0c      	adds	r4, r1, #4
 8006120:	f01c 0f08 	tst.w	ip, #8
 8006124:	f805 e004 	strb.w	lr, [r5, r4]
 8006128:	bf0c      	ite	eq
 800612a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800612e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006132:	6945      	ldr	r5, [r0, #20]
 8006134:	1d4c      	adds	r4, r1, #5
 8006136:	f01c 0f04 	tst.w	ip, #4
 800613a:	f805 e004 	strb.w	lr, [r5, r4]
 800613e:	bf0c      	ite	eq
 8006140:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006144:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006148:	6945      	ldr	r5, [r0, #20]
 800614a:	1d8c      	adds	r4, r1, #6
 800614c:	f01c 0f02 	tst.w	ip, #2
 8006150:	f805 e004 	strb.w	lr, [r5, r4]
 8006154:	bf0c      	ite	eq
 8006156:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800615a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800615e:	6945      	ldr	r5, [r0, #20]
 8006160:	1dcc      	adds	r4, r1, #7
 8006162:	f01c 0f01 	tst.w	ip, #1
 8006166:	f805 e004 	strb.w	lr, [r5, r4]
 800616a:	bf14      	ite	ne
 800616c:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8006170:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8006174:	6945      	ldr	r5, [r0, #20]
 8006176:	f101 0408 	add.w	r4, r1, #8
 800617a:	f805 c004 	strb.w	ip, [r5, r4]
 800617e:	0615      	lsls	r5, r2, #24
 8006180:	bf54      	ite	pl
 8006182:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006186:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800618a:	6945      	ldr	r5, [r0, #20]
 800618c:	f101 0409 	add.w	r4, r1, #9
 8006190:	f805 c004 	strb.w	ip, [r5, r4]
 8006194:	0655      	lsls	r5, r2, #25
 8006196:	bf54      	ite	pl
 8006198:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800619c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80061a0:	6945      	ldr	r5, [r0, #20]
 80061a2:	f101 040a 	add.w	r4, r1, #10
 80061a6:	f805 c004 	strb.w	ip, [r5, r4]
 80061aa:	0695      	lsls	r5, r2, #26
 80061ac:	bf54      	ite	pl
 80061ae:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80061b2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80061b6:	6945      	ldr	r5, [r0, #20]
 80061b8:	f101 040b 	add.w	r4, r1, #11
 80061bc:	f805 c004 	strb.w	ip, [r5, r4]
 80061c0:	06d5      	lsls	r5, r2, #27
 80061c2:	bf54      	ite	pl
 80061c4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80061c8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80061cc:	6945      	ldr	r5, [r0, #20]
 80061ce:	f101 040c 	add.w	r4, r1, #12
 80061d2:	f805 c004 	strb.w	ip, [r5, r4]
 80061d6:	0715      	lsls	r5, r2, #28
 80061d8:	bf54      	ite	pl
 80061da:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80061de:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80061e2:	6945      	ldr	r5, [r0, #20]
 80061e4:	f101 040d 	add.w	r4, r1, #13
 80061e8:	f805 c004 	strb.w	ip, [r5, r4]
 80061ec:	0755      	lsls	r5, r2, #29
 80061ee:	bf54      	ite	pl
 80061f0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80061f4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80061f8:	6945      	ldr	r5, [r0, #20]
 80061fa:	f101 040e 	add.w	r4, r1, #14
 80061fe:	f805 c004 	strb.w	ip, [r5, r4]
 8006202:	0795      	lsls	r5, r2, #30
 8006204:	bf58      	it	pl
 8006206:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800620a:	6945      	ldr	r5, [r0, #20]
 800620c:	bf48      	it	mi
 800620e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006212:	f101 040f 	add.w	r4, r1, #15
 8006216:	f805 c004 	strb.w	ip, [r5, r4]
 800621a:	07d5      	lsls	r5, r2, #31
 800621c:	bf4c      	ite	mi
 800621e:	7c45      	ldrbmi	r5, [r0, #17]
 8006220:	7c05      	ldrbpl	r5, [r0, #16]
 8006222:	6942      	ldr	r2, [r0, #20]
 8006224:	f101 0410 	add.w	r4, r1, #16
 8006228:	5515      	strb	r5, [r2, r4]
 800622a:	061c      	lsls	r4, r3, #24
 800622c:	bf54      	ite	pl
 800622e:	7c05      	ldrbpl	r5, [r0, #16]
 8006230:	7c45      	ldrbmi	r5, [r0, #17]
 8006232:	6944      	ldr	r4, [r0, #20]
 8006234:	f101 0211 	add.w	r2, r1, #17
 8006238:	54a5      	strb	r5, [r4, r2]
 800623a:	065d      	lsls	r5, r3, #25
 800623c:	bf54      	ite	pl
 800623e:	7c05      	ldrbpl	r5, [r0, #16]
 8006240:	7c45      	ldrbmi	r5, [r0, #17]
 8006242:	6944      	ldr	r4, [r0, #20]
 8006244:	f101 0212 	add.w	r2, r1, #18
 8006248:	54a5      	strb	r5, [r4, r2]
 800624a:	069c      	lsls	r4, r3, #26
 800624c:	bf54      	ite	pl
 800624e:	7c05      	ldrbpl	r5, [r0, #16]
 8006250:	7c45      	ldrbmi	r5, [r0, #17]
 8006252:	6944      	ldr	r4, [r0, #20]
 8006254:	f101 0213 	add.w	r2, r1, #19
 8006258:	54a5      	strb	r5, [r4, r2]
 800625a:	06dd      	lsls	r5, r3, #27
 800625c:	bf54      	ite	pl
 800625e:	7c05      	ldrbpl	r5, [r0, #16]
 8006260:	7c45      	ldrbmi	r5, [r0, #17]
 8006262:	6944      	ldr	r4, [r0, #20]
 8006264:	f101 0214 	add.w	r2, r1, #20
 8006268:	54a5      	strb	r5, [r4, r2]
 800626a:	071c      	lsls	r4, r3, #28
 800626c:	bf54      	ite	pl
 800626e:	7c05      	ldrbpl	r5, [r0, #16]
 8006270:	7c45      	ldrbmi	r5, [r0, #17]
 8006272:	6944      	ldr	r4, [r0, #20]
 8006274:	f101 0215 	add.w	r2, r1, #21
 8006278:	54a5      	strb	r5, [r4, r2]
 800627a:	075d      	lsls	r5, r3, #29
 800627c:	bf54      	ite	pl
 800627e:	7c05      	ldrbpl	r5, [r0, #16]
 8006280:	7c45      	ldrbmi	r5, [r0, #17]
 8006282:	6944      	ldr	r4, [r0, #20]
 8006284:	f101 0216 	add.w	r2, r1, #22
 8006288:	54a5      	strb	r5, [r4, r2]
 800628a:	079c      	lsls	r4, r3, #30
 800628c:	bf54      	ite	pl
 800628e:	7c05      	ldrbpl	r5, [r0, #16]
 8006290:	7c45      	ldrbmi	r5, [r0, #17]
 8006292:	6944      	ldr	r4, [r0, #20]
 8006294:	f101 0217 	add.w	r2, r1, #23
 8006298:	54a5      	strb	r5, [r4, r2]
 800629a:	3118      	adds	r1, #24
 800629c:	f013 0f01 	tst.w	r3, #1
 80062a0:	f000 80d9 	beq.w	8006456 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 80062a4:	7c42      	ldrb	r2, [r0, #17]
 80062a6:	6943      	ldr	r3, [r0, #20]
 80062a8:	545a      	strb	r2, [r3, r1]
 80062aa:	bd30      	pop	{r4, r5, pc}
 80062ac:	0615      	lsls	r5, r2, #24
 80062ae:	bf54      	ite	pl
 80062b0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80062b4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80062b8:	6945      	ldr	r5, [r0, #20]
 80062ba:	1c4c      	adds	r4, r1, #1
 80062bc:	f805 e004 	strb.w	lr, [r5, r4]
 80062c0:	0655      	lsls	r5, r2, #25
 80062c2:	bf54      	ite	pl
 80062c4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80062c8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80062cc:	6945      	ldr	r5, [r0, #20]
 80062ce:	1c8c      	adds	r4, r1, #2
 80062d0:	f805 e004 	strb.w	lr, [r5, r4]
 80062d4:	0695      	lsls	r5, r2, #26
 80062d6:	bf54      	ite	pl
 80062d8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80062dc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80062e0:	6945      	ldr	r5, [r0, #20]
 80062e2:	1ccc      	adds	r4, r1, #3
 80062e4:	f805 e004 	strb.w	lr, [r5, r4]
 80062e8:	06d5      	lsls	r5, r2, #27
 80062ea:	bf54      	ite	pl
 80062ec:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80062f0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80062f4:	6945      	ldr	r5, [r0, #20]
 80062f6:	1d0c      	adds	r4, r1, #4
 80062f8:	f805 e004 	strb.w	lr, [r5, r4]
 80062fc:	0715      	lsls	r5, r2, #28
 80062fe:	bf54      	ite	pl
 8006300:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006304:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006308:	6945      	ldr	r5, [r0, #20]
 800630a:	1d4c      	adds	r4, r1, #5
 800630c:	f805 e004 	strb.w	lr, [r5, r4]
 8006310:	0755      	lsls	r5, r2, #29
 8006312:	bf54      	ite	pl
 8006314:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006318:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800631c:	6945      	ldr	r5, [r0, #20]
 800631e:	1d8c      	adds	r4, r1, #6
 8006320:	f805 e004 	strb.w	lr, [r5, r4]
 8006324:	0795      	lsls	r5, r2, #30
 8006326:	bf58      	it	pl
 8006328:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800632c:	6945      	ldr	r5, [r0, #20]
 800632e:	bf48      	it	mi
 8006330:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006334:	1dcc      	adds	r4, r1, #7
 8006336:	f805 e004 	strb.w	lr, [r5, r4]
 800633a:	07d5      	lsls	r5, r2, #31
 800633c:	bf4c      	ite	mi
 800633e:	7c45      	ldrbmi	r5, [r0, #17]
 8006340:	7c05      	ldrbpl	r5, [r0, #16]
 8006342:	6942      	ldr	r2, [r0, #20]
 8006344:	f101 0408 	add.w	r4, r1, #8
 8006348:	5515      	strb	r5, [r2, r4]
 800634a:	061c      	lsls	r4, r3, #24
 800634c:	bf54      	ite	pl
 800634e:	7c05      	ldrbpl	r5, [r0, #16]
 8006350:	7c45      	ldrbmi	r5, [r0, #17]
 8006352:	6944      	ldr	r4, [r0, #20]
 8006354:	f101 0209 	add.w	r2, r1, #9
 8006358:	54a5      	strb	r5, [r4, r2]
 800635a:	065d      	lsls	r5, r3, #25
 800635c:	bf54      	ite	pl
 800635e:	7c05      	ldrbpl	r5, [r0, #16]
 8006360:	7c45      	ldrbmi	r5, [r0, #17]
 8006362:	6944      	ldr	r4, [r0, #20]
 8006364:	f101 020a 	add.w	r2, r1, #10
 8006368:	54a5      	strb	r5, [r4, r2]
 800636a:	069c      	lsls	r4, r3, #26
 800636c:	bf54      	ite	pl
 800636e:	7c05      	ldrbpl	r5, [r0, #16]
 8006370:	7c45      	ldrbmi	r5, [r0, #17]
 8006372:	6944      	ldr	r4, [r0, #20]
 8006374:	f101 020b 	add.w	r2, r1, #11
 8006378:	54a5      	strb	r5, [r4, r2]
 800637a:	06dd      	lsls	r5, r3, #27
 800637c:	bf54      	ite	pl
 800637e:	7c05      	ldrbpl	r5, [r0, #16]
 8006380:	7c45      	ldrbmi	r5, [r0, #17]
 8006382:	6944      	ldr	r4, [r0, #20]
 8006384:	f101 020c 	add.w	r2, r1, #12
 8006388:	54a5      	strb	r5, [r4, r2]
 800638a:	071c      	lsls	r4, r3, #28
 800638c:	bf54      	ite	pl
 800638e:	7c05      	ldrbpl	r5, [r0, #16]
 8006390:	7c45      	ldrbmi	r5, [r0, #17]
 8006392:	6944      	ldr	r4, [r0, #20]
 8006394:	f101 020d 	add.w	r2, r1, #13
 8006398:	54a5      	strb	r5, [r4, r2]
 800639a:	075d      	lsls	r5, r3, #29
 800639c:	bf54      	ite	pl
 800639e:	7c05      	ldrbpl	r5, [r0, #16]
 80063a0:	7c45      	ldrbmi	r5, [r0, #17]
 80063a2:	6944      	ldr	r4, [r0, #20]
 80063a4:	f101 020e 	add.w	r2, r1, #14
 80063a8:	54a5      	strb	r5, [r4, r2]
 80063aa:	079c      	lsls	r4, r3, #30
 80063ac:	bf58      	it	pl
 80063ae:	7c05      	ldrbpl	r5, [r0, #16]
 80063b0:	6944      	ldr	r4, [r0, #20]
 80063b2:	bf48      	it	mi
 80063b4:	7c45      	ldrbmi	r5, [r0, #17]
 80063b6:	f101 020f 	add.w	r2, r1, #15
 80063ba:	54a5      	strb	r5, [r4, r2]
 80063bc:	07db      	lsls	r3, r3, #31
 80063be:	bf4c      	ite	mi
 80063c0:	7c44      	ldrbmi	r4, [r0, #17]
 80063c2:	7c04      	ldrbpl	r4, [r0, #16]
 80063c4:	6943      	ldr	r3, [r0, #20]
 80063c6:	f101 0210 	add.w	r2, r1, #16
 80063ca:	549c      	strb	r4, [r3, r2]
 80063cc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80063d0:	bf0c      	ite	eq
 80063d2:	7c04      	ldrbeq	r4, [r0, #16]
 80063d4:	7c44      	ldrbne	r4, [r0, #17]
 80063d6:	6942      	ldr	r2, [r0, #20]
 80063d8:	f101 0311 	add.w	r3, r1, #17
 80063dc:	54d4      	strb	r4, [r2, r3]
 80063de:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80063e2:	bf0c      	ite	eq
 80063e4:	7c04      	ldrbeq	r4, [r0, #16]
 80063e6:	7c44      	ldrbne	r4, [r0, #17]
 80063e8:	6942      	ldr	r2, [r0, #20]
 80063ea:	f101 0312 	add.w	r3, r1, #18
 80063ee:	54d4      	strb	r4, [r2, r3]
 80063f0:	f01c 0f20 	tst.w	ip, #32
 80063f4:	bf0c      	ite	eq
 80063f6:	7c04      	ldrbeq	r4, [r0, #16]
 80063f8:	7c44      	ldrbne	r4, [r0, #17]
 80063fa:	6942      	ldr	r2, [r0, #20]
 80063fc:	f101 0313 	add.w	r3, r1, #19
 8006400:	54d4      	strb	r4, [r2, r3]
 8006402:	f01c 0f10 	tst.w	ip, #16
 8006406:	bf0c      	ite	eq
 8006408:	7c04      	ldrbeq	r4, [r0, #16]
 800640a:	7c44      	ldrbne	r4, [r0, #17]
 800640c:	6942      	ldr	r2, [r0, #20]
 800640e:	f101 0314 	add.w	r3, r1, #20
 8006412:	54d4      	strb	r4, [r2, r3]
 8006414:	f01c 0f08 	tst.w	ip, #8
 8006418:	bf0c      	ite	eq
 800641a:	7c04      	ldrbeq	r4, [r0, #16]
 800641c:	7c44      	ldrbne	r4, [r0, #17]
 800641e:	6942      	ldr	r2, [r0, #20]
 8006420:	f101 0315 	add.w	r3, r1, #21
 8006424:	54d4      	strb	r4, [r2, r3]
 8006426:	f01c 0f04 	tst.w	ip, #4
 800642a:	bf0c      	ite	eq
 800642c:	7c04      	ldrbeq	r4, [r0, #16]
 800642e:	7c44      	ldrbne	r4, [r0, #17]
 8006430:	6942      	ldr	r2, [r0, #20]
 8006432:	f101 0316 	add.w	r3, r1, #22
 8006436:	54d4      	strb	r4, [r2, r3]
 8006438:	f01c 0f02 	tst.w	ip, #2
 800643c:	bf0c      	ite	eq
 800643e:	7c04      	ldrbeq	r4, [r0, #16]
 8006440:	7c44      	ldrbne	r4, [r0, #17]
 8006442:	6942      	ldr	r2, [r0, #20]
 8006444:	f101 0317 	add.w	r3, r1, #23
 8006448:	f01c 0f01 	tst.w	ip, #1
 800644c:	54d4      	strb	r4, [r2, r3]
 800644e:	f101 0118 	add.w	r1, r1, #24
 8006452:	f47f af27 	bne.w	80062a4 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 8006456:	7c02      	ldrb	r2, [r0, #16]
 8006458:	e725      	b.n	80062a6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800645a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800645e:	bf0c      	ite	eq
 8006460:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006464:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006468:	6945      	ldr	r5, [r0, #20]
 800646a:	1c4c      	adds	r4, r1, #1
 800646c:	f805 e004 	strb.w	lr, [r5, r4]
 8006470:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006474:	bf0c      	ite	eq
 8006476:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800647a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800647e:	6945      	ldr	r5, [r0, #20]
 8006480:	1c8c      	adds	r4, r1, #2
 8006482:	f805 e004 	strb.w	lr, [r5, r4]
 8006486:	f01c 0f20 	tst.w	ip, #32
 800648a:	bf0c      	ite	eq
 800648c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006490:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006494:	6945      	ldr	r5, [r0, #20]
 8006496:	1ccc      	adds	r4, r1, #3
 8006498:	f805 e004 	strb.w	lr, [r5, r4]
 800649c:	f01c 0f10 	tst.w	ip, #16
 80064a0:	bf0c      	ite	eq
 80064a2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80064a6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80064aa:	6945      	ldr	r5, [r0, #20]
 80064ac:	1d0c      	adds	r4, r1, #4
 80064ae:	f01c 0f08 	tst.w	ip, #8
 80064b2:	f805 e004 	strb.w	lr, [r5, r4]
 80064b6:	bf0c      	ite	eq
 80064b8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80064bc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80064c0:	6945      	ldr	r5, [r0, #20]
 80064c2:	1d4c      	adds	r4, r1, #5
 80064c4:	f01c 0f04 	tst.w	ip, #4
 80064c8:	f805 e004 	strb.w	lr, [r5, r4]
 80064cc:	bf0c      	ite	eq
 80064ce:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80064d2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80064d6:	6945      	ldr	r5, [r0, #20]
 80064d8:	1d8c      	adds	r4, r1, #6
 80064da:	f01c 0f02 	tst.w	ip, #2
 80064de:	f805 e004 	strb.w	lr, [r5, r4]
 80064e2:	bf0c      	ite	eq
 80064e4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80064e8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80064ec:	6945      	ldr	r5, [r0, #20]
 80064ee:	1dcc      	adds	r4, r1, #7
 80064f0:	f01c 0f01 	tst.w	ip, #1
 80064f4:	f805 e004 	strb.w	lr, [r5, r4]
 80064f8:	bf14      	ite	ne
 80064fa:	f890 c011 	ldrbne.w	ip, [r0, #17]
 80064fe:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8006502:	6945      	ldr	r5, [r0, #20]
 8006504:	f101 0408 	add.w	r4, r1, #8
 8006508:	f805 c004 	strb.w	ip, [r5, r4]
 800650c:	061d      	lsls	r5, r3, #24
 800650e:	bf54      	ite	pl
 8006510:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006514:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006518:	6945      	ldr	r5, [r0, #20]
 800651a:	f101 0409 	add.w	r4, r1, #9
 800651e:	f805 c004 	strb.w	ip, [r5, r4]
 8006522:	065d      	lsls	r5, r3, #25
 8006524:	bf54      	ite	pl
 8006526:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800652a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800652e:	6945      	ldr	r5, [r0, #20]
 8006530:	f101 040a 	add.w	r4, r1, #10
 8006534:	f805 c004 	strb.w	ip, [r5, r4]
 8006538:	069d      	lsls	r5, r3, #26
 800653a:	bf54      	ite	pl
 800653c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006540:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006544:	6945      	ldr	r5, [r0, #20]
 8006546:	f101 040b 	add.w	r4, r1, #11
 800654a:	f805 c004 	strb.w	ip, [r5, r4]
 800654e:	06dd      	lsls	r5, r3, #27
 8006550:	bf54      	ite	pl
 8006552:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006556:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800655a:	6945      	ldr	r5, [r0, #20]
 800655c:	f101 040c 	add.w	r4, r1, #12
 8006560:	f805 c004 	strb.w	ip, [r5, r4]
 8006564:	071d      	lsls	r5, r3, #28
 8006566:	bf54      	ite	pl
 8006568:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800656c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006570:	6945      	ldr	r5, [r0, #20]
 8006572:	f101 040d 	add.w	r4, r1, #13
 8006576:	f805 c004 	strb.w	ip, [r5, r4]
 800657a:	075d      	lsls	r5, r3, #29
 800657c:	bf54      	ite	pl
 800657e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006582:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006586:	6945      	ldr	r5, [r0, #20]
 8006588:	f101 040e 	add.w	r4, r1, #14
 800658c:	f805 c004 	strb.w	ip, [r5, r4]
 8006590:	079d      	lsls	r5, r3, #30
 8006592:	bf58      	it	pl
 8006594:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006598:	6945      	ldr	r5, [r0, #20]
 800659a:	bf48      	it	mi
 800659c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80065a0:	f101 040f 	add.w	r4, r1, #15
 80065a4:	f805 c004 	strb.w	ip, [r5, r4]
 80065a8:	07dd      	lsls	r5, r3, #31
 80065aa:	bf4c      	ite	mi
 80065ac:	7c45      	ldrbmi	r5, [r0, #17]
 80065ae:	7c05      	ldrbpl	r5, [r0, #16]
 80065b0:	6943      	ldr	r3, [r0, #20]
 80065b2:	f101 0410 	add.w	r4, r1, #16
 80065b6:	551d      	strb	r5, [r3, r4]
 80065b8:	0614      	lsls	r4, r2, #24
 80065ba:	bf54      	ite	pl
 80065bc:	7c05      	ldrbpl	r5, [r0, #16]
 80065be:	7c45      	ldrbmi	r5, [r0, #17]
 80065c0:	6944      	ldr	r4, [r0, #20]
 80065c2:	f101 0311 	add.w	r3, r1, #17
 80065c6:	54e5      	strb	r5, [r4, r3]
 80065c8:	0655      	lsls	r5, r2, #25
 80065ca:	bf54      	ite	pl
 80065cc:	7c05      	ldrbpl	r5, [r0, #16]
 80065ce:	7c45      	ldrbmi	r5, [r0, #17]
 80065d0:	6944      	ldr	r4, [r0, #20]
 80065d2:	f101 0312 	add.w	r3, r1, #18
 80065d6:	54e5      	strb	r5, [r4, r3]
 80065d8:	0694      	lsls	r4, r2, #26
 80065da:	bf54      	ite	pl
 80065dc:	7c05      	ldrbpl	r5, [r0, #16]
 80065de:	7c45      	ldrbmi	r5, [r0, #17]
 80065e0:	6944      	ldr	r4, [r0, #20]
 80065e2:	f101 0313 	add.w	r3, r1, #19
 80065e6:	54e5      	strb	r5, [r4, r3]
 80065e8:	06d5      	lsls	r5, r2, #27
 80065ea:	bf54      	ite	pl
 80065ec:	7c05      	ldrbpl	r5, [r0, #16]
 80065ee:	7c45      	ldrbmi	r5, [r0, #17]
 80065f0:	6944      	ldr	r4, [r0, #20]
 80065f2:	f101 0314 	add.w	r3, r1, #20
 80065f6:	54e5      	strb	r5, [r4, r3]
 80065f8:	0714      	lsls	r4, r2, #28
 80065fa:	bf54      	ite	pl
 80065fc:	7c05      	ldrbpl	r5, [r0, #16]
 80065fe:	7c45      	ldrbmi	r5, [r0, #17]
 8006600:	6944      	ldr	r4, [r0, #20]
 8006602:	f101 0315 	add.w	r3, r1, #21
 8006606:	54e5      	strb	r5, [r4, r3]
 8006608:	0755      	lsls	r5, r2, #29
 800660a:	bf54      	ite	pl
 800660c:	7c05      	ldrbpl	r5, [r0, #16]
 800660e:	7c45      	ldrbmi	r5, [r0, #17]
 8006610:	6944      	ldr	r4, [r0, #20]
 8006612:	f101 0316 	add.w	r3, r1, #22
 8006616:	54e5      	strb	r5, [r4, r3]
 8006618:	0794      	lsls	r4, r2, #30
 800661a:	bf54      	ite	pl
 800661c:	7c05      	ldrbpl	r5, [r0, #16]
 800661e:	7c45      	ldrbmi	r5, [r0, #17]
 8006620:	6944      	ldr	r4, [r0, #20]
 8006622:	f101 0317 	add.w	r3, r1, #23
 8006626:	54e5      	strb	r5, [r4, r3]
 8006628:	3118      	adds	r1, #24
 800662a:	f012 0f01 	tst.w	r2, #1
 800662e:	e637      	b.n	80062a0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 8006630:	0615      	lsls	r5, r2, #24
 8006632:	bf54      	ite	pl
 8006634:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006638:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800663c:	6945      	ldr	r5, [r0, #20]
 800663e:	1c4c      	adds	r4, r1, #1
 8006640:	f805 e004 	strb.w	lr, [r5, r4]
 8006644:	0655      	lsls	r5, r2, #25
 8006646:	bf54      	ite	pl
 8006648:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800664c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006650:	6945      	ldr	r5, [r0, #20]
 8006652:	1c8c      	adds	r4, r1, #2
 8006654:	f805 e004 	strb.w	lr, [r5, r4]
 8006658:	0695      	lsls	r5, r2, #26
 800665a:	bf54      	ite	pl
 800665c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006660:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006664:	6945      	ldr	r5, [r0, #20]
 8006666:	1ccc      	adds	r4, r1, #3
 8006668:	f805 e004 	strb.w	lr, [r5, r4]
 800666c:	06d5      	lsls	r5, r2, #27
 800666e:	bf54      	ite	pl
 8006670:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006674:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006678:	6945      	ldr	r5, [r0, #20]
 800667a:	1d0c      	adds	r4, r1, #4
 800667c:	f805 e004 	strb.w	lr, [r5, r4]
 8006680:	0715      	lsls	r5, r2, #28
 8006682:	bf54      	ite	pl
 8006684:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006688:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800668c:	6945      	ldr	r5, [r0, #20]
 800668e:	1d4c      	adds	r4, r1, #5
 8006690:	f805 e004 	strb.w	lr, [r5, r4]
 8006694:	0755      	lsls	r5, r2, #29
 8006696:	bf54      	ite	pl
 8006698:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800669c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80066a0:	6945      	ldr	r5, [r0, #20]
 80066a2:	1d8c      	adds	r4, r1, #6
 80066a4:	f805 e004 	strb.w	lr, [r5, r4]
 80066a8:	0795      	lsls	r5, r2, #30
 80066aa:	bf58      	it	pl
 80066ac:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80066b0:	6945      	ldr	r5, [r0, #20]
 80066b2:	bf48      	it	mi
 80066b4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80066b8:	1dcc      	adds	r4, r1, #7
 80066ba:	f805 e004 	strb.w	lr, [r5, r4]
 80066be:	07d2      	lsls	r2, r2, #31
 80066c0:	bf4c      	ite	mi
 80066c2:	7c45      	ldrbmi	r5, [r0, #17]
 80066c4:	7c05      	ldrbpl	r5, [r0, #16]
 80066c6:	6942      	ldr	r2, [r0, #20]
 80066c8:	f101 0408 	add.w	r4, r1, #8
 80066cc:	5515      	strb	r5, [r2, r4]
 80066ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80066d2:	bf0c      	ite	eq
 80066d4:	7c05      	ldrbeq	r5, [r0, #16]
 80066d6:	7c45      	ldrbne	r5, [r0, #17]
 80066d8:	6944      	ldr	r4, [r0, #20]
 80066da:	f101 0209 	add.w	r2, r1, #9
 80066de:	54a5      	strb	r5, [r4, r2]
 80066e0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80066e4:	bf0c      	ite	eq
 80066e6:	7c05      	ldrbeq	r5, [r0, #16]
 80066e8:	7c45      	ldrbne	r5, [r0, #17]
 80066ea:	6944      	ldr	r4, [r0, #20]
 80066ec:	f101 020a 	add.w	r2, r1, #10
 80066f0:	54a5      	strb	r5, [r4, r2]
 80066f2:	f01c 0f20 	tst.w	ip, #32
 80066f6:	bf0c      	ite	eq
 80066f8:	7c05      	ldrbeq	r5, [r0, #16]
 80066fa:	7c45      	ldrbne	r5, [r0, #17]
 80066fc:	6944      	ldr	r4, [r0, #20]
 80066fe:	f101 020b 	add.w	r2, r1, #11
 8006702:	54a5      	strb	r5, [r4, r2]
 8006704:	f01c 0f10 	tst.w	ip, #16
 8006708:	bf0c      	ite	eq
 800670a:	7c05      	ldrbeq	r5, [r0, #16]
 800670c:	7c45      	ldrbne	r5, [r0, #17]
 800670e:	6944      	ldr	r4, [r0, #20]
 8006710:	f101 020c 	add.w	r2, r1, #12
 8006714:	54a5      	strb	r5, [r4, r2]
 8006716:	f01c 0f08 	tst.w	ip, #8
 800671a:	bf0c      	ite	eq
 800671c:	7c05      	ldrbeq	r5, [r0, #16]
 800671e:	7c45      	ldrbne	r5, [r0, #17]
 8006720:	6944      	ldr	r4, [r0, #20]
 8006722:	f101 020d 	add.w	r2, r1, #13
 8006726:	54a5      	strb	r5, [r4, r2]
 8006728:	f01c 0f04 	tst.w	ip, #4
 800672c:	bf0c      	ite	eq
 800672e:	7c05      	ldrbeq	r5, [r0, #16]
 8006730:	7c45      	ldrbne	r5, [r0, #17]
 8006732:	6944      	ldr	r4, [r0, #20]
 8006734:	f101 020e 	add.w	r2, r1, #14
 8006738:	54a5      	strb	r5, [r4, r2]
 800673a:	f01c 0f02 	tst.w	ip, #2
 800673e:	bf0c      	ite	eq
 8006740:	7c05      	ldrbeq	r5, [r0, #16]
 8006742:	7c45      	ldrbne	r5, [r0, #17]
 8006744:	6944      	ldr	r4, [r0, #20]
 8006746:	f101 020f 	add.w	r2, r1, #15
 800674a:	54a5      	strb	r5, [r4, r2]
 800674c:	f01c 0f01 	tst.w	ip, #1
 8006750:	bf14      	ite	ne
 8006752:	7c45      	ldrbne	r5, [r0, #17]
 8006754:	7c05      	ldrbeq	r5, [r0, #16]
 8006756:	6944      	ldr	r4, [r0, #20]
 8006758:	f101 0210 	add.w	r2, r1, #16
 800675c:	e564      	b.n	8006228 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800675e:	061d      	lsls	r5, r3, #24
 8006760:	bf54      	ite	pl
 8006762:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006766:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800676a:	6945      	ldr	r5, [r0, #20]
 800676c:	1c4c      	adds	r4, r1, #1
 800676e:	f805 e004 	strb.w	lr, [r5, r4]
 8006772:	065d      	lsls	r5, r3, #25
 8006774:	bf54      	ite	pl
 8006776:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800677a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800677e:	6945      	ldr	r5, [r0, #20]
 8006780:	1c8c      	adds	r4, r1, #2
 8006782:	f805 e004 	strb.w	lr, [r5, r4]
 8006786:	069d      	lsls	r5, r3, #26
 8006788:	bf54      	ite	pl
 800678a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800678e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006792:	6945      	ldr	r5, [r0, #20]
 8006794:	1ccc      	adds	r4, r1, #3
 8006796:	f805 e004 	strb.w	lr, [r5, r4]
 800679a:	06dd      	lsls	r5, r3, #27
 800679c:	bf54      	ite	pl
 800679e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80067a2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80067a6:	6945      	ldr	r5, [r0, #20]
 80067a8:	1d0c      	adds	r4, r1, #4
 80067aa:	f805 e004 	strb.w	lr, [r5, r4]
 80067ae:	071d      	lsls	r5, r3, #28
 80067b0:	bf54      	ite	pl
 80067b2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80067b6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80067ba:	6945      	ldr	r5, [r0, #20]
 80067bc:	1d4c      	adds	r4, r1, #5
 80067be:	f805 e004 	strb.w	lr, [r5, r4]
 80067c2:	075d      	lsls	r5, r3, #29
 80067c4:	bf54      	ite	pl
 80067c6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80067ca:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80067ce:	6945      	ldr	r5, [r0, #20]
 80067d0:	1d8c      	adds	r4, r1, #6
 80067d2:	f805 e004 	strb.w	lr, [r5, r4]
 80067d6:	079d      	lsls	r5, r3, #30
 80067d8:	bf58      	it	pl
 80067da:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80067de:	6945      	ldr	r5, [r0, #20]
 80067e0:	bf48      	it	mi
 80067e2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80067e6:	1dcc      	adds	r4, r1, #7
 80067e8:	f805 e004 	strb.w	lr, [r5, r4]
 80067ec:	07dd      	lsls	r5, r3, #31
 80067ee:	bf4c      	ite	mi
 80067f0:	7c45      	ldrbmi	r5, [r0, #17]
 80067f2:	7c05      	ldrbpl	r5, [r0, #16]
 80067f4:	6943      	ldr	r3, [r0, #20]
 80067f6:	f101 0408 	add.w	r4, r1, #8
 80067fa:	551d      	strb	r5, [r3, r4]
 80067fc:	0614      	lsls	r4, r2, #24
 80067fe:	bf54      	ite	pl
 8006800:	7c05      	ldrbpl	r5, [r0, #16]
 8006802:	7c45      	ldrbmi	r5, [r0, #17]
 8006804:	6944      	ldr	r4, [r0, #20]
 8006806:	f101 0309 	add.w	r3, r1, #9
 800680a:	54e5      	strb	r5, [r4, r3]
 800680c:	0655      	lsls	r5, r2, #25
 800680e:	bf54      	ite	pl
 8006810:	7c05      	ldrbpl	r5, [r0, #16]
 8006812:	7c45      	ldrbmi	r5, [r0, #17]
 8006814:	6944      	ldr	r4, [r0, #20]
 8006816:	f101 030a 	add.w	r3, r1, #10
 800681a:	54e5      	strb	r5, [r4, r3]
 800681c:	0694      	lsls	r4, r2, #26
 800681e:	bf54      	ite	pl
 8006820:	7c05      	ldrbpl	r5, [r0, #16]
 8006822:	7c45      	ldrbmi	r5, [r0, #17]
 8006824:	6944      	ldr	r4, [r0, #20]
 8006826:	f101 030b 	add.w	r3, r1, #11
 800682a:	54e5      	strb	r5, [r4, r3]
 800682c:	06d5      	lsls	r5, r2, #27
 800682e:	bf54      	ite	pl
 8006830:	7c05      	ldrbpl	r5, [r0, #16]
 8006832:	7c45      	ldrbmi	r5, [r0, #17]
 8006834:	6944      	ldr	r4, [r0, #20]
 8006836:	f101 030c 	add.w	r3, r1, #12
 800683a:	54e5      	strb	r5, [r4, r3]
 800683c:	0714      	lsls	r4, r2, #28
 800683e:	bf54      	ite	pl
 8006840:	7c05      	ldrbpl	r5, [r0, #16]
 8006842:	7c45      	ldrbmi	r5, [r0, #17]
 8006844:	6944      	ldr	r4, [r0, #20]
 8006846:	f101 030d 	add.w	r3, r1, #13
 800684a:	54e5      	strb	r5, [r4, r3]
 800684c:	0755      	lsls	r5, r2, #29
 800684e:	bf54      	ite	pl
 8006850:	7c05      	ldrbpl	r5, [r0, #16]
 8006852:	7c45      	ldrbmi	r5, [r0, #17]
 8006854:	6944      	ldr	r4, [r0, #20]
 8006856:	f101 030e 	add.w	r3, r1, #14
 800685a:	54e5      	strb	r5, [r4, r3]
 800685c:	0794      	lsls	r4, r2, #30
 800685e:	bf58      	it	pl
 8006860:	7c05      	ldrbpl	r5, [r0, #16]
 8006862:	6944      	ldr	r4, [r0, #20]
 8006864:	bf48      	it	mi
 8006866:	7c45      	ldrbmi	r5, [r0, #17]
 8006868:	f101 030f 	add.w	r3, r1, #15
 800686c:	54e5      	strb	r5, [r4, r3]
 800686e:	07d2      	lsls	r2, r2, #31
 8006870:	bf4c      	ite	mi
 8006872:	7c44      	ldrbmi	r4, [r0, #17]
 8006874:	7c04      	ldrbpl	r4, [r0, #16]
 8006876:	6942      	ldr	r2, [r0, #20]
 8006878:	f101 0310 	add.w	r3, r1, #16
 800687c:	e5a5      	b.n	80063ca <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800687e:	061d      	lsls	r5, r3, #24
 8006880:	bf54      	ite	pl
 8006882:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006886:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800688a:	6945      	ldr	r5, [r0, #20]
 800688c:	1c4c      	adds	r4, r1, #1
 800688e:	f805 e004 	strb.w	lr, [r5, r4]
 8006892:	065d      	lsls	r5, r3, #25
 8006894:	bf54      	ite	pl
 8006896:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800689a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800689e:	6945      	ldr	r5, [r0, #20]
 80068a0:	1c8c      	adds	r4, r1, #2
 80068a2:	f805 e004 	strb.w	lr, [r5, r4]
 80068a6:	069d      	lsls	r5, r3, #26
 80068a8:	bf54      	ite	pl
 80068aa:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80068ae:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80068b2:	6945      	ldr	r5, [r0, #20]
 80068b4:	1ccc      	adds	r4, r1, #3
 80068b6:	f805 e004 	strb.w	lr, [r5, r4]
 80068ba:	06dd      	lsls	r5, r3, #27
 80068bc:	bf54      	ite	pl
 80068be:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80068c2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80068c6:	6945      	ldr	r5, [r0, #20]
 80068c8:	1d0c      	adds	r4, r1, #4
 80068ca:	f805 e004 	strb.w	lr, [r5, r4]
 80068ce:	071d      	lsls	r5, r3, #28
 80068d0:	bf54      	ite	pl
 80068d2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80068d6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80068da:	6945      	ldr	r5, [r0, #20]
 80068dc:	1d4c      	adds	r4, r1, #5
 80068de:	f805 e004 	strb.w	lr, [r5, r4]
 80068e2:	075d      	lsls	r5, r3, #29
 80068e4:	bf54      	ite	pl
 80068e6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80068ea:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80068ee:	6945      	ldr	r5, [r0, #20]
 80068f0:	1d8c      	adds	r4, r1, #6
 80068f2:	f805 e004 	strb.w	lr, [r5, r4]
 80068f6:	079d      	lsls	r5, r3, #30
 80068f8:	bf58      	it	pl
 80068fa:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80068fe:	6945      	ldr	r5, [r0, #20]
 8006900:	bf48      	it	mi
 8006902:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006906:	1dcc      	adds	r4, r1, #7
 8006908:	f805 e004 	strb.w	lr, [r5, r4]
 800690c:	07db      	lsls	r3, r3, #31
 800690e:	bf4c      	ite	mi
 8006910:	7c45      	ldrbmi	r5, [r0, #17]
 8006912:	7c05      	ldrbpl	r5, [r0, #16]
 8006914:	6943      	ldr	r3, [r0, #20]
 8006916:	f101 0408 	add.w	r4, r1, #8
 800691a:	551d      	strb	r5, [r3, r4]
 800691c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006920:	bf0c      	ite	eq
 8006922:	7c05      	ldrbeq	r5, [r0, #16]
 8006924:	7c45      	ldrbne	r5, [r0, #17]
 8006926:	6944      	ldr	r4, [r0, #20]
 8006928:	f101 0309 	add.w	r3, r1, #9
 800692c:	54e5      	strb	r5, [r4, r3]
 800692e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006932:	bf0c      	ite	eq
 8006934:	7c05      	ldrbeq	r5, [r0, #16]
 8006936:	7c45      	ldrbne	r5, [r0, #17]
 8006938:	6944      	ldr	r4, [r0, #20]
 800693a:	f101 030a 	add.w	r3, r1, #10
 800693e:	54e5      	strb	r5, [r4, r3]
 8006940:	f01c 0f20 	tst.w	ip, #32
 8006944:	bf0c      	ite	eq
 8006946:	7c05      	ldrbeq	r5, [r0, #16]
 8006948:	7c45      	ldrbne	r5, [r0, #17]
 800694a:	6944      	ldr	r4, [r0, #20]
 800694c:	f101 030b 	add.w	r3, r1, #11
 8006950:	54e5      	strb	r5, [r4, r3]
 8006952:	f01c 0f10 	tst.w	ip, #16
 8006956:	bf0c      	ite	eq
 8006958:	7c05      	ldrbeq	r5, [r0, #16]
 800695a:	7c45      	ldrbne	r5, [r0, #17]
 800695c:	6944      	ldr	r4, [r0, #20]
 800695e:	f101 030c 	add.w	r3, r1, #12
 8006962:	54e5      	strb	r5, [r4, r3]
 8006964:	f01c 0f08 	tst.w	ip, #8
 8006968:	bf0c      	ite	eq
 800696a:	7c05      	ldrbeq	r5, [r0, #16]
 800696c:	7c45      	ldrbne	r5, [r0, #17]
 800696e:	6944      	ldr	r4, [r0, #20]
 8006970:	f101 030d 	add.w	r3, r1, #13
 8006974:	54e5      	strb	r5, [r4, r3]
 8006976:	f01c 0f04 	tst.w	ip, #4
 800697a:	bf0c      	ite	eq
 800697c:	7c05      	ldrbeq	r5, [r0, #16]
 800697e:	7c45      	ldrbne	r5, [r0, #17]
 8006980:	6944      	ldr	r4, [r0, #20]
 8006982:	f101 030e 	add.w	r3, r1, #14
 8006986:	54e5      	strb	r5, [r4, r3]
 8006988:	f01c 0f02 	tst.w	ip, #2
 800698c:	bf0c      	ite	eq
 800698e:	7c05      	ldrbeq	r5, [r0, #16]
 8006990:	7c45      	ldrbne	r5, [r0, #17]
 8006992:	6944      	ldr	r4, [r0, #20]
 8006994:	f101 030f 	add.w	r3, r1, #15
 8006998:	54e5      	strb	r5, [r4, r3]
 800699a:	f01c 0f01 	tst.w	ip, #1
 800699e:	bf14      	ite	ne
 80069a0:	7c45      	ldrbne	r5, [r0, #17]
 80069a2:	7c05      	ldrbeq	r5, [r0, #16]
 80069a4:	6944      	ldr	r4, [r0, #20]
 80069a6:	f101 0310 	add.w	r3, r1, #16
 80069aa:	e604      	b.n	80065b6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

080069ac <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	6804      	ldr	r4, [r0, #0]
 80069b0:	f89d c010 	ldrb.w	ip, [sp, #16]
 80069b4:	2c07      	cmp	r4, #7
 80069b6:	f89d e014 	ldrb.w	lr, [sp, #20]
 80069ba:	d000      	beq.n	80069be <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	061e      	lsls	r6, r3, #24
 80069c0:	ea4f 1141 	mov.w	r1, r1, lsl #5
 80069c4:	bf54      	ite	pl
 80069c6:	7c06      	ldrbpl	r6, [r0, #16]
 80069c8:	7c46      	ldrbmi	r6, [r0, #17]
 80069ca:	6945      	ldr	r5, [r0, #20]
 80069cc:	1c4c      	adds	r4, r1, #1
 80069ce:	552e      	strb	r6, [r5, r4]
 80069d0:	065d      	lsls	r5, r3, #25
 80069d2:	bf54      	ite	pl
 80069d4:	7c06      	ldrbpl	r6, [r0, #16]
 80069d6:	7c46      	ldrbmi	r6, [r0, #17]
 80069d8:	6945      	ldr	r5, [r0, #20]
 80069da:	1c8c      	adds	r4, r1, #2
 80069dc:	552e      	strb	r6, [r5, r4]
 80069de:	069e      	lsls	r6, r3, #26
 80069e0:	bf54      	ite	pl
 80069e2:	7c06      	ldrbpl	r6, [r0, #16]
 80069e4:	7c46      	ldrbmi	r6, [r0, #17]
 80069e6:	6945      	ldr	r5, [r0, #20]
 80069e8:	1ccc      	adds	r4, r1, #3
 80069ea:	552e      	strb	r6, [r5, r4]
 80069ec:	06dd      	lsls	r5, r3, #27
 80069ee:	bf54      	ite	pl
 80069f0:	7c06      	ldrbpl	r6, [r0, #16]
 80069f2:	7c46      	ldrbmi	r6, [r0, #17]
 80069f4:	6945      	ldr	r5, [r0, #20]
 80069f6:	1d0c      	adds	r4, r1, #4
 80069f8:	552e      	strb	r6, [r5, r4]
 80069fa:	071e      	lsls	r6, r3, #28
 80069fc:	bf54      	ite	pl
 80069fe:	7c06      	ldrbpl	r6, [r0, #16]
 8006a00:	7c46      	ldrbmi	r6, [r0, #17]
 8006a02:	6945      	ldr	r5, [r0, #20]
 8006a04:	1d4c      	adds	r4, r1, #5
 8006a06:	552e      	strb	r6, [r5, r4]
 8006a08:	075d      	lsls	r5, r3, #29
 8006a0a:	bf54      	ite	pl
 8006a0c:	7c06      	ldrbpl	r6, [r0, #16]
 8006a0e:	7c46      	ldrbmi	r6, [r0, #17]
 8006a10:	6945      	ldr	r5, [r0, #20]
 8006a12:	1d8c      	adds	r4, r1, #6
 8006a14:	552e      	strb	r6, [r5, r4]
 8006a16:	079e      	lsls	r6, r3, #30
 8006a18:	6945      	ldr	r5, [r0, #20]
 8006a1a:	bf54      	ite	pl
 8006a1c:	7c06      	ldrbpl	r6, [r0, #16]
 8006a1e:	7c46      	ldrbmi	r6, [r0, #17]
 8006a20:	1dcc      	adds	r4, r1, #7
 8006a22:	552e      	strb	r6, [r5, r4]
 8006a24:	07dd      	lsls	r5, r3, #31
 8006a26:	bf4c      	ite	mi
 8006a28:	7c45      	ldrbmi	r5, [r0, #17]
 8006a2a:	7c05      	ldrbpl	r5, [r0, #16]
 8006a2c:	6943      	ldr	r3, [r0, #20]
 8006a2e:	f101 0408 	add.w	r4, r1, #8
 8006a32:	551d      	strb	r5, [r3, r4]
 8006a34:	0614      	lsls	r4, r2, #24
 8006a36:	bf54      	ite	pl
 8006a38:	7c05      	ldrbpl	r5, [r0, #16]
 8006a3a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a3c:	6944      	ldr	r4, [r0, #20]
 8006a3e:	f101 0309 	add.w	r3, r1, #9
 8006a42:	54e5      	strb	r5, [r4, r3]
 8006a44:	0656      	lsls	r6, r2, #25
 8006a46:	bf54      	ite	pl
 8006a48:	7c05      	ldrbpl	r5, [r0, #16]
 8006a4a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a4c:	6944      	ldr	r4, [r0, #20]
 8006a4e:	f101 030a 	add.w	r3, r1, #10
 8006a52:	54e5      	strb	r5, [r4, r3]
 8006a54:	0695      	lsls	r5, r2, #26
 8006a56:	bf54      	ite	pl
 8006a58:	7c05      	ldrbpl	r5, [r0, #16]
 8006a5a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a5c:	6944      	ldr	r4, [r0, #20]
 8006a5e:	f101 030b 	add.w	r3, r1, #11
 8006a62:	54e5      	strb	r5, [r4, r3]
 8006a64:	06d4      	lsls	r4, r2, #27
 8006a66:	bf54      	ite	pl
 8006a68:	7c05      	ldrbpl	r5, [r0, #16]
 8006a6a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a6c:	6944      	ldr	r4, [r0, #20]
 8006a6e:	f101 030c 	add.w	r3, r1, #12
 8006a72:	54e5      	strb	r5, [r4, r3]
 8006a74:	0716      	lsls	r6, r2, #28
 8006a76:	bf54      	ite	pl
 8006a78:	7c05      	ldrbpl	r5, [r0, #16]
 8006a7a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a7c:	6944      	ldr	r4, [r0, #20]
 8006a7e:	f101 030d 	add.w	r3, r1, #13
 8006a82:	54e5      	strb	r5, [r4, r3]
 8006a84:	0755      	lsls	r5, r2, #29
 8006a86:	bf54      	ite	pl
 8006a88:	7c05      	ldrbpl	r5, [r0, #16]
 8006a8a:	7c45      	ldrbmi	r5, [r0, #17]
 8006a8c:	6944      	ldr	r4, [r0, #20]
 8006a8e:	f101 030e 	add.w	r3, r1, #14
 8006a92:	54e5      	strb	r5, [r4, r3]
 8006a94:	0794      	lsls	r4, r2, #30
 8006a96:	bf58      	it	pl
 8006a98:	7c05      	ldrbpl	r5, [r0, #16]
 8006a9a:	6944      	ldr	r4, [r0, #20]
 8006a9c:	bf48      	it	mi
 8006a9e:	7c45      	ldrbmi	r5, [r0, #17]
 8006aa0:	f101 030f 	add.w	r3, r1, #15
 8006aa4:	54e5      	strb	r5, [r4, r3]
 8006aa6:	07d2      	lsls	r2, r2, #31
 8006aa8:	bf4c      	ite	mi
 8006aaa:	7c44      	ldrbmi	r4, [r0, #17]
 8006aac:	7c04      	ldrbpl	r4, [r0, #16]
 8006aae:	6942      	ldr	r2, [r0, #20]
 8006ab0:	f101 0310 	add.w	r3, r1, #16
 8006ab4:	54d4      	strb	r4, [r2, r3]
 8006ab6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006aba:	bf0c      	ite	eq
 8006abc:	7c04      	ldrbeq	r4, [r0, #16]
 8006abe:	7c44      	ldrbne	r4, [r0, #17]
 8006ac0:	6942      	ldr	r2, [r0, #20]
 8006ac2:	f101 0311 	add.w	r3, r1, #17
 8006ac6:	54d4      	strb	r4, [r2, r3]
 8006ac8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006acc:	bf14      	ite	ne
 8006ace:	7c44      	ldrbne	r4, [r0, #17]
 8006ad0:	7c04      	ldrbeq	r4, [r0, #16]
 8006ad2:	6942      	ldr	r2, [r0, #20]
 8006ad4:	f101 0312 	add.w	r3, r1, #18
 8006ad8:	54d4      	strb	r4, [r2, r3]
 8006ada:	f01c 0f20 	tst.w	ip, #32
 8006ade:	bf14      	ite	ne
 8006ae0:	7c44      	ldrbne	r4, [r0, #17]
 8006ae2:	7c04      	ldrbeq	r4, [r0, #16]
 8006ae4:	6942      	ldr	r2, [r0, #20]
 8006ae6:	f101 0313 	add.w	r3, r1, #19
 8006aea:	54d4      	strb	r4, [r2, r3]
 8006aec:	f01c 0f10 	tst.w	ip, #16
 8006af0:	bf14      	ite	ne
 8006af2:	7c44      	ldrbne	r4, [r0, #17]
 8006af4:	7c04      	ldrbeq	r4, [r0, #16]
 8006af6:	6942      	ldr	r2, [r0, #20]
 8006af8:	f101 0314 	add.w	r3, r1, #20
 8006afc:	54d4      	strb	r4, [r2, r3]
 8006afe:	f01c 0f08 	tst.w	ip, #8
 8006b02:	bf14      	ite	ne
 8006b04:	7c44      	ldrbne	r4, [r0, #17]
 8006b06:	7c04      	ldrbeq	r4, [r0, #16]
 8006b08:	6942      	ldr	r2, [r0, #20]
 8006b0a:	f101 0315 	add.w	r3, r1, #21
 8006b0e:	54d4      	strb	r4, [r2, r3]
 8006b10:	f01c 0f04 	tst.w	ip, #4
 8006b14:	bf14      	ite	ne
 8006b16:	7c44      	ldrbne	r4, [r0, #17]
 8006b18:	7c04      	ldrbeq	r4, [r0, #16]
 8006b1a:	6942      	ldr	r2, [r0, #20]
 8006b1c:	f101 0316 	add.w	r3, r1, #22
 8006b20:	54d4      	strb	r4, [r2, r3]
 8006b22:	f01c 0f02 	tst.w	ip, #2
 8006b26:	bf14      	ite	ne
 8006b28:	7c44      	ldrbne	r4, [r0, #17]
 8006b2a:	7c04      	ldrbeq	r4, [r0, #16]
 8006b2c:	6942      	ldr	r2, [r0, #20]
 8006b2e:	f101 0317 	add.w	r3, r1, #23
 8006b32:	54d4      	strb	r4, [r2, r3]
 8006b34:	f01c 0f01 	tst.w	ip, #1
 8006b38:	bf14      	ite	ne
 8006b3a:	7c44      	ldrbne	r4, [r0, #17]
 8006b3c:	7c04      	ldrbeq	r4, [r0, #16]
 8006b3e:	6942      	ldr	r2, [r0, #20]
 8006b40:	f101 0318 	add.w	r3, r1, #24
 8006b44:	54d4      	strb	r4, [r2, r3]
 8006b46:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006b4a:	bf0c      	ite	eq
 8006b4c:	7c04      	ldrbeq	r4, [r0, #16]
 8006b4e:	7c44      	ldrbne	r4, [r0, #17]
 8006b50:	6942      	ldr	r2, [r0, #20]
 8006b52:	f101 0319 	add.w	r3, r1, #25
 8006b56:	54d4      	strb	r4, [r2, r3]
 8006b58:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006b5c:	bf0c      	ite	eq
 8006b5e:	7c04      	ldrbeq	r4, [r0, #16]
 8006b60:	7c44      	ldrbne	r4, [r0, #17]
 8006b62:	6942      	ldr	r2, [r0, #20]
 8006b64:	f101 031a 	add.w	r3, r1, #26
 8006b68:	54d4      	strb	r4, [r2, r3]
 8006b6a:	f01e 0f20 	tst.w	lr, #32
 8006b6e:	bf0c      	ite	eq
 8006b70:	7c04      	ldrbeq	r4, [r0, #16]
 8006b72:	7c44      	ldrbne	r4, [r0, #17]
 8006b74:	6942      	ldr	r2, [r0, #20]
 8006b76:	f101 031b 	add.w	r3, r1, #27
 8006b7a:	54d4      	strb	r4, [r2, r3]
 8006b7c:	f01e 0f10 	tst.w	lr, #16
 8006b80:	bf0c      	ite	eq
 8006b82:	7c04      	ldrbeq	r4, [r0, #16]
 8006b84:	7c44      	ldrbne	r4, [r0, #17]
 8006b86:	6942      	ldr	r2, [r0, #20]
 8006b88:	f101 031c 	add.w	r3, r1, #28
 8006b8c:	54d4      	strb	r4, [r2, r3]
 8006b8e:	f01e 0f08 	tst.w	lr, #8
 8006b92:	bf0c      	ite	eq
 8006b94:	7c04      	ldrbeq	r4, [r0, #16]
 8006b96:	7c44      	ldrbne	r4, [r0, #17]
 8006b98:	6942      	ldr	r2, [r0, #20]
 8006b9a:	f101 031d 	add.w	r3, r1, #29
 8006b9e:	54d4      	strb	r4, [r2, r3]
 8006ba0:	f01e 0f04 	tst.w	lr, #4
 8006ba4:	bf0c      	ite	eq
 8006ba6:	7c04      	ldrbeq	r4, [r0, #16]
 8006ba8:	7c44      	ldrbne	r4, [r0, #17]
 8006baa:	6942      	ldr	r2, [r0, #20]
 8006bac:	f101 031e 	add.w	r3, r1, #30
 8006bb0:	54d4      	strb	r4, [r2, r3]
 8006bb2:	f01e 0f02 	tst.w	lr, #2
 8006bb6:	6942      	ldr	r2, [r0, #20]
 8006bb8:	bf0c      	ite	eq
 8006bba:	7c04      	ldrbeq	r4, [r0, #16]
 8006bbc:	7c44      	ldrbne	r4, [r0, #17]
 8006bbe:	f101 031f 	add.w	r3, r1, #31
 8006bc2:	54d4      	strb	r4, [r2, r3]
 8006bc4:	f01e 0f01 	tst.w	lr, #1
 8006bc8:	bf14      	ite	ne
 8006bca:	7c42      	ldrbne	r2, [r0, #17]
 8006bcc:	7c02      	ldrbeq	r2, [r0, #16]
 8006bce:	6943      	ldr	r3, [r0, #20]
 8006bd0:	3120      	adds	r1, #32
 8006bd2:	545a      	strb	r2, [r3, r1]
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
 8006bd6:	bf00      	nop

08006bd8 <WS28xx::~WS28xx()>:
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <WS28xx::~WS28xx()+0x8>)
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4770      	bx	lr
 8006be0:	20000694 	mulcs	r0, r4, r6

08006be4 <WS28xx::SetupBuffers()>:
 8006be4:	b513      	push	{r0, r1, r4, lr}
 8006be6:	4604      	mov	r4, r0
 8006be8:	a801      	add	r0, sp, #4
 8006bea:	f002 fe55 	bl	8009898 <gd32_spi_dma_tx_prepare(unsigned int*)>
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <WS28xx::SetupBuffers()+0x2c>)
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f023 0303 	bic.w	r3, r3, #3
 8006bf8:	6160      	str	r0, [r4, #20]
 8006bfa:	4418      	add	r0, r3
 8006bfc:	68e3      	ldr	r3, [r4, #12]
 8006bfe:	61a0      	str	r0, [r4, #24]
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	3303      	adds	r3, #3
 8006c04:	f023 0303 	bic.w	r3, r3, #3
 8006c08:	60e3      	str	r3, [r4, #12]
 8006c0a:	b002      	add	sp, #8
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000690 	mulcs	r0, r0, r6

08006c14 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c16:	23aa      	movs	r3, #170	; 0xaa
 8006c18:	2203      	movs	r2, #3
 8006c1a:	e9c0 2300 	strd	r2, r3, [r0]
 8006c1e:	2306      	movs	r3, #6
 8006c20:	6083      	str	r3, [r0, #8]
 8006c22:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8006c26:	8243      	strh	r3, [r0, #18]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8006c32:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 8006c34:	a901      	add	r1, sp, #4
 8006c36:	6018      	str	r0, [r3, #0]
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f7fe fe6b 	bl	8005914 <PixelConfiguration::Validate(unsigned int&)>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7fe fed4 	bl	80059ec <PixelConfiguration::Dump()>
 8006c44:	68ab      	ldr	r3, [r5, #8]
 8006c46:	686a      	ldr	r2, [r5, #4]
 8006c48:	60a3      	str	r3, [r4, #8]
 8006c4a:	8a2b      	ldrh	r3, [r5, #16]
 8006c4c:	6829      	ldr	r1, [r5, #0]
 8006c4e:	8223      	strh	r3, [r4, #16]
 8006c50:	7cab      	ldrb	r3, [r5, #18]
 8006c52:	7ce8      	ldrb	r0, [r5, #19]
 8006c54:	74e3      	strb	r3, [r4, #19]
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	6021      	str	r1, [r4, #0]
 8006c5a:	4353      	muls	r3, r2
 8006c5c:	6062      	str	r2, [r4, #4]
 8006c5e:	74a0      	strb	r0, [r4, #18]
 8006c60:	b998      	cbnz	r0, 8006c8a <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 8006c62:	390b      	subs	r1, #11
 8006c64:	2902      	cmp	r1, #2
 8006c66:	60e3      	str	r3, [r4, #12]
 8006c68:	bf9e      	ittt	ls
 8006c6a:	68e3      	ldrls	r3, [r4, #12]
 8006c6c:	3208      	addls	r2, #8
 8006c6e:	18d2      	addls	r2, r2, r3
 8006c70:	4620      	mov	r0, r4
 8006c72:	bf98      	it	ls
 8006c74:	60e2      	strls	r2, [r4, #12]
 8006c76:	f7ff ffb5 	bl	8006be4 <WS28xx::SetupBuffers()>
 8006c7a:	f002 fd83 	bl	8009784 <gd32_spi_dma_begin()>
 8006c7e:	68e8      	ldr	r0, [r5, #12]
 8006c80:	f002 fdf6 	bl	8009870 <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006c84:	4620      	mov	r0, r4
 8006c86:	b003      	add	sp, #12
 8006c88:	bd30      	pop	{r4, r5, pc}
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	e7e8      	b.n	8006c62 <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 8006c90:	20000694 	mulcs	r0, r4, r6

08006c94 <WS28xx::Update()>:
 8006c94:	2200      	movs	r2, #0
 8006c96:	b430      	push	{r4, r5}
 8006c98:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <WS28xx::Update()+0x34>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68c1      	ldr	r1, [r0, #12]
 8006c9e:	6944      	ldr	r4, [r0, #20]
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d902      	bls.n	8006caa <WS28xx::Update()+0x16>
 8006ca4:	54e2      	strb	r2, [r4, r3]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	e7f8      	b.n	8006c9c <WS28xx::Update()+0x8>
 8006caa:	2300      	movs	r3, #0
 8006cac:	6980      	ldr	r0, [r0, #24]
 8006cae:	084d      	lsrs	r5, r1, #1
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	d006      	beq.n	8006cc2 <WS28xx::Update()+0x2e>
 8006cb4:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8006cb8:	ba52      	rev16	r2, r2
 8006cba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	e7f6      	b.n	8006cb0 <WS28xx::Update()+0x1c>
 8006cc2:	bc30      	pop	{r4, r5}
 8006cc4:	f002 bdf0 	b.w	80098a8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8006cc8:	20000690 	mulcs	r0, r0, r6

08006ccc <WS28xx::Blackout()>:
 8006ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cce:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	6143      	str	r3, [r0, #20]
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f002 fdff 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d1f9      	bne.n	8006cd6 <WS28xx::Blackout()+0xa>
 8006ce2:	6822      	ldr	r2, [r4, #0]
 8006ce4:	6963      	ldr	r3, [r4, #20]
 8006ce6:	3a0b      	subs	r2, #11
 8006ce8:	2a02      	cmp	r2, #2
 8006cea:	7018      	strb	r0, [r3, #0]
 8006cec:	d82a      	bhi.n	8006d44 <WS28xx::Blackout()+0x78>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	7058      	strb	r0, [r3, #1]
 8006cf4:	7098      	strb	r0, [r3, #2]
 8006cf6:	70d8      	strb	r0, [r3, #3]
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	d908      	bls.n	8006d10 <WS28xx::Blackout()+0x44>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4629      	mov	r1, r5
 8006d02:	461a      	mov	r2, r3
 8006d04:	4620      	mov	r0, r4
 8006d06:	9700      	str	r7, [sp, #0]
 8006d08:	f7ff f984 	bl	8006014 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	e7f3      	b.n	8006cf8 <WS28xx::Blackout()+0x2c>
 8006d10:	6821      	ldr	r1, [r4, #0]
 8006d12:	68e2      	ldr	r2, [r4, #12]
 8006d14:	390b      	subs	r1, #11
 8006d16:	2901      	cmp	r1, #1
 8006d18:	bf94      	ite	ls
 8006d1a:	21ff      	movls	r1, #255	; 0xff
 8006d1c:	2100      	movhi	r1, #0
 8006d1e:	6960      	ldr	r0, [r4, #20]
 8006d20:	3a04      	subs	r2, #4
 8006d22:	1883      	adds	r3, r0, r2
 8006d24:	5481      	strb	r1, [r0, r2]
 8006d26:	7059      	strb	r1, [r3, #1]
 8006d28:	7099      	strb	r1, [r3, #2]
 8006d2a:	70d9      	strb	r1, [r3, #3]
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff ffb1 	bl	8006c94 <WS28xx::Update()>
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f002 fdd1 	bl	80098dc <gd32_spi_dma_tx_is_active()>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d1f9      	bne.n	8006d32 <WS28xx::Blackout()+0x66>
 8006d3e:	6166      	str	r6, [r4, #20]
 8006d40:	b003      	add	sp, #12
 8006d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d44:	6963      	ldr	r3, [r4, #20]
 8006d46:	6821      	ldr	r1, [r4, #0]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	b101      	cbz	r1, 8006d4e <WS28xx::Blackout()+0x82>
 8006d4c:	7c21      	ldrb	r1, [r4, #16]
 8006d4e:	68e0      	ldr	r0, [r4, #12]
 8006d50:	3001      	adds	r0, #1
 8006d52:	4403      	add	r3, r0
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d0e9      	beq.n	8006d2c <WS28xx::Blackout()+0x60>
 8006d58:	f802 1b01 	strb.w	r1, [r2], #1
 8006d5c:	e7fa      	b.n	8006d54 <WS28xx::Blackout()+0x88>
	...

08006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8006d60:	2300      	movs	r3, #0
 8006d62:	2020      	movs	r0, #32
 8006d64:	b510      	push	{r4, lr}
 8006d66:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	d004      	beq.n	8006d76 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 8006d6c:	f852 4b04 	ldr.w	r4, [r2], #4
 8006d70:	3301      	adds	r3, #1
 8006d72:	4420      	add	r0, r4
 8006d74:	e7f8      	b.n	8006d68 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	0800af60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, pc}

08006d7c <SpiFlashStore::Init()>:
 8006d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8006ea4 <SpiFlashStore::Init()+0x128>
 8006d84:	4607      	mov	r7, r0
 8006d86:	b085      	sub	sp, #20
 8006d88:	f8d8 0000 	ldr.w	r0, [r8]
 8006d8c:	f000 fb94 	bl	80074b8 <FlashRom::GetSectorSize() const>
 8006d90:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006d94:	4605      	mov	r5, r0
 8006d96:	f040 8083 	bne.w	8006ea0 <SpiFlashStore::Init()+0x124>
 8006d9a:	f8d8 0000 	ldr.w	r0, [r8]
 8006d9e:	f000 fb83 	bl	80074a8 <FlashRom::GetSize() const>
 8006da2:	4b41      	ldr	r3, [pc, #260]	; (8006ea8 <SpiFlashStore::Init()+0x12c>)
 8006da4:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8006da8:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	2e00      	cmp	r6, #0
 8006db0:	d176      	bne.n	8006ea0 <SpiFlashStore::Init()+0x124>
 8006db2:	4c3e      	ldr	r4, [pc, #248]	; (8006eac <SpiFlashStore::Init()+0x130>)
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4623      	mov	r3, r4
 8006dbc:	f8d8 0000 	ldr.w	r0, [r8]
 8006dc0:	f000 fb7d 	bl	80074be <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 8006dc4:	7823      	ldrb	r3, [r4, #0]
 8006dc6:	2b41      	cmp	r3, #65	; 0x41
 8006dc8:	bf1c      	itt	ne
 8006dca:	2341      	movne	r3, #65	; 0x41
 8006dcc:	7023      	strbne	r3, [r4, #0]
 8006dce:	7863      	ldrb	r3, [r4, #1]
 8006dd0:	bf14      	ite	ne
 8006dd2:	4635      	movne	r5, r6
 8006dd4:	2501      	moveq	r5, #1
 8006dd6:	2b76      	cmp	r3, #118	; 0x76
 8006dd8:	bf1c      	itt	ne
 8006dda:	2376      	movne	r3, #118	; 0x76
 8006ddc:	7063      	strbne	r3, [r4, #1]
 8006dde:	78a3      	ldrb	r3, [r4, #2]
 8006de0:	bf18      	it	ne
 8006de2:	2500      	movne	r5, #0
 8006de4:	2b56      	cmp	r3, #86	; 0x56
 8006de6:	bf1c      	itt	ne
 8006de8:	2356      	movne	r3, #86	; 0x56
 8006dea:	70a3      	strbne	r3, [r4, #2]
 8006dec:	78e3      	ldrb	r3, [r4, #3]
 8006dee:	bf18      	it	ne
 8006df0:	2500      	movne	r5, #0
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d01c      	beq.n	8006e30 <SpiFlashStore::Init()+0xb4>
 8006df6:	2310      	movs	r3, #16
 8006df8:	70e3      	strb	r3, [r4, #3]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006e02:	4b2b      	ldr	r3, [pc, #172]	; (8006eb0 <SpiFlashStore::Init()+0x134>)
 8006e04:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006eb4 <SpiFlashStore::Init()+0x138>
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff ffa7 	bl	8006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006e12:	1823      	adds	r3, r4, r0
 8006e14:	5425      	strb	r5, [r4, r0]
 8006e16:	705d      	strb	r5, [r3, #1]
 8006e18:	709d      	strb	r5, [r3, #2]
 8006e1a:	70dd      	strb	r5, [r3, #3]
 8006e1c:	f858 3b04 	ldr.w	r3, [r8], #4
 8006e20:	1d02      	adds	r2, r0, #4
 8006e22:	4403      	add	r3, r0
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d931      	bls.n	8006e8c <SpiFlashStore::Init()+0x110>
 8006e28:	f804 9002 	strb.w	r9, [r4, r2]
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	e7f9      	b.n	8006e24 <SpiFlashStore::Init()+0xa8>
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	d0e2      	beq.n	8006dfa <SpiFlashStore::Init()+0x7e>
 8006e34:	f04f 0900 	mov.w	r9, #0
 8006e38:	46c8      	mov	r8, r9
 8006e3a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8006eb8 <SpiFlashStore::Init()+0x13c>
 8006e3e:	f8da b000 	ldr.w	fp, [sl]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7ff ff8b 	bl	8006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006e4a:	5c23      	ldrb	r3, [r4, r0]
 8006e4c:	2bff      	cmp	r3, #255	; 0xff
 8006e4e:	d114      	bne.n	8006e7a <SpiFlashStore::Init()+0xfe>
 8006e50:	1823      	adds	r3, r4, r0
 8006e52:	785a      	ldrb	r2, [r3, #1]
 8006e54:	2aff      	cmp	r2, #255	; 0xff
 8006e56:	d110      	bne.n	8006e7a <SpiFlashStore::Init()+0xfe>
 8006e58:	789a      	ldrb	r2, [r3, #2]
 8006e5a:	2aff      	cmp	r2, #255	; 0xff
 8006e5c:	d10d      	bne.n	8006e7a <SpiFlashStore::Init()+0xfe>
 8006e5e:	78da      	ldrb	r2, [r3, #3]
 8006e60:	2aff      	cmp	r2, #255	; 0xff
 8006e62:	d10a      	bne.n	8006e7a <SpiFlashStore::Init()+0xfe>
 8006e64:	46a9      	mov	r9, r5
 8006e66:	f04f 0b01 	mov.w	fp, #1
 8006e6a:	f804 8000 	strb.w	r8, [r4, r0]
 8006e6e:	f883 8001 	strb.w	r8, [r3, #1]
 8006e72:	f883 8002 	strb.w	r8, [r3, #2]
 8006e76:	f883 8003 	strb.w	r8, [r3, #3]
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	2e1c      	cmp	r6, #28
 8006e7e:	d1e0      	bne.n	8006e42 <SpiFlashStore::Init()+0xc6>
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	d008      	beq.n	8006e98 <SpiFlashStore::Init()+0x11c>
 8006e86:	f8ca b000 	str.w	fp, [sl]
 8006e8a:	e005      	b.n	8006e98 <SpiFlashStore::Init()+0x11c>
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	2e1c      	cmp	r6, #28
 8006e90:	d1bb      	bne.n	8006e0a <SpiFlashStore::Init()+0x8e>
 8006e92:	2501      	movs	r5, #1
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <SpiFlashStore::Init()+0x13c>)
 8006e96:	601d      	str	r5, [r3, #0]
 8006e98:	4628      	mov	r0, r5
 8006e9a:	b005      	add	sp, #20
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	e7f9      	b.n	8006e98 <SpiFlashStore::Init()+0x11c>
 8006ea4:	200016c8 	andcs	r1, r0, r8, asr #13
 8006ea8:	2000169c 	mulcs	r0, ip, r6
 8006eac:	2000069c 	mulcs	r0, ip, r6
 8006eb0:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8006eb4:	0800af60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, pc}
 8006eb8:	200016a8 	andcs	r1, r0, r8, lsr #13

08006ebc <SpiFlashStore::SpiFlashStore()>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <SpiFlashStore::SpiFlashStore()+0x38>)
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	6018      	str	r0, [r3, #0]
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <SpiFlashStore::SpiFlashStore()+0x3c>)
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	; (8006efc <SpiFlashStore::SpiFlashStore()+0x40>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b113      	cbz	r3, 8006ed4 <SpiFlashStore::SpiFlashStore()+0x18>
 8006ece:	f7ff ff55 	bl	8006d7c <SpiFlashStore::Init()>
 8006ed2:	7028      	strb	r0, [r5, #0]
 8006ed4:	782b      	ldrb	r3, [r5, #0]
 8006ed6:	b153      	cbz	r3, 8006eee <SpiFlashStore::SpiFlashStore()+0x32>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	2200      	movs	r2, #0
 8006edc:	4908      	ldr	r1, [pc, #32]	; (8006f00 <SpiFlashStore::SpiFlashStore()+0x44>)
 8006ede:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	2a1c      	cmp	r2, #28
 8006ee6:	4403      	add	r3, r0
 8006ee8:	d1f9      	bne.n	8006ede <SpiFlashStore::SpiFlashStore()+0x22>
 8006eea:	4a06      	ldr	r2, [pc, #24]	; (8006f04 <SpiFlashStore::SpiFlashStore()+0x48>)
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	bf00      	nop
 8006ef4:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006ef8:	200016c8 	andcs	r1, r0, r8, asr #13
 8006efc:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006f00:	0800af60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, sp, pc}
 8006f04:	200016a4 	andcs	r1, r0, r4, lsr #13

08006f08 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	f7ff ff29 	bl	8006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8006f12:	1842      	adds	r2, r0, r1
 8006f14:	540b      	strb	r3, [r1, r0]
 8006f16:	7053      	strb	r3, [r2, #1]
 8006f18:	7093      	strb	r3, [r2, #2]
 8006f1a:	70d3      	strb	r3, [r2, #3]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	bd08      	pop	{r3, pc}
 8006f24:	2000069c 	mulcs	r0, ip, r6
 8006f28:	200016a8 	andcs	r1, r0, r8, lsr #13

08006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8006f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f30:	461c      	mov	r4, r3
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8006f34:	4615      	mov	r5, r2
 8006f36:	781f      	ldrb	r7, [r3, #0]
 8006f38:	9e07      	ldr	r6, [sp, #28]
 8006f3a:	b35f      	cbz	r7, 8006f94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 8006f3c:	f7ff ff10 	bl	8006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006f40:	f04f 0c00 	mov.w	ip, #0
 8006f44:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8006f46:	1941      	adds	r1, r0, r5
 8006f48:	1e63      	subs	r3, r4, #1
 8006f4a:	9c06      	ldr	r4, [sp, #24]
 8006f4c:	4411      	add	r1, r2
 8006f4e:	440c      	add	r4, r1
 8006f50:	42a1      	cmp	r1, r4
 8006f52:	d00a      	beq.n	8006f6a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 8006f54:	f891 8000 	ldrb.w	r8, [r1]
 8006f58:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	45f0      	cmp	r8, lr
 8006f60:	bf1c      	itt	ne
 8006f62:	f801 ec01 	strbne.w	lr, [r1, #-1]
 8006f66:	46bc      	movne	ip, r7
 8006f68:	e7f2      	b.n	8006f50 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8006f6a:	f1bc 0f00 	cmp.w	ip, #0
 8006f6e:	d011      	beq.n	8006f94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	b109      	cbz	r1, 8006f7a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 8006f76:	2906      	cmp	r1, #6
 8006f78:	d101      	bne.n	8006f7e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	6019      	str	r1, [r3, #0]
 8006f7e:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 8006f84:	6019      	str	r1, [r3, #0]
 8006f86:	b12d      	cbz	r5, 8006f94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 8006f88:	b126      	cbz	r6, 8006f94 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 8006f8a:	9b08      	ldr	r3, [sp, #32]
 8006f8c:	4418      	add	r0, r3
 8006f8e:	5813      	ldr	r3, [r2, r0]
 8006f90:	4333      	orrs	r3, r6
 8006f92:	5013      	str	r3, [r2, r0]
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006f9c:	2000069c 	mulcs	r0, ip, r6
 8006fa0:	200016a8 	andcs	r1, r0, r8, lsr #13
 8006fa4:	20001814 	andcs	r1, r0, r4, lsl r8
 8006fa8:	20000698 	mulcs	r0, r8, r6

08006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 8006fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fb0:	461d      	mov	r5, r3
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	4607      	mov	r7, r0
 8006fba:	4688      	mov	r8, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006fc2:	b1eb      	cbz	r3, 8007000 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 8006fc4:	f7ff fecc 	bl	8006d60 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006fc8:	4910      	ldr	r1, [pc, #64]	; (800700c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 8006fca:	4a11      	ldr	r2, [pc, #68]	; (8007010 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 8006fcc:	7809      	ldrb	r1, [r1, #0]
 8006fce:	eb00 0309 	add.w	r3, r0, r9
 8006fd2:	189e      	adds	r6, r3, r2
 8006fd4:	b951      	cbnz	r1, 8006fec <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 8006fd6:	589b      	ldr	r3, [r3, r2]
 8006fd8:	b143      	cbz	r3, 8006fec <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 8006fda:	3c01      	subs	r4, #1
 8006fdc:	4435      	add	r5, r6
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d00e      	beq.n	8007000 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 8006fe2:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006fe6:	f804 3f01 	strb.w	r3, [r4, #1]!
 8006fea:	e7f8      	b.n	8006fde <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 8006fec:	2300      	movs	r3, #0
 8006fee:	464a      	mov	r2, r9
 8006ff0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	9500      	str	r5, [sp, #0]
 8006ffc:	f7ff ff96 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007006:	bf00      	nop
 8007008:	200016a0 	andcs	r1, r0, r0, lsr #13
 800700c:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8007010:	2000069c 	mulcs	r0, ip, r6

08007014 <SpiFlashStore::Flash()>:
 8007014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007016:	4c25      	ldr	r4, [pc, #148]	; (80070ac <SpiFlashStore::Flash()+0x98>)
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	2800      	cmp	r0, #0
 800701c:	d043      	beq.n	80070a6 <SpiFlashStore::Flash()+0x92>
 800701e:	3801      	subs	r0, #1
 8007020:	2805      	cmp	r0, #5
 8007022:	d831      	bhi.n	8007088 <SpiFlashStore::Flash()+0x74>
 8007024:	e8df f000 	tbb	[pc, r0]
 8007028:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800702c:	4b203025 	blmi	88130c8 <__exidx_end+0x807aec>
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <SpiFlashStore::Flash()+0xa0>)
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	2302      	movs	r3, #2
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	2001      	movs	r0, #1
 800703c:	e033      	b.n	80070a6 <SpiFlashStore::Flash()+0x92>
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <SpiFlashStore::Flash()+0x9c>)
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <SpiFlashStore::Flash()+0xa0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	2b63      	cmp	r3, #99	; 0x63
 800704a:	d9f6      	bls.n	800703a <SpiFlashStore::Flash()+0x26>
 800704c:	2303      	movs	r3, #3
 800704e:	e7f3      	b.n	8007038 <SpiFlashStore::Flash()+0x24>
 8007050:	4919      	ldr	r1, [pc, #100]	; (80070b8 <SpiFlashStore::Flash()+0xa4>)
 8007052:	481a      	ldr	r0, [pc, #104]	; (80070bc <SpiFlashStore::Flash()+0xa8>)
 8007054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007058:	6809      	ldr	r1, [r1, #0]
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	ab03      	add	r3, sp, #12
 800705e:	f000 fa3d 	bl	80074dc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 8007062:	2800      	cmp	r0, #0
 8007064:	d0e9      	beq.n	800703a <SpiFlashStore::Flash()+0x26>
 8007066:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <SpiFlashStore::Flash()+0x9c>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <SpiFlashStore::Flash()+0xa0>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	2305      	movs	r3, #5
 8007070:	e7e2      	b.n	8007038 <SpiFlashStore::Flash()+0x24>
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <SpiFlashStore::Flash()+0x9c>)
 8007074:	4a0f      	ldr	r2, [pc, #60]	; (80070b4 <SpiFlashStore::Flash()+0xa0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	2b63      	cmp	r3, #99	; 0x63
 800707e:	d9dc      	bls.n	800703a <SpiFlashStore::Flash()+0x26>
 8007080:	2304      	movs	r3, #4
 8007082:	e7d9      	b.n	8007038 <SpiFlashStore::Flash()+0x24>
 8007084:	2306      	movs	r3, #6
 8007086:	e7d7      	b.n	8007038 <SpiFlashStore::Flash()+0x24>
 8007088:	ab03      	add	r3, sp, #12
 800708a:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <SpiFlashStore::Flash()+0xac>)
 800708c:	490a      	ldr	r1, [pc, #40]	; (80070b8 <SpiFlashStore::Flash()+0xa4>)
 800708e:	480b      	ldr	r0, [pc, #44]	; (80070bc <SpiFlashStore::Flash()+0xa8>)
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <SpiFlashStore::Flash()+0xb0>)
 8007096:	6809      	ldr	r1, [r1, #0]
 8007098:	6800      	ldr	r0, [r0, #0]
 800709a:	f000 fabf 	bl	800761c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0cb      	beq.n	800703a <SpiFlashStore::Flash()+0x26>
 80070a2:	2000      	movs	r0, #0
 80070a4:	6020      	str	r0, [r4, #0]
 80070a6:	b004      	add	sp, #16
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	200016a8 	andcs	r1, r0, r8, lsr #13
 80070b0:	20001814 	andcs	r1, r0, r4, lsl r8
 80070b4:	20000698 	mulcs	r0, r8, r6
 80070b8:	2000169c 	mulcs	r0, ip, r6
 80070bc:	200016c8 	andcs	r1, r0, r8, asr #13
 80070c0:	200016a4 	andcs	r1, r0, r4, lsr #13
 80070c4:	2000069c 	mulcs	r0, ip, r6

080070c8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80070c8:	4770      	bx	lr
	...

080070cc <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80070cc:	2300      	movs	r3, #0
 80070ce:	b507      	push	{r0, r1, r2, lr}
 80070d0:	4805      	ldr	r0, [pc, #20]	; (80070e8 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	460a      	mov	r2, r1
 80070d6:	2322      	movs	r3, #34	; 0x22
 80070d8:	210f      	movs	r1, #15
 80070da:	6800      	ldr	r0, [r0, #0]
 80070dc:	f7ff ff66 	bl	8006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80070e0:	b003      	add	sp, #12
 80070e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80070e6:	bf00      	nop
 80070e8:	200016ac 	andcs	r1, r0, ip, lsr #13

080070ec <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80070ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ee:	2200      	movs	r2, #0
 80070f0:	460b      	mov	r3, r1
 80070f2:	2122      	movs	r1, #34	; 0x22
 80070f4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80070f8:	4804      	ldr	r0, [pc, #16]	; (800710c <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80070fa:	9100      	str	r1, [sp, #0]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	210f      	movs	r1, #15
 8007100:	f7ff ff14 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007104:	b005      	add	sp, #20
 8007106:	f85d fb04 	ldr.w	pc, [sp], #4
 800710a:	bf00      	nop
 800710c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007110 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8007110:	b510      	push	{r4, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	f001 f97f 	bl	8008416 <operator delete(void*)>
 8007118:	4620      	mov	r0, r4
 800711a:	bd10      	pop	{r4, pc}

0800711c <StoreDisplayUdf::StoreDisplayUdf()>:
 800711c:	4a02      	ldr	r2, [pc, #8]	; (8007128 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800711e:	6002      	str	r2, [r0, #0]
 8007120:	4a02      	ldr	r2, [pc, #8]	; (800712c <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8007122:	6010      	str	r0, [r2, #0]
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	0800afd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, sp, pc}
 800712c:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

08007130 <StoreRDMDevice::~StoreRDMDevice()>:
 8007130:	4770      	bx	lr

08007132 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007132:	3804      	subs	r0, #4
 8007134:	4770      	bx	lr
	...

08007138 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8007138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800713a:	2200      	movs	r2, #0
 800713c:	460b      	mov	r3, r1
 800713e:	2129      	movs	r1, #41	; 0x29
 8007140:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007144:	4804      	ldr	r0, [pc, #16]	; (8007158 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8007146:	9100      	str	r1, [sp, #0]
 8007148:	6800      	ldr	r0, [r0, #0]
 800714a:	210b      	movs	r1, #11
 800714c:	f7ff feee 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007150:	b005      	add	sp, #20
 8007152:	f85d fb04 	ldr.w	pc, [sp], #4
 8007156:	bf00      	nop
 8007158:	200016ac 	andcs	r1, r0, ip, lsr #13

0800715c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	2401      	movs	r4, #1
 8007160:	2600      	movs	r6, #0
 8007162:	4d0c      	ldr	r5, [pc, #48]	; (8007194 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8007164:	b086      	sub	sp, #24
 8007166:	460b      	mov	r3, r1
 8007168:	6828      	ldr	r0, [r5, #0]
 800716a:	f88d 2017 	strb.w	r2, [sp, #23]
 800716e:	9200      	str	r2, [sp, #0]
 8007170:	210b      	movs	r1, #11
 8007172:	2204      	movs	r2, #4
 8007174:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007178:	f7ff fed8 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800717c:	2224      	movs	r2, #36	; 0x24
 800717e:	210b      	movs	r1, #11
 8007180:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8007184:	6828      	ldr	r0, [r5, #0]
 8007186:	9400      	str	r4, [sp, #0]
 8007188:	f10d 0317 	add.w	r3, sp, #23
 800718c:	f7ff fece 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007190:	b006      	add	sp, #24
 8007192:	bd70      	pop	{r4, r5, r6, pc}
 8007194:	200016ac 	andcs	r1, r0, ip, lsr #13

08007198 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8007198:	f1a0 0004 	sub.w	r0, r0, #4
 800719c:	e7de      	b.n	800715c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800719e:	bf00      	nop

080071a0 <StoreRDMDevice::~StoreRDMDevice()>:
 80071a0:	b510      	push	{r4, lr}
 80071a2:	4604      	mov	r4, r0
 80071a4:	f001 f937 	bl	8008416 <operator delete(void*)>
 80071a8:	4620      	mov	r0, r4
 80071aa:	bd10      	pop	{r4, pc}

080071ac <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80071ac:	f1a0 0004 	sub.w	r0, r0, #4
 80071b0:	e7f6      	b.n	80071a0 <StoreRDMDevice::~StoreRDMDevice()>
	...

080071b4 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80071b4:	2300      	movs	r3, #0
 80071b6:	b507      	push	{r0, r1, r2, lr}
 80071b8:	4805      	ldr	r0, [pc, #20]	; (80071d0 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	460a      	mov	r2, r1
 80071be:	2329      	movs	r3, #41	; 0x29
 80071c0:	210b      	movs	r1, #11
 80071c2:	6800      	ldr	r0, [r0, #0]
 80071c4:	f7ff fef2 	bl	8006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80071c8:	b003      	add	sp, #12
 80071ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ce:	bf00      	nop
 80071d0:	200016ac 	andcs	r1, r0, ip, lsr #13

080071d4 <StoreRDMDevice::StoreRDMDevice()>:
 80071d4:	4a03      	ldr	r2, [pc, #12]	; (80071e4 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 80071d6:	6002      	str	r2, [r0, #0]
 80071d8:	321c      	adds	r2, #28
 80071da:	6042      	str	r2, [r0, #4]
 80071dc:	4a02      	ldr	r2, [pc, #8]	; (80071e8 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 80071de:	6010      	str	r0, [r2, #0]
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	0800aff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 80071e8:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

080071ec <StoreRDMSensors::~StoreRDMSensors()>:
 80071ec:	4770      	bx	lr
	...

080071f0 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 80071f0:	2300      	movs	r3, #0
 80071f2:	b507      	push	{r0, r1, r2, lr}
 80071f4:	4805      	ldr	r0, [pc, #20]	; (800720c <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x1c>)
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	460a      	mov	r2, r1
 80071fa:	2334      	movs	r3, #52	; 0x34
 80071fc:	2117      	movs	r1, #23
 80071fe:	6800      	ldr	r0, [r0, #0]
 8007200:	f7ff fed4 	bl	8006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8007204:	b003      	add	sp, #12
 8007206:	f85d fb04 	ldr.w	pc, [sp], #4
 800720a:	bf00      	nop
 800720c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007210 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8007210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007212:	2200      	movs	r2, #0
 8007214:	460b      	mov	r3, r1
 8007216:	2134      	movs	r1, #52	; 0x34
 8007218:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800721c:	4804      	ldr	r0, [pc, #16]	; (8007230 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 800721e:	9100      	str	r1, [sp, #0]
 8007220:	6800      	ldr	r0, [r0, #0]
 8007222:	2117      	movs	r1, #23
 8007224:	f7ff fe82 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007228:	b005      	add	sp, #20
 800722a:	f85d fb04 	ldr.w	pc, [sp], #4
 800722e:	bf00      	nop
 8007230:	200016ac 	andcs	r1, r0, ip, lsr #13

08007234 <StoreRDMSensors::~StoreRDMSensors()>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	f001 f8ed 	bl	8008416 <operator delete(void*)>
 800723c:	4620      	mov	r0, r4
 800723e:	bd10      	pop	{r4, pc}

08007240 <StoreRDMSensors::StoreRDMSensors()>:
 8007240:	4a02      	ldr	r2, [pc, #8]	; (800724c <StoreRDMSensors::StoreRDMSensors()+0xc>)
 8007242:	6002      	str	r2, [r0, #0]
 8007244:	4a02      	ldr	r2, [pc, #8]	; (8007250 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 8007246:	6010      	str	r0, [r2, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	0800b020 	stmdaeq	r0, {r5, ip, sp, pc}
 8007250:	200016bc 			; <UNDEFINED> instruction: 0x200016bc

08007254 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8007254:	4770      	bx	lr
	...

08007258 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 8007258:	2300      	movs	r3, #0
 800725a:	b507      	push	{r0, r1, r2, lr}
 800725c:	4805      	ldr	r0, [pc, #20]	; (8007274 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x1c>)
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	460a      	mov	r2, r1
 8007262:	234c      	movs	r3, #76	; 0x4c
 8007264:	2118      	movs	r1, #24
 8007266:	6800      	ldr	r0, [r0, #0]
 8007268:	f7ff fea0 	bl	8006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800726c:	b003      	add	sp, #12
 800726e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007272:	bf00      	nop
 8007274:	200016ac 	andcs	r1, r0, ip, lsr #13

08007278 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 8007278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800727a:	2200      	movs	r2, #0
 800727c:	460b      	mov	r3, r1
 800727e:	214c      	movs	r1, #76	; 0x4c
 8007280:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007284:	4804      	ldr	r0, [pc, #16]	; (8007298 <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 8007286:	9100      	str	r1, [sp, #0]
 8007288:	6800      	ldr	r0, [r0, #0]
 800728a:	2118      	movs	r1, #24
 800728c:	f7ff fe4e 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007290:	b005      	add	sp, #20
 8007292:	f85d fb04 	ldr.w	pc, [sp], #4
 8007296:	bf00      	nop
 8007298:	200016ac 	andcs	r1, r0, ip, lsr #13

0800729c <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	f001 f8b9 	bl	8008416 <operator delete(void*)>
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd10      	pop	{r4, pc}

080072a8 <StoreRDMSubDevices::StoreRDMSubDevices()>:
 80072a8:	4a02      	ldr	r2, [pc, #8]	; (80072b4 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 80072aa:	6002      	str	r2, [r0, #0]
 80072ac:	4a02      	ldr	r2, [pc, #8]	; (80072b8 <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 80072ae:	6010      	str	r0, [r2, #0]
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	0800b038 	stmdaeq	r0, {r3, r4, r5, ip, sp, pc}
 80072b8:	200016c0 	andcs	r1, r0, r0, asr #13

080072bc <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80072bc:	4770      	bx	lr

080072be <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80072be:	3804      	subs	r0, #4
 80072c0:	4770      	bx	lr
	...

080072c4 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 80072c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072c6:	2200      	movs	r2, #0
 80072c8:	460b      	mov	r3, r1
 80072ca:	2127      	movs	r1, #39	; 0x27
 80072cc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80072d0:	4804      	ldr	r0, [pc, #16]	; (80072e4 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 80072d2:	9100      	str	r1, [sp, #0]
 80072d4:	6800      	ldr	r0, [r0, #0]
 80072d6:	2103      	movs	r1, #3
 80072d8:	f7ff fe28 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80072dc:	b005      	add	sp, #20
 80072de:	f85d fb04 	ldr.w	pc, [sp], #4
 80072e2:	bf00      	nop
 80072e4:	200016ac 	andcs	r1, r0, ip, lsr #13

080072e8 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 80072e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80072ea:	2304      	movs	r3, #4
 80072ec:	2200      	movs	r2, #0
 80072ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072f2:	2302      	movs	r3, #2
 80072f4:	4806      	ldr	r0, [pc, #24]	; (8007310 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80072fc:	2207      	movs	r2, #7
 80072fe:	2103      	movs	r1, #3
 8007300:	6800      	ldr	r0, [r0, #0]
 8007302:	f10d 0316 	add.w	r3, sp, #22
 8007306:	f7ff fe11 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800730a:	b007      	add	sp, #28
 800730c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007310:	200016ac 	andcs	r1, r0, ip, lsr #13

08007314 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8007314:	f1a0 0004 	sub.w	r0, r0, #4
 8007318:	e7e6      	b.n	80072e8 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800731a:	bf00      	nop

0800731c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800731c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800731e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007322:	2200      	movs	r2, #0
 8007324:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007328:	2301      	movs	r3, #1
 800732a:	4807      	ldr	r0, [pc, #28]	; (8007348 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	f88d 1017 	strb.w	r1, [sp, #23]
 8007332:	2226      	movs	r2, #38	; 0x26
 8007334:	2103      	movs	r1, #3
 8007336:	6800      	ldr	r0, [r0, #0]
 8007338:	f10d 0317 	add.w	r3, sp, #23
 800733c:	f7ff fdf6 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007340:	b007      	add	sp, #28
 8007342:	f85d fb04 	ldr.w	pc, [sp], #4
 8007346:	bf00      	nop
 8007348:	200016ac 	andcs	r1, r0, ip, lsr #13

0800734c <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800734c:	f1a0 0004 	sub.w	r0, r0, #4
 8007350:	e7e4      	b.n	800731c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 8007352:	bf00      	nop

08007354 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 8007354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800735a:	2200      	movs	r2, #0
 800735c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007360:	2301      	movs	r3, #1
 8007362:	4807      	ldr	r0, [pc, #28]	; (8007380 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	f88d 1017 	strb.w	r1, [sp, #23]
 800736a:	2213      	movs	r2, #19
 800736c:	2103      	movs	r1, #3
 800736e:	6800      	ldr	r0, [r0, #0]
 8007370:	f10d 0317 	add.w	r3, sp, #23
 8007374:	f7ff fdda 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007378:	b007      	add	sp, #28
 800737a:	f85d fb04 	ldr.w	pc, [sp], #4
 800737e:	bf00      	nop
 8007380:	200016ac 	andcs	r1, r0, ip, lsr #13

08007384 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8007384:	f1a0 0004 	sub.w	r0, r0, #4
 8007388:	e7e4      	b.n	8007354 <StoreWS28xxDmx::SaveMap(unsigned char)>
 800738a:	bf00      	nop

0800738c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800738c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800738e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007392:	2200      	movs	r2, #0
 8007394:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007398:	2302      	movs	r3, #2
 800739a:	4807      	ldr	r0, [pc, #28]	; (80073b8 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	f8ad 1016 	strh.w	r1, [sp, #22]
 80073a2:	2211      	movs	r2, #17
 80073a4:	2103      	movs	r1, #3
 80073a6:	6800      	ldr	r0, [r0, #0]
 80073a8:	f10d 0316 	add.w	r3, sp, #22
 80073ac:	f7ff fdbe 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073b0:	b007      	add	sp, #28
 80073b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80073b6:	bf00      	nop
 80073b8:	200016ac 	andcs	r1, r0, ip, lsr #13

080073bc <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 80073bc:	f1a0 0004 	sub.w	r0, r0, #4
 80073c0:	e7e4      	b.n	800738c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 80073c2:	bf00      	nop

080073c4 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 80073c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073c6:	2302      	movs	r3, #2
 80073c8:	2200      	movs	r2, #0
 80073ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073ce:	4807      	ldr	r0, [pc, #28]	; (80073ec <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80073d6:	2205      	movs	r2, #5
 80073d8:	2103      	movs	r1, #3
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	f10d 0316 	add.w	r3, sp, #22
 80073e0:	f7ff fda4 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073e4:	b007      	add	sp, #28
 80073e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80073ea:	bf00      	nop
 80073ec:	200016ac 	andcs	r1, r0, ip, lsr #13

080073f0 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 80073f0:	f1a0 0004 	sub.w	r0, r0, #4
 80073f4:	e7e6      	b.n	80073c4 <StoreWS28xxDmx::SaveCount(unsigned short)>
 80073f6:	bf00      	nop

080073f8 <StoreWS28xxDmx::SaveType(unsigned char)>:
 80073f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073fa:	2301      	movs	r3, #1
 80073fc:	2200      	movs	r2, #0
 80073fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007402:	4807      	ldr	r0, [pc, #28]	; (8007420 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f88d 1017 	strb.w	r1, [sp, #23]
 800740a:	2204      	movs	r2, #4
 800740c:	2103      	movs	r1, #3
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	f10d 0317 	add.w	r3, sp, #23
 8007414:	f7ff fd8a 	bl	8006f2c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007418:	b007      	add	sp, #28
 800741a:	f85d fb04 	ldr.w	pc, [sp], #4
 800741e:	bf00      	nop
 8007420:	200016ac 	andcs	r1, r0, ip, lsr #13

08007424 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8007424:	f1a0 0004 	sub.w	r0, r0, #4
 8007428:	e7e6      	b.n	80073f8 <StoreWS28xxDmx::SaveType(unsigned char)>
 800742a:	bf00      	nop

0800742c <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	f000 fff1 	bl	8008416 <operator delete(void*)>
 8007434:	4620      	mov	r0, r4
 8007436:	bd10      	pop	{r4, pc}

08007438 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8007438:	f1a0 0004 	sub.w	r0, r0, #4
 800743c:	e7f6      	b.n	800742c <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08007440 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8007440:	2300      	movs	r3, #0
 8007442:	b507      	push	{r0, r1, r2, lr}
 8007444:	4805      	ldr	r0, [pc, #20]	; (800745c <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	460a      	mov	r2, r1
 800744a:	2327      	movs	r3, #39	; 0x27
 800744c:	2103      	movs	r1, #3
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	f7ff fdac 	bl	8006fac <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8007454:	b003      	add	sp, #12
 8007456:	f85d fb04 	ldr.w	pc, [sp], #4
 800745a:	bf00      	nop
 800745c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007460 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8007460:	4a03      	ldr	r2, [pc, #12]	; (8007470 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8007462:	6002      	str	r2, [r0, #0]
 8007464:	3230      	adds	r2, #48	; 0x30
 8007466:	6042      	str	r2, [r0, #4]
 8007468:	4a02      	ldr	r2, [pc, #8]	; (8007474 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	0800b050 	stmdaeq	r0, {r4, r6, ip, sp, pc}
 8007474:	200016c4 	andcs	r1, r0, r4, asr #13

08007478 <FlashRom::FlashRom()>:
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <FlashRom::FlashRom()+0x20>)
 800747a:	b510      	push	{r4, lr}
 800747c:	6018      	str	r0, [r3, #0]
 800747e:	2301      	movs	r3, #1
 8007480:	4604      	mov	r4, r0
 8007482:	7003      	strb	r3, [r0, #0]
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <FlashRom::FlashRom()+0x24>)
 8007486:	4906      	ldr	r1, [pc, #24]	; (80074a0 <FlashRom::FlashRom()+0x28>)
 8007488:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800748c:	4805      	ldr	r0, [pc, #20]	; (80074a4 <FlashRom::FlashRom()+0x2c>)
 800748e:	029a      	lsls	r2, r3, #10
 8007490:	f7fa ff38 	bl	8002304 <printf>
 8007494:	4620      	mov	r0, r4
 8007496:	bd10      	pop	{r4, pc}
 8007498:	200016c8 	andcs	r1, r0, r8, asr #13
 800749c:	1ffff700 	svcne	0x00fff700
 80074a0:	0800a2c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, pc}
 80074a4:	0800b0a0 	stmdaeq	r0, {r5, r7, ip, sp, pc}

080074a8 <FlashRom::GetSize() const>:
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <FlashRom::GetSize() const+0xc>)
 80074aa:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 80074ae:	0280      	lsls	r0, r0, #10
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	1ffff700 	svcne	0x00fff700

080074b8 <FlashRom::GetSectorSize() const>:
 80074b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074bc:	4770      	bx	lr

080074be <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 80074be:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80074c2:	441a      	add	r2, r3
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 80074c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80074cc:	f843 0b04 	str.w	r0, [r3], #4
 80074d0:	e7f8      	b.n	80074c4 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 80074d2:	2200      	movs	r2, #0
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	2001      	movs	r0, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	4770      	bx	lr

080074dc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 80074dc:	2000      	movs	r0, #0
 80074de:	b538      	push	{r3, r4, r5, lr}
 80074e0:	4c47      	ldr	r4, [pc, #284]	; (8007600 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 80074e2:	6018      	str	r0, [r3, #0]
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	f200 8082 	bhi.w	80075f0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 80074ec:	e8df f003 	tbb	[pc, r3]
 80074f0:	78452003 	stmdavc	r5, {r0, r1, sp}^
 80074f4:	4b430080 	blmi	90c76fc <__exidx_end+0x10bc120>
 80074f8:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80074fc:	6019      	str	r1, [r3, #0]
 80074fe:	4b42      	ldr	r3, [pc, #264]	; (8007608 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	4b42      	ldr	r3, [pc, #264]	; (800760c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8007504:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750c:	4b40      	ldr	r3, [pc, #256]	; (8007610 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800750e:	d807      	bhi.n	8007520 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	f001 fafc 	bl	8008b10 <fmc_bank0_unlock>
 8007518:	2301      	movs	r3, #1
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	2000      	movs	r0, #0
 800751e:	e026      	b.n	800756e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8007520:	4a3c      	ldr	r2, [pc, #240]	; (8007614 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8007522:	4291      	cmp	r1, r2
 8007524:	d3f4      	bcc.n	8007510 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	f001 faff 	bl	8008b2c <fmc_bank1_unlock>
 800752e:	e7f3      	b.n	8007518 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8007530:	4d37      	ldr	r5, [pc, #220]	; (8007610 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8007532:	782b      	ldrb	r3, [r5, #0]
 8007534:	b15b      	cbz	r3, 800754e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8007536:	f001 fb17 	bl	8008b68 <fmc_bank0_state_get>
 800753a:	2801      	cmp	r0, #1
 800753c:	d0ee      	beq.n	800751c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800753e:	7829      	ldrb	r1, [r5, #0]
 8007540:	4b35      	ldr	r3, [pc, #212]	; (8007618 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8007542:	b939      	cbnz	r1, 8007554 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8007544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007546:	f022 0202 	bic.w	r2, r2, #2
 800754a:	651a      	str	r2, [r3, #80]	; 0x50
 800754c:	e006      	b.n	800755c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800754e:	f001 fb1f 	bl	8008b90 <fmc_bank1_state_get>
 8007552:	e7f2      	b.n	800753a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	f022 0202 	bic.w	r2, r2, #2
 800755a:	611a      	str	r2, [r3, #16]
 800755c:	4b2a      	ldr	r3, [pc, #168]	; (8007608 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	b94b      	cbnz	r3, 8007576 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8007562:	b129      	cbz	r1, 8007570 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8007564:	f001 faf0 	bl	8008b48 <fmc_bank0_lock>
 8007568:	2300      	movs	r3, #0
 800756a:	2001      	movs	r0, #1
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	f001 faf2 	bl	8008b58 <fmc_bank1_lock>
 8007574:	e7f8      	b.n	8007568 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8007576:	2302      	movs	r3, #2
 8007578:	e7cf      	b.n	800751a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800757a:	4923      	ldr	r1, [pc, #140]	; (8007608 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800757c:	680b      	ldr	r3, [r1, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ca      	beq.n	8007518 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8007582:	4b23      	ldr	r3, [pc, #140]	; (8007610 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8007584:	4a1f      	ldr	r2, [pc, #124]	; (8007604 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8007586:	7818      	ldrb	r0, [r3, #0]
 8007588:	4b23      	ldr	r3, [pc, #140]	; (8007618 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800758a:	b190      	cbz	r0, 80075b2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800758c:	6918      	ldr	r0, [r3, #16]
 800758e:	f040 0002 	orr.w	r0, r0, #2
 8007592:	6118      	str	r0, [r3, #16]
 8007594:	6810      	ldr	r0, [r2, #0]
 8007596:	6158      	str	r0, [r3, #20]
 8007598:	6918      	ldr	r0, [r3, #16]
 800759a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800759e:	6118      	str	r0, [r3, #16]
 80075a0:	680b      	ldr	r3, [r1, #0]
 80075a2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80075a6:	600b      	str	r3, [r1, #0]
 80075a8:	6813      	ldr	r3, [r2, #0]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e7b2      	b.n	8007518 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 80075b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80075b4:	f040 0002 	orr.w	r0, r0, #2
 80075b8:	6518      	str	r0, [r3, #80]	; 0x50
 80075ba:	6810      	ldr	r0, [r2, #0]
 80075bc:	6558      	str	r0, [r3, #84]	; 0x54
 80075be:	69dd      	ldr	r5, [r3, #28]
 80075c0:	07ad      	lsls	r5, r5, #30
 80075c2:	bf48      	it	mi
 80075c4:	6158      	strmi	r0, [r3, #20]
 80075c6:	4814      	ldr	r0, [pc, #80]	; (8007618 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80075c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80075ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ce:	6503      	str	r3, [r0, #80]	; 0x50
 80075d0:	680b      	ldr	r3, [r1, #0]
 80075d2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80075d6:	600b      	str	r3, [r1, #0]
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075de:	e7e6      	b.n	80075ae <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80075e6:	b132      	cbz	r2, 80075f6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	f022 0201 	bic.w	r2, r2, #1
 80075ee:	611a      	str	r2, [r3, #16]
 80075f0:	2000      	movs	r0, #0
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	e7bb      	b.n	800756e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 80075f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	651a      	str	r2, [r3, #80]	; 0x50
 80075fe:	e7f7      	b.n	80075f0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8007600:	200016d0 	ldrdcs	r1, [r0], -r0
 8007604:	200016d4 	ldrdcs	r1, [r0], -r4
 8007608:	200016e0 	andcs	r1, r0, r0, ror #13
 800760c:	1ffff700 	svcne	0x00fff700
 8007610:	200016dc 	ldrdcs	r1, [r0], -ip
 8007614:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007618:	40022000 	andmi	r2, r2, r0

0800761c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	2400      	movs	r4, #0
 8007620:	9804      	ldr	r0, [sp, #16]
 8007622:	6004      	str	r4, [r0, #0]
 8007624:	4c48      	ldr	r4, [pc, #288]	; (8007748 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	2804      	cmp	r0, #4
 800762a:	d848      	bhi.n	80076be <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800762c:	e8df f000 	tbb	[pc, r0]
 8007630:	22847c03 	addcs	r7, r4, #768	; 0x300
 8007634:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8007638:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800763c:	6001      	str	r1, [r0, #0]
 800763e:	4844      	ldr	r0, [pc, #272]	; (8007750 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	4b44      	ldr	r3, [pc, #272]	; (8007754 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	4b44      	ldr	r3, [pc, #272]	; (8007758 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8007648:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800764c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007650:	4b42      	ldr	r3, [pc, #264]	; (800775c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8007652:	d807      	bhi.n	8007664 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	f001 fa5a 	bl	8008b10 <fmc_bank0_unlock>
 800765c:	2303      	movs	r3, #3
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	2000      	movs	r0, #0
 8007662:	e026      	b.n	80076b2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8007664:	4a3e      	ldr	r2, [pc, #248]	; (8007760 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8007666:	4291      	cmp	r1, r2
 8007668:	d3f4      	bcc.n	8007654 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	f001 fa5d 	bl	8008b2c <fmc_bank1_unlock>
 8007672:	e7f3      	b.n	800765c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8007674:	4d39      	ldr	r5, [pc, #228]	; (800775c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8007676:	782b      	ldrb	r3, [r5, #0]
 8007678:	b15b      	cbz	r3, 8007692 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800767a:	f001 fa75 	bl	8008b68 <fmc_bank0_state_get>
 800767e:	2801      	cmp	r0, #1
 8007680:	d0ee      	beq.n	8007660 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8007682:	7829      	ldrb	r1, [r5, #0]
 8007684:	4b37      	ldr	r3, [pc, #220]	; (8007764 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8007686:	b939      	cbnz	r1, 8007698 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8007688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	651a      	str	r2, [r3, #80]	; 0x50
 8007690:	e006      	b.n	80076a0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8007692:	f001 fa7d 	bl	8008b90 <fmc_bank1_state_get>
 8007696:	e7f2      	b.n	800767e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	611a      	str	r2, [r3, #16]
 80076a0:	4b2c      	ldr	r3, [pc, #176]	; (8007754 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	b94b      	cbnz	r3, 80076ba <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 80076a6:	b129      	cbz	r1, 80076b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 80076a8:	f001 fa4e 	bl	8008b48 <fmc_bank0_lock>
 80076ac:	2300      	movs	r3, #0
 80076ae:	2001      	movs	r0, #1
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	f001 fa50 	bl	8008b58 <fmc_bank1_lock>
 80076b8:	e7f8      	b.n	80076ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 80076ba:	2304      	movs	r3, #4
 80076bc:	e7cf      	b.n	800765e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 80076be:	4a25      	ldr	r2, [pc, #148]	; (8007754 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80076c0:	6813      	ldr	r3, [r2, #0]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d91a      	bls.n	80076fc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 80076c6:	4b25      	ldr	r3, [pc, #148]	; (800775c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80076c8:	7819      	ldrb	r1, [r3, #0]
 80076ca:	4b26      	ldr	r3, [pc, #152]	; (8007764 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80076cc:	b189      	cbz	r1, 80076f2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 80076ce:	6919      	ldr	r1, [r3, #16]
 80076d0:	f041 0101 	orr.w	r1, r1, #1
 80076d4:	6119      	str	r1, [r3, #16]
 80076d6:	4d1e      	ldr	r5, [pc, #120]	; (8007750 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 80076d8:	481c      	ldr	r0, [pc, #112]	; (800774c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 80076da:	6829      	ldr	r1, [r5, #0]
 80076dc:	6803      	ldr	r3, [r0, #0]
 80076de:	f851 6b04 	ldr.w	r6, [r1], #4
 80076e2:	f843 6b04 	str.w	r6, [r3], #4
 80076e6:	6003      	str	r3, [r0, #0]
 80076e8:	6813      	ldr	r3, [r2, #0]
 80076ea:	6029      	str	r1, [r5, #0]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e7b4      	b.n	800765c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80076f2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80076f4:	f041 0101 	orr.w	r1, r1, #1
 80076f8:	6519      	str	r1, [r3, #80]	; 0x50
 80076fa:	e7ec      	b.n	80076d6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0ad      	beq.n	800765c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8007700:	4b16      	ldr	r3, [pc, #88]	; (800775c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	4b17      	ldr	r3, [pc, #92]	; (8007764 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8007706:	b152      	cbz	r2, 800771e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	611a      	str	r2, [r3, #16]
 8007710:	4a0f      	ldr	r2, [pc, #60]	; (8007750 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e79e      	b.n	800765c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800771e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	651a      	str	r2, [r3, #80]	; 0x50
 8007726:	e7f3      	b.n	8007710 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800772e:	b132      	cbz	r2, 800773e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	f022 0202 	bic.w	r2, r2, #2
 8007736:	611a      	str	r2, [r3, #16]
 8007738:	2000      	movs	r0, #0
 800773a:	6020      	str	r0, [r4, #0]
 800773c:	e7b9      	b.n	80076b2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800773e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007740:	f022 0202 	bic.w	r2, r2, #2
 8007744:	651a      	str	r2, [r3, #80]	; 0x50
 8007746:	e7f7      	b.n	8007738 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8007748:	200016d0 	ldrdcs	r1, [r0], -r0
 800774c:	200016cc 	andcs	r1, r0, ip, asr #13
 8007750:	200016d8 	ldrdcs	r1, [r0], -r8
 8007754:	200016e0 	andcs	r1, r0, r0, ror #13
 8007758:	1ffff700 	svcne	0x00fff700
 800775c:	200016dc 	ldrdcs	r1, [r0], -ip
 8007760:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8007764:	40022000 	andmi	r2, r2, r0

08007768 <Network::Network()>:
 8007768:	4b05      	ldr	r3, [pc, #20]	; (8007780 <Network::Network()+0x18>)
 800776a:	4906      	ldr	r1, [pc, #24]	; (8007784 <Network::Network()+0x1c>)
 800776c:	6018      	str	r0, [r3, #0]
 800776e:	1e42      	subs	r2, r0, #1
 8007770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007774:	f802 3f01 	strb.w	r3, [r2, #1]!
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f9      	bne.n	8007770 <Network::Network()+0x8>
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	200016e4 	andcs	r1, r0, r4, ror #13
 8007784:	0800b0c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, sp, pc}

08007788 <Network::MacAddressCopyTo(unsigned char*)>:
 8007788:	4608      	mov	r0, r1
 800778a:	f001 b86b 	b.w	8008864 <mac_address_get>

0800778e <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 800778e:	b430      	push	{r4, r5}
 8007790:	b168      	cbz	r0, 80077ae <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8007792:	2300      	movs	r3, #0
 8007794:	7905      	ldrb	r5, [r0, #4]
 8007796:	5cd4      	ldrb	r4, [r2, r3]
 8007798:	b11c      	cbz	r4, 80077a2 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 800779a:	1c5c      	adds	r4, r3, #1
 800779c:	429d      	cmp	r5, r3
 800779e:	4623      	mov	r3, r4
 80077a0:	dcf9      	bgt.n	8007796 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 80077a2:	6804      	ldr	r4, [r0, #0]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	69e4      	ldr	r4, [r4, #28]
 80077a8:	46a4      	mov	ip, r4
 80077aa:	bc30      	pop	{r4, r5}
 80077ac:	4760      	bx	ip
 80077ae:	bc30      	pop	{r4, r5}
 80077b0:	4770      	bx	lr
	...

080077b4 <DisplayUdf::DisplayUdf()>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f000 f948 	bl	8007a4c <Display::Display()>
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <DisplayUdf::DisplayUdf()+0x20>)
 80077be:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80077c2:	601c      	str	r4, [r3, #0]
 80077c4:	2301      	movs	r3, #1
 80077c6:	f802 3b01 	strb.w	r3, [r2], #1
 80077ca:	3301      	adds	r3, #1
 80077cc:	2b15      	cmp	r3, #21
 80077ce:	d1fa      	bne.n	80077c6 <DisplayUdf::DisplayUdf()+0x12>
 80077d0:	4620      	mov	r0, r4
 80077d2:	bd10      	pop	{r4, pc}
 80077d4:	200016e8 	andcs	r1, r0, r8, ror #13

080077d8 <DisplayUdf::SetTitle(char const*, ...)>:
 80077d8:	b40e      	push	{r1, r2, r3}
 80077da:	b517      	push	{r0, r1, r2, r4, lr}
 80077dc:	ab05      	add	r3, sp, #20
 80077de:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e2:	4604      	mov	r4, r0
 80077e4:	211f      	movs	r1, #31
 80077e6:	301c      	adds	r0, #28
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	f7fa fdb3 	bl	8002354 <vsnprintf>
 80077ee:	2300      	movs	r3, #0
 80077f0:	4404      	add	r4, r0
 80077f2:	7723      	strb	r3, [r4, #28]
 80077f4:	b003      	add	sp, #12
 80077f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fa:	b003      	add	sp, #12
 80077fc:	4770      	bx	lr
	...

08007800 <DisplayUdf::Show()>:
 8007800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	21ff      	movs	r1, #255	; 0xff
 8007806:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800780a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800780e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007812:	2806      	cmp	r0, #6
 8007814:	bf88      	it	hi
 8007816:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 800781a:	4293      	cmp	r3, r2
 800781c:	d1f7      	bne.n	800780e <DisplayUdf::Show()+0xe>
 800781e:	2501      	movs	r5, #1
 8007820:	69a0      	ldr	r0, [r4, #24]
 8007822:	b118      	cbz	r0, 800782c <DisplayUdf::Show()+0x2c>
 8007824:	6803      	ldr	r3, [r0, #0]
 8007826:	4629      	mov	r1, r5
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	4798      	blx	r3
 800782c:	3501      	adds	r5, #1
 800782e:	b2ed      	uxtb	r5, r5
 8007830:	2d06      	cmp	r5, #6
 8007832:	d1f5      	bne.n	8007820 <DisplayUdf::Show()+0x20>
 8007834:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8007838:	69a0      	ldr	r0, [r4, #24]
 800783a:	f104 021c 	add.w	r2, r4, #28
 800783e:	f7ff ffa6 	bl	800778e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8007842:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8007846:	69a0      	ldr	r0, [r4, #24]
 8007848:	4a12      	ldr	r2, [pc, #72]	; (8007894 <DisplayUdf::Show()+0x94>)
 800784a:	f7ff ffa0 	bl	800778e <Display::Write(unsigned char, char const*) [clone .isra.0]>
 800784e:	4b12      	ldr	r3, [pc, #72]	; (8007898 <DisplayUdf::Show()+0x98>)
 8007850:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4620      	mov	r0, r4
 8007858:	2303      	movs	r3, #3
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <DisplayUdf::Show()+0x9c>)
 800785c:	f7f9 fdf4 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <DisplayUdf::Show()+0xa0>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	f891 20ab 	ldrb.w	r2, [r1, #171]	; 0xab
 8007868:	f891 30ac 	ldrb.w	r3, [r1, #172]	; 0xac
 800786c:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
 8007870:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007874:	f891 20a8 	ldrb.w	r2, [r1, #168]	; 0xa8
 8007878:	b29b      	uxth	r3, r3
 800787a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800787e:	b292      	uxth	r2, r2
 8007880:	9200      	str	r2, [sp, #0]
 8007882:	4620      	mov	r0, r4
 8007884:	4a07      	ldr	r2, [pc, #28]	; (80078a4 <DisplayUdf::Show()+0xa4>)
 8007886:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 800788a:	f7f9 fddd 	bl	8001448 <Display::Printf(unsigned char, char const*, ...)>
 800788e:	b003      	add	sp, #12
 8007890:	bd30      	pop	{r4, r5, pc}
 8007892:	bf00      	nop
 8007894:	0800a2c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, pc}
 8007898:	2000177c 	andcs	r1, r0, ip, ror r7
 800789c:	0800b0cc 	stmdaeq	r0, {r2, r3, r6, r7, ip, sp, pc}
 80078a0:	200001f4 	strdcs	r0, [r0], -r4
 80078a4:	0800b0db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, ip, sp, pc}

080078a8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80078a8:	1e4b      	subs	r3, r1, #1
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	b530      	push	{r4, r5, lr}
 80078ae:	d80f      	bhi.n	80078d0 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80078b0:	2300      	movs	r3, #0
 80078b2:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80078b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80078ba:	428d      	cmp	r5, r1
 80078bc:	d109      	bne.n	80078d2 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80078be:	1884      	adds	r4, r0, r2
 80078c0:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80078c4:	4403      	add	r3, r0
 80078c6:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80078ca:	4410      	add	r0, r2
 80078cc:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80078d0:	bd30      	pop	{r4, r5, pc}
 80078d2:	3301      	adds	r3, #1
 80078d4:	2b14      	cmp	r3, #20
 80078d6:	d1ee      	bne.n	80078b6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80078d8:	e7f7      	b.n	80078ca <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

080078da <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80078da:	b510      	push	{r4, lr}
 80078dc:	2220      	movs	r2, #32
 80078de:	4604      	mov	r4, r0
 80078e0:	f840 1b04 	str.w	r1, [r0], #4
 80078e4:	2100      	movs	r1, #0
 80078e6:	f000 fe53 	bl	8008590 <memset>
 80078ea:	f647 7305 	movw	r3, #32517	; 0x7f05
 80078ee:	4620      	mov	r0, r4
 80078f0:	84a3      	strh	r3, [r4, #36]	; 0x24
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <DisplayUdfParams::Load()>:
 80078f4:	b508      	push	{r3, lr}
 80078f6:	2300      	movs	r3, #0
 80078f8:	4601      	mov	r1, r0
 80078fa:	6043      	str	r3, [r0, #4]
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	b120      	cbz	r0, 800790a <DisplayUdfParams::Load()+0x16>
 8007900:	6803      	ldr	r3, [r0, #0]
 8007902:	3104      	adds	r1, #4
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	4798      	blx	r3
 8007908:	2001      	movs	r0, #1
 800790a:	bd08      	pop	{r3, pc}

0800790c <DisplayUdfParams::Set(DisplayUdf*)>:
 800790c:	6843      	ldr	r3, [r0, #4]
 800790e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007912:	009a      	lsls	r2, r3, #2
 8007914:	4604      	mov	r4, r0
 8007916:	460e      	mov	r6, r1
 8007918:	d506      	bpl.n	8007928 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800791a:	6988      	ldr	r0, [r1, #24]
 800791c:	b120      	cbz	r0, 8007928 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4798      	blx	r3
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	69b0      	ldr	r0, [r6, #24]
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	bf41      	itttt	mi
 8007930:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8007934:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8007938:	4353      	mulmi	r3, r2
 800793a:	6173      	strmi	r3, [r6, #20]
 800793c:	6861      	ldr	r1, [r4, #4]
 800793e:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8007942:	b110      	cbz	r0, 800794a <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8007944:	6803      	ldr	r3, [r0, #0]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	4798      	blx	r3
 800794a:	2500      	movs	r5, #0
 800794c:	2701      	movs	r7, #1
 800794e:	f104 0808 	add.w	r8, r4, #8
 8007952:	6862      	ldr	r2, [r4, #4]
 8007954:	fa07 f305 	lsl.w	r3, r7, r5
 8007958:	4393      	bics	r3, r2
 800795a:	d105      	bne.n	8007968 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 800795c:	462a      	mov	r2, r5
 800795e:	4630      	mov	r0, r6
 8007960:	f818 1005 	ldrb.w	r1, [r8, r5]
 8007964:	f7ff ffa0 	bl	80078a8 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8007968:	3501      	adds	r5, #1
 800796a:	2d14      	cmp	r5, #20
 800796c:	d1f1      	bne.n	8007952 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 800796e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007972 <DisplayUdfParams::Dump()>:
 8007972:	4770      	bx	lr

08007974 <Display::PrintInfo() [clone .isra.0]>:
 8007974:	b910      	cbnz	r0, 800797c <Display::PrintInfo() [clone .isra.0]+0x8>
 8007976:	4803      	ldr	r0, [pc, #12]	; (8007984 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8007978:	f7fa bcfc 	b.w	8002374 <puts>
 800797c:	6803      	ldr	r3, [r0, #0]
 800797e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007980:	4718      	bx	r3
 8007982:	bf00      	nop
 8007984:	0800b0eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, ip, sp, pc}

08007988 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8007988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798a:	460d      	mov	r5, r1
 800798c:	4604      	mov	r4, r0
 800798e:	f001 fded 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8007992:	4628      	mov	r0, r5
 8007994:	f001 fde2 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8007998:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800799c:	2b07      	cmp	r3, #7
 800799e:	d902      	bls.n	80079a6 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 80079a0:	3c50      	subs	r4, #80	; 0x50
 80079a2:	2c0f      	cmp	r4, #15
 80079a4:	d809      	bhi.n	80079ba <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 80079a6:	2101      	movs	r1, #1
 80079a8:	f10d 0007 	add.w	r0, sp, #7
 80079ac:	f001 fe4a 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 80079b0:	fab0 f080 	clz	r0, r0
 80079b4:	0940      	lsrs	r0, r0, #5
 80079b6:	b003      	add	sp, #12
 80079b8:	bd30      	pop	{r4, r5, pc}
 80079ba:	2100      	movs	r1, #0
 80079bc:	4608      	mov	r0, r1
 80079be:	f001 fddb 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 80079c2:	e7f5      	b.n	80079b0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080079c4 <Display::Detect7Segment()>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	68c1      	ldr	r1, [r0, #12]
 80079c8:	4604      	mov	r4, r0
 80079ca:	7a00      	ldrb	r0, [r0, #8]
 80079cc:	f7ff ffdc 	bl	8007988 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80079d0:	7460      	strb	r0, [r4, #17]
 80079d2:	b170      	cbz	r0, 80079f2 <Display::Detect7Segment()+0x2e>
 80079d4:	2200      	movs	r2, #0
 80079d6:	f104 0508 	add.w	r5, r4, #8
 80079da:	4611      	mov	r1, r2
 80079dc:	4628      	mov	r0, r5
 80079de:	f7fb f9b5 	bl	8002d4c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80079e2:	7c63      	ldrb	r3, [r4, #17]
 80079e4:	b12b      	cbz	r3, 80079f2 <Display::Detect7Segment()+0x2e>
 80079e6:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80079ea:	2112      	movs	r1, #18
 80079ec:	4628      	mov	r0, r5
 80079ee:	f7fb f9ad 	bl	8002d4c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80079f2:	bd38      	pop	{r3, r4, r5, pc}

080079f4 <Display::Detect(display::Type)>:
 80079f4:	2902      	cmp	r1, #2
 80079f6:	b538      	push	{r3, r4, r5, lr}
 80079f8:	4604      	mov	r4, r0
 80079fa:	d014      	beq.n	8007a26 <Display::Detect(display::Type)+0x32>
 80079fc:	2904      	cmp	r1, #4
 80079fe:	d01b      	beq.n	8007a38 <Display::Detect(display::Type)+0x44>
 8007a00:	69a0      	ldr	r0, [r4, #24]
 8007a02:	b168      	cbz	r0, 8007a20 <Display::Detect(display::Type)+0x2c>
 8007a04:	6803      	ldr	r3, [r0, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	69a0      	ldr	r0, [r4, #24]
 8007a0e:	b9ab      	cbnz	r3, 8007a3c <Display::Detect(display::Type)+0x48>
 8007a10:	b110      	cbz	r0, 8007a18 <Display::Detect(display::Type)+0x24>
 8007a12:	6803      	ldr	r3, [r0, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4798      	blx	r3
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61a3      	str	r3, [r4, #24]
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	2300      	movs	r3, #0
 8007a22:	6163      	str	r3, [r4, #20]
 8007a24:	e010      	b.n	8007a48 <Display::Detect(display::Type)+0x54>
 8007a26:	2018      	movs	r0, #24
 8007a28:	f000 fcf9 	bl	800841e <operator new(unsigned int)>
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	2100      	movs	r1, #0
 8007a30:	f000 f8a4 	bl	8007b7c <Ssd1306::Ssd1306(TOledPanel)>
 8007a34:	61a5      	str	r5, [r4, #24]
 8007a36:	e7e3      	b.n	8007a00 <Display::Detect(display::Type)+0xc>
 8007a38:	6001      	str	r1, [r0, #0]
 8007a3a:	e7e1      	b.n	8007a00 <Display::Detect(display::Type)+0xc>
 8007a3c:	6803      	ldr	r3, [r0, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4798      	blx	r3
 8007a42:	69a3      	ldr	r3, [r4, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0eb      	beq.n	8007a20 <Display::Detect(display::Type)+0x2c>
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a4c <Display::Display()>:
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	b510      	push	{r4, lr}
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <Display::Display()+0x44>)
 8007a54:	4604      	mov	r4, r0
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a0e      	ldr	r2, [pc, #56]	; (8007a94 <Display::Display()+0x48>)
 8007a5a:	6043      	str	r3, [r0, #4]
 8007a5c:	2321      	movs	r3, #33	; 0x21
 8007a5e:	7203      	strb	r3, [r0, #8]
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <Display::Display()+0x4c>)
 8007a62:	2102      	movs	r1, #2
 8007a64:	60c3      	str	r3, [r0, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007a6c:	8203      	strh	r3, [r0, #16]
 8007a6e:	4b0b      	ldr	r3, [pc, #44]	; (8007a9c <Display::Display()+0x50>)
 8007a70:	6018      	str	r0, [r3, #0]
 8007a72:	f7ff ffbf 	bl	80079f4 <Display::Detect(display::Type)>
 8007a76:	4620      	mov	r0, r4
 8007a78:	f7ff ffa4 	bl	80079c4 <Display::Detect7Segment()>
 8007a7c:	69a3      	ldr	r3, [r4, #24]
 8007a7e:	b10b      	cbz	r3, 8007a84 <Display::Display()+0x38>
 8007a80:	f000 f80e 	bl	8007aa0 <display::timeout::gpio_init()>
 8007a84:	69a0      	ldr	r0, [r4, #24]
 8007a86:	f7ff ff75 	bl	8007974 <Display::PrintInfo() [clone .isra.0]>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	bf00      	nop
 8007a90:	20001814 	andcs	r1, r0, r4, lsl r8
 8007a94:	000493e0 	andeq	r9, r4, r0, ror #7
 8007a98:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007a9c:	200016ec 	andcs	r1, r0, ip, ror #13

08007aa0 <display::timeout::gpio_init()>:
 8007aa0:	4770      	bx	lr

08007aa2 <display::timeout::gpio_renew()>:
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	4770      	bx	lr

08007aa6 <Ssd1306::~Ssd1306()>:
 8007aa6:	4770      	bx	lr

08007aa8 <Ssd1306::SetCursor(unsigned int)>:
 8007aa8:	4770      	bx	lr
	...

08007aac <Ssd1306::PrintInfo()>:
 8007aac:	b410      	push	{r4}
 8007aae:	4906      	ldr	r1, [pc, #24]	; (8007ac8 <Ssd1306::PrintInfo()+0x1c>)
 8007ab0:	7c44      	ldrb	r4, [r0, #17]
 8007ab2:	7903      	ldrb	r3, [r0, #4]
 8007ab4:	7942      	ldrb	r2, [r0, #5]
 8007ab6:	4805      	ldr	r0, [pc, #20]	; (8007acc <Ssd1306::PrintInfo()+0x20>)
 8007ab8:	2c00      	cmp	r4, #0
 8007aba:	bf08      	it	eq
 8007abc:	4601      	moveq	r1, r0
 8007abe:	4804      	ldr	r0, [pc, #16]	; (8007ad0 <Ssd1306::PrintInfo()+0x24>)
 8007ac0:	bc10      	pop	{r4}
 8007ac2:	f7fa bc1f 	b.w	8002304 <printf>
 8007ac6:	bf00      	nop
 8007ac8:	0800b0fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip, sp, pc}
 8007acc:	0800b103 	stmdaeq	r0, {r0, r1, r8, ip, sp, pc}
 8007ad0:	0800b10b 	stmdaeq	r0, {r0, r1, r3, r8, ip, sp, pc}

08007ad4 <Ssd1306::~Ssd1306()>:
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	f000 fc9d 	bl	8008416 <operator delete(void*)>
 8007adc:	4620      	mov	r0, r4
 8007ade:	bd10      	pop	{r4, pc}

08007ae0 <HAL_I2C::Setup()>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	7800      	ldrb	r0, [r0, #0]
 8007ae6:	f001 fd41 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8007aea:	6860      	ldr	r0, [r4, #4]
 8007aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af0:	f001 bd34 	b.w	800955c <gd32_i2c_set_baudrate(unsigned int)>

08007af4 <Ssd1306::PutChar(int)>:
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f1a1 0420 	sub.w	r4, r1, #32
 8007afa:	2c5f      	cmp	r4, #95	; 0x5f
 8007afc:	bf88      	it	hi
 8007afe:	2400      	movhi	r4, #0
 8007b00:	3008      	adds	r0, #8
 8007b02:	f7ff ffed 	bl	8007ae0 <HAL_I2C::Setup()>
 8007b06:	4804      	ldr	r0, [pc, #16]	; (8007b18 <Ssd1306::PutChar(int)+0x24>)
 8007b08:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007b0c:	4420      	add	r0, r4
 8007b0e:	2107      	movs	r1, #7
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	f001 bd30 	b.w	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007b18:	0800b120 	stmdaeq	r0, {r5, r8, ip, sp, pc}

08007b1c <Ssd1306::PutString(char const*)>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4605      	mov	r5, r0
 8007b20:	1e4c      	subs	r4, r1, #1
 8007b22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007b26:	b119      	cbz	r1, 8007b30 <Ssd1306::PutString(char const*)+0x14>
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff ffe3 	bl	8007af4 <Ssd1306::PutChar(int)>
 8007b2e:	e7f8      	b.n	8007b22 <Ssd1306::PutString(char const*)+0x6>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}

08007b32 <Ssd1306::Text(char const*, unsigned int)>:
 8007b32:	b570      	push	{r4, r5, r6, lr}
 8007b34:	7903      	ldrb	r3, [r0, #4]
 8007b36:	4605      	mov	r5, r0
 8007b38:	460c      	mov	r4, r1
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bf94      	ite	ls
 8007b3e:	18ce      	addls	r6, r1, r3
 8007b40:	188e      	addhi	r6, r1, r2
 8007b42:	42b4      	cmp	r4, r6
 8007b44:	d005      	beq.n	8007b52 <Ssd1306::Text(char const*, unsigned int)+0x20>
 8007b46:	4628      	mov	r0, r5
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	f7ff ffd2 	bl	8007af4 <Ssd1306::PutChar(int)>
 8007b50:	e7f7      	b.n	8007b42 <Ssd1306::Text(char const*, unsigned int)+0x10>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}

08007b54 <Ssd1306::InitMembers()>:
 8007b54:	7c03      	ldrb	r3, [r0, #16]
 8007b56:	b12b      	cbz	r3, 8007b64 <Ssd1306::InitMembers()+0x10>
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d908      	bls.n	8007b70 <Ssd1306::InitMembers()+0x1c>
 8007b5e:	f640 0315 	movw	r3, #2069	; 0x815
 8007b62:	e007      	b.n	8007b74 <Ssd1306::InitMembers()+0x20>
 8007b64:	f640 0315 	movw	r3, #2069	; 0x815
 8007b68:	8083      	strh	r3, [r0, #4]
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	6143      	str	r3, [r0, #20]
 8007b6e:	4770      	bx	lr
 8007b70:	f240 4315 	movw	r3, #1045	; 0x415
 8007b74:	8083      	strh	r3, [r0, #4]
 8007b76:	2304      	movs	r3, #4
 8007b78:	e7f8      	b.n	8007b6c <Ssd1306::InitMembers()+0x18>
	...

08007b7c <Ssd1306::Ssd1306(TOledPanel)>:
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007b7e:	b508      	push	{r3, lr}
 8007b80:	6002      	str	r2, [r0, #0]
 8007b82:	227f      	movs	r2, #127	; 0x7f
 8007b84:	80c2      	strh	r2, [r0, #6]
 8007b86:	223c      	movs	r2, #60	; 0x3c
 8007b88:	7202      	strb	r2, [r0, #8]
 8007b8a:	4a06      	ldr	r2, [pc, #24]	; (8007ba4 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007b8c:	7401      	strb	r1, [r0, #16]
 8007b8e:	60c2      	str	r2, [r0, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	7442      	strb	r2, [r0, #17]
 8007b94:	4a04      	ldr	r2, [pc, #16]	; (8007ba8 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8007b96:	6010      	str	r0, [r2, #0]
 8007b98:	f7ff ffdc 	bl	8007b54 <Ssd1306::InitMembers()>
 8007b9c:	bd08      	pop	{r3, pc}
 8007b9e:	bf00      	nop
 8007ba0:	0800b3f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, ip, sp, pc}
 8007ba4:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007ba8:	20001778 	andcs	r1, r0, r8, ror r7

08007bac <Ssd1306::SendCommand(unsigned char)>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b507      	push	{r0, r1, r2, lr}
 8007bb0:	3008      	adds	r0, #8
 8007bb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8007bb6:	f88d 1005 	strb.w	r1, [sp, #5]
 8007bba:	f7ff ff91 	bl	8007ae0 <HAL_I2C::Setup()>
 8007bbe:	2102      	movs	r1, #2
 8007bc0:	a801      	add	r0, sp, #4
 8007bc2:	f001 fcd9 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007bc6:	b003      	add	sp, #12
 8007bc8:	f85d fb04 	ldr.w	pc, [sp], #4

08007bcc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8007bcc:	2914      	cmp	r1, #20
 8007bce:	b570      	push	{r4, r5, r6, lr}
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	4616      	mov	r6, r2
 8007bd4:	d81c      	bhi.n	8007c10 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007bd6:	7943      	ldrb	r3, [r0, #5]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d919      	bls.n	8007c10 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007bdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007be0:	7c43      	ldrb	r3, [r0, #17]
 8007be2:	004c      	lsls	r4, r1, #1
 8007be4:	b2e4      	uxtb	r4, r4
 8007be6:	b10b      	cbz	r3, 8007bec <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8007be8:	3404      	adds	r4, #4
 8007bea:	b2e4      	uxtb	r4, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f004 010e 	and.w	r1, r4, #14
 8007bf2:	f7ff ffdb 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007bf6:	0921      	lsrs	r1, r4, #4
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f041 0110 	orr.w	r1, r1, #16
 8007bfe:	f7ff ffd5 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8007c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c0c:	f7ff bfce 	b.w	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007c10:	bd70      	pop	{r4, r5, r6, pc}

08007c12 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8007c12:	b570      	push	{r4, r5, r6, lr}
 8007c14:	4604      	mov	r4, r0
 8007c16:	4615      	mov	r5, r2
 8007c18:	461e      	mov	r6, r3
 8007c1a:	b171      	cbz	r1, 8007c3a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007c1c:	7943      	ldrb	r3, [r0, #5]
 8007c1e:	428b      	cmp	r3, r1
 8007c20:	d30b      	bcc.n	8007c3a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007c22:	3901      	subs	r1, #1
 8007c24:	b2ca      	uxtb	r2, r1
 8007c26:	2100      	movs	r1, #0
 8007c28:	f7ff ffd0 	bl	8007bcc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4620      	mov	r0, r4
 8007c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c36:	f7ff bf7c 	b.w	8007b32 <Ssd1306::Text(char const*, unsigned int)>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}

08007c3c <Ssd1306::ClearLine(unsigned char)>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4605      	mov	r5, r0
 8007c40:	b1b9      	cbz	r1, 8007c72 <Ssd1306::ClearLine(unsigned char)+0x36>
 8007c42:	7943      	ldrb	r3, [r0, #5]
 8007c44:	428b      	cmp	r3, r1
 8007c46:	d314      	bcc.n	8007c72 <Ssd1306::ClearLine(unsigned char)+0x36>
 8007c48:	3901      	subs	r1, #1
 8007c4a:	b2cc      	uxtb	r4, r1
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f7ff ffbc 	bl	8007bcc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007c54:	f105 0008 	add.w	r0, r5, #8
 8007c58:	f7ff ff42 	bl	8007ae0 <HAL_I2C::Setup()>
 8007c5c:	2181      	movs	r1, #129	; 0x81
 8007c5e:	4805      	ldr	r0, [pc, #20]	; (8007c74 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8007c60:	f001 fc8a 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007c64:	4622      	mov	r2, r4
 8007c66:	4628      	mov	r0, r5
 8007c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f7ff bfad 	b.w	8007bcc <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200016f0 	strdcs	r1, [r0], -r0

08007c78 <Ssd1306::SetSleep(bool)>:
 8007c78:	b111      	cbz	r1, 8007c80 <Ssd1306::SetSleep(bool)+0x8>
 8007c7a:	21ae      	movs	r1, #174	; 0xae
 8007c7c:	f7ff bf96 	b.w	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007c80:	21af      	movs	r1, #175	; 0xaf
 8007c82:	e7fb      	b.n	8007c7c <Ssd1306::SetSleep(bool)+0x4>

08007c84 <Ssd1306::SetContrast(unsigned char)>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4604      	mov	r4, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	7181      	strb	r1, [r0, #6]
 8007c8c:	2181      	movs	r1, #129	; 0x81
 8007c8e:	f7ff ff8d 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007c92:	4629      	mov	r1, r5
 8007c94:	4620      	mov	r0, r4
 8007c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9a:	f7ff bf87 	b.w	8007bac <Ssd1306::SendCommand(unsigned char)>

08007c9e <Ssd1306::SetFlipVertically(bool)>:
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	71c1      	strb	r1, [r0, #7]
 8007ca4:	b141      	cbz	r1, 8007cb8 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8007ca6:	21c0      	movs	r1, #192	; 0xc0
 8007ca8:	f7ff ff80 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007cac:	21a0      	movs	r1, #160	; 0xa0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb4:	f7ff bf7a 	b.w	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007cb8:	21c8      	movs	r1, #200	; 0xc8
 8007cba:	f7ff ff77 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007cbe:	21a1      	movs	r1, #161	; 0xa1
 8007cc0:	e7f5      	b.n	8007cae <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08007cc4 <Ssd1306::CheckSH1106()>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	b086      	sub	sp, #24
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f7ff ff6e 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007cd0:	2190      	movs	r1, #144	; 0x90
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff ff6a 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007cd8:	21b0      	movs	r1, #176	; 0xb0
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7ff ff66 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007ce0:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <Ssd1306::CheckSH1106()+0xa8>)
 8007ce2:	f104 0608 	add.w	r6, r4, #8
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	791b      	ldrb	r3, [r3, #4]
 8007cea:	ad02      	add	r5, sp, #8
 8007cec:	9002      	str	r0, [sp, #8]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	712b      	strb	r3, [r5, #4]
 8007cf2:	f7ff fef5 	bl	8007ae0 <HAL_I2C::Setup()>
 8007cf6:	2105      	movs	r1, #5
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f001 fc3d 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff ff53 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007d06:	2190      	movs	r1, #144	; 0x90
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff ff4f 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007d0e:	21b0      	movs	r1, #176	; 0xb0
 8007d10:	4620      	mov	r0, r4
 8007d12:	f7ff ff4b 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007d16:	2300      	movs	r3, #0
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	f88d 3014 	strb.w	r3, [sp, #20]
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	4630      	mov	r0, r6
 8007d22:	f88d 3007 	strb.w	r3, [sp, #7]
 8007d26:	f7ff fedb 	bl	8007ae0 <HAL_I2C::Setup()>
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	f10d 0007 	add.w	r0, sp, #7
 8007d30:	f001 fc22 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff fed3 	bl	8007ae0 <HAL_I2C::Setup()>
 8007d3a:	2105      	movs	r1, #5
 8007d3c:	a804      	add	r0, sp, #16
 8007d3e:	f001 fc81 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8007d42:	2201      	movs	r2, #1
 8007d44:	5cab      	ldrb	r3, [r5, r2]
 8007d46:	a904      	add	r1, sp, #16
 8007d48:	3201      	adds	r2, #1
 8007d4a:	4411      	add	r1, r2
 8007d4c:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8007d50:	428b      	cmp	r3, r1
 8007d52:	d006      	beq.n	8007d62 <Ssd1306::CheckSH1106()+0x9e>
 8007d54:	1a5b      	subs	r3, r3, r1
 8007d56:	fab3 f383 	clz	r3, r3
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	7463      	strb	r3, [r4, #17]
 8007d5e:	b006      	add	sp, #24
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	2a05      	cmp	r2, #5
 8007d64:	d1ee      	bne.n	8007d44 <Ssd1306::CheckSH1106()+0x80>
 8007d66:	2300      	movs	r3, #0
 8007d68:	e7f5      	b.n	8007d56 <Ssd1306::CheckSH1106()+0x92>
 8007d6a:	bf00      	nop
 8007d6c:	0800b117 	stmdaeq	r0, {r0, r1, r2, r4, r8, ip, sp, pc}

08007d70 <Ssd1306::Cls()>:
 8007d70:	7c43      	ldrb	r3, [r0, #17]
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2500      	moveq	r5, #0
 8007d7c:	2504      	movne	r5, #4
 8007d7e:	4604      	mov	r4, r0
 8007d80:	2600      	movs	r6, #0
 8007d82:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8007d86:	f045 0810 	orr.w	r8, r5, #16
 8007d8a:	b2ff      	uxtb	r7, r7
 8007d8c:	6963      	ldr	r3, [r4, #20]
 8007d8e:	4629      	mov	r1, r5
 8007d90:	42b3      	cmp	r3, r6
 8007d92:	4620      	mov	r0, r4
 8007d94:	d91b      	bls.n	8007dce <Ssd1306::Cls()+0x5e>
 8007d96:	f7ff ff09 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f7ff ff05 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007da2:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007da6:	4620      	mov	r0, r4
 8007da8:	b2c9      	uxtb	r1, r1
 8007daa:	f7ff feff 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007dae:	7c23      	ldrb	r3, [r4, #16]
 8007db0:	b123      	cbz	r3, 8007dbc <Ssd1306::Cls()+0x4c>
 8007db2:	3b01      	subs	r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d901      	bls.n	8007dbc <Ssd1306::Cls()+0x4c>
 8007db8:	3601      	adds	r6, #1
 8007dba:	e7e7      	b.n	8007d8c <Ssd1306::Cls()+0x1c>
 8007dbc:	f104 0008 	add.w	r0, r4, #8
 8007dc0:	f7ff fe8e 	bl	8007ae0 <HAL_I2C::Setup()>
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4808      	ldr	r0, [pc, #32]	; (8007de8 <Ssd1306::Cls()+0x78>)
 8007dc8:	f001 fbd6 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007dcc:	e7f4      	b.n	8007db8 <Ssd1306::Cls()+0x48>
 8007dce:	f7ff feed 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff fee9 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007de0:	21b0      	movs	r1, #176	; 0xb0
 8007de2:	f7ff bee3 	b.w	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007de6:	bf00      	nop
 8007de8:	200016f0 	strdcs	r1, [r0], -r0

08007dec <Ssd1306::Start()>:
 8007dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dee:	7a04      	ldrb	r4, [r0, #8]
 8007df0:	68c6      	ldr	r6, [r0, #12]
 8007df2:	4605      	mov	r5, r0
 8007df4:	4620      	mov	r0, r4
 8007df6:	f001 fbb9 	bl	800956c <gd32_i2c_set_address(unsigned char)>
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f001 fbae 	bl	800955c <gd32_i2c_set_baudrate(unsigned int)>
 8007e00:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d902      	bls.n	8007e0e <Ssd1306::Start()+0x22>
 8007e08:	3c50      	subs	r4, #80	; 0x50
 8007e0a:	2c0f      	cmp	r4, #15
 8007e0c:	d80f      	bhi.n	8007e2e <Ssd1306::Start()+0x42>
 8007e0e:	2101      	movs	r1, #1
 8007e10:	f10d 0007 	add.w	r0, sp, #7
 8007e14:	f001 fc16 	bl	8009644 <gd32_i2c_read(char*, unsigned int)>
 8007e18:	fab0 f480 	clz	r4, r0
 8007e1c:	0964      	lsrs	r4, r4, #5
 8007e1e:	b35c      	cbz	r4, 8007e78 <Ssd1306::Start()+0x8c>
 8007e20:	7c2e      	ldrb	r6, [r5, #16]
 8007e22:	b14e      	cbz	r6, 8007e38 <Ssd1306::Start()+0x4c>
 8007e24:	3e01      	subs	r6, #1
 8007e26:	2e01      	cmp	r6, #1
 8007e28:	d929      	bls.n	8007e7e <Ssd1306::Start()+0x92>
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	e024      	b.n	8007e78 <Ssd1306::Start()+0x8c>
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4608      	mov	r0, r1
 8007e32:	f001 fba1 	bl	8009578 <gd32_i2c_write(char const*, unsigned int)>
 8007e36:	e7ef      	b.n	8007e18 <Ssd1306::Start()+0x2c>
 8007e38:	4f16      	ldr	r7, [pc, #88]	; (8007e94 <Ssd1306::Start()+0xa8>)
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e40:	3601      	adds	r6, #1
 8007e42:	f7ff feb3 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007e46:	2e18      	cmp	r6, #24
 8007e48:	d1f7      	bne.n	8007e3a <Ssd1306::Start()+0x4e>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <Ssd1306::Start()+0xac>)
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4611      	mov	r1, r2
 8007e52:	3301      	adds	r3, #1
 8007e54:	2b86      	cmp	r3, #134	; 0x86
 8007e56:	f802 0b01 	strb.w	r0, [r2], #1
 8007e5a:	d1fa      	bne.n	8007e52 <Ssd1306::Start()+0x66>
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	4628      	mov	r0, r5
 8007e60:	700b      	strb	r3, [r1, #0]
 8007e62:	f7ff ff2f 	bl	8007cc4 <Ssd1306::CheckSH1106()>
 8007e66:	4628      	mov	r0, r5
 8007e68:	f7ff ff82 	bl	8007d70 <Ssd1306::Cls()>
 8007e6c:	21af      	movs	r1, #175	; 0xaf
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f7ff fe9c 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007e74:	2301      	movs	r3, #1
 8007e76:	71eb      	strb	r3, [r5, #7]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	b003      	add	sp, #12
 8007e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7e:	2600      	movs	r6, #0
 8007e80:	4f06      	ldr	r7, [pc, #24]	; (8007e9c <Ssd1306::Start()+0xb0>)
 8007e82:	4628      	mov	r0, r5
 8007e84:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e88:	3601      	adds	r6, #1
 8007e8a:	f7ff fe8f 	bl	8007bac <Ssd1306::SendCommand(unsigned char)>
 8007e8e:	2e18      	cmp	r6, #24
 8007e90:	d1f7      	bne.n	8007e82 <Ssd1306::Start()+0x96>
 8007e92:	e7da      	b.n	8007e4a <Ssd1306::Start()+0x5e>
 8007e94:	0800b3d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, sp, pc}
 8007e98:	200016f0 	strdcs	r1, [r0], -r0
 8007e9c:	0800b3c0 	stmdaeq	r0, {r6, r7, r8, r9, ip, sp, pc}

08007ea0 <console_putc>:
 8007ea0:	f000 bcb0 	b.w	8008804 <uart0_putc>

08007ea4 <console_puts>:
 8007ea4:	f000 bcce 	b.w	8008844 <uart0_puts>

08007ea8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8007ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eac:	4617      	mov	r7, r2
 8007eae:	461e      	mov	r6, r3
 8007eb0:	4d14      	ldr	r5, [pc, #80]	; (8007f04 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	6018      	str	r0, [r3, #0]
 8007eb8:	4604      	mov	r4, r0
 8007eba:	f105 0803 	add.w	r8, r5, #3
 8007ebe:	2203      	movs	r2, #3
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 fb4e 	bl	8008562 <memmove>
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	220b      	movs	r2, #11
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f000 fb49 	bl	8008562 <memmove>
 8007ed0:	f105 030e 	add.w	r3, r5, #14
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fb42 	bl	8008562 <memmove>
 8007ede:	2308      	movs	r3, #8
 8007ee0:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8007ee4:	230b      	movs	r3, #11
 8007ee6:	9302      	str	r3, [sp, #8]
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8007eea:	9005      	str	r0, [sp, #20]
 8007eec:	e9cd 5300 	strd	r5, r3, [sp]
 8007ef0:	213f      	movs	r1, #63	; 0x3f
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8007ef6:	4807      	ldr	r0, [pc, #28]	; (8007f14 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007ef8:	f7fa fa14 	bl	8002324 <snprintf>
 8007efc:	4620      	mov	r0, r4
 8007efe:	b006      	add	sp, #24
 8007f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f04:	2000177c 	andcs	r1, r0, ip, ror r7
 8007f08:	200017d4 	ldrdcs	r1, [r0], -r4
 8007f0c:	0800a2c4 	stmdaeq	r0, {r2, r6, r7, r9, sp, pc}
 8007f10:	0800b43c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp, pc}
 8007f14:	20001792 	mulcs	r0, r2, r7

08007f18 <FirmwareVersion::Print(char const*)>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	4804      	ldr	r0, [pc, #16]	; (8007f30 <FirmwareVersion::Print(char const*)+0x18>)
 8007f1e:	f7fa fa29 	bl	8002374 <puts>
 8007f22:	b124      	cbz	r4, 8007f2e <FirmwareVersion::Print(char const*)+0x16>
 8007f24:	4620      	mov	r0, r4
 8007f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2a:	f7fa ba23 	b.w	8002374 <puts>
 8007f2e:	bd10      	pop	{r4, pc}
 8007f30:	20001792 	mulcs	r0, r2, r7

08007f34 <LedBlink::LedBlink()>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	2205      	movs	r2, #5
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e9c0 3200 	strd	r3, r2, [r0]
 8007f3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f42:	6083      	str	r3, [r0, #8]
 8007f44:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8007f48:	6143      	str	r3, [r0, #20]
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <LedBlink::LedBlink()+0x3c>)
 8007f4c:	4d09      	ldr	r5, [pc, #36]	; (8007f74 <LedBlink::LedBlink()+0x40>)
 8007f4e:	4604      	mov	r4, r0
 8007f50:	6018      	str	r0, [r3, #0]
 8007f52:	f240 6004 	movw	r0, #1540	; 0x604
 8007f56:	f000 fefb 	bl	8008d50 <rcu_periph_clock_enable>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	2203      	movs	r2, #3
 8007f60:	2110      	movs	r1, #16
 8007f62:	f000 fe63 	bl	8008c2c <gpio_init>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	616b      	str	r3, [r5, #20]
 8007f6c:	bd38      	pop	{r3, r4, r5, pc}
 8007f6e:	bf00      	nop
 8007f70:	200017d8 	ldrdcs	r1, [r0], -r8
 8007f74:	40011000 	andmi	r1, r1, r0

08007f78 <LedBlink::SetMode(ledblink::Mode)>:
 8007f78:	6843      	ldr	r3, [r0, #4]
 8007f7a:	428b      	cmp	r3, r1
 8007f7c:	d02f      	beq.n	8007fde <LedBlink::SetMode(ledblink::Mode)+0x66>
 8007f7e:	6041      	str	r1, [r0, #4]
 8007f80:	2904      	cmp	r1, #4
 8007f82:	d822      	bhi.n	8007fca <LedBlink::SetMode(ledblink::Mode)+0x52>
 8007f84:	e8df f001 	tbb	[pc, r1]
 8007f88:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8007f8c:	23ff001d 	mvnscs	r0, #29
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	2300      	movs	r3, #0
 8007f94:	2201      	movs	r2, #1
 8007f96:	60c3      	str	r3, [r0, #12]
 8007f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f9c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	6880      	ldr	r0, [r0, #8]
 8007fa4:	b1d8      	cbz	r0, 8007fde <LedBlink::SetMode(ledblink::Mode)+0x66>
 8007fa6:	6803      	ldr	r3, [r0, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4718      	bx	r3
 8007fac:	2301      	movs	r3, #1
 8007fae:	6003      	str	r3, [r0, #0]
 8007fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fb4:	60c3      	str	r3, [r0, #12]
 8007fb6:	e7f4      	b.n	8007fa2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8007fb8:	2303      	movs	r3, #3
 8007fba:	6003      	str	r3, [r0, #0]
 8007fbc:	f240 134d 	movw	r3, #333	; 0x14d
 8007fc0:	e7f8      	b.n	8007fb4 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8007fc2:	2305      	movs	r3, #5
 8007fc4:	6003      	str	r3, [r0, #0]
 8007fc6:	23c8      	movs	r3, #200	; 0xc8
 8007fc8:	e7f4      	b.n	8007fb4 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2201      	movs	r2, #1
 8007fce:	6003      	str	r3, [r0, #0]
 8007fd0:	60c3      	str	r3, [r0, #12]
 8007fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007fda:	615a      	str	r2, [r3, #20]
 8007fdc:	e7e1      	b.n	8007fa2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8007fde:	4770      	bx	lr

08007fe0 <Hardware::Hardware()>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	b090      	sub	sp, #64	; 0x40
 8007fe8:	f000 f8d4 	bl	8008194 <HwClock::HwClock()>
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <Hardware::Hardware()+0xb4>)
 8007fee:	4e2a      	ldr	r6, [pc, #168]	; (8008098 <Hardware::Hardware()+0xb8>)
 8007ff0:	60e5      	str	r5, [r4, #12]
 8007ff2:	7425      	strb	r5, [r4, #16]
 8007ff4:	601c      	str	r4, [r3, #0]
 8007ff6:	f7f8 f89b 	bl	8000130 <console_init>
 8007ffa:	f000 fc45 	bl	8008888 <systick_config>
 8007ffe:	f001 fd45 	bl	8009a8c <udelay_init()>
 8008002:	f001 fd41 	bl	8009a88 <micros_init()>
 8008006:	f240 7004 	movw	r0, #1796	; 0x704
 800800a:	f000 fea1 	bl	8008d50 <rcu_periph_clock_enable>
 800800e:	4630      	mov	r0, r6
 8008010:	f001 f80e 	bl	8009030 <timer_deinit>
 8008014:	236b      	movs	r3, #107	; 0x6b
 8008016:	f8ad 300c 	strh.w	r3, [sp, #12]
 800801a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800801e:	a903      	add	r1, sp, #12
 8008020:	4630      	mov	r0, r6
 8008022:	9305      	str	r3, [sp, #20]
 8008024:	f001 f866 	bl	80090f4 <timer_init>
 8008028:	4630      	mov	r0, r6
 800802a:	f001 f8bb 	bl	80091a4 <timer_enable>
 800802e:	f001 f9c9 	bl	80093c4 <gd32_adc_init()>
 8008032:	2219      	movs	r2, #25
 8008034:	2301      	movs	r3, #1
 8008036:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800803a:	237a      	movs	r3, #122	; 0x7a
 800803c:	a807      	add	r0, sp, #28
 800803e:	930c      	str	r3, [sp, #48]	; 0x30
 8008040:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008044:	9507      	str	r5, [sp, #28]
 8008046:	950f      	str	r5, [sp, #60]	; 0x3c
 8008048:	f000 fb32 	bl	80086b0 <mktime>
 800804c:	4629      	mov	r1, r5
 800804e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8008052:	a801      	add	r0, sp, #4
 8008054:	f000 fba2 	bl	800879c <settimeofday>
 8008058:	f240 701b 	movw	r0, #1819	; 0x71b
 800805c:	f000 fe78 	bl	8008d50 <rcu_periph_clock_enable>
 8008060:	f240 701c 	movw	r0, #1820	; 0x71c
 8008064:	f000 fe74 	bl	8008d50 <rcu_periph_clock_enable>
 8008068:	f000 fe6a 	bl	8008d40 <pmu_backup_write_enable>
 800806c:	f000 fc9a 	bl	80089a4 <bkp_deinit>
 8008070:	4629      	mov	r1, r5
 8008072:	2002      	movs	r0, #2
 8008074:	f000 fc9e 	bl	80089b4 <bkp_data_write>
 8008078:	f001 fa42 	bl	8009500 <gd32_i2c_begin()>
 800807c:	4620      	mov	r0, r4
 800807e:	f000 f983 	bl	8008388 <HwClock::RtcProbe()>
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f892 	bl	80081ac <HwClock::Print()>
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f8c3 	bl	8008214 <HwClock::HcToSys()>
 800808e:	4620      	mov	r0, r4
 8008090:	b010      	add	sp, #64	; 0x40
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	200017dc 	ldrdcs	r1, [r0], -ip
 8008098:	40001000 	andmi	r1, r0, r0

0800809c <Hardware::SetTime(tm const*)>:
 800809c:	b500      	push	{lr}
 800809e:	680b      	ldr	r3, [r1, #0]
 80080a0:	b08b      	sub	sp, #44	; 0x2c
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	684b      	ldr	r3, [r1, #4]
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	688b      	ldr	r3, [r1, #8]
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	68cb      	ldr	r3, [r1, #12]
 80080ae:	9304      	str	r3, [sp, #16]
 80080b0:	690b      	ldr	r3, [r1, #16]
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	694b      	ldr	r3, [r1, #20]
 80080b6:	a901      	add	r1, sp, #4
 80080b8:	9306      	str	r3, [sp, #24]
 80080ba:	f000 f90d 	bl	80082d8 <HwClock::Set(rtc_time const*)>
 80080be:	2001      	movs	r0, #1
 80080c0:	b00b      	add	sp, #44	; 0x2c
 80080c2:	f85d fb04 	ldr.w	pc, [sp], #4

080080c6 <Hardware::GetTime(tm*)>:
 80080c6:	b513      	push	{r0, r1, r4, lr}
 80080c8:	2000      	movs	r0, #0
 80080ca:	460c      	mov	r4, r1
 80080cc:	f000 fb7e 	bl	80087cc <time>
 80080d0:	9001      	str	r0, [sp, #4]
 80080d2:	a801      	add	r0, sp, #4
 80080d4:	f000 faa8 	bl	8008628 <localtime>
 80080d8:	6943      	ldr	r3, [r0, #20]
 80080da:	6163      	str	r3, [r4, #20]
 80080dc:	6903      	ldr	r3, [r0, #16]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	68c3      	ldr	r3, [r0, #12]
 80080e2:	60e3      	str	r3, [r4, #12]
 80080e4:	6883      	ldr	r3, [r0, #8]
 80080e6:	60a3      	str	r3, [r4, #8]
 80080e8:	6843      	ldr	r3, [r0, #4]
 80080ea:	6063      	str	r3, [r4, #4]
 80080ec:	6803      	ldr	r3, [r0, #0]
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	b002      	add	sp, #8
 80080f2:	bd10      	pop	{r4, pc}

080080f4 <Hardware::Reboot()>:
 80080f4:	b508      	push	{r3, lr}
 80080f6:	68c3      	ldr	r3, [r0, #12]
 80080f8:	4604      	mov	r4, r0
 80080fa:	b153      	cbz	r3, 8008112 <Hardware::Reboot()+0x1e>
 80080fc:	2300      	movs	r3, #0
 80080fe:	2104      	movs	r1, #4
 8008100:	7403      	strb	r3, [r0, #16]
 8008102:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008106:	f000 fd67 	bl	8008bd8 <fwdgt_config>
 800810a:	68e0      	ldr	r0, [r4, #12]
 800810c:	6803      	ldr	r3, [r0, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	4798      	blx	r3
 8008112:	2102      	movs	r1, #2
 8008114:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008118:	f000 fd5e 	bl	8008bd8 <fwdgt_config>
 800811c:	2801      	cmp	r0, #1
 800811e:	bf0c      	ite	eq
 8008120:	2301      	moveq	r3, #1
 8008122:	2300      	movne	r3, #0
 8008124:	7423      	strb	r3, [r4, #16]
 8008126:	d101      	bne.n	800812c <Hardware::Reboot()+0x38>
 8008128:	f000 fd46 	bl	8008bb8 <fwdgt_enable>
 800812c:	2208      	movs	r2, #8
 800812e:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <Hardware::Reboot()+0x70>)
 8008130:	2501      	movs	r5, #1
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	480c      	ldr	r0, [pc, #48]	; (8008168 <Hardware::Reboot()+0x74>)
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	227d      	movs	r2, #125	; 0x7d
 800813a:	490c      	ldr	r1, [pc, #48]	; (800816c <Hardware::Reboot()+0x78>)
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	68dc      	ldr	r4, [r3, #12]
 8008140:	b904      	cbnz	r4, 8008144 <Hardware::Reboot()+0x50>
 8008142:	e7fe      	b.n	8008142 <Hardware::Reboot()+0x4e>
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	695e      	ldr	r6, [r3, #20]
 8008148:	1b92      	subs	r2, r2, r6
 800814a:	4294      	cmp	r4, r2
 800814c:	d8f8      	bhi.n	8008140 <Hardware::Reboot()+0x4c>
 800814e:	6802      	ldr	r2, [r0, #0]
 8008150:	615a      	str	r2, [r3, #20]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	2a01      	cmp	r2, #1
 8008156:	f082 0401 	eor.w	r4, r2, #1
 800815a:	611c      	str	r4, [r3, #16]
 800815c:	bf14      	ite	ne
 800815e:	610d      	strne	r5, [r1, #16]
 8008160:	614a      	streq	r2, [r1, #20]
 8008162:	e7ec      	b.n	800813e <Hardware::Reboot()+0x4a>
 8008164:	200017d8 	ldrdcs	r1, [r0], -r8
 8008168:	20001814 	andcs	r1, r0, r4, lsl r8
 800816c:	40011000 	andmi	r1, r1, r0

08008170 <Hardware::WatchdogInit()>:
 8008170:	b510      	push	{r4, lr}
 8008172:	2102      	movs	r1, #2
 8008174:	4604      	mov	r4, r0
 8008176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800817a:	f000 fd2d 	bl	8008bd8 <fwdgt_config>
 800817e:	2801      	cmp	r0, #1
 8008180:	bf0c      	ite	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	2300      	movne	r3, #0
 8008186:	7423      	strb	r3, [r4, #16]
 8008188:	d103      	bne.n	8008192 <Hardware::WatchdogInit()+0x22>
 800818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818e:	f000 bd13 	b.w	8008bb8 <fwdgt_enable>
 8008192:	bd10      	pop	{r4, pc}

08008194 <HwClock::HwClock()>:
 8008194:	2200      	movs	r2, #0
 8008196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800819a:	e9c0 2200 	strd	r2, r2, [r0]
 800819e:	7282      	strb	r2, [r0, #10]
 80081a0:	4a01      	ldr	r2, [pc, #4]	; (80081a8 <HwClock::HwClock()+0x14>)
 80081a2:	8101      	strh	r1, [r0, #8]
 80081a4:	6010      	str	r0, [r2, #0]
 80081a6:	4770      	bx	lr
 80081a8:	200017e0 	andcs	r1, r0, r0, ror #15

080081ac <HwClock::Print()>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	7a83      	ldrb	r3, [r0, #10]
 80081b0:	4604      	mov	r4, r0
 80081b2:	b08e      	sub	sp, #56	; 0x38
 80081b4:	b92b      	cbnz	r3, 80081c2 <HwClock::Print()+0x16>
 80081b6:	4812      	ldr	r0, [pc, #72]	; (8008200 <HwClock::Print()+0x54>)
 80081b8:	b00e      	add	sp, #56	; 0x38
 80081ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081be:	f7fa b8d9 	b.w	8002374 <puts>
 80081c2:	7a43      	ldrb	r3, [r0, #9]
 80081c4:	480f      	ldr	r0, [pc, #60]	; (8008204 <HwClock::Print()+0x58>)
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	bf96      	itet	ls
 80081ca:	4a0f      	ldrls	r2, [pc, #60]	; (8008208 <HwClock::Print()+0x5c>)
 80081cc:	490f      	ldrhi	r1, [pc, #60]	; (800820c <HwClock::Print()+0x60>)
 80081ce:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 80081d2:	f7fa f897 	bl	8002304 <printf>
 80081d6:	a905      	add	r1, sp, #20
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 f907 	bl	80083ec <HwClock::RtcGet(rtc_time*)>
 80081de:	9b05      	ldr	r3, [sp, #20]
 80081e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081e2:	9302      	str	r3, [sp, #8]
 80081e4:	9b06      	ldr	r3, [sp, #24]
 80081e6:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	4808      	ldr	r0, [pc, #32]	; (8008210 <HwClock::Print()+0x64>)
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80081f6:	3201      	adds	r2, #1
 80081f8:	f7fa f884 	bl	8002304 <printf>
 80081fc:	b00e      	add	sp, #56	; 0x38
 80081fe:	bd10      	pop	{r4, pc}
 8008200:	0800b460 	stmdaeq	r0, {r5, r6, sl, ip, sp, pc}
 8008204:	08009f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, pc}
 8008208:	0800b4b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, sp, pc}
 800820c:	0800ae02 	stmdaeq	r0, {r1, r9, sl, fp, sp, pc}
 8008210:	0800b471 	stmdaeq	r0, {r0, r4, r5, r6, sl, ip, sp, pc}

08008214 <HwClock::HcToSys()>:
 8008214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008218:	7a83      	ldrb	r3, [r0, #10]
 800821a:	4604      	mov	r4, r0
 800821c:	b0a3      	sub	sp, #140	; 0x8c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d050      	beq.n	80082c4 <HwClock::HcToSys()+0xb0>
 8008222:	4e2b      	ldr	r6, [pc, #172]	; (80082d0 <HwClock::HcToSys()+0xbc>)
 8008224:	6833      	ldr	r3, [r6, #0]
 8008226:	7c1d      	ldrb	r5, [r3, #16]
 8008228:	b135      	cbz	r5, 8008238 <HwClock::HcToSys()+0x24>
 800822a:	2200      	movs	r2, #0
 800822c:	2104      	movs	r1, #4
 800822e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008232:	741a      	strb	r2, [r3, #16]
 8008234:	f000 fcd0 	bl	8008bd8 <fwdgt_config>
 8008238:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800823c:	a907      	add	r1, sp, #28
 800823e:	4620      	mov	r0, r4
 8008240:	f000 f8d4 	bl	80083ec <HwClock::RtcGet(rtc_time*)>
 8008244:	2100      	movs	r1, #0
 8008246:	a801      	add	r0, sp, #4
 8008248:	f000 fa7e 	bl	8008748 <gettimeofday>
 800824c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008250:	fb08 2903 	mla	r9, r8, r3, r2
 8008254:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	a819      	add	r0, sp, #100	; 0x64
 800825c:	931b      	str	r3, [sp, #108]	; 0x6c
 800825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008260:	931c      	str	r3, [sp, #112]	; 0x70
 8008262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008264:	931d      	str	r3, [sp, #116]	; 0x74
 8008266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008268:	931e      	str	r3, [sp, #120]	; 0x78
 800826a:	f000 fa21 	bl	80086b0 <mktime>
 800826e:	4607      	mov	r7, r0
 8008270:	4620      	mov	r0, r4
 8008272:	a910      	add	r1, sp, #64	; 0x40
 8008274:	f000 f8ba 	bl	80083ec <HwClock::RtcGet(rtc_time*)>
 8008278:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800827c:	fb08 3302 	mla	r3, r8, r2, r3
 8008280:	4599      	cmp	r9, r3
 8008282:	d0f5      	beq.n	8008270 <HwClock::HcToSys()+0x5c>
 8008284:	2100      	movs	r1, #0
 8008286:	a803      	add	r0, sp, #12
 8008288:	f000 fa5e 	bl	8008748 <gettimeofday>
 800828c:	9a03      	ldr	r2, [sp, #12]
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	9705      	str	r7, [sp, #20]
 8008292:	429a      	cmp	r2, r3
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	9a02      	ldr	r2, [sp, #8]
 8008298:	d106      	bne.n	80082a8 <HwClock::HcToSys()+0x94>
 800829a:	1a9b      	subs	r3, r3, r2
 800829c:	f5c3 2374 	rsb	r3, r3, #999424	; 0xf4000
 80082a0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	e002      	b.n	80082ae <HwClock::HcToSys()+0x9a>
 80082a8:	1a99      	subs	r1, r3, r2
 80082aa:	d40e      	bmi.n	80082ca <HwClock::HcToSys()+0xb6>
 80082ac:	9106      	str	r1, [sp, #24]
 80082ae:	2100      	movs	r1, #0
 80082b0:	a805      	add	r0, sp, #20
 80082b2:	f000 fa73 	bl	800879c <settimeofday>
 80082b6:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <HwClock::HcToSys()+0xc0>)
 80082b8:	6830      	ldr	r0, [r6, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6063      	str	r3, [r4, #4]
 80082be:	b10d      	cbz	r5, 80082c4 <HwClock::HcToSys()+0xb0>
 80082c0:	f7ff ff56 	bl	8008170 <Hardware::WatchdogInit()>
 80082c4:	b023      	add	sp, #140	; 0x8c
 80082c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	e7ea      	b.n	80082a4 <HwClock::HcToSys()+0x90>
 80082ce:	bf00      	nop
 80082d0:	200017dc 	ldrdcs	r1, [r0], -ip
 80082d4:	20001814 	andcs	r1, r0, r4, lsl r8

080082d8 <HwClock::Set(rtc_time const*)>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	7a86      	ldrb	r6, [r0, #10]
 80082dc:	4605      	mov	r5, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b090      	sub	sp, #64	; 0x40
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	d02b      	beq.n	800833e <HwClock::Set(rtc_time const*)+0x66>
 80082e6:	2100      	movs	r1, #0
 80082e8:	a801      	add	r0, sp, #4
 80082ea:	f000 fa2d 	bl	8008748 <gettimeofday>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f873 	bl	80083dc <HwClock::RtcSet(rtc_time const*)>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	a807      	add	r0, sp, #28
 80082fa:	9307      	str	r3, [sp, #28]
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	9308      	str	r3, [sp, #32]
 8008300:	68a3      	ldr	r3, [r4, #8]
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	68e3      	ldr	r3, [r4, #12]
 8008306:	930a      	str	r3, [sp, #40]	; 0x28
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	930b      	str	r3, [sp, #44]	; 0x2c
 800830c:	6963      	ldr	r3, [r4, #20]
 800830e:	2400      	movs	r4, #0
 8008310:	930c      	str	r3, [sp, #48]	; 0x30
 8008312:	940f      	str	r4, [sp, #60]	; 0x3c
 8008314:	f000 f9cc 	bl	80086b0 <mktime>
 8008318:	4621      	mov	r1, r4
 800831a:	9003      	str	r0, [sp, #12]
 800831c:	a805      	add	r0, sp, #20
 800831e:	f000 fa13 	bl	8008748 <gettimeofday>
 8008322:	9906      	ldr	r1, [sp, #24]
 8008324:	9b02      	ldr	r3, [sp, #8]
 8008326:	a803      	add	r0, sp, #12
 8008328:	1aca      	subs	r2, r1, r3
 800832a:	bf42      	ittt	mi
 800832c:	1a5b      	submi	r3, r3, r1
 800832e:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 8008332:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8008336:	2100      	movs	r1, #0
 8008338:	9204      	str	r2, [sp, #16]
 800833a:	f000 fa2f 	bl	800879c <settimeofday>
 800833e:	4630      	mov	r0, r6
 8008340:	b010      	add	sp, #64	; 0x40
 8008342:	bd70      	pop	{r4, r5, r6, pc}

08008344 <rtc_configuration()>:
 8008344:	b510      	push	{r4, lr}
 8008346:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800834a:	f000 fdb3 	bl	8008eb4 <rcu_osci_on>
 800834e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008352:	f000 fd65 	bl	8008e20 <rcu_osci_stab_wait>
 8008356:	2801      	cmp	r0, #1
 8008358:	4604      	mov	r4, r0
 800835a:	d113      	bne.n	8008384 <rtc_configuration()+0x40>
 800835c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008360:	f000 fd46 	bl	8008df0 <rcu_rtc_clock_config>
 8008364:	f640 000f 	movw	r0, #2063	; 0x80f
 8008368:	f000 fcf2 	bl	8008d50 <rcu_periph_clock_enable>
 800836c:	f000 fe48 	bl	8009000 <rtc_register_sync_wait>
 8008370:	f000 fe3e 	bl	8008ff0 <rtc_lwoff_wait>
 8008374:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8008378:	f000 fe28 	bl	8008fcc <rtc_prescaler_set>
 800837c:	f000 fe38 	bl	8008ff0 <rtc_lwoff_wait>
 8008380:	4620      	mov	r0, r4
 8008382:	bd10      	pop	{r4, pc}
 8008384:	2000      	movs	r0, #0
 8008386:	e7fc      	b.n	8008382 <rtc_configuration()+0x3e>

08008388 <HwClock::RtcProbe()>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	2001      	movs	r0, #1
 800838e:	f000 fb27 	bl	80089e0 <bkp_data_read>
 8008392:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 8008396:	42a8      	cmp	r0, r5
 8008398:	d019      	beq.n	80083ce <HwClock::RtcProbe()+0x46>
 800839a:	f7ff ffd3 	bl	8008344 <rtc_configuration()>
 800839e:	b908      	cbnz	r0, 80083a4 <HwClock::RtcProbe()+0x1c>
 80083a0:	72a0      	strb	r0, [r4, #10]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	f000 fe24 	bl	8008ff0 <rtc_lwoff_wait>
 80083a8:	2000      	movs	r0, #0
 80083aa:	f000 fa0f 	bl	80087cc <time>
 80083ae:	f000 fdfd 	bl	8008fac <rtc_counter_set>
 80083b2:	f000 fe1d 	bl	8008ff0 <rtc_lwoff_wait>
 80083b6:	4629      	mov	r1, r5
 80083b8:	2001      	movs	r0, #1
 80083ba:	f000 fafb 	bl	80089b4 <bkp_data_write>
 80083be:	2303      	movs	r3, #3
 80083c0:	7263      	strb	r3, [r4, #9]
 80083c2:	2301      	movs	r3, #1
 80083c4:	72a3      	strb	r3, [r4, #10]
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <HwClock::RtcProbe()+0x50>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6063      	str	r3, [r4, #4]
 80083cc:	e7e9      	b.n	80083a2 <HwClock::RtcProbe()+0x1a>
 80083ce:	f000 fe17 	bl	8009000 <rtc_register_sync_wait>
 80083d2:	f000 fe0d 	bl	8008ff0 <rtc_lwoff_wait>
 80083d6:	e7f2      	b.n	80083be <HwClock::RtcProbe()+0x36>
 80083d8:	20001814 	andcs	r1, r0, r4, lsl r8

080083dc <HwClock::RtcSet(rtc_time const*)>:
 80083dc:	b508      	push	{r3, lr}
 80083de:	4608      	mov	r0, r1
 80083e0:	f000 f966 	bl	80086b0 <mktime>
 80083e4:	f000 fde2 	bl	8008fac <rtc_counter_set>
 80083e8:	2001      	movs	r0, #1
 80083ea:	bd08      	pop	{r3, pc}

080083ec <HwClock::RtcGet(rtc_time*)>:
 80083ec:	b513      	push	{r0, r1, r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f000 fe14 	bl	800901c <rtc_counter_get>
 80083f4:	9001      	str	r0, [sp, #4]
 80083f6:	a801      	add	r0, sp, #4
 80083f8:	f000 f916 	bl	8008628 <localtime>
 80083fc:	1e61      	subs	r1, r4, #1
 80083fe:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8008402:	4290      	cmp	r0, r2
 8008404:	d004      	beq.n	8008410 <HwClock::RtcGet(rtc_time*)+0x24>
 8008406:	f810 3b01 	ldrb.w	r3, [r0], #1
 800840a:	f801 3f01 	strb.w	r3, [r1, #1]!
 800840e:	e7f8      	b.n	8008402 <HwClock::RtcGet(rtc_time*)+0x16>
 8008410:	2001      	movs	r0, #1
 8008412:	b002      	add	sp, #8
 8008414:	bd10      	pop	{r4, pc}

08008416 <operator delete(void*)>:
 8008416:	f000 b873 	b.w	8008500 <free>

0800841a <operator delete[](void*)>:
 800841a:	f000 b871 	b.w	8008500 <free>

0800841e <operator new(unsigned int)>:
 800841e:	f000 b825 	b.w	800846c <malloc>

08008422 <operator new[](unsigned int)>:
 8008422:	f000 b823 	b.w	800846c <malloc>
	...

08008428 <__cxa_pure_virtual>:
 8008428:	2121      	movs	r1, #33	; 0x21
 800842a:	4b02      	ldr	r3, [pc, #8]	; (8008434 <__cxa_pure_virtual+0xc>)
 800842c:	4a02      	ldr	r2, [pc, #8]	; (8008438 <__cxa_pure_virtual+0x10>)
 800842e:	4803      	ldr	r0, [pc, #12]	; (800843c <__cxa_pure_virtual+0x14>)
 8008430:	f000 b806 	b.w	8008440 <__assert_func>
 8008434:	0800b4c8 	stmdaeq	r0, {r3, r6, r7, sl, ip, sp, pc}
 8008438:	0800b4ca 	stmdaeq	r0, {r1, r3, r6, r7, sl, ip, sp, pc}
 800843c:	0800b4dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, ip, sp, pc}

08008440 <__assert_func>:
 8008440:	460c      	mov	r4, r1
 8008442:	b507      	push	{r0, r1, r2, lr}
 8008444:	4619      	mov	r1, r3
 8008446:	b142      	cbz	r2, 800845a <__assert_func+0x1a>
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <__assert_func+0x20>)
 800844a:	e9cd 3200 	strd	r3, r2, [sp]
 800844e:	4602      	mov	r2, r0
 8008450:	4623      	mov	r3, r4
 8008452:	4804      	ldr	r0, [pc, #16]	; (8008464 <__assert_func+0x24>)
 8008454:	f7f9 ff56 	bl	8002304 <printf>
 8008458:	e7fe      	b.n	8008458 <__assert_func+0x18>
 800845a:	4b03      	ldr	r3, [pc, #12]	; (8008468 <__assert_func+0x28>)
 800845c:	461a      	mov	r2, r3
 800845e:	e7f4      	b.n	800844a <__assert_func+0xa>
 8008460:	0800b4ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip, sp, pc}
 8008464:	0800b4fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, sl, ip, sp, pc}
 8008468:	0800b116 	stmdaeq	r0, {r1, r2, r4, r8, ip, sp, pc}

0800846c <malloc>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4604      	mov	r4, r0
 8008470:	4601      	mov	r1, r0
 8008472:	481c      	ldr	r0, [pc, #112]	; (80084e4 <malloc+0x78>)
 8008474:	f7f9 ff46 	bl	8002304 <printf>
 8008478:	b17c      	cbz	r4, 800849a <malloc+0x2e>
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <malloc+0x7c>)
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	b978      	cbnz	r0, 80084a0 <malloc+0x34>
 8008480:	4a1a      	ldr	r2, [pc, #104]	; (80084ec <malloc+0x80>)
 8008482:	f104 031b 	add.w	r3, r4, #27
 8008486:	6811      	ldr	r1, [r2, #0]
 8008488:	4819      	ldr	r0, [pc, #100]	; (80084f0 <malloc+0x84>)
 800848a:	f023 030f 	bic.w	r3, r3, #15
 800848e:	440b      	add	r3, r1
 8008490:	4283      	cmp	r3, r0
 8008492:	d921      	bls.n	80084d8 <malloc+0x6c>
 8008494:	4817      	ldr	r0, [pc, #92]	; (80084f4 <malloc+0x88>)
 8008496:	f7f9 ff35 	bl	8002304 <printf>
 800849a:	2500      	movs	r5, #0
 800849c:	4628      	mov	r0, r5
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	4284      	cmp	r4, r0
 80084a2:	d80a      	bhi.n	80084ba <malloc+0x4e>
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	6899      	ldr	r1, [r3, #8]
 80084a8:	3201      	adds	r2, #1
 80084aa:	428a      	cmp	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	d900      	bls.n	80084b2 <malloc+0x46>
 80084b0:	609a      	str	r2, [r3, #8]
 80084b2:	68d9      	ldr	r1, [r3, #12]
 80084b4:	b919      	cbnz	r1, 80084be <malloc+0x52>
 80084b6:	4604      	mov	r4, r0
 80084b8:	e7e2      	b.n	8008480 <malloc+0x14>
 80084ba:	3310      	adds	r3, #16
 80084bc:	e7de      	b.n	800847c <malloc+0x10>
 80084be:	4604      	mov	r4, r0
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	2300      	movs	r3, #0
 80084c6:	f101 050c 	add.w	r5, r1, #12
 80084ca:	608b      	str	r3, [r1, #8]
 80084cc:	4622      	mov	r2, r4
 80084ce:	462b      	mov	r3, r5
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <malloc+0x8c>)
 80084d2:	f7f9 ff17 	bl	8002304 <printf>
 80084d6:	e7e1      	b.n	800849c <malloc+0x30>
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b08      	ldr	r3, [pc, #32]	; (80084fc <malloc+0x90>)
 80084dc:	e9c1 3400 	strd	r3, r4, [r1]
 80084e0:	e7f0      	b.n	80084c4 <malloc+0x58>
 80084e2:	bf00      	nop
 80084e4:	0800b52a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip, sp, pc}
 80084e8:	20000010 	andcs	r0, r0, r0, lsl r0
 80084ec:	2000000c 	andcs	r0, r0, ip
 80084f0:	2000b000 	andcs	fp, r0, r0
 80084f4:	0800b536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, ip, sp, pc}
 80084f8:	0800b552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip, sp, pc}
 80084fc:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08008500 <free>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	b1c8      	cbz	r0, 800853a <free+0x3a>
 8008506:	f1a0 050c 	sub.w	r5, r0, #12
 800850a:	4602      	mov	r2, r0
 800850c:	4629      	mov	r1, r5
 800850e:	480c      	ldr	r0, [pc, #48]	; (8008540 <free+0x40>)
 8008510:	f7f9 fef8 	bl	8002304 <printf>
 8008514:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <free+0x44>)
 800851a:	429a      	cmp	r2, r3
 800851c:	d10d      	bne.n	800853a <free+0x3a>
 800851e:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <free+0x48>)
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	b152      	cbz	r2, 800853a <free+0x3a>
 8008524:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8008528:	4291      	cmp	r1, r2
 800852a:	d107      	bne.n	800853c <free+0x3c>
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	f844 2c04 	str.w	r2, [r4, #-4]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	60dd      	str	r5, [r3, #12]
 8008536:	3a01      	subs	r2, #1
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	3310      	adds	r3, #16
 800853e:	e7ef      	b.n	8008520 <free+0x20>
 8008540:	0800b57d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, ip, sp, pc}
 8008544:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8008548:	20000010 	andcs	r0, r0, r0, lsl r0

0800854c <memcpy>:
 800854c:	b510      	push	{r4, lr}
 800854e:	1e43      	subs	r3, r0, #1
 8008550:	440a      	add	r2, r1
 8008552:	4291      	cmp	r1, r2
 8008554:	d100      	bne.n	8008558 <memcpy+0xc>
 8008556:	bd10      	pop	{r4, pc}
 8008558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008560:	e7f7      	b.n	8008552 <memcpy+0x6>

08008562 <memmove>:
 8008562:	4288      	cmp	r0, r1
 8008564:	b510      	push	{r4, lr}
 8008566:	eb01 0302 	add.w	r3, r1, r2
 800856a:	d208      	bcs.n	800857e <memmove+0x1c>
 800856c:	1e42      	subs	r2, r0, #1
 800856e:	4299      	cmp	r1, r3
 8008570:	d100      	bne.n	8008574 <memmove+0x12>
 8008572:	bd10      	pop	{r4, pc}
 8008574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008578:	f802 4f01 	strb.w	r4, [r2, #1]!
 800857c:	e7f7      	b.n	800856e <memmove+0xc>
 800857e:	4601      	mov	r1, r0
 8008580:	4402      	add	r2, r0
 8008582:	428a      	cmp	r2, r1
 8008584:	d0f5      	beq.n	8008572 <memmove+0x10>
 8008586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800858a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800858e:	e7f8      	b.n	8008582 <memmove+0x20>

08008590 <memset>:
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b1e2      	cbz	r2, 80085ce <memset+0x3e>
 8008594:	4603      	mov	r3, r0
 8008596:	b2c9      	uxtb	r1, r1
 8008598:	075c      	lsls	r4, r3, #29
 800859a:	d114      	bne.n	80085c6 <memset+0x36>
 800859c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80085a0:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80085a4:	463d      	mov	r5, r7
 80085a6:	f022 0407 	bic.w	r4, r2, #7
 80085aa:	08d6      	lsrs	r6, r2, #3
 80085ac:	441c      	add	r4, r3
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	d10e      	bne.n	80085d0 <memset+0x40>
 80085b2:	f06f 0307 	mvn.w	r3, #7
 80085b6:	fb03 2206 	mla	r2, r3, r6, r2
 80085ba:	4422      	add	r2, r4
 80085bc:	4294      	cmp	r4, r2
 80085be:	d006      	beq.n	80085ce <memset+0x3e>
 80085c0:	f804 1b01 	strb.w	r1, [r4], #1
 80085c4:	e7fa      	b.n	80085bc <memset+0x2c>
 80085c6:	3a01      	subs	r2, #1
 80085c8:	f803 1b01 	strb.w	r1, [r3], #1
 80085cc:	d1e4      	bne.n	8008598 <memset+0x8>
 80085ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085d0:	f843 7b08 	str.w	r7, [r3], #8
 80085d4:	f843 5c04 	str.w	r5, [r3, #-4]
 80085d8:	e7e9      	b.n	80085ae <memset+0x1e>

080085da <isleapyear>:
 80085da:	2264      	movs	r2, #100	; 0x64
 80085dc:	fb90 f3f2 	sdiv	r3, r0, r2
 80085e0:	fb02 0313 	mls	r3, r2, r3, r0
 80085e4:	b94b      	cbnz	r3, 80085fa <isleapyear+0x20>
 80085e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80085ea:	fb90 f2f3 	sdiv	r2, r0, r3
 80085ee:	fb03 0012 	mls	r0, r3, r2, r0
 80085f2:	fab0 f080 	clz	r0, r0
 80085f6:	0940      	lsrs	r0, r0, #5
 80085f8:	4770      	bx	lr
 80085fa:	f010 0f03 	tst.w	r0, #3
 80085fe:	bf0c      	ite	eq
 8008600:	2001      	moveq	r0, #1
 8008602:	2000      	movne	r0, #0
 8008604:	4770      	bx	lr
	...

08008608 <getdaysofmonth>:
 8008608:	b510      	push	{r4, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	2c01      	cmp	r4, #1
 800860e:	4608      	mov	r0, r1
 8008610:	d102      	bne.n	8008618 <getdaysofmonth+0x10>
 8008612:	f7ff ffe2 	bl	80085da <isleapyear>
 8008616:	b918      	cbnz	r0, 8008620 <getdaysofmonth+0x18>
 8008618:	4b02      	ldr	r3, [pc, #8]	; (8008624 <getdaysofmonth+0x1c>)
 800861a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800861e:	bd10      	pop	{r4, pc}
 8008620:	201d      	movs	r0, #29
 8008622:	e7fc      	b.n	800861e <getdaysofmonth+0x16>
 8008624:	0800b5a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp, pc}

08008628 <localtime>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	2800      	cmp	r0, #0
 800862c:	d03c      	beq.n	80086a8 <localtime+0x80>
 800862e:	213c      	movs	r1, #60	; 0x3c
 8008630:	6803      	ldr	r3, [r0, #0]
 8008632:	4d1e      	ldr	r5, [pc, #120]	; (80086ac <localtime+0x84>)
 8008634:	fb93 f2f1 	sdiv	r2, r3, r1
 8008638:	fb01 3312 	mls	r3, r1, r2, r3
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	fb92 f3f1 	sdiv	r3, r2, r1
 8008642:	fb01 2213 	mls	r2, r1, r3, r2
 8008646:	606a      	str	r2, [r5, #4]
 8008648:	2218      	movs	r2, #24
 800864a:	fb93 f4f2 	sdiv	r4, r3, r2
 800864e:	fb02 3314 	mls	r3, r2, r4, r3
 8008652:	60ab      	str	r3, [r5, #8]
 8008654:	2307      	movs	r3, #7
 8008656:	1d22      	adds	r2, r4, #4
 8008658:	fb92 f3f3 	sdiv	r3, r2, r3
 800865c:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008660:	f240 166d 	movw	r6, #365	; 0x16d
 8008664:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	61ab      	str	r3, [r5, #24]
 800866c:	4608      	mov	r0, r1
 800866e:	f7ff ffb4 	bl	80085da <isleapyear>
 8008672:	2800      	cmp	r0, #0
 8008674:	bf14      	ite	ne
 8008676:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 800867a:	4633      	moveq	r3, r6
 800867c:	429c      	cmp	r4, r3
 800867e:	db02      	blt.n	8008686 <localtime+0x5e>
 8008680:	1ae4      	subs	r4, r4, r3
 8008682:	3101      	adds	r1, #1
 8008684:	e7f2      	b.n	800866c <localtime+0x44>
 8008686:	2600      	movs	r6, #0
 8008688:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 800868c:	616b      	str	r3, [r5, #20]
 800868e:	61ec      	str	r4, [r5, #28]
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ffb9 	bl	8008608 <getdaysofmonth>
 8008696:	4284      	cmp	r4, r0
 8008698:	db02      	blt.n	80086a0 <localtime+0x78>
 800869a:	1a24      	subs	r4, r4, r0
 800869c:	3601      	adds	r6, #1
 800869e:	e7f7      	b.n	8008690 <localtime+0x68>
 80086a0:	3401      	adds	r4, #1
 80086a2:	4802      	ldr	r0, [pc, #8]	; (80086ac <localtime+0x84>)
 80086a4:	612e      	str	r6, [r5, #16]
 80086a6:	60ec      	str	r4, [r5, #12]
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
 80086aa:	bf00      	nop
 80086ac:	200017e4 	andcs	r1, r0, r4, ror #15

080086b0 <mktime>:
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d042      	beq.n	8008740 <mktime+0x90>
 80086ba:	6941      	ldr	r1, [r0, #20]
 80086bc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80086c0:	2b45      	cmp	r3, #69	; 0x45
 80086c2:	d83d      	bhi.n	8008740 <mktime+0x90>
 80086c4:	2600      	movs	r6, #0
 80086c6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80086ca:	f240 186d 	movw	r8, #365	; 0x16d
 80086ce:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80086d2:	42af      	cmp	r7, r5
 80086d4:	da23      	bge.n	800871e <mktime+0x6e>
 80086d6:	6927      	ldr	r7, [r4, #16]
 80086d8:	2f0b      	cmp	r7, #11
 80086da:	d831      	bhi.n	8008740 <mktime+0x90>
 80086dc:	2500      	movs	r5, #0
 80086de:	42af      	cmp	r7, r5
 80086e0:	d128      	bne.n	8008734 <mktime+0x84>
 80086e2:	68e5      	ldr	r5, [r4, #12]
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	dd2b      	ble.n	8008740 <mktime+0x90>
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff8d 	bl	8008608 <getdaysofmonth>
 80086ee:	4285      	cmp	r5, r0
 80086f0:	dc26      	bgt.n	8008740 <mktime+0x90>
 80086f2:	2318      	movs	r3, #24
 80086f4:	3d01      	subs	r5, #1
 80086f6:	4435      	add	r5, r6
 80086f8:	435d      	muls	r5, r3
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	2b17      	cmp	r3, #23
 80086fe:	d81f      	bhi.n	8008740 <mktime+0x90>
 8008700:	203c      	movs	r0, #60	; 0x3c
 8008702:	442b      	add	r3, r5
 8008704:	fb00 f503 	mul.w	r5, r0, r3
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	2b3b      	cmp	r3, #59	; 0x3b
 800870c:	d818      	bhi.n	8008740 <mktime+0x90>
 800870e:	442b      	add	r3, r5
 8008710:	4343      	muls	r3, r0
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	283b      	cmp	r0, #59	; 0x3b
 8008716:	d813      	bhi.n	8008740 <mktime+0x90>
 8008718:	4418      	add	r0, r3
 800871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871e:	4628      	mov	r0, r5
 8008720:	f7ff ff5b 	bl	80085da <isleapyear>
 8008724:	2800      	cmp	r0, #0
 8008726:	bf14      	ite	ne
 8008728:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 800872c:	4643      	moveq	r3, r8
 800872e:	3501      	adds	r5, #1
 8008730:	441e      	add	r6, r3
 8008732:	e7ce      	b.n	80086d2 <mktime+0x22>
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff ff67 	bl	8008608 <getdaysofmonth>
 800873a:	3501      	adds	r5, #1
 800873c:	4406      	add	r6, r0
 800873e:	e7ce      	b.n	80086de <mktime+0x2e>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008744:	e7e9      	b.n	800871a <mktime+0x6a>
	...

08008748 <gettimeofday>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <gettimeofday+0x44>)
 800874c:	4a10      	ldr	r2, [pc, #64]	; (8008790 <gettimeofday+0x48>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6814      	ldr	r4, [r2, #0]
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008758:	429c      	cmp	r4, r3
 800875a:	bf2c      	ite	cs
 800875c:	1ae4      	subcs	r4, r4, r3
 800875e:	1b1c      	subcc	r4, r3, r4
 8008760:	4354      	muls	r4, r2
 8008762:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <gettimeofday+0x4c>)
 8008764:	4605      	mov	r5, r0
 8008766:	e9d3 2100 	ldrd	r2, r1, [r3]
 800876a:	18a4      	adds	r4, r4, r2
 800876c:	f141 0100 	adc.w	r1, r1, #0
 8008770:	e9c3 4100 	strd	r4, r1, [r3]
 8008774:	4620      	mov	r0, r4
 8008776:	2300      	movs	r3, #0
 8008778:	4a07      	ldr	r2, [pc, #28]	; (8008798 <gettimeofday+0x50>)
 800877a:	f7f7 fce9 	bl	8000150 <__aeabi_uldivmod>
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <gettimeofday+0x50>)
 8008780:	6028      	str	r0, [r5, #0]
 8008782:	fb03 4410 	mls	r4, r3, r0, r4
 8008786:	2000      	movs	r0, #0
 8008788:	606c      	str	r4, [r5, #4]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20001814 	andcs	r1, r0, r4, lsl r8
 8008790:	20001810 	andcs	r1, r0, r0, lsl r8
 8008794:	20001808 	andcs	r1, r0, r8, lsl #16
 8008798:	000f4240 	andeq	r4, pc, r0, asr #4

0800879c <settimeofday>:
 800879c:	4b07      	ldr	r3, [pc, #28]	; (80087bc <settimeofday+0x20>)
 800879e:	b510      	push	{r4, lr}
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <settimeofday+0x24>)
 80087a4:	6804      	ldr	r4, [r0, #0]
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	6843      	ldr	r3, [r0, #4]
 80087aa:	4806      	ldr	r0, [pc, #24]	; (80087c4 <settimeofday+0x28>)
 80087ac:	17da      	asrs	r2, r3, #31
 80087ae:	fbc4 3200 	smlal	r3, r2, r4, r0
 80087b2:	4905      	ldr	r1, [pc, #20]	; (80087c8 <settimeofday+0x2c>)
 80087b4:	2000      	movs	r0, #0
 80087b6:	e9c1 3200 	strd	r3, r2, [r1]
 80087ba:	bd10      	pop	{r4, pc}
 80087bc:	20001814 	andcs	r1, r0, r4, lsl r8
 80087c0:	20001810 	andcs	r1, r0, r0, lsl r8
 80087c4:	000f4240 	andeq	r4, pc, r0, asr #4
 80087c8:	20001808 	andcs	r1, r0, r8, lsl #16

080087cc <time>:
 80087cc:	b513      	push	{r0, r1, r4, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	2100      	movs	r1, #0
 80087d2:	4668      	mov	r0, sp
 80087d4:	f7ff ffb8 	bl	8008748 <gettimeofday>
 80087d8:	9800      	ldr	r0, [sp, #0]
 80087da:	b104      	cbz	r4, 80087de <time+0x12>
 80087dc:	6020      	str	r0, [r4, #0]
 80087de:	b002      	add	sp, #8
 80087e0:	bd10      	pop	{r4, pc}
	...

080087e4 <uart0_init>:
 80087e4:	2301      	movs	r3, #1
 80087e6:	b507      	push	{r0, r1, r2, lr}
 80087e8:	2208      	movs	r2, #8
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80087f0:	2300      	movs	r3, #0
 80087f2:	4803      	ldr	r0, [pc, #12]	; (8008800 <uart0_init+0x1c>)
 80087f4:	f001 f87c 	bl	80098f0 <gd32_uart_begin>
 80087f8:	b003      	add	sp, #12
 80087fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80087fe:	bf00      	nop
 8008800:	40013800 	andmi	r3, r1, r0, lsl #16

08008804 <uart0_putc>:
 8008804:	280a      	cmp	r0, #10
 8008806:	b538      	push	{r3, r4, r5, lr}
 8008808:	4604      	mov	r4, r0
 800880a:	d10a      	bne.n	8008822 <uart0_putc+0x1e>
 800880c:	4d0b      	ldr	r5, [pc, #44]	; (800883c <uart0_putc+0x38>)
 800880e:	2107      	movs	r1, #7
 8008810:	4628      	mov	r0, r5
 8008812:	f000 fda9 	bl	8009368 <usart_flag_get>
 8008816:	2800      	cmp	r0, #0
 8008818:	d0f9      	beq.n	800880e <uart0_putc+0xa>
 800881a:	220d      	movs	r2, #13
 800881c:	4b08      	ldr	r3, [pc, #32]	; (8008840 <uart0_putc+0x3c>)
 800881e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008822:	4d06      	ldr	r5, [pc, #24]	; (800883c <uart0_putc+0x38>)
 8008824:	2107      	movs	r1, #7
 8008826:	4628      	mov	r0, r5
 8008828:	f000 fd9e 	bl	8009368 <usart_flag_get>
 800882c:	2800      	cmp	r0, #0
 800882e:	d0f9      	beq.n	8008824 <uart0_putc+0x20>
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <uart0_putc+0x3c>)
 8008832:	b2e4      	uxtb	r4, r4
 8008834:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	bf00      	nop
 800883c:	40013800 	andmi	r3, r1, r0, lsl #16
 8008840:	40013000 	andmi	r3, r1, r0

08008844 <uart0_puts>:
 8008844:	b510      	push	{r4, lr}
 8008846:	1e44      	subs	r4, r0, #1
 8008848:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800884c:	b903      	cbnz	r3, 8008850 <uart0_puts+0xc>
 800884e:	bd10      	pop	{r4, pc}
 8008850:	2b0a      	cmp	r3, #10
 8008852:	d102      	bne.n	800885a <uart0_puts+0x16>
 8008854:	200d      	movs	r0, #13
 8008856:	f7ff ffd5 	bl	8008804 <uart0_putc>
 800885a:	7820      	ldrb	r0, [r4, #0]
 800885c:	f7ff ffd2 	bl	8008804 <uart0_putc>
 8008860:	e7f2      	b.n	8008848 <uart0_puts+0x4>
	...

08008864 <mac_address_get>:
 8008864:	2102      	movs	r1, #2
 8008866:	4a07      	ldr	r2, [pc, #28]	; (8008884 <mac_address_get+0x20>)
 8008868:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 800886c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8008870:	7001      	strb	r1, [r0, #0]
 8008872:	7042      	strb	r2, [r0, #1]
 8008874:	0e1a      	lsrs	r2, r3, #24
 8008876:	7082      	strb	r2, [r0, #2]
 8008878:	0c1a      	lsrs	r2, r3, #16
 800887a:	70c2      	strb	r2, [r0, #3]
 800887c:	0a1a      	lsrs	r2, r3, #8
 800887e:	7102      	strb	r2, [r0, #4]
 8008880:	7143      	strb	r3, [r0, #5]
 8008882:	4770      	bx	lr
 8008884:	1ffff000 	svcne	0x00fff000

08008888 <systick_config>:
 8008888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <systick_config+0x34>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	fbb3 f3f2 	udiv	r3, r3, r2
 8008894:	3b01      	subs	r3, #1
 8008896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800889a:	d20d      	bcs.n	80088b8 <systick_config+0x30>
 800889c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80088a0:	21f0      	movs	r1, #240	; 0xf0
 80088a2:	6153      	str	r3, [r2, #20]
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <systick_config+0x38>)
 80088a6:	2007      	movs	r0, #7
 80088a8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088ac:	2100      	movs	r1, #0
 80088ae:	6191      	str	r1, [r2, #24]
 80088b0:	6110      	str	r0, [r2, #16]
 80088b2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088b6:	4770      	bx	lr
 80088b8:	e7fe      	b.n	80088b8 <systick_config+0x30>
 80088ba:	bf00      	nop
 80088bc:	200000e0 	andcs	r0, r0, r0, ror #1
 80088c0:	e000ed00 	and	lr, r0, r0, lsl #26

080088c4 <SysTick_Handler>:
 80088c4:	4a02      	ldr	r2, [pc, #8]	; (80088d0 <SysTick_Handler+0xc>)
 80088c6:	6813      	ldr	r3, [r2, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20001814 	andcs	r1, r0, r4, lsl r8

080088d4 <SystemInit>:
 80088d4:	4b30      	ldr	r3, [pc, #192]	; (8008998 <SystemInit+0xc4>)
 80088d6:	4931      	ldr	r1, [pc, #196]	; (800899c <SystemInit+0xc8>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	f022 0203 	bic.w	r2, r2, #3
 80088e6:	605a      	str	r2, [r3, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	400a      	ands	r2, r1
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	6858      	ldr	r0, [r3, #4]
 80088f0:	4a2b      	ldr	r2, [pc, #172]	; (80089a0 <SystemInit+0xcc>)
 80088f2:	4002      	ands	r2, r0
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	400a      	ands	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	f022 620f 	bic.w	r2, r2, #149946368	; 0x8f00000
 800890a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	400a      	ands	r2, r1
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800891a:	609a      	str	r2, [r3, #8]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	0389      	lsls	r1, r1, #14
 800892c:	d401      	bmi.n	8008932 <SystemInit+0x5e>
 800892e:	3a01      	subs	r2, #1
 8008930:	d1fa      	bne.n	8008928 <SystemInit+0x54>
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	0390      	lsls	r0, r2, #14
 8008936:	d400      	bmi.n	800893a <SystemInit+0x66>
 8008938:	e7fe      	b.n	8008938 <SystemInit+0x64>
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	605a      	str	r2, [r3, #4]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008950:	605a      	str	r2, [r3, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008958:	605a      	str	r2, [r3, #4]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 8008960:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	f042 6202 	orr.w	r2, r2, #136314880	; 0x8200000
 800896c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008970:	605a      	str	r2, [r3, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	0191      	lsls	r1, r2, #6
 800897e:	d5fc      	bpl.n	800897a <SystemInit+0xa6>
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	f022 0203 	bic.w	r2, r2, #3
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	f042 0202 	orr.w	r2, r2, #2
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	0712      	lsls	r2, r2, #28
 8008994:	d5fc      	bpl.n	8008990 <SystemInit+0xbc>
 8008996:	4770      	bx	lr
 8008998:	40021000 	andmi	r1, r2, r0
 800899c:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80089a0:	e8ff000c 	ldm	pc!, {r2, r3}^	; <UNPREDICTABLE>

080089a4 <bkp_deinit>:
 80089a4:	b508      	push	{r3, lr}
 80089a6:	f000 f9f5 	bl	8008d94 <rcu_bkp_reset_enable>
 80089aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089ae:	f000 b9f9 	b.w	8008da4 <rcu_bkp_reset_disable>
	...

080089b4 <bkp_data_write>:
 80089b4:	f1a0 030b 	sub.w	r3, r0, #11
 80089b8:	2b1f      	cmp	r3, #31
 80089ba:	d804      	bhi.n	80089c6 <bkp_data_write+0x12>
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <bkp_data_write+0x28>)
 80089be:	4403      	add	r3, r0
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	8019      	strh	r1, [r3, #0]
 80089c4:	4770      	bx	lr
 80089c6:	1e43      	subs	r3, r0, #1
 80089c8:	2b09      	cmp	r3, #9
 80089ca:	bf9f      	itttt	ls
 80089cc:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80089d0:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80089d4:	0080      	lslls	r0, r0, #2
 80089d6:	8001      	strhls	r1, [r0, #0]
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	10001b05 	andne	r1, r0, r5, lsl #22

080089e0 <bkp_data_read>:
 80089e0:	f1a0 030b 	sub.w	r3, r0, #11
 80089e4:	2b1f      	cmp	r3, #31
 80089e6:	d805      	bhi.n	80089f4 <bkp_data_read+0x14>
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <bkp_data_read+0x2c>)
 80089ea:	4403      	add	r3, r0
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	8818      	ldrh	r0, [r3, #0]
 80089f0:	b280      	uxth	r0, r0
 80089f2:	4770      	bx	lr
 80089f4:	1e43      	subs	r3, r0, #1
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d806      	bhi.n	8008a08 <bkp_data_read+0x28>
 80089fa:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80089fe:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008a02:	0080      	lsls	r0, r0, #2
 8008a04:	8800      	ldrh	r0, [r0, #0]
 8008a06:	e7f3      	b.n	80089f0 <bkp_data_read+0x10>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	4770      	bx	lr
 8008a0c:	10001b05 	andne	r1, r0, r5, lsl #22

08008a10 <dma_deinit>:
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <dma_deinit+0x34>)
 8008a12:	4298      	cmp	r0, r3
 8008a14:	d102      	bne.n	8008a1c <dma_deinit+0xc>
 8008a16:	2904      	cmp	r1, #4
 8008a18:	d900      	bls.n	8008a1c <dma_deinit+0xc>
 8008a1a:	e7fe      	b.n	8008a1a <dma_deinit+0xa>
 8008a1c:	2314      	movs	r3, #20
 8008a1e:	fb03 0301 	mla	r3, r3, r1, r0
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	0089      	lsls	r1, r1, #2
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	609a      	str	r2, [r3, #8]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	609a      	str	r2, [r3, #8]
 8008a30:	60da      	str	r2, [r3, #12]
 8008a32:	611a      	str	r2, [r3, #16]
 8008a34:	615a      	str	r2, [r3, #20]
 8008a36:	230f      	movs	r3, #15
 8008a38:	6842      	ldr	r2, [r0, #4]
 8008a3a:	fa03 f101 	lsl.w	r1, r3, r1
 8008a3e:	4311      	orrs	r1, r2
 8008a40:	6041      	str	r1, [r0, #4]
 8008a42:	4770      	bx	lr
 8008a44:	40020400 	andmi	r0, r2, r0, lsl #8

08008a48 <dma_struct_para_init>:
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a56:	8303      	strh	r3, [r0, #24]
 8008a58:	7683      	strb	r3, [r0, #26]
 8008a5a:	4770      	bx	lr

08008a5c <dma_init>:
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <dma_init+0x70>)
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4298      	cmp	r0, r3
 8008a62:	d102      	bne.n	8008a6a <dma_init+0xe>
 8008a64:	2904      	cmp	r1, #4
 8008a66:	d900      	bls.n	8008a6a <dma_init+0xe>
 8008a68:	e7fe      	b.n	8008a68 <dma_init+0xc>
 8008a6a:	2314      	movs	r3, #20
 8008a6c:	fb03 0101 	mla	r1, r3, r1, r0
 8008a70:	6813      	ldr	r3, [r2, #0]
 8008a72:	610b      	str	r3, [r1, #16]
 8008a74:	6893      	ldr	r3, [r2, #8]
 8008a76:	614b      	str	r3, [r1, #20]
 8008a78:	8a13      	ldrh	r3, [r2, #16]
 8008a7a:	60cb      	str	r3, [r1, #12]
 8008a7c:	68d4      	ldr	r4, [r2, #12]
 8008a7e:	6853      	ldr	r3, [r2, #4]
 8008a80:	6888      	ldr	r0, [r1, #8]
 8008a82:	4323      	orrs	r3, r4
 8008a84:	6954      	ldr	r4, [r2, #20]
 8008a86:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008a8a:	4323      	orrs	r3, r4
 8008a8c:	4303      	orrs	r3, r0
 8008a8e:	608b      	str	r3, [r1, #8]
 8008a90:	7e13      	ldrb	r3, [r2, #24]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	688b      	ldr	r3, [r1, #8]
 8008a96:	bf0c      	ite	eq
 8008a98:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008a9c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008aa0:	608b      	str	r3, [r1, #8]
 8008aa2:	7e53      	ldrb	r3, [r2, #25]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	688b      	ldr	r3, [r1, #8]
 8008aa8:	bf0c      	ite	eq
 8008aaa:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008aae:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008ab2:	608b      	str	r3, [r1, #8]
 8008ab4:	7e93      	ldrb	r3, [r2, #26]
 8008ab6:	b923      	cbnz	r3, 8008ac2 <dma_init+0x66>
 8008ab8:	688b      	ldr	r3, [r1, #8]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	608b      	str	r3, [r1, #8]
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	688b      	ldr	r3, [r1, #8]
 8008ac4:	f043 0310 	orr.w	r3, r3, #16
 8008ac8:	e7f9      	b.n	8008abe <dma_init+0x62>
 8008aca:	bf00      	nop
 8008acc:	40020400 	andmi	r0, r2, r0, lsl #8

08008ad0 <dma_circulation_disable>:
 8008ad0:	4b06      	ldr	r3, [pc, #24]	; (8008aec <dma_circulation_disable+0x1c>)
 8008ad2:	4298      	cmp	r0, r3
 8008ad4:	d102      	bne.n	8008adc <dma_circulation_disable+0xc>
 8008ad6:	2904      	cmp	r1, #4
 8008ad8:	d900      	bls.n	8008adc <dma_circulation_disable+0xc>
 8008ada:	e7fe      	b.n	8008ada <dma_circulation_disable+0xa>
 8008adc:	2314      	movs	r3, #20
 8008ade:	4359      	muls	r1, r3
 8008ae0:	3008      	adds	r0, #8
 8008ae2:	580b      	ldr	r3, [r1, r0]
 8008ae4:	f023 0320 	bic.w	r3, r3, #32
 8008ae8:	500b      	str	r3, [r1, r0]
 8008aea:	4770      	bx	lr
 8008aec:	40020400 	andmi	r0, r2, r0, lsl #8

08008af0 <dma_memory_to_memory_disable>:
 8008af0:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <dma_memory_to_memory_disable+0x1c>)
 8008af2:	4298      	cmp	r0, r3
 8008af4:	d102      	bne.n	8008afc <dma_memory_to_memory_disable+0xc>
 8008af6:	2904      	cmp	r1, #4
 8008af8:	d900      	bls.n	8008afc <dma_memory_to_memory_disable+0xc>
 8008afa:	e7fe      	b.n	8008afa <dma_memory_to_memory_disable+0xa>
 8008afc:	2314      	movs	r3, #20
 8008afe:	4359      	muls	r1, r3
 8008b00:	3008      	adds	r0, #8
 8008b02:	580b      	ldr	r3, [r1, r0]
 8008b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b08:	500b      	str	r3, [r1, r0]
 8008b0a:	4770      	bx	lr
 8008b0c:	40020400 	andmi	r0, r2, r0, lsl #8

08008b10 <fmc_bank0_unlock>:
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <fmc_bank0_unlock+0x14>)
 8008b12:	691a      	ldr	r2, [r3, #16]
 8008b14:	0612      	lsls	r2, r2, #24
 8008b16:	bf41      	itttt	mi
 8008b18:	4a03      	ldrmi	r2, [pc, #12]	; (8008b28 <fmc_bank0_unlock+0x18>)
 8008b1a:	605a      	strmi	r2, [r3, #4]
 8008b1c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008b20:	605a      	strmi	r2, [r3, #4]
 8008b22:	4770      	bx	lr
 8008b24:	40022000 	andmi	r2, r2, r0
 8008b28:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008b2c <fmc_bank1_unlock>:
 8008b2c:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <fmc_bank1_unlock+0x14>)
 8008b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b30:	0612      	lsls	r2, r2, #24
 8008b32:	bf41      	itttt	mi
 8008b34:	4a03      	ldrmi	r2, [pc, #12]	; (8008b44 <fmc_bank1_unlock+0x18>)
 8008b36:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008b38:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008b3c:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008b3e:	4770      	bx	lr
 8008b40:	40022000 	andmi	r2, r2, r0
 8008b44:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008b48 <fmc_bank0_lock>:
 8008b48:	4a02      	ldr	r2, [pc, #8]	; (8008b54 <fmc_bank0_lock+0xc>)
 8008b4a:	6913      	ldr	r3, [r2, #16]
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b50:	6113      	str	r3, [r2, #16]
 8008b52:	4770      	bx	lr
 8008b54:	40022000 	andmi	r2, r2, r0

08008b58 <fmc_bank1_lock>:
 8008b58:	4a02      	ldr	r2, [pc, #8]	; (8008b64 <fmc_bank1_lock+0xc>)
 8008b5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b60:	6513      	str	r3, [r2, #80]	; 0x50
 8008b62:	4770      	bx	lr
 8008b64:	40022000 	andmi	r2, r2, r0

08008b68 <fmc_bank0_state_get>:
 8008b68:	4b08      	ldr	r3, [pc, #32]	; (8008b8c <fmc_bank0_state_get+0x24>)
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	07d1      	lsls	r1, r2, #31
 8008b6e:	d409      	bmi.n	8008b84 <fmc_bank0_state_get+0x1c>
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	06d2      	lsls	r2, r2, #27
 8008b74:	d408      	bmi.n	8008b88 <fmc_bank0_state_get+0x20>
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f013 0f04 	tst.w	r3, #4
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2000      	moveq	r0, #0
 8008b80:	2002      	movne	r0, #2
 8008b82:	4770      	bx	lr
 8008b84:	2001      	movs	r0, #1
 8008b86:	4770      	bx	lr
 8008b88:	2003      	movs	r0, #3
 8008b8a:	4770      	bx	lr
 8008b8c:	40022000 	andmi	r2, r2, r0

08008b90 <fmc_bank1_state_get>:
 8008b90:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <fmc_bank1_state_get+0x24>)
 8008b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b94:	07d1      	lsls	r1, r2, #31
 8008b96:	d409      	bmi.n	8008bac <fmc_bank1_state_get+0x1c>
 8008b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b9a:	06d2      	lsls	r2, r2, #27
 8008b9c:	d408      	bmi.n	8008bb0 <fmc_bank1_state_get+0x20>
 8008b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba0:	f013 0f04 	tst.w	r3, #4
 8008ba4:	bf0c      	ite	eq
 8008ba6:	2000      	moveq	r0, #0
 8008ba8:	2002      	movne	r0, #2
 8008baa:	4770      	bx	lr
 8008bac:	2001      	movs	r0, #1
 8008bae:	4770      	bx	lr
 8008bb0:	2003      	movs	r0, #3
 8008bb2:	4770      	bx	lr
 8008bb4:	40022000 	andmi	r2, r2, r0

08008bb8 <fwdgt_enable>:
 8008bb8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008bbc:	4b01      	ldr	r3, [pc, #4]	; (8008bc4 <fwdgt_enable+0xc>)
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	40003000 	andmi	r3, r0, r0

08008bc8 <fwdgt_counter_reload>:
 8008bc8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008bcc:	4b01      	ldr	r3, [pc, #4]	; (8008bd4 <fwdgt_counter_reload+0xc>)
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	40003000 	andmi	r3, r0, r0

08008bd8 <fwdgt_config>:
 8008bd8:	f245 5355 	movw	r3, #21845	; 0x5555
 8008bdc:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <fwdgt_config+0x4c>)
 8008bde:	b510      	push	{r4, lr}
 8008be0:	4c11      	ldr	r4, [pc, #68]	; (8008c28 <fwdgt_config+0x50>)
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	68d3      	ldr	r3, [r2, #12]
 8008be6:	3c01      	subs	r4, #1
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	d013      	beq.n	8008c16 <fwdgt_config+0x3e>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f8      	bne.n	8008be4 <fwdgt_config+0xc>
 8008bf2:	6051      	str	r1, [r2, #4]
 8008bf4:	490c      	ldr	r1, [pc, #48]	; (8008c28 <fwdgt_config+0x50>)
 8008bf6:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <fwdgt_config+0x4c>)
 8008bf8:	68d3      	ldr	r3, [r2, #12]
 8008bfa:	3901      	subs	r1, #1
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	d00d      	beq.n	8008c1e <fwdgt_config+0x46>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f8      	bne.n	8008bf8 <fwdgt_config+0x20>
 8008c06:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008c0a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008c0e:	6090      	str	r0, [r2, #8]
 8008c10:	2001      	movs	r0, #1
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	e002      	b.n	8008c1c <fwdgt_config+0x44>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0eb      	beq.n	8008bf2 <fwdgt_config+0x1a>
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1fb      	bne.n	8008c1a <fwdgt_config+0x42>
 8008c22:	e7f0      	b.n	8008c06 <fwdgt_config+0x2e>
 8008c24:	40003000 	andmi	r3, r0, r0
 8008c28:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008c2c <gpio_init>:
 8008c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	f04f 0c0f 	mov.w	ip, #15
 8008c34:	06cf      	lsls	r7, r1, #27
 8008c36:	f04f 0400 	mov.w	r4, #0
 8008c3a:	f04f 0701 	mov.w	r7, #1
 8008c3e:	f001 050f 	and.w	r5, r1, #15
 8008c42:	bf48      	it	mi
 8008c44:	4315      	orrmi	r5, r2
 8008c46:	fa23 f204 	lsr.w	r2, r3, r4
 8008c4a:	07d6      	lsls	r6, r2, #31
 8008c4c:	d510      	bpl.n	8008c70 <gpio_init+0x44>
 8008c4e:	00a2      	lsls	r2, r4, #2
 8008c50:	6806      	ldr	r6, [r0, #0]
 8008c52:	fa0c fe02 	lsl.w	lr, ip, r2
 8008c56:	ea26 060e 	bic.w	r6, r6, lr
 8008c5a:	fa05 f202 	lsl.w	r2, r5, r2
 8008c5e:	2928      	cmp	r1, #40	; 0x28
 8008c60:	ea42 0206 	orr.w	r2, r2, r6
 8008c64:	d128      	bne.n	8008cb8 <gpio_init+0x8c>
 8008c66:	fa07 f604 	lsl.w	r6, r7, r4
 8008c6a:	401e      	ands	r6, r3
 8008c6c:	6146      	str	r6, [r0, #20]
 8008c6e:	6002      	str	r2, [r0, #0]
 8008c70:	3401      	adds	r4, #1
 8008c72:	2c08      	cmp	r4, #8
 8008c74:	d1e7      	bne.n	8008c46 <gpio_init+0x1a>
 8008c76:	2600      	movs	r6, #0
 8008c78:	f04f 0c0f 	mov.w	ip, #15
 8008c7c:	2701      	movs	r7, #1
 8008c7e:	f106 0208 	add.w	r2, r6, #8
 8008c82:	fa23 f402 	lsr.w	r4, r3, r2
 8008c86:	07e4      	lsls	r4, r4, #31
 8008c88:	d511      	bpl.n	8008cae <gpio_init+0x82>
 8008c8a:	00b4      	lsls	r4, r6, #2
 8008c8c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008c90:	fa0c f804 	lsl.w	r8, ip, r4
 8008c94:	ea2e 0e08 	bic.w	lr, lr, r8
 8008c98:	fa05 f404 	lsl.w	r4, r5, r4
 8008c9c:	2928      	cmp	r1, #40	; 0x28
 8008c9e:	ea44 040e 	orr.w	r4, r4, lr
 8008ca2:	d110      	bne.n	8008cc6 <gpio_init+0x9a>
 8008ca4:	fa07 f202 	lsl.w	r2, r7, r2
 8008ca8:	401a      	ands	r2, r3
 8008caa:	6142      	str	r2, [r0, #20]
 8008cac:	6044      	str	r4, [r0, #4]
 8008cae:	3601      	adds	r6, #1
 8008cb0:	2e08      	cmp	r6, #8
 8008cb2:	d1e4      	bne.n	8008c7e <gpio_init+0x52>
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	2948      	cmp	r1, #72	; 0x48
 8008cba:	bf02      	ittt	eq
 8008cbc:	fa07 f604 	lsleq.w	r6, r7, r4
 8008cc0:	401e      	andeq	r6, r3
 8008cc2:	6106      	streq	r6, [r0, #16]
 8008cc4:	e7d3      	b.n	8008c6e <gpio_init+0x42>
 8008cc6:	2948      	cmp	r1, #72	; 0x48
 8008cc8:	bf02      	ittt	eq
 8008cca:	fa07 f202 	lsleq.w	r2, r7, r2
 8008cce:	401a      	andeq	r2, r3
 8008cd0:	6102      	streq	r2, [r0, #16]
 8008cd2:	e7eb      	b.n	8008cac <gpio_init+0x80>

08008cd4 <gpio_input_bit_get>:
 8008cd4:	6883      	ldr	r3, [r0, #8]
 8008cd6:	420b      	tst	r3, r1
 8008cd8:	bf14      	ite	ne
 8008cda:	2001      	movne	r0, #1
 8008cdc:	2000      	moveq	r0, #0
 8008cde:	4770      	bx	lr

08008ce0 <gpio_pin_remap_config>:
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	4a16      	ldr	r2, [pc, #88]	; (8008d3c <gpio_pin_remap_config+0x5c>)
 8008ce4:	b530      	push	{r4, r5, lr}
 8008ce6:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008cea:	bfb4      	ite	lt
 8008cec:	69d3      	ldrlt	r3, [r2, #28]
 8008cee:	6853      	ldrge	r3, [r2, #4]
 8008cf0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008cf4:	b284      	uxth	r4, r0
 8008cf6:	d110      	bne.n	8008d1a <gpio_pin_remap_config+0x3a>
 8008cf8:	6855      	ldr	r5, [r2, #4]
 8008cfa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008cfe:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8008d02:	6055      	str	r5, [r2, #4]
 8008d04:	b119      	cbz	r1, 8008d0e <gpio_pin_remap_config+0x2e>
 8008d06:	0d42      	lsrs	r2, r0, #21
 8008d08:	0112      	lsls	r2, r2, #4
 8008d0a:	4094      	lsls	r4, r2
 8008d0c:	4323      	orrs	r3, r4
 8008d0e:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <gpio_pin_remap_config+0x5c>)
 8008d10:	2800      	cmp	r0, #0
 8008d12:	bfb4      	ite	lt
 8008d14:	61d3      	strlt	r3, [r2, #28]
 8008d16:	6053      	strge	r3, [r2, #4]
 8008d18:	bd30      	pop	{r4, r5, pc}
 8008d1a:	02c2      	lsls	r2, r0, #11
 8008d1c:	bf4d      	iteet	mi
 8008d1e:	2203      	movmi	r2, #3
 8008d20:	0d42      	lsrpl	r2, r0, #21
 8008d22:	0112      	lslpl	r2, r2, #4
 8008d24:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008d28:	bf4c      	ite	mi
 8008d2a:	40aa      	lslmi	r2, r5
 8008d2c:	fa04 f202 	lslpl.w	r2, r4, r2
 8008d30:	ea23 0302 	bic.w	r3, r3, r2
 8008d34:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8008d38:	e7e4      	b.n	8008d04 <gpio_pin_remap_config+0x24>
 8008d3a:	bf00      	nop
 8008d3c:	40010000 	andmi	r0, r1, r0

08008d40 <pmu_backup_write_enable>:
 8008d40:	4a02      	ldr	r2, [pc, #8]	; (8008d4c <pmu_backup_write_enable+0xc>)
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4770      	bx	lr
 8008d4c:	40007000 	andmi	r7, r0, r0

08008d50 <rcu_periph_clock_enable>:
 8008d50:	2201      	movs	r2, #1
 8008d52:	0983      	lsrs	r3, r0, #6
 8008d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	f000 001f 	and.w	r0, r0, #31
 8008d62:	fa02 f000 	lsl.w	r0, r2, r0
 8008d66:	4308      	orrs	r0, r1
 8008d68:	6018      	str	r0, [r3, #0]
 8008d6a:	4770      	bx	lr

08008d6c <rcu_periph_clock_disable>:
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	0983      	lsrs	r3, r0, #6
 8008d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	f000 001f 	and.w	r0, r0, #31
 8008d7e:	fa01 f000 	lsl.w	r0, r1, r0
 8008d82:	ea22 0000 	bic.w	r0, r2, r0
 8008d86:	6018      	str	r0, [r3, #0]
 8008d88:	4770      	bx	lr

08008d8a <rcu_periph_reset_enable>:
 8008d8a:	f7ff bfe1 	b.w	8008d50 <rcu_periph_clock_enable>

08008d8e <rcu_periph_reset_disable>:
 8008d8e:	f7ff bfed 	b.w	8008d6c <rcu_periph_clock_disable>
	...

08008d94 <rcu_bkp_reset_enable>:
 8008d94:	4a02      	ldr	r2, [pc, #8]	; (8008da0 <rcu_bkp_reset_enable+0xc>)
 8008d96:	6a13      	ldr	r3, [r2, #32]
 8008d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d9c:	6213      	str	r3, [r2, #32]
 8008d9e:	4770      	bx	lr
 8008da0:	40021000 	andmi	r1, r2, r0

08008da4 <rcu_bkp_reset_disable>:
 8008da4:	4a02      	ldr	r2, [pc, #8]	; (8008db0 <rcu_bkp_reset_disable+0xc>)
 8008da6:	6a13      	ldr	r3, [r2, #32]
 8008da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dac:	6213      	str	r3, [r2, #32]
 8008dae:	4770      	bx	lr
 8008db0:	40021000 	andmi	r1, r2, r0

08008db4 <rcu_adc_clock_config>:
 8008db4:	490c      	ldr	r1, [pc, #48]	; (8008de8 <rcu_adc_clock_config+0x34>)
 8008db6:	2805      	cmp	r0, #5
 8008db8:	684b      	ldr	r3, [r1, #4]
 8008dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008dc2:	d006      	beq.n	8008dd2 <rcu_adc_clock_config+0x1e>
 8008dc4:	d803      	bhi.n	8008dce <rcu_adc_clock_config+0x1a>
 8008dc6:	2804      	cmp	r0, #4
 8008dc8:	d10a      	bne.n	8008de0 <rcu_adc_clock_config+0x2c>
 8008dca:	604b      	str	r3, [r1, #4]
 8008dcc:	4770      	bx	lr
 8008dce:	2807      	cmp	r0, #7
 8008dd0:	d1fb      	bne.n	8008dca <rcu_adc_clock_config+0x16>
 8008dd2:	4a06      	ldr	r2, [pc, #24]	; (8008dec <rcu_adc_clock_config+0x38>)
 8008dd4:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 8008dd8:	4303      	orrs	r3, r0
 8008dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dde:	e7f4      	b.n	8008dca <rcu_adc_clock_config+0x16>
 8008de0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008de4:	e7f1      	b.n	8008dca <rcu_adc_clock_config+0x16>
 8008de6:	bf00      	nop
 8008de8:	40021000 	andmi	r1, r2, r0
 8008dec:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08008df0 <rcu_rtc_clock_config>:
 8008df0:	4a03      	ldr	r2, [pc, #12]	; (8008e00 <rcu_rtc_clock_config+0x10>)
 8008df2:	6a13      	ldr	r3, [r2, #32]
 8008df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df8:	4303      	orrs	r3, r0
 8008dfa:	6213      	str	r3, [r2, #32]
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	40021000 	andmi	r1, r2, r0

08008e04 <rcu_flag_get>:
 8008e04:	0983      	lsrs	r3, r0, #6
 8008e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e0a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f000 001f 	and.w	r0, r0, #31
 8008e14:	fa23 f000 	lsr.w	r0, r3, r0
 8008e18:	f000 0001 	and.w	r0, r0, #1
 8008e1c:	4770      	bx	lr
	...

08008e20 <rcu_osci_stab_wait>:
 8008e20:	2818      	cmp	r0, #24
 8008e22:	b508      	push	{r3, lr}
 8008e24:	d03b      	beq.n	8008e9e <rcu_osci_stab_wait+0x7e>
 8008e26:	d804      	bhi.n	8008e32 <rcu_osci_stab_wait+0x12>
 8008e28:	b378      	cbz	r0, 8008e8a <rcu_osci_stab_wait+0x6a>
 8008e2a:	2810      	cmp	r0, #16
 8008e2c:	d012      	beq.n	8008e54 <rcu_osci_stab_wait+0x34>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	bd08      	pop	{r3, pc}
 8008e32:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008e36:	d01c      	beq.n	8008e72 <rcu_osci_stab_wait+0x52>
 8008e38:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008e3c:	d1f7      	bne.n	8008e2e <rcu_osci_stab_wait+0xe>
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <rcu_osci_stab_wait+0x90>)
 8008e40:	f640 1001 	movw	r0, #2305	; 0x901
 8008e44:	f7ff ffde 	bl	8008e04 <rcu_flag_get>
 8008e48:	b908      	cbnz	r0, 8008e4e <rcu_osci_stab_wait+0x2e>
 8008e4a:	3a01      	subs	r2, #1
 8008e4c:	d1f8      	bne.n	8008e40 <rcu_osci_stab_wait+0x20>
 8008e4e:	f640 1001 	movw	r0, #2305	; 0x901
 8008e52:	e008      	b.n	8008e66 <rcu_osci_stab_wait+0x46>
 8008e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e58:	2011      	movs	r0, #17
 8008e5a:	f7ff ffd3 	bl	8008e04 <rcu_flag_get>
 8008e5e:	b908      	cbnz	r0, 8008e64 <rcu_osci_stab_wait+0x44>
 8008e60:	3a01      	subs	r2, #1
 8008e62:	d1f9      	bne.n	8008e58 <rcu_osci_stab_wait+0x38>
 8008e64:	2011      	movs	r0, #17
 8008e66:	f7ff ffcd 	bl	8008e04 <rcu_flag_get>
 8008e6a:	3800      	subs	r0, #0
 8008e6c:	bf18      	it	ne
 8008e6e:	2001      	movne	r0, #1
 8008e70:	e7de      	b.n	8008e30 <rcu_osci_stab_wait+0x10>
 8008e72:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8008e76:	f640 0001 	movw	r0, #2049	; 0x801
 8008e7a:	f7ff ffc3 	bl	8008e04 <rcu_flag_get>
 8008e7e:	b908      	cbnz	r0, 8008e84 <rcu_osci_stab_wait+0x64>
 8008e80:	3a01      	subs	r2, #1
 8008e82:	d1f8      	bne.n	8008e76 <rcu_osci_stab_wait+0x56>
 8008e84:	f640 0001 	movw	r0, #2049	; 0x801
 8008e88:	e7ed      	b.n	8008e66 <rcu_osci_stab_wait+0x46>
 8008e8a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008e8e:	2001      	movs	r0, #1
 8008e90:	f7ff ffb8 	bl	8008e04 <rcu_flag_get>
 8008e94:	b908      	cbnz	r0, 8008e9a <rcu_osci_stab_wait+0x7a>
 8008e96:	3a01      	subs	r2, #1
 8008e98:	d1f9      	bne.n	8008e8e <rcu_osci_stab_wait+0x6e>
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e7e3      	b.n	8008e66 <rcu_osci_stab_wait+0x46>
 8008e9e:	4a04      	ldr	r2, [pc, #16]	; (8008eb0 <rcu_osci_stab_wait+0x90>)
 8008ea0:	2019      	movs	r0, #25
 8008ea2:	f7ff ffaf 	bl	8008e04 <rcu_flag_get>
 8008ea6:	b908      	cbnz	r0, 8008eac <rcu_osci_stab_wait+0x8c>
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	d1f9      	bne.n	8008ea0 <rcu_osci_stab_wait+0x80>
 8008eac:	2019      	movs	r0, #25
 8008eae:	e7da      	b.n	8008e66 <rcu_osci_stab_wait+0x46>
 8008eb0:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008eb4 <rcu_osci_on>:
 8008eb4:	f7ff bf4c 	b.w	8008d50 <rcu_periph_clock_enable>

08008eb8 <rcu_clock_freq_get>:
 8008eb8:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <rcu_clock_freq_get+0xbc>)
 8008eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	461f      	mov	r7, r3
 8008ec0:	b089      	sub	sp, #36	; 0x24
 8008ec2:	ad04      	add	r5, sp, #16
 8008ec4:	f103 0610 	add.w	r6, r3, #16
 8008ec8:	462a      	mov	r2, r5
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	c203      	stmia	r2!, {r0, r1}
 8008ed2:	42b3      	cmp	r3, r6
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	d1f7      	bne.n	8008ec8 <rcu_clock_freq_get+0x10>
 8008ed8:	466b      	mov	r3, sp
 8008eda:	6871      	ldr	r1, [r6, #4]
 8008edc:	6938      	ldr	r0, [r7, #16]
 8008ede:	c303      	stmia	r3!, {r0, r1}
 8008ee0:	c303      	stmia	r3!, {r0, r1}
 8008ee2:	4925      	ldr	r1, [pc, #148]	; (8008f78 <rcu_clock_freq_get+0xc0>)
 8008ee4:	684b      	ldr	r3, [r1, #4]
 8008ee6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d136      	bne.n	8008f5c <rcu_clock_freq_get+0xa4>
 8008eee:	684b      	ldr	r3, [r1, #4]
 8008ef0:	03dd      	lsls	r5, r3, #15
 8008ef2:	d510      	bpl.n	8008f16 <rcu_clock_freq_get+0x5e>
 8008ef4:	684b      	ldr	r3, [r1, #4]
 8008ef6:	4a21      	ldr	r2, [pc, #132]	; (8008f7c <rcu_clock_freq_get+0xc4>)
 8008ef8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008efc:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <rcu_clock_freq_get+0xc8>)
 8008efe:	bf18      	it	ne
 8008f00:	461a      	movne	r2, r3
 8008f02:	684b      	ldr	r3, [r1, #4]
 8008f04:	6848      	ldr	r0, [r1, #4]
 8008f06:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8008f0a:	0100      	lsls	r0, r0, #4
 8008f0c:	d505      	bpl.n	8008f1a <rcu_clock_freq_get+0x62>
 8008f0e:	f043 0310 	orr.w	r3, r3, #16
 8008f12:	3301      	adds	r3, #1
 8008f14:	e004      	b.n	8008f20 <rcu_clock_freq_get+0x68>
 8008f16:	4a1a      	ldr	r2, [pc, #104]	; (8008f80 <rcu_clock_freq_get+0xc8>)
 8008f18:	e7f3      	b.n	8008f02 <rcu_clock_freq_get+0x4a>
 8008f1a:	2b0f      	cmp	r3, #15
 8008f1c:	d0f9      	beq.n	8008f12 <rcu_clock_freq_get+0x5a>
 8008f1e:	3302      	adds	r3, #2
 8008f20:	4353      	muls	r3, r2
 8008f22:	684a      	ldr	r2, [r1, #4]
 8008f24:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008f28:	3220      	adds	r2, #32
 8008f2a:	446a      	add	r2, sp
 8008f2c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8008f30:	fa23 f002 	lsr.w	r0, r3, r2
 8008f34:	684a      	ldr	r2, [r1, #4]
 8008f36:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8008f3a:	3220      	adds	r2, #32
 8008f3c:	446a      	add	r2, sp
 8008f3e:	f812 5c20 	ldrb.w	r5, [r2, #-32]
 8008f42:	684a      	ldr	r2, [r1, #4]
 8008f44:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8008f48:	3220      	adds	r2, #32
 8008f4a:	446a      	add	r2, sp
 8008f4c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008f50:	2c03      	cmp	r4, #3
 8008f52:	d80c      	bhi.n	8008f6e <rcu_clock_freq_get+0xb6>
 8008f54:	e8df f004 	tbb	[pc, r4]
 8008f58:	09070504 	stmdbeq	r7, {r2, r8, sl}
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <rcu_clock_freq_get+0xc4>)
 8008f5e:	e7e0      	b.n	8008f22 <rcu_clock_freq_get+0x6a>
 8008f60:	4618      	mov	r0, r3
 8008f62:	b009      	add	sp, #36	; 0x24
 8008f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f66:	40e8      	lsrs	r0, r5
 8008f68:	e7fb      	b.n	8008f62 <rcu_clock_freq_get+0xaa>
 8008f6a:	40d0      	lsrs	r0, r2
 8008f6c:	e7f9      	b.n	8008f62 <rcu_clock_freq_get+0xaa>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e7f7      	b.n	8008f62 <rcu_clock_freq_get+0xaa>
 8008f72:	bf00      	nop
 8008f74:	08009edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, pc}
 8008f78:	40021000 	andmi	r1, r2, r0
 8008f7c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8008f80:	003d0900 	eorseq	r0, sp, r0, lsl #18

08008f84 <rtc_configuration_mode_enter>:
 8008f84:	4a03      	ldr	r2, [pc, #12]	; (8008f94 <rtc_configuration_mode_enter+0x10>)
 8008f86:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f8a:	f043 0310 	orr.w	r3, r3, #16
 8008f8e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008f92:	4770      	bx	lr
 8008f94:	40002000 	andmi	r2, r0, r0

08008f98 <rtc_configuration_mode_exit>:
 8008f98:	4a03      	ldr	r2, [pc, #12]	; (8008fa8 <rtc_configuration_mode_exit+0x10>)
 8008f9a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f9e:	f023 0310 	bic.w	r3, r3, #16
 8008fa2:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008fa6:	4770      	bx	lr
 8008fa8:	40002000 	andmi	r2, r0, r0

08008fac <rtc_counter_set>:
 8008fac:	b508      	push	{r3, lr}
 8008fae:	f7ff ffe9 	bl	8008f84 <rtc_configuration_mode_enter>
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <rtc_counter_set+0x1c>)
 8008fb4:	0c02      	lsrs	r2, r0, #16
 8008fb6:	b280      	uxth	r0, r0
 8008fb8:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8008fbc:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8008fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fc4:	f7ff bfe8 	b.w	8008f98 <rtc_configuration_mode_exit>
 8008fc8:	40002000 	andmi	r2, r0, r0

08008fcc <rtc_prescaler_set>:
 8008fcc:	b508      	push	{r3, lr}
 8008fce:	f7ff ffd9 	bl	8008f84 <rtc_configuration_mode_enter>
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <rtc_prescaler_set+0x20>)
 8008fd4:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8008fd8:	b280      	uxth	r0, r0
 8008fda:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8008fde:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 8008fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fe6:	f7ff bfd7 	b.w	8008f98 <rtc_configuration_mode_exit>
 8008fea:	bf00      	nop
 8008fec:	40002000 	andmi	r2, r0, r0

08008ff0 <rtc_lwoff_wait>:
 8008ff0:	4a02      	ldr	r2, [pc, #8]	; (8008ffc <rtc_lwoff_wait+0xc>)
 8008ff2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008ff6:	069b      	lsls	r3, r3, #26
 8008ff8:	d5fb      	bpl.n	8008ff2 <rtc_lwoff_wait+0x2>
 8008ffa:	4770      	bx	lr
 8008ffc:	40002000 	andmi	r2, r0, r0

08009000 <rtc_register_sync_wait>:
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <rtc_register_sync_wait+0x18>)
 8009002:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8009006:	f022 0208 	bic.w	r2, r2, #8
 800900a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800900e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8009012:	0712      	lsls	r2, r2, #28
 8009014:	d5fb      	bpl.n	800900e <rtc_register_sync_wait+0xe>
 8009016:	4770      	bx	lr
 8009018:	40002000 	andmi	r2, r0, r0

0800901c <rtc_counter_get>:
 800901c:	4b03      	ldr	r3, [pc, #12]	; (800902c <rtc_counter_get+0x10>)
 800901e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009022:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 8009026:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800902a:	4770      	bx	lr
 800902c:	40002000 	andmi	r2, r0, r0

08009030 <timer_deinit>:
 8009030:	b508      	push	{r3, lr}
 8009032:	4b2d      	ldr	r3, [pc, #180]	; (80090e8 <timer_deinit+0xb8>)
 8009034:	4298      	cmp	r0, r3
 8009036:	d048      	beq.n	80090ca <timer_deinit+0x9a>
 8009038:	d816      	bhi.n	8009068 <timer_deinit+0x38>
 800903a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800903e:	4298      	cmp	r0, r3
 8009040:	d03c      	beq.n	80090bc <timer_deinit+0x8c>
 8009042:	d807      	bhi.n	8009054 <timer_deinit+0x24>
 8009044:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009048:	d02a      	beq.n	80090a0 <timer_deinit+0x70>
 800904a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800904e:	4298      	cmp	r0, r3
 8009050:	d02d      	beq.n	80090ae <timer_deinit+0x7e>
 8009052:	bd08      	pop	{r3, pc}
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <timer_deinit+0xbc>)
 8009056:	4298      	cmp	r0, r3
 8009058:	d1fb      	bne.n	8009052 <timer_deinit+0x22>
 800905a:	f240 4003 	movw	r0, #1027	; 0x403
 800905e:	f7ff fe94 	bl	8008d8a <rcu_periph_reset_enable>
 8009062:	f240 4003 	movw	r0, #1027	; 0x403
 8009066:	e017      	b.n	8009098 <timer_deinit+0x68>
 8009068:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <timer_deinit+0xc0>)
 800906a:	4298      	cmp	r0, r3
 800906c:	d00e      	beq.n	800908c <timer_deinit+0x5c>
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	4298      	cmp	r0, r3
 8009074:	d030      	beq.n	80090d8 <timer_deinit+0xa8>
 8009076:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 800907a:	4298      	cmp	r0, r3
 800907c:	d1e9      	bne.n	8009052 <timer_deinit+0x22>
 800907e:	f240 4005 	movw	r0, #1029	; 0x405
 8009082:	f7ff fe82 	bl	8008d8a <rcu_periph_reset_enable>
 8009086:	f240 4005 	movw	r0, #1029	; 0x405
 800908a:	e005      	b.n	8009098 <timer_deinit+0x68>
 800908c:	f240 300b 	movw	r0, #779	; 0x30b
 8009090:	f7ff fe7b 	bl	8008d8a <rcu_periph_reset_enable>
 8009094:	f240 300b 	movw	r0, #779	; 0x30b
 8009098:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800909c:	f7ff be77 	b.w	8008d8e <rcu_periph_reset_disable>
 80090a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090a4:	f7ff fe71 	bl	8008d8a <rcu_periph_reset_enable>
 80090a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090ac:	e7f4      	b.n	8009098 <timer_deinit+0x68>
 80090ae:	f240 4001 	movw	r0, #1025	; 0x401
 80090b2:	f7ff fe6a 	bl	8008d8a <rcu_periph_reset_enable>
 80090b6:	f240 4001 	movw	r0, #1025	; 0x401
 80090ba:	e7ed      	b.n	8009098 <timer_deinit+0x68>
 80090bc:	f240 4002 	movw	r0, #1026	; 0x402
 80090c0:	f7ff fe63 	bl	8008d8a <rcu_periph_reset_enable>
 80090c4:	f240 4002 	movw	r0, #1026	; 0x402
 80090c8:	e7e6      	b.n	8009098 <timer_deinit+0x68>
 80090ca:	f240 4004 	movw	r0, #1028	; 0x404
 80090ce:	f7ff fe5c 	bl	8008d8a <rcu_periph_reset_enable>
 80090d2:	f240 4004 	movw	r0, #1028	; 0x404
 80090d6:	e7df      	b.n	8009098 <timer_deinit+0x68>
 80090d8:	f240 300d 	movw	r0, #781	; 0x30d
 80090dc:	f7ff fe55 	bl	8008d8a <rcu_periph_reset_enable>
 80090e0:	f240 300d 	movw	r0, #781	; 0x30d
 80090e4:	e7d8      	b.n	8009098 <timer_deinit+0x68>
 80090e6:	bf00      	nop
 80090e8:	40001000 	andmi	r1, r0, r0
 80090ec:	40000c00 	andmi	r0, r0, r0, lsl #24
 80090f0:	40012c00 	andmi	r2, r1, r0, lsl #24

080090f4 <timer_init>:
 80090f4:	880b      	ldrh	r3, [r1, #0]
 80090f6:	6283      	str	r3, [r0, #40]	; 0x28
 80090f8:	4b26      	ldr	r3, [pc, #152]	; (8009194 <timer_init+0xa0>)
 80090fa:	4298      	cmp	r0, r3
 80090fc:	d018      	beq.n	8009130 <timer_init+0x3c>
 80090fe:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8009102:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009106:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 800910a:	d011      	beq.n	8009130 <timer_init+0x3c>
 800910c:	4a22      	ldr	r2, [pc, #136]	; (8009198 <timer_init+0xa4>)
 800910e:	4290      	cmp	r0, r2
 8009110:	d00e      	beq.n	8009130 <timer_init+0x3c>
 8009112:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8009116:	4290      	cmp	r0, r2
 8009118:	d00a      	beq.n	8009130 <timer_init+0x3c>
 800911a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800911e:	4293      	cmp	r3, r2
 8009120:	d006      	beq.n	8009130 <timer_init+0x3c>
 8009122:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8009126:	4293      	cmp	r3, r2
 8009128:	d002      	beq.n	8009130 <timer_init+0x3c>
 800912a:	4b1c      	ldr	r3, [pc, #112]	; (800919c <timer_init+0xa8>)
 800912c:	4298      	cmp	r0, r3
 800912e:	d10f      	bne.n	8009150 <timer_init+0x5c>
 8009130:	6803      	ldr	r3, [r0, #0]
 8009132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	884b      	ldrh	r3, [r1, #2]
 800913a:	6802      	ldr	r2, [r0, #0]
 800913c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009140:	4313      	orrs	r3, r2
 8009142:	6003      	str	r3, [r0, #0]
 8009144:	888b      	ldrh	r3, [r1, #4]
 8009146:	6802      	ldr	r2, [r0, #0]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	4313      	orrs	r3, r2
 800914e:	6003      	str	r3, [r0, #0]
 8009150:	688b      	ldr	r3, [r1, #8]
 8009152:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009154:	4b12      	ldr	r3, [pc, #72]	; (80091a0 <timer_init+0xac>)
 8009156:	4298      	cmp	r0, r3
 8009158:	d003      	beq.n	8009162 <timer_init+0x6e>
 800915a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800915e:	4298      	cmp	r0, r3
 8009160:	d104      	bne.n	800916c <timer_init+0x78>
 8009162:	6943      	ldr	r3, [r0, #20]
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	6143      	str	r3, [r0, #20]
 800916a:	4770      	bx	lr
 800916c:	6803      	ldr	r3, [r0, #0]
 800916e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009172:	6003      	str	r3, [r0, #0]
 8009174:	898b      	ldrh	r3, [r1, #12]
 8009176:	6802      	ldr	r2, [r0, #0]
 8009178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800917c:	4313      	orrs	r3, r2
 800917e:	6003      	str	r3, [r0, #0]
 8009180:	4b04      	ldr	r3, [pc, #16]	; (8009194 <timer_init+0xa0>)
 8009182:	4298      	cmp	r0, r3
 8009184:	d002      	beq.n	800918c <timer_init+0x98>
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <timer_init+0xa4>)
 8009188:	4298      	cmp	r0, r3
 800918a:	d1ea      	bne.n	8009162 <timer_init+0x6e>
 800918c:	7b8b      	ldrb	r3, [r1, #14]
 800918e:	6303      	str	r3, [r0, #48]	; 0x30
 8009190:	e7e7      	b.n	8009162 <timer_init+0x6e>
 8009192:	bf00      	nop
 8009194:	40012c00 	andmi	r2, r1, r0, lsl #24
 8009198:	40013400 	andmi	r3, r1, r0, lsl #8
 800919c:	40002000 	andmi	r2, r0, r0
 80091a0:	40001000 	andmi	r1, r0, r0

080091a4 <timer_enable>:
 80091a4:	6803      	ldr	r3, [r0, #0]
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	6003      	str	r3, [r0, #0]
 80091ac:	4770      	bx	lr

080091ae <timer_channel_output_mode_config>:
 80091ae:	2903      	cmp	r1, #3
 80091b0:	d81a      	bhi.n	80091e8 <timer_channel_output_mode_config+0x3a>
 80091b2:	e8df f001 	tbb	[pc, r1]
 80091b6:	1a120a02 	bne	848b9c6 <__exidx_end+0x4803ea>
 80091ba:	6983      	ldr	r3, [r0, #24]
 80091bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c0:	6183      	str	r3, [r0, #24]
 80091c2:	6983      	ldr	r3, [r0, #24]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	6182      	str	r2, [r0, #24]
 80091c8:	4770      	bx	lr
 80091ca:	6983      	ldr	r3, [r0, #24]
 80091cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d0:	6183      	str	r3, [r0, #24]
 80091d2:	6983      	ldr	r3, [r0, #24]
 80091d4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80091d8:	e7f5      	b.n	80091c6 <timer_channel_output_mode_config+0x18>
 80091da:	69c3      	ldr	r3, [r0, #28]
 80091dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e0:	61c3      	str	r3, [r0, #28]
 80091e2:	69c3      	ldr	r3, [r0, #28]
 80091e4:	431a      	orrs	r2, r3
 80091e6:	61c2      	str	r2, [r0, #28]
 80091e8:	4770      	bx	lr
 80091ea:	69c3      	ldr	r3, [r0, #28]
 80091ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f0:	61c3      	str	r3, [r0, #28]
 80091f2:	69c3      	ldr	r3, [r0, #28]
 80091f4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80091f8:	e7f5      	b.n	80091e6 <timer_channel_output_mode_config+0x38>

080091fa <timer_channel_output_pulse_value_config>:
 80091fa:	2903      	cmp	r1, #3
 80091fc:	d80a      	bhi.n	8009214 <timer_channel_output_pulse_value_config+0x1a>
 80091fe:	e8df f001 	tbb	[pc, r1]
 8009202:	08060402 	stmdaeq	r6, {r1, sl}
 8009206:	6342      	str	r2, [r0, #52]	; 0x34
 8009208:	4770      	bx	lr
 800920a:	6382      	str	r2, [r0, #56]	; 0x38
 800920c:	4770      	bx	lr
 800920e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8009210:	4770      	bx	lr
 8009212:	6402      	str	r2, [r0, #64]	; 0x40
 8009214:	4770      	bx	lr

08009216 <timer_interrupt_enable>:
 8009216:	68c3      	ldr	r3, [r0, #12]
 8009218:	430b      	orrs	r3, r1
 800921a:	60c3      	str	r3, [r0, #12]
 800921c:	4770      	bx	lr

0800921e <timer_interrupt_flag_clear>:
 800921e:	43c9      	mvns	r1, r1
 8009220:	6101      	str	r1, [r0, #16]
 8009222:	4770      	bx	lr

08009224 <timer_flag_clear>:
 8009224:	43c9      	mvns	r1, r1
 8009226:	6101      	str	r1, [r0, #16]
 8009228:	4770      	bx	lr
	...

0800922c <usart_deinit>:
 800922c:	b508      	push	{r3, lr}
 800922e:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <usart_deinit+0x78>)
 8009230:	4298      	cmp	r0, r3
 8009232:	d028      	beq.n	8009286 <usart_deinit+0x5a>
 8009234:	d808      	bhi.n	8009248 <usart_deinit+0x1c>
 8009236:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800923a:	4298      	cmp	r0, r3
 800923c:	d015      	beq.n	800926a <usart_deinit+0x3e>
 800923e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009242:	4298      	cmp	r0, r3
 8009244:	d018      	beq.n	8009278 <usart_deinit+0x4c>
 8009246:	bd08      	pop	{r3, pc}
 8009248:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <usart_deinit+0x7c>)
 800924a:	4298      	cmp	r0, r3
 800924c:	d022      	beq.n	8009294 <usart_deinit+0x68>
 800924e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8009252:	4298      	cmp	r0, r3
 8009254:	d1f7      	bne.n	8009246 <usart_deinit+0x1a>
 8009256:	f240 300e 	movw	r0, #782	; 0x30e
 800925a:	f7ff fd96 	bl	8008d8a <rcu_periph_reset_enable>
 800925e:	f240 300e 	movw	r0, #782	; 0x30e
 8009262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009266:	f7ff bd92 	b.w	8008d8e <rcu_periph_reset_disable>
 800926a:	f240 4011 	movw	r0, #1041	; 0x411
 800926e:	f7ff fd8c 	bl	8008d8a <rcu_periph_reset_enable>
 8009272:	f240 4011 	movw	r0, #1041	; 0x411
 8009276:	e7f4      	b.n	8009262 <usart_deinit+0x36>
 8009278:	f240 4012 	movw	r0, #1042	; 0x412
 800927c:	f7ff fd85 	bl	8008d8a <rcu_periph_reset_enable>
 8009280:	f240 4012 	movw	r0, #1042	; 0x412
 8009284:	e7ed      	b.n	8009262 <usart_deinit+0x36>
 8009286:	f240 4013 	movw	r0, #1043	; 0x413
 800928a:	f7ff fd7e 	bl	8008d8a <rcu_periph_reset_enable>
 800928e:	f240 4013 	movw	r0, #1043	; 0x413
 8009292:	e7e6      	b.n	8009262 <usart_deinit+0x36>
 8009294:	f240 4014 	movw	r0, #1044	; 0x414
 8009298:	f7ff fd77 	bl	8008d8a <rcu_periph_reset_enable>
 800929c:	f240 4014 	movw	r0, #1044	; 0x414
 80092a0:	e7df      	b.n	8009262 <usart_deinit+0x36>
 80092a2:	bf00      	nop
 80092a4:	40004c00 	andmi	r4, r0, r0, lsl #24
 80092a8:	40005000 	andmi	r5, r0, r0

080092ac <usart_baudrate_set>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <usart_baudrate_set+0x48>)
 80092b0:	4604      	mov	r4, r0
 80092b2:	4298      	cmp	r0, r3
 80092b4:	460d      	mov	r5, r1
 80092b6:	d01b      	beq.n	80092f0 <usart_baudrate_set+0x44>
 80092b8:	d809      	bhi.n	80092ce <usart_baudrate_set+0x22>
 80092ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80092be:	4298      	cmp	r0, r3
 80092c0:	d016      	beq.n	80092f0 <usart_baudrate_set+0x44>
 80092c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c6:	4298      	cmp	r0, r3
 80092c8:	d012      	beq.n	80092f0 <usart_baudrate_set+0x44>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e009      	b.n	80092e2 <usart_baudrate_set+0x36>
 80092ce:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <usart_baudrate_set+0x4c>)
 80092d0:	4298      	cmp	r0, r3
 80092d2:	d00d      	beq.n	80092f0 <usart_baudrate_set+0x44>
 80092d4:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80092d8:	4298      	cmp	r0, r3
 80092da:	d1f6      	bne.n	80092ca <usart_baudrate_set+0x1e>
 80092dc:	2003      	movs	r0, #3
 80092de:	f7ff fdeb 	bl	8008eb8 <rcu_clock_freq_get>
 80092e2:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 80092e6:	fbb3 f1f5 	udiv	r1, r3, r5
 80092ea:	b289      	uxth	r1, r1
 80092ec:	60a1      	str	r1, [r4, #8]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	2002      	movs	r0, #2
 80092f2:	e7f4      	b.n	80092de <usart_baudrate_set+0x32>
 80092f4:	40004c00 	andmi	r4, r0, r0, lsl #24
 80092f8:	40005000 	andmi	r5, r0, r0

080092fc <usart_parity_config>:
 80092fc:	68c2      	ldr	r2, [r0, #12]
 80092fe:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8009302:	60c2      	str	r2, [r0, #12]
 8009304:	68c3      	ldr	r3, [r0, #12]
 8009306:	430b      	orrs	r3, r1
 8009308:	60c3      	str	r3, [r0, #12]
 800930a:	4770      	bx	lr

0800930c <usart_word_length_set>:
 800930c:	68c2      	ldr	r2, [r0, #12]
 800930e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009312:	60c2      	str	r2, [r0, #12]
 8009314:	68c3      	ldr	r3, [r0, #12]
 8009316:	430b      	orrs	r3, r1
 8009318:	60c3      	str	r3, [r0, #12]
 800931a:	4770      	bx	lr

0800931c <usart_stop_bit_set>:
 800931c:	6902      	ldr	r2, [r0, #16]
 800931e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009322:	6102      	str	r2, [r0, #16]
 8009324:	6903      	ldr	r3, [r0, #16]
 8009326:	430b      	orrs	r3, r1
 8009328:	6103      	str	r3, [r0, #16]
 800932a:	4770      	bx	lr

0800932c <usart_transmit_config>:
 800932c:	68c3      	ldr	r3, [r0, #12]
 800932e:	f023 0308 	bic.w	r3, r3, #8
 8009332:	430b      	orrs	r3, r1
 8009334:	60c3      	str	r3, [r0, #12]
 8009336:	4770      	bx	lr

08009338 <usart_receive_config>:
 8009338:	68c3      	ldr	r3, [r0, #12]
 800933a:	f023 0304 	bic.w	r3, r3, #4
 800933e:	430b      	orrs	r3, r1
 8009340:	60c3      	str	r3, [r0, #12]
 8009342:	4770      	bx	lr

08009344 <usart_hardware_flow_rts_config>:
 8009344:	6943      	ldr	r3, [r0, #20]
 8009346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800934a:	430b      	orrs	r3, r1
 800934c:	6143      	str	r3, [r0, #20]
 800934e:	4770      	bx	lr

08009350 <usart_hardware_flow_cts_config>:
 8009350:	6943      	ldr	r3, [r0, #20]
 8009352:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009356:	430b      	orrs	r3, r1
 8009358:	6143      	str	r3, [r0, #20]
 800935a:	4770      	bx	lr

0800935c <usart_dma_transmit_config>:
 800935c:	6943      	ldr	r3, [r0, #20]
 800935e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009362:	430b      	orrs	r3, r1
 8009364:	6143      	str	r3, [r0, #20]
 8009366:	4770      	bx	lr

08009368 <usart_flag_get>:
 8009368:	098b      	lsrs	r3, r1, #6
 800936a:	5818      	ldr	r0, [r3, r0]
 800936c:	f001 011f 	and.w	r1, r1, #31
 8009370:	40c8      	lsrs	r0, r1
 8009372:	f000 0001 	and.w	r0, r0, #1
 8009376:	4770      	bx	lr

08009378 <usart_interrupt_enable>:
 8009378:	2301      	movs	r3, #1
 800937a:	b510      	push	{r4, lr}
 800937c:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8009380:	5814      	ldr	r4, [r2, r0]
 8009382:	f001 011f 	and.w	r1, r1, #31
 8009386:	fa03 f101 	lsl.w	r1, r3, r1
 800938a:	4321      	orrs	r1, r4
 800938c:	5011      	str	r1, [r2, r0]
 800938e:	bd10      	pop	{r4, pc}

08009390 <usart_interrupt_disable>:
 8009390:	2201      	movs	r2, #1
 8009392:	b510      	push	{r4, lr}
 8009394:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8009398:	5823      	ldr	r3, [r4, r0]
 800939a:	f001 011f 	and.w	r1, r1, #31
 800939e:	fa02 f101 	lsl.w	r1, r2, r1
 80093a2:	ea23 0101 	bic.w	r1, r3, r1
 80093a6:	5021      	str	r1, [r4, r0]
 80093a8:	bd10      	pop	{r4, pc}

080093aa <usart_interrupt_flag_clear>:
 80093aa:	2201      	movs	r2, #1
 80093ac:	b510      	push	{r4, lr}
 80093ae:	0d8c      	lsrs	r4, r1, #22
 80093b0:	5823      	ldr	r3, [r4, r0]
 80093b2:	f3c1 4104 	ubfx	r1, r1, #16, #5
 80093b6:	fa02 f101 	lsl.w	r1, r2, r1
 80093ba:	ea23 0101 	bic.w	r1, r3, r1
 80093be:	5021      	str	r1, [r4, r0]
 80093c0:	bd10      	pop	{r4, pc}
	...

080093c4 <gd32_adc_init()>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	f240 6009 	movw	r0, #1545	; 0x609
 80093ca:	4c21      	ldr	r4, [pc, #132]	; (8009450 <gd32_adc_init()+0x8c>)
 80093cc:	f7ff fcc0 	bl	8008d50 <rcu_periph_clock_enable>
 80093d0:	2005      	movs	r0, #5
 80093d2:	f7ff fcef 	bl	8008db4 <rcu_adc_clock_config>
 80093d6:	4620      	mov	r0, r4
 80093d8:	2201      	movs	r2, #1
 80093da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093de:	f000 fb91 	bl	8009b04 <adc_special_function_config>
 80093e2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80093e6:	4620      	mov	r0, r4
 80093e8:	2102      	movs	r1, #2
 80093ea:	f000 fc2b 	bl	8009c44 <adc_external_trigger_source_config>
 80093ee:	2100      	movs	r1, #0
 80093f0:	4620      	mov	r0, r4
 80093f2:	f000 fbaf 	bl	8009b54 <adc_data_alignment_config>
 80093f6:	2000      	movs	r0, #0
 80093f8:	f000 fb74 	bl	8009ae4 <adc_mode_config>
 80093fc:	2202      	movs	r2, #2
 80093fe:	4620      	mov	r0, r4
 8009400:	4611      	mov	r1, r2
 8009402:	f000 fbd3 	bl	8009bac <adc_channel_length_config>
 8009406:	4620      	mov	r0, r4
 8009408:	2307      	movs	r3, #7
 800940a:	2210      	movs	r2, #16
 800940c:	2100      	movs	r1, #0
 800940e:	f000 fbea 	bl	8009be6 <adc_inserted_channel_config>
 8009412:	2307      	movs	r3, #7
 8009414:	4620      	mov	r0, r4
 8009416:	2211      	movs	r2, #17
 8009418:	2101      	movs	r1, #1
 800941a:	f000 fbe4 	bl	8009be6 <adc_inserted_channel_config>
 800941e:	2201      	movs	r2, #1
 8009420:	2102      	movs	r1, #2
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fc1f 	bl	8009c66 <adc_external_trigger_config>
 8009428:	f000 fbb6 	bl	8009b98 <adc_tempsensor_vrefint_enable>
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fb9a 	bl	8009b66 <adc_enable>
 8009432:	2100      	movs	r1, #0
 8009434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009438:	f000 fb3c 	bl	8009ab4 <udelay(unsigned int, unsigned int)>
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fb9a 	bl	8009b76 <adc_calibration_enable>
 8009442:	4620      	mov	r0, r4
 8009444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009448:	2102      	movs	r1, #2
 800944a:	f000 bc27 	b.w	8009c9c <adc_software_trigger_enable>
 800944e:	bf00      	nop
 8009450:	40012400 	andmi	r2, r1, r0, lsl #8
 8009454:	00000000 	andeq	r0, r0, r0

08009458 <gd32_adc_gettemp()>:
 8009458:	4b1b      	ldr	r3, [pc, #108]	; (80094c8 <gd32_adc_gettemp()+0x70>)
 800945a:	b510      	push	{r4, lr}
 800945c:	f8d3 443c 	ldr.w	r4, [r3, #1084]	; 0x43c
 8009460:	2102      	movs	r1, #2
 8009462:	481a      	ldr	r0, [pc, #104]	; (80094cc <gd32_adc_gettemp()+0x74>)
 8009464:	f000 fc1a 	bl	8009c9c <adc_software_trigger_enable>
 8009468:	4620      	mov	r0, r4
 800946a:	f7f7 f937 	bl	80006dc <__aeabi_ui2d>
 800946e:	a310      	add	r3, pc, #64	; (adr r3, 80094b0 <gd32_adc_gettemp()+0x58>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f7f7 f9ac 	bl	80007d0 <__aeabi_dmul>
 8009478:	2200      	movs	r2, #0
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <gd32_adc_gettemp()+0x78>)
 800947c:	f7f7 f9a8 	bl	80007d0 <__aeabi_dmul>
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	a10c      	add	r1, pc, #48	; (adr r1, 80094b8 <gd32_adc_gettemp()+0x60>)
 8009486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800948a:	f7f6 ffe9 	bl	8000460 <__aeabi_dsub>
 800948e:	2200      	movs	r2, #0
 8009490:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <gd32_adc_gettemp()+0x7c>)
 8009492:	f7f7 f99d 	bl	80007d0 <__aeabi_dmul>
 8009496:	a30a      	add	r3, pc, #40	; (adr r3, 80094c0 <gd32_adc_gettemp()+0x68>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f7 fac2 	bl	8000a24 <__aeabi_ddiv>
 80094a0:	2200      	movs	r2, #0
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <gd32_adc_gettemp()+0x80>)
 80094a4:	f7f6 ffde 	bl	8000464 <__adddf3>
 80094a8:	f7f7 fba4 	bl	8000bf4 <__aeabi_d2f>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	bf00      	nop
 80094b0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80094b4:	400a6666 	andmi	r6, sl, r6, ror #12
 80094b8:	ae147ae1 	vnmlage.f32	s14, s9, s3
 80094bc:	3ff6e147 	svccc	0x00f6e147
 80094c0:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
 80094c4:	40113333 	andsmi	r3, r1, r3, lsr r3
 80094c8:	40012000 	andmi	r2, r1, r0
 80094cc:	40012400 	andmi	r2, r1, r0, lsl #8
 80094d0:	3f300000 	svccc	0x00300000
 80094d4:	408f4000 	addmi	r4, pc, r0
 80094d8:	40390000 	eorsmi	r0, r9, r0

080094dc <_stop() [clone .isra.0]>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	4806      	ldr	r0, [pc, #24]	; (80094f8 <_stop() [clone .isra.0]+0x1c>)
 80094e0:	f000 fc6c 	bl	8009dbc <i2c_stop_on_bus>
 80094e4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80094e8:	4a04      	ldr	r2, [pc, #16]	; (80094fc <_stop() [clone .isra.0]+0x20>)
 80094ea:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 80094ee:	0589      	lsls	r1, r1, #22
 80094f0:	d501      	bpl.n	80094f6 <_stop() [clone .isra.0]+0x1a>
 80094f2:	3b01      	subs	r3, #1
 80094f4:	d1f9      	bne.n	80094ea <_stop() [clone .isra.0]+0xe>
 80094f6:	bd08      	pop	{r3, pc}
 80094f8:	40005400 	andmi	r5, r0, r0, lsl #8
 80094fc:	40005000 	andmi	r5, r0, r0

08009500 <gd32_i2c_begin()>:
 8009500:	b510      	push	{r4, lr}
 8009502:	f240 7015 	movw	r0, #1813	; 0x715
 8009506:	f7ff fc23 	bl	8008d50 <rcu_periph_clock_enable>
 800950a:	4c12      	ldr	r4, [pc, #72]	; (8009554 <gd32_i2c_begin()+0x54>)
 800950c:	f240 6003 	movw	r0, #1539	; 0x603
 8009510:	f7ff fc1e 	bl	8008d50 <rcu_periph_clock_enable>
 8009514:	f240 6003 	movw	r0, #1539	; 0x603
 8009518:	f7ff fc1a 	bl	8008d50 <rcu_periph_clock_enable>
 800951c:	4620      	mov	r0, r4
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	2203      	movs	r2, #3
 8009522:	211c      	movs	r1, #28
 8009524:	f7ff fb82 	bl	8008c2c <gpio_init>
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	4620      	mov	r0, r4
 800952c:	2203      	movs	r2, #3
 800952e:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8009532:	211c      	movs	r1, #28
 8009534:	f7ff fb7a 	bl	8008c2c <gpio_init>
 8009538:	4620      	mov	r0, r4
 800953a:	4907      	ldr	r1, [pc, #28]	; (8009558 <gd32_i2c_begin()+0x58>)
 800953c:	2200      	movs	r2, #0
 800953e:	f000 fbbb 	bl	8009cb8 <i2c_clock_config>
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fc30 	bl	8009da8 <i2c_enable>
 8009548:	4620      	mov	r0, r4
 800954a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800954e:	2101      	movs	r1, #1
 8009550:	f000 bc10 	b.w	8009d74 <i2c_ack_config>
 8009554:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009558:	00061a80 	andeq	r1, r6, r0, lsl #21

0800955c <gd32_i2c_set_baudrate(unsigned int)>:
 800955c:	4601      	mov	r1, r0
 800955e:	2200      	movs	r2, #0
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8009562:	f000 bba9 	b.w	8009cb8 <i2c_clock_config>
 8009566:	bf00      	nop
 8009568:	40005400 	andmi	r5, r0, r0, lsl #8

0800956c <gd32_i2c_set_address(unsigned char)>:
 800956c:	4b01      	ldr	r3, [pc, #4]	; (8009574 <gd32_i2c_set_address(unsigned char)+0x8>)
 800956e:	0040      	lsls	r0, r0, #1
 8009570:	7018      	strb	r0, [r3, #0]
 8009572:	4770      	bx	lr
 8009574:	20001818 	andcs	r1, r0, r8, lsl r8

08009578 <gd32_i2c_write(char const*, unsigned int)>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	4604      	mov	r4, r0
 800957c:	460f      	mov	r7, r1
 800957e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009582:	4e2e      	ldr	r6, [pc, #184]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8009584:	f240 6101 	movw	r1, #1537	; 0x601
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fc21 	bl	8009dd0 <i2c_flag_get>
 800958e:	b138      	cbz	r0, 80095a0 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8009590:	3d01      	subs	r5, #1
 8009592:	d1f7      	bne.n	8009584 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8009594:	f7ff ffa2 	bl	80094dc <_stop() [clone .isra.0]>
 8009598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800959c:	4240      	negs	r0, r0
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a0:	4826      	ldr	r0, [pc, #152]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095a2:	f000 fc06 	bl	8009db2 <i2c_start_on_bus>
 80095a6:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095aa:	4e24      	ldr	r6, [pc, #144]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095ac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80095b0:	4630      	mov	r0, r6
 80095b2:	f000 fc0d 	bl	8009dd0 <i2c_flag_get>
 80095b6:	bb68      	cbnz	r0, 8009614 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 80095b8:	3d01      	subs	r5, #1
 80095ba:	d1f7      	bne.n	80095ac <gd32_i2c_write(char const*, unsigned int)+0x34>
 80095bc:	e7ea      	b.n	8009594 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 80095be:	f240 5101 	movw	r1, #1281	; 0x501
 80095c2:	481e      	ldr	r0, [pc, #120]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095c4:	f000 fc0c 	bl	8009de0 <i2c_flag_clear>
 80095c8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095cc:	4e1b      	ldr	r6, [pc, #108]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095ce:	f240 5107 	movw	r1, #1287	; 0x507
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 fbfc 	bl	8009dd0 <i2c_flag_get>
 80095d8:	2801      	cmp	r0, #1
 80095da:	d114      	bne.n	8009606 <gd32_i2c_write(char const*, unsigned int)+0x8e>
 80095dc:	4e17      	ldr	r6, [pc, #92]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095de:	4427      	add	r7, r4
 80095e0:	42a7      	cmp	r7, r4
 80095e2:	d013      	beq.n	800960c <gd32_i2c_write(char const*, unsigned int)+0x94>
 80095e4:	4630      	mov	r0, r6
 80095e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ea:	f000 fbec 	bl	8009dc6 <i2c_data_transmit>
 80095ee:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095f2:	f240 5102 	movw	r1, #1282	; 0x502
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 fbea 	bl	8009dd0 <i2c_flag_get>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d1ef      	bne.n	80095e0 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8009600:	3d01      	subs	r5, #1
 8009602:	d1f6      	bne.n	80095f2 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8009604:	e7c6      	b.n	8009594 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8009606:	3d01      	subs	r5, #1
 8009608:	d1e1      	bne.n	80095ce <gd32_i2c_write(char const*, unsigned int)+0x56>
 800960a:	e7c3      	b.n	8009594 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 800960c:	f7ff ff66 	bl	80094dc <_stop() [clone .isra.0]>
 8009610:	2000      	movs	r0, #0
 8009612:	e7c3      	b.n	800959c <gd32_i2c_write(char const*, unsigned int)+0x24>
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8009616:	f06f 0201 	mvn.w	r2, #1
 800961a:	7819      	ldrb	r1, [r3, #0]
 800961c:	4807      	ldr	r0, [pc, #28]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 800961e:	f000 fbbb 	bl	8009d98 <i2c_master_addressing>
 8009622:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009626:	4e05      	ldr	r6, [pc, #20]	; (800963c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8009628:	f240 5101 	movw	r1, #1281	; 0x501
 800962c:	4630      	mov	r0, r6
 800962e:	f000 fbcf 	bl	8009dd0 <i2c_flag_get>
 8009632:	2800      	cmp	r0, #0
 8009634:	d1c3      	bne.n	80095be <gd32_i2c_write(char const*, unsigned int)+0x46>
 8009636:	3d01      	subs	r5, #1
 8009638:	d1f6      	bne.n	8009628 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 800963a:	e7ab      	b.n	8009594 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 800963c:	40005400 	andmi	r5, r0, r0, lsl #8
 8009640:	20001818 	andcs	r1, r0, r8, lsl r8

08009644 <gd32_i2c_read(char*, unsigned int)>:
 8009644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	4680      	mov	r8, r0
 800964a:	460c      	mov	r4, r1
 800964c:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009650:	4f49      	ldr	r7, [pc, #292]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8009652:	f240 6101 	movw	r1, #1537	; 0x601
 8009656:	4638      	mov	r0, r7
 8009658:	f000 fbba 	bl	8009dd0 <i2c_flag_get>
 800965c:	4605      	mov	r5, r0
 800965e:	b128      	cbz	r0, 800966c <gd32_i2c_read(char*, unsigned int)+0x28>
 8009660:	3e01      	subs	r6, #1
 8009662:	d1f6      	bne.n	8009652 <gd32_i2c_read(char*, unsigned int)+0xe>
 8009664:	f7ff ff3a 	bl	80094dc <_stop() [clone .isra.0]>
 8009668:	2504      	movs	r5, #4
 800966a:	e082      	b.n	8009772 <gd32_i2c_read(char*, unsigned int)+0x12e>
 800966c:	2c02      	cmp	r4, #2
 800966e:	d103      	bne.n	8009678 <gd32_i2c_read(char*, unsigned int)+0x34>
 8009670:	4601      	mov	r1, r0
 8009672:	4841      	ldr	r0, [pc, #260]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8009674:	f000 fb87 	bl	8009d86 <i2c_ackpos_config>
 8009678:	483f      	ldr	r0, [pc, #252]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 800967a:	f000 fb9a 	bl	8009db2 <i2c_start_on_bus>
 800967e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009682:	4f3d      	ldr	r7, [pc, #244]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8009684:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009688:	4638      	mov	r0, r7
 800968a:	f000 fba1 	bl	8009dd0 <i2c_flag_get>
 800968e:	b910      	cbnz	r0, 8009696 <gd32_i2c_read(char*, unsigned int)+0x52>
 8009690:	3e01      	subs	r6, #1
 8009692:	d1f7      	bne.n	8009684 <gd32_i2c_read(char*, unsigned int)+0x40>
 8009694:	e7e6      	b.n	8009664 <gd32_i2c_read(char*, unsigned int)+0x20>
 8009696:	4b39      	ldr	r3, [pc, #228]	; (800977c <gd32_i2c_read(char*, unsigned int)+0x138>)
 8009698:	2201      	movs	r2, #1
 800969a:	7819      	ldrb	r1, [r3, #0]
 800969c:	4836      	ldr	r0, [pc, #216]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 800969e:	f000 fb7b 	bl	8009d98 <i2c_master_addressing>
 80096a2:	2c02      	cmp	r4, #2
 80096a4:	d803      	bhi.n	80096ae <gd32_i2c_read(char*, unsigned int)+0x6a>
 80096a6:	2100      	movs	r1, #0
 80096a8:	4833      	ldr	r0, [pc, #204]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80096aa:	f000 fb63 	bl	8009d74 <i2c_ack_config>
 80096ae:	f640 76ff 	movw	r6, #4095	; 0xfff
 80096b2:	4f31      	ldr	r7, [pc, #196]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80096b4:	f240 5101 	movw	r1, #1281	; 0x501
 80096b8:	4638      	mov	r0, r7
 80096ba:	f000 fb89 	bl	8009dd0 <i2c_flag_get>
 80096be:	b910      	cbnz	r0, 80096c6 <gd32_i2c_read(char*, unsigned int)+0x82>
 80096c0:	3e01      	subs	r6, #1
 80096c2:	d1f7      	bne.n	80096b4 <gd32_i2c_read(char*, unsigned int)+0x70>
 80096c4:	e7ce      	b.n	8009664 <gd32_i2c_read(char*, unsigned int)+0x20>
 80096c6:	f240 5101 	movw	r1, #1281	; 0x501
 80096ca:	482b      	ldr	r0, [pc, #172]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80096cc:	f000 fb88 	bl	8009de0 <i2c_flag_clear>
 80096d0:	2c01      	cmp	r4, #1
 80096d2:	d102      	bne.n	80096da <gd32_i2c_read(char*, unsigned int)+0x96>
 80096d4:	4828      	ldr	r0, [pc, #160]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80096d6:	f000 fb71 	bl	8009dbc <i2c_stop_on_bus>
 80096da:	f640 77ff 	movw	r7, #4095	; 0xfff
 80096de:	4e26      	ldr	r6, [pc, #152]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80096e0:	b3ac      	cbz	r4, 800974e <gd32_i2c_read(char*, unsigned int)+0x10a>
 80096e2:	2c03      	cmp	r4, #3
 80096e4:	d121      	bne.n	800972a <gd32_i2c_read(char*, unsigned int)+0xe6>
 80096e6:	f640 79ff 	movw	r9, #4095	; 0xfff
 80096ea:	f240 5102 	movw	r1, #1282	; 0x502
 80096ee:	4630      	mov	r0, r6
 80096f0:	f000 fb6e 	bl	8009dd0 <i2c_flag_get>
 80096f4:	b918      	cbnz	r0, 80096fe <gd32_i2c_read(char*, unsigned int)+0xba>
 80096f6:	f1b9 0901 	subs.w	r9, r9, #1
 80096fa:	d1f6      	bne.n	80096ea <gd32_i2c_read(char*, unsigned int)+0xa6>
 80096fc:	e7b2      	b.n	8009664 <gd32_i2c_read(char*, unsigned int)+0x20>
 80096fe:	2100      	movs	r1, #0
 8009700:	4630      	mov	r0, r6
 8009702:	f000 fb37 	bl	8009d74 <i2c_ack_config>
 8009706:	f240 5106 	movw	r1, #1286	; 0x506
 800970a:	4630      	mov	r0, r6
 800970c:	f000 fb60 	bl	8009dd0 <i2c_flag_get>
 8009710:	b138      	cbz	r0, 8009722 <gd32_i2c_read(char*, unsigned int)+0xde>
 8009712:	4630      	mov	r0, r6
 8009714:	f000 fb59 	bl	8009dca <i2c_data_receive>
 8009718:	f640 77ff 	movw	r7, #4095	; 0xfff
 800971c:	f808 0b01 	strb.w	r0, [r8], #1
 8009720:	3c01      	subs	r4, #1
 8009722:	3f01      	subs	r7, #1
 8009724:	2f00      	cmp	r7, #0
 8009726:	dcdb      	bgt.n	80096e0 <gd32_i2c_read(char*, unsigned int)+0x9c>
 8009728:	e79c      	b.n	8009664 <gd32_i2c_read(char*, unsigned int)+0x20>
 800972a:	2c02      	cmp	r4, #2
 800972c:	d1eb      	bne.n	8009706 <gd32_i2c_read(char*, unsigned int)+0xc2>
 800972e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009732:	f240 5102 	movw	r1, #1282	; 0x502
 8009736:	4630      	mov	r0, r6
 8009738:	f000 fb4a 	bl	8009dd0 <i2c_flag_get>
 800973c:	b918      	cbnz	r0, 8009746 <gd32_i2c_read(char*, unsigned int)+0x102>
 800973e:	f1b9 0901 	subs.w	r9, r9, #1
 8009742:	d1f6      	bne.n	8009732 <gd32_i2c_read(char*, unsigned int)+0xee>
 8009744:	e78e      	b.n	8009664 <gd32_i2c_read(char*, unsigned int)+0x20>
 8009746:	4630      	mov	r0, r6
 8009748:	f000 fb38 	bl	8009dbc <i2c_stop_on_bus>
 800974c:	e7db      	b.n	8009706 <gd32_i2c_read(char*, unsigned int)+0xc2>
 800974e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009752:	4a0b      	ldr	r2, [pc, #44]	; (8009780 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8009754:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8009758:	0589      	lsls	r1, r1, #22
 800975a:	d502      	bpl.n	8009762 <gd32_i2c_read(char*, unsigned int)+0x11e>
 800975c:	3b01      	subs	r3, #1
 800975e:	d1f9      	bne.n	8009754 <gd32_i2c_read(char*, unsigned int)+0x110>
 8009760:	e782      	b.n	8009668 <gd32_i2c_read(char*, unsigned int)+0x24>
 8009762:	2101      	movs	r1, #1
 8009764:	4804      	ldr	r0, [pc, #16]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8009766:	f000 fb05 	bl	8009d74 <i2c_ack_config>
 800976a:	2101      	movs	r1, #1
 800976c:	4802      	ldr	r0, [pc, #8]	; (8009778 <gd32_i2c_read(char*, unsigned int)+0x134>)
 800976e:	f000 fb0a 	bl	8009d86 <i2c_ackpos_config>
 8009772:	4628      	mov	r0, r5
 8009774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009778:	40005400 	andmi	r5, r0, r0, lsl #8
 800977c:	20001818 	andcs	r1, r0, r8, lsl r8
 8009780:	40005000 	andmi	r5, r0, r0

08009784 <gd32_spi_dma_begin()>:
 8009784:	b530      	push	{r4, r5, lr}
 8009786:	f240 6002 	movw	r0, #1538	; 0x602
 800978a:	b089      	sub	sp, #36	; 0x24
 800978c:	f7ff fae0 	bl	8008d50 <rcu_periph_clock_enable>
 8009790:	f240 6003 	movw	r0, #1539	; 0x603
 8009794:	f7ff fadc 	bl	8008d50 <rcu_periph_clock_enable>
 8009798:	f240 700f 	movw	r0, #1807	; 0x70f
 800979c:	f7ff fad8 	bl	8008d50 <rcu_periph_clock_enable>
 80097a0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80097a4:	f7ff fad4 	bl	8008d50 <rcu_periph_clock_enable>
 80097a8:	2338      	movs	r3, #56	; 0x38
 80097aa:	2203      	movs	r2, #3
 80097ac:	2118      	movs	r1, #24
 80097ae:	4829      	ldr	r0, [pc, #164]	; (8009854 <gd32_spi_dma_begin()+0xd0>)
 80097b0:	f7ff fa3c 	bl	8008c2c <gpio_init>
 80097b4:	4c28      	ldr	r4, [pc, #160]	; (8009858 <gd32_spi_dma_begin()+0xd4>)
 80097b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ba:	2203      	movs	r2, #3
 80097bc:	2118      	movs	r1, #24
 80097be:	4827      	ldr	r0, [pc, #156]	; (800985c <gd32_spi_dma_begin()+0xd8>)
 80097c0:	f7ff fa34 	bl	8008c2c <gpio_init>
 80097c4:	2101      	movs	r1, #1
 80097c6:	4826      	ldr	r0, [pc, #152]	; (8009860 <gd32_spi_dma_begin()+0xdc>)
 80097c8:	f7ff fa8a 	bl	8008ce0 <gpio_pin_remap_config>
 80097cc:	4620      	mov	r0, r4
 80097ce:	f000 fb5e 	bl	8009e8e <i2s_disable>
 80097d2:	2300      	movs	r3, #0
 80097d4:	4620      	mov	r0, r4
 80097d6:	461a      	mov	r2, r3
 80097d8:	4922      	ldr	r1, [pc, #136]	; (8009864 <gd32_spi_dma_begin()+0xe0>)
 80097da:	f000 fb23 	bl	8009e24 <i2s_psc_config>
 80097de:	2300      	movs	r3, #0
 80097e0:	2210      	movs	r2, #16
 80097e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 fb0d 	bl	8009e06 <i2s_init>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fb49 	bl	8009e84 <i2s_enable>
 80097f2:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 80097f6:	f240 5001 	movw	r0, #1281	; 0x501
 80097fa:	f7ff faa9 	bl	8008d50 <rcu_periph_clock_enable>
 80097fe:	2101      	movs	r1, #1
 8009800:	4620      	mov	r0, r4
 8009802:	f7ff f905 	bl	8008a10 <dma_deinit>
 8009806:	a801      	add	r0, sp, #4
 8009808:	f7ff f91e 	bl	8008a48 <dma_struct_para_init>
 800980c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009810:	2501      	movs	r5, #1
 8009812:	9304      	str	r3, [sp, #16]
 8009814:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800981c:	4912      	ldr	r1, [pc, #72]	; (8009868 <gd32_spi_dma_begin()+0xe4>)
 800981e:	4620      	mov	r0, r4
 8009820:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8009824:	9206      	str	r2, [sp, #24]
 8009826:	4629      	mov	r1, r5
 8009828:	aa01      	add	r2, sp, #4
 800982a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800982e:	f88d 501e 	strb.w	r5, [sp, #30]
 8009832:	f7ff f913 	bl	8008a5c <dma_init>
 8009836:	4629      	mov	r1, r5
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff f949 	bl	8008ad0 <dma_circulation_disable>
 800983e:	4629      	mov	r1, r5
 8009840:	4620      	mov	r0, r4
 8009842:	f7ff f955 	bl	8008af0 <dma_memory_to_memory_disable>
 8009846:	2200      	movs	r2, #0
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <gd32_spi_dma_begin()+0xe8>)
 800984a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800984e:	b009      	add	sp, #36	; 0x24
 8009850:	bd30      	pop	{r4, r5, pc}
 8009852:	bf00      	nop
 8009854:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009858:	40003c00 	andmi	r3, r0, r0, lsl #24
 800985c:	40010800 	andmi	r0, r1, r0, lsl #16
 8009860:	00300400 	eorseq	r0, r0, r0, lsl #8
 8009864:	00030d40 	andeq	r0, r3, r0, asr #26
 8009868:	40003c0c 	andmi	r3, r0, ip, lsl #24
 800986c:	40020000 	andmi	r0, r2, r0

08009870 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4c08      	ldr	r4, [pc, #32]	; (8009894 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8009874:	4605      	mov	r5, r0
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fb09 	bl	8009e8e <i2s_disable>
 800987c:	2300      	movs	r3, #0
 800987e:	4620      	mov	r0, r4
 8009880:	461a      	mov	r2, r3
 8009882:	0969      	lsrs	r1, r5, #5
 8009884:	f000 face 	bl	8009e24 <i2s_psc_config>
 8009888:	4620      	mov	r0, r4
 800988a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988e:	f000 baf9 	b.w	8009e84 <i2s_enable>
 8009892:	bf00      	nop
 8009894:	40003c00 	andmi	r3, r0, r0, lsl #24

08009898 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8009898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989c:	6003      	str	r3, [r0, #0]
 800989e:	4801      	ldr	r0, [pc, #4]	; (80098a4 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	2000181c 	andcs	r1, r0, ip, lsl r8

080098a8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80098a8:	4a0a      	ldr	r2, [pc, #40]	; (80098d4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80098aa:	3101      	adds	r1, #1
 80098ac:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80098b0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80098b4:	f023 0301 	bic.w	r3, r3, #1
 80098b8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80098bc:	f043 0301 	orr.w	r3, r3, #1
 80098c0:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80098c4:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80098c8:	4803      	ldr	r0, [pc, #12]	; (80098d8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80098ca:	2100      	movs	r1, #0
 80098cc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80098d0:	f000 bae2 	b.w	8009e98 <spi_dma_enable>
 80098d4:	40020000 	andmi	r0, r2, r0
 80098d8:	40003c00 	andmi	r3, r0, r0, lsl #24

080098dc <gd32_spi_dma_tx_is_active()>:
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <gd32_spi_dma_tx_is_active()+0x10>)
 80098de:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80098e2:	3800      	subs	r0, #0
 80098e4:	bf18      	it	ne
 80098e6:	2001      	movne	r0, #1
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40020000 	andmi	r0, r2, r0

080098f0 <gd32_uart_begin>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	461d      	mov	r5, r3
 80098f4:	4b5e      	ldr	r3, [pc, #376]	; (8009a70 <gd32_uart_begin+0x180>)
 80098f6:	4604      	mov	r4, r0
 80098f8:	4298      	cmp	r0, r3
 80098fa:	460f      	mov	r7, r1
 80098fc:	4616      	mov	r6, r2
 80098fe:	d071      	beq.n	80099e4 <gd32_uart_begin+0xf4>
 8009900:	d80a      	bhi.n	8009918 <gd32_uart_begin+0x28>
 8009902:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009906:	4298      	cmp	r0, r3
 8009908:	d069      	beq.n	80099de <gd32_uart_begin+0xee>
 800990a:	f240 7012 	movw	r0, #1810	; 0x712
 800990e:	f7ff fa1f 	bl	8008d50 <rcu_periph_clock_enable>
 8009912:	f240 6004 	movw	r0, #1540	; 0x604
 8009916:	e008      	b.n	800992a <gd32_uart_begin+0x3a>
 8009918:	4b56      	ldr	r3, [pc, #344]	; (8009a74 <gd32_uart_begin+0x184>)
 800991a:	4298      	cmp	r0, r3
 800991c:	d065      	beq.n	80099ea <gd32_uart_begin+0xfa>
 800991e:	f240 600e 	movw	r0, #1550	; 0x60e
 8009922:	f7ff fa15 	bl	8008d50 <rcu_periph_clock_enable>
 8009926:	f240 6002 	movw	r0, #1538	; 0x602
 800992a:	f7ff fa11 	bl	8008d50 <rcu_periph_clock_enable>
 800992e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009932:	f7ff fa0d 	bl	8008d50 <rcu_periph_clock_enable>
 8009936:	4b4e      	ldr	r3, [pc, #312]	; (8009a70 <gd32_uart_begin+0x180>)
 8009938:	429c      	cmp	r4, r3
 800993a:	d07b      	beq.n	8009a34 <gd32_uart_begin+0x144>
 800993c:	d860      	bhi.n	8009a00 <gd32_uart_begin+0x110>
 800993e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009942:	429c      	cmp	r4, r3
 8009944:	d06e      	beq.n	8009a24 <gd32_uart_begin+0x134>
 8009946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800994a:	2203      	movs	r2, #3
 800994c:	2118      	movs	r1, #24
 800994e:	484a      	ldr	r0, [pc, #296]	; (8009a78 <gd32_uart_begin+0x188>)
 8009950:	f7ff f96c 	bl	8008c2c <gpio_init>
 8009954:	2104      	movs	r1, #4
 8009956:	4848      	ldr	r0, [pc, #288]	; (8009a78 <gd32_uart_begin+0x188>)
 8009958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800995c:	2203      	movs	r2, #3
 800995e:	f7ff f965 	bl	8008c2c <gpio_init>
 8009962:	2101      	movs	r1, #1
 8009964:	4845      	ldr	r0, [pc, #276]	; (8009a7c <gd32_uart_begin+0x18c>)
 8009966:	f7ff f9bb 	bl	8008ce0 <gpio_pin_remap_config>
 800996a:	4620      	mov	r0, r4
 800996c:	f7ff fc5e 	bl	800922c <usart_deinit>
 8009970:	68e3      	ldr	r3, [r4, #12]
 8009972:	4639      	mov	r1, r7
 8009974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009978:	60e3      	str	r3, [r4, #12]
 800997a:	4620      	mov	r0, r4
 800997c:	f7ff fc96 	bl	80092ac <usart_baudrate_set>
 8009980:	2e09      	cmp	r6, #9
 8009982:	bf0c      	ite	eq
 8009984:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8009988:	2100      	movne	r1, #0
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff fcbe 	bl	800930c <usart_word_length_set>
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	4620      	mov	r0, r4
 8009994:	2b02      	cmp	r3, #2
 8009996:	bf0c      	ite	eq
 8009998:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 800999c:	2100      	movne	r1, #0
 800999e:	f7ff fcbd 	bl	800931c <usart_stop_bit_set>
 80099a2:	2d01      	cmp	r5, #1
 80099a4:	d05f      	beq.n	8009a66 <gd32_uart_begin+0x176>
 80099a6:	2d02      	cmp	r5, #2
 80099a8:	d160      	bne.n	8009a6c <gd32_uart_begin+0x17c>
 80099aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff fca4 	bl	80092fc <usart_parity_config>
 80099b4:	2100      	movs	r1, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7ff fcc4 	bl	8009344 <usart_hardware_flow_rts_config>
 80099bc:	2100      	movs	r1, #0
 80099be:	4620      	mov	r0, r4
 80099c0:	f7ff fcc6 	bl	8009350 <usart_hardware_flow_cts_config>
 80099c4:	2104      	movs	r1, #4
 80099c6:	4620      	mov	r0, r4
 80099c8:	f7ff fcb6 	bl	8009338 <usart_receive_config>
 80099cc:	2108      	movs	r1, #8
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7ff fcac 	bl	800932c <usart_transmit_config>
 80099d4:	68e3      	ldr	r3, [r4, #12]
 80099d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80099da:	60e3      	str	r3, [r4, #12]
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099de:	f240 7011 	movw	r0, #1809	; 0x711
 80099e2:	e79e      	b.n	8009922 <gd32_uart_begin+0x32>
 80099e4:	f240 7013 	movw	r0, #1811	; 0x713
 80099e8:	e791      	b.n	800990e <gd32_uart_begin+0x1e>
 80099ea:	f240 7014 	movw	r0, #1812	; 0x714
 80099ee:	f7ff f9af 	bl	8008d50 <rcu_periph_clock_enable>
 80099f2:	f240 6004 	movw	r0, #1540	; 0x604
 80099f6:	f7ff f9ab 	bl	8008d50 <rcu_periph_clock_enable>
 80099fa:	f240 6005 	movw	r0, #1541	; 0x605
 80099fe:	e794      	b.n	800992a <gd32_uart_begin+0x3a>
 8009a00:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <gd32_uart_begin+0x184>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d023      	beq.n	8009a4e <gd32_uart_begin+0x15e>
 8009a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	2118      	movs	r1, #24
 8009a0e:	481c      	ldr	r0, [pc, #112]	; (8009a80 <gd32_uart_begin+0x190>)
 8009a10:	f7ff f90c 	bl	8008c2c <gpio_init>
 8009a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a18:	2203      	movs	r2, #3
 8009a1a:	2104      	movs	r1, #4
 8009a1c:	4818      	ldr	r0, [pc, #96]	; (8009a80 <gd32_uart_begin+0x190>)
 8009a1e:	f7ff f905 	bl	8008c2c <gpio_init>
 8009a22:	e7a2      	b.n	800996a <gd32_uart_begin+0x7a>
 8009a24:	2304      	movs	r3, #4
 8009a26:	2203      	movs	r2, #3
 8009a28:	2118      	movs	r1, #24
 8009a2a:	4815      	ldr	r0, [pc, #84]	; (8009a80 <gd32_uart_begin+0x190>)
 8009a2c:	f7ff f8fe 	bl	8008c2c <gpio_init>
 8009a30:	2308      	movs	r3, #8
 8009a32:	e7f1      	b.n	8009a18 <gd32_uart_begin+0x128>
 8009a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a38:	2203      	movs	r2, #3
 8009a3a:	2118      	movs	r1, #24
 8009a3c:	480e      	ldr	r0, [pc, #56]	; (8009a78 <gd32_uart_begin+0x188>)
 8009a3e:	f7ff f8f5 	bl	8008c2c <gpio_init>
 8009a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a46:	2203      	movs	r2, #3
 8009a48:	2104      	movs	r1, #4
 8009a4a:	480b      	ldr	r0, [pc, #44]	; (8009a78 <gd32_uart_begin+0x188>)
 8009a4c:	e7e7      	b.n	8009a1e <gd32_uart_begin+0x12e>
 8009a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a52:	2203      	movs	r2, #3
 8009a54:	2118      	movs	r1, #24
 8009a56:	4808      	ldr	r0, [pc, #32]	; (8009a78 <gd32_uart_begin+0x188>)
 8009a58:	f7ff f8e8 	bl	8008c2c <gpio_init>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	2203      	movs	r2, #3
 8009a60:	4619      	mov	r1, r3
 8009a62:	4808      	ldr	r0, [pc, #32]	; (8009a84 <gd32_uart_begin+0x194>)
 8009a64:	e7db      	b.n	8009a1e <gd32_uart_begin+0x12e>
 8009a66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a6a:	e7a0      	b.n	80099ae <gd32_uart_begin+0xbe>
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	e79e      	b.n	80099ae <gd32_uart_begin+0xbe>
 8009a70:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009a74:	40005000 	andmi	r5, r0, r0
 8009a78:	40011000 	andmi	r1, r1, r0
 8009a7c:	00140010 	andseq	r0, r4, r0, lsl r0
 8009a80:	40010800 	andmi	r0, r1, r0, lsl #16
 8009a84:	40011400 	andmi	r1, r1, r0, lsl #8

08009a88 <micros_init()>:
 8009a88:	4770      	bx	lr
	...

08009a8c <udelay_init()>:
 8009a8c:	4a07      	ldr	r2, [pc, #28]	; (8009aac <udelay_init()+0x20>)
 8009a8e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a96:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b04      	ldr	r3, [pc, #16]	; (8009ab0 <udelay_init()+0x24>)
 8009a9e:	605a      	str	r2, [r3, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	e000ed00 	and	lr, r0, r0, lsl #26
 8009ab0:	e0001000 	and	r1, r0, r0

08009ab4 <udelay(unsigned int, unsigned int)>:
 8009ab4:	236c      	movs	r3, #108	; 0x6c
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	4358      	muls	r0, r3
 8009aba:	b909      	cbnz	r1, 8009ac0 <udelay(unsigned int, unsigned int)+0xc>
 8009abc:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <udelay(unsigned int, unsigned int)+0x2c>)
 8009abe:	6859      	ldr	r1, [r3, #4]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4c07      	ldr	r4, [pc, #28]	; (8009ae0 <udelay(unsigned int, unsigned int)+0x2c>)
 8009ac4:	6862      	ldr	r2, [r4, #4]
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	d0fc      	beq.n	8009ac4 <udelay(unsigned int, unsigned int)+0x10>
 8009aca:	bf28      	it	cs
 8009acc:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 8009ad0:	1a5b      	subs	r3, r3, r1
 8009ad2:	4413      	add	r3, r2
 8009ad4:	4283      	cmp	r3, r0
 8009ad6:	d300      	bcc.n	8009ada <udelay(unsigned int, unsigned int)+0x26>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	4611      	mov	r1, r2
 8009adc:	e7f2      	b.n	8009ac4 <udelay(unsigned int, unsigned int)+0x10>
 8009ade:	bf00      	nop
 8009ae0:	e0001000 	and	r1, r0, r0

08009ae4 <adc_mode_config>:
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <adc_mode_config+0x1c>)
 8009ae6:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8009aea:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8009aee:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8009af2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009af6:	4302      	orrs	r2, r0
 8009af8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40012000 	andmi	r2, r1, r0

08009b04 <adc_special_function_config>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009b0a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009b0e:	f001 0102 	and.w	r1, r1, #2
 8009b12:	b17a      	cbz	r2, 8009b34 <adc_special_function_config+0x30>
 8009b14:	b11b      	cbz	r3, 8009b1e <adc_special_function_config+0x1a>
 8009b16:	6843      	ldr	r3, [r0, #4]
 8009b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1c:	6043      	str	r3, [r0, #4]
 8009b1e:	b11c      	cbz	r4, 8009b28 <adc_special_function_config+0x24>
 8009b20:	6843      	ldr	r3, [r0, #4]
 8009b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b26:	6043      	str	r3, [r0, #4]
 8009b28:	b119      	cbz	r1, 8009b32 <adc_special_function_config+0x2e>
 8009b2a:	6883      	ldr	r3, [r0, #8]
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	6083      	str	r3, [r0, #8]
 8009b32:	bd10      	pop	{r4, pc}
 8009b34:	b11b      	cbz	r3, 8009b3e <adc_special_function_config+0x3a>
 8009b36:	6843      	ldr	r3, [r0, #4]
 8009b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3c:	6043      	str	r3, [r0, #4]
 8009b3e:	b11c      	cbz	r4, 8009b48 <adc_special_function_config+0x44>
 8009b40:	6843      	ldr	r3, [r0, #4]
 8009b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b46:	6043      	str	r3, [r0, #4]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d0f2      	beq.n	8009b32 <adc_special_function_config+0x2e>
 8009b4c:	6883      	ldr	r3, [r0, #8]
 8009b4e:	f023 0302 	bic.w	r3, r3, #2
 8009b52:	e7ed      	b.n	8009b30 <adc_special_function_config+0x2c>

08009b54 <adc_data_alignment_config>:
 8009b54:	6883      	ldr	r3, [r0, #8]
 8009b56:	b119      	cbz	r1, 8009b60 <adc_data_alignment_config+0xc>
 8009b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b5c:	6083      	str	r3, [r0, #8]
 8009b5e:	4770      	bx	lr
 8009b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b64:	e7fa      	b.n	8009b5c <adc_data_alignment_config+0x8>

08009b66 <adc_enable>:
 8009b66:	6883      	ldr	r3, [r0, #8]
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	bf5e      	ittt	pl
 8009b6c:	6883      	ldrpl	r3, [r0, #8]
 8009b6e:	f043 0301 	orrpl.w	r3, r3, #1
 8009b72:	6083      	strpl	r3, [r0, #8]
 8009b74:	4770      	bx	lr

08009b76 <adc_calibration_enable>:
 8009b76:	6883      	ldr	r3, [r0, #8]
 8009b78:	f100 0208 	add.w	r2, r0, #8
 8009b7c:	f043 0308 	orr.w	r3, r3, #8
 8009b80:	6083      	str	r3, [r0, #8]
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	0719      	lsls	r1, r3, #28
 8009b86:	d4fc      	bmi.n	8009b82 <adc_calibration_enable+0xc>
 8009b88:	6883      	ldr	r3, [r0, #8]
 8009b8a:	f043 0304 	orr.w	r3, r3, #4
 8009b8e:	6083      	str	r3, [r0, #8]
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	075b      	lsls	r3, r3, #29
 8009b94:	d4fc      	bmi.n	8009b90 <adc_calibration_enable+0x1a>
 8009b96:	4770      	bx	lr

08009b98 <adc_tempsensor_vrefint_enable>:
 8009b98:	4a03      	ldr	r2, [pc, #12]	; (8009ba8 <adc_tempsensor_vrefint_enable+0x10>)
 8009b9a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8009b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ba2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009ba6:	4770      	bx	lr
 8009ba8:	40012000 	andmi	r2, r1, r0

08009bac <adc_channel_length_config>:
 8009bac:	2901      	cmp	r1, #1
 8009bae:	d002      	beq.n	8009bb6 <adc_channel_length_config+0xa>
 8009bb0:	2902      	cmp	r1, #2
 8009bb2:	d00c      	beq.n	8009bce <adc_channel_length_config+0x22>
 8009bb4:	4770      	bx	lr
 8009bb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009bb8:	3a01      	subs	r2, #1
 8009bba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bbe:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009bc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009bc2:	0512      	lsls	r2, r2, #20
 8009bc4:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009bcc:	4770      	bx	lr
 8009bce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009bd0:	3a01      	subs	r2, #1
 8009bd2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009bd6:	6383      	str	r3, [r0, #56]	; 0x38
 8009bd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009bda:	0512      	lsls	r2, r2, #20
 8009bdc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009be0:	431a      	orrs	r2, r3
 8009be2:	6382      	str	r2, [r0, #56]	; 0x38
 8009be4:	4770      	bx	lr

08009be6 <adc_inserted_channel_config>:
 8009be6:	b530      	push	{r4, r5, lr}
 8009be8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009bea:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009bec:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8009bf0:	1a61      	subs	r1, r4, r1
 8009bf2:	f06f 0404 	mvn.w	r4, #4
 8009bf6:	4361      	muls	r1, r4
 8009bf8:	241f      	movs	r4, #31
 8009bfa:	310f      	adds	r1, #15
 8009bfc:	408c      	lsls	r4, r1
 8009bfe:	ea25 0504 	bic.w	r5, r5, r4
 8009c02:	fa02 f101 	lsl.w	r1, r2, r1
 8009c06:	4329      	orrs	r1, r5
 8009c08:	2a09      	cmp	r2, #9
 8009c0a:	6381      	str	r1, [r0, #56]	; 0x38
 8009c0c:	d80b      	bhi.n	8009c26 <adc_inserted_channel_config+0x40>
 8009c0e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8009c12:	2207      	movs	r2, #7
 8009c14:	6904      	ldr	r4, [r0, #16]
 8009c16:	408a      	lsls	r2, r1
 8009c18:	ea24 0402 	bic.w	r4, r4, r2
 8009c1c:	fa03 f201 	lsl.w	r2, r3, r1
 8009c20:	4322      	orrs	r2, r4
 8009c22:	6102      	str	r2, [r0, #16]
 8009c24:	bd30      	pop	{r4, r5, pc}
 8009c26:	2a11      	cmp	r2, #17
 8009c28:	d8fc      	bhi.n	8009c24 <adc_inserted_channel_config+0x3e>
 8009c2a:	2407      	movs	r4, #7
 8009c2c:	3a0a      	subs	r2, #10
 8009c2e:	68c1      	ldr	r1, [r0, #12]
 8009c30:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c34:	4094      	lsls	r4, r2
 8009c36:	ea21 0104 	bic.w	r1, r1, r4
 8009c3a:	fa03 f202 	lsl.w	r2, r3, r2
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	60c2      	str	r2, [r0, #12]
 8009c42:	e7ef      	b.n	8009c24 <adc_inserted_channel_config+0x3e>

08009c44 <adc_external_trigger_source_config>:
 8009c44:	2901      	cmp	r1, #1
 8009c46:	d002      	beq.n	8009c4e <adc_external_trigger_source_config+0xa>
 8009c48:	2902      	cmp	r1, #2
 8009c4a:	d008      	beq.n	8009c5e <adc_external_trigger_source_config+0x1a>
 8009c4c:	4770      	bx	lr
 8009c4e:	6883      	ldr	r3, [r0, #8]
 8009c50:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009c54:	6083      	str	r3, [r0, #8]
 8009c56:	6883      	ldr	r3, [r0, #8]
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	6082      	str	r2, [r0, #8]
 8009c5c:	4770      	bx	lr
 8009c5e:	6883      	ldr	r3, [r0, #8]
 8009c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c64:	e7f6      	b.n	8009c54 <adc_external_trigger_source_config+0x10>

08009c66 <adc_external_trigger_config>:
 8009c66:	f001 0301 	and.w	r3, r1, #1
 8009c6a:	f001 0102 	and.w	r1, r1, #2
 8009c6e:	b152      	cbz	r2, 8009c86 <adc_external_trigger_config+0x20>
 8009c70:	b11b      	cbz	r3, 8009c7a <adc_external_trigger_config+0x14>
 8009c72:	6883      	ldr	r3, [r0, #8]
 8009c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c78:	6083      	str	r3, [r0, #8]
 8009c7a:	b119      	cbz	r1, 8009c84 <adc_external_trigger_config+0x1e>
 8009c7c:	6883      	ldr	r3, [r0, #8]
 8009c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c82:	6083      	str	r3, [r0, #8]
 8009c84:	4770      	bx	lr
 8009c86:	b11b      	cbz	r3, 8009c90 <adc_external_trigger_config+0x2a>
 8009c88:	6883      	ldr	r3, [r0, #8]
 8009c8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c8e:	6083      	str	r3, [r0, #8]
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d0f7      	beq.n	8009c84 <adc_external_trigger_config+0x1e>
 8009c94:	6883      	ldr	r3, [r0, #8]
 8009c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c9a:	e7f2      	b.n	8009c82 <adc_external_trigger_config+0x1c>

08009c9c <adc_software_trigger_enable>:
 8009c9c:	07ca      	lsls	r2, r1, #31
 8009c9e:	bf42      	ittt	mi
 8009ca0:	6883      	ldrmi	r3, [r0, #8]
 8009ca2:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009ca6:	6083      	strmi	r3, [r0, #8]
 8009ca8:	078b      	lsls	r3, r1, #30
 8009caa:	bf42      	ittt	mi
 8009cac:	6883      	ldrmi	r3, [r0, #8]
 8009cae:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009cb2:	6083      	strmi	r3, [r0, #8]
 8009cb4:	4770      	bx	lr
	...

08009cb8 <i2c_clock_config>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	4605      	mov	r5, r0
 8009cbc:	2002      	movs	r0, #2
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4617      	mov	r7, r2
 8009cc2:	f7ff f8f9 	bl	8008eb8 <rcu_clock_freq_get>
 8009cc6:	4927      	ldr	r1, [pc, #156]	; (8009d64 <i2c_clock_config+0xac>)
 8009cc8:	4a27      	ldr	r2, [pc, #156]	; (8009d68 <i2c_clock_config+0xb0>)
 8009cca:	fbb0 f1f1 	udiv	r1, r0, r1
 8009cce:	4290      	cmp	r0, r2
 8009cd0:	bf34      	ite	cc
 8009cd2:	460b      	movcc	r3, r1
 8009cd4:	2336      	movcs	r3, #54	; 0x36
 8009cd6:	686e      	ldr	r6, [r5, #4]
 8009cd8:	4a24      	ldr	r2, [pc, #144]	; (8009d6c <i2c_clock_config+0xb4>)
 8009cda:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8009cde:	431e      	orrs	r6, r3
 8009ce0:	4294      	cmp	r4, r2
 8009ce2:	606e      	str	r6, [r5, #4]
 8009ce4:	d816      	bhi.n	8009d14 <i2c_clock_config+0x5c>
 8009ce6:	3101      	adds	r1, #1
 8009ce8:	2935      	cmp	r1, #53	; 0x35
 8009cea:	d90d      	bls.n	8009d08 <i2c_clock_config+0x50>
 8009cec:	2336      	movs	r3, #54	; 0x36
 8009cee:	622b      	str	r3, [r5, #32]
 8009cf0:	0064      	lsls	r4, r4, #1
 8009cf2:	fbb0 f4f4 	udiv	r4, r0, r4
 8009cf6:	2c04      	cmp	r4, #4
 8009cf8:	bf38      	it	cc
 8009cfa:	2404      	movcc	r4, #4
 8009cfc:	69e8      	ldr	r0, [r5, #28]
 8009cfe:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8009d02:	4304      	orrs	r4, r0
 8009d04:	61ec      	str	r4, [r5, #28]
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	2902      	cmp	r1, #2
 8009d0a:	d801      	bhi.n	8009d10 <i2c_clock_config+0x58>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e7ee      	b.n	8009cee <i2c_clock_config+0x36>
 8009d10:	6229      	str	r1, [r5, #32]
 8009d12:	e7ed      	b.n	8009cf0 <i2c_clock_config+0x38>
 8009d14:	4a16      	ldr	r2, [pc, #88]	; (8009d70 <i2c_clock_config+0xb8>)
 8009d16:	4294      	cmp	r4, r2
 8009d18:	d8f5      	bhi.n	8009d06 <i2c_clock_config+0x4e>
 8009d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d1e:	4353      	muls	r3, r2
 8009d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d28:	3301      	adds	r3, #1
 8009d2a:	622b      	str	r3, [r5, #32]
 8009d2c:	b997      	cbnz	r7, 8009d54 <i2c_clock_config+0x9c>
 8009d2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009d32:	fbb0 f4f4 	udiv	r4, r0, r4
 8009d36:	69eb      	ldr	r3, [r5, #28]
 8009d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d3c:	61eb      	str	r3, [r5, #28]
 8009d3e:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8009d42:	b90b      	cbnz	r3, 8009d48 <i2c_clock_config+0x90>
 8009d44:	f044 0401 	orr.w	r4, r4, #1
 8009d48:	69eb      	ldr	r3, [r5, #28]
 8009d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4e:	61eb      	str	r3, [r5, #28]
 8009d50:	69e8      	ldr	r0, [r5, #28]
 8009d52:	e7d6      	b.n	8009d02 <i2c_clock_config+0x4a>
 8009d54:	2119      	movs	r1, #25
 8009d56:	434c      	muls	r4, r1
 8009d58:	69eb      	ldr	r3, [r5, #28]
 8009d5a:	fbb0 f4f4 	udiv	r4, r0, r4
 8009d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d62:	e7eb      	b.n	8009d3c <i2c_clock_config+0x84>
 8009d64:	000f4240 	andeq	r4, pc, r0, asr #4
 8009d68:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8009d6c:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009d70:	00061a80 	andeq	r1, r6, r0, lsl #21

08009d74 <i2c_ack_config>:
 8009d74:	6803      	ldr	r3, [r0, #0]
 8009d76:	2901      	cmp	r1, #1
 8009d78:	bf0c      	ite	eq
 8009d7a:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8009d7e:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009d82:	6003      	str	r3, [r0, #0]
 8009d84:	4770      	bx	lr

08009d86 <i2c_ackpos_config>:
 8009d86:	6803      	ldr	r3, [r0, #0]
 8009d88:	b919      	cbnz	r1, 8009d92 <i2c_ackpos_config+0xc>
 8009d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d8e:	6003      	str	r3, [r0, #0]
 8009d90:	4770      	bx	lr
 8009d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d96:	e7fa      	b.n	8009d8e <i2c_ackpos_config+0x8>

08009d98 <i2c_master_addressing>:
 8009d98:	3202      	adds	r2, #2
 8009d9a:	bf0c      	ite	eq
 8009d9c:	f021 0101 	biceq.w	r1, r1, #1
 8009da0:	f041 0101 	orrne.w	r1, r1, #1
 8009da4:	6101      	str	r1, [r0, #16]
 8009da6:	4770      	bx	lr

08009da8 <i2c_enable>:
 8009da8:	6803      	ldr	r3, [r0, #0]
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	6003      	str	r3, [r0, #0]
 8009db0:	4770      	bx	lr

08009db2 <i2c_start_on_bus>:
 8009db2:	6803      	ldr	r3, [r0, #0]
 8009db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009db8:	6003      	str	r3, [r0, #0]
 8009dba:	4770      	bx	lr

08009dbc <i2c_stop_on_bus>:
 8009dbc:	6803      	ldr	r3, [r0, #0]
 8009dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	4770      	bx	lr

08009dc6 <i2c_data_transmit>:
 8009dc6:	6101      	str	r1, [r0, #16]
 8009dc8:	4770      	bx	lr

08009dca <i2c_data_receive>:
 8009dca:	6900      	ldr	r0, [r0, #16]
 8009dcc:	b2c0      	uxtb	r0, r0
 8009dce:	4770      	bx	lr

08009dd0 <i2c_flag_get>:
 8009dd0:	098b      	lsrs	r3, r1, #6
 8009dd2:	5818      	ldr	r0, [r3, r0]
 8009dd4:	f001 011f 	and.w	r1, r1, #31
 8009dd8:	40c8      	lsrs	r0, r1
 8009dda:	f000 0001 	and.w	r0, r0, #1
 8009dde:	4770      	bx	lr

08009de0 <i2c_flag_clear>:
 8009de0:	f240 5301 	movw	r3, #1281	; 0x501
 8009de4:	4299      	cmp	r1, r3
 8009de6:	b510      	push	{r4, lr}
 8009de8:	d102      	bne.n	8009df0 <i2c_flag_clear+0x10>
 8009dea:	6943      	ldr	r3, [r0, #20]
 8009dec:	6983      	ldr	r3, [r0, #24]
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	2201      	movs	r2, #1
 8009df2:	098c      	lsrs	r4, r1, #6
 8009df4:	5823      	ldr	r3, [r4, r0]
 8009df6:	f001 011f 	and.w	r1, r1, #31
 8009dfa:	fa02 f101 	lsl.w	r1, r2, r1
 8009dfe:	ea23 0101 	bic.w	r1, r3, r1
 8009e02:	5021      	str	r1, [r4, r0]
 8009e04:	e7f3      	b.n	8009dee <i2c_flag_clear+0xe>

08009e06 <i2s_init>:
 8009e06:	b510      	push	{r4, lr}
 8009e08:	69c4      	ldr	r4, [r0, #28]
 8009e0a:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8009e0e:	f024 0408 	bic.w	r4, r4, #8
 8009e12:	0424      	lsls	r4, r4, #16
 8009e14:	0c24      	lsrs	r4, r4, #16
 8009e16:	431c      	orrs	r4, r3
 8009e18:	4314      	orrs	r4, r2
 8009e1a:	430c      	orrs	r4, r1
 8009e1c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8009e20:	61c4      	str	r4, [r0, #28]
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <i2s_psc_config>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	461f      	mov	r7, r3
 8009e28:	2302      	movs	r3, #2
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	6203      	str	r3, [r0, #32]
 8009e2e:	2000      	movs	r0, #0
 8009e30:	460c      	mov	r4, r1
 8009e32:	4616      	mov	r6, r2
 8009e34:	f7ff f840 	bl	8008eb8 <rcu_clock_freq_get>
 8009e38:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009e3c:	f04f 010a 	mov.w	r1, #10
 8009e40:	d11b      	bne.n	8009e7a <i2s_psc_config+0x56>
 8009e42:	0a00      	lsrs	r0, r0, #8
 8009e44:	4348      	muls	r0, r1
 8009e46:	fbb0 f4f4 	udiv	r4, r0, r4
 8009e4a:	230a      	movs	r3, #10
 8009e4c:	3405      	adds	r4, #5
 8009e4e:	fbb4 f4f3 	udiv	r4, r4, r3
 8009e52:	f004 0301 	and.w	r3, r4, #1
 8009e56:	0864      	lsrs	r4, r4, #1
 8009e58:	1ea2      	subs	r2, r4, #2
 8009e5a:	2afd      	cmp	r2, #253	; 0xfd
 8009e5c:	bf86      	itte	hi
 8009e5e:	2300      	movhi	r3, #0
 8009e60:	2402      	movhi	r4, #2
 8009e62:	021b      	lslls	r3, r3, #8
 8009e64:	431c      	orrs	r4, r3
 8009e66:	433c      	orrs	r4, r7
 8009e68:	622c      	str	r4, [r5, #32]
 8009e6a:	69eb      	ldr	r3, [r5, #28]
 8009e6c:	f023 0307 	bic.w	r3, r3, #7
 8009e70:	61eb      	str	r3, [r5, #28]
 8009e72:	69ea      	ldr	r2, [r5, #28]
 8009e74:	4316      	orrs	r6, r2
 8009e76:	61ee      	str	r6, [r5, #28]
 8009e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7a:	b90e      	cbnz	r6, 8009e80 <i2s_psc_config+0x5c>
 8009e7c:	0940      	lsrs	r0, r0, #5
 8009e7e:	e7e1      	b.n	8009e44 <i2s_psc_config+0x20>
 8009e80:	0980      	lsrs	r0, r0, #6
 8009e82:	e7df      	b.n	8009e44 <i2s_psc_config+0x20>

08009e84 <i2s_enable>:
 8009e84:	69c3      	ldr	r3, [r0, #28]
 8009e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e8a:	61c3      	str	r3, [r0, #28]
 8009e8c:	4770      	bx	lr

08009e8e <i2s_disable>:
 8009e8e:	69c3      	ldr	r3, [r0, #28]
 8009e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e94:	61c3      	str	r3, [r0, #28]
 8009e96:	4770      	bx	lr

08009e98 <spi_dma_enable>:
 8009e98:	6843      	ldr	r3, [r0, #4]
 8009e9a:	b919      	cbnz	r1, 8009ea4 <spi_dma_enable+0xc>
 8009e9c:	f043 0302 	orr.w	r3, r3, #2
 8009ea0:	6043      	str	r3, [r0, #4]
 8009ea2:	4770      	bx	lr
 8009ea4:	f043 0301 	orr.w	r3, r3, #1
 8009ea8:	e7fa      	b.n	8009ea0 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08009eac <vtable for RDMResponder-0xe4>:
 8009eac:	00000003 	andeq	r0, r0, r3
 8009eb0:	000000aa 	andeq	r0, r0, sl, lsr #1
 8009eb4:	00000006 	andeq	r0, r0, r6
 8009eb8:	00000000 	andeq	r0, r0, r0
 8009ebc:	01ff0000 	mvnseq	r0, r0
 8009ec0:	00000001 	andeq	r0, r0, r1
 8009ec4:	00000001 	andeq	r0, r0, r1
 8009ec8:	00000001 	andeq	r0, r0, r1
 8009ecc:	00000000 	andeq	r0, r0, r0
 8009ed0:	18002000 	stmdane	r0, {sp}
 8009ed4:	00180400 	andseq	r0, r8, r0, lsl #8
 8009ed8:	00000007 	andeq	r0, r0, r7
	...
 8009ee4:	03020100 	movweq	r0, #8448	; 0x2100
 8009ee8:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8009eec:	00000009 	andeq	r0, r0, r9
 8009ef0:	03020100 	movweq	r0, #8448	; 0x2100
 8009ef4:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 8009ef8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009efc:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 8009f00:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009f04:	6f430064 	svcvs	0x00430064
 8009f08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009f0c:	646f4d20 	strbtvs	r4, [pc], #-3360	; 8009f14 <_etext+0x68>
 8009f10:	35310065 	ldrcc	r0, [r1, #-101]!	; 0xffffff9b
 8009f14:	3a36323a 	bcc	8d96804 <__exidx_end+0xd8b228>
 8009f18:	46003531 			; <UNDEFINED> instruction: 0x46003531
 8009f1c:	32206265 	eorcc	r6, r0, #1342177286	; 0x50000006
 8009f20:	30322035 	eorscc	r2, r2, r5, lsr r0
 8009f24:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 8009f28:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 8009f2c:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 8009f30:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8009f34:	6f43005d 	svcvs	0x0043005d
 8009f38:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009f3c:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8009f44 <_etext+0x98>
 8009f40:	4f200065 	svcmi	0x00200065
 8009f44:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8009f48:	73252074 			; <UNDEFINED> instruction: 0x73252074
 8009f4c:	6554000a 	ldrbvs	r0, [r4, #-10]
 8009f50:	70207473 	eorvc	r7, r0, r3, ror r4
 8009f54:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009f58:	3a206e72 	bcc	8825928 <__exidx_end+0x81a34c>
 8009f5c:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8009f60:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 8009f64:	4452000a 	ldrbmi	r0, [r2], #-10
 8009f68:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 8009f6c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009f70:	20726564 	rsbscs	r6, r2, r4, ror #10
 8009f74:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8009f78:	0031206c 	eorseq	r2, r1, ip, rrx
 8009f7c:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009f80:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8009f84:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8009f88:	3a732500 	bcc	9cd3390 <__exidx_end+0x1cc7db4>
 8009f8c:	00007525 	andeq	r7, r0, r5, lsr #10

08009f90 <vtable for RDMResponder>:
	...
 8009f98:	080013cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, ip}
 8009f9c:	08001415 	stmdaeq	r0, {r0, r2, r4, sl, ip}
 8009fa0:	0800135d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, ip}
 8009fa4:	080013ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, ip}

08009fa8 <vtable for FactoryDefaults>:
	...
 8009fb0:	08001317 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, ip}
 8009fb4:	08001343 	stmdaeq	r0, {r0, r1, r6, r8, r9, ip}
 8009fb8:	08001391 	stmdaeq	r0, {r0, r4, r7, r8, r9, ip}

08009fbc <vtable for PixelDmxStartStop>:
	...
 8009fc4:	08001319 	stmdaeq	r0, {r0, r3, r4, r8, r9, ip}
 8009fc8:	0800134f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, r9, ip}
 8009fcc:	0800131d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, ip}
 8009fd0:	08001329 	stmdaeq	r0, {r0, r3, r5, r8, r9, ip}

08009fd4 <vtable for Reboot>:
	...
 8009fdc:	08001335 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, ip}
 8009fe0:	08001337 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, ip}
 8009fe4:	080013a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, ip}

08009fe8 <SOFTWARE_VERSION>:
 8009fe8:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8009fec:	30322d25 	eorscc	r2, r2, r5, lsr #26
 8009ff0:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 8009ff4:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 8009ff8:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 8009ffc:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a000:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a004:	50007335 	andpl	r7, r0, r5, lsr r3
 800a008:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a00c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a010:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a014:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a018:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a01c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a020:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a024:	614d0074 	hvcvs	53252	; 0xd004
 800a028:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a02c:	50207473 	eorpl	r7, r0, r3, ror r4
 800a030:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a034:	50006e72 	andpl	r6, r0, r2, ror lr
 800a038:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a03c:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a040:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a044:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a049 <SOFTWARE_VERSION>:
 800a049:	00322e31 	eorseq	r2, r2, r1, lsr lr
 800a04d:	00555043 	subseq	r5, r5, r3, asr #32
 800a051:	 	andeq	r0, r0, r0

0800a054 <vtable for CpuTemperature>:
	...
 800a05c:	080024ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, sp}
 800a060:	080024fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, sp}
 800a064:	080024e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, sp}
 800a068:	080024ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, sp}

0800a06c <vtable for RDMSensorBH170>:
	...
 800a074:	0800276f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, sp}
 800a078:	08002771 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, sp}
 800a07c:	08002623 	stmdaeq	r0, {r0, r1, r5, r9, sl, sp}
 800a080:	080026f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, sp}

0800a084 <vtable for RDMSensorMCP9808>:
	...
 800a08c:	08002761 	stmdaeq	r0, {r0, r5, r6, r8, r9, sl, sp}
 800a090:	08002763 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, sl, sp}
 800a094:	08002629 	stmdaeq	r0, {r0, r3, r5, r9, sl, sp}
 800a098:	080026e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, sp}

0800a09c <vtable for RDMSensorHTU21DHumidity>:
	...
 800a0a4:	08002753 	stmdaeq	r0, {r0, r1, r4, r6, r8, r9, sl, sp}
 800a0a8:	08002755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, sp}
 800a0ac:	0800262f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r9, sl, sp}
 800a0b0:	080026d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sl, sp}

0800a0b4 <vtable for RDMSensorHTU21DTemperature>:
	...
 800a0bc:	08002745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, sp}
 800a0c0:	08002747 	stmdaeq	r0, {r0, r1, r2, r6, r8, r9, sl, sp}
 800a0c4:	08002635 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, sp}
 800a0c8:	080026c1 	stmdaeq	r0, {r0, r6, r7, r9, sl, sp}

0800a0cc <vtable for RDMSensorINA219Current>:
	...
 800a0d4:	08002737 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, sl, sp}
 800a0d8:	08002739 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, sp}
 800a0dc:	0800263b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sl, sp}
 800a0e0:	080026a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, sp}

0800a0e4 <vtable for RDMSensorINA219Power>:
	...
 800a0ec:	08002729 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, sp}
 800a0f0:	0800272b 	stmdaeq	r0, {r0, r1, r3, r5, r8, r9, sl, sp}
 800a0f4:	08002641 	stmdaeq	r0, {r0, r6, r9, sl, sp}
 800a0f8:	08002695 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, sp}

0800a0fc <vtable for RDMSensorINA219Voltage>:
	...
 800a104:	0800271b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, sp}
 800a108:	0800271d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, sp}
 800a10c:	08002647 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, sp}
 800a110:	08002679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, sp}

0800a114 <vtable for RDMSensorSI7021Humidity>:
	...
 800a11c:	0800270d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, sp}
 800a120:	0800270f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sl, sp}
 800a124:	0800264d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, sp}
 800a128:	08002669 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, sp}

0800a12c <vtable for RDMSensorSI7021Temperature>:
	...
 800a134:	080026ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, sp}
 800a138:	08002701 	stmdaeq	r0, {r0, r8, r9, sl, sp}
 800a13c:	08002653 	stmdaeq	r0, {r0, r1, r4, r6, r9, sl, sp}
 800a140:	08002659 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, sp}

0800a144 <sensor::bh1750::DESCRIPTION>:
 800a144:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a148:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a14c:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a150:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a152 <sensor::htu21d::temperature::DESCRIPTION>:
 800a152:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a156:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a15a:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a15e:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a162:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a166 <sensor::htu21d::humidity::DESCRIPTION>:
 800a166:	616c6552 	cmnvs	ip, r2, asr r5
 800a16a:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a16e:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a172:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a176:	 	svcvs	0x00500079

0800a178 <sensor::ina219::power::DESCRIPTION>:
 800a178:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a17c:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a17e <sensor::ina219::current::DESCRIPTION>:
 800a17e:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a182:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a186 <sensor::ina219::voltage::DESCRIPTION>:
 800a186:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a18a:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a18e <sensor::si7021::temperature::DESCRIPTION>:
 800a18e:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a192:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a196:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a19a:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a19e:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a1a2 <sensor::si7021::humidity::DESCRIPTION>:
 800a1a2:	616c6552 	cmnvs	ip, r2, asr r5
 800a1a6:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a1aa:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a1ae:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a1b2:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a1b4 <sensor::mcp9808::DESCRIPTION>:
 800a1b4:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a1b8:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a1bc:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a1c0:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a1c4:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a1c8 <vtable for RDMSensor>:
	...
 800a1d8:	08008429 	stmdaeq	r0, {r0, r3, r5, sl, pc}
 800a1dc:	08008429 	stmdaeq	r0, {r0, r3, r5, sl, pc}
 800a1e0:	204d4452 	subcs	r4, sp, r2, asr r4
 800a1e4:	70736552 	rsbsvc	r6, r3, r2, asr r5
 800a1e8:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 800a1ec:	6f632072 	svcvs	0x00632072
 800a1f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a1f4:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a1f8:	0a6e6f69 	beq	9ba5fa4 <__exidx_end+0x1b9a9c8>
 800a1fc:	72502000 	subsvc	r2, r0, #0
 800a200:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 800a204:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 800a208:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 800a20c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800a210:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 800a214:	4420000a 	strtmi	r0, [r0], #-10
 800a218:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 800a21c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 800a220:	20207373 	eorcs	r7, r0, r3, ror r3
 800a224:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a228:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a22c:	4420000a 	strtmi	r0, [r0], #-10
 800a230:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 800a234:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 800a238:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 800a23c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a240:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a244:	5020000a 	eorpl	r0, r0, sl
 800a248:	6f737265 	svcvs	0x00737265
 800a24c:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 800a250:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 800a254:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 800a258:	20642520 	rsbcs	r2, r4, r0, lsr #10
 800a25c:	2a2e255b 	bcs	8b937d0 <__exidx_end+0xb881f4>
 800a260:	000a5d73 	andeq	r5, sl, r3, ror sp
 800a264:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 800a268:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a26c:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 800a270:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a274:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a278:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a27c:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 800a280:	73726f73 	cmnvc	r2, #460	; 0x1cc
 800a284:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a288:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a28c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a290:	000a6425 	andeq	r6, sl, r5, lsr #8

0800a294 <DEVICE_LABEL>:
 800a294:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a298:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a29c:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800a2a0:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 800a2a4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 800a2a8:	00726564 	rsbseq	r6, r2, r4, ror #10

0800a2ac <vtable for RDMDeviceResponder>:
	...
 800a2b4:	08003e01 	stmdaeq	r0, {r0, r9, sl, fp, ip, sp}
 800a2b8:	08003e21 	stmdaeq	r0, {r0, r5, r9, sl, fp, ip, sp}
 800a2bc:	08003dfb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
 800a2c0:	08003dfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp}
 800a2c4:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a2c8:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a2cc:	6d450052 	stclvs	0, cr0, [r5, #-328]	; 0xfffffeb8
 800a2d0:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 800a2d4:	00006465 	andeq	r6, r0, r5, ror #8

0800a2d8 <UID_ALL>:
 800a2d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a2dc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a2e0 <RDMHandler::PID_DEFINITIONS>:
 800a2e0:	00000060 	andeq	r0, r0, r0, rrx
 800a2e4:	08004369 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, lr}
	...
 800a2f4:	01010000 	mrseq	r0, (UNDEF: 1)
 800a2f8:	00000080 	andeq	r0, r0, r0, lsl #1
 800a2fc:	0800446d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, lr}
	...
 800a30c:	01010100 	mrseq	r0, (UNDEF: 17)
 800a310:	00000081 	andeq	r0, r0, r1, lsl #1
 800a314:	08004489 	stmdaeq	r0, {r0, r3, r7, sl, lr}
	...
 800a324:	01010100 	mrseq	r0, (UNDEF: 17)
 800a328:	00000082 	andeq	r0, r0, r2, lsl #1
 800a32c:	080044a9 	stmdaeq	r0, {r0, r3, r5, r7, sl, lr}
 800a330:	00000000 	andeq	r0, r0, r0
 800a334:	08004ead 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, fp, lr}
 800a338:	00000000 	andeq	r0, r0, r0
 800a33c:	01010100 	mrseq	r0, (UNDEF: 17)
 800a340:	00000090 	muleq	r0, r0, r0
 800a344:	080043d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, lr}
 800a348:	00000000 	andeq	r0, r0, r0
 800a34c:	08004ded 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, fp, lr}
 800a350:	00000000 	andeq	r0, r0, r0
 800a354:	01010100 	mrseq	r0, (UNDEF: 17)
 800a358:	00001000 	andeq	r1, r0, r0
 800a35c:	08004509 	stmdaeq	r0, {r0, r3, r8, sl, lr}
 800a360:	00000000 	andeq	r0, r0, r0
 800a364:	08004789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, lr}
 800a368:	00000000 	andeq	r0, r0, r0
 800a36c:	01010000 	mrseq	r0, (UNDEF: 1)
 800a370:	00001001 	andeq	r1, r0, r1
	...
 800a37c:	08004741 	stmdaeq	r0, {r0, r6, r8, r9, sl, lr}
 800a380:	00000000 	andeq	r0, r0, r0
 800a384:	01010100 	mrseq	r0, (UNDEF: 17)
 800a388:	00000050 	andeq	r0, r0, r0, asr r0
 800a38c:	080042fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, lr}
	...
 800a39c:	00010000 	andeq	r0, r1, r0
 800a3a0:	00000070 	andeq	r0, r0, r0, ror r0
 800a3a4:	08004451 	stmdaeq	r0, {r0, r4, r6, sl, lr}
	...
 800a3b4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a3b8:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a3bc:	0800451d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, lr}
	...
 800a3cc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a3d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a3d4:	0800451d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, lr}
 800a3d8:	00000000 	andeq	r0, r0, r0
 800a3dc:	08004805 	stmdaeq	r0, {r0, r2, fp, lr}
 800a3e0:	00000000 	andeq	r0, r0, r0
 800a3e4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a3e8:	000000c0 	andeq	r0, r0, r0, asr #1
 800a3ec:	080044e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, lr}
	...
 800a3fc:	00010000 	andeq	r0, r1, r0
 800a400:	000000c1 	andeq	r0, r0, r1, asr #1
 800a404:	0800484d 	stmdaeq	r0, {r0, r2, r3, r6, fp, lr}
	...
 800a414:	00010100 	andeq	r0, r1, r0, lsl #2
 800a418:	000000c2 	andeq	r0, r0, r2, asr #1
 800a41c:	0800468d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, lr}
	...
 800a42c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a430:	000000e0 	andeq	r0, r0, r0, ror #1
 800a434:	0800453d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, lr}
 800a438:	00000000 	andeq	r0, r0, r0
 800a43c:	0800486d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, lr}
 800a440:	00000000 	andeq	r0, r0, r0
 800a444:	00010100 	andeq	r0, r1, r0, lsl #2
 800a448:	000000e1 	andeq	r0, r0, r1, ror #1
 800a44c:	080048bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, lr}
	...
 800a45c:	00010101 	andeq	r0, r1, r1, lsl #2
 800a460:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a464:	08004579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, lr}
 800a468:	00000000 	andeq	r0, r0, r0
 800a46c:	08004941 	stmdaeq	r0, {r0, r6, r8, fp, lr}
 800a470:	00000000 	andeq	r0, r0, r0
 800a474:	00010000 	andeq	r0, r1, r0
 800a478:	00000120 	andeq	r0, r0, r0, lsr #2
 800a47c:	080046a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, sl, lr}
	...
 800a48c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a490:	00000121 	andeq	r0, r0, r1, lsr #2
 800a494:	08004d71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, lr}
	...
 800a4a4:	00010102 	andeq	r0, r1, r2, lsl #2
 800a4a8:	00000200 	andeq	r0, r0, r0, lsl #4
 800a4ac:	08004991 	stmdaeq	r0, {r0, r4, r7, r8, fp, lr}
	...
 800a4bc:	00010101 	andeq	r0, r1, r1, lsl #2
 800a4c0:	00000201 	andeq	r0, r0, r1, lsl #4
 800a4c4:	08004a39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, lr}
 800a4c8:	00000000 	andeq	r0, r0, r0
 800a4cc:	08004ab9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, fp, lr}
 800a4d0:	00000000 	andeq	r0, r0, r0
 800a4d4:	00010101 	andeq	r0, r1, r1, lsl #2
 800a4d8:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800a4e4:	08004b6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, lr}
 800a4e8:	00000000 	andeq	r0, r0, r0
 800a4ec:	00010100 	andeq	r0, r1, r0, lsl #2
 800a4f0:	00000400 	andeq	r0, r0, r0, lsl #8
 800a4f4:	080045b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, lr}
 800a4f8:	00000000 	andeq	r0, r0, r0
 800a4fc:	08004bb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, fp, lr}
 800a500:	00000000 	andeq	r0, r0, r0
 800a504:	00010100 	andeq	r0, r1, r0, lsl #2
 800a508:	00000500 	andeq	r0, r0, r0, lsl #10
 800a50c:	080045dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, lr}
 800a510:	00000000 	andeq	r0, r0, r0
 800a514:	08004bc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, lr}
 800a518:	00000000 	andeq	r0, r0, r0
 800a51c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a520:	00000501 	andeq	r0, r0, r1, lsl #10
 800a524:	080045f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, lr}
 800a528:	00000000 	andeq	r0, r0, r0
 800a52c:	08004c0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, lr}
 800a530:	00000000 	andeq	r0, r0, r0
 800a534:	00010100 	andeq	r0, r1, r0, lsl #2
 800a538:	00000603 	andeq	r0, r0, r3, lsl #12
 800a53c:	08004615 	stmdaeq	r0, {r0, r2, r4, r9, sl, lr}
 800a540:	00000000 	andeq	r0, r0, r0
 800a544:	08004c55 	stmdaeq	r0, {r0, r2, r4, r6, sl, fp, lr}
 800a548:	00000000 	andeq	r0, r0, r0
 800a54c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a550:	00001010 	andeq	r1, r0, r0, lsl r0
 800a554:	0800465d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, lr}
 800a558:	00000000 	andeq	r0, r0, r0
 800a55c:	08004cbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, lr}
 800a560:	00000000 	andeq	r0, r0, r0
 800a564:	00010100 	andeq	r0, r1, r0, lsl #2
 800a568:	00001020 	andeq	r1, r0, r0, lsr #32
 800a56c:	0800466b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, lr}
 800a570:	00000000 	andeq	r0, r0, r0
 800a574:	08004ceb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, sl, fp, lr}
 800a578:	00000000 	andeq	r0, r0, r0
 800a57c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a580:	00001021 	andeq	r1, r0, r1, lsr #32
 800a584:	08004d1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, fp, lr}
	...
 800a594:	00010101 	andeq	r0, r1, r1, lsl #2
 800a598:	00001040 	andeq	r1, r0, r0, asr #32
 800a59c:	0800516d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, ip, lr}
 800a5a0:	00000000 	andeq	r0, r0, r0
 800a5a4:	08005181 	stmdaeq	r0, {r0, r7, r8, ip, lr}
 800a5a8:	00000000 	andeq	r0, r0, r0
 800a5ac:	00010100 	andeq	r0, r1, r0, lsl #2

0800a5b0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800a5b0:	00000060 	andeq	r0, r0, r0, rrx
 800a5b4:	08004369 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, lr}
	...
 800a5c4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5c8:	000000c0 	andeq	r0, r0, r0, asr #1
 800a5cc:	080044e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, lr}
	...
 800a5dc:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5e0:	00001000 	andeq	r1, r0, r0
 800a5e4:	08004509 	stmdaeq	r0, {r0, r3, r8, sl, lr}
 800a5e8:	00000000 	andeq	r0, r0, r0
 800a5ec:	08004789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, lr}
 800a5f0:	00000000 	andeq	r0, r0, r0
 800a5f4:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5f8:	00000050 	andeq	r0, r0, r0, asr r0
 800a5fc:	080042fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, lr}
	...
 800a60c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a610:	00000070 	andeq	r0, r0, r0, ror r0
 800a614:	08004451 	stmdaeq	r0, {r0, r4, r6, sl, lr}
	...
 800a624:	00010100 	andeq	r0, r1, r0, lsl #2
 800a628:	000000e0 	andeq	r0, r0, r0, ror #1
 800a62c:	0800453d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, lr}
 800a630:	00000000 	andeq	r0, r0, r0
 800a634:	0800486d 	stmdaeq	r0, {r0, r2, r3, r5, r6, fp, lr}
 800a638:	00000000 	andeq	r0, r0, r0
 800a63c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a640:	000000e1 	andeq	r0, r0, r1, ror #1
 800a644:	080048bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, lr}
	...
 800a654:	00010101 	andeq	r0, r1, r1, lsl #2
 800a658:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a65c:	08004579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, lr}
 800a660:	00000000 	andeq	r0, r0, r0
 800a664:	08004941 	stmdaeq	r0, {r0, r6, r8, fp, lr}
 800a668:	00000000 	andeq	r0, r0, r0
 800a66c:	00010100 	andeq	r0, r1, r0, lsl #2
 800a670:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a674:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a678:	6f697469 	svcvs	0x00697469
 800a67c:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a680:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a684:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a688:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a68c:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a690:	614d2079 	hvcvs	53769	; 0xd209
 800a694:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a698:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a69c:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a6a0:	6f430074 	svcvs	0x00430074
 800a6a4:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a6a8:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a6ac:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a6b0:	61727462 	cmnvs	r2, r2, ror #8
 800a6b4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a6b8:	6f432065 	svcvs	0x00432065
 800a6bc:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a6c0:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a6c4:	80e22072 	rschi	r2, r2, r2, ror r0
 800a6c8:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a6cc:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a6d0:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a6d4:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a6d8:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a6dc:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a6e0:	6f6c6f43 	svcvs	0x006c6f43
 800a6e4:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a6e8:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a6ec:	209380e2 	addscs	r8, r3, r2, ror #1
 800a6f0:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a6f4:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a6f8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a6fc:	62755300 	rsbsvs	r5, r5, #0, 6
 800a700:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a704:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a708:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a690 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a70c:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a710:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a714:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a718:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a71c:	41006174 	tstmi	r0, r4, ror r1
 800a720:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a724:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a728:	6f6c6f43 	svcvs	0x006c6f43
 800a72c:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a730:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a734:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800a738:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800a73c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a740:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a744:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a748:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a74c:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a750:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800a754:	41006e65 	tstmi	r0, r5, ror #28
 800a758:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a75c:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a760:	6f6c6f43 	svcvs	0x006c6f43
 800a764:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a768:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a76c:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800a770:	43006575 	movwmi	r6, #1397	; 0x575
 800a774:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a778:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800a77c:	61726570 	cmnvs	r2, r0, ror r5
 800a780:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800a784:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800a788:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800a78c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800a790:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a794:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a798:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a720 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800a79c:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a7a0:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a7a4:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800a7a8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a7ac:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800a7b0:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800a7b4:	6f432065 	svcvs	0x00432065
 800a7b8:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a7bc:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a7c0:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a7c4:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a7c8:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800a7cc:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a7d0:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a7d4:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a7d8:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a7dc:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a7e0:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800a7e4:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800a7e8:	00657469 	rsbeq	r7, r5, r9, ror #8
 800a7ec:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a7f0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a7f4:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a77c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800a7f8:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a7fc:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a800:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800a804:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800a808:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a80c:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800a810:	61727462 	cmnvs	r2, r2, ror #8
 800a814:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a818:	6f432065 	svcvs	0x00432065
 800a81c:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a820:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a824:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a828:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800a82c:	53006575 	movwpl	r6, #1397	; 0x575
 800a830:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800a834:	6f697461 	svcvs	0x00697461
 800a838:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a83c:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a840:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a844:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a848:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a84c:	61746f52 	cmnvs	r4, r2, asr pc
 800a850:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a854:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a858:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a85c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a860:	73697250 	cmnvc	r9, #80, 4
 800a864:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a868:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a86c:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a870:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a874:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a878:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a87c:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a880:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a884:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a888:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a88c:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a890:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a894:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a898:	6f724600 	svcvs	0x00724600
 800a89c:	442f7473 	strtmi	r7, [pc], #-1139	; 800a8a4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a8a0:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a8a4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a8a8:	72745300 	rsbsvc	r5, r4, #0, 6
 800a8ac:	2f65626f 	svccs	0x0065626f
 800a8b0:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a8b4:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a8b8:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800a758 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a8bc:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a8c0:	72460073 	subvc	r0, r6, #115	; 0x73
 800a8c4:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a8c8:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a8cc:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a8d0:	72460072 	subvc	r0, r6, #114	; 0x72
 800a8d4:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a8d8:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a8dc:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a8e0:	6f722072 	svcvs	0x00722072
 800a8e4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a8e8:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a8ec:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a8f0:	61420072 	hvcvs	8194	; 0x2002
 800a8f4:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a8f8:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a8fc:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a900:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a904:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a73c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a908:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800a90c:	6f697463 	svcvs	0x00697463
 800a910:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800a914:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800a918:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800a91c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a920:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800a924:	6e6e6168 	powvsez	f6, f6, #0.0
 800a928:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800a92c:	6f726361 	svcvs	0x00726361
 800a930:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a934:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a76c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800a938:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800a93c:	6f207961 	svcvs	0x00207961
 800a940:	6f702072 	svcvs	0x00702072
 800a944:	20726577 	rsbscs	r6, r2, r7, ror r5
 800a948:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a94c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a950:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800a954:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a958:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a95c:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800a960:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800a964:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a968:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800a96c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a970:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800a974:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800a978:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800a97c:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800a980:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a984:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800a988:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800a990 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800a98c:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800a990:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800a994:	6f632079 	svcvs	0x00632079
 800a998:	6f72746e 	svcvs	0x0072746e
 800a99c:	7020736c 	eorvc	r7, r0, ip, ror #6
 800a9a0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a9a4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a9a8:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800a9ac:	73657270 	cmnvc	r5, #112, 4
 800a9b0:	73746e65 	cmnvc	r4, #1616	; 0x650
 800a9b4:	616f4320 	cmnvs	pc, r0, lsr #6
 800a9b8:	20657372 	rsbcs	r7, r5, r2, ror r3
 800a9bc:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800a9c0:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800a9c4:	70207469 	eorvc	r7, r0, r9, ror #8
 800a9c8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a9cc:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a9d0:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800a9d4:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800a9d8:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800a9dc:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800a9e0:	20746962 	rsbscs	r6, r4, r2, ror #18
 800a9e4:	61726170 	cmnvs	r2, r0, ror r1
 800a9e8:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800a9ec:	53007372 	movwpl	r7, #882	; 0x372
 800a9f0:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800a9f4:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800a9f8:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800a9fc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800aa00:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800aa04:	6f662065 	svcvs	0x00662065
 800aa08:	73612072 	cmnvc	r1, #114	; 0x72
 800aa0c:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800aa10:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800aa14:	72617020 	rsbvc	r7, r1, #32
 800aa18:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800aa1c:	53007265 	movwpl	r7, #613	; 0x265
 800aa20:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aa24:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aa28:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800aa2c:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800aa30:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800aa34:	20797469 	rsbscs	r7, r9, r9, ror #8
 800aa38:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aa3c:	6f737361 	svcvs	0x00737361
 800aa40:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800aa44:	70206465 	eorvc	r6, r0, r5, ror #8
 800aa48:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aa4c:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aa50:	6f6c5300 	svcvs	0x006c5300
 800aa54:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800aa58:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800aa5c:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800aa60:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aa64:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a8b0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800aa68:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800aa6c:	6f666e69 	svcvs	0x00666e69
 800aa70:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800aa74:	72617020 	rsbvc	r7, r1, #32
 800aa78:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800aa7c:	53007265 	movwpl	r7, #613	; 0x265
 800aa80:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aa84:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aa88:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800aa8c:	70207865 	eorvc	r7, r0, r5, ror #16
 800aa90:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800aa94:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800aa98:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aa9c:	6f737361 	svcvs	0x00737361
 800aaa0:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800aaa4:	70206465 	eorvc	r6, r0, r5, ror #8
 800aaa8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aaac:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aab0:	6f6c5300 	svcvs	0x006c5300
 800aab4:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800aab8:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800aabc:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800aac0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800aac4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800aac8:	6f662064 	svcvs	0x00662064
 800aacc:	73612072 	cmnvc	r1, #114	; 0x72
 800aad0:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800aad4:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800aad8:	72617020 	rsbvc	r7, r1, #32
 800aadc:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800aae0:	43007265 	movwmi	r7, #613	; 0x265
 800aae4:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800aae8:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800aaec:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800aaf0:	6f722f78 	svcvs	0x00722f78
 800aaf4:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800aaf8:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800aafc:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ab00:	00006c6f 	andeq	r6, r0, pc, ror #24

0800ab04 <s_tTableC2>:
 800ab04:	00000001 	andeq	r0, r0, r1
 800ab08:	0800a67e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, sp, pc}
 800ab0c:	00000002 	andeq	r0, r0, r2
 800ab10:	0800a688 	stmdaeq	r0, {r3, r7, r9, sl, sp, pc}
 800ab14:	00000101 	andeq	r0, r0, r1, lsl #2
 800ab18:	0800a699 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, sp, pc}
 800ab1c:	00000102 	andeq	r0, r0, r2, lsl #2
 800ab20:	0800a69d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, sp, pc}
 800ab24:	00000201 	andeq	r0, r0, r1, lsl #4
 800ab28:	0800a6a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, sp, pc}
 800ab2c:	00000202 	andeq	r0, r0, r2, lsl #4
 800ab30:	0800a6ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, sp, pc}
 800ab34:	00000203 	andeq	r0, r0, r3, lsl #4
 800ab38:	0800a6d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, sp, pc}
 800ab3c:	00000204 	andeq	r0, r0, r4, lsl #4
 800ab40:	0800a6fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, sp, pc}
 800ab44:	00000205 	andeq	r0, r0, r5, lsl #4
 800ab48:	0800a71f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl, sp, pc}
 800ab4c:	00000206 	andeq	r0, r0, r6, lsl #4
 800ab50:	0800a73a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, sp, pc}
 800ab54:	00000207 	andeq	r0, r0, r7, lsl #4
 800ab58:	0800a757 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, r9, sl, sp, pc}
 800ab5c:	00000208 	andeq	r0, r0, r8, lsl #4
 800ab60:	0800a773 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, r9, sl, sp, pc}
 800ab64:	00000211 	andeq	r0, r0, r1, lsl r2
 800ab68:	0800a790 	stmdaeq	r0, {r4, r7, r8, r9, sl, sp, pc}
 800ab6c:	00000212 	andeq	r0, r0, r2, lsl r2
 800ab70:	0800a7ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, sp, pc}
 800ab74:	00000213 	andeq	r0, r0, r3, lsl r2
 800ab78:	0800a7ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, sl, sp, pc}
 800ab7c:	00000214 	andeq	r0, r0, r4, lsl r2
 800ab80:	0800a7ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, sp, pc}
 800ab84:	00000215 	andeq	r0, r0, r5, lsl r2
 800ab88:	0800a80e 	stmdaeq	r0, {r1, r2, r3, fp, sp, pc}
 800ab8c:	00000216 	andeq	r0, r0, r6, lsl r2
 800ab90:	0800a82b 	stmdaeq	r0, {r0, r1, r3, r5, fp, sp, pc}
 800ab94:	00000217 	andeq	r0, r0, r7, lsl r2
 800ab98:	0800a82f 	stmdaeq	r0, {r0, r1, r2, r3, r5, fp, sp, pc}
 800ab9c:	00000301 	andeq	r0, r0, r1, lsl #6
 800aba0:	0800a83a 	stmdaeq	r0, {r1, r3, r4, r5, fp, sp, pc}
 800aba4:	00000302 	andeq	r0, r0, r2, lsl #6
 800aba8:	0800a84c 	stmdaeq	r0, {r2, r3, r6, fp, sp, pc}
 800abac:	00000303 	andeq	r0, r0, r3, lsl #6
 800abb0:	0800a860 	stmdaeq	r0, {r5, r6, fp, sp, pc}
 800abb4:	00000304 	andeq	r0, r0, r4, lsl #6
 800abb8:	0800a86c 	stmdaeq	r0, {r2, r3, r5, r6, fp, sp, pc}
 800abbc:	00000401 	andeq	r0, r0, r1, lsl #8
 800abc0:	0800a87a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, sp, pc}
 800abc4:	00000402 	andeq	r0, r0, r2, lsl #8
 800abc8:	0800a889 	stmdaeq	r0, {r0, r3, r7, fp, sp, pc}
 800abcc:	00000403 	andeq	r0, r0, r3, lsl #8
 800abd0:	0800a899 	stmdaeq	r0, {r0, r3, r4, r7, fp, sp, pc}
 800abd4:	00000404 	andeq	r0, r0, r4, lsl #8
 800abd8:	0800a8a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, sp, pc}
 800abdc:	00000405 	andeq	r0, r0, r5, lsl #8
 800abe0:	0800a8b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, sp, pc}
 800abe4:	00000406 	andeq	r0, r0, r6, lsl #8
 800abe8:	0800a8c2 	stmdaeq	r0, {r1, r6, r7, fp, sp, pc}
 800abec:	00000407 	andeq	r0, r0, r7, lsl #8
 800abf0:	0800a8d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, sp, pc}
 800abf4:	00000408 	andeq	r0, r0, r8, lsl #8
 800abf8:	0800a8eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, fp, sp, pc}
 800abfc:	00000409 	andeq	r0, r0, r9, lsl #8
 800ac00:	0800a8f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, fp, sp, pc}
 800ac04:	00000501 	andeq	r0, r0, r1, lsl #10
 800ac08:	0800a8fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp, pc}
 800ac0c:	00000502 	andeq	r0, r0, r2, lsl #10
 800ac10:	0800a913 	stmdaeq	r0, {r0, r1, r4, r8, fp, sp, pc}
 800ac14:	00000504 	andeq	r0, r0, r4, lsl #10
 800ac18:	0800a92b 	stmdaeq	r0, {r0, r1, r3, r5, r8, fp, sp, pc}
 800ac1c:	00000505 	andeq	r0, r0, r5, lsl #10
 800ac20:	0800a939 	stmdaeq	r0, {r0, r3, r4, r5, r8, fp, sp, pc}
 800ac24:	00000506 	andeq	r0, r0, r6, lsl #10
 800ac28:	0800a950 	stmdaeq	r0, {r4, r6, r8, fp, sp, pc}
 800ac2c:	00000507 	andeq	r0, r0, r7, lsl #10
 800ac30:	0800a95c 	stmdaeq	r0, {r2, r3, r4, r6, r8, fp, sp, pc}
 800ac34:	00000508 	andeq	r0, r0, r8, lsl #10
 800ac38:	0800a96b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, fp, sp, pc}
 800ac3c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800ac40:	0800a670 	stmdaeq	r0, {r4, r5, r6, r9, sl, sp, pc}
 800ac44:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ac48:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 800ac4c:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 800ac50:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800ac54:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800ac58:	204d4452 	subcs	r4, sp, r2, asr r4
 800ac5c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800ac60:	63206563 			; <UNDEFINED> instruction: 0x63206563
 800ac64:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 800ac68:	61727567 	cmnvs	r2, r7, ror #10
 800ac6c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800ac70:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800ac74:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800ac78:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800ac7c:	20726572 	rsbscs	r6, r2, r2, ror r5
 800ac80:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 800ac84:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ac88:	0a732a2e 	beq	9cd5548 <__exidx_end+0x1cc9f6c>
 800ac8c:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800ac90:	6166756e 	cmnvs	r6, lr, ror #10
 800ac94:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 800ac98:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 800ac9c:	20202044 	eorcs	r2, r0, r4, asr #32
 800aca0:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800aca4:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800aca8:	000a5832 	andeq	r5, sl, r2, lsr r8
 800acac:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 800acb0:	206c6169 	rsbcs	r6, ip, r9, ror #2
 800acb4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 800acb8:	20207265 	eorcs	r7, r0, r5, ror #4
 800acbc:	3a202020 	bcc	8812d44 <__exidx_end+0x807768>
 800acc0:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800acc4:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800acc8:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800accc:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800acd0:	20000a58 	andcs	r0, r0, r8, asr sl
 800acd4:	746f6f52 	strbtvc	r6, [pc], #-3922	; 800acdc <s_tTableC2+0x1d8>
 800acd8:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 800acdc:	20206c65 	eorcs	r6, r0, r5, ror #24
 800ace0:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ace4:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800ace8:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800acec:	5020000a 	eorpl	r0, r0, sl
 800acf0:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800acf4:	43207463 			; <UNDEFINED> instruction: 0x43207463
 800acf8:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 800acfc:	2079726f 	rsbscs	r7, r9, pc, ror #4
 800ad00:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ad04:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800ad08:	0a58322e 	beq	96175c8 <__exidx_end+0x160bfec>
 800ad0c:	72502000 	subsvc	r2, r0, #0
 800ad10:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 800ad14:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 800ad18:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 800ad1c:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ad20:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800ad24:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800ad28:	000a5832 	andeq	r5, sl, r2, lsr r8

0800ad2c <DEVICE_LABEL>:
 800ad2c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800ad30:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800ad34:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800ad38:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 800ad3c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

0800ad41 <RDMConst::MANUFACTURER_ID>:
 800ad41:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800ad43 <RDMConst::MANUFACTURER_NAME>:
 800ad43:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ad47:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800ad4b:	6f2e7777 	svcvs	0x002e7777
 800ad4f:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800ad53:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800ad57:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800ad5b:	0067726f 	rsbeq	r7, r7, pc, ror #4
	...

0800ad60 <vtable for PixelDmxParamsRdm>:
	...
 800ad68:	080054a9 	stmdaeq	r0, {r0, r3, r5, r7, sl, ip, lr}
 800ad6c:	080054ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, sl, ip, lr}
 800ad70:	08005493 	stmdaeq	r0, {r0, r1, r4, r7, sl, ip, lr}
 800ad74:	08005493 	stmdaeq	r0, {r0, r1, r4, r7, sl, ip, lr}
 800ad78:	080054cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, lr}
 800ad7c:	08005483 	stmdaeq	r0, {r0, r1, r7, sl, ip, lr}
 800ad80:	08005485 	stmdaeq	r0, {r0, r2, r7, sl, ip, lr}
 800ad84:	08005487 	stmdaeq	r0, {r0, r1, r2, r7, sl, ip, lr}
 800ad88:	0800548b 	stmdaeq	r0, {r0, r1, r3, r7, sl, ip, lr}
 800ad8c:	0800548f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, ip, lr}
 800ad90:	08005495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip, lr}

0800ad94 <vtable for WS28xxDmx>:
	...
 800ad9c:	08005555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, lr}
 800ada0:	08005575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, ip, lr}
 800ada4:	080055ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, ip, lr}
 800ada8:	080055f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, sl, ip, lr}
 800adac:	0800565f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}
 800adb0:	08005587 	stmdaeq	r0, {r0, r1, r2, r7, r8, sl, ip, lr}
 800adb4:	080058b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, fp, ip, lr}
 800adb8:	080055c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, ip, lr}
 800adbc:	0800554d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, ip, lr}
 800adc0:	08005551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, lr}
 800adc4:	0800561f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, sl, ip, lr}
 800adc8:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800adcc:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800add0:	61702058 	cmnvs	r0, r8, asr r0
 800add4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800add8:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800addc:	4720000a 	strmi	r0, [r0, -sl]!
 800ade0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800ade4:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800ade8:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 800adec:	203a2074 	eorscs	r2, sl, r4, ror r0
 800adf0:	5b206425 	blpl	8823e8c <__exidx_end+0x8188b0>
 800adf4:	756f7247 	strbvc	r7, [pc, #-583]!	; 800abb5 <s_tTableC2+0xb1>
 800adf8:	3a207370 	bcc	8827bc0 <__exidx_end+0x81c5e4>
 800adfc:	5d642520 	cfstr64pl	mvdx2, [r4, #-128]!	; 0xffffff80
 800ae00:	6e55000a 	cdpvs	0, 5, cr0, cr5, cr10, {0}
 800ae04:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 800ae08:	 	svcvs	0x004e006e

0800ae0a <s_patternName>:
 800ae0a:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800ae16:	61520000 	cmpvs	r2, r0
 800ae1a:	6f626e69 	svcvs	0x00626e69
 800ae1e:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800ae22:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800ae26:	61656854 	cmnvs	r5, r4, asr r8
 800ae2a:	20726574 	rsbscs	r6, r2, r4, ror r5
 800ae2e:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800ae32:	6f430065 	svcvs	0x00430065
 800ae36:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800ae3a:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800ae3e:	00000065 	andeq	r0, r0, r5, rrx
 800ae42:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800ae46:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800ae4a:	00000000 	andeq	r0, r0, r0
 800ae4e:	61460000 	mrsvs	r0, (UNDEF: 70)
 800ae52:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800ae5e <PixelType::MAPS>:
 800ae5e:	00424752 	subeq	r4, r2, r2, asr r7
 800ae62:	00474252 	subeq	r4, r7, r2, asr r2
 800ae66:	00425247 	subeq	r5, r2, r7, asr #4
 800ae6a:	00524247 	subseq	r4, r2, r7, asr #4
 800ae6e:	00475242 	subeq	r5, r7, r2, asr #4
 800ae72:	00524742 	subseq	r4, r2, r2, asr #14

0800ae76 <PixelType::TYPES>:
 800ae76:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ae7a:	00003130 	andeq	r3, r0, r0, lsr r1
 800ae7e:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ae82:	00003131 	andeq	r3, r0, r1, lsr r1
 800ae86:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ae8a:	00003231 	andeq	r3, r0, r1, lsr r2
 800ae8e:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ae92:	00423231 	subeq	r3, r2, r1, lsr r2
 800ae96:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800ae9a:	00003331 	andeq	r3, r0, r1, lsr r3
 800ae9e:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aea2:	00003531 	andeq	r3, r0, r1, lsr r5
 800aea6:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800aeaa:	00003231 	andeq	r3, r0, r1, lsr r2
 800aeae:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800aeb2:	00573231 	subseq	r3, r7, r1, lsr r2
 800aeb6:	31534355 	cmpcc	r3, r5, asr r3
 800aeba:	00333039 	eorseq	r3, r3, r9, lsr r0
 800aebe:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800aec2:	00333039 	eorseq	r3, r3, r9, lsr r0
 800aec6:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800aeca:	00003231 	andeq	r3, r0, r1, lsr r2
 800aece:	31415041 	cmpcc	r1, r1, asr #32
 800aed2:	00003230 	andeq	r3, r0, r0, lsr r2
 800aed6:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800aeda:	00003232 	andeq	r3, r0, r2, lsr r2
 800aede:	31383950 	teqcc	r8, r0, asr r9
 800aee2:	00000033 	andeq	r0, r0, r3, lsr r0
 800aee6:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800aeea:	6170206c 	cmnvs	r0, ip, rrx
 800aeee:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800aef2:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800aef6:	5420000a 	strtpl	r0, [r0], #-10
 800aefa:	20657079 	rsbcs	r7, r5, r9, ror r0
 800aefe:	3a202020 	bcc	8812f86 <__exidx_end+0x8079aa>
 800af02:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800af06:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 800af0a:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 800af0e:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800af12:	3a202020 	bcc	8812f9a <__exidx_end+0x8079be>
 800af16:	0a642520 	beq	991439e <__exidx_end+0x1908dc2>
 800af1a:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800af1e:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 800af22:	203a2067 	eorscs	r2, sl, r7, rrx
 800af26:	5b207325 	blpl	8827bc2 <__exidx_end+0x81c5e6>
 800af2a:	0a5d6425 	beq	9763fc6 <__exidx_end+0x17589ea>
 800af2e:	30542000 	subscc	r2, r4, r0
 800af32:	20202048 	eorcs	r2, r0, r8, asr #32
 800af36:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800af3a:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800af3e:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800af42:	0a5d5825 	beq	9760fde <__exidx_end+0x1755a02>
 800af46:	31542000 	cmpcc	r4, r0
 800af4a:	20202048 	eorcs	r2, r0, r8, asr #32
 800af4e:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800af52:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800af56:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800af5a:	0a5d5825 	beq	9760ff6 <__exidx_end+0x1755a1a>
	...

0800af60 <s_aStorSize>:
 800af60:	00000060 	andeq	r0, r0, r0, rrx
 800af64:	00000090 	muleq	r0, r0, r0
 800af68:	00000020 	andeq	r0, r0, r0, lsr #32
 800af6c:	00000040 	andeq	r0, r0, r0, asr #32
 800af70:	00000060 	andeq	r0, r0, r0, rrx
 800af74:	00000040 	andeq	r0, r0, r0, asr #32
 800af78:	00000020 	andeq	r0, r0, r0, lsr #32
 800af7c:	00000020 	andeq	r0, r0, r0, lsr #32
 800af80:	000001e0 	andeq	r0, r0, r0, ror #3
 800af84:	00000040 	andeq	r0, r0, r0, asr #32
 800af88:	00000020 	andeq	r0, r0, r0, lsr #32
 800af8c:	00000060 	andeq	r0, r0, r0, rrx
 800af90:	00000030 	andeq	r0, r0, r0, lsr r0
 800af94:	00000020 	andeq	r0, r0, r0, lsr #32
 800af98:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800af9c:	00000030 	andeq	r0, r0, r0, lsr r0
 800afa0:	00000040 	andeq	r0, r0, r0, asr #32
 800afa4:	00000020 	andeq	r0, r0, r0, lsr #32
 800afa8:	00000060 	andeq	r0, r0, r0, rrx
 800afac:	00000020 	andeq	r0, r0, r0, lsr #32
 800afb0:	00000400 	andeq	r0, r0, r0, lsl #8
 800afb4:	00000020 	andeq	r0, r0, r0, lsr #32
 800afb8:	00000020 	andeq	r0, r0, r0, lsr #32
 800afbc:	00000040 	andeq	r0, r0, r0, asr #32
 800afc0:	00000060 	andeq	r0, r0, r0, rrx
 800afc4:	00000020 	andeq	r0, r0, r0, lsr #32
 800afc8:	00000020 	andeq	r0, r0, r0, lsr #32
 800afcc:	00000020 	andeq	r0, r0, r0, lsr #32

0800afd0 <vtable for StoreDisplayUdf>:
	...
 800afd8:	080070c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, sp, lr}
 800afdc:	08007111 	stmdaeq	r0, {r0, r4, r8, ip, sp, lr}
 800afe0:	080070ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, ip, sp, lr}
 800afe4:	080070cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, ip, sp, lr}

0800afe8 <vtable for StoreRDMDevice>:
	...
 800aff0:	08007131 	stmdaeq	r0, {r0, r4, r5, r8, ip, sp, lr}
 800aff4:	080071a1 	stmdaeq	r0, {r0, r5, r7, r8, ip, sp, lr}
 800aff8:	08007139 	stmdaeq	r0, {r0, r3, r4, r5, r8, ip, sp, lr}
 800affc:	080071b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, ip, sp, lr}
 800b000:	0800715d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, ip, sp, lr}
 800b004:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b008:	00000000 	andeq	r0, r0, r0
 800b00c:	08007133 	stmdaeq	r0, {r0, r1, r4, r5, r8, ip, sp, lr}
 800b010:	080071ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, ip, sp, lr}
 800b014:	08007199 	stmdaeq	r0, {r0, r3, r4, r7, r8, ip, sp, lr}

0800b018 <vtable for StoreRDMSensors>:
	...
 800b020:	080071ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, ip, sp, lr}
 800b024:	08007235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip, sp, lr}
 800b028:	08007211 	stmdaeq	r0, {r0, r4, r9, ip, sp, lr}
 800b02c:	080071f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, ip, sp, lr}

0800b030 <vtable for StoreRDMSubDevices>:
	...
 800b038:	08007255 	stmdaeq	r0, {r0, r2, r4, r6, r9, ip, sp, lr}
 800b03c:	0800729d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, ip, sp, lr}
 800b040:	08007279 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, ip, sp, lr}
 800b044:	08007259 	stmdaeq	r0, {r0, r3, r4, r6, r9, ip, sp, lr}

0800b048 <vtable for StoreWS28xxDmx>:
	...
 800b050:	080072bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, ip, sp, lr}
 800b054:	0800742d 	stmdaeq	r0, {r0, r2, r3, r5, sl, ip, sp, lr}
 800b058:	080072c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, ip, sp, lr}
 800b05c:	08007441 	stmdaeq	r0, {r0, r6, sl, ip, sp, lr}
 800b060:	080073f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800b064:	080073c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, ip, sp, lr}
 800b068:	0800738d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, sp, lr}
 800b06c:	08007355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, ip, sp, lr}
 800b070:	0800731d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, ip, sp, lr}
 800b074:	080072e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, ip, sp, lr}
 800b078:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b07c:	00000000 	andeq	r0, r0, r0
 800b080:	080072bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r9, ip, sp, lr}
 800b084:	08007439 	stmdaeq	r0, {r0, r3, r4, r5, sl, ip, sp, lr}
 800b088:	08007425 	stmdaeq	r0, {r0, r2, r5, sl, ip, sp, lr}
 800b08c:	080073f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800b090:	080073bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, ip, sp, lr}
 800b094:	08007385 	stmdaeq	r0, {r0, r2, r7, r8, r9, ip, sp, lr}
 800b098:	0800734d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, ip, sp, lr}
 800b09c:	08007315 	stmdaeq	r0, {r0, r2, r4, r8, r9, ip, sp, lr}
 800b0a0:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
 800b0a4:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800b0a8:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800b0ac:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 800b0b0:	746f7420 	strbtvc	r7, [pc], #-1056	; 800b0b8 <vtable for StoreWS28xxDmx+0x70>
 800b0b4:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 800b0b8:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 800b0bc:	20736574 	rsbscs	r6, r3, r4, ror r5
 800b0c0:	2064255b 	rsbcs	r2, r4, fp, asr r5
 800b0c4:	0a5d426b 	beq	975ba78 <__exidx_end+0x175049c>
 800b0c8:	006f6c00 	rsbeq	r6, pc, r0, lsl #24
 800b0cc:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 800b0d0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 800b0d4:	2e255620 	cfmadda32cs	mvax1, mvax5, mvfx5, mvfx0
 800b0d8:	4400732a 	strmi	r7, [r0], #-810	; 0xfffffcd6
 800b0dc:	5320584d 			; <UNDEFINED> instruction: 0x5320584d
 800b0e0:	7533253a 	ldrvc	r2, [r3, #-1338]!	; 0xfffffac6
 800b0e4:	253a4620 	ldrcs	r4, [sl, #-1568]!	; 0xfffff9e0
 800b0e8:	4e007533 	mcrmi	5, 0, r7, cr0, cr3, {1}
 800b0ec:	6964206f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, sp}^
 800b0f0:	616c7073 	smcvs	50947	; 0xc703
 800b0f4:	6f662079 	svcvs	0x00662079
 800b0f8:	00646e75 	rsbeq	r6, r4, r5, ror lr
 800b0fc:	31314853 	teqcc	r1, r3, asr r8
 800b100:	53003630 	movwpl	r3, #1584	; 0x630
 800b104:	33314453 	teqcc	r1, #1392508928	; 0x53000000
 800b108:	25003630 	strcs	r3, [r0, #-1584]	; 0xfffff9d0
 800b10c:	25282073 	strcs	r2, [r8, #-115]!	; 0xffffff8d
 800b110:	64252c64 	strtvs	r2, [r5], #-3172	; 0xfffff39c
 800b114:	40000a29 	andmi	r0, r0, r9, lsr #20
 800b118:	eeaaeeaa 	cdp	14, 10, cr14, cr10, cr10, {5}
 800b11c:	00000000 	andeq	r0, r0, r0

0800b120 <_OledFont8x6>:
 800b120:	00000040 	andeq	r0, r0, r0, asr #32
 800b124:	40000000 	andmi	r0, r0, r0
 800b128:	005f0000 	subseq	r0, pc, r0
 800b12c:	00400000 	subeq	r0, r0, r0
 800b130:	00070007 	andeq	r0, r7, r7
 800b134:	7f144000 	svcvc	0x00144000
 800b138:	00147f14 	andseq	r7, r4, r4, lsl pc
 800b13c:	7f2a2440 	svcvc	0x002a2440
 800b140:	4000122a 	andmi	r1, r0, sl, lsr #4
 800b144:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800b148:	36400062 	strbcc	r0, [r0], -r2, rrx
 800b14c:	50205649 	eorpl	r5, r0, r9, asr #12
 800b150:	08004000 	stmdaeq	r0, {lr}
 800b154:	00000307 	andeq	r0, r0, r7, lsl #6
 800b158:	221c0040 	andscs	r0, ip, #64	; 0x40
 800b15c:	40000041 	andmi	r0, r0, r1, asr #32
 800b160:	1c224100 	stfnes	f4, [r2], #-0
 800b164:	2a400000 	bcs	900b16c <__exidx_end+0xfffb90>
 800b168:	2a1c7f1c 	bcs	872ade0 <__exidx_end+0x71f804>
 800b16c:	08084000 	stmdaeq	r8, {lr}
 800b170:	0008083e 	andeq	r0, r8, lr, lsr r8
 800b174:	70800040 	addvc	r0, r0, r0, asr #32
 800b178:	40000030 	andmi	r0, r0, r0, lsr r0
 800b17c:	08080808 	stmdaeq	r8, {r3, fp}
 800b180:	00400008 	subeq	r0, r0, r8
 800b184:	00606000 	rsbeq	r6, r0, r0
 800b188:	10204000 	eorne	r4, r0, r0
 800b18c:	00020408 	andeq	r0, r2, r8, lsl #8
 800b190:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800b194:	40003e45 	andmi	r3, r0, r5, asr #28
 800b198:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800b19c:	72400000 	subvc	r0, r0, #0
 800b1a0:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800b1a4:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800b1a8:	00334d49 	eorseq	r4, r3, r9, asr #26
 800b1ac:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800b1b0:	4000107f 	andmi	r1, r0, pc, ror r0
 800b1b4:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800b1b8:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800b1bc:	3149494a 	cmpcc	r9, sl, asr #18
 800b1c0:	21414000 	mrscs	r4, (UNDEF: 65)
 800b1c4:	00070911 	andeq	r0, r7, r1, lsl r9
 800b1c8:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800b1cc:	40003649 	andmi	r3, r0, r9, asr #12
 800b1d0:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800b1d4:	0040001e 	subeq	r0, r0, lr, lsl r0
 800b1d8:	00001400 	andeq	r1, r0, r0, lsl #8
 800b1dc:	40004000 	andmi	r4, r0, r0
 800b1e0:	00000034 	andeq	r0, r0, r4, lsr r0
 800b1e4:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800b1e8:	40004122 	andmi	r4, r0, r2, lsr #2
 800b1ec:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800b1f0:	00400014 	subeq	r0, r0, r4, lsl r0
 800b1f4:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800b1f8:	01024000 	mrseq	r4, (UNDEF: 2)
 800b1fc:	00060959 	andeq	r0, r6, r9, asr r9
 800b200:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800b204:	40004e59 	andmi	r4, r0, r9, asr lr
 800b208:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800b20c:	7f40007c 	svcvc	0x0040007c
 800b210:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800b214:	413e4000 	teqmi	lr, r0
 800b218:	00224141 	eoreq	r4, r2, r1, asr #2
 800b21c:	41417f40 	cmpmi	r1, r0, asr #30
 800b220:	40003e41 	andmi	r3, r0, r1, asr #28
 800b224:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800b228:	7f400041 	svcvc	0x00400041
 800b22c:	01090909 	tsteq	r9, r9, lsl #18
 800b230:	413e4000 	teqmi	lr, r0
 800b234:	00735141 	rsbseq	r5, r3, r1, asr #2
 800b238:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b23c:	40007f08 	andmi	r7, r0, r8, lsl #30
 800b240:	417f4100 	cmnmi	pc, r0, lsl #2
 800b244:	20400000 	subcs	r0, r0, r0
 800b248:	013f4140 	teqeq	pc, r0, asr #2
 800b24c:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800b250:	00412214 	subeq	r2, r1, r4, lsl r2
 800b254:	40407f40 	submi	r7, r0, r0, asr #30
 800b258:	40004040 	andmi	r4, r0, r0, asr #32
 800b25c:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800b260:	7f40007f 	svcvc	0x0040007f
 800b264:	7f100804 	svcvc	0x00100804
 800b268:	413e4000 	teqmi	lr, r0
 800b26c:	003e4141 	eorseq	r4, lr, r1, asr #2
 800b270:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b274:	40000609 	andmi	r0, r0, r9, lsl #12
 800b278:	2151413e 	cmpcs	r1, lr, lsr r1
 800b27c:	7f40005e 	svcvc	0x0040005e
 800b280:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800b284:	49264000 	stmdbmi	r6!, {lr}
 800b288:	00324949 	eorseq	r4, r2, r9, asr #18
 800b28c:	7f010340 	svcvc	0x00010340
 800b290:	40000301 	andmi	r0, r0, r1, lsl #6
 800b294:	4040403f 	submi	r4, r0, pc, lsr r0
 800b298:	1f40003f 	svcne	0x0040003f
 800b29c:	1f204020 	svcne	0x00204020
 800b2a0:	403f4000 	eorsmi	r4, pc, r0
 800b2a4:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800b2a8:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800b2ac:	40006314 	andmi	r6, r0, r4, lsl r3
 800b2b0:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800b2b4:	61400003 	cmpvs	r0, r3
 800b2b8:	434d4959 	movtmi	r4, #55641	; 0xd959
 800b2bc:	7f004000 	svcvc	0x00004000
 800b2c0:	00414141 	subeq	r4, r1, r1, asr #2
 800b2c4:	08040240 	stmdaeq	r4, {r6, r9}
 800b2c8:	40002010 	andmi	r2, r0, r0, lsl r0
 800b2cc:	41414100 	mrsmi	r4, (UNDEF: 81)
 800b2d0:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800b2d4:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800b2d8:	40404000 	submi	r4, r0, r0
 800b2dc:	00404040 	subeq	r4, r0, r0, asr #32
 800b2e0:	07030040 	streq	r0, [r3, -r0, asr #32]
 800b2e4:	40000008 	andmi	r0, r0, r8
 800b2e8:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800b2ec:	7f400040 	svcvc	0x00400040
 800b2f0:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800b2f4:	44384000 	ldrtmi	r4, [r8], #-0
 800b2f8:	00284444 	eoreq	r4, r8, r4, asr #8
 800b2fc:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800b300:	40007f28 	andmi	r7, r0, r8, lsr #30
 800b304:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800b308:	00400018 	subeq	r0, r0, r8, lsl r0
 800b30c:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800b310:	a4184000 	ldrge	r4, [r8], #-0
 800b314:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800b318:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800b31c:	40007804 	andmi	r7, r0, r4, lsl #16
 800b320:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800b324:	20400000 	subcs	r0, r0, r0
 800b328:	003d4040 	eorseq	r4, sp, r0, asr #32
 800b32c:	107f4000 	rsbsne	r4, pc, r0
 800b330:	00004428 	andeq	r4, r0, r8, lsr #8
 800b334:	7f410040 	svcvc	0x00410040
 800b338:	40000040 	andmi	r0, r0, r0, asr #32
 800b33c:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800b340:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800b344:	78040408 	stmdavc	r4, {r3, sl}
 800b348:	44384000 	ldrtmi	r4, [r8], #-0
 800b34c:	00384444 	eorseq	r4, r8, r4, asr #8
 800b350:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800b354:	40001824 	andmi	r1, r0, r4, lsr #16
 800b358:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800b35c:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800b360:	08040408 	stmdaeq	r4, {r3, sl}
 800b364:	54484000 	strbpl	r4, [r8], #-0
 800b368:	00245454 	eoreq	r5, r4, r4, asr r4
 800b36c:	3f040440 	svccc	0x00040440
 800b370:	40002444 	andmi	r2, r0, r4, asr #8
 800b374:	2040403c 	subcs	r4, r0, ip, lsr r0
 800b378:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800b37c:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800b380:	403c4000 	eorsmi	r4, ip, r0
 800b384:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800b388:	10284440 	eorne	r4, r8, r0, asr #8
 800b38c:	40004428 	andmi	r4, r0, r8, lsr #8
 800b390:	9090904c 	addsls	r9, r0, ip, asr #32
 800b394:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800b398:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800b39c:	08004000 	stmdaeq	r0, {lr}
 800b3a0:	00004136 	andeq	r4, r0, r6, lsr r1
 800b3a4:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800b3a8:	40000000 	andmi	r0, r0, r0
 800b3ac:	08364100 	ldmdaeq	r6!, {r8, lr}
 800b3b0:	02400000 	subeq	r0, r0, #0
 800b3b4:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800b3b8:	263c4000 	ldrtcs	r4, [ip], -r0
 800b3bc:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800b3c0 <oled_128x32_init>:
 800b3c0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b3c4:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800b3c8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b3cc:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800b3d0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b3d4:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b3d8 <oled_128x64_init>:
 800b3d8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b3dc:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800b3e0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b3e4:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800b3e8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b3ec:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b3f0 <vtable for Ssd1306>:
	...
 800b3f8:	08007aa7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r9, fp, ip, sp, lr}
 800b3fc:	08007ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, ip, sp, lr}
 800b400:	08007ded 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 800b404:	08007d71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800b408:	08007c3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, fp, ip, sp, lr}
 800b40c:	08007af5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, ip, sp, lr}
 800b410:	08007b1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp, ip, sp, lr}
 800b414:	08007c13 	stmdaeq	r0, {r0, r1, r4, sl, fp, ip, sp, lr}
 800b418:	08007bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr}
 800b41c:	08007aa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, ip, sp, lr}
 800b420:	08007c79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, ip, sp, lr}
 800b424:	08007c85 	stmdaeq	r0, {r0, r2, r7, sl, fp, ip, sp, lr}
 800b428:	08007c9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, sl, fp, ip, sp, lr}
 800b42c:	08007aad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, fp, ip, sp, lr}
 800b430:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800b434:	5b1b006d 	blpl	86cb5f0 <__exidx_end+0x6c0014>
 800b438:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800b43c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800b440:	205d732a 	subscs	r7, sp, sl, lsr #6
 800b444:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800b448:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800b44c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800b450:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800b454:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800b458:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800b45c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800b460:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800b464:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800b468:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800b46c:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800b470:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800b474:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800b478:	252f6432 	strcs	r6, [pc, #-1074]!	; 800b04e <vtable for StoreWS28xxDmx+0x6>
 800b47c:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800b480:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800b484:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800b488:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800b48c:	000a6432 	andeq	r6, sl, r2, lsr r4
 800b490:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800b494:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800b498:	33534400 	cmpcc	r3, #0, 8
 800b49c:	00313332 	eorseq	r3, r1, r2, lsr r3
 800b4a0:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800b4a4:	00333635 	eorseq	r3, r3, r5, lsr r6
 800b4a8:	5f434f53 	svcpl	0x00434f53
 800b4ac:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800b4b0:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800b4b4:	00000000 	andeq	r0, r0, r0

0800b4b8 <CSWTCH.7>:
 800b4b8:	0800b490 	stmdaeq	r0, {r4, r7, sl, ip, sp, pc}
 800b4bc:	0800b499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, sp, pc}
 800b4c0:	0800b4a0 	stmdaeq	r0, {r5, r7, sl, ip, sp, pc}
 800b4c4:	0800b4a8 	stmdaeq	r0, {r3, r5, r7, sl, ip, sp, pc}
 800b4c8:	5f5f0030 	svcpl	0x005f0030
 800b4cc:	5f617863 	svcpl	0x00617863
 800b4d0:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 800b4d4:	7269765f 	rsbvc	r7, r9, #99614720	; 0x5f00000
 800b4d8:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
 800b4dc:	63727300 	cmnvs	r2, #0, 6
 800b4e0:	7275702f 	rsbsvc	r7, r5, #47	; 0x2f
 800b4e4:	6c616365 	stclvs	3, cr6, [r1], #-404	; 0xfffffe6c
 800b4e8:	70632e6c 	rsbvc	r2, r3, ip, ror #28
 800b4ec:	202c0070 	eorcs	r0, ip, r0, ror r0
 800b4f0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 800b4f4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800b4f8:	6100203a 	tstvs	r0, sl, lsr r0
 800b4fc:	72657373 	rsbvc	r7, r5, #-872415231	; 0xcc000001
 800b500:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800b504:	73252220 			; <UNDEFINED> instruction: 0x73252220
 800b508:	61662022 	cmnvs	r6, r2, lsr #32
 800b50c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 800b510:	6966203a 	stmdbvs	r6!, {r1, r3, r4, r5, sp}^
 800b514:	2220656c 	eorcs	r6, r0, #108, 10	; 0x1b000000
 800b518:	2c227325 	stccs	3, cr7, [r2], #-148	; 0xffffff6c
 800b51c:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 800b520:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 800b524:	73257325 			; <UNDEFINED> instruction: 0x73257325
 800b528:	616d000a 	cmnvs	sp, sl
 800b52c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800b530:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 800b534:	616d000a 	cmnvs	sp, sl
 800b538:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800b53c:	656e203a 	strbvs	r2, [lr, #-58]!	; 0xffffffc6
 800b540:	3e207478 	mcrcc	4, 1, r7, cr0, cr8, {3}
 800b544:	6f6c6220 	svcvs	0x006c6220
 800b548:	6c5f6b63 	mrrcvs	11, 6, r6, pc, cr3	; <UNPREDICTABLE>
 800b54c:	74696d69 	strbtvc	r6, [r9], #-3433	; 0xfffff297
 800b550:	616d000a 	cmnvs	sp, sl
 800b554:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
 800b558:	4270203a 	rsbsmi	r2, r0, #58	; 0x3a
 800b55c:	6b636f6c 	blvs	98e7314 <__exidx_end+0x18dbd38>
 800b560:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
 800b564:	253d7265 	ldrcs	r7, [sp, #-613]!	; 0xfffffd9b
 800b568:	73202c70 			; <UNDEFINED> instruction: 0x73202c70
 800b56c:	3d657a69 	vstmdbcc	r5!, {s15-s119}
 800b570:	202c6425 	eorcs	r6, ip, r5, lsr #8
 800b574:	61746164 	cmnvs	r4, r4, ror #2
 800b578:	0a70253d 	beq	9c14a74 <__exidx_end+0x1c09498>
 800b57c:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
 800b580:	70203a65 	eorvc	r3, r0, r5, ror #20
 800b584:	636f6c42 	cmnvs	pc, #16896	; 0x4200
 800b588:	6165486b 	cmnvs	r5, fp, ror #16
 800b58c:	20726564 	rsbscs	r6, r2, r4, ror #10
 800b590:	7025203d 	eorvc	r2, r5, sp, lsr r0
 800b594:	4270202c 	rsbsmi	r2, r0, #44	; 0x2c
 800b598:	6b636f6c 	blvs	98e7350 <__exidx_end+0x18dbd74>
 800b59c:	25203d20 	strcs	r3, [r0, #-3360]!	; 0xfffff2e0
 800b5a0:	00000a70 	andeq	r0, r0, r0, ror sl

0800b5a4 <days_of_month>:
 800b5a4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 800b5ac:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5b0:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5b4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5bc:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5c0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5c8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5cc:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5d0:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800b5d4 <__exidx_start>:
 800b5d4:	7fff4bac 	svcvc	0x00ff4bac
 800b5d8:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800b5dc <.ARM.attributes>:
 800b5dc:	00002e41 	andeq	r2, r0, r1, asr #28
 800b5e0:	61656100 	cmnvs	r5, r0, lsl #2
 800b5e4:	01006962 	tsteq	r0, r2, ror #18
 800b5e8:	00000024 	andeq	r0, r0, r4, lsr #32
 800b5ec:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800b5f0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800b5f4:	0600334d 	streq	r3, [r0], -sp, asr #6
 800b5f8:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 800b5fc:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 800b600:	17011501 	strne	r1, [r1, -r1, lsl #10]
 800b604:	1a011803 	bne	8051618 <__exidx_end+0x4603c>
 800b608:	Address 0x000000000800b608 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f3 <RDMResponder::m_IsSubDeviceActive>:
	...

200001f4 <RDMResponder::s_pThis>:
200001f4:	00000000 	andeq	r0, r0, r0

200001f8 <RDMSensors::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSubDevices::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <DMXReceiver::s_IsActive>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_pLightSet>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_bDisableOutput>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <s_RxBuffer>:
	...

2000041c <s_TxBuffer>:
	...

20000620 <sv_PortState>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <s_nUartsSending>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <sv_nRxDmxPackets>:
	...

20000638 <Dmx::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <gv_RdmDataReceiveEnd>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <RDMDeviceResponder::s_pThis>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMIdentify::m_bIsEnabled>:
	...

20000645 <RDMIdentify::m_nMode>:
20000645:	 	andeq	r0, r0, r0

20000648 <RDMIdentify::s_pThis>:
20000648:	00000000 	andeq	r0, r0, r0

2000064c <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <PixelDmxParamsRdm::s_Data>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <WS28xxDmx::s_pThis>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelPatterns::m_PortConfig>:
	...

20000678 <PixelPatterns::m_nActivePorts>:
20000678:	00000000 	andeq	r0, r0, r0

2000067c <PixelPatterns::m_pScannerColours>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_nCount>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_pOutput>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelTestPattern::s_pThis>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_Pattern>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <s_tmp>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <WS28xx::s_pThis>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <SpiFlashStore::s_nWaitMillis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <SpiFlashStore::s_SpiFlashData>:
	...

2000169c <SpiFlashStore::s_nStartAddress>:
2000169c:	00000000 	andeq	r0, r0, r0

200016a0 <SpiFlashStore::s_bHaveFlashChip>:
200016a0:	00000000 	andeq	r0, r0, r0

200016a4 <SpiFlashStore::s_nSpiFlashStoreSize>:
200016a4:	00000000 	andeq	r0, r0, r0

200016a8 <SpiFlashStore::s_State>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <SpiFlashStore::s_pThis>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <SpiFlashStore::s_bIsNew>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <StoreDisplayUdf::s_pThis>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <StoreRDMDevice::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <StoreRDMSensors::s_pThis>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreRDMSubDevices::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StoreWS28xxDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <FlashRom::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <flashrom::s_nAddress>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <flashrom::s_State>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <flashrom::s_nPage>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashrom::s_pData>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashrom::s_isBank0>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashrom::s_nLength>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <Network::s_pThis>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <DisplayUdf::s_pThis>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <Display::s_pThis>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <_ClearBuffer>:
	...

20001778 <Ssd1306::s_pThis>:
20001778:	00000000 	andeq	r0, r0, r0

2000177c <FirmwareVersion::s_FirmwareVersion>:
	...

20001792 <FirmwareVersion::s_Print>:
	...

200017d4 <FirmwareVersion::s_pThis>:
200017d4:	00000000 	andeq	r0, r0, r0

200017d8 <LedBlink::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <Hardware::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <HwClock::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <Tm>:
	...

20001808 <s_micros>:
	...

20001810 <set_timer>:
20001810:	00000000 	andeq	r0, r0, r0

20001814 <s_nSysTickMillis>:
20001814:	00000000 	andeq	r0, r0, r0

20001818 <s_nAddress>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
