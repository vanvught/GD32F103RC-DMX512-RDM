
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <__gVectors>:
 8000000:	2000c000 	andcs	ip, r0, r0
 8000004:	08000ff5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp}
 8000008:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800000c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000010:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000014:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000018:	08001041 	stmdaeq	r0, {r0, r6, ip}
	...
 800002c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000030:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800003c:	080088d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, fp, pc}
 8000040:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000044:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000048:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800004c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000050:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000054:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000058:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800005c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000060:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000064:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000068:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800006c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000070:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000074:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000078:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800007c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000080:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000084:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000088:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800008c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000090:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000094:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000098:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800009c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000a8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000ac:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000b0:	08003705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp}
 80000b4:	080037b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp}
 80000b8:	08003809 	stmdaeq	r0, {r0, r3, fp, ip, sp}
 80000bc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000c8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000cc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000d8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000dc:	080034ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, ip, sp}
 80000e0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000e4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000e8:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000ec:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f0:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f4:	08001041 	stmdaeq	r0, {r0, r6, ip}
 80000f8:	00000000 	andeq	r0, r0, r0
 80000fc:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000100:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000104:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000108:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800010c:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000110:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000114:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000118:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800011c:	08003829 	stmdaeq	r0, {r0, r3, r5, fp, ip, sp}
 8000120:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000124:	08001041 	stmdaeq	r0, {r0, r6, ip}
 8000128:	08001041 	stmdaeq	r0, {r0, r6, ip}
 800012c:	08001041 	stmdaeq	r0, {r0, r6, ip}

Disassembly of section .text:

08000130 <console_init>:
 8000130:	b508      	push	{r3, lr}
 8000132:	f008 fb61 	bl	80087f8 <uart0_init>
 8000136:	4804      	ldr	r0, [pc, #16]	; (8000148 <console_init+0x18>)
 8000138:	f008 fb8e 	bl	8008858 <uart0_puts>
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <console_init+0x1c>)
 800013e:	f008 fb8b 	bl	8008858 <uart0_puts>
 8000142:	2000      	movs	r0, #0
 8000144:	bd08      	pop	{r3, pc}
 8000146:	bf00      	nop
 8000148:	0800b484 	stmdaeq	r0, {r2, r7, sl, ip, sp, pc}
 800014c:	0800b48a 	stmdaeq	r0, {r1, r3, r7, sl, ip, sp, pc}

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b80c 	b.w	8000180 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f001 ffae 	bl	80020d0 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__aeabi_idiv0>:
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop

08000184 <__aeabi_drsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000188:	e002      	b.n	8000190 <__adddf3>
 800018a:	bf00      	nop

0800018c <__aeabi_dsub>:
 800018c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000190 <__adddf3>:
 8000190:	b530      	push	{r4, r5, lr}
 8000192:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000196:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019a:	ea94 0f05 	teq	r4, r5
 800019e:	bf08      	it	eq
 80001a0:	ea90 0f02 	teqeq	r0, r2
 80001a4:	bf1f      	itttt	ne
 80001a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b6:	f000 80e2 	beq.w	800037e <__adddf3+0x1ee>
 80001ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c2:	bfb8      	it	lt
 80001c4:	426d      	neglt	r5, r5
 80001c6:	dd0c      	ble.n	80001e2 <__adddf3+0x52>
 80001c8:	442c      	add	r4, r5
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	ea82 0000 	eor.w	r0, r2, r0
 80001d6:	ea83 0101 	eor.w	r1, r3, r1
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	2d36      	cmp	r5, #54	; 0x36
 80001e4:	bf88      	it	hi
 80001e6:	bd30      	pophi	{r4, r5, pc}
 80001e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x70>
 80001fa:	4240      	negs	r0, r0
 80001fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000200:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000204:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000208:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x84>
 800020e:	4252      	negs	r2, r2
 8000210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000214:	ea94 0f05 	teq	r4, r5
 8000218:	f000 80a7 	beq.w	800036a <__adddf3+0x1da>
 800021c:	f1a4 0401 	sub.w	r4, r4, #1
 8000220:	f1d5 0e20 	rsbs	lr, r5, #32
 8000224:	db0d      	blt.n	8000242 <__adddf3+0xb2>
 8000226:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022a:	fa22 f205 	lsr.w	r2, r2, r5
 800022e:	1880      	adds	r0, r0, r2
 8000230:	f141 0100 	adc.w	r1, r1, #0
 8000234:	fa03 f20e 	lsl.w	r2, r3, lr
 8000238:	1880      	adds	r0, r0, r2
 800023a:	fa43 f305 	asr.w	r3, r3, r5
 800023e:	4159      	adcs	r1, r3
 8000240:	e00e      	b.n	8000260 <__adddf3+0xd0>
 8000242:	f1a5 0520 	sub.w	r5, r5, #32
 8000246:	f10e 0e20 	add.w	lr, lr, #32
 800024a:	2a01      	cmp	r2, #1
 800024c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000250:	bf28      	it	cs
 8000252:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000256:	fa43 f305 	asr.w	r3, r3, r5
 800025a:	18c0      	adds	r0, r0, r3
 800025c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000260:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000264:	d507      	bpl.n	8000276 <__adddf3+0xe6>
 8000266:	f04f 0e00 	mov.w	lr, #0
 800026a:	f1dc 0c00 	rsbs	ip, ip, #0
 800026e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000272:	eb6e 0101 	sbc.w	r1, lr, r1
 8000276:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027a:	d31b      	bcc.n	80002b4 <__adddf3+0x124>
 800027c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000280:	d30c      	bcc.n	800029c <__adddf3+0x10c>
 8000282:	0849      	lsrs	r1, r1, #1
 8000284:	ea5f 0030 	movs.w	r0, r0, rrx
 8000288:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800028c:	f104 0401 	add.w	r4, r4, #1
 8000290:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000294:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000298:	f080 809a 	bcs.w	80003d0 <__adddf3+0x240>
 800029c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a0:	bf08      	it	eq
 80002a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a6:	f150 0000 	adcs.w	r0, r0, #0
 80002aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ae:	ea41 0105 	orr.w	r1, r1, r5
 80002b2:	bd30      	pop	{r4, r5, pc}
 80002b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b8:	4140      	adcs	r0, r0
 80002ba:	eb41 0101 	adc.w	r1, r1, r1
 80002be:	3c01      	subs	r4, #1
 80002c0:	bf28      	it	cs
 80002c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c6:	d2e9      	bcs.n	800029c <__adddf3+0x10c>
 80002c8:	f091 0f00 	teq	r1, #0
 80002cc:	bf04      	itt	eq
 80002ce:	4601      	moveq	r1, r0
 80002d0:	2000      	moveq	r0, #0
 80002d2:	fab1 f381 	clz	r3, r1
 80002d6:	bf08      	it	eq
 80002d8:	3320      	addeq	r3, #32
 80002da:	f1a3 030b 	sub.w	r3, r3, #11
 80002de:	f1b3 0220 	subs.w	r2, r3, #32
 80002e2:	da0c      	bge.n	80002fe <__adddf3+0x16e>
 80002e4:	320c      	adds	r2, #12
 80002e6:	dd08      	ble.n	80002fa <__adddf3+0x16a>
 80002e8:	f102 0c14 	add.w	ip, r2, #20
 80002ec:	f1c2 020c 	rsb	r2, r2, #12
 80002f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f4:	fa21 f102 	lsr.w	r1, r1, r2
 80002f8:	e00c      	b.n	8000314 <__adddf3+0x184>
 80002fa:	f102 0214 	add.w	r2, r2, #20
 80002fe:	bfd8      	it	le
 8000300:	f1c2 0c20 	rsble	ip, r2, #32
 8000304:	fa01 f102 	lsl.w	r1, r1, r2
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	bfdc      	itt	le
 800030e:	ea41 010c 	orrle.w	r1, r1, ip
 8000312:	4090      	lslle	r0, r2
 8000314:	1ae4      	subs	r4, r4, r3
 8000316:	bfa2      	ittt	ge
 8000318:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800031c:	4329      	orrge	r1, r5
 800031e:	bd30      	popge	{r4, r5, pc}
 8000320:	ea6f 0404 	mvn.w	r4, r4
 8000324:	3c1f      	subs	r4, #31
 8000326:	da1c      	bge.n	8000362 <__adddf3+0x1d2>
 8000328:	340c      	adds	r4, #12
 800032a:	dc0e      	bgt.n	800034a <__adddf3+0x1ba>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0220 	rsb	r2, r4, #32
 8000334:	fa20 f004 	lsr.w	r0, r0, r4
 8000338:	fa01 f302 	lsl.w	r3, r1, r2
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	fa21 f304 	lsr.w	r3, r1, r4
 8000344:	ea45 0103 	orr.w	r1, r5, r3
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f1c4 040c 	rsb	r4, r4, #12
 800034e:	f1c4 0220 	rsb	r2, r4, #32
 8000352:	fa20 f002 	lsr.w	r0, r0, r2
 8000356:	fa01 f304 	lsl.w	r3, r1, r4
 800035a:	ea40 0003 	orr.w	r0, r0, r3
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	fa21 f004 	lsr.w	r0, r1, r4
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f094 0f00 	teq	r4, #0
 800036e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000372:	bf06      	itte	eq
 8000374:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000378:	3401      	addeq	r4, #1
 800037a:	3d01      	subne	r5, #1
 800037c:	e74e      	b.n	800021c <__adddf3+0x8c>
 800037e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000382:	bf18      	it	ne
 8000384:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000388:	d029      	beq.n	80003de <__adddf3+0x24e>
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	d005      	beq.n	80003a2 <__adddf3+0x212>
 8000396:	ea54 0c00 	orrs.w	ip, r4, r0
 800039a:	bf04      	itt	eq
 800039c:	4619      	moveq	r1, r3
 800039e:	4610      	moveq	r0, r2
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	ea91 0f03 	teq	r1, r3
 80003a6:	bf1e      	ittt	ne
 80003a8:	2100      	movne	r1, #0
 80003aa:	2000      	movne	r0, #0
 80003ac:	bd30      	popne	{r4, r5, pc}
 80003ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b2:	d105      	bne.n	80003c0 <__adddf3+0x230>
 80003b4:	0040      	lsls	r0, r0, #1
 80003b6:	4149      	adcs	r1, r1
 80003b8:	bf28      	it	cs
 80003ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c4:	bf3c      	itt	cc
 80003c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ca:	bd30      	popcc	{r4, r5, pc}
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf1a      	itte	ne
 80003e4:	4619      	movne	r1, r3
 80003e6:	4610      	movne	r0, r2
 80003e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003ec:	bf1c      	itt	ne
 80003ee:	460b      	movne	r3, r1
 80003f0:	4602      	movne	r2, r0
 80003f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f6:	bf06      	itte	eq
 80003f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003fc:	ea91 0f03 	teqeq	r1, r3
 8000400:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	bf00      	nop

08000408 <__aeabi_ui2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f04f 0500 	mov.w	r5, #0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e750      	b.n	80002c8 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_i2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000440:	bf48      	it	mi
 8000442:	4240      	negmi	r0, r0
 8000444:	f04f 0100 	mov.w	r1, #0
 8000448:	e73e      	b.n	80002c8 <__adddf3+0x138>
 800044a:	bf00      	nop

0800044c <__aeabi_f2d>:
 800044c:	0042      	lsls	r2, r0, #1
 800044e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000452:	ea4f 0131 	mov.w	r1, r1, rrx
 8000456:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045a:	bf1f      	itttt	ne
 800045c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000460:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000464:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000468:	4770      	bxne	lr
 800046a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046e:	bf08      	it	eq
 8000470:	4770      	bxeq	lr
 8000472:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000476:	bf04      	itt	eq
 8000478:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800048c:	e71c      	b.n	80002c8 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_ul2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f04f 0500 	mov.w	r5, #0
 800049e:	e00a      	b.n	80004b6 <__aeabi_l2d+0x16>

080004a0 <__aeabi_l2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ae:	d502      	bpl.n	80004b6 <__aeabi_l2d+0x16>
 80004b0:	4240      	negs	r0, r0
 80004b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c2:	f43f aed8 	beq.w	8000276 <__adddf3+0xe6>
 80004c6:	f04f 0203 	mov.w	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004de:	f1c2 0320 	rsb	r3, r2, #32
 80004e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ee:	ea40 000e 	orr.w	r0, r0, lr
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	4414      	add	r4, r2
 80004f8:	e6bd      	b.n	8000276 <__adddf3+0xe6>
 80004fa:	bf00      	nop

080004fc <__aeabi_dmul>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050a:	bf1d      	ittte	ne
 800050c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000510:	ea94 0f0c 	teqne	r4, ip
 8000514:	ea95 0f0c 	teqne	r5, ip
 8000518:	f000 f8de 	bleq	80006d8 <__aeabi_dmul+0x1dc>
 800051c:	442c      	add	r4, r5
 800051e:	ea81 0603 	eor.w	r6, r1, r3
 8000522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052e:	bf18      	it	ne
 8000530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053c:	d038      	beq.n	80005b0 <__aeabi_dmul+0xb4>
 800053e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000552:	f04f 0600 	mov.w	r6, #0
 8000556:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055a:	f09c 0f00 	teq	ip, #0
 800055e:	bf18      	it	ne
 8000560:	f04e 0e01 	orrne.w	lr, lr, #1
 8000564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800056c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000570:	d204      	bcs.n	800057c <__aeabi_dmul+0x80>
 8000572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000576:	416d      	adcs	r5, r5
 8000578:	eb46 0606 	adc.w	r6, r6, r6
 800057c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800058c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000594:	bf88      	it	hi
 8000596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059a:	d81e      	bhi.n	80005da <__aeabi_dmul+0xde>
 800059c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b4:	ea46 0101 	orr.w	r1, r6, r1
 80005b8:	ea40 0002 	orr.w	r0, r0, r2
 80005bc:	ea81 0103 	eor.w	r1, r1, r3
 80005c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c4:	bfc2      	ittt	gt
 80005c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	popgt	{r4, r5, r6, pc}
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f04f 0e00 	mov.w	lr, #0
 80005d8:	3c01      	subs	r4, #1
 80005da:	f300 80ab 	bgt.w	8000734 <__aeabi_dmul+0x238>
 80005de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e2:	bfde      	ittt	le
 80005e4:	2000      	movle	r0, #0
 80005e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd70      	pople	{r4, r5, r6, pc}
 80005ec:	f1c4 0400 	rsb	r4, r4, #0
 80005f0:	3c20      	subs	r4, #32
 80005f2:	da35      	bge.n	8000660 <__aeabi_dmul+0x164>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc1b      	bgt.n	8000630 <__aeabi_dmul+0x134>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f305 	lsl.w	r3, r0, r5
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f205 	lsl.w	r2, r1, r5
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	fa21 f604 	lsr.w	r6, r1, r4
 8000620:	eb42 0106 	adc.w	r1, r2, r6
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 040c 	rsb	r4, r4, #12
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f304 	lsl.w	r3, r0, r4
 800063c:	fa20 f005 	lsr.w	r0, r0, r5
 8000640:	fa01 f204 	lsl.w	r2, r1, r4
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000650:	f141 0100 	adc.w	r1, r1, #0
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f205 	lsl.w	r2, r0, r5
 8000668:	ea4e 0e02 	orr.w	lr, lr, r2
 800066c:	fa20 f304 	lsr.w	r3, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea43 0302 	orr.w	r3, r3, r2
 8000678:	fa21 f004 	lsr.w	r0, r1, r4
 800067c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000680:	fa21 f204 	lsr.w	r2, r1, r4
 8000684:	ea20 0002 	bic.w	r0, r0, r2
 8000688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f094 0f00 	teq	r4, #0
 800069c:	d10f      	bne.n	80006be <__aeabi_dmul+0x1c2>
 800069e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a2:	0040      	lsls	r0, r0, #1
 80006a4:	eb41 0101 	adc.w	r1, r1, r1
 80006a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3c01      	subeq	r4, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1a6>
 80006b2:	ea41 0106 	orr.w	r1, r1, r6
 80006b6:	f095 0f00 	teq	r5, #0
 80006ba:	bf18      	it	ne
 80006bc:	4770      	bxne	lr
 80006be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	eb43 0303 	adc.w	r3, r3, r3
 80006c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3d01      	subeq	r5, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1c6>
 80006d2:	ea43 0306 	orr.w	r3, r3, r6
 80006d6:	4770      	bx	lr
 80006d8:	ea94 0f0c 	teq	r4, ip
 80006dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e0:	bf18      	it	ne
 80006e2:	ea95 0f0c 	teqne	r5, ip
 80006e6:	d00c      	beq.n	8000702 <__aeabi_dmul+0x206>
 80006e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ec:	bf18      	it	ne
 80006ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f2:	d1d1      	bne.n	8000698 <__aeabi_dmul+0x19c>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000706:	bf06      	itte	eq
 8000708:	4610      	moveq	r0, r2
 800070a:	4619      	moveq	r1, r3
 800070c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000710:	d019      	beq.n	8000746 <__aeabi_dmul+0x24a>
 8000712:	ea94 0f0c 	teq	r4, ip
 8000716:	d102      	bne.n	800071e <__aeabi_dmul+0x222>
 8000718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800071c:	d113      	bne.n	8000746 <__aeabi_dmul+0x24a>
 800071e:	ea95 0f0c 	teq	r5, ip
 8000722:	d105      	bne.n	8000730 <__aeabi_dmul+0x234>
 8000724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000728:	bf1c      	itt	ne
 800072a:	4610      	movne	r0, r2
 800072c:	4619      	movne	r1, r3
 800072e:	d10a      	bne.n	8000746 <__aeabi_dmul+0x24a>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <__aeabi_ddiv>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075e:	bf1d      	ittte	ne
 8000760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000764:	ea94 0f0c 	teqne	r4, ip
 8000768:	ea95 0f0c 	teqne	r5, ip
 800076c:	f000 f8a7 	bleq	80008be <__aeabi_ddiv+0x16e>
 8000770:	eba4 0405 	sub.w	r4, r4, r5
 8000774:	ea81 0e03 	eor.w	lr, r1, r3
 8000778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800077c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000780:	f000 8088 	beq.w	8000894 <__aeabi_ddiv+0x144>
 8000784:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800078c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000794:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800079c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a8:	429d      	cmp	r5, r3
 80007aa:	bf08      	it	eq
 80007ac:	4296      	cmpeq	r6, r2
 80007ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b6:	d202      	bcs.n	80007be <__aeabi_ddiv+0x6e>
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	1ab6      	subs	r6, r6, r2
 80007c0:	eb65 0503 	sbc.w	r5, r5, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800082c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000830:	d018      	beq.n	8000864 <__aeabi_ddiv+0x114>
 8000832:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084e:	d1c0      	bne.n	80007d2 <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	d10b      	bne.n	800086e <__aeabi_ddiv+0x11e>
 8000856:	ea41 0100 	orr.w	r1, r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000862:	e7b6      	b.n	80007d2 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf04      	itt	eq
 800086a:	4301      	orreq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000872:	bf88      	it	hi
 8000874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000878:	f63f aeaf 	bhi.w	80005da <__aeabi_dmul+0xde>
 800087c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000880:	bf04      	itt	eq
 8000882:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088a:	f150 0000 	adcs.w	r0, r0, #0
 800088e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800089c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a0:	bfc2      	ittt	gt
 80008a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008aa:	bd70      	popgt	{r4, r5, r6, pc}
 80008ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b0:	f04f 0e00 	mov.w	lr, #0
 80008b4:	3c01      	subs	r4, #1
 80008b6:	e690      	b.n	80005da <__aeabi_dmul+0xde>
 80008b8:	ea45 0e06 	orr.w	lr, r5, r6
 80008bc:	e68d      	b.n	80005da <__aeabi_dmul+0xde>
 80008be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c2:	ea94 0f0c 	teq	r4, ip
 80008c6:	bf08      	it	eq
 80008c8:	ea95 0f0c 	teqeq	r5, ip
 80008cc:	f43f af3b 	beq.w	8000746 <__aeabi_dmul+0x24a>
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	d10a      	bne.n	80008ec <__aeabi_ddiv+0x19c>
 80008d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008da:	f47f af34 	bne.w	8000746 <__aeabi_dmul+0x24a>
 80008de:	ea95 0f0c 	teq	r5, ip
 80008e2:	f47f af25 	bne.w	8000730 <__aeabi_dmul+0x234>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e72c      	b.n	8000746 <__aeabi_dmul+0x24a>
 80008ec:	ea95 0f0c 	teq	r5, ip
 80008f0:	d106      	bne.n	8000900 <__aeabi_ddiv+0x1b0>
 80008f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f6:	f43f aefd 	beq.w	80006f4 <__aeabi_dmul+0x1f8>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e722      	b.n	8000746 <__aeabi_dmul+0x24a>
 8000900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090a:	f47f aec5 	bne.w	8000698 <__aeabi_dmul+0x19c>
 800090e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000912:	f47f af0d 	bne.w	8000730 <__aeabi_dmul+0x234>
 8000916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091a:	f47f aeeb 	bne.w	80006f4 <__aeabi_dmul+0x1f8>
 800091e:	e712      	b.n	8000746 <__aeabi_dmul+0x24a>

08000920 <__aeabi_d2f>:
 8000920:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000924:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000928:	bf24      	itt	cs
 800092a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000932:	d90d      	bls.n	8000950 <__aeabi_d2f+0x30>
 8000934:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000938:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800093c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000940:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000944:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000948:	bf08      	it	eq
 800094a:	f020 0001 	biceq.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000954:	d121      	bne.n	800099a <__aeabi_d2f+0x7a>
 8000956:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800095a:	bfbc      	itt	lt
 800095c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000960:	4770      	bxlt	lr
 8000962:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000966:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800096a:	f1c2 0218 	rsb	r2, r2, #24
 800096e:	f1c2 0c20 	rsb	ip, r2, #32
 8000972:	fa10 f30c 	lsls.w	r3, r0, ip
 8000976:	fa20 f002 	lsr.w	r0, r0, r2
 800097a:	bf18      	it	ne
 800097c:	f040 0001 	orrne.w	r0, r0, #1
 8000980:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000984:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000988:	fa03 fc0c 	lsl.w	ip, r3, ip
 800098c:	ea40 000c 	orr.w	r0, r0, ip
 8000990:	fa23 f302 	lsr.w	r3, r3, r2
 8000994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000998:	e7cc      	b.n	8000934 <__aeabi_d2f+0x14>
 800099a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099e:	d107      	bne.n	80009b0 <__aeabi_d2f+0x90>
 80009a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a4:	bf1e      	ittt	ne
 80009a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ae:	4770      	bxne	lr
 80009b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_frsub>:
 80009c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c4:	e002      	b.n	80009cc <__addsf3>
 80009c6:	bf00      	nop

080009c8 <__aeabi_fsub>:
 80009c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009cc <__addsf3>:
 80009cc:	0042      	lsls	r2, r0, #1
 80009ce:	bf1f      	itttt	ne
 80009d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d4:	ea92 0f03 	teqne	r2, r3
 80009d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e0:	d06a      	beq.n	8000ab8 <__addsf3+0xec>
 80009e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ea:	bfc1      	itttt	gt
 80009ec:	18d2      	addgt	r2, r2, r3
 80009ee:	4041      	eorgt	r1, r0
 80009f0:	4048      	eorgt	r0, r1
 80009f2:	4041      	eorgt	r1, r0
 80009f4:	bfb8      	it	lt
 80009f6:	425b      	neglt	r3, r3
 80009f8:	2b19      	cmp	r3, #25
 80009fa:	bf88      	it	hi
 80009fc:	4770      	bxhi	lr
 80009fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a0a:	bf18      	it	ne
 8000a0c:	4240      	negne	r0, r0
 8000a0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a1a:	bf18      	it	ne
 8000a1c:	4249      	negne	r1, r1
 8000a1e:	ea92 0f03 	teq	r2, r3
 8000a22:	d03f      	beq.n	8000aa4 <__addsf3+0xd8>
 8000a24:	f1a2 0201 	sub.w	r2, r2, #1
 8000a28:	fa41 fc03 	asr.w	ip, r1, r3
 8000a2c:	eb10 000c 	adds.w	r0, r0, ip
 8000a30:	f1c3 0320 	rsb	r3, r3, #32
 8000a34:	fa01 f103 	lsl.w	r1, r1, r3
 8000a38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a3c:	d502      	bpl.n	8000a44 <__addsf3+0x78>
 8000a3e:	4249      	negs	r1, r1
 8000a40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a48:	d313      	bcc.n	8000a72 <__addsf3+0xa6>
 8000a4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4e:	d306      	bcc.n	8000a5e <__addsf3+0x92>
 8000a50:	0840      	lsrs	r0, r0, #1
 8000a52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a56:	f102 0201 	add.w	r2, r2, #1
 8000a5a:	2afe      	cmp	r2, #254	; 0xfe
 8000a5c:	d251      	bcs.n	8000b02 <__addsf3+0x136>
 8000a5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a66:	bf08      	it	eq
 8000a68:	f020 0001 	biceq.w	r0, r0, #1
 8000a6c:	ea40 0003 	orr.w	r0, r0, r3
 8000a70:	4770      	bx	lr
 8000a72:	0049      	lsls	r1, r1, #1
 8000a74:	eb40 0000 	adc.w	r0, r0, r0
 8000a78:	3a01      	subs	r2, #1
 8000a7a:	bf28      	it	cs
 8000a7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a80:	d2ed      	bcs.n	8000a5e <__addsf3+0x92>
 8000a82:	fab0 fc80 	clz	ip, r0
 8000a86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a92:	bfaa      	itet	ge
 8000a94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a98:	4252      	neglt	r2, r2
 8000a9a:	4318      	orrge	r0, r3
 8000a9c:	bfbc      	itt	lt
 8000a9e:	40d0      	lsrlt	r0, r2
 8000aa0:	4318      	orrlt	r0, r3
 8000aa2:	4770      	bx	lr
 8000aa4:	f092 0f00 	teq	r2, #0
 8000aa8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aac:	bf06      	itte	eq
 8000aae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ab2:	3201      	addeq	r2, #1
 8000ab4:	3b01      	subne	r3, #1
 8000ab6:	e7b5      	b.n	8000a24 <__addsf3+0x58>
 8000ab8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000abc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac6:	d021      	beq.n	8000b0c <__addsf3+0x140>
 8000ac8:	ea92 0f03 	teq	r2, r3
 8000acc:	d004      	beq.n	8000ad8 <__addsf3+0x10c>
 8000ace:	f092 0f00 	teq	r2, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	4608      	moveq	r0, r1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea90 0f01 	teq	r0, r1
 8000adc:	bf1c      	itt	ne
 8000ade:	2000      	movne	r0, #0
 8000ae0:	4770      	bxne	lr
 8000ae2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ae6:	d104      	bne.n	8000af2 <__addsf3+0x126>
 8000ae8:	0040      	lsls	r0, r0, #1
 8000aea:	bf28      	it	cs
 8000aec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	4770      	bx	lr
 8000af2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000af6:	bf3c      	itt	cc
 8000af8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bxcc	lr
 8000afe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0a:	4770      	bx	lr
 8000b0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b10:	bf16      	itet	ne
 8000b12:	4608      	movne	r0, r1
 8000b14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b18:	4601      	movne	r1, r0
 8000b1a:	0242      	lsls	r2, r0, #9
 8000b1c:	bf06      	itte	eq
 8000b1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b22:	ea90 0f01 	teqeq	r0, r1
 8000b26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_ui2f>:
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	e004      	b.n	8000b3c <__aeabi_i2f+0x8>
 8000b32:	bf00      	nop

08000b34 <__aeabi_i2f>:
 8000b34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	bf48      	it	mi
 8000b3a:	4240      	negmi	r0, r0
 8000b3c:	ea5f 0c00 	movs.w	ip, r0
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b48:	4601      	mov	r1, r0
 8000b4a:	f04f 0000 	mov.w	r0, #0
 8000b4e:	e01c      	b.n	8000b8a <__aeabi_l2f+0x2a>

08000b50 <__aeabi_ul2f>:
 8000b50:	ea50 0201 	orrs.w	r2, r0, r1
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e00a      	b.n	8000b74 <__aeabi_l2f+0x14>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_l2f>:
 8000b60:	ea50 0201 	orrs.w	r2, r0, r1
 8000b64:	bf08      	it	eq
 8000b66:	4770      	bxeq	lr
 8000b68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b6c:	d502      	bpl.n	8000b74 <__aeabi_l2f+0x14>
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	ea5f 0c01 	movs.w	ip, r1
 8000b78:	bf02      	ittt	eq
 8000b7a:	4684      	moveq	ip, r0
 8000b7c:	4601      	moveq	r1, r0
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b84:	bf08      	it	eq
 8000b86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b8e:	fabc f28c 	clz	r2, ip
 8000b92:	3a08      	subs	r2, #8
 8000b94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b98:	db10      	blt.n	8000bbc <__aeabi_l2f+0x5c>
 8000b9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba4:	f1c2 0220 	rsb	r2, r2, #32
 8000ba8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bac:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb0:	eb43 0002 	adc.w	r0, r3, r2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f102 0220 	add.w	r2, r2, #32
 8000bc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc4:	f1c2 0220 	rsb	r2, r2, #32
 8000bc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bcc:	fa21 f202 	lsr.w	r2, r1, r2
 8000bd0:	eb43 0002 	adc.w	r0, r3, r2
 8000bd4:	bf08      	it	eq
 8000bd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_fmul>:
 8000bdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000be0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000be4:	bf1e      	ittt	ne
 8000be6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bea:	ea92 0f0c 	teqne	r2, ip
 8000bee:	ea93 0f0c 	teqne	r3, ip
 8000bf2:	d06f      	beq.n	8000cd4 <__aeabi_fmul+0xf8>
 8000bf4:	441a      	add	r2, r3
 8000bf6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bfa:	0240      	lsls	r0, r0, #9
 8000bfc:	bf18      	it	ne
 8000bfe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c02:	d01e      	beq.n	8000c42 <__aeabi_fmul+0x66>
 8000c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c10:	fba0 3101 	umull	r3, r1, r0, r1
 8000c14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c1c:	bf3e      	ittt	cc
 8000c1e:	0049      	lslcc	r1, r1, #1
 8000c20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c24:	005b      	lslcc	r3, r3, #1
 8000c26:	ea40 0001 	orr.w	r0, r0, r1
 8000c2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c2e:	2afd      	cmp	r2, #253	; 0xfd
 8000c30:	d81d      	bhi.n	8000c6e <__aeabi_fmul+0x92>
 8000c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3a:	bf08      	it	eq
 8000c3c:	f020 0001 	biceq.w	r0, r0, #1
 8000c40:	4770      	bx	lr
 8000c42:	f090 0f00 	teq	r0, #0
 8000c46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c4a:	bf08      	it	eq
 8000c4c:	0249      	lsleq	r1, r1, #9
 8000c4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c56:	3a7f      	subs	r2, #127	; 0x7f
 8000c58:	bfc2      	ittt	gt
 8000c5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c62:	4770      	bxgt	lr
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	dc5d      	bgt.n	8000d2c <__aeabi_fmul+0x150>
 8000c70:	f112 0f19 	cmn.w	r2, #25
 8000c74:	bfdc      	itt	le
 8000c76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c7a:	4770      	bxle	lr
 8000c7c:	f1c2 0200 	rsb	r2, r2, #0
 8000c80:	0041      	lsls	r1, r0, #1
 8000c82:	fa21 f102 	lsr.w	r1, r1, r2
 8000c86:	f1c2 0220 	rsb	r2, r2, #32
 8000c8a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c92:	f140 0000 	adc.w	r0, r0, #0
 8000c96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c9a:	bf08      	it	eq
 8000c9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca0:	4770      	bx	lr
 8000ca2:	f092 0f00 	teq	r2, #0
 8000ca6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000caa:	bf02      	ittt	eq
 8000cac:	0040      	lsleq	r0, r0, #1
 8000cae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cb2:	3a01      	subeq	r2, #1
 8000cb4:	d0f9      	beq.n	8000caa <__aeabi_fmul+0xce>
 8000cb6:	ea40 000c 	orr.w	r0, r0, ip
 8000cba:	f093 0f00 	teq	r3, #0
 8000cbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0049      	lsleq	r1, r1, #1
 8000cc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cca:	3b01      	subeq	r3, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fmul+0xe6>
 8000cce:	ea41 010c 	orr.w	r1, r1, ip
 8000cd2:	e78f      	b.n	8000bf4 <__aeabi_fmul+0x18>
 8000cd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	bf18      	it	ne
 8000cde:	ea93 0f0c 	teqne	r3, ip
 8000ce2:	d00a      	beq.n	8000cfa <__aeabi_fmul+0x11e>
 8000ce4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ce8:	bf18      	it	ne
 8000cea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	d1d8      	bne.n	8000ca2 <__aeabi_fmul+0xc6>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	4770      	bx	lr
 8000cfa:	f090 0f00 	teq	r0, #0
 8000cfe:	bf17      	itett	ne
 8000d00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d04:	4608      	moveq	r0, r1
 8000d06:	f091 0f00 	teqne	r1, #0
 8000d0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d0e:	d014      	beq.n	8000d3a <__aeabi_fmul+0x15e>
 8000d10:	ea92 0f0c 	teq	r2, ip
 8000d14:	d101      	bne.n	8000d1a <__aeabi_fmul+0x13e>
 8000d16:	0242      	lsls	r2, r0, #9
 8000d18:	d10f      	bne.n	8000d3a <__aeabi_fmul+0x15e>
 8000d1a:	ea93 0f0c 	teq	r3, ip
 8000d1e:	d103      	bne.n	8000d28 <__aeabi_fmul+0x14c>
 8000d20:	024b      	lsls	r3, r1, #9
 8000d22:	bf18      	it	ne
 8000d24:	4608      	movne	r0, r1
 8000d26:	d108      	bne.n	8000d3a <__aeabi_fmul+0x15e>
 8000d28:	ea80 0001 	eor.w	r0, r0, r1
 8000d2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bx	lr
 8000d3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fdiv>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d069      	beq.n	8000e30 <__aeabi_fdiv+0xec>
 8000d5c:	eba2 0203 	sub.w	r2, r2, r3
 8000d60:	ea80 0c01 	eor.w	ip, r0, r1
 8000d64:	0249      	lsls	r1, r1, #9
 8000d66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d6a:	d037      	beq.n	8000ddc <__aeabi_fdiv+0x98>
 8000d6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	bf38      	it	cc
 8000d80:	005b      	lslcc	r3, r3, #1
 8000d82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	bf24      	itt	cs
 8000d8e:	1a5b      	subcs	r3, r3, r1
 8000d90:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d98:	bf24      	itt	cs
 8000d9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000da2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000da6:	bf24      	itt	cs
 8000da8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000db0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	bf18      	it	ne
 8000dc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dc6:	d1e0      	bne.n	8000d8a <__aeabi_fdiv+0x46>
 8000dc8:	2afd      	cmp	r2, #253	; 0xfd
 8000dca:	f63f af50 	bhi.w	8000c6e <__aeabi_fmul+0x92>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de4:	327f      	adds	r2, #127	; 0x7f
 8000de6:	bfc2      	ittt	gt
 8000de8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df0:	4770      	bxgt	lr
 8000df2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	3a01      	subs	r2, #1
 8000dfc:	e737      	b.n	8000c6e <__aeabi_fmul+0x92>
 8000dfe:	f092 0f00 	teq	r2, #0
 8000e02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e06:	bf02      	ittt	eq
 8000e08:	0040      	lsleq	r0, r0, #1
 8000e0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0e:	3a01      	subeq	r2, #1
 8000e10:	d0f9      	beq.n	8000e06 <__aeabi_fdiv+0xc2>
 8000e12:	ea40 000c 	orr.w	r0, r0, ip
 8000e16:	f093 0f00 	teq	r3, #0
 8000e1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0049      	lsleq	r1, r1, #1
 8000e22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e26:	3b01      	subeq	r3, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fdiv+0xda>
 8000e2a:	ea41 010c 	orr.w	r1, r1, ip
 8000e2e:	e795      	b.n	8000d5c <__aeabi_fdiv+0x18>
 8000e30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e34:	ea92 0f0c 	teq	r2, ip
 8000e38:	d108      	bne.n	8000e4c <__aeabi_fdiv+0x108>
 8000e3a:	0242      	lsls	r2, r0, #9
 8000e3c:	f47f af7d 	bne.w	8000d3a <__aeabi_fmul+0x15e>
 8000e40:	ea93 0f0c 	teq	r3, ip
 8000e44:	f47f af70 	bne.w	8000d28 <__aeabi_fmul+0x14c>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e776      	b.n	8000d3a <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	d104      	bne.n	8000e5c <__aeabi_fdiv+0x118>
 8000e52:	024b      	lsls	r3, r1, #9
 8000e54:	f43f af4c 	beq.w	8000cf0 <__aeabi_fmul+0x114>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e76e      	b.n	8000d3a <__aeabi_fmul+0x15e>
 8000e5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e60:	bf18      	it	ne
 8000e62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	d1ca      	bne.n	8000dfe <__aeabi_fdiv+0xba>
 8000e68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e6c:	f47f af5c 	bne.w	8000d28 <__aeabi_fmul+0x14c>
 8000e70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	f47f af3c 	bne.w	8000cf0 <__aeabi_fmul+0x114>
 8000e78:	e75f      	b.n	8000d3a <__aeabi_fmul+0x15e>
 8000e7a:	bf00      	nop

08000e7c <__gesf2>:
 8000e7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e80:	e006      	b.n	8000e90 <__cmpsf2+0x4>
 8000e82:	bf00      	nop

08000e84 <__lesf2>:
 8000e84:	f04f 0c01 	mov.w	ip, #1
 8000e88:	e002      	b.n	8000e90 <__cmpsf2+0x4>
 8000e8a:	bf00      	nop

08000e8c <__cmpsf2>:
 8000e8c:	f04f 0c01 	mov.w	ip, #1
 8000e90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	bf18      	it	ne
 8000ea2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ea6:	d011      	beq.n	8000ecc <__cmpsf2+0x40>
 8000ea8:	b001      	add	sp, #4
 8000eaa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eae:	bf18      	it	ne
 8000eb0:	ea90 0f01 	teqne	r0, r1
 8000eb4:	bf58      	it	pl
 8000eb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eba:	bf88      	it	hi
 8000ebc:	17c8      	asrhi	r0, r1, #31
 8000ebe:	bf38      	it	cc
 8000ec0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ec4:	bf18      	it	ne
 8000ec6:	f040 0001 	orrne.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	d102      	bne.n	8000ed8 <__cmpsf2+0x4c>
 8000ed2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ed6:	d105      	bne.n	8000ee4 <__cmpsf2+0x58>
 8000ed8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000edc:	d1e4      	bne.n	8000ea8 <__cmpsf2+0x1c>
 8000ede:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ee2:	d0e1      	beq.n	8000ea8 <__cmpsf2+0x1c>
 8000ee4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_cfrcmple>:
 8000eec:	4684      	mov	ip, r0
 8000eee:	4608      	mov	r0, r1
 8000ef0:	4661      	mov	r1, ip
 8000ef2:	e7ff      	b.n	8000ef4 <__aeabi_cfcmpeq>

08000ef4 <__aeabi_cfcmpeq>:
 8000ef4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ef6:	f7ff ffc9 	bl	8000e8c <__cmpsf2>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	bf48      	it	mi
 8000efe:	f110 0f00 	cmnmi.w	r0, #0
 8000f02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f04 <__aeabi_fcmpeq>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff fff4 	bl	8000ef4 <__aeabi_cfcmpeq>
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2001      	moveq	r0, #1
 8000f10:	2000      	movne	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmplt>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffea 	bl	8000ef4 <__aeabi_cfcmpeq>
 8000f20:	bf34      	ite	cc
 8000f22:	2001      	movcc	r0, #1
 8000f24:	2000      	movcs	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmple>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffe0 	bl	8000ef4 <__aeabi_cfcmpeq>
 8000f34:	bf94      	ite	ls
 8000f36:	2001      	movls	r0, #1
 8000f38:	2000      	movhi	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmpge>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffd2 	bl	8000eec <__aeabi_cfrcmple>
 8000f48:	bf94      	ite	ls
 8000f4a:	2001      	movls	r0, #1
 8000f4c:	2000      	movhi	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmpgt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffc8 	bl	8000eec <__aeabi_cfrcmple>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_f2iz>:
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f70:	d30f      	bcc.n	8000f92 <__aeabi_f2iz+0x2a>
 8000f72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f7a:	d90d      	bls.n	8000f98 <__aeabi_f2iz+0x30>
 8000f7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f88:	fa23 f002 	lsr.w	r0, r3, r2
 8000f8c:	bf18      	it	ne
 8000f8e:	4240      	negne	r0, r0
 8000f90:	4770      	bx	lr
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	4770      	bx	lr
 8000f98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_f2iz+0x3a>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d105      	bne.n	8000fae <__aeabi_f2iz+0x46>
 8000fa2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fa6:	bf08      	it	eq
 8000fa8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2uiz>:
 8000fb4:	0042      	lsls	r2, r0, #1
 8000fb6:	d20e      	bcs.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fbc:	d30b      	bcc.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc6:	d409      	bmi.n	8000fdc <__aeabi_f2uiz+0x28>
 8000fc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_f2uiz+0x32>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	d102      	bne.n	8000fec <__aeabi_f2uiz+0x38>
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fea:	4770      	bx	lr
 8000fec:	f04f 0000 	mov.w	r0, #0
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Reset_Handler>:
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <Zerobss+0x10>)
 8000ff6:	4685      	mov	sp, r0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	e003      	b.n	8001004 <DataInit>

08000ffc <CopyData>:
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Zerobss+0x14>)
 8000ffe:	585b      	ldr	r3, [r3, r1]
 8001000:	5043      	str	r3, [r0, r1]
 8001002:	3104      	adds	r1, #4

08001004 <DataInit>:
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <Zerobss+0x18>)
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <Zerobss+0x1c>)
 8001008:	1842      	adds	r2, r0, r1
 800100a:	429a      	cmp	r2, r3
 800100c:	d3f6      	bcc.n	8000ffc <CopyData>
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <Zerobss+0x20>)
 8001010:	e002      	b.n	8001018 <Zerobss>

08001012 <FillZerobss>:
 8001012:	2300      	movs	r3, #0
 8001014:	f842 3b04 	str.w	r3, [r2], #4

08001018 <Zerobss>:
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <Zerobss+0x24>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d3f9      	bcc.n	8001012 <FillZerobss>
 800101e:	f007 fc63 	bl	80088e8 <SystemInit>
 8001022:	f000 f917 	bl	8001254 <main>
 8001026:	4770      	bx	lr
 8001028:	2000c000 	andcs	ip, r0, r0
 800102c:	0800b5d0 	stmdaeq	r0, {r4, r6, r7, r8, sl, ip, sp, pc}
 8001030:	20000000 	andcs	r0, r0, r0
 8001034:	200000e4 	andcs	r0, r0, r4, ror #1
 8001038:	200000e8 	andcs	r0, r0, r8, ror #1
 800103c:	2000781c 	andcs	r7, r0, ip, lsl r8

08001040 <ADC0_1_IRQHandler>:
 8001040:	e7fe      	b.n	8001040 <ADC0_1_IRQHandler>

08001042 <FactoryDefaults::~FactoryDefaults()>:
 8001042:	4770      	bx	lr

08001044 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8001044:	4770      	bx	lr
	...

08001048 <PixelDmxStartStop::Start()>:
 8001048:	2204      	movs	r2, #4
 800104a:	4b01      	ldr	r3, [pc, #4]	; (8001050 <PixelDmxStartStop::Start()+0x8>)
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	4770      	bx	lr
 8001050:	40011000 	andmi	r1, r1, r0

08001054 <PixelDmxStartStop::Stop()>:
 8001054:	2204      	movs	r2, #4
 8001056:	4b01      	ldr	r3, [pc, #4]	; (800105c <PixelDmxStartStop::Stop()+0x8>)
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	4770      	bx	lr
 800105c:	40011000 	andmi	r1, r1, r0

08001060 <Reboot::~Reboot()>:
 8001060:	4770      	bx	lr

08001062 <Reboot::~Reboot()>:
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
 8001066:	f007 fa06 	bl	8008476 <operator delete(void*)>
 800106a:	4620      	mov	r0, r4
 800106c:	bd10      	pop	{r4, pc}

0800106e <FactoryDefaults::~FactoryDefaults()>:
 800106e:	b510      	push	{r4, lr}
 8001070:	4604      	mov	r4, r0
 8001072:	f007 fa00 	bl	8008476 <operator delete(void*)>
 8001076:	4620      	mov	r0, r4
 8001078:	bd10      	pop	{r4, pc}

0800107a <PixelDmxStartStop::~PixelDmxStartStop()>:
 800107a:	b510      	push	{r4, lr}
 800107c:	4604      	mov	r4, r0
 800107e:	f007 f9fa 	bl	8008476 <operator delete(void*)>
 8001082:	4620      	mov	r0, r4
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <RDMResponder::PersonalityUpdate(LightSet*)>:
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	4e0a      	ldr	r6, [pc, #40]	; (80010b4 <RDMResponder::PersonalityUpdate(LightSet*)+0x2c>)
 800108c:	4604      	mov	r4, r0
 800108e:	6830      	ldr	r0, [r6, #0]
 8001090:	460d      	mov	r5, r1
 8001092:	4281      	cmp	r1, r0
 8001094:	d007      	beq.n	80010a6 <RDMResponder::PersonalityUpdate(LightSet*)+0x1e>
 8001096:	6803      	ldr	r3, [r0, #0]
 8001098:	2100      	movs	r1, #0
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4798      	blx	r3
 800109e:	2200      	movs	r2, #0
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <RDMResponder::PersonalityUpdate(LightSet*)+0x30>)
 80010a2:	6035      	str	r5, [r6, #0]
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	4620      	mov	r0, r4
 80010a8:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 80010ac:	f000 fbf8 	bl	80018a0 <RDMResponder::PersonalityUpdate(unsigned int)>
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
 80010b2:	bf00      	nop
 80010b4:	20000204 	andcs	r0, r0, r4, lsl #4
 80010b8:	20000200 	andcs	r0, r0, r0, lsl #4

080010bc <FactoryDefaults::Set()>:
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <FactoryDefaults::Set()+0xc>)
 80010be:	210b      	movs	r1, #11
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f005 bf65 	b.w	8006f90 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 80010c6:	bf00      	nop
 80010c8:	200016ac 	andcs	r1, r0, ip, lsr #13

080010cc <Reboot::Run()>:
 80010cc:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <Reboot::Run()+0x8>)
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	f005 be46 	b.w	8006d60 <WS28xx::Blackout()>
 80010d4:	20000694 	mulcs	r0, r4, r6

080010d8 <RDMResponder::DmxStartAddressUpdate()>:
 80010d8:	b508      	push	{r3, lr}
 80010da:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 80010de:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
 80010e2:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80010e6:	b289      	uxth	r1, r1
 80010e8:	f000 fbce 	bl	8001888 <RDMResponder::DmxStartAddressUpdate(unsigned short)>
 80010ec:	bd08      	pop	{r3, pc}

080010ee <Display::ClearLine(unsigned char) [clone .isra.0]>:
 80010ee:	b110      	cbz	r0, 80010f6 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4718      	bx	r3
 80010f6:	4770      	bx	lr

080010f8 <RDMResponder::~RDMResponder()>:
 80010f8:	b510      	push	{r4, lr}
 80010fa:	4604      	mov	r4, r0
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <RDMResponder::~RDMResponder()+0x3c>)
 80010fe:	f840 3b88 	str.w	r3, [r0], #136
 8001102:	f002 f867 	bl	80031d4 <RDMSubDevices::~RDMSubDevices()>
 8001106:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800110a:	f001 fa37 	bl	800257c <RDMSensors::~RDMSensors()>
 800110e:	2300      	movs	r3, #0
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8001118:	f002 fc92 	bl	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <RDMResponder::~RDMResponder()+0x40>)
 800111e:	2100      	movs	r1, #0
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	6803      	ldr	r3, [r0, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	4798      	blx	r3
 8001128:	2200      	movs	r2, #0
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <RDMResponder::~RDMResponder()+0x44>)
 800112c:	4620      	mov	r0, r4
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	bd10      	pop	{r4, pc}
 8001132:	bf00      	nop
 8001134:	0800a2f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp, pc}
 8001138:	20000204 	andcs	r0, r0, r4, lsl #4
 800113c:	20000200 	andcs	r0, r0, r0, lsl #4

08001140 <RDMResponder::~RDMResponder()>:
 8001140:	b510      	push	{r4, lr}
 8001142:	4604      	mov	r4, r0
 8001144:	f7ff ffd8 	bl	80010f8 <RDMResponder::~RDMResponder()>
 8001148:	4620      	mov	r0, r4
 800114a:	f007 f994 	bl	8008476 <operator delete(void*)>
 800114e:	4620      	mov	r0, r4
 8001150:	bd10      	pop	{r4, pc}
	...

08001154 <Display::SetSleep(bool)>:
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	6980      	ldr	r0, [r0, #24]
 800115a:	460d      	mov	r5, r1
 800115c:	b138      	cbz	r0, 800116e <Display::SetSleep(bool)+0x1a>
 800115e:	6803      	ldr	r3, [r0, #0]
 8001160:	7421      	strb	r1, [r4, #16]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	4798      	blx	r3
 8001166:	b915      	cbnz	r5, 800116e <Display::SetSleep(bool)+0x1a>
 8001168:	4b01      	ldr	r3, [pc, #4]	; (8001170 <Display::SetSleep(bool)+0x1c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6063      	str	r3, [r4, #4]
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	20001814 	andcs	r1, r0, r4, lsl r8

08001174 <Display::Printf(unsigned char, char const*, ...)>:
 8001174:	b40c      	push	{r2, r3}
 8001176:	b570      	push	{r4, r5, r6, lr}
 8001178:	6984      	ldr	r4, [r0, #24]
 800117a:	4605      	mov	r5, r0
 800117c:	460e      	mov	r6, r1
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	b174      	cbz	r4, 80011a0 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8001182:	ab0f      	add	r3, sp, #60	; 0x3c
 8001184:	2120      	movs	r1, #32
 8001186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001188:	a802      	add	r0, sp, #8
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f000 ff88 	bl	80020a0 <vsnprintf>
 8001190:	4604      	mov	r4, r0
 8001192:	69a8      	ldr	r0, [r5, #24]
 8001194:	4631      	mov	r1, r6
 8001196:	6803      	ldr	r3, [r0, #0]
 8001198:	aa02      	add	r2, sp, #8
 800119a:	69dd      	ldr	r5, [r3, #28]
 800119c:	b2a3      	uxth	r3, r4
 800119e:	47a8      	blx	r5
 80011a0:	4620      	mov	r0, r4
 80011a2:	b00a      	add	sp, #40	; 0x28
 80011a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80011a8:	b002      	add	sp, #8
 80011aa:	4770      	bx	lr

080011ac <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
 80011ac:	2300      	movs	r3, #0
 80011ae:	b570      	push	{r4, r5, r6, lr}
 80011b0:	4604      	mov	r4, r0
 80011b2:	460e      	mov	r6, r1
 80011b4:	4615      	mov	r5, r2
 80011b6:	6043      	str	r3, [r0, #4]
 80011b8:	6283      	str	r3, [r0, #40]	; 0x28
 80011ba:	b972      	cbnz	r2, 80011da <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2e>
 80011bc:	8002      	strh	r2, [r0, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	f104 0208 	add.w	r2, r4, #8
 80011c4:	1e71      	subs	r1, r6, #1
 80011c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80011ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80011cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80011d0:	b10b      	cbz	r3, 80011d6 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x2a>
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d108      	bne.n	80011e8 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x3c>
 80011d6:	4620      	mov	r0, r4
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	4610      	mov	r0, r2
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	4798      	blx	r3
 80011e2:	6065      	str	r5, [r4, #4]
 80011e4:	8020      	strh	r0, [r4, #0]
 80011e6:	e7ea      	b.n	80011be <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x12>
 80011e8:	f802 3b01 	strb.w	r3, [r2], #1
 80011ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011ee:	3301      	adds	r3, #1
 80011f0:	e7eb      	b.n	80011ca <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x1e>
	...

080011f4 <display::timeout::gpio_init()>:
 80011f4:	b510      	push	{r4, lr}
 80011f6:	f240 6003 	movw	r0, #1539	; 0x603
 80011fa:	f007 fdaf 	bl	8008d5c <rcu_periph_clock_enable>
 80011fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001206:	2203      	movs	r2, #3
 8001208:	2148      	movs	r1, #72	; 0x48
 800120a:	4801      	ldr	r0, [pc, #4]	; (8001210 <display::timeout::gpio_init()+0x1c>)
 800120c:	f007 bd14 	b.w	8008c38 <gpio_init>
 8001210:	40010c00 	andmi	r0, r1, r0, lsl #24

08001214 <display::timeout::gpio_renew()>:
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <display::timeout::gpio_renew()+0x10>)
 8001216:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800121a:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 800121e:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8001222:	4770      	bx	lr
 8001224:	40010000 	andmi	r0, r1, r0

08001228 <is_config_mode()>:
 8001228:	b510      	push	{r4, lr}
 800122a:	4c09      	ldr	r4, [pc, #36]	; (8001250 <is_config_mode()+0x28>)
 800122c:	f240 6002 	movw	r0, #1538	; 0x602
 8001230:	f007 fd94 	bl	8008d5c <rcu_periph_clock_enable>
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	2203      	movs	r2, #3
 8001238:	4620      	mov	r0, r4
 800123a:	2148      	movs	r1, #72	; 0x48
 800123c:	f007 fcfc 	bl	8008c38 <gpio_init>
 8001240:	2140      	movs	r1, #64	; 0x40
 8001242:	4620      	mov	r0, r4
 8001244:	f007 fd4c 	bl	8008ce0 <gpio_input_bit_get>
 8001248:	fab0 f080 	clz	r0, r0
 800124c:	0940      	lsrs	r0, r0, #5
 800124e:	bd10      	pop	{r4, pc}
 8001250:	40010800 	andmi	r0, r1, r0, lsl #16

08001254 <main>:
 8001254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001258:	f5ad 7d61 	sub.w	sp, sp, #900	; 0x384
 800125c:	a820      	add	r0, sp, #128	; 0x80
 800125e:	f006 fef1 	bl	8008044 <Hardware::Hardware()>
 8001262:	a818      	add	r0, sp, #96	; 0x60
 8001264:	f006 faba 	bl	80077dc <Network::Network()>
 8001268:	a825      	add	r0, sp, #148	; 0x94
 800126a:	f006 fe95 	bl	8007f98 <LedBlink::LedBlink()>
 800126e:	a87b      	add	r0, sp, #492	; 0x1ec
 8001270:	f006 fada 	bl	8007828 <DisplayUdf::DisplayUdf()>
 8001274:	4bb0      	ldr	r3, [pc, #704]	; (8001538 <main+0x2e4>)
 8001276:	4ab1      	ldr	r2, [pc, #708]	; (800153c <main+0x2e8>)
 8001278:	49b1      	ldr	r1, [pc, #708]	; (8001540 <main+0x2ec>)
 800127a:	a805      	add	r0, sp, #20
 800127c:	f006 fe46 	bl	8007f0c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8001280:	a806      	add	r0, sp, #24
 8001282:	f006 f933 	bl	80074ec <FlashRom::FlashRom()>
 8001286:	a807      	add	r0, sp, #28
 8001288:	f005 fe5c 	bl	8006f44 <SpiFlashStore::SpiFlashStore()>
 800128c:	2101      	movs	r1, #1
 800128e:	a825      	add	r0, sp, #148	; 0x94
 8001290:	f006 fea4 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 8001294:	f7ff ffc8 	bl	8001228 <is_config_mode()>
 8001298:	4daa      	ldr	r5, [pc, #680]	; (8001544 <main+0x2f0>)
 800129a:	2100      	movs	r1, #0
 800129c:	4606      	mov	r6, r0
 800129e:	ac2b      	add	r4, sp, #172	; 0xac
 80012a0:	a805      	add	r0, sp, #20
 80012a2:	f006 fe6b 	bl	8007f7c <FirmwareVersion::Print(char const*)>
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012b2:	a812      	add	r0, sp, #72	; 0x48
 80012b4:	f006 f90e 	bl	80074d4 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80012b8:	a912      	add	r1, sp, #72	; 0x48
 80012ba:	a845      	add	r0, sp, #276	; 0x114
 80012bc:	f004 fae2 	bl	8005884 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80012c0:	a845      	add	r0, sp, #276	; 0x114
 80012c2:	f004 fb07 	bl	80058d4 <WS28xxDmxParams::Load()>
 80012c6:	b130      	cbz	r0, 80012d6 <main+0x82>
 80012c8:	a845      	add	r0, sp, #276	; 0x114
 80012ca:	a92b      	add	r1, sp, #172	; 0xac
 80012cc:	f004 fb0e 	bl	80058ec <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80012d0:	a845      	add	r0, sp, #276	; 0x114
 80012d2:	f004 fb41 	bl	8005958 <WS28xxDmxParams::Dump()>
 80012d6:	ab0a      	add	r3, sp, #40	; 0x28
 80012d8:	ac0b      	add	r4, sp, #44	; 0x2c
 80012da:	2101      	movs	r1, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	aa09      	add	r2, sp, #36	; 0x24
 80012e0:	ab1c      	add	r3, sp, #112	; 0x70
 80012e2:	a82b      	add	r0, sp, #172	; 0xac
 80012e4:	9401      	str	r4, [sp, #4]
 80012e6:	f004 f8c9 	bl	800547c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 80012ea:	a82b      	add	r0, sp, #172	; 0xac
 80012ec:	f004 f91b 	bl	8005526 <PixelDmxConfiguration::Dump()>
 80012f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d909      	bls.n	800130a <main+0xb6>
 80012f6:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80012f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012fa:	024b      	lsls	r3, r1, #9
 80012fc:	ebb2 2f41 	cmp.w	r2, r1, lsl #9
 8001300:	bf94      	ite	ls
 8001302:	fbb3 f3f2 	udivls	r3, r3, r2
 8001306:	23aa      	movhi	r3, #170	; 0xaa
 8001308:	932c      	str	r3, [sp, #176]	; 0xb0
 800130a:	a92b      	add	r1, sp, #172	; 0xac
 800130c:	a86a      	add	r0, sp, #424	; 0x1a8
 800130e:	f004 fa79 	bl	8005804 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 8001312:	4f8d      	ldr	r7, [pc, #564]	; (8001548 <main+0x2f4>)
 8001314:	4b8d      	ldr	r3, [pc, #564]	; (800154c <main+0x2f8>)
 8001316:	2203      	movs	r2, #3
 8001318:	2110      	movs	r1, #16
 800131a:	4638      	mov	r0, r7
 800131c:	930c      	str	r3, [sp, #48]	; 0x30
 800131e:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 8001322:	2304      	movs	r3, #4
 8001324:	f8cd 81e0 	str.w	r8, [sp, #480]	; 0x1e0
 8001328:	f007 fc86 	bl	8008c38 <gpio_init>
 800132c:	2304      	movs	r3, #4
 800132e:	ac0c      	add	r4, sp, #48	; 0x30
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	2101      	movs	r1, #1
 8001334:	9479      	str	r4, [sp, #484]	; 0x1e4
 8001336:	a808      	add	r0, sp, #32
 8001338:	f89d 413e 	ldrb.w	r4, [sp, #318]	; 0x13e
 800133c:	f004 fbca 	bl	8005ad4 <PixelPatterns::PixelPatterns(unsigned int)>
 8001340:	4b83      	ldr	r3, [pc, #524]	; (8001550 <main+0x2fc>)
 8001342:	2c05      	cmp	r4, #5
 8001344:	601c      	str	r4, [r3, #0]
 8001346:	f340 81ea 	ble.w	800171e <main+0x4ca>
 800134a:	4641      	mov	r1, r8
 800134c:	a80d      	add	r0, sp, #52	; 0x34
 800134e:	f004 f905 	bl	800555c <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>
 8001352:	a80e      	add	r0, sp, #56	; 0x38
 8001354:	f005 ffae 	bl	80072b4 <StoreRDMSensors::StoreRDMSensors()>
 8001358:	a90e      	add	r1, sp, #56	; 0x38
 800135a:	a85c      	add	r0, sp, #368	; 0x170
 800135c:	f001 fa1a 	bl	8002794 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
 8001360:	a85c      	add	r0, sp, #368	; 0x170
 8001362:	f001 fa19 	bl	8002798 <RDMSensorsParams::Load()>
 8001366:	b128      	cbz	r0, 8001374 <main+0x120>
 8001368:	a85c      	add	r0, sp, #368	; 0x170
 800136a:	f001 fa39 	bl	80027e0 <RDMSensorsParams::Set()>
 800136e:	a85c      	add	r0, sp, #368	; 0x170
 8001370:	f001 fa1e 	bl	80027b0 <RDMSensorsParams::Dump()>
 8001374:	a80f      	add	r0, sp, #60	; 0x3c
 8001376:	f005 ffd1 	bl	800731c <StoreRDMSubDevices::StoreRDMSubDevices()>
 800137a:	a90f      	add	r1, sp, #60	; 0x3c
 800137c:	a88f      	add	r0, sp, #572	; 0x23c
 800137e:	f001 fff7 	bl	8003370 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>
 8001382:	a88f      	add	r0, sp, #572	; 0x23c
 8001384:	f001 fff6 	bl	8003374 <RDMSubDevicesParams::Load()>
 8001388:	b128      	cbz	r0, 8001396 <main+0x142>
 800138a:	a88f      	add	r0, sp, #572	; 0x23c
 800138c:	f001 ffff 	bl	800338e <RDMSubDevicesParams::Set()>
 8001390:	a88f      	add	r0, sp, #572	; 0x23c
 8001392:	f001 fffb 	bl	800338c <RDMSubDevicesParams::Dump()>
 8001396:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001398:	f004 fdfe 	bl	8005f98 <PixelType::GetType(pixel::Type)>
 800139c:	4605      	mov	r5, r0
 800139e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80013a0:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
 80013a4:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 80013a8:	f004 fe02 	bl	8005fb0 <PixelType::GetMap(pixel::Map)>
 80013ac:	462b      	mov	r3, r5
 80013ae:	211f      	movs	r1, #31
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <main+0x300>)
 80013b2:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80013b6:	f8cd 8000 	str.w	r8, [sp]
 80013ba:	a833      	add	r0, sp, #204	; 0xcc
 80013bc:	f000 fe58 	bl	8002070 <snprintf>
 80013c0:	202c      	movs	r0, #44	; 0x2c
 80013c2:	f007 f85c 	bl	800847e <operator new(unsigned int)>
 80013c6:	4605      	mov	r5, r0
 80013c8:	aa6a      	add	r2, sp, #424	; 0x1a8
 80013ca:	a933      	add	r1, sp, #204	; 0xcc
 80013cc:	f7ff feee 	bl	80011ac <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013d0:	202c      	movs	r0, #44	; 0x2c
 80013d2:	9514      	str	r5, [sp, #80]	; 0x50
 80013d4:	f007 f853 	bl	800847e <operator new(unsigned int)>
 80013d8:	4605      	mov	r5, r0
 80013da:	495f      	ldr	r1, [pc, #380]	; (8001558 <main+0x304>)
 80013dc:	aa0d      	add	r2, sp, #52	; 0x34
 80013de:	f7ff fee5 	bl	80011ac <RDMPersonality::RDMPersonality(char const*, LightSet*)>
 80013e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80013e4:	a8d6      	add	r0, sp, #856	; 0x358
 80013e6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80013ea:	9515      	str	r5, [sp, #84]	; 0x54
 80013ec:	f002 fb56 	bl	8003a9c <Dmx::Dmx()>
 80013f0:	ada3      	add	r5, sp, #652	; 0x28c
 80013f2:	4b5a      	ldr	r3, [pc, #360]	; (800155c <main+0x308>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	a914      	add	r1, sp, #80	; 0x50
 80013f8:	4628      	mov	r0, r5
 80013fa:	f8c3 8000 	str.w	r8, [r3]
 80013fe:	f002 fd8d 	bl	8003f1c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8001402:	2101      	movs	r1, #1
 8001404:	a8dd      	add	r0, sp, #884	; 0x374
 8001406:	f002 ff58 	bl	80042ba <RDMHandler::RDMHandler(bool)>
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <main+0x30c>)
 800140c:	4628      	mov	r0, r5
 800140e:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <main+0x310>)
 8001412:	601d      	str	r5, [r3, #0]
 8001414:	f002 fde0 	bl	8003fd8 <RDMDeviceResponder::Init()>
 8001418:	a816      	add	r0, sp, #88	; 0x58
 800141a:	f005 ff15 	bl	8007248 <StoreRDMDevice::StoreRDMDevice()>
 800141e:	a916      	add	r1, sp, #88	; 0x58
 8001420:	a850      	add	r0, sp, #320	; 0x140
 8001422:	f002 fce3 	bl	8003dec <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8001426:	a850      	add	r0, sp, #320	; 0x140
 8001428:	f002 fcf2 	bl	8003e10 <RDMDeviceParams::Load()>
 800142c:	b130      	cbz	r0, 800143c <main+0x1e8>
 800142e:	a850      	add	r0, sp, #320	; 0x140
 8001430:	a9a4      	add	r1, sp, #656	; 0x290
 8001432:	f002 fcf8 	bl	8003e26 <RDMDeviceParams::Set(RDMDevice*)>
 8001436:	a850      	add	r0, sp, #320	; 0x140
 8001438:	f002 fd2a 	bl	8003e90 <RDMDeviceParams::Dump()>
 800143c:	ab17      	add	r3, sp, #92	; 0x5c
 800143e:	93c1      	str	r3, [sp, #772]	; 0x304
 8001440:	ab10      	add	r3, sp, #64	; 0x40
 8001442:	93d5      	str	r3, [sp, #852]	; 0x354
 8001444:	2301      	movs	r3, #1
 8001446:	4a48      	ldr	r2, [pc, #288]	; (8001568 <main+0x314>)
 8001448:	2100      	movs	r1, #0
 800144a:	9210      	str	r2, [sp, #64]	; 0x40
 800144c:	a8d6      	add	r0, sp, #856	; 0x358
 800144e:	461a      	mov	r2, r3
 8001450:	f002 faf6 	bl	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8001454:	2e00      	cmp	r6, #0
 8001456:	f040 8144 	bne.w	80016e2 <main+0x48e>
 800145a:	1e23      	subs	r3, r4, #0
 800145c:	bf18      	it	ne
 800145e:	2301      	movne	r3, #1
 8001460:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800156c <main+0x318>
 8001464:	4628      	mov	r0, r5
 8001466:	f888 3000 	strb.w	r3, [r8]
 800146a:	f002 fe3f 	bl	80040ec <RDMDeviceResponder::Print()>
 800146e:	f898 1000 	ldrb.w	r1, [r8]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <main+0x31c>)
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <main+0x320>)
 8001476:	4840      	ldr	r0, [pc, #256]	; (8001578 <main+0x324>)
 8001478:	2900      	cmp	r1, #0
 800147a:	bf14      	ite	ne
 800147c:	4611      	movne	r1, r2
 800147e:	4619      	moveq	r1, r3
 8001480:	f000 fde6 	bl	8002050 <printf>
 8001484:	2e00      	cmp	r6, #0
 8001486:	f040 8146 	bne.w	8001716 <main+0x4c2>
 800148a:	a86a      	add	r0, sp, #424	; 0x1a8
 800148c:	f004 fa66 	bl	800595c <WS28xxDmx::Print()>
 8001490:	b13c      	cbz	r4, 80014a2 <main+0x24e>
 8001492:	4620      	mov	r0, r4
 8001494:	f004 fb3e 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001498:	4622      	mov	r2, r4
 800149a:	4601      	mov	r1, r0
 800149c:	4837      	ldr	r0, [pc, #220]	; (800157c <main+0x328>)
 800149e:	f000 fdd7 	bl	8002050 <printf>
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <main+0x32c>)
 80014a4:	a87b      	add	r0, sp, #492	; 0x1ec
 80014a6:	f006 f9d1 	bl	800784c <DisplayUdf::SetTitle(char const*, ...)>
 80014aa:	2203      	movs	r2, #3
 80014ac:	2102      	movs	r1, #2
 80014ae:	a87b      	add	r0, sp, #492	; 0x1ec
 80014b0:	f006 fa34 	bl	800791c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80014b4:	220d      	movs	r2, #13
 80014b6:	2106      	movs	r1, #6
 80014b8:	a87b      	add	r0, sp, #492	; 0x1ec
 80014ba:	f006 fa2f 	bl	800791c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80014be:	982b      	ldr	r0, [sp, #172]	; 0xac
 80014c0:	f004 fd6a 	bl	8005f98 <PixelType::GetType(pixel::Type)>
 80014c4:	4680      	mov	r8, r0
 80014c6:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80014c8:	f8dd 90b0 	ldr.w	r9, [sp, #176]	; 0xb0
 80014cc:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
 80014d0:	f004 fd6e 	bl	8005fb0 <PixelType::GetMap(pixel::Map)>
 80014d4:	4643      	mov	r3, r8
 80014d6:	2107      	movs	r1, #7
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <main+0x330>)
 80014da:	e9cd a001 	strd	sl, r0, [sp, #4]
 80014de:	f8cd 9000 	str.w	r9, [sp]
 80014e2:	a87b      	add	r0, sp, #492	; 0x1ec
 80014e4:	f7ff fe46 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 80014e8:	a811      	add	r0, sp, #68	; 0x44
 80014ea:	f005 fe51 	bl	8007190 <StoreDisplayUdf::StoreDisplayUdf()>
 80014ee:	a911      	add	r1, sp, #68	; 0x44
 80014f0:	a83b      	add	r0, sp, #236	; 0xec
 80014f2:	f006 fa2c 	bl	800794e <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80014f6:	a83b      	add	r0, sp, #236	; 0xec
 80014f8:	f006 fa36 	bl	8007968 <DisplayUdfParams::Load()>
 80014fc:	b130      	cbz	r0, 800150c <main+0x2b8>
 80014fe:	a83b      	add	r0, sp, #236	; 0xec
 8001500:	a97b      	add	r1, sp, #492	; 0x1ec
 8001502:	f006 fa3d 	bl	8007980 <DisplayUdfParams::Set(DisplayUdf*)>
 8001506:	a83b      	add	r0, sp, #236	; 0xec
 8001508:	f006 fa6d 	bl	80079e6 <DisplayUdfParams::Dump()>
 800150c:	a87b      	add	r0, sp, #492	; 0x1ec
 800150e:	f006 f9b1 	bl	8007874 <DisplayUdf::Show()>
 8001512:	2e00      	cmp	r6, #0
 8001514:	f000 80e7 	beq.w	80016e6 <main+0x492>
 8001518:	2103      	movs	r1, #3
 800151a:	9881      	ldr	r0, [sp, #516]	; 0x204
 800151c:	f7ff fde7 	bl	80010ee <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001520:	9881      	ldr	r0, [sp, #516]	; 0x204
 8001522:	2104      	movs	r1, #4
 8001524:	f7ff fde3 	bl	80010ee <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001528:	9881      	ldr	r0, [sp, #516]	; 0x204
 800152a:	2800      	cmp	r0, #0
 800152c:	d03c      	beq.n	80015a8 <main+0x354>
 800152e:	2300      	movs	r3, #0
 8001530:	7904      	ldrb	r4, [r0, #4]
 8001532:	4915      	ldr	r1, [pc, #84]	; (8001588 <main+0x334>)
 8001534:	e02a      	b.n	800158c <main+0x338>
 8001536:	bf00      	nop
 8001538:	08009f56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, sl, fp, ip, pc}
 800153c:	08009f5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, pc}
 8001540:	0800a02c 	stmdaeq	r0, {r2, r3, r5, sp, pc}
 8001544:	08009ef0 	stmdaeq	r0, {r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8001548:	40011000 	andmi	r1, r1, r0
 800154c:	0800a008 	stmdaeq	r0, {r3, sp, pc}
 8001550:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001554:	08009f6b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, pc}
 8001558:	08009f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
 800155c:	20000204 	andcs	r0, r0, r4, lsl #4
 8001560:	08009fdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, pc}
 8001564:	200001f4 	strdcs	r0, [r0], -r4
 8001568:	08009ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800156c:	20000208 	andcs	r0, r0, r8, lsl #4
 8001570:	08009f39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, fp, ip, pc}
 8001574:	08009f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip, pc}
 8001578:	08009f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, pc}
 800157c:	08009f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp, ip, pc}
 8001580:	08009faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip, pc}
 8001584:	08009fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, pc}
 8001588:	08009f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, pc}
 800158c:	429c      	cmp	r4, r3
 800158e:	f103 0301 	add.w	r3, r3, #1
 8001592:	dd03      	ble.n	800159c <main+0x348>
 8001594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001598:	2a00      	cmp	r2, #0
 800159a:	d1f7      	bne.n	800158c <main+0x338>
 800159c:	6802      	ldr	r2, [r0, #0]
 800159e:	2104      	movs	r1, #4
 80015a0:	69d4      	ldr	r4, [r2, #28]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4a67      	ldr	r2, [pc, #412]	; (8001744 <main+0x4f0>)
 80015a6:	47a0      	blx	r4
 80015a8:	2105      	movs	r1, #5
 80015aa:	9881      	ldr	r0, [sp, #516]	; 0x204
 80015ac:	f7ff fd9f 	bl	80010ee <Display::ClearLine(unsigned char) [clone .isra.0]>
 80015b0:	2102      	movs	r1, #2
 80015b2:	a825      	add	r0, sp, #148	; 0x94
 80015b4:	f006 fd12 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 80015b8:	2004      	movs	r0, #4
 80015ba:	f006 ff60 	bl	800847e <operator new(unsigned int)>
 80015be:	4b62      	ldr	r3, [pc, #392]	; (8001748 <main+0x4f4>)
 80015c0:	9023      	str	r0, [sp, #140]	; 0x8c
 80015c2:	6003      	str	r3, [r0, #0]
 80015c4:	2102      	movs	r1, #2
 80015c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015ca:	f007 fb0b 	bl	8008be4 <fwdgt_config>
 80015ce:	2801      	cmp	r0, #1
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80015da:	d101      	bne.n	80015e0 <main+0x38c>
 80015dc:	f007 faf2 	bl	8008bc4 <fwdgt_enable>
 80015e0:	4c5a      	ldr	r4, [pc, #360]	; (800174c <main+0x4f8>)
 80015e2:	4e5b      	ldr	r6, [pc, #364]	; (8001750 <main+0x4fc>)
 80015e4:	f04f 0801 	mov.w	r8, #1
 80015e8:	f007 faf4 	bl	8008bd4 <fwdgt_counter_reload>
 80015ec:	4628      	mov	r0, r5
 80015ee:	f000 ff3b 	bl	8002468 <RDMResponder::Run()>
 80015f2:	a807      	add	r0, sp, #28
 80015f4:	f005 fd48 	bl	8007088 <SpiFlashStore::Flash()>
 80015f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80015fa:	b17a      	cbz	r2, 800161c <main+0x3c8>
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001600:	1a5b      	subs	r3, r3, r1
 8001602:	429a      	cmp	r2, r3
 8001604:	d80a      	bhi.n	800161c <main+0x3c8>
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	932a      	str	r3, [sp, #168]	; 0xa8
 800160a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800160c:	2b01      	cmp	r3, #1
 800160e:	f083 0201 	eor.w	r2, r3, #1
 8001612:	9229      	str	r2, [sp, #164]	; 0xa4
 8001614:	bf14      	ite	ne
 8001616:	f8c7 8010 	strne.w	r8, [r7, #16]
 800161a:	617b      	streq	r3, [r7, #20]
 800161c:	9a80      	ldr	r2, [sp, #512]	; 0x200
 800161e:	b162      	cbz	r2, 800163a <main+0x3e6>
 8001620:	f89d 31fc 	ldrb.w	r3, [sp, #508]	; 0x1fc
 8001624:	2b00      	cmp	r3, #0
 8001626:	d170      	bne.n	800170a <main+0x4b6>
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 800162c:	1a5b      	subs	r3, r3, r1
 800162e:	429a      	cmp	r2, r3
 8001630:	d203      	bcs.n	800163a <main+0x3e6>
 8001632:	2101      	movs	r1, #1
 8001634:	a87b      	add	r0, sp, #492	; 0x1ec
 8001636:	f7ff fd8d 	bl	8001154 <Display::SetSleep(bool)>
 800163a:	6833      	ldr	r3, [r6, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0d3      	beq.n	80015e8 <main+0x394>
 8001640:	a808      	add	r0, sp, #32
 8001642:	f004 fc81 	bl	8005f48 <PixelPatterns::Run()>
 8001646:	e7cd      	b.n	80015e4 <main+0x390>
 8001648:	2300      	movs	r3, #0
 800164a:	2264      	movs	r2, #100	; 0x64
 800164c:	4619      	mov	r1, r3
 800164e:	a808      	add	r0, sp, #32
 8001650:	f004 fa6c 	bl	8005b2c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001654:	e679      	b.n	800134a <main+0xf6>
 8001656:	2200      	movs	r2, #0
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	4611      	mov	r1, r2
 800165c:	e9cd 3200 	strd	r3, r2, [sp]
 8001660:	a808      	add	r0, sp, #32
 8001662:	4b3c      	ldr	r3, [pc, #240]	; (8001754 <main+0x500>)
 8001664:	f004 fa76 	bl	8005b54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001668:	e66f      	b.n	800134a <main+0xf6>
 800166a:	2100      	movs	r1, #0
 800166c:	2364      	movs	r3, #100	; 0x64
 800166e:	4a39      	ldr	r2, [pc, #228]	; (8001754 <main+0x500>)
 8001670:	9100      	str	r1, [sp, #0]
 8001672:	a808      	add	r0, sp, #32
 8001674:	f004 fa8a 	bl	8005b8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001678:	e667      	b.n	800134a <main+0xf6>
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001680:	2100      	movs	r1, #0
 8001682:	a808      	add	r0, sp, #32
 8001684:	f004 fa9c 	bl	8005bc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001688:	e65f      	b.n	800134a <main+0xf6>
 800168a:	2200      	movs	r2, #0
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001692:	230a      	movs	r3, #10
 8001694:	4611      	mov	r1, r2
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	a808      	add	r0, sp, #32
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <main+0x500>)
 800169c:	f004 fac2 	bl	8005c24 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80016a0:	e653      	b.n	800134a <main+0xf6>
 80016a2:	2500      	movs	r5, #0
 80016a4:	46ab      	mov	fp, r5
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <main+0x504>)
 80016a8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800175c <main+0x508>
 80016ac:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8001760 <main+0x50c>
 80016b0:	61dd      	str	r5, [r3, #28]
 80016b2:	f8d9 3000 	ldr.w	r3, [r9]
 80016b6:	429d      	cmp	r5, r3
 80016b8:	d308      	bcc.n	80016cc <main+0x478>
 80016ba:	f008 f921 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 80016be:	2800      	cmp	r0, #0
 80016c0:	d1fb      	bne.n	80016ba <main+0x466>
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <main+0x50c>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f005 fb2f 	bl	8006d28 <WS28xx::Update()>
 80016ca:	e63e      	b.n	800134a <main+0xf6>
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8cd b000 	str.w	fp, [sp]
 80016d2:	4629      	mov	r1, r5
 80016d4:	461a      	mov	r2, r3
 80016d6:	f8da 0000 	ldr.w	r0, [sl]
 80016da:	f004 fce5 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80016de:	3501      	adds	r5, #1
 80016e0:	e7e7      	b.n	80016b2 <main+0x45e>
 80016e2:	2300      	movs	r3, #0
 80016e4:	e6bc      	b.n	8001460 <main+0x20c>
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	f43f af62 	beq.w	80015b0 <main+0x35c>
 80016ec:	2106      	movs	r1, #6
 80016ee:	9881      	ldr	r0, [sp, #516]	; 0x204
 80016f0:	f7ff fcfd 	bl	80010ee <Display::ClearLine(unsigned char) [clone .isra.0]>
 80016f4:	4620      	mov	r0, r4
 80016f6:	f004 fa0d 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80016fa:	2106      	movs	r1, #6
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <main+0x510>)
 8001700:	9400      	str	r4, [sp, #0]
 8001702:	a87b      	add	r0, sp, #492	; 0x1ec
 8001704:	f7ff fd36 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 8001708:	e752      	b.n	80015b0 <main+0x35c>
 800170a:	f7ff fd83 	bl	8001214 <display::timeout::gpio_renew()>
 800170e:	2800      	cmp	r0, #0
 8001710:	d093      	beq.n	800163a <main+0x3e6>
 8001712:	2100      	movs	r1, #0
 8001714:	e78e      	b.n	8001634 <main+0x3e0>
 8001716:	4814      	ldr	r0, [pc, #80]	; (8001768 <main+0x514>)
 8001718:	f000 fcd2 	bl	80020c0 <puts>
 800171c:	e6c1      	b.n	80014a2 <main+0x24e>
 800171e:	2c05      	cmp	r4, #5
 8001720:	f63f ae13 	bhi.w	800134a <main+0xf6>
 8001724:	a301      	add	r3, pc, #4	; (adr r3, 800172c <main+0x4d8>)
 8001726:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800172a:	bf00      	nop
 800172c:	080016a3 	stmdaeq	r0, {r0, r1, r5, r7, r9, sl, ip}
 8001730:	08001649 	stmdaeq	r0, {r0, r3, r6, r9, sl, ip}
 8001734:	08001657 	stmdaeq	r0, {r0, r1, r2, r4, r6, r9, sl, ip}
 8001738:	0800166b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, ip}
 800173c:	0800167b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sl, ip}
 8001740:	0800168b 	stmdaeq	r0, {r0, r1, r3, r7, r9, sl, ip}
 8001744:	08009f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, pc}
 8001748:	0800a020 	stmdaeq	r0, {r5, sp, pc}
 800174c:	20001814 	andcs	r1, r0, r4, lsl r8
 8001750:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001754:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001758:	20000658 	andcs	r0, r0, r8, asr r6
 800175c:	20000680 	andcs	r0, r0, r0, lsl #13
 8001760:	20000684 	andcs	r0, r0, r4, lsl #13
 8001764:	08009fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, pc}
 8001768:	08009f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}

0800176c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 800176c:	b110      	cbz	r0, 8001774 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	4718      	bx	r3
 8001774:	4770      	bx	lr

08001776 <Display::TextStatus(char const*)>:
 8001776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800177a:	4604      	mov	r4, r0
 800177c:	6980      	ldr	r0, [r0, #24]
 800177e:	460d      	mov	r5, r1
 8001780:	2800      	cmp	r0, #0
 8001782:	d031      	beq.n	80017e8 <Display::TextStatus(char const*)+0x72>
 8001784:	7947      	ldrb	r7, [r0, #5]
 8001786:	6803      	ldr	r3, [r0, #0]
 8001788:	1e7e      	subs	r6, r7, #1
 800178a:	b2f6      	uxtb	r6, r6
 800178c:	4632      	mov	r2, r6
 800178e:	2100      	movs	r1, #0
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	f890 9004 	ldrb.w	r9, [r0, #4]
 8001796:	f04f 0800 	mov.w	r8, #0
 800179a:	4798      	blx	r3
 800179c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80017a0:	45c1      	cmp	r9, r8
 80017a2:	69a0      	ldr	r0, [r4, #24]
 80017a4:	d818      	bhi.n	80017d8 <Display::TextStatus(char const*)+0x62>
 80017a6:	b120      	cbz	r0, 80017b2 <Display::TextStatus(char const*)+0x3c>
 80017a8:	6803      	ldr	r3, [r0, #0]
 80017aa:	4632      	mov	r2, r6
 80017ac:	2100      	movs	r1, #0
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4798      	blx	r3
 80017b2:	69a0      	ldr	r0, [r4, #24]
 80017b4:	b1c0      	cbz	r0, 80017e8 <Display::TextStatus(char const*)+0x72>
 80017b6:	2300      	movs	r3, #0
 80017b8:	7901      	ldrb	r1, [r0, #4]
 80017ba:	5cea      	ldrb	r2, [r5, r3]
 80017bc:	b11a      	cbz	r2, 80017c6 <Display::TextStatus(char const*)+0x50>
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4299      	cmp	r1, r3
 80017c2:	4613      	mov	r3, r2
 80017c4:	dcf9      	bgt.n	80017ba <Display::TextStatus(char const*)+0x44>
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	4639      	mov	r1, r7
 80017ca:	69d4      	ldr	r4, [r2, #28]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	462a      	mov	r2, r5
 80017d0:	46a4      	mov	ip, r4
 80017d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d6:	4760      	bx	ip
 80017d8:	b118      	cbz	r0, 80017e2 <Display::TextStatus(char const*)+0x6c>
 80017da:	6803      	ldr	r3, [r0, #0]
 80017dc:	2120      	movs	r1, #32
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	4798      	blx	r3
 80017e2:	f108 0801 	add.w	r8, r8, #1
 80017e6:	e7db      	b.n	80017a0 <Display::TextStatus(char const*)+0x2a>
 80017e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080017ec <PixelDmxParamsRdm::Display(unsigned char const*)>:
 80017ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f0:	4d20      	ldr	r5, [pc, #128]	; (8001874 <PixelDmxParamsRdm::Display(unsigned char const*)+0x88>)
 80017f2:	7908      	ldrb	r0, [r1, #4]
 80017f4:	460c      	mov	r4, r1
 80017f6:	682e      	ldr	r6, [r5, #0]
 80017f8:	b085      	sub	sp, #20
 80017fa:	bb40      	cbnz	r0, 800184e <PixelDmxParamsRdm::Display(unsigned char const*)+0x62>
 80017fc:	2106      	movs	r1, #6
 80017fe:	69b0      	ldr	r0, [r6, #24]
 8001800:	f7ff ffb4 	bl	800176c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001804:	7820      	ldrb	r0, [r4, #0]
 8001806:	682f      	ldr	r7, [r5, #0]
 8001808:	f004 fbc6 	bl	8005f98 <PixelType::GetType(pixel::Type)>
 800180c:	4606      	mov	r6, r0
 800180e:	78e0      	ldrb	r0, [r4, #3]
 8001810:	f894 8001 	ldrb.w	r8, [r4, #1]
 8001814:	f894 9002 	ldrb.w	r9, [r4, #2]
 8001818:	f004 fbca 	bl	8005fb0 <PixelType::GetMap(pixel::Map)>
 800181c:	4633      	mov	r3, r6
 800181e:	e9cd 9001 	strd	r9, r0, [sp, #4]
 8001822:	2107      	movs	r1, #7
 8001824:	4638      	mov	r0, r7
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <PixelDmxParamsRdm::Display(unsigned char const*)+0x8c>)
 8001828:	f8cd 8000 	str.w	r8, [sp]
 800182c:	f7ff fca2 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 8001830:	7963      	ldrb	r3, [r4, #5]
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <PixelDmxParamsRdm::Display(unsigned char const*)+0x90>)
 8001836:	d113      	bne.n	8001860 <PixelDmxParamsRdm::Display(unsigned char const*)+0x74>
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	b92a      	cbnz	r2, 8001848 <PixelDmxParamsRdm::Display(unsigned char const*)+0x5c>
 800183c:	2201      	movs	r2, #1
 800183e:	4910      	ldr	r1, [pc, #64]	; (8001880 <PixelDmxParamsRdm::Display(unsigned char const*)+0x94>)
 8001840:	6828      	ldr	r0, [r5, #0]
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	f7ff ff97 	bl	8001776 <Display::TextStatus(char const*)>
 8001848:	b005      	add	sp, #20
 800184a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800184e:	f004 f961 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001852:	2106      	movs	r1, #6
 8001854:	4603      	mov	r3, r0
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <PixelDmxParamsRdm::Display(unsigned char const*)+0x98>)
 8001858:	4630      	mov	r0, r6
 800185a:	f7ff fc8b 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 800185e:	e7d1      	b.n	8001804 <PixelDmxParamsRdm::Display(unsigned char const*)+0x18>
 8001860:	2200      	movs	r2, #0
 8001862:	2108      	movs	r1, #8
 8001864:	701a      	strb	r2, [r3, #0]
 8001866:	682b      	ldr	r3, [r5, #0]
 8001868:	6998      	ldr	r0, [r3, #24]
 800186a:	b005      	add	sp, #20
 800186c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001870:	f7ff bf7c 	b.w	800176c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001874:	200016e8 	andcs	r1, r0, r8, ror #13
 8001878:	0800a036 	stmdaeq	r0, {r1, r2, r4, r5, sp, pc}
 800187c:	200000e8 	andcs	r0, r0, r8, ror #1
 8001880:	0800a04b 	stmdaeq	r0, {r0, r1, r3, r6, sp, pc}
 8001884:	0800a030 	stmdaeq	r0, {r4, r5, sp, pc}

08001888 <RDMResponder::DmxStartAddressUpdate(unsigned short)>:
 8001888:	4b01      	ldr	r3, [pc, #4]	; (8001890 <RDMResponder::DmxStartAddressUpdate(unsigned short)+0x8>)
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	f005 bff2 	b.w	8007874 <DisplayUdf::Show()>
 8001890:	200016e8 	andcs	r1, r0, r8, ror #13

08001894 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8001894:	b110      	cbz	r0, 800189c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4718      	bx	r3
 800189c:	4770      	bx	lr
	...

080018a0 <RDMResponder::PersonalityUpdate(unsigned int)>:
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a4:	4c32      	ldr	r4, [pc, #200]	; (8001970 <RDMResponder::PersonalityUpdate(unsigned int)+0xd0>)
 80018a6:	4f33      	ldr	r7, [pc, #204]	; (8001974 <RDMResponder::PersonalityUpdate(unsigned int)+0xd4>)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	b085      	sub	sp, #20
 80018ac:	6998      	ldr	r0, [r3, #24]
 80018ae:	460d      	mov	r5, r1
 80018b0:	2107      	movs	r1, #7
 80018b2:	f7ff ffef 	bl	8001894 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f8d4 8000 	ldr.w	r8, [r4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f004 fb6a 	bl	8005f98 <PixelType::GetType(pixel::Type)>
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4606      	mov	r6, r0
 80018c8:	e9d2 3905 	ldrd	r3, r9, [r2, #20]
 80018cc:	fb03 f709 	mul.w	r7, r3, r9
 80018d0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80018d2:	6898      	ldr	r0, [r3, #8]
 80018d4:	f004 fb6c 	bl	8005fb0 <PixelType::GetMap(pixel::Map)>
 80018d8:	4633      	mov	r3, r6
 80018da:	2107      	movs	r1, #7
 80018dc:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <RDMResponder::PersonalityUpdate(unsigned int)+0xd8>)
 80018e2:	4640      	mov	r0, r8
 80018e4:	9700      	str	r7, [sp, #0]
 80018e6:	f7ff fc45 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 80018ea:	6820      	ldr	r0, [r4, #0]
 80018ec:	f005 ffc2 	bl	8007874 <DisplayUdf::Show()>
 80018f0:	2d01      	cmp	r5, #1
 80018f2:	d115      	bne.n	8001920 <RDMResponder::PersonalityUpdate(unsigned int)+0x80>
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <RDMResponder::PersonalityUpdate(unsigned int)+0xdc>)
 80018f6:	681d      	ldr	r5, [r3, #0]
 80018f8:	b17d      	cbz	r5, 800191a <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	2106      	movs	r1, #6
 80018fe:	6998      	ldr	r0, [r3, #24]
 8001900:	f7ff ffc8 	bl	8001894 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001904:	4628      	mov	r0, r5
 8001906:	6824      	ldr	r4, [r4, #0]
 8001908:	f004 f904 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 800190c:	2106      	movs	r1, #6
 800190e:	4603      	mov	r3, r0
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <RDMResponder::PersonalityUpdate(unsigned int)+0xe0>)
 8001912:	4620      	mov	r0, r4
 8001914:	9500      	str	r5, [sp, #0]
 8001916:	f7ff fc2d 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 800191a:	b005      	add	sp, #20
 800191c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001920:	2d02      	cmp	r5, #2
 8001922:	d1fa      	bne.n	800191a <RDMResponder::PersonalityUpdate(unsigned int)+0x7a>
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	2103      	movs	r1, #3
 8001928:	6998      	ldr	r0, [r3, #24]
 800192a:	f7ff ffb3 	bl	8001894 <Display::ClearLine(unsigned char) [clone .isra.0]>
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	2104      	movs	r1, #4
 8001932:	6998      	ldr	r0, [r3, #24]
 8001934:	f7ff ffae 	bl	8001894 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	6998      	ldr	r0, [r3, #24]
 800193c:	b180      	cbz	r0, 8001960 <RDMResponder::PersonalityUpdate(unsigned int)+0xc0>
 800193e:	2300      	movs	r3, #0
 8001940:	7905      	ldrb	r5, [r0, #4]
 8001942:	4910      	ldr	r1, [pc, #64]	; (8001984 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 8001944:	42ab      	cmp	r3, r5
 8001946:	f103 0301 	add.w	r3, r3, #1
 800194a:	da03      	bge.n	8001954 <RDMResponder::PersonalityUpdate(unsigned int)+0xb4>
 800194c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001950:	2a00      	cmp	r2, #0
 8001952:	d1f7      	bne.n	8001944 <RDMResponder::PersonalityUpdate(unsigned int)+0xa4>
 8001954:	6802      	ldr	r2, [r0, #0]
 8001956:	2104      	movs	r1, #4
 8001958:	69d5      	ldr	r5, [r2, #28]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4a09      	ldr	r2, [pc, #36]	; (8001984 <RDMResponder::PersonalityUpdate(unsigned int)+0xe4>)
 800195e:	47a8      	blx	r5
 8001960:	2105      	movs	r1, #5
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	6998      	ldr	r0, [r3, #24]
 8001966:	b005      	add	sp, #20
 8001968:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800196c:	f7ff bf92 	b.w	8001894 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8001970:	200016e8 	andcs	r1, r0, r8, ror #13
 8001974:	20000654 	andcs	r0, r0, r4, asr r6
 8001978:	08009fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, ip, pc}
 800197c:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001980:	08009fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, pc}
 8001984:	08009f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, ip, pc}

08001988 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	2905      	cmp	r1, #5
 800198c:	b085      	sub	sp, #20
 800198e:	dc4c      	bgt.n	8001a2a <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa2>
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 8001992:	6019      	str	r1, [r3, #0]
 8001994:	2905      	cmp	r1, #5
 8001996:	d809      	bhi.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001998:	e8df f001 	tbb	[pc, r1]
 800199c:	130a032c 	movwne	r0, #41772	; 0xa32c
 80019a0:	2300211a 	movwcs	r2, #282	; 0x11a
 80019a4:	2264      	movs	r2, #100	; 0x64
 80019a6:	4619      	mov	r1, r3
 80019a8:	f004 f8c0 	bl	8005b2c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 80019ac:	2001      	movs	r0, #1
 80019ae:	e03d      	b.n	8001a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>
 80019b0:	2200      	movs	r2, #0
 80019b2:	2364      	movs	r3, #100	; 0x64
 80019b4:	4611      	mov	r1, r2
 80019b6:	e9cd 3200 	strd	r3, r2, [sp]
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80019bc:	f004 f8ca 	bl	8005b54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019c0:	e7f4      	b.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019c2:	2100      	movs	r1, #0
 80019c4:	2364      	movs	r3, #100	; 0x64
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80019c8:	9100      	str	r1, [sp, #0]
 80019ca:	f004 f8df 	bl	8005b8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019ce:	e7ed      	b.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80019d6:	2100      	movs	r1, #0
 80019d8:	f004 f8f2 	bl	8005bc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80019dc:	e7e6      	b.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019de:	2200      	movs	r2, #0
 80019e0:	2364      	movs	r3, #100	; 0x64
 80019e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80019e6:	230a      	movs	r3, #10
 80019e8:	4611      	mov	r1, r2
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80019ee:	f004 f919 	bl	8005c24 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80019f2:	e7db      	b.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80019f4:	2400      	movs	r4, #0
 80019f6:	4627      	mov	r7, r4
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb0>)
 80019fa:	4d10      	ldr	r5, [pc, #64]	; (8001a3c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb4>)
 80019fc:	4e10      	ldr	r6, [pc, #64]	; (8001a40 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 80019fe:	61dc      	str	r4, [r3, #28]
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	429c      	cmp	r4, r3
 8001a04:	d308      	bcc.n	8001a18 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 8001a06:	f007 ff7b 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d1fb      	bne.n	8001a06 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x7e>
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xb8>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f005 f989 	bl	8006d28 <WS28xx::Update()>
 8001a16:	e7c9      	b.n	80019ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	6830      	ldr	r0, [r6, #0]
 8001a20:	9700      	str	r7, [sp, #0]
 8001a22:	f004 fb41 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001a26:	3401      	adds	r4, #1
 8001a28:	e7ea      	b.n	8001a00 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	b005      	add	sp, #20
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a30:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001a34:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001a38:	20000658 	andcs	r0, r0, r8, asr r6
 8001a3c:	20000680 	andcs	r0, r0, r0, lsl #13
 8001a40:	20000684 	andcs	r0, r0, r4, lsl #13

08001a44 <rdm::selftest::Get()>:
 8001a44:	4b01      	ldr	r3, [pc, #4]	; (8001a4c <rdm::selftest::Get()+0x8>)
 8001a46:	7818      	ldrb	r0, [r3, #0]
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000068c 	andcs	r0, r0, ip, lsl #13

08001a50 <rdm::selftest::Set(unsigned char)>:
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <rdm::selftest::Set(unsigned char)+0x54>)
 8001a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a54:	4601      	mov	r1, r0
 8001a56:	4604      	mov	r4, r0
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	f7ff ff95 	bl	8001988 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8001a5e:	4605      	mov	r5, r0
 8001a60:	b1b0      	cbz	r0, 8001a90 <rdm::selftest::Set(unsigned char)+0x40>
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <rdm::selftest::Set(unsigned char)+0x58>)
 8001a64:	b1bc      	cbz	r4, 8001a96 <rdm::selftest::Set(unsigned char)+0x46>
 8001a66:	2201      	movs	r2, #1
 8001a68:	4e10      	ldr	r6, [pc, #64]	; (8001aac <rdm::selftest::Set(unsigned char)+0x5c>)
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	6833      	ldr	r3, [r6, #0]
 8001a6e:	6998      	ldr	r0, [r3, #24]
 8001a70:	b118      	cbz	r0, 8001a7a <rdm::selftest::Set(unsigned char)+0x2a>
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	2106      	movs	r1, #6
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	4798      	blx	r3
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	6836      	ldr	r6, [r6, #0]
 8001a7e:	f004 f849 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001a82:	2106      	movs	r1, #6
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <rdm::selftest::Set(unsigned char)+0x60>)
 8001a88:	4630      	mov	r0, r6
 8001a8a:	9400      	str	r4, [sp, #0]
 8001a8c:	f7ff fb72 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 8001a90:	4628      	mov	r0, r5
 8001a92:	b002      	add	sp, #8
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	701c      	strb	r4, [r3, #0]
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <rdm::selftest::Set(unsigned char)+0x64>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	f005 feea 	bl	8007874 <DisplayUdf::Show()>
 8001aa0:	e7f6      	b.n	8001a90 <rdm::selftest::Set(unsigned char)+0x40>
 8001aa2:	bf00      	nop
 8001aa4:	20000688 	andcs	r0, r0, r8, lsl #13
 8001aa8:	20000208 	andcs	r0, r0, r8, lsl #4
 8001aac:	200016ec 	andcs	r1, r0, ip, ror #13
 8001ab0:	08009fcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, pc}
 8001ab4:	200016e8 	andcs	r1, r0, r8, ror #13

08001ab8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	460c      	mov	r4, r1
 8001abc:	f004 f82a 	bl	8005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8001ac0:	b140      	cbz	r0, 8001ad4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x1c>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	7819      	ldrb	r1, [r3, #0]
 8001ac8:	3201      	adds	r2, #1
 8001aca:	2900      	cmp	r1, #0
 8001acc:	d1fa      	bne.n	8001ac4 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0xc>
 8001ace:	1a1b      	subs	r3, r3, r0
 8001ad0:	6023      	str	r3, [r4, #0]
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	e7fb      	b.n	8001ad0 <rdm::selftest::GetDescription(unsigned char, unsigned int&)+0x18>

08001ad8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	2905      	cmp	r1, #5
 8001adc:	b085      	sub	sp, #20
 8001ade:	dc18      	bgt.n	8001b12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001ae0:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb0>)
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	2905      	cmp	r1, #5
 8001ae6:	d814      	bhi.n	8001b12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001ae8:	e8df f001 	tbb	[pc, r1]
 8001aec:	150b0330 	strne	r0, [fp, #-816]	; 0xfffffcd0
 8001af0:	2300251c 	movwcs	r2, #1308	; 0x51c
 8001af4:	2264      	movs	r2, #100	; 0x64
 8001af6:	4619      	mov	r1, r3
 8001af8:	b005      	add	sp, #20
 8001afa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001afe:	f004 b815 	b.w	8005b2c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	2200      	movs	r2, #0
 8001b06:	e9cd 3200 	strd	r3, r2, [sp]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001b0e:	f004 f821 	bl	8005b54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b12:	b005      	add	sp, #20
 8001b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b16:	2100      	movs	r1, #0
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001b1c:	9100      	str	r1, [sp, #0]
 8001b1e:	f004 f835 	bl	8005b8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b22:	e7f6      	b.n	8001b12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b24:	2364      	movs	r3, #100	; 0x64
 8001b26:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	b005      	add	sp, #20
 8001b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b32:	f004 b845 	b.w	8005bc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8001b36:	2200      	movs	r2, #0
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b3e:	230a      	movs	r3, #10
 8001b40:	4611      	mov	r1, r2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb4>)
 8001b46:	f004 f86d 	bl	8005c24 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8001b4a:	e7e2      	b.n	8001b12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x3a>
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	4627      	mov	r7, r4
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xb8>)
 8001b52:	4d10      	ldr	r5, [pc, #64]	; (8001b94 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xbc>)
 8001b54:	4e10      	ldr	r6, [pc, #64]	; (8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001b56:	61dc      	str	r4, [r3, #28]
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	429c      	cmp	r4, r3
 8001b5c:	d30a      	bcc.n	8001b74 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x9c>
 8001b5e:	f007 fecf 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d1fb      	bne.n	8001b5e <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x86>
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0xc0>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	b005      	add	sp, #20
 8001b6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b70:	f005 b8da 	b.w	8006d28 <WS28xx::Update()>
 8001b74:	2300      	movs	r3, #0
 8001b76:	4621      	mov	r1, r4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6830      	ldr	r0, [r6, #0]
 8001b7c:	9700      	str	r7, [sp, #0]
 8001b7e:	f004 fa93 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8001b82:	3401      	adds	r4, #1
 8001b84:	e7e8      	b.n	8001b58 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]+0x80>
 8001b86:	bf00      	nop
 8001b88:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001b8c:	00646464 	rsbeq	r6, r4, r4, ror #8
 8001b90:	20000658 	andcs	r0, r0, r8, asr r6
 8001b94:	20000680 	andcs	r0, r0, r0, lsl #13
 8001b98:	20000684 	andcs	r0, r0, r4, lsl #13

08001b9c <RDMIdentify::On(rdm::identify::Mode)>:
 8001b9c:	29ff      	cmp	r1, #255	; 0xff
 8001b9e:	d10d      	bne.n	8001bbc <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <RDMIdentify::On(rdm::identify::Mode)+0x24>)
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	b952      	cbnz	r2, 8001bbc <RDMIdentify::On(rdm::identify::Mode)+0x20>
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <RDMIdentify::On(rdm::identify::Mode)+0x28>)
 8001bac:	2105      	movs	r1, #5
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <RDMIdentify::On(rdm::identify::Mode)+0x2c>)
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <RDMIdentify::On(rdm::identify::Mode)+0x30>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f7ff bf8e 	b.w	8001ad8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200000e9 	andcs	r0, r0, r9, ror #1
 8001bc4:	2000068c 	andcs	r0, r0, ip, lsl #13
 8001bc8:	200000ec 	andcs	r0, r0, ip, ror #1
 8001bcc:	20000688 	andcs	r0, r0, r8, lsl #13

08001bd0 <RDMIdentify::Off(rdm::identify::Mode)>:
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <RDMIdentify::Off(rdm::identify::Mode)+0x18>)
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	b13a      	cbz	r2, 8001be6 <RDMIdentify::Off(rdm::identify::Mode)+0x16>
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <RDMIdentify::Off(rdm::identify::Mode)+0x1c>)
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <RDMIdentify::Off(rdm::identify::Mode)+0x20>)
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f7ff bf79 	b.w	8001ad8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern) [clone .isra.0]>
 8001be6:	4770      	bx	lr
 8001be8:	200000e9 	andcs	r0, r0, r9, ror #1
 8001bec:	200000ec 	andcs	r0, r0, ip, ror #1
 8001bf0:	20000688 	andcs	r0, r0, r8, lsl #13

08001bf4 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
 8001bf4:	2805      	cmp	r0, #5
 8001bf6:	d814      	bhi.n	8001c22 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x2e>
 8001bf8:	e8df f000 	tbb	[pc, r0]
 8001bfc:	0a071603 	beq	81c7410 <__exidx_end+0x1bbe40>
 8001c00:	2304100d 	movwcs	r1, #16397	; 0x400d
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x3c>)
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	4770      	bx	lr
 8001c0a:	230e      	movs	r3, #14
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x40>)
 8001c0e:	e7fa      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c10:	2303      	movs	r3, #3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x44>)
 8001c14:	e7f7      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c16:	230c      	movs	r3, #12
 8001c18:	4808      	ldr	r0, [pc, #32]	; (8001c3c <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>)
 8001c1a:	e7f4      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x4c>)
 8001c20:	e7f1      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c22:	2309      	movs	r3, #9
 8001c24:	4807      	ldr	r0, [pc, #28]	; (8001c44 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x50>)
 8001c26:	e7ee      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c28:	2305      	movs	r3, #5
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x54>)
 8001c2c:	e7eb      	b.n	8001c06 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x12>
 8001c2e:	bf00      	nop
 8001c30:	0800a056 	stmdaeq	r0, {r1, r2, r4, r6, sp, pc}
 8001c34:	0800a05b 	stmdaeq	r0, {r0, r1, r3, r4, r6, sp, pc}
 8001c38:	0800a06a 	stmdaeq	r0, {r1, r3, r5, r6, sp, pc}
 8001c3c:	0800a06e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sp, pc}
 8001c40:	0800a07b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, sp, pc}
 8001c44:	0800a083 	stmdaeq	r0, {r0, r1, r7, sp, pc}
 8001c48:	0800a064 	stmdaeq	r0, {r2, r5, r6, sp, pc}

08001c4c <RDMSoftwareVersion::GetVersion()>:
 8001c4c:	4800      	ldr	r0, [pc, #0]	; (8001c50 <RDMSoftwareVersion::GetVersion()+0x4>)
 8001c4e:	4770      	bx	lr
 8001c50:	0800a08d 	stmdaeq	r0, {r0, r2, r3, r7, sp, pc}

08001c54 <RDMSoftwareVersion::GetVersionLength()>:
 8001c54:	2003      	movs	r0, #3
 8001c56:	4770      	bx	lr

08001c58 <RDMSoftwareVersion::GetVersionId()>:
 8001c58:	4800      	ldr	r0, [pc, #0]	; (8001c5c <RDMSoftwareVersion::GetVersionId()+0x4>)
 8001c5a:	4770      	bx	lr
 8001c5c:	62360f11 	eorsvs	r0, r6, #17, 30	; 0x44

08001c60 <_xputch>:
 8001c60:	4603      	mov	r3, r0
 8001c62:	b410      	push	{r4}
 8001c64:	4c08      	ldr	r4, [pc, #32]	; (8001c88 <_xputch+0x28>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	6821      	ldr	r1, [r4, #0]
 8001c6c:	3201      	adds	r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	b139      	cbz	r1, 8001c82 <_xputch+0x22>
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	da02      	bge.n	8001c7e <_xputch+0x1e>
 8001c78:	1c4b      	adds	r3, r1, #1
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	7008      	strb	r0, [r1, #0]
 8001c7e:	bc10      	pop	{r4}
 8001c80:	4770      	bx	lr
 8001c82:	bc10      	pop	{r4}
 8001c84:	f006 b93e 	b.w	8007f04 <console_putc>
 8001c88:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08001c8c <_format_int>:
 8001c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c90:	4698      	mov	r8, r3
 8001c92:	b091      	sub	sp, #68	; 0x44
 8001c94:	ea52 0308 	orrs.w	r3, r2, r8
 8001c98:	4606      	mov	r6, r0
 8001c9a:	4617      	mov	r7, r2
 8001c9c:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8001ca0:	d133      	bne.n	8001d0a <_format_int+0x7e>
 8001ca2:	2330      	movs	r3, #48	; 0x30
 8001ca4:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8001ca8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001cac:	6833      	ldr	r3, [r6, #0]
 8001cae:	07d8      	lsls	r0, r3, #31
 8001cb0:	d507      	bpl.n	8001cc2 <_format_int+0x36>
 8001cb2:	466a      	mov	r2, sp
 8001cb4:	2030      	movs	r0, #48	; 0x30
 8001cb6:	6871      	ldr	r1, [r6, #4]
 8001cb8:	1b2f      	subs	r7, r5, r4
 8001cba:	428f      	cmp	r7, r1
 8001cbc:	da01      	bge.n	8001cc2 <_format_int+0x36>
 8001cbe:	4294      	cmp	r4, r2
 8001cc0:	d839      	bhi.n	8001d36 <_format_int+0xaa>
 8001cc2:	0699      	lsls	r1, r3, #26
 8001cc4:	d507      	bpl.n	8001cd6 <_format_int+0x4a>
 8001cc6:	466a      	mov	r2, sp
 8001cc8:	2030      	movs	r0, #48	; 0x30
 8001cca:	68b1      	ldr	r1, [r6, #8]
 8001ccc:	1b2f      	subs	r7, r5, r4
 8001cce:	428f      	cmp	r7, r1
 8001cd0:	da01      	bge.n	8001cd6 <_format_int+0x4a>
 8001cd2:	4294      	cmp	r4, r2
 8001cd4:	d832      	bhi.n	8001d3c <_format_int+0xb0>
 8001cd6:	071a      	lsls	r2, r3, #28
 8001cd8:	bf44      	itt	mi
 8001cda:	222d      	movmi	r2, #45	; 0x2d
 8001cdc:	f804 2901 	strbmi.w	r2, [r4], #-1
 8001ce0:	065b      	lsls	r3, r3, #25
 8001ce2:	d407      	bmi.n	8001cf4 <_format_int+0x68>
 8001ce4:	466b      	mov	r3, sp
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	68b2      	ldr	r2, [r6, #8]
 8001cea:	1b28      	subs	r0, r5, r4
 8001cec:	4290      	cmp	r0, r2
 8001cee:	da01      	bge.n	8001cf4 <_format_int+0x68>
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	d826      	bhi.n	8001d42 <_format_int+0xb6>
 8001cf4:	1b2d      	subs	r5, r5, r4
 8001cf6:	3401      	adds	r4, #1
 8001cf8:	ab10      	add	r3, sp, #64	; 0x40
 8001cfa:	429c      	cmp	r4, r3
 8001cfc:	d324      	bcc.n	8001d48 <_format_int+0xbc>
 8001cfe:	68b3      	ldr	r3, [r6, #8]
 8001d00:	42ab      	cmp	r3, r5
 8001d02:	dc27      	bgt.n	8001d54 <_format_int+0xc8>
 8001d04:	b011      	add	sp, #68	; 0x44
 8001d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d0a:	462c      	mov	r4, r5
 8001d0c:	46e9      	mov	r9, sp
 8001d0e:	4638      	mov	r0, r7
 8001d10:	4641      	mov	r1, r8
 8001d12:	220a      	movs	r2, #10
 8001d14:	2300      	movs	r3, #0
 8001d16:	f7fe fa1b 	bl	8000150 <__aeabi_uldivmod>
 8001d1a:	3230      	adds	r2, #48	; 0x30
 8001d1c:	f804 2901 	strb.w	r2, [r4], #-1
 8001d20:	463a      	mov	r2, r7
 8001d22:	4643      	mov	r3, r8
 8001d24:	2a0a      	cmp	r2, #10
 8001d26:	f173 0300 	sbcs.w	r3, r3, #0
 8001d2a:	4607      	mov	r7, r0
 8001d2c:	4688      	mov	r8, r1
 8001d2e:	d3bd      	bcc.n	8001cac <_format_int+0x20>
 8001d30:	454c      	cmp	r4, r9
 8001d32:	d1ec      	bne.n	8001d0e <_format_int+0x82>
 8001d34:	e7ba      	b.n	8001cac <_format_int+0x20>
 8001d36:	f804 0901 	strb.w	r0, [r4], #-1
 8001d3a:	e7bd      	b.n	8001cb8 <_format_int+0x2c>
 8001d3c:	f804 0901 	strb.w	r0, [r4], #-1
 8001d40:	e7c4      	b.n	8001ccc <_format_int+0x40>
 8001d42:	f804 1901 	strb.w	r1, [r4], #-1
 8001d46:	e7d0      	b.n	8001cea <_format_int+0x5e>
 8001d48:	4630      	mov	r0, r6
 8001d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4e:	f7ff ff87 	bl	8001c60 <_xputch>
 8001d52:	e7d1      	b.n	8001cf8 <_format_int+0x6c>
 8001d54:	2120      	movs	r1, #32
 8001d56:	4630      	mov	r0, r6
 8001d58:	f7ff ff82 	bl	8001c60 <_xputch>
 8001d5c:	3501      	adds	r5, #1
 8001d5e:	e7ce      	b.n	8001cfe <_format_int+0x72>

08001d60 <_format_hex>:
 8001d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d62:	b091      	sub	sp, #68	; 0x44
 8001d64:	4606      	mov	r6, r0
 8001d66:	6804      	ldr	r4, [r0, #0]
 8001d68:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8001d6c:	bb61      	cbnz	r1, 8001dc8 <_format_hex+0x68>
 8001d6e:	2330      	movs	r3, #48	; 0x30
 8001d70:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8001d74:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8001d78:	07e5      	lsls	r5, r4, #31
 8001d7a:	d507      	bpl.n	8001d8c <_format_hex+0x2c>
 8001d7c:	4669      	mov	r1, sp
 8001d7e:	2530      	movs	r5, #48	; 0x30
 8001d80:	6870      	ldr	r0, [r6, #4]
 8001d82:	1ad7      	subs	r7, r2, r3
 8001d84:	4287      	cmp	r7, r0
 8001d86:	da01      	bge.n	8001d8c <_format_hex+0x2c>
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d831      	bhi.n	8001df0 <_format_hex+0x90>
 8001d8c:	06a0      	lsls	r0, r4, #26
 8001d8e:	d507      	bpl.n	8001da0 <_format_hex+0x40>
 8001d90:	4669      	mov	r1, sp
 8001d92:	2530      	movs	r5, #48	; 0x30
 8001d94:	68b0      	ldr	r0, [r6, #8]
 8001d96:	1ad7      	subs	r7, r2, r3
 8001d98:	4287      	cmp	r7, r0
 8001d9a:	da01      	bge.n	8001da0 <_format_hex+0x40>
 8001d9c:	428b      	cmp	r3, r1
 8001d9e:	d82a      	bhi.n	8001df6 <_format_hex+0x96>
 8001da0:	0661      	lsls	r1, r4, #25
 8001da2:	d407      	bmi.n	8001db4 <_format_hex+0x54>
 8001da4:	4669      	mov	r1, sp
 8001da6:	2420      	movs	r4, #32
 8001da8:	68b0      	ldr	r0, [r6, #8]
 8001daa:	1ad5      	subs	r5, r2, r3
 8001dac:	4285      	cmp	r5, r0
 8001dae:	da01      	bge.n	8001db4 <_format_hex+0x54>
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d823      	bhi.n	8001dfc <_format_hex+0x9c>
 8001db4:	1ad5      	subs	r5, r2, r3
 8001db6:	1c5c      	adds	r4, r3, #1
 8001db8:	ab10      	add	r3, sp, #64	; 0x40
 8001dba:	429c      	cmp	r4, r3
 8001dbc:	d321      	bcc.n	8001e02 <_format_hex+0xa2>
 8001dbe:	68b3      	ldr	r3, [r6, #8]
 8001dc0:	429d      	cmp	r5, r3
 8001dc2:	db24      	blt.n	8001e0e <_format_hex+0xae>
 8001dc4:	b011      	add	sp, #68	; 0x44
 8001dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc8:	f014 0f02 	tst.w	r4, #2
 8001dcc:	bf0c      	ite	eq
 8001dce:	2757      	moveq	r7, #87	; 0x57
 8001dd0:	2737      	movne	r7, #55	; 0x37
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	466d      	mov	r5, sp
 8001dd6:	f001 000f 	and.w	r0, r1, #15
 8001dda:	2809      	cmp	r0, #9
 8001ddc:	bf94      	ite	ls
 8001dde:	3030      	addls	r0, #48	; 0x30
 8001de0:	19c0      	addhi	r0, r0, r7
 8001de2:	0909      	lsrs	r1, r1, #4
 8001de4:	f803 0901 	strb.w	r0, [r3], #-1
 8001de8:	d0c6      	beq.n	8001d78 <_format_hex+0x18>
 8001dea:	42ab      	cmp	r3, r5
 8001dec:	d1f3      	bne.n	8001dd6 <_format_hex+0x76>
 8001dee:	e7c3      	b.n	8001d78 <_format_hex+0x18>
 8001df0:	f803 5901 	strb.w	r5, [r3], #-1
 8001df4:	e7c5      	b.n	8001d82 <_format_hex+0x22>
 8001df6:	f803 5901 	strb.w	r5, [r3], #-1
 8001dfa:	e7cc      	b.n	8001d96 <_format_hex+0x36>
 8001dfc:	f803 4901 	strb.w	r4, [r3], #-1
 8001e00:	e7d3      	b.n	8001daa <_format_hex+0x4a>
 8001e02:	4630      	mov	r0, r6
 8001e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e08:	f7ff ff2a 	bl	8001c60 <_xputch>
 8001e0c:	e7d4      	b.n	8001db8 <_format_hex+0x58>
 8001e0e:	2120      	movs	r1, #32
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff ff25 	bl	8001c60 <_xputch>
 8001e16:	3501      	adds	r5, #1
 8001e18:	e7d1      	b.n	8001dbe <_format_hex+0x5e>
	...

08001e1c <_vprintf>:
 8001e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e20:	2700      	movs	r7, #0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	f04f 080a 	mov.w	r8, #10
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8001e30:	7819      	ldrb	r1, [r3, #0]
 8001e32:	b919      	cbnz	r1, 8001e3c <_vprintf+0x20>
 8001e34:	9804      	ldr	r0, [sp, #16]
 8001e36:	b006      	add	sp, #24
 8001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3c:	2925      	cmp	r1, #37	; 0x25
 8001e3e:	f103 0601 	add.w	r6, r3, #1
 8001e42:	d004      	beq.n	8001e4e <_vprintf+0x32>
 8001e44:	a801      	add	r0, sp, #4
 8001e46:	f7ff ff0b 	bl	8001c60 <_xputch>
 8001e4a:	4633      	mov	r3, r6
 8001e4c:	e7f0      	b.n	8001e30 <_vprintf+0x14>
 8001e4e:	785a      	ldrb	r2, [r3, #1]
 8001e50:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8001e54:	2a30      	cmp	r2, #48	; 0x30
 8001e56:	9703      	str	r7, [sp, #12]
 8001e58:	d126      	bne.n	8001ea8 <_vprintf+0x8c>
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	9201      	str	r2, [sp, #4]
 8001e5e:	1c9e      	adds	r6, r3, #2
 8001e60:	2200      	movs	r2, #0
 8001e62:	4635      	mov	r5, r6
 8001e64:	4613      	mov	r3, r2
 8001e66:	7829      	ldrb	r1, [r5, #0]
 8001e68:	462e      	mov	r6, r5
 8001e6a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001e6e:	2809      	cmp	r0, #9
 8001e70:	f105 0501 	add.w	r5, r5, #1
 8001e74:	d91c      	bls.n	8001eb0 <_vprintf+0x94>
 8001e76:	b12a      	cbz	r2, 8001e84 <_vprintf+0x68>
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	b11b      	cbz	r3, 8001e84 <_vprintf+0x68>
 8001e7c:	9b01      	ldr	r3, [sp, #4]
 8001e7e:	f043 0310 	orr.w	r3, r3, #16
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	292e      	cmp	r1, #46	; 0x2e
 8001e86:	d122      	bne.n	8001ece <_vprintf+0xb2>
 8001e88:	7873      	ldrb	r3, [r6, #1]
 8001e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e8c:	d014      	beq.n	8001eb8 <_vprintf+0x9c>
 8001e8e:	2100      	movs	r1, #0
 8001e90:	460a      	mov	r2, r1
 8001e92:	1c70      	adds	r0, r6, #1
 8001e94:	7803      	ldrb	r3, [r0, #0]
 8001e96:	4606      	mov	r6, r0
 8001e98:	3b30      	subs	r3, #48	; 0x30
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	f100 0001 	add.w	r0, r0, #1
 8001ea0:	d930      	bls.n	8001f04 <_vprintf+0xe8>
 8001ea2:	b181      	cbz	r1, 8001ec6 <_vprintf+0xaa>
 8001ea4:	9202      	str	r2, [sp, #8]
 8001ea6:	e00e      	b.n	8001ec6 <_vprintf+0xaa>
 8001ea8:	2a2d      	cmp	r2, #45	; 0x2d
 8001eaa:	d1d9      	bne.n	8001e60 <_vprintf+0x44>
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	e7d5      	b.n	8001e5c <_vprintf+0x40>
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	fb08 0303 	mla	r3, r8, r3, r0
 8001eb6:	e7d6      	b.n	8001e66 <_vprintf+0x4a>
 8001eb8:	f854 3b04 	ldr.w	r3, [r4], #4
 8001ebc:	3602      	adds	r6, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bfb8      	it	lt
 8001ec2:	425b      	neglt	r3, r3
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	7833      	ldrb	r3, [r6, #0]
 8001ed0:	2b6c      	cmp	r3, #108	; 0x6c
 8001ed2:	bf04      	itt	eq
 8001ed4:	9b01      	ldreq	r3, [sp, #4]
 8001ed6:	3601      	addeq	r6, #1
 8001ed8:	7831      	ldrb	r1, [r6, #0]
 8001eda:	bf04      	itt	eq
 8001edc:	f043 0304 	orreq.w	r3, r3, #4
 8001ee0:	9301      	streq	r3, [sp, #4]
 8001ee2:	2978      	cmp	r1, #120	; 0x78
 8001ee4:	d8ae      	bhi.n	8001e44 <_vprintf+0x28>
 8001ee6:	296f      	cmp	r1, #111	; 0x6f
 8001ee8:	d810      	bhi.n	8001f0c <_vprintf+0xf0>
 8001eea:	2963      	cmp	r1, #99	; 0x63
 8001eec:	d048      	beq.n	8001f80 <_vprintf+0x164>
 8001eee:	d827      	bhi.n	8001f40 <_vprintf+0x124>
 8001ef0:	2958      	cmp	r1, #88	; 0x58
 8001ef2:	d1a7      	bne.n	8001e44 <_vprintf+0x28>
 8001ef4:	9b01      	ldr	r3, [sp, #4]
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	4625      	mov	r5, r4
 8001efe:	f855 1b04 	ldr.w	r1, [r5], #4
 8001f02:	e056      	b.n	8001fb2 <_vprintf+0x196>
 8001f04:	2101      	movs	r1, #1
 8001f06:	fb08 3202 	mla	r2, r8, r2, r3
 8001f0a:	e7c3      	b.n	8001e94 <_vprintf+0x78>
 8001f0c:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d897      	bhi.n	8001e44 <_vprintf+0x28>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <_vprintf+0x100>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f93 	stmdaeq	r0, {r0, r1, r4, r7, r8, r9, sl, fp, ip}
 8001f20:	08001e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip}
 8001f24:	08001e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip}
 8001f28:	08001fbb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp, ip}
 8001f2c:	08001e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip}
 8001f30:	0800202f 	stmdaeq	r0, {r0, r1, r2, r3, r5, sp}
 8001f34:	08001e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip}
 8001f38:	08001e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip}
 8001f3c:	08001efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip}
 8001f40:	2964      	cmp	r1, #100	; 0x64
 8001f42:	d002      	beq.n	8001f4a <_vprintf+0x12e>
 8001f44:	2969      	cmp	r1, #105	; 0x69
 8001f46:	f47f af7d 	bne.w	8001e44 <_vprintf+0x28>
 8001f4a:	9901      	ldr	r1, [sp, #4]
 8001f4c:	074d      	lsls	r5, r1, #29
 8001f4e:	bf51      	iteee	pl
 8001f50:	4625      	movpl	r5, r4
 8001f52:	3407      	addmi	r4, #7
 8001f54:	f024 0407 	bicmi.w	r4, r4, #7
 8001f58:	4625      	movmi	r5, r4
 8001f5a:	bf55      	itete	pl
 8001f5c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8001f60:	6863      	ldrmi	r3, [r4, #4]
 8001f62:	17d3      	asrpl	r3, r2, #31
 8001f64:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da05      	bge.n	8001f78 <_vprintf+0x15c>
 8001f6c:	f041 0108 	orr.w	r1, r1, #8
 8001f70:	4252      	negs	r2, r2
 8001f72:	9101      	str	r1, [sp, #4]
 8001f74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001f78:	a801      	add	r0, sp, #4
 8001f7a:	f7ff fe87 	bl	8001c8c <_format_int>
 8001f7e:	e005      	b.n	8001f8c <_vprintf+0x170>
 8001f80:	4625      	mov	r5, r4
 8001f82:	a801      	add	r0, sp, #4
 8001f84:	f855 1b04 	ldr.w	r1, [r5], #4
 8001f88:	f7ff fe6a 	bl	8001c60 <_xputch>
 8001f8c:	462c      	mov	r4, r5
 8001f8e:	3601      	adds	r6, #1
 8001f90:	e75b      	b.n	8001e4a <_vprintf+0x2e>
 8001f92:	2308      	movs	r3, #8
 8001f94:	4625      	mov	r5, r4
 8001f96:	9303      	str	r3, [sp, #12]
 8001f98:	2320      	movs	r3, #32
 8001f9a:	2130      	movs	r1, #48	; 0x30
 8001f9c:	f855 4b04 	ldr.w	r4, [r5], #4
 8001fa0:	a801      	add	r0, sp, #4
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	f7ff fe5c 	bl	8001c60 <_xputch>
 8001fa8:	2178      	movs	r1, #120	; 0x78
 8001faa:	a801      	add	r0, sp, #4
 8001fac:	f7ff fe58 	bl	8001c60 <_xputch>
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	a801      	add	r0, sp, #4
 8001fb4:	f7ff fed4 	bl	8001d60 <_format_hex>
 8001fb8:	e7e8      	b.n	8001f8c <_vprintf+0x170>
 8001fba:	4625      	mov	r5, r4
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	f855 9b04 	ldr.w	r9, [r5], #4
 8001fc2:	f819 3004 	ldrb.w	r3, [r9, r4]
 8001fc6:	b993      	cbnz	r3, 8001fee <_vprintf+0x1d2>
 8001fc8:	9b01      	ldr	r3, [sp, #4]
 8001fca:	07d9      	lsls	r1, r3, #31
 8001fcc:	d503      	bpl.n	8001fd6 <_vprintf+0x1ba>
 8001fce:	9b02      	ldr	r3, [sp, #8]
 8001fd0:	429c      	cmp	r4, r3
 8001fd2:	bfa8      	it	ge
 8001fd4:	461c      	movge	r4, r3
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	f104 0a01 	add.w	sl, r4, #1
 8001fdc:	065a      	lsls	r2, r3, #25
 8001fde:	d403      	bmi.n	8001fe8 <_vprintf+0x1cc>
 8001fe0:	9b03      	ldr	r3, [sp, #12]
 8001fe2:	429c      	cmp	r4, r3
 8001fe4:	db05      	blt.n	8001ff2 <_vprintf+0x1d6>
 8001fe6:	4654      	mov	r4, sl
 8001fe8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001fec:	e00d      	b.n	800200a <_vprintf+0x1ee>
 8001fee:	3401      	adds	r4, #1
 8001ff0:	e7e7      	b.n	8001fc2 <_vprintf+0x1a6>
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	a801      	add	r0, sp, #4
 8001ff6:	f7ff fe33 	bl	8001c60 <_xputch>
 8001ffa:	4654      	mov	r4, sl
 8001ffc:	e7eb      	b.n	8001fd6 <_vprintf+0x1ba>
 8001ffe:	a801      	add	r0, sp, #4
 8002000:	f7ff fe2e 	bl	8001c60 <_xputch>
 8002004:	9b02      	ldr	r3, [sp, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	07db      	lsls	r3, r3, #31
 800200e:	d501      	bpl.n	8002014 <_vprintf+0x1f8>
 8002010:	9b02      	ldr	r3, [sp, #8]
 8002012:	b11b      	cbz	r3, 800201c <_vprintf+0x200>
 8002014:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002018:	2900      	cmp	r1, #0
 800201a:	d1f0      	bne.n	8001ffe <_vprintf+0x1e2>
 800201c:	9b03      	ldr	r3, [sp, #12]
 800201e:	42a3      	cmp	r3, r4
 8002020:	ddb4      	ble.n	8001f8c <_vprintf+0x170>
 8002022:	2120      	movs	r1, #32
 8002024:	a801      	add	r0, sp, #4
 8002026:	f7ff fe1b 	bl	8001c60 <_xputch>
 800202a:	3401      	adds	r4, #1
 800202c:	e7f6      	b.n	800201c <_vprintf+0x200>
 800202e:	9b01      	ldr	r3, [sp, #4]
 8002030:	f013 0304 	ands.w	r3, r3, #4
 8002034:	bf1d      	ittte	ne
 8002036:	3407      	addne	r4, #7
 8002038:	f024 0407 	bicne.w	r4, r4, #7
 800203c:	4625      	movne	r5, r4
 800203e:	4625      	moveq	r5, r4
 8002040:	bf1a      	itte	ne
 8002042:	f855 2b08 	ldrne.w	r2, [r5], #8
 8002046:	6863      	ldrne	r3, [r4, #4]
 8002048:	f855 2b04 	ldreq.w	r2, [r5], #4
 800204c:	e794      	b.n	8001f78 <_vprintf+0x15c>
 800204e:	bf00      	nop

08002050 <printf>:
 8002050:	b40f      	push	{r0, r1, r2, r3}
 8002052:	b507      	push	{r0, r1, r2, lr}
 8002054:	aa04      	add	r2, sp, #16
 8002056:	f852 1b04 	ldr.w	r1, [r2], #4
 800205a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800205e:	9201      	str	r2, [sp, #4]
 8002060:	f7ff fedc 	bl	8001e1c <_vprintf>
 8002064:	b003      	add	sp, #12
 8002066:	f85d eb04 	ldr.w	lr, [sp], #4
 800206a:	b004      	add	sp, #16
 800206c:	4770      	bx	lr
	...

08002070 <snprintf>:
 8002070:	b40c      	push	{r2, r3}
 8002072:	460b      	mov	r3, r1
 8002074:	b513      	push	{r0, r1, r4, lr}
 8002076:	4c09      	ldr	r4, [pc, #36]	; (800209c <snprintf+0x2c>)
 8002078:	aa04      	add	r2, sp, #16
 800207a:	f852 1b04 	ldr.w	r1, [r2], #4
 800207e:	6020      	str	r0, [r4, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	9201      	str	r2, [sp, #4]
 8002084:	f7ff feca 	bl	8001e1c <_vprintf>
 8002088:	2300      	movs	r3, #0
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	7013      	strb	r3, [r2, #0]
 8002090:	b002      	add	sp, #8
 8002092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002096:	b002      	add	sp, #8
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080020a0 <vsnprintf>:
 80020a0:	b538      	push	{r3, r4, r5, lr}
 80020a2:	4605      	mov	r5, r0
 80020a4:	4c05      	ldr	r4, [pc, #20]	; (80020bc <vsnprintf+0x1c>)
 80020a6:	4608      	mov	r0, r1
 80020a8:	4611      	mov	r1, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	6025      	str	r5, [r4, #0]
 80020ae:	f7ff feb5 	bl	8001e1c <_vprintf>
 80020b2:	2300      	movs	r3, #0
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	7013      	strb	r3, [r2, #0]
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
 80020bc:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080020c0 <puts>:
 80020c0:	b508      	push	{r3, lr}
 80020c2:	f005 ff21 	bl	8007f08 <console_puts>
 80020c6:	200a      	movs	r0, #10
 80020c8:	f005 ff1c 	bl	8007f04 <console_putc>
 80020cc:	2001      	movs	r0, #1
 80020ce:	bd08      	pop	{r3, pc}

080020d0 <__udivmoddi4>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	9e08      	ldr	r6, [sp, #32]
 80020d6:	460d      	mov	r5, r1
 80020d8:	4604      	mov	r4, r0
 80020da:	468e      	mov	lr, r1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d14c      	bne.n	800217a <__udivmoddi4+0xaa>
 80020e0:	428a      	cmp	r2, r1
 80020e2:	4694      	mov	ip, r2
 80020e4:	d967      	bls.n	80021b6 <__udivmoddi4+0xe6>
 80020e6:	fab2 f382 	clz	r3, r2
 80020ea:	b153      	cbz	r3, 8002102 <__udivmoddi4+0x32>
 80020ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80020f0:	f1c3 0220 	rsb	r2, r3, #32
 80020f4:	fa01 fe03 	lsl.w	lr, r1, r3
 80020f8:	fa20 f202 	lsr.w	r2, r0, r2
 80020fc:	ea42 0e0e 	orr.w	lr, r2, lr
 8002100:	409c      	lsls	r4, r3
 8002102:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002106:	fbbe f1f7 	udiv	r1, lr, r7
 800210a:	fa1f f58c 	uxth.w	r5, ip
 800210e:	fb07 ee11 	mls	lr, r7, r1, lr
 8002112:	fb01 f005 	mul.w	r0, r1, r5
 8002116:	0c22      	lsrs	r2, r4, #16
 8002118:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800211c:	4290      	cmp	r0, r2
 800211e:	d90a      	bls.n	8002136 <__udivmoddi4+0x66>
 8002120:	eb1c 0202 	adds.w	r2, ip, r2
 8002124:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8002128:	f080 8119 	bcs.w	800235e <__udivmoddi4+0x28e>
 800212c:	4290      	cmp	r0, r2
 800212e:	f240 8116 	bls.w	800235e <__udivmoddi4+0x28e>
 8002132:	3902      	subs	r1, #2
 8002134:	4462      	add	r2, ip
 8002136:	1a12      	subs	r2, r2, r0
 8002138:	fbb2 f0f7 	udiv	r0, r2, r7
 800213c:	fb07 2210 	mls	r2, r7, r0, r2
 8002140:	fb00 f505 	mul.w	r5, r0, r5
 8002144:	b2a4      	uxth	r4, r4
 8002146:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800214a:	42a5      	cmp	r5, r4
 800214c:	d90a      	bls.n	8002164 <__udivmoddi4+0x94>
 800214e:	eb1c 0404 	adds.w	r4, ip, r4
 8002152:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002156:	f080 8104 	bcs.w	8002362 <__udivmoddi4+0x292>
 800215a:	42a5      	cmp	r5, r4
 800215c:	f240 8101 	bls.w	8002362 <__udivmoddi4+0x292>
 8002160:	4464      	add	r4, ip
 8002162:	3802      	subs	r0, #2
 8002164:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002168:	2100      	movs	r1, #0
 800216a:	1b64      	subs	r4, r4, r5
 800216c:	b11e      	cbz	r6, 8002176 <__udivmoddi4+0xa6>
 800216e:	40dc      	lsrs	r4, r3
 8002170:	2300      	movs	r3, #0
 8002172:	e9c6 4300 	strd	r4, r3, [r6]
 8002176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217a:	428b      	cmp	r3, r1
 800217c:	d908      	bls.n	8002190 <__udivmoddi4+0xc0>
 800217e:	2e00      	cmp	r6, #0
 8002180:	f000 80ea 	beq.w	8002358 <__udivmoddi4+0x288>
 8002184:	2100      	movs	r1, #0
 8002186:	e9c6 0500 	strd	r0, r5, [r6]
 800218a:	4608      	mov	r0, r1
 800218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002190:	fab3 f183 	clz	r1, r3
 8002194:	2900      	cmp	r1, #0
 8002196:	d148      	bne.n	800222a <__udivmoddi4+0x15a>
 8002198:	42ab      	cmp	r3, r5
 800219a:	d302      	bcc.n	80021a2 <__udivmoddi4+0xd2>
 800219c:	4282      	cmp	r2, r0
 800219e:	f200 80f8 	bhi.w	8002392 <__udivmoddi4+0x2c2>
 80021a2:	1a84      	subs	r4, r0, r2
 80021a4:	eb65 0203 	sbc.w	r2, r5, r3
 80021a8:	2001      	movs	r0, #1
 80021aa:	4696      	mov	lr, r2
 80021ac:	2e00      	cmp	r6, #0
 80021ae:	d0e2      	beq.n	8002176 <__udivmoddi4+0xa6>
 80021b0:	e9c6 4e00 	strd	r4, lr, [r6]
 80021b4:	e7df      	b.n	8002176 <__udivmoddi4+0xa6>
 80021b6:	b902      	cbnz	r2, 80021ba <__udivmoddi4+0xea>
 80021b8:	deff      	udf	#255	; 0xff
 80021ba:	fab2 f382 	clz	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 808e 	bne.w	80022e0 <__udivmoddi4+0x210>
 80021c4:	1a88      	subs	r0, r1, r2
 80021c6:	2101      	movs	r1, #1
 80021c8:	0c17      	lsrs	r7, r2, #16
 80021ca:	fa1f fe82 	uxth.w	lr, r2
 80021ce:	fbb0 f5f7 	udiv	r5, r0, r7
 80021d2:	fb07 0015 	mls	r0, r7, r5, r0
 80021d6:	0c22      	lsrs	r2, r4, #16
 80021d8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80021dc:	fb0e f005 	mul.w	r0, lr, r5
 80021e0:	4290      	cmp	r0, r2
 80021e2:	d908      	bls.n	80021f6 <__udivmoddi4+0x126>
 80021e4:	eb1c 0202 	adds.w	r2, ip, r2
 80021e8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80021ec:	d202      	bcs.n	80021f4 <__udivmoddi4+0x124>
 80021ee:	4290      	cmp	r0, r2
 80021f0:	f200 80cc 	bhi.w	800238c <__udivmoddi4+0x2bc>
 80021f4:	4645      	mov	r5, r8
 80021f6:	1a12      	subs	r2, r2, r0
 80021f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80021fc:	fb07 2210 	mls	r2, r7, r0, r2
 8002200:	fb0e fe00 	mul.w	lr, lr, r0
 8002204:	b2a4      	uxth	r4, r4
 8002206:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800220a:	45a6      	cmp	lr, r4
 800220c:	d908      	bls.n	8002220 <__udivmoddi4+0x150>
 800220e:	eb1c 0404 	adds.w	r4, ip, r4
 8002212:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002216:	d202      	bcs.n	800221e <__udivmoddi4+0x14e>
 8002218:	45a6      	cmp	lr, r4
 800221a:	f200 80b4 	bhi.w	8002386 <__udivmoddi4+0x2b6>
 800221e:	4610      	mov	r0, r2
 8002220:	eba4 040e 	sub.w	r4, r4, lr
 8002224:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002228:	e7a0      	b.n	800216c <__udivmoddi4+0x9c>
 800222a:	f1c1 0720 	rsb	r7, r1, #32
 800222e:	408b      	lsls	r3, r1
 8002230:	fa22 fc07 	lsr.w	ip, r2, r7
 8002234:	ea4c 0c03 	orr.w	ip, ip, r3
 8002238:	fa25 fa07 	lsr.w	sl, r5, r7
 800223c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002240:	fbba f8f9 	udiv	r8, sl, r9
 8002244:	408d      	lsls	r5, r1
 8002246:	fa20 f307 	lsr.w	r3, r0, r7
 800224a:	fb09 aa18 	mls	sl, r9, r8, sl
 800224e:	fa1f fe8c 	uxth.w	lr, ip
 8002252:	432b      	orrs	r3, r5
 8002254:	fa00 f501 	lsl.w	r5, r0, r1
 8002258:	fb08 f00e 	mul.w	r0, r8, lr
 800225c:	0c1c      	lsrs	r4, r3, #16
 800225e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8002262:	42a0      	cmp	r0, r4
 8002264:	fa02 f201 	lsl.w	r2, r2, r1
 8002268:	d90b      	bls.n	8002282 <__udivmoddi4+0x1b2>
 800226a:	eb1c 0404 	adds.w	r4, ip, r4
 800226e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002272:	f080 8086 	bcs.w	8002382 <__udivmoddi4+0x2b2>
 8002276:	42a0      	cmp	r0, r4
 8002278:	f240 8083 	bls.w	8002382 <__udivmoddi4+0x2b2>
 800227c:	f1a8 0802 	sub.w	r8, r8, #2
 8002280:	4464      	add	r4, ip
 8002282:	1a24      	subs	r4, r4, r0
 8002284:	b298      	uxth	r0, r3
 8002286:	fbb4 f3f9 	udiv	r3, r4, r9
 800228a:	fb09 4413 	mls	r4, r9, r3, r4
 800228e:	fb03 fe0e 	mul.w	lr, r3, lr
 8002292:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002296:	45a6      	cmp	lr, r4
 8002298:	d908      	bls.n	80022ac <__udivmoddi4+0x1dc>
 800229a:	eb1c 0404 	adds.w	r4, ip, r4
 800229e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80022a2:	d26a      	bcs.n	800237a <__udivmoddi4+0x2aa>
 80022a4:	45a6      	cmp	lr, r4
 80022a6:	d968      	bls.n	800237a <__udivmoddi4+0x2aa>
 80022a8:	3b02      	subs	r3, #2
 80022aa:	4464      	add	r4, ip
 80022ac:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80022b0:	fba0 9302 	umull	r9, r3, r0, r2
 80022b4:	eba4 040e 	sub.w	r4, r4, lr
 80022b8:	429c      	cmp	r4, r3
 80022ba:	46c8      	mov	r8, r9
 80022bc:	469e      	mov	lr, r3
 80022be:	d354      	bcc.n	800236a <__udivmoddi4+0x29a>
 80022c0:	d051      	beq.n	8002366 <__udivmoddi4+0x296>
 80022c2:	2e00      	cmp	r6, #0
 80022c4:	d067      	beq.n	8002396 <__udivmoddi4+0x2c6>
 80022c6:	ebb5 0308 	subs.w	r3, r5, r8
 80022ca:	eb64 040e 	sbc.w	r4, r4, lr
 80022ce:	40cb      	lsrs	r3, r1
 80022d0:	fa04 f707 	lsl.w	r7, r4, r7
 80022d4:	431f      	orrs	r7, r3
 80022d6:	40cc      	lsrs	r4, r1
 80022d8:	e9c6 7400 	strd	r7, r4, [r6]
 80022dc:	2100      	movs	r1, #0
 80022de:	e74a      	b.n	8002176 <__udivmoddi4+0xa6>
 80022e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80022e4:	f1c3 0020 	rsb	r0, r3, #32
 80022e8:	40c1      	lsrs	r1, r0
 80022ea:	409d      	lsls	r5, r3
 80022ec:	fa24 f000 	lsr.w	r0, r4, r0
 80022f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80022f4:	4328      	orrs	r0, r5
 80022f6:	fbb1 f5f7 	udiv	r5, r1, r7
 80022fa:	fb07 1115 	mls	r1, r7, r5, r1
 80022fe:	fa1f fe8c 	uxth.w	lr, ip
 8002302:	0c02      	lsrs	r2, r0, #16
 8002304:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002308:	fb05 f10e 	mul.w	r1, r5, lr
 800230c:	4291      	cmp	r1, r2
 800230e:	fa04 f403 	lsl.w	r4, r4, r3
 8002312:	d908      	bls.n	8002326 <__udivmoddi4+0x256>
 8002314:	eb1c 0202 	adds.w	r2, ip, r2
 8002318:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800231c:	d22f      	bcs.n	800237e <__udivmoddi4+0x2ae>
 800231e:	4291      	cmp	r1, r2
 8002320:	d92d      	bls.n	800237e <__udivmoddi4+0x2ae>
 8002322:	3d02      	subs	r5, #2
 8002324:	4462      	add	r2, ip
 8002326:	1a52      	subs	r2, r2, r1
 8002328:	fbb2 f1f7 	udiv	r1, r2, r7
 800232c:	fb07 2211 	mls	r2, r7, r1, r2
 8002330:	b280      	uxth	r0, r0
 8002332:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002336:	fb01 f20e 	mul.w	r2, r1, lr
 800233a:	4282      	cmp	r2, r0
 800233c:	d908      	bls.n	8002350 <__udivmoddi4+0x280>
 800233e:	eb1c 0000 	adds.w	r0, ip, r0
 8002342:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8002346:	d216      	bcs.n	8002376 <__udivmoddi4+0x2a6>
 8002348:	4282      	cmp	r2, r0
 800234a:	d914      	bls.n	8002376 <__udivmoddi4+0x2a6>
 800234c:	3902      	subs	r1, #2
 800234e:	4460      	add	r0, ip
 8002350:	1a80      	subs	r0, r0, r2
 8002352:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002356:	e73a      	b.n	80021ce <__udivmoddi4+0xfe>
 8002358:	4631      	mov	r1, r6
 800235a:	4630      	mov	r0, r6
 800235c:	e70b      	b.n	8002176 <__udivmoddi4+0xa6>
 800235e:	4671      	mov	r1, lr
 8002360:	e6e9      	b.n	8002136 <__udivmoddi4+0x66>
 8002362:	4610      	mov	r0, r2
 8002364:	e6fe      	b.n	8002164 <__udivmoddi4+0x94>
 8002366:	454d      	cmp	r5, r9
 8002368:	d2ab      	bcs.n	80022c2 <__udivmoddi4+0x1f2>
 800236a:	ebb9 0802 	subs.w	r8, r9, r2
 800236e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8002372:	3801      	subs	r0, #1
 8002374:	e7a5      	b.n	80022c2 <__udivmoddi4+0x1f2>
 8002376:	4641      	mov	r1, r8
 8002378:	e7ea      	b.n	8002350 <__udivmoddi4+0x280>
 800237a:	4603      	mov	r3, r0
 800237c:	e796      	b.n	80022ac <__udivmoddi4+0x1dc>
 800237e:	4645      	mov	r5, r8
 8002380:	e7d1      	b.n	8002326 <__udivmoddi4+0x256>
 8002382:	46d0      	mov	r8, sl
 8002384:	e77d      	b.n	8002282 <__udivmoddi4+0x1b2>
 8002386:	4464      	add	r4, ip
 8002388:	3802      	subs	r0, #2
 800238a:	e749      	b.n	8002220 <__udivmoddi4+0x150>
 800238c:	3d02      	subs	r5, #2
 800238e:	4462      	add	r2, ip
 8002390:	e731      	b.n	80021f6 <__udivmoddi4+0x126>
 8002392:	4608      	mov	r0, r1
 8002394:	e70a      	b.n	80021ac <__udivmoddi4+0xdc>
 8002396:	4631      	mov	r1, r6
 8002398:	e6ed      	b.n	8002176 <__udivmoddi4+0xa6>
 800239a:	bf00      	nop

0800239c <DMXReceiver::Run(short&)>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <DMXReceiver::Run(short&)+0x8c>)
 80023a0:	4607      	mov	r7, r0
 80023a2:	781e      	ldrb	r6, [r3, #0]
 80023a4:	460d      	mov	r5, r1
 80023a6:	b11e      	cbz	r6, 80023b0 <DMXReceiver::Run(short&)+0x14>
 80023a8:	2400      	movs	r4, #0
 80023aa:	802c      	strh	r4, [r5, #0]
 80023ac:	4620      	mov	r0, r4
 80023ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b0:	4631      	mov	r1, r6
 80023b2:	f001 fc65 	bl	8003c80 <Dmx::GetUpdatesPerSecond(unsigned int)>
 80023b6:	4604      	mov	r4, r0
 80023b8:	b998      	cbnz	r0, 80023e2 <DMXReceiver::Run(short&)+0x46>
 80023ba:	4e1c      	ldr	r6, [pc, #112]	; (800242c <DMXReceiver::Run(short&)+0x90>)
 80023bc:	7833      	ldrb	r3, [r6, #0]
 80023be:	b15b      	cbz	r3, 80023d8 <DMXReceiver::Run(short&)+0x3c>
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <DMXReceiver::Run(short&)+0x94>)
 80023c2:	4621      	mov	r1, r4
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4798      	blx	r3
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <DMXReceiver::Run(short&)+0x98>)
 80023ce:	2102      	movs	r1, #2
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	7034      	strb	r4, [r6, #0]
 80023d4:	f005 fe02 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	2400      	movs	r4, #0
 80023de:	802b      	strh	r3, [r5, #0]
 80023e0:	e7e4      	b.n	80023ac <DMXReceiver::Run(short&)+0x10>
 80023e2:	4631      	mov	r1, r6
 80023e4:	4638      	mov	r0, r7
 80023e6:	f001 fc37 	bl	8003c58 <Dmx::GetDmxAvailable(unsigned int)>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	d0dc      	beq.n	80023a8 <DMXReceiver::Run(short&)+0xc>
 80023ee:	4f10      	ldr	r7, [pc, #64]	; (8002430 <DMXReceiver::Run(short&)+0x94>)
 80023f0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80023f4:	1c44      	adds	r4, r0, #1
 80023f6:	6838      	ldr	r0, [r7, #0]
 80023f8:	802b      	strh	r3, [r5, #0]
 80023fa:	6802      	ldr	r2, [r0, #0]
 80023fc:	4631      	mov	r1, r6
 80023fe:	6915      	ldr	r5, [r2, #16]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4622      	mov	r2, r4
 8002404:	47a8      	blx	r5
 8002406:	4d09      	ldr	r5, [pc, #36]	; (800242c <DMXReceiver::Run(short&)+0x90>)
 8002408:	7829      	ldrb	r1, [r5, #0]
 800240a:	2900      	cmp	r1, #0
 800240c:	d1ce      	bne.n	80023ac <DMXReceiver::Run(short&)+0x10>
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	6803      	ldr	r3, [r0, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4798      	blx	r3
 8002416:	2301      	movs	r3, #1
 8002418:	702b      	strb	r3, [r5, #0]
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <DMXReceiver::Run(short&)+0x98>)
 800241c:	2103      	movs	r1, #3
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f005 fddc 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 8002424:	e7c2      	b.n	80023ac <DMXReceiver::Run(short&)+0x10>
 8002426:	bf00      	nop
 8002428:	20000208 	andcs	r0, r0, r8, lsl #4
 800242c:	20000200 	andcs	r0, r0, r0, lsl #4
 8002430:	20000204 	andcs	r0, r0, r4, lsl #4
 8002434:	200017d8 	ldrdcs	r1, [r0], -r8

08002438 <RDMResponder::HandleResponse(unsigned char*)>:
 8002438:	780a      	ldrb	r2, [r1, #0]
 800243a:	b510      	push	{r4, lr}
 800243c:	2acc      	cmp	r2, #204	; 0xcc
 800243e:	d107      	bne.n	8002450 <RDMResponder::HandleResponse(unsigned char*)+0x18>
 8002440:	788c      	ldrb	r4, [r1, #2]
 8002442:	2000      	movs	r0, #0
 8002444:	3402      	adds	r4, #2
 8002446:	4622      	mov	r2, r4
 8002448:	f001 fc7a 	bl	8003d40 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800244c:	4620      	mov	r0, r4
 800244e:	bd10      	pop	{r4, pc}
 8002450:	2afe      	cmp	r2, #254	; 0xfe
 8002452:	d105      	bne.n	8002460 <RDMResponder::HandleResponse(unsigned char*)+0x28>
 8002454:	2218      	movs	r2, #24
 8002456:	2000      	movs	r0, #0
 8002458:	f001 fc84 	bl	8003d64 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800245c:	2418      	movs	r4, #24
 800245e:	e7f5      	b.n	800244c <RDMResponder::HandleResponse(unsigned char*)+0x14>
 8002460:	f06f 0402 	mvn.w	r4, #2
 8002464:	e7f2      	b.n	800244c <RDMResponder::HandleResponse(unsigned char*)+0x14>
	...

08002468 <RDMResponder::Run()>:
 8002468:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800246a:	4604      	mov	r4, r0
 800246c:	f10d 0106 	add.w	r1, sp, #6
 8002470:	30cc      	adds	r0, #204	; 0xcc
 8002472:	f7ff ff93 	bl	800239c <DMXReceiver::Run(short&)>
 8002476:	4e1f      	ldr	r6, [pc, #124]	; (80024f4 <RDMResponder::Run()+0x8c>)
 8002478:	4601      	mov	r1, r0
 800247a:	6830      	ldr	r0, [r6, #0]
 800247c:	8883      	ldrh	r3, [r0, #4]
 800247e:	b153      	cbz	r3, 8002496 <RDMResponder::Run()+0x2e>
 8002480:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8002484:	1c53      	adds	r3, r2, #1
 8002486:	d120      	bne.n	80024ca <RDMResponder::Run()+0x62>
 8002488:	4d1b      	ldr	r5, [pc, #108]	; (80024f8 <RDMResponder::Run()+0x90>)
 800248a:	782b      	ldrb	r3, [r5, #0]
 800248c:	b11b      	cbz	r3, 8002496 <RDMResponder::Run()+0x2e>
 800248e:	f000 ff22 	bl	80032d6 <RDMSubDevices::Stop()>
 8002492:	2300      	movs	r3, #0
 8002494:	702b      	strb	r3, [r5, #0]
 8002496:	2000      	movs	r0, #0
 8002498:	f000 ffe0 	bl	800345c <Rdm::Receive(unsigned int)>
 800249c:	b198      	cbz	r0, 80024c6 <RDMResponder::Run()+0x5e>
 800249e:	7803      	ldrb	r3, [r0, #0]
 80024a0:	2bcc      	cmp	r3, #204	; 0xcc
 80024a2:	d120      	bne.n	80024e6 <RDMResponder::Run()+0x7e>
 80024a4:	7d03      	ldrb	r3, [r0, #20]
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d003      	beq.n	80024b2 <RDMResponder::Run()+0x4a>
 80024aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d11c      	bne.n	80024ec <RDMResponder::Run()+0x84>
 80024b2:	1c41      	adds	r1, r0, #1
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <RDMResponder::Run()+0x94>)
 80024b6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80024ba:	f002 fde1 	bl	8005080 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 80024be:	4620      	mov	r0, r4
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <RDMResponder::Run()+0x94>)
 80024c2:	f7ff ffb9 	bl	8002438 <RDMResponder::HandleResponse(unsigned char*)>
 80024c6:	b002      	add	sp, #8
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
 80024ca:	2900      	cmp	r1, #0
 80024cc:	d0e3      	beq.n	8002496 <RDMResponder::Run()+0x2e>
 80024ce:	4d0a      	ldr	r5, [pc, #40]	; (80024f8 <RDMResponder::Run()+0x90>)
 80024d0:	b292      	uxth	r2, r2
 80024d2:	f000 ff10 	bl	80032f6 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>
 80024d6:	782b      	ldrb	r3, [r5, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1dc      	bne.n	8002496 <RDMResponder::Run()+0x2e>
 80024dc:	6830      	ldr	r0, [r6, #0]
 80024de:	f000 feea 	bl	80032b6 <RDMSubDevices::Start()>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e7d6      	b.n	8002494 <RDMResponder::Run()+0x2c>
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ea:	e7ec      	b.n	80024c6 <RDMResponder::Run()+0x5e>
 80024ec:	f06f 0001 	mvn.w	r0, #1
 80024f0:	e7e9      	b.n	80024c6 <RDMResponder::Run()+0x5e>
 80024f2:	bf00      	nop
 80024f4:	200001fc 	strdcs	r0, [r0], -ip
 80024f8:	200001f3 	strdcs	r0, [r0], -r3
 80024fc:	200000f4 	strdcs	r0, [r0], -r4

08002500 <CpuTemperature::Initialize()>:
 8002500:	2001      	movs	r0, #1
 8002502:	4770      	bx	lr

08002504 <CpuTemperature::~CpuTemperature()>:
 8002504:	4770      	bx	lr

08002506 <CpuTemperature::GetValue()>:
 8002506:	b508      	push	{r3, lr}
 8002508:	f006 ffae 	bl	8009468 <gd32_adc_gettemp()>
 800250c:	f7fe fd2c 	bl	8000f68 <__aeabi_f2iz>
 8002510:	b200      	sxth	r0, r0
 8002512:	bd08      	pop	{r3, pc}

08002514 <CpuTemperature::~CpuTemperature()>:
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
 8002518:	f005 ffad 	bl	8008476 <operator delete(void*)>
 800251c:	4620      	mov	r0, r4
 800251e:	bd10      	pop	{r4, pc}

08002520 <RDMSensors::RDMSensors()>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	2600      	movs	r6, #0
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <RDMSensors::RDMSensors()+0x4c>)
 8002526:	4604      	mov	r4, r0
 8002528:	6018      	str	r0, [r3, #0]
 800252a:	6006      	str	r6, [r0, #0]
 800252c:	7106      	strb	r6, [r0, #4]
 800252e:	2040      	movs	r0, #64	; 0x40
 8002530:	f005 ffa7 	bl	8008482 <operator new[](unsigned int)>
 8002534:	6020      	str	r0, [r4, #0]
 8002536:	2040      	movs	r0, #64	; 0x40
 8002538:	f005 ffa1 	bl	800847e <operator new(unsigned int)>
 800253c:	4605      	mov	r5, r0
 800253e:	7921      	ldrb	r1, [r4, #4]
 8002540:	f000 fac8 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <RDMSensors::RDMSensors()+0x50>)
 8002546:	4628      	mov	r0, r5
 8002548:	602b      	str	r3, [r5, #0]
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <RDMSensors::RDMSensors()+0x54>)
 800254c:	490a      	ldr	r1, [pc, #40]	; (8002578 <RDMSensors::RDMSensors()+0x58>)
 800254e:	60ab      	str	r3, [r5, #8]
 8002550:	3354      	adds	r3, #84	; 0x54
 8002552:	60eb      	str	r3, [r5, #12]
 8002554:	2355      	movs	r3, #85	; 0x55
 8002556:	71ee      	strb	r6, [r5, #7]
 8002558:	822b      	strh	r3, [r5, #16]
 800255a:	f000 facd 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 800255e:	4629      	mov	r1, r5
 8002560:	4620      	mov	r0, r4
 8002562:	f000 f85b 	bl	800261c <RDMSensors::Add(RDMSensor*)>
 8002566:	4620      	mov	r0, r4
 8002568:	bd70      	pop	{r4, r5, r6, pc}
 800256a:	bf00      	nop
 800256c:	200001f8 	strdcs	r0, [r0], -r8
 8002570:	0800a0a0 	stmdaeq	r0, {r5, r7, sp, pc}
 8002574:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002578:	0800a091 	stmdaeq	r0, {r0, r4, r7, sp, pc}

0800257c <RDMSensors::~RDMSensors()>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	2500      	movs	r5, #0
 8002580:	4604      	mov	r4, r0
 8002582:	462e      	mov	r6, r5
 8002584:	7923      	ldrb	r3, [r4, #4]
 8002586:	6820      	ldr	r0, [r4, #0]
 8002588:	42ab      	cmp	r3, r5
 800258a:	d804      	bhi.n	8002596 <RDMSensors::~RDMSensors()+0x1a>
 800258c:	b108      	cbz	r0, 8002592 <RDMSensors::~RDMSensors()+0x16>
 800258e:	f005 ff74 	bl	800847a <operator delete[](void*)>
 8002592:	4620      	mov	r0, r4
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800259a:	b128      	cbz	r0, 80025a8 <RDMSensors::~RDMSensors()+0x2c>
 800259c:	6803      	ldr	r3, [r0, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4798      	blx	r3
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80025a8:	3501      	adds	r5, #1
 80025aa:	e7eb      	b.n	8002584 <RDMSensors::~RDMSensors()+0x8>

080025ac <RDMSensors::GetDefintion(unsigned char)>:
 80025ac:	6803      	ldr	r3, [r0, #0]
 80025ae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025b2:	3006      	adds	r0, #6
 80025b4:	4770      	bx	lr

080025b6 <RDMSensors::GetValues(unsigned char)>:
 80025b6:	6803      	ldr	r3, [r0, #0]
 80025b8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025bc:	f000 baaa 	b.w	8002b14 <RDMSensor::GetValues()>

080025c0 <RDMSensors::SetValues(unsigned char)>:
 80025c0:	29ff      	cmp	r1, #255	; 0xff
 80025c2:	b538      	push	{r3, r4, r5, lr}
 80025c4:	4604      	mov	r4, r0
 80025c6:	d010      	beq.n	80025ea <RDMSensors::SetValues(unsigned char)+0x2a>
 80025c8:	6803      	ldr	r3, [r0, #0]
 80025ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d2:	f000 bab4 	b.w	8002b3e <RDMSensor::SetValues()>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80025dc:	f000 faaf 	bl	8002b3e <RDMSensor::SetValues()>
 80025e0:	3501      	adds	r5, #1
 80025e2:	7923      	ldrb	r3, [r4, #4]
 80025e4:	42ab      	cmp	r3, r5
 80025e6:	d8f6      	bhi.n	80025d6 <RDMSensors::SetValues(unsigned char)+0x16>
 80025e8:	bd38      	pop	{r3, r4, r5, pc}
 80025ea:	2500      	movs	r5, #0
 80025ec:	e7f9      	b.n	80025e2 <RDMSensors::SetValues(unsigned char)+0x22>

080025ee <RDMSensors::SetRecord(unsigned char)>:
 80025ee:	29ff      	cmp	r1, #255	; 0xff
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4604      	mov	r4, r0
 80025f4:	d010      	beq.n	8002618 <RDMSensors::SetRecord(unsigned char)+0x2a>
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80025fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002600:	f000 baa7 	b.w	8002b52 <RDMSensor::Record()>
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800260a:	f000 faa2 	bl	8002b52 <RDMSensor::Record()>
 800260e:	3501      	adds	r5, #1
 8002610:	7923      	ldrb	r3, [r4, #4]
 8002612:	42ab      	cmp	r3, r5
 8002614:	d8f6      	bhi.n	8002604 <RDMSensors::SetRecord(unsigned char)+0x16>
 8002616:	bd38      	pop	{r3, r4, r5, pc}
 8002618:	2500      	movs	r5, #0
 800261a:	e7f9      	b.n	8002610 <RDMSensors::SetRecord(unsigned char)+0x22>

0800261c <RDMSensors::Add(RDMSensor*)>:
 800261c:	4603      	mov	r3, r0
 800261e:	6800      	ldr	r0, [r0, #0]
 8002620:	b510      	push	{r4, lr}
 8002622:	b148      	cbz	r0, 8002638 <RDMSensors::Add(RDMSensor*)+0x1c>
 8002624:	791a      	ldrb	r2, [r3, #4]
 8002626:	2a10      	cmp	r2, #16
 8002628:	bf1b      	ittet	ne
 800262a:	1c54      	addne	r4, r2, #1
 800262c:	711c      	strbne	r4, [r3, #4]
 800262e:	2000      	moveq	r0, #0
 8002630:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
 8002634:	bf18      	it	ne
 8002636:	2001      	movne	r0, #1
 8002638:	bd10      	pop	{r4, pc}

0800263a <RDMSensorBH170::Initialize()>:
 800263a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800263e:	4770      	bx	lr

08002640 <RDMSensorMCP9808::Initialize()>:
 8002640:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002644:	4770      	bx	lr

08002646 <RDMSensorHTU21DHumidity::Initialize()>:
 8002646:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800264a:	4770      	bx	lr

0800264c <RDMSensorHTU21DTemperature::Initialize()>:
 800264c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002650:	4770      	bx	lr

08002652 <RDMSensorINA219Current::Initialize()>:
 8002652:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002656:	4770      	bx	lr

08002658 <RDMSensorINA219Power::Initialize()>:
 8002658:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800265c:	4770      	bx	lr

0800265e <RDMSensorINA219Voltage::Initialize()>:
 800265e:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002662:	4770      	bx	lr

08002664 <RDMSensorSI7021Humidity::Initialize()>:
 8002664:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8002668:	4770      	bx	lr

0800266a <RDMSensorSI7021Temperature::Initialize()>:
 800266a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800266e:	4770      	bx	lr

08002670 <RDMSensorSI7021Temperature::GetValue()>:
 8002670:	b508      	push	{r3, lr}
 8002672:	3040      	adds	r0, #64	; 0x40
 8002674:	f000 fd7a 	bl	800316c <sensor::SI7021::GetTemperature()>
 8002678:	f7fe fc76 	bl	8000f68 <__aeabi_f2iz>
 800267c:	b200      	sxth	r0, r0
 800267e:	bd08      	pop	{r3, pc}

08002680 <RDMSensorSI7021Humidity::GetValue()>:
 8002680:	b508      	push	{r3, lr}
 8002682:	3040      	adds	r0, #64	; 0x40
 8002684:	f000 fd88 	bl	8003198 <sensor::SI7021::GetHumidity()>
 8002688:	f7fe fc6e 	bl	8000f68 <__aeabi_f2iz>
 800268c:	b200      	sxth	r0, r0
 800268e:	bd08      	pop	{r3, pc}

08002690 <RDMSensorINA219Voltage::GetValue()>:
 8002690:	b508      	push	{r3, lr}
 8002692:	3040      	adds	r0, #64	; 0x40
 8002694:	f000 fc74 	bl	8002f80 <sensor::INA219::GetBusVoltage()>
 8002698:	4903      	ldr	r1, [pc, #12]	; (80026a8 <RDMSensorINA219Voltage::GetValue()+0x18>)
 800269a:	f7fe fa9f 	bl	8000bdc <__aeabi_fmul>
 800269e:	f7fe fc63 	bl	8000f68 <__aeabi_f2iz>
 80026a2:	b200      	sxth	r0, r0
 80026a4:	bd08      	pop	{r3, pc}
 80026a6:	bf00      	nop
 80026a8:	447a0000 	ldrbtmi	r0, [sl], #-0

080026ac <RDMSensorINA219Power::GetValue()>:
 80026ac:	b508      	push	{r3, lr}
 80026ae:	3040      	adds	r0, #64	; 0x40
 80026b0:	f000 fc72 	bl	8002f98 <sensor::INA219::GetBusPower()>
 80026b4:	f7fe fc58 	bl	8000f68 <__aeabi_f2iz>
 80026b8:	b200      	sxth	r0, r0
 80026ba:	bd08      	pop	{r3, pc}

080026bc <RDMSensorINA219Current::GetValue()>:
 80026bc:	b508      	push	{r3, lr}
 80026be:	3040      	adds	r0, #64	; 0x40
 80026c0:	f000 fc46 	bl	8002f50 <sensor::INA219::GetShuntCurrent()>
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <RDMSensorINA219Current::GetValue()+0x18>)
 80026c6:	f7fe fa89 	bl	8000bdc <__aeabi_fmul>
 80026ca:	f7fe fc4d 	bl	8000f68 <__aeabi_f2iz>
 80026ce:	b200      	sxth	r0, r0
 80026d0:	bd08      	pop	{r3, pc}
 80026d2:	bf00      	nop
 80026d4:	447a0000 	ldrbtmi	r0, [sl], #-0

080026d8 <RDMSensorHTU21DTemperature::GetValue()>:
 80026d8:	b508      	push	{r3, lr}
 80026da:	3040      	adds	r0, #64	; 0x40
 80026dc:	f000 fb14 	bl	8002d08 <sensor::HTU21D::GetTemperature()>
 80026e0:	f7fe fc42 	bl	8000f68 <__aeabi_f2iz>
 80026e4:	b200      	sxth	r0, r0
 80026e6:	bd08      	pop	{r3, pc}

080026e8 <RDMSensorHTU21DHumidity::GetValue()>:
 80026e8:	b508      	push	{r3, lr}
 80026ea:	3040      	adds	r0, #64	; 0x40
 80026ec:	f000 fb22 	bl	8002d34 <sensor::HTU21D::GetHumidity()>
 80026f0:	f7fe fc3a 	bl	8000f68 <__aeabi_f2iz>
 80026f4:	b200      	sxth	r0, r0
 80026f6:	bd08      	pop	{r3, pc}

080026f8 <RDMSensorMCP9808::GetValue()>:
 80026f8:	b508      	push	{r3, lr}
 80026fa:	3040      	adds	r0, #64	; 0x40
 80026fc:	f000 fcbc 	bl	8003078 <sensor::MCP9808::Get()>
 8002700:	f7fe fc32 	bl	8000f68 <__aeabi_f2iz>
 8002704:	b200      	sxth	r0, r0
 8002706:	bd08      	pop	{r3, pc}

08002708 <RDMSensorBH170::GetValue()>:
 8002708:	b508      	push	{r3, lr}
 800270a:	3040      	adds	r0, #64	; 0x40
 800270c:	f000 fa7a 	bl	8002c04 <sensor::BH170::Get()>
 8002710:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002714:	bd08      	pop	{r3, pc}

08002716 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002716:	4770      	bx	lr

08002718 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
 8002718:	b510      	push	{r4, lr}
 800271a:	4604      	mov	r4, r0
 800271c:	f005 feab 	bl	8008476 <operator delete(void*)>
 8002720:	4620      	mov	r0, r4
 8002722:	bd10      	pop	{r4, pc}

08002724 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002724:	4770      	bx	lr

08002726 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
 8002726:	b510      	push	{r4, lr}
 8002728:	4604      	mov	r4, r0
 800272a:	f005 fea4 	bl	8008476 <operator delete(void*)>
 800272e:	4620      	mov	r0, r4
 8002730:	bd10      	pop	{r4, pc}

08002732 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002732:	4770      	bx	lr

08002734 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
 8002734:	b510      	push	{r4, lr}
 8002736:	4604      	mov	r4, r0
 8002738:	f005 fe9d 	bl	8008476 <operator delete(void*)>
 800273c:	4620      	mov	r0, r4
 800273e:	bd10      	pop	{r4, pc}

08002740 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002740:	4770      	bx	lr

08002742 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
 8002742:	b510      	push	{r4, lr}
 8002744:	4604      	mov	r4, r0
 8002746:	f005 fe96 	bl	8008476 <operator delete(void*)>
 800274a:	4620      	mov	r0, r4
 800274c:	bd10      	pop	{r4, pc}

0800274e <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 800274e:	4770      	bx	lr

08002750 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
 8002750:	b510      	push	{r4, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	f005 fe8f 	bl	8008476 <operator delete(void*)>
 8002758:	4620      	mov	r0, r4
 800275a:	bd10      	pop	{r4, pc}

0800275c <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800275c:	4770      	bx	lr

0800275e <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
 8002762:	f005 fe88 	bl	8008476 <operator delete(void*)>
 8002766:	4620      	mov	r0, r4
 8002768:	bd10      	pop	{r4, pc}

0800276a <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800276a:	4770      	bx	lr

0800276c <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
 800276c:	b510      	push	{r4, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	f005 fe81 	bl	8008476 <operator delete(void*)>
 8002774:	4620      	mov	r0, r4
 8002776:	bd10      	pop	{r4, pc}

08002778 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 8002778:	4770      	bx	lr

0800277a <RDMSensorMCP9808::~RDMSensorMCP9808()>:
 800277a:	b510      	push	{r4, lr}
 800277c:	4604      	mov	r4, r0
 800277e:	f005 fe7a 	bl	8008476 <operator delete(void*)>
 8002782:	4620      	mov	r0, r4
 8002784:	bd10      	pop	{r4, pc}

08002786 <RDMSensorBH170::~RDMSensorBH170()>:
 8002786:	4770      	bx	lr

08002788 <RDMSensorBH170::~RDMSensorBH170()>:
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
 800278c:	f005 fe73 	bl	8008476 <operator delete(void*)>
 8002790:	4620      	mov	r0, r4
 8002792:	bd10      	pop	{r4, pc}

08002794 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
 8002794:	6001      	str	r1, [r0, #0]
 8002796:	4770      	bx	lr

08002798 <RDMSensorsParams::Load()>:
 8002798:	b508      	push	{r3, lr}
 800279a:	2300      	movs	r3, #0
 800279c:	4601      	mov	r1, r0
 800279e:	6043      	str	r3, [r0, #4]
 80027a0:	6800      	ldr	r0, [r0, #0]
 80027a2:	b120      	cbz	r0, 80027ae <RDMSensorsParams::Load()+0x16>
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	3104      	adds	r1, #4
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4798      	blx	r3
 80027ac:	2001      	movs	r0, #1
 80027ae:	bd08      	pop	{r3, pc}

080027b0 <RDMSensorsParams::Dump()>:
 80027b0:	4770      	bx	lr
	...

080027b4 <RDMSensorsParams::Add(RDMSensor*)>:
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	680b      	ldr	r3, [r1, #0]
 80027b8:	4608      	mov	r0, r1
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	460c      	mov	r4, r1
 80027be:	4798      	blx	r3
 80027c0:	4605      	mov	r5, r0
 80027c2:	b130      	cbz	r0, 80027d2 <RDMSensorsParams::Add(RDMSensor*)+0x1e>
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <RDMSensorsParams::Add(RDMSensor*)+0x28>)
 80027c6:	4621      	mov	r1, r4
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f7ff ff27 	bl	800261c <RDMSensors::Add(RDMSensor*)>
 80027ce:	4628      	mov	r0, r5
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	4620      	mov	r0, r4
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4798      	blx	r3
 80027da:	e7f8      	b.n	80027ce <RDMSensorsParams::Add(RDMSensor*)+0x1a>
 80027dc:	200001f8 	strdcs	r0, [r0], -r8

080027e0 <RDMSensorsParams::Set()>:
 80027e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	4605      	mov	r5, r0
 80027e6:	4607      	mov	r7, r0
 80027e8:	f04f 0800 	mov.w	r8, #0
 80027ec:	f8df b278 	ldr.w	fp, [pc, #632]	; 8002a68 <RDMSensorsParams::Set()+0x288>
 80027f0:	686b      	ldr	r3, [r5, #4]
 80027f2:	4543      	cmp	r3, r8
 80027f4:	d801      	bhi.n	80027fa <RDMSensorsParams::Set()+0x1a>
 80027f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027fa:	4b9c      	ldr	r3, [pc, #624]	; (8002a6c <RDMSensorsParams::Set()+0x28c>)
 80027fc:	7a7e      	ldrb	r6, [r7, #9]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	791c      	ldrb	r4, [r3, #4]
 8002802:	7a3b      	ldrb	r3, [r7, #8]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d827      	bhi.n	8002858 <RDMSensorsParams::Set()+0x78>
 8002808:	e8df f013 	tbh	[pc, r3, lsl #1]
 800280c:	002a0005 	eoreq	r0, sl, r5
 8002810:	00d5006b 	sbcseq	r0, r5, fp, rrx
 8002814:	204c00f0 	strdcs	r0, [ip], #-0
 8002818:	f005 fe31 	bl	800847e <operator new(unsigned int)>
 800281c:	4681      	mov	r9, r0
 800281e:	4621      	mov	r1, r4
 8002820:	f000 f958 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 8002824:	4631      	mov	r1, r6
 8002826:	f109 0040 	add.w	r0, r9, #64	; 0x40
 800282a:	f000 f9b7 	bl	8002b9c <sensor::BH170::BH170(unsigned char)>
 800282e:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <RDMSensorsParams::Set()+0x290>)
 8002830:	241a      	movs	r4, #26
 8002832:	f8c9 3000 	str.w	r3, [r9]
 8002836:	2318      	movs	r3, #24
 8002838:	f889 3007 	strb.w	r3, [r9, #7]
 800283c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002840:	e9c9 4302 	strd	r4, r3, [r9, #8]
 8002844:	498b      	ldr	r1, [pc, #556]	; (8002a74 <RDMSensorsParams::Set()+0x294>)
 8002846:	f8a9 3010 	strh.w	r3, [r9, #16]
 800284a:	4648      	mov	r0, r9
 800284c:	f000 f954 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 8002850:	4649      	mov	r1, r9
 8002852:	4628      	mov	r0, r5
 8002854:	f7ff ffae 	bl	80027b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002858:	f108 0801 	add.w	r8, r8, #1
 800285c:	3703      	adds	r7, #3
 800285e:	e7c7      	b.n	80027f0 <RDMSensorsParams::Set()+0x10>
 8002860:	204c      	movs	r0, #76	; 0x4c
 8002862:	f005 fe0c 	bl	800847e <operator new(unsigned int)>
 8002866:	4682      	mov	sl, r0
 8002868:	4621      	mov	r1, r4
 800286a:	f000 f933 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 800286e:	4631      	mov	r1, r6
 8002870:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002874:	f000 f9e6 	bl	8002c44 <sensor::HTU21D::HTU21D(unsigned char)>
 8002878:	4a7f      	ldr	r2, [pc, #508]	; (8002a78 <RDMSensorsParams::Set()+0x298>)
 800287a:	f04f 0900 	mov.w	r9, #0
 800287e:	f8ca 2000 	str.w	r2, [sl]
 8002882:	221f      	movs	r2, #31
 8002884:	f88a 2007 	strb.w	r2, [sl, #7]
 8002888:	2264      	movs	r2, #100	; 0x64
 800288a:	4650      	mov	r0, sl
 800288c:	497b      	ldr	r1, [pc, #492]	; (8002a7c <RDMSensorsParams::Set()+0x29c>)
 800288e:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002892:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002896:	f000 f92f 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 800289a:	4651      	mov	r1, sl
 800289c:	4628      	mov	r0, r5
 800289e:	f7ff ff89 	bl	80027b4 <RDMSensorsParams::Add(RDMSensor*)>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	d0d8      	beq.n	8002858 <RDMSensorsParams::Set()+0x78>
 80028a6:	204c      	movs	r0, #76	; 0x4c
 80028a8:	f005 fde9 	bl	800847e <operator new(unsigned int)>
 80028ac:	4682      	mov	sl, r0
 80028ae:	1c61      	adds	r1, r4, #1
 80028b0:	b2c9      	uxtb	r1, r1
 80028b2:	f000 f90f 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 80028b6:	4631      	mov	r1, r6
 80028b8:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80028bc:	f000 f9c2 	bl	8002c44 <sensor::HTU21D::HTU21D(unsigned char)>
 80028c0:	4a6f      	ldr	r2, [pc, #444]	; (8002a80 <RDMSensorsParams::Set()+0x2a0>)
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <RDMSensorsParams::Set()+0x2a4>)
 80028c4:	f8ca 2000 	str.w	r2, [sl]
 80028c8:	227d      	movs	r2, #125	; 0x7d
 80028ca:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 80028ce:	496e      	ldr	r1, [pc, #440]	; (8002a88 <RDMSensorsParams::Set()+0x2a8>)
 80028d0:	f88a 9007 	strb.w	r9, [sl, #7]
 80028d4:	f8aa 2010 	strh.w	r2, [sl, #16]
 80028d8:	4650      	mov	r0, sl
 80028da:	f000 f90d 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 80028de:	4651      	mov	r1, sl
 80028e0:	e7b7      	b.n	8002852 <RDMSensorsParams::Set()+0x72>
 80028e2:	2060      	movs	r0, #96	; 0x60
 80028e4:	f005 fdcb 	bl	800847e <operator new(unsigned int)>
 80028e8:	4682      	mov	sl, r0
 80028ea:	4621      	mov	r1, r4
 80028ec:	f000 f8f2 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 80028f0:	4631      	mov	r1, r6
 80028f2:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 80028f6:	f000 faeb 	bl	8002ed0 <sensor::INA219::INA219(unsigned char)>
 80028fa:	4a64      	ldr	r2, [pc, #400]	; (8002a8c <RDMSensorsParams::Set()+0x2ac>)
 80028fc:	f04f 0902 	mov.w	r9, #2
 8002900:	f8ca 2000 	str.w	r2, [sl]
 8002904:	4a62      	ldr	r2, [pc, #392]	; (8002a90 <RDMSensorsParams::Set()+0x2b0>)
 8002906:	4650      	mov	r0, sl
 8002908:	f8ca 2008 	str.w	r2, [sl, #8]
 800290c:	f202 42cb 	addw	r2, r2, #1227	; 0x4cb
 8002910:	f8ca 200c 	str.w	r2, [sl, #12]
 8002914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002918:	495e      	ldr	r1, [pc, #376]	; (8002a94 <RDMSensorsParams::Set()+0x2b4>)
 800291a:	f88a 9007 	strb.w	r9, [sl, #7]
 800291e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002922:	f000 f8e9 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 8002926:	4651      	mov	r1, sl
 8002928:	4628      	mov	r0, r5
 800292a:	f7ff ff43 	bl	80027b4 <RDMSensorsParams::Add(RDMSensor*)>
 800292e:	2800      	cmp	r0, #0
 8002930:	d092      	beq.n	8002858 <RDMSensorsParams::Set()+0x78>
 8002932:	2060      	movs	r0, #96	; 0x60
 8002934:	f005 fda3 	bl	800847e <operator new(unsigned int)>
 8002938:	4682      	mov	sl, r0
 800293a:	1c61      	adds	r1, r4, #1
 800293c:	b2c9      	uxtb	r1, r1
 800293e:	f000 f8c9 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 8002942:	4631      	mov	r1, r6
 8002944:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002948:	f000 fac2 	bl	8002ed0 <sensor::INA219::INA219(unsigned char)>
 800294c:	f46f 7131 	mvn.w	r1, #708	; 0x2c4
 8002950:	4a51      	ldr	r2, [pc, #324]	; (8002a98 <RDMSensorsParams::Set()+0x2b8>)
 8002952:	4650      	mov	r0, sl
 8002954:	f8ca 2000 	str.w	r2, [sl]
 8002958:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <RDMSensorsParams::Set()+0x2bc>)
 800295a:	f88a 9007 	strb.w	r9, [sl, #7]
 800295e:	f8ca 2008 	str.w	r2, [sl, #8]
 8002962:	440a      	add	r2, r1
 8002964:	f8ca 200c 	str.w	r2, [sl, #12]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <RDMSensorsParams::Set()+0x2c0>)
 800296c:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002970:	f000 f8c2 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 8002974:	4651      	mov	r1, sl
 8002976:	4628      	mov	r0, r5
 8002978:	f7ff ff1c 	bl	80027b4 <RDMSensorsParams::Add(RDMSensor*)>
 800297c:	2060      	movs	r0, #96	; 0x60
 800297e:	f005 fd7e 	bl	800847e <operator new(unsigned int)>
 8002982:	4682      	mov	sl, r0
 8002984:	eb04 0109 	add.w	r1, r4, r9
 8002988:	b2c9      	uxtb	r1, r1
 800298a:	f000 f8a3 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 800298e:	4631      	mov	r1, r6
 8002990:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002994:	f000 fa9c 	bl	8002ed0 <sensor::INA219::INA219(unsigned char)>
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <RDMSensorsParams::Set()+0x2c4>)
 800299a:	4843      	ldr	r0, [pc, #268]	; (8002aa8 <RDMSensorsParams::Set()+0x2c8>)
 800299c:	f8ca 2000 	str.w	r2, [sl]
 80029a0:	4a42      	ldr	r2, [pc, #264]	; (8002aac <RDMSensorsParams::Set()+0x2cc>)
 80029a2:	4943      	ldr	r1, [pc, #268]	; (8002ab0 <RDMSensorsParams::Set()+0x2d0>)
 80029a4:	e9ca 0202 	strd	r0, r2, [sl, #8]
 80029a8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80029ac:	f88a 9007 	strb.w	r9, [sl, #7]
 80029b0:	f8aa 2010 	strh.w	r2, [sl, #16]
 80029b4:	e790      	b.n	80028d8 <RDMSensorsParams::Set()+0xf8>
 80029b6:	204c      	movs	r0, #76	; 0x4c
 80029b8:	f005 fd61 	bl	800847e <operator new(unsigned int)>
 80029bc:	4681      	mov	r9, r0
 80029be:	4621      	mov	r1, r4
 80029c0:	f000 f888 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 80029c4:	4631      	mov	r1, r6
 80029c6:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80029ca:	f000 fb17 	bl	8002ffc <sensor::MCP9808::MCP9808(unsigned char)>
 80029ce:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <RDMSensorsParams::Set()+0x2d4>)
 80029d0:	4a39      	ldr	r2, [pc, #228]	; (8002ab8 <RDMSensorsParams::Set()+0x2d8>)
 80029d2:	f8c9 3000 	str.w	r3, [r9]
 80029d6:	2300      	movs	r3, #0
 80029d8:	f889 3007 	strb.w	r3, [r9, #7]
 80029dc:	4b37      	ldr	r3, [pc, #220]	; (8002abc <RDMSensorsParams::Set()+0x2dc>)
 80029de:	4938      	ldr	r1, [pc, #224]	; (8002ac0 <RDMSensorsParams::Set()+0x2e0>)
 80029e0:	e9c9 2302 	strd	r2, r3, [r9, #8]
 80029e4:	2328      	movs	r3, #40	; 0x28
 80029e6:	f8a9 3010 	strh.w	r3, [r9, #16]
 80029ea:	e72e      	b.n	800284a <RDMSensorsParams::Set()+0x6a>
 80029ec:	204c      	movs	r0, #76	; 0x4c
 80029ee:	f005 fd46 	bl	800847e <operator new(unsigned int)>
 80029f2:	4682      	mov	sl, r0
 80029f4:	4621      	mov	r1, r4
 80029f6:	f000 f86d 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 80029fa:	4631      	mov	r1, r6
 80029fc:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002a00:	f000 fb52 	bl	80030a8 <sensor::SI7021::SI7021(unsigned char)>
 8002a04:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <RDMSensorsParams::Set()+0x2e4>)
 8002a06:	f04f 0900 	mov.w	r9, #0
 8002a0a:	f8ca 2000 	str.w	r2, [sl]
 8002a0e:	221f      	movs	r2, #31
 8002a10:	f88a 2007 	strb.w	r2, [sl, #7]
 8002a14:	2264      	movs	r2, #100	; 0x64
 8002a16:	4650      	mov	r0, sl
 8002a18:	492b      	ldr	r1, [pc, #172]	; (8002ac8 <RDMSensorsParams::Set()+0x2e8>)
 8002a1a:	e9ca 9202 	strd	r9, r2, [sl, #8]
 8002a1e:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a22:	f000 f869 	bl	8002af8 <RDMSensor::SetDescription(char const*)>
 8002a26:	4651      	mov	r1, sl
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f7ff fec3 	bl	80027b4 <RDMSensorsParams::Add(RDMSensor*)>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	f43f af12 	beq.w	8002858 <RDMSensorsParams::Set()+0x78>
 8002a34:	204c      	movs	r0, #76	; 0x4c
 8002a36:	f005 fd22 	bl	800847e <operator new(unsigned int)>
 8002a3a:	4682      	mov	sl, r0
 8002a3c:	1c61      	adds	r1, r4, #1
 8002a3e:	b2c9      	uxtb	r1, r1
 8002a40:	f000 f848 	bl	8002ad4 <RDMSensor::RDMSensor(unsigned char)>
 8002a44:	4631      	mov	r1, r6
 8002a46:	f10a 0040 	add.w	r0, sl, #64	; 0x40
 8002a4a:	f000 fb2d 	bl	80030a8 <sensor::SI7021::SI7021(unsigned char)>
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <RDMSensorsParams::Set()+0x2ec>)
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <RDMSensorsParams::Set()+0x2a4>)
 8002a52:	f8ca 2000 	str.w	r2, [sl]
 8002a56:	227d      	movs	r2, #125	; 0x7d
 8002a58:	e9ca 3b02 	strd	r3, fp, [sl, #8]
 8002a5c:	491c      	ldr	r1, [pc, #112]	; (8002ad0 <RDMSensorsParams::Set()+0x2f0>)
 8002a5e:	f88a 9007 	strb.w	r9, [sl, #7]
 8002a62:	f8aa 2010 	strh.w	r2, [sl, #16]
 8002a66:	e737      	b.n	80028d8 <RDMSensorsParams::Set()+0xf8>
 8002a68:	ffd8007d 			; <UNDEFINED> instruction: 0xffd8007d
 8002a6c:	200001f8 	strdcs	r0, [r0], -r8
 8002a70:	0800a0b8 	stmdaeq	r0, {r3, r4, r5, r7, sp, pc}
 8002a74:	0800a188 	stmdaeq	r0, {r3, r7, r8, sp, pc}
 8002a78:	0800a0e8 	stmdaeq	r0, {r3, r5, r6, r7, sp, pc}
 8002a7c:	0800a1aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sp, pc}
 8002a80:	0800a100 	stmdaeq	r0, {r8, sp, pc}
 8002a84:	ffd80001 			; <UNDEFINED> instruction: 0xffd80001
 8002a88:	0800a196 	stmdaeq	r0, {r1, r2, r4, r7, r8, sp, pc}
 8002a8c:	0800a118 	stmdaeq	r0, {r3, r4, r8, sp, pc}
 8002a90:	f8300305 			; <UNDEFINED> instruction: 0xf8300305
 8002a94:	0800a1c2 	stmdaeq	r0, {r1, r6, r7, r8, sp, pc}
 8002a98:	0800a130 	stmdaeq	r0, {r4, r5, r8, sp, pc}
 8002a9c:	ffc00305 			; <UNDEFINED> instruction: 0xffc00305
 8002aa0:	0800a1bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, sp, pc}
 8002aa4:	0800a148 	stmdaeq	r0, {r3, r6, r8, sp, pc}
 8002aa8:	83000305 	movwhi	r0, #773	; 0x305
 8002aac:	83007d00 	movwhi	r7, #3328	; 0xd00
 8002ab0:	0800a1ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sp, pc}
 8002ab4:	0800a0d0 	stmdaeq	r0, {r4, r6, r7, sp, pc}
 8002ab8:	ffec0001 			; <UNDEFINED> instruction: 0xffec0001
 8002abc:	00120064 	andseq	r0, r2, r4, rrx
 8002ac0:	0800a1f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sp, pc}
 8002ac4:	0800a160 	stmdaeq	r0, {r5, r6, r8, sp, pc}
 8002ac8:	0800a1e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, sp, pc}
 8002acc:	0800a178 	stmdaeq	r0, {r3, r4, r5, r6, r8, sp, pc}
 8002ad0:	0800a1d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sp, pc}

08002ad4 <RDMSensor::RDMSensor(unsigned char)>:
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <RDMSensor::RDMSensor(unsigned char)+0x20>)
 8002ad6:	7101      	strb	r1, [r0, #4]
 8002ad8:	6002      	str	r2, [r0, #0]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
 8002ae0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002ae4:	86c2      	strh	r2, [r0, #54]	; 0x36
 8002ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aea:	7181      	strb	r1, [r0, #6]
 8002aec:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8002af0:	8702      	strh	r2, [r0, #56]	; 0x38
 8002af2:	4770      	bx	lr
 8002af4:	0800a214 	stmdaeq	r0, {r2, r4, r9, sp, pc}

08002af8 <RDMSensor::SetDescription(char const*)>:
 8002af8:	2300      	movs	r3, #0
 8002afa:	b510      	push	{r4, lr}
 8002afc:	f100 0412 	add.w	r4, r0, #18
 8002b00:	5cca      	ldrb	r2, [r1, r3]
 8002b02:	b122      	cbz	r2, 8002b0e <RDMSensor::SetDescription(char const*)+0x16>
 8002b04:	3301      	adds	r3, #1
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	f804 2b01 	strb.w	r2, [r4], #1
 8002b0c:	d1f8      	bne.n	8002b00 <RDMSensor::SetDescription(char const*)+0x8>
 8002b0e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <RDMSensor::GetValues()>:
 8002b14:	6803      	ldr	r3, [r0, #0]
 8002b16:	b510      	push	{r4, lr}
 8002b18:	4604      	mov	r4, r0
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4798      	blx	r3
 8002b1e:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002b22:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b24:	4283      	cmp	r3, r0
 8002b26:	bfa8      	it	ge
 8002b28:	4603      	movge	r3, r0
 8002b2a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b2c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002b30:	4283      	cmp	r3, r0
 8002b32:	bfb8      	it	lt
 8002b34:	4603      	movlt	r3, r0
 8002b36:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002b3a:	8723      	strh	r3, [r4, #56]	; 0x38
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <RDMSensor::SetValues()>:
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	b510      	push	{r4, lr}
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4604      	mov	r4, r0
 8002b46:	4798      	blx	r3
 8002b48:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b4a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8002b4c:	8720      	strh	r0, [r4, #56]	; 0x38
 8002b4e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002b50:	bd10      	pop	{r4, pc}

08002b52 <RDMSensor::Record()>:
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4798      	blx	r3
 8002b5c:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
 8002b60:	86a0      	strh	r0, [r4, #52]	; 0x34
 8002b62:	4283      	cmp	r3, r0
 8002b64:	bfa8      	it	ge
 8002b66:	4603      	movge	r3, r0
 8002b68:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002b6a:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	; 0x38
 8002b6e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8002b70:	4283      	cmp	r3, r0
 8002b72:	bfb8      	it	lt
 8002b74:	4603      	movlt	r3, r0
 8002b76:	8723      	strh	r3, [r4, #56]	; 0x38
 8002b78:	bd10      	pop	{r4, pc}

08002b7a <HAL_I2C::Write(char)>:
 8002b7a:	b513      	push	{r0, r1, r4, lr}
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	7800      	ldrb	r0, [r0, #0]
 8002b80:	f88d 1007 	strb.w	r1, [sp, #7]
 8002b84:	f006 fd00 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002b88:	6860      	ldr	r0, [r4, #4]
 8002b8a:	f006 fcf5 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002b8e:	2101      	movs	r1, #1
 8002b90:	f10d 0007 	add.w	r0, sp, #7
 8002b94:	f006 fcfe 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd10      	pop	{r4, pc}

08002b9c <sensor::BH170::BH170(unsigned char)>:
 8002b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b9e:	1e0c      	subs	r4, r1, #0
 8002ba0:	bf08      	it	eq
 8002ba2:	2423      	moveq	r4, #35	; 0x23
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	4f16      	ldr	r7, [pc, #88]	; (8002c00 <sensor::BH170::BH170(unsigned char)+0x64>)
 8002ba8:	7004      	strb	r4, [r0, #0]
 8002baa:	6047      	str	r7, [r0, #4]
 8002bac:	7206      	strb	r6, [r0, #8]
 8002bae:	4605      	mov	r5, r0
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f006 fce9 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f006 fcde 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002bbc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d902      	bls.n	8002bca <sensor::BH170::BH170(unsigned char)+0x2e>
 8002bc4:	3c50      	subs	r4, #80	; 0x50
 8002bc6:	2c0f      	cmp	r4, #15
 8002bc8:	d814      	bhi.n	8002bf4 <sensor::BH170::BH170(unsigned char)+0x58>
 8002bca:	2101      	movs	r1, #1
 8002bcc:	f10d 0007 	add.w	r0, sp, #7
 8002bd0:	f006 fd46 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002bd4:	fab0 f080 	clz	r0, r0
 8002bd8:	0940      	lsrs	r0, r0, #5
 8002bda:	7228      	strb	r0, [r5, #8]
 8002bdc:	b138      	cbz	r0, 8002bee <sensor::BH170::BH170(unsigned char)+0x52>
 8002bde:	2101      	movs	r1, #1
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff ffca 	bl	8002b7a <HAL_I2C::Write(char)>
 8002be6:	2110      	movs	r1, #16
 8002be8:	4628      	mov	r0, r5
 8002bea:	f7ff ffc6 	bl	8002b7a <HAL_I2C::Write(char)>
 8002bee:	4628      	mov	r0, r5
 8002bf0:	b003      	add	sp, #12
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	4631      	mov	r1, r6
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	f006 fccc 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002bfc:	e7ea      	b.n	8002bd4 <sensor::BH170::BH170(unsigned char)+0x38>
 8002bfe:	bf00      	nop
 8002c00:	00061a80 	andeq	r1, r6, r0, lsl #21

08002c04 <sensor::BH170::Get()>:
 8002c04:	b513      	push	{r0, r1, r4, lr}
 8002c06:	2300      	movs	r3, #0
 8002c08:	4604      	mov	r4, r0
 8002c0a:	7800      	ldrb	r0, [r0, #0]
 8002c0c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002c10:	f006 fcba 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002c14:	6860      	ldr	r0, [r4, #4]
 8002c16:	f006 fcaf 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	a801      	add	r0, sp, #4
 8002c1e:	f006 fd1f 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002c22:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c26:	ba40      	rev16	r0, r0
 8002c28:	b280      	uxth	r0, r0
 8002c2a:	f7fd ff7f 	bl	8000b2c <__aeabi_ui2f>
 8002c2e:	4904      	ldr	r1, [pc, #16]	; (8002c40 <sensor::BH170::Get()+0x3c>)
 8002c30:	f7fe f888 	bl	8000d44 <__aeabi_fdiv>
 8002c34:	f7fe f9be 	bl	8000fb4 <__aeabi_f2uiz>
 8002c38:	b280      	uxth	r0, r0
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	bf00      	nop
 8002c40:	3f99999a 	svccc	0x0099999a

08002c44 <sensor::HTU21D::HTU21D(unsigned char)>:
 8002c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c46:	1e0c      	subs	r4, r1, #0
 8002c48:	bf08      	it	eq
 8002c4a:	2440      	moveq	r4, #64	; 0x40
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	4f11      	ldr	r7, [pc, #68]	; (8002c94 <sensor::HTU21D::HTU21D(unsigned char)+0x50>)
 8002c50:	7004      	strb	r4, [r0, #0]
 8002c52:	6047      	str	r7, [r0, #4]
 8002c54:	7206      	strb	r6, [r0, #8]
 8002c56:	4605      	mov	r5, r0
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f006 fc95 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002c5e:	4638      	mov	r0, r7
 8002c60:	f006 fc8a 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002c64:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002c68:	2b07      	cmp	r3, #7
 8002c6a:	d902      	bls.n	8002c72 <sensor::HTU21D::HTU21D(unsigned char)+0x2e>
 8002c6c:	3c50      	subs	r4, #80	; 0x50
 8002c6e:	2c0f      	cmp	r4, #15
 8002c70:	d80b      	bhi.n	8002c8a <sensor::HTU21D::HTU21D(unsigned char)+0x46>
 8002c72:	2101      	movs	r1, #1
 8002c74:	f10d 0007 	add.w	r0, sp, #7
 8002c78:	f006 fcf2 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002c7c:	fab0 f380 	clz	r3, r0
 8002c80:	4628      	mov	r0, r5
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	722b      	strb	r3, [r5, #8]
 8002c86:	b003      	add	sp, #12
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8a:	4631      	mov	r1, r6
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f006 fc81 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002c92:	e7f3      	b.n	8002c7c <sensor::HTU21D::HTU21D(unsigned char)+0x38>
 8002c94:	00061a80 	andeq	r1, r6, r0, lsl #21

08002c98 <sensor::HTU21D::ReadRaw(unsigned char)>:
 8002c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	7800      	ldrb	r0, [r0, #0]
 8002c9e:	f88d 1004 	strb.w	r1, [sp, #4]
 8002ca2:	f006 fc71 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002ca6:	6860      	ldr	r0, [r4, #4]
 8002ca8:	f006 fc66 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002cac:	2101      	movs	r1, #1
 8002cae:	a801      	add	r0, sp, #4
 8002cb0:	f006 fc70 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <sensor::HTU21D::ReadRaw(unsigned char)+0x6c>)
 8002cb6:	2508      	movs	r5, #8
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f88d 3006 	strb.w	r3, [sp, #6]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8002cca:	f006 ff11 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8002cce:	7820      	ldrb	r0, [r4, #0]
 8002cd0:	f006 fc5a 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002cd4:	6860      	ldr	r0, [r4, #4]
 8002cd6:	f006 fc4f 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002cda:	2103      	movs	r1, #3
 8002cdc:	a801      	add	r0, sp, #4
 8002cde:	f006 fcbf 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002ce2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d001      	beq.n	8002cf2 <sensor::HTU21D::ReadRaw(unsigned char)+0x5a>
 8002cee:	3d01      	subs	r5, #1
 8002cf0:	d1e8      	bne.n	8002cc4 <sensor::HTU21D::ReadRaw(unsigned char)+0x2c>
 8002cf2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002cf6:	ba40      	rev16	r0, r0
 8002cf8:	f020 0003 	bic.w	r0, r0, #3
 8002cfc:	b280      	uxth	r0, r0
 8002cfe:	b003      	add	sp, #12
 8002d00:	bd30      	pop	{r4, r5, pc}
 8002d02:	bf00      	nop
 8002d04:	08009f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip, pc}

08002d08 <sensor::HTU21D::GetTemperature()>:
 8002d08:	b508      	push	{r3, lr}
 8002d0a:	21f3      	movs	r1, #243	; 0xf3
 8002d0c:	f7ff ffc4 	bl	8002c98 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002d10:	f7fd ff0c 	bl	8000b2c <__aeabi_ui2f>
 8002d14:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002d18:	f7fd ff60 	bl	8000bdc <__aeabi_fmul>
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <sensor::HTU21D::GetTemperature()+0x24>)
 8002d1e:	f7fd ff5d 	bl	8000bdc <__aeabi_fmul>
 8002d22:	4903      	ldr	r1, [pc, #12]	; (8002d30 <sensor::HTU21D::GetTemperature()+0x28>)
 8002d24:	f7fd fe50 	bl	80009c8 <__aeabi_fsub>
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop
 8002d2c:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8002d30:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08002d34 <sensor::HTU21D::GetHumidity()>:
 8002d34:	b508      	push	{r3, lr}
 8002d36:	21f5      	movs	r1, #245	; 0xf5
 8002d38:	f7ff ffae 	bl	8002c98 <sensor::HTU21D::ReadRaw(unsigned char)>
 8002d3c:	f7fd fef6 	bl	8000b2c <__aeabi_ui2f>
 8002d40:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8002d44:	f7fd ff4a 	bl	8000bdc <__aeabi_fmul>
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <sensor::HTU21D::GetHumidity()+0x24>)
 8002d4a:	f7fd ff47 	bl	8000bdc <__aeabi_fmul>
 8002d4e:	4903      	ldr	r1, [pc, #12]	; (8002d5c <sensor::HTU21D::GetHumidity()+0x28>)
 8002d50:	f7fd fe3a 	bl	80009c8 <__aeabi_fsub>
 8002d54:	bd08      	pop	{r3, pc}
 8002d56:	bf00      	nop
 8002d58:	42fa0000 	rscsmi	r0, sl, #0
 8002d5c:	40c00000 	sbcmi	r0, r0, r0

08002d60 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8002d60:	b513      	push	{r0, r1, r4, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	0a13      	lsrs	r3, r2, #8
 8002d66:	7800      	ldrb	r0, [r0, #0]
 8002d68:	f88d 1004 	strb.w	r1, [sp, #4]
 8002d6c:	f88d 3005 	strb.w	r3, [sp, #5]
 8002d70:	f88d 2006 	strb.w	r2, [sp, #6]
 8002d74:	f006 fc08 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002d78:	6860      	ldr	r0, [r4, #4]
 8002d7a:	f006 fbfd 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002d7e:	2103      	movs	r1, #3
 8002d80:	a801      	add	r0, sp, #4
 8002d82:	f006 fc07 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002d86:	b002      	add	sp, #8
 8002d88:	bd10      	pop	{r4, pc}

08002d8a <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
 8002d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4615      	mov	r5, r2
 8002d92:	7800      	ldrb	r0, [r0, #0]
 8002d94:	f8ad 6004 	strh.w	r6, [sp, #4]
 8002d98:	f88d 1004 	strb.w	r1, [sp, #4]
 8002d9c:	f006 fbf4 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002da0:	6860      	ldr	r0, [r4, #4]
 8002da2:	f006 fbe9 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002da6:	2101      	movs	r1, #1
 8002da8:	a801      	add	r0, sp, #4
 8002daa:	f006 fbf3 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002dae:	4631      	mov	r1, r6
 8002db0:	4628      	mov	r0, r5
 8002db2:	f006 fe9d 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8002db6:	2102      	movs	r1, #2
 8002db8:	a801      	add	r0, sp, #4
 8002dba:	f006 fc51 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002dbe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002dc2:	ba40      	rev16	r0, r0
 8002dc4:	b280      	uxth	r0, r0
 8002dc6:	b002      	add	sp, #8
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dcc <sensor::INA219::Configure(sensor::ina219::Config&)>:
 8002dcc:	880b      	ldrh	r3, [r1, #0]
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	b1d3      	cbz	r3, 8002e08 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
 8002dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd6:	d102      	bne.n	8002dde <sensor::INA219::Configure(sensor::ina219::Config&)+0x12>
 8002dd8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8002ddc:	6182      	str	r2, [r0, #24]
 8002dde:	884a      	ldrh	r2, [r1, #2]
 8002de0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002de4:	d019      	beq.n	8002e1a <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
 8002de6:	d812      	bhi.n	8002e0e <sensor::INA219::Configure(sensor::ina219::Config&)+0x42>
 8002de8:	b1da      	cbz	r2, 8002e22 <sensor::INA219::Configure(sensor::ina219::Config&)+0x56>
 8002dea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002dee:	d016      	beq.n	8002e1e <sensor::INA219::Configure(sensor::ina219::Config&)+0x52>
 8002df0:	431a      	orrs	r2, r3
 8002df2:	888b      	ldrh	r3, [r1, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	88cb      	ldrh	r3, [r1, #6]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	890b      	ldrh	r3, [r1, #8]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	b292      	uxth	r2, r2
 8002e02:	f7ff ffad 	bl	8002d60 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002e06:	bd10      	pop	{r4, pc}
 8002e08:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002e0c:	e7e6      	b.n	8002ddc <sensor::INA219::Configure(sensor::ina219::Config&)+0x10>
 8002e0e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002e12:	d1ed      	bne.n	8002df0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002e14:	4c04      	ldr	r4, [pc, #16]	; (8002e28 <sensor::INA219::Configure(sensor::ina219::Config&)+0x5c>)
 8002e16:	6144      	str	r4, [r0, #20]
 8002e18:	e7ea      	b.n	8002df0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x24>
 8002e1a:	4c04      	ldr	r4, [pc, #16]	; (8002e2c <sensor::INA219::Configure(sensor::ina219::Config&)+0x60>)
 8002e1c:	e7fb      	b.n	8002e16 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e1e:	4c04      	ldr	r4, [pc, #16]	; (8002e30 <sensor::INA219::Configure(sensor::ina219::Config&)+0x64>)
 8002e20:	e7f9      	b.n	8002e16 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e22:	4c04      	ldr	r4, [pc, #16]	; (8002e34 <sensor::INA219::Configure(sensor::ina219::Config&)+0x68>)
 8002e24:	e7f7      	b.n	8002e16 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4a>
 8002e26:	bf00      	nop
 8002e28:	3ea3d70a 	cdpcc	7, 10, cr13, cr3, cr10, {0}
 8002e2c:	3e23d70a 	cdpcc	7, 2, cr13, cr3, cr10, {0}
 8002e30:	3da3d70a 	stccc	7, cr13, [r3, #40]!	; 0x28
 8002e34:	3d23d70a 	stccc	7, cr13, [r3, #-40]!	; 0xffffffd8

08002e38 <sensor::INA219::Calibrate(float, float)>:
 8002e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e3c:	61c1      	str	r1, [r0, #28]
 8002e3e:	4605      	mov	r5, r0
 8002e40:	460e      	mov	r6, r1
 8002e42:	4610      	mov	r0, r2
 8002e44:	491d      	ldr	r1, [pc, #116]	; (8002ebc <sensor::INA219::Calibrate(float, float)+0x84>)
 8002e46:	f7fd ff7d 	bl	8000d44 <__aeabi_fdiv>
 8002e4a:	491d      	ldr	r1, [pc, #116]	; (8002ec0 <sensor::INA219::Calibrate(float, float)+0x88>)
 8002e4c:	f7fd fec6 	bl	8000bdc <__aeabi_fmul>
 8002e50:	f7fe f8b0 	bl	8000fb4 <__aeabi_f2uiz>
 8002e54:	b280      	uxth	r0, r0
 8002e56:	f7fd fe69 	bl	8000b2c <__aeabi_ui2f>
 8002e5a:	4919      	ldr	r1, [pc, #100]	; (8002ec0 <sensor::INA219::Calibrate(float, float)+0x88>)
 8002e5c:	f7fd ff72 	bl	8000d44 <__aeabi_fdiv>
 8002e60:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002e62:	f7fd ff6f 	bl	8000d44 <__aeabi_fdiv>
 8002e66:	4680      	mov	r8, r0
 8002e68:	f7fe f87e 	bl	8000f68 <__aeabi_f2iz>
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	f7fd fe61 	bl	8000b34 <__aeabi_i2f>
 8002e72:	4604      	mov	r4, r0
 8002e74:	4601      	mov	r1, r0
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7fe f844 	bl	8000f04 <__aeabi_fcmpeq>
 8002e7c:	b918      	cbnz	r0, 8002e86 <sensor::INA219::Calibrate(float, float)+0x4e>
 8002e7e:	1c78      	adds	r0, r7, #1
 8002e80:	f7fd fe58 	bl	8000b34 <__aeabi_i2f>
 8002e84:	4604      	mov	r4, r0
 8002e86:	4620      	mov	r0, r4
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <sensor::INA219::Calibrate(float, float)+0x8c>)
 8002e8a:	f7fd fea7 	bl	8000bdc <__aeabi_fmul>
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <sensor::INA219::Calibrate(float, float)+0x90>)
 8002e90:	60e8      	str	r0, [r5, #12]
 8002e92:	4604      	mov	r4, r0
 8002e94:	f7fd fea2 	bl	8000bdc <__aeabi_fmul>
 8002e98:	4631      	mov	r1, r6
 8002e9a:	6128      	str	r0, [r5, #16]
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7fd fe9d 	bl	8000bdc <__aeabi_fmul>
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <sensor::INA219::Calibrate(float, float)+0x94>)
 8002ea6:	f7fd ff4d 	bl	8000d44 <__aeabi_fdiv>
 8002eaa:	f7fe f883 	bl	8000fb4 <__aeabi_f2uiz>
 8002eae:	2105      	movs	r1, #5
 8002eb0:	b282      	uxth	r2, r0
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f7ff ff54 	bl	8002d60 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8002eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ebc:	46fffe00 	ldrbtmi	pc, [pc], r0, lsl #28	; <UNPREDICTABLE>
 8002ec0:	4cbebc20 	ldcmi	12, cr11, [lr], #128	; 0x80
 8002ec4:	38d1b717 	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
 8002ec8:	41a00000 	movmi	r0, r0
 8002ecc:	3d27c5ac 	cfstr32cc	mvfx12, [r7, #-688]!	; 0xfffffd50

08002ed0 <sensor::INA219::INA219(unsigned char)>:
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	1e0c      	subs	r4, r1, #0
 8002ed4:	bf08      	it	eq
 8002ed6:	2440      	moveq	r4, #64	; 0x40
 8002ed8:	2600      	movs	r6, #0
 8002eda:	4f1a      	ldr	r7, [pc, #104]	; (8002f44 <sensor::INA219::INA219(unsigned char)+0x74>)
 8002edc:	b085      	sub	sp, #20
 8002ede:	7004      	strb	r4, [r0, #0]
 8002ee0:	6047      	str	r7, [r0, #4]
 8002ee2:	7206      	strb	r6, [r0, #8]
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f006 fb4e 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002eec:	4638      	mov	r0, r7
 8002eee:	f006 fb43 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002ef2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d902      	bls.n	8002f00 <sensor::INA219::INA219(unsigned char)+0x30>
 8002efa:	3c50      	subs	r4, #80	; 0x50
 8002efc:	2c0f      	cmp	r4, #15
 8002efe:	d81c      	bhi.n	8002f3a <sensor::INA219::INA219(unsigned char)+0x6a>
 8002f00:	2101      	movs	r1, #1
 8002f02:	a801      	add	r0, sp, #4
 8002f04:	f006 fbac 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002f08:	fab0 f080 	clz	r0, r0
 8002f0c:	0940      	lsrs	r0, r0, #5
 8002f0e:	7228      	strb	r0, [r5, #8]
 8002f10:	b180      	cbz	r0, 8002f34 <sensor::INA219::INA219(unsigned char)+0x64>
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <sensor::INA219::INA219(unsigned char)+0x78>)
 8002f14:	ab01      	add	r3, sp, #4
 8002f16:	6810      	ldr	r0, [r2, #0]
 8002f18:	6851      	ldr	r1, [r2, #4]
 8002f1a:	8912      	ldrh	r2, [r2, #8]
 8002f1c:	c303      	stmia	r3!, {r0, r1}
 8002f1e:	4628      	mov	r0, r5
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	a901      	add	r1, sp, #4
 8002f24:	f7ff ff52 	bl	8002dcc <sensor::INA219::Configure(sensor::ina219::Config&)>
 8002f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	4907      	ldr	r1, [pc, #28]	; (8002f4c <sensor::INA219::INA219(unsigned char)+0x7c>)
 8002f30:	f7ff ff82 	bl	8002e38 <sensor::INA219::Calibrate(float, float)>
 8002f34:	4628      	mov	r0, r5
 8002f36:	b005      	add	sp, #20
 8002f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3a:	4631      	mov	r1, r6
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f006 fb29 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002f42:	e7e1      	b.n	8002f08 <sensor::INA219::INA219(unsigned char)+0x38>
 8002f44:	00061a80 	andeq	r1, r6, r0, lsl #21
 8002f48:	08009f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, pc}
 8002f4c:	3dcccccd 	stclcc	12, cr12, [ip, #820]	; 0x334

08002f50 <sensor::INA219::GetShuntCurrent()>:
 8002f50:	b510      	push	{r4, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f58:	2104      	movs	r1, #4
 8002f5a:	f7ff ff16 	bl	8002d8a <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002f5e:	f7fd fde9 	bl	8000b34 <__aeabi_i2f>
 8002f62:	68e1      	ldr	r1, [r4, #12]
 8002f64:	f7fd fe3a 	bl	8000bdc <__aeabi_fmul>
 8002f68:	bd10      	pop	{r4, pc}

08002f6a <sensor::INA219::GetBusVoltageRaw()>:
 8002f6a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f6e:	2102      	movs	r1, #2
 8002f70:	b508      	push	{r3, lr}
 8002f72:	f7ff ff0a 	bl	8002d8a <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002f76:	f340 004f 	sbfx	r0, r0, #1, #16
 8002f7a:	f020 0003 	bic.w	r0, r0, #3
 8002f7e:	bd08      	pop	{r3, pc}

08002f80 <sensor::INA219::GetBusVoltage()>:
 8002f80:	b508      	push	{r3, lr}
 8002f82:	f7ff fff2 	bl	8002f6a <sensor::INA219::GetBusVoltageRaw()>
 8002f86:	f7fd fdd5 	bl	8000b34 <__aeabi_i2f>
 8002f8a:	4902      	ldr	r1, [pc, #8]	; (8002f94 <sensor::INA219::GetBusVoltage()+0x14>)
 8002f8c:	f7fd fe26 	bl	8000bdc <__aeabi_fmul>
 8002f90:	bd08      	pop	{r3, pc}
 8002f92:	bf00      	nop
 8002f94:	3a83126f 	bcc	60c7958 <__heap_size+0x60c6958>

08002f98 <sensor::INA219::GetBusPower()>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	f7ff fef2 	bl	8002d8a <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
 8002fa6:	f7fd fdc5 	bl	8000b34 <__aeabi_i2f>
 8002faa:	6921      	ldr	r1, [r4, #16]
 8002fac:	f7fd fe16 	bl	8000bdc <__aeabi_fmul>
 8002fb0:	bd10      	pop	{r4, pc}

08002fb2 <HAL_I2C::ReadRegister16(unsigned char)>:
 8002fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	2501      	movs	r5, #1
 8002fb8:	7800      	ldrb	r0, [r0, #0]
 8002fba:	f88d 1000 	strb.w	r1, [sp]
 8002fbe:	f88d 5001 	strb.w	r5, [sp, #1]
 8002fc2:	f006 fae1 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002fc6:	6860      	ldr	r0, [r4, #4]
 8002fc8:	f006 fad6 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4668      	mov	r0, sp
 8002fd0:	f006 fae0 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	7820      	ldrb	r0, [r4, #0]
 8002fd8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002fdc:	f006 fad4 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8002fe0:	6860      	ldr	r0, [r4, #4]
 8002fe2:	f006 fac9 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	a801      	add	r0, sp, #4
 8002fea:	f006 fb39 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8002fee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002ff2:	ba40      	rev16	r0, r0
 8002ff4:	b280      	uxth	r0, r0
 8002ff6:	b003      	add	sp, #12
 8002ff8:	bd30      	pop	{r4, r5, pc}
	...

08002ffc <sensor::MCP9808::MCP9808(unsigned char)>:
 8002ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ffe:	1e0d      	subs	r5, r1, #0
 8003000:	bf08      	it	eq
 8003002:	2518      	moveq	r5, #24
 8003004:	2600      	movs	r6, #0
 8003006:	4f1b      	ldr	r7, [pc, #108]	; (8003074 <sensor::MCP9808::MCP9808(unsigned char)+0x78>)
 8003008:	7005      	strb	r5, [r0, #0]
 800300a:	6047      	str	r7, [r0, #4]
 800300c:	7206      	strb	r6, [r0, #8]
 800300e:	4604      	mov	r4, r0
 8003010:	4628      	mov	r0, r5
 8003012:	f006 fab9 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8003016:	4638      	mov	r0, r7
 8003018:	f006 faae 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 800301c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003020:	2b07      	cmp	r3, #7
 8003022:	d902      	bls.n	800302a <sensor::MCP9808::MCP9808(unsigned char)+0x2e>
 8003024:	3d50      	subs	r5, #80	; 0x50
 8003026:	2d0f      	cmp	r5, #15
 8003028:	d81f      	bhi.n	800306a <sensor::MCP9808::MCP9808(unsigned char)+0x6e>
 800302a:	2101      	movs	r1, #1
 800302c:	f10d 0007 	add.w	r0, sp, #7
 8003030:	f006 fb16 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8003034:	fab0 f080 	clz	r0, r0
 8003038:	0940      	lsrs	r0, r0, #5
 800303a:	7220      	strb	r0, [r4, #8]
 800303c:	b190      	cbz	r0, 8003064 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 800303e:	2106      	movs	r1, #6
 8003040:	4620      	mov	r0, r4
 8003042:	f7ff ffb6 	bl	8002fb2 <HAL_I2C::ReadRegister16(unsigned char)>
 8003046:	2854      	cmp	r0, #84	; 0x54
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	7223      	strb	r3, [r4, #8]
 8003050:	d108      	bne.n	8003064 <sensor::MCP9808::MCP9808(unsigned char)+0x68>
 8003052:	2107      	movs	r1, #7
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff ffac 	bl	8002fb2 <HAL_I2C::ReadRegister16(unsigned char)>
 800305a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800305e:	4258      	negs	r0, r3
 8003060:	4158      	adcs	r0, r3
 8003062:	7220      	strb	r0, [r4, #8]
 8003064:	4620      	mov	r0, r4
 8003066:	b003      	add	sp, #12
 8003068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306a:	4631      	mov	r1, r6
 800306c:	4630      	mov	r0, r6
 800306e:	f006 fa91 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8003072:	e7df      	b.n	8003034 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
 8003074:	00061a80 	andeq	r1, r6, r0, lsl #21

08003078 <sensor::MCP9808::Get()>:
 8003078:	b510      	push	{r4, lr}
 800307a:	2105      	movs	r1, #5
 800307c:	f7ff ff99 	bl	8002fb2 <HAL_I2C::ReadRegister16(unsigned char)>
 8003080:	4604      	mov	r4, r0
 8003082:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003086:	f7fd fd55 	bl	8000b34 <__aeabi_i2f>
 800308a:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 800308e:	f7fd fda5 	bl	8000bdc <__aeabi_fmul>
 8003092:	04e2      	lsls	r2, r4, #19
 8003094:	4603      	mov	r3, r0
 8003096:	d504      	bpl.n	80030a2 <sensor::MCP9808::Get()+0x2a>
 8003098:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800309c:	f7fd fc94 	bl	80009c8 <__aeabi_fsub>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd10      	pop	{r4, pc}
	...

080030a8 <sensor::SI7021::SI7021(unsigned char)>:
 80030a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030aa:	1e0c      	subs	r4, r1, #0
 80030ac:	bf08      	it	eq
 80030ae:	2440      	moveq	r4, #64	; 0x40
 80030b0:	2600      	movs	r6, #0
 80030b2:	4f11      	ldr	r7, [pc, #68]	; (80030f8 <sensor::SI7021::SI7021(unsigned char)+0x50>)
 80030b4:	7004      	strb	r4, [r0, #0]
 80030b6:	6047      	str	r7, [r0, #4]
 80030b8:	7206      	strb	r6, [r0, #8]
 80030ba:	4605      	mov	r5, r0
 80030bc:	4620      	mov	r0, r4
 80030be:	f006 fa63 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 80030c2:	4638      	mov	r0, r7
 80030c4:	f006 fa58 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 80030c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d902      	bls.n	80030d6 <sensor::SI7021::SI7021(unsigned char)+0x2e>
 80030d0:	3c50      	subs	r4, #80	; 0x50
 80030d2:	2c0f      	cmp	r4, #15
 80030d4:	d80b      	bhi.n	80030ee <sensor::SI7021::SI7021(unsigned char)+0x46>
 80030d6:	2101      	movs	r1, #1
 80030d8:	f10d 0007 	add.w	r0, sp, #7
 80030dc:	f006 fac0 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 80030e0:	fab0 f380 	clz	r3, r0
 80030e4:	4628      	mov	r0, r5
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	722b      	strb	r3, [r5, #8]
 80030ea:	b003      	add	sp, #12
 80030ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ee:	4631      	mov	r1, r6
 80030f0:	4630      	mov	r0, r6
 80030f2:	f006 fa4f 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 80030f6:	e7f3      	b.n	80030e0 <sensor::SI7021::SI7021(unsigned char)+0x38>
 80030f8:	00061a80 	andeq	r1, r6, r0, lsl #21

080030fc <sensor::SI7021::ReadRaw(unsigned char)>:
 80030fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	7800      	ldrb	r0, [r0, #0]
 8003102:	f88d 1004 	strb.w	r1, [sp, #4]
 8003106:	f006 fa3f 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 800310a:	6860      	ldr	r0, [r4, #4]
 800310c:	f006 fa34 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8003110:	2101      	movs	r1, #1
 8003112:	a801      	add	r0, sp, #4
 8003114:	f006 fa3e 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <sensor::SI7021::ReadRaw(unsigned char)+0x6c>)
 800311a:	2508      	movs	r5, #8
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	f88d 3006 	strb.w	r3, [sp, #6]
 8003128:	2100      	movs	r1, #0
 800312a:	f242 7010 	movw	r0, #10000	; 0x2710
 800312e:	f006 fcdf 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003132:	7820      	ldrb	r0, [r4, #0]
 8003134:	f006 fa28 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8003138:	6860      	ldr	r0, [r4, #4]
 800313a:	f006 fa1d 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 800313e:	2103      	movs	r1, #3
 8003140:	a801      	add	r0, sp, #4
 8003142:	f006 fa8d 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8003146:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d001      	beq.n	8003156 <sensor::SI7021::ReadRaw(unsigned char)+0x5a>
 8003152:	3d01      	subs	r5, #1
 8003154:	d1e8      	bne.n	8003128 <sensor::SI7021::ReadRaw(unsigned char)+0x2c>
 8003156:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800315a:	ba40      	rev16	r0, r0
 800315c:	f020 0003 	bic.w	r0, r0, #3
 8003160:	b280      	uxth	r0, r0
 8003162:	b003      	add	sp, #12
 8003164:	bd30      	pop	{r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	08009f1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, sl, fp, ip, pc}

0800316c <sensor::SI7021::GetTemperature()>:
 800316c:	b508      	push	{r3, lr}
 800316e:	21f3      	movs	r1, #243	; 0xf3
 8003170:	f7ff ffc4 	bl	80030fc <sensor::SI7021::ReadRaw(unsigned char)>
 8003174:	f7fd fcda 	bl	8000b2c <__aeabi_ui2f>
 8003178:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800317c:	f7fd fd2e 	bl	8000bdc <__aeabi_fmul>
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <sensor::SI7021::GetTemperature()+0x24>)
 8003182:	f7fd fd2b 	bl	8000bdc <__aeabi_fmul>
 8003186:	4903      	ldr	r1, [pc, #12]	; (8003194 <sensor::SI7021::GetTemperature()+0x28>)
 8003188:	f7fd fc1e 	bl	80009c8 <__aeabi_fsub>
 800318c:	bd08      	pop	{r3, pc}
 800318e:	bf00      	nop
 8003190:	432fb852 			; <UNDEFINED> instruction: 0x432fb852
 8003194:	423b6666 	eorsmi	r6, fp, #106954752	; 0x6600000

08003198 <sensor::SI7021::GetHumidity()>:
 8003198:	b508      	push	{r3, lr}
 800319a:	21f5      	movs	r1, #245	; 0xf5
 800319c:	f7ff ffae 	bl	80030fc <sensor::SI7021::ReadRaw(unsigned char)>
 80031a0:	f7fd fcc4 	bl	8000b2c <__aeabi_ui2f>
 80031a4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80031a8:	f7fd fd18 	bl	8000bdc <__aeabi_fmul>
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <sensor::SI7021::GetHumidity()+0x24>)
 80031ae:	f7fd fd15 	bl	8000bdc <__aeabi_fmul>
 80031b2:	4903      	ldr	r1, [pc, #12]	; (80031c0 <sensor::SI7021::GetHumidity()+0x28>)
 80031b4:	f7fd fc08 	bl	80009c8 <__aeabi_fsub>
 80031b8:	bd08      	pop	{r3, pc}
 80031ba:	bf00      	nop
 80031bc:	42fa0000 	rscsmi	r0, sl, #0
 80031c0:	40c00000 	sbcmi	r0, r0, r0

080031c4 <RDMSubDevices::RDMSubDevices()>:
 80031c4:	2200      	movs	r2, #0
 80031c6:	6002      	str	r2, [r0, #0]
 80031c8:	8082      	strh	r2, [r0, #4]
 80031ca:	4a01      	ldr	r2, [pc, #4]	; (80031d0 <RDMSubDevices::RDMSubDevices()+0xc>)
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	4770      	bx	lr
 80031d0:	200001fc 	strdcs	r0, [r0], -ip

080031d4 <RDMSubDevices::~RDMSubDevices()>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	2500      	movs	r5, #0
 80031d8:	4604      	mov	r4, r0
 80031da:	462e      	mov	r6, r5
 80031dc:	88a3      	ldrh	r3, [r4, #4]
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	d804      	bhi.n	80031ee <RDMSubDevices::~RDMSubDevices()+0x1a>
 80031e4:	b108      	cbz	r0, 80031ea <RDMSubDevices::~RDMSubDevices()+0x16>
 80031e6:	f005 f948 	bl	800847a <operator delete[](void*)>
 80031ea:	4620      	mov	r0, r4
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80031f2:	00af      	lsls	r7, r5, #2
 80031f4:	b110      	cbz	r0, 80031fc <RDMSubDevices::~RDMSubDevices()+0x28>
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4798      	blx	r3
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	3501      	adds	r5, #1
 8003200:	51de      	str	r6, [r3, r7]
 8003202:	e7eb      	b.n	80031dc <RDMSubDevices::~RDMSubDevices()+0x8>

08003204 <RDMSubDevices::GetInfo(unsigned short)>:
 8003204:	6803      	ldr	r3, [r0, #0]
 8003206:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800320a:	3901      	subs	r1, #1
 800320c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003210:	3010      	adds	r0, #16
 8003212:	4770      	bx	lr

08003214 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 8003214:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003218:	6800      	ldr	r0, [r0, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	4611      	mov	r1, r2
 800321e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003222:	f000 b8c1 	b.w	80033a8 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

08003226 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 8003226:	b410      	push	{r4}
 8003228:	460c      	mov	r4, r1
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003230:	3c01      	subs	r4, #1
 8003232:	4611      	mov	r1, r2
 8003234:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003238:	461a      	mov	r2, r3
 800323a:	bc10      	pop	{r4}
 800323c:	f000 b8c9 	b.w	80033d2 <RDMSubDevice::SetLabel(char const*, unsigned char)>

08003240 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
 8003240:	6803      	ldr	r3, [r0, #0]
 8003242:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003246:	3901      	subs	r1, #1
 8003248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800324c:	8a58      	ldrh	r0, [r3, #18]
 800324e:	4770      	bx	lr

08003250 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
 8003250:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003254:	6800      	ldr	r0, [r0, #0]
 8003256:	3b01      	subs	r3, #1
 8003258:	4611      	mov	r1, r2
 800325a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800325e:	f000 b897 	b.w	8003390 <RDMSubDevice::SetDmxStartAddress(unsigned short)>

08003262 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003268:	3901      	subs	r1, #1
 800326a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800326e:	8a18      	ldrh	r0, [r3, #16]
 8003270:	4770      	bx	lr

08003272 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
 8003272:	6803      	ldr	r3, [r0, #0]
 8003274:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003278:	3901      	subs	r1, #1
 800327a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800327e:	7d18      	ldrb	r0, [r3, #20]
 8003280:	4770      	bx	lr

08003282 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8003282:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8003286:	6800      	ldr	r0, [r0, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	4611      	mov	r1, r2
 800328c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003290:	f000 b8ae 	b.w	80033f0 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>

08003294 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800329a:	3901      	subs	r1, #1
 800329c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032a0:	7d58      	ldrb	r0, [r3, #21]
 80032a2:	4770      	bx	lr

080032a4 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
 80032a4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80032a8:	6800      	ldr	r0, [r0, #0]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	4611      	mov	r1, r2
 80032ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80032b2:	f000 b872 	b.w	800339a <RDMSubDevice::GetPersonality(unsigned char)>

080032b6 <RDMSubDevices::Start()>:
 80032b6:	b538      	push	{r3, r4, r5, lr}
 80032b8:	4605      	mov	r5, r0
 80032ba:	2400      	movs	r4, #0
 80032bc:	88ab      	ldrh	r3, [r5, #4]
 80032be:	42a3      	cmp	r3, r4
 80032c0:	d800      	bhi.n	80032c4 <RDMSubDevices::Start()+0xe>
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032ca:	b110      	cbz	r0, 80032d2 <RDMSubDevices::Start()+0x1c>
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4798      	blx	r3
 80032d2:	3401      	adds	r4, #1
 80032d4:	e7f2      	b.n	80032bc <RDMSubDevices::Start()+0x6>

080032d6 <RDMSubDevices::Stop()>:
 80032d6:	b538      	push	{r3, r4, r5, lr}
 80032d8:	4605      	mov	r5, r0
 80032da:	2400      	movs	r4, #0
 80032dc:	88ab      	ldrh	r3, [r5, #4]
 80032de:	42a3      	cmp	r3, r4
 80032e0:	d800      	bhi.n	80032e4 <RDMSubDevices::Stop()+0xe>
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032ea:	b110      	cbz	r0, 80032f2 <RDMSubDevices::Stop()+0x1c>
 80032ec:	6803      	ldr	r3, [r0, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4798      	blx	r3
 80032f2:	3401      	adds	r4, #1
 80032f4:	e7f2      	b.n	80032dc <RDMSubDevices::Stop()+0x6>

080032f6 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
 80032f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f8:	4605      	mov	r5, r0
 80032fa:	460f      	mov	r7, r1
 80032fc:	4616      	mov	r6, r2
 80032fe:	2400      	movs	r4, #0
 8003300:	88ab      	ldrh	r3, [r5, #4]
 8003302:	42a3      	cmp	r3, r4
 8003304:	d800      	bhi.n	8003308 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x12>
 8003306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800330e:	b158      	cbz	r0, 8003328 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 8003310:	8a43      	ldrh	r3, [r0, #18]
 8003312:	8a02      	ldrh	r2, [r0, #16]
 8003314:	4413      	add	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	42b3      	cmp	r3, r6
 800331c:	d804      	bhi.n	8003328 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x32>
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	4632      	mov	r2, r6
 8003322:	4639      	mov	r1, r7
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4798      	blx	r3
 8003328:	3401      	adds	r4, #1
 800332a:	e7e9      	b.n	8003300 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0xa>

0800332c <RDMSubDevices::GetFactoryDefaults()>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4605      	mov	r5, r0
 8003330:	2400      	movs	r4, #0
 8003332:	88ab      	ldrh	r3, [r5, #4]
 8003334:	42a3      	cmp	r3, r4
 8003336:	d801      	bhi.n	800333c <RDMSubDevices::GetFactoryDefaults()+0x10>
 8003338:	2001      	movs	r0, #1
 800333a:	e009      	b.n	8003350 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003342:	b908      	cbnz	r0, 8003348 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 8003344:	3401      	adds	r4, #1
 8003346:	e7f4      	b.n	8003332 <RDMSubDevices::GetFactoryDefaults()+0x6>
 8003348:	f000 f87a 	bl	8003440 <RDMSubDevice::GetFactoryDefaults()>
 800334c:	2800      	cmp	r0, #0
 800334e:	d1f9      	bne.n	8003344 <RDMSubDevices::GetFactoryDefaults()+0x18>
 8003350:	bd38      	pop	{r3, r4, r5, pc}

08003352 <RDMSubDevices::SetFactoryDefaults()>:
 8003352:	b538      	push	{r3, r4, r5, lr}
 8003354:	4605      	mov	r5, r0
 8003356:	2400      	movs	r4, #0
 8003358:	88ab      	ldrh	r3, [r5, #4]
 800335a:	42a3      	cmp	r3, r4
 800335c:	d800      	bhi.n	8003360 <RDMSubDevices::SetFactoryDefaults()+0xe>
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003366:	b108      	cbz	r0, 800336c <RDMSubDevices::SetFactoryDefaults()+0x1a>
 8003368:	f000 f844 	bl	80033f4 <RDMSubDevice::SetFactoryDefaults()>
 800336c:	3401      	adds	r4, #1
 800336e:	e7f3      	b.n	8003358 <RDMSubDevices::SetFactoryDefaults()+0x6>

08003370 <RDMSubDevicesParams::RDMSubDevicesParams(RDMSubDevicesParamsStore*)>:
 8003370:	6001      	str	r1, [r0, #0]
 8003372:	4770      	bx	lr

08003374 <RDMSubDevicesParams::Load()>:
 8003374:	b508      	push	{r3, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4601      	mov	r1, r0
 800337a:	6043      	str	r3, [r0, #4]
 800337c:	6800      	ldr	r0, [r0, #0]
 800337e:	b120      	cbz	r0, 800338a <RDMSubDevicesParams::Load()+0x16>
 8003380:	6803      	ldr	r3, [r0, #0]
 8003382:	3104      	adds	r1, #4
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4798      	blx	r3
 8003388:	2001      	movs	r0, #1
 800338a:	bd08      	pop	{r3, pc}

0800338c <RDMSubDevicesParams::Dump()>:
 800338c:	4770      	bx	lr

0800338e <RDMSubDevicesParams::Set()>:
 800338e:	4770      	bx	lr

08003390 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	8241      	strh	r1, [r0, #18]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2100      	movs	r1, #0
 8003398:	4718      	bx	r3

0800339a <RDMSubDevice::GetPersonality(unsigned char)>:
 800339a:	6843      	ldr	r3, [r0, #4]
 800339c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80033a0:	3901      	subs	r1, #1
 80033a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80033a6:	4770      	bx	lr

080033a8 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 80033a8:	f100 0316 	add.w	r3, r0, #22
 80033ac:	600b      	str	r3, [r1, #0]
 80033ae:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80033b2:	710b      	strb	r3, [r1, #4]
 80033b4:	4770      	bx	lr

080033b6 <RDMSubDevice::SetLabel(char const*)>:
 80033b6:	2300      	movs	r3, #0
 80033b8:	b510      	push	{r4, lr}
 80033ba:	f100 0416 	add.w	r4, r0, #22
 80033be:	5cca      	ldrb	r2, [r1, r3]
 80033c0:	b122      	cbz	r2, 80033cc <RDMSubDevice::SetLabel(char const*)+0x16>
 80033c2:	3301      	adds	r3, #1
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	f804 2b01 	strb.w	r2, [r4], #1
 80033ca:	d1f8      	bne.n	80033be <RDMSubDevice::SetLabel(char const*)+0x8>
 80033cc:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033d0:	bd10      	pop	{r4, pc}

080033d2 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 80033d2:	2300      	movs	r3, #0
 80033d4:	b530      	push	{r4, r5, lr}
 80033d6:	f100 0416 	add.w	r4, r0, #22
 80033da:	429a      	cmp	r2, r3
 80033dc:	d905      	bls.n	80033ea <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 80033de:	5ccd      	ldrb	r5, [r1, r3]
 80033e0:	3301      	adds	r3, #1
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	f804 5b01 	strb.w	r5, [r4], #1
 80033e8:	d1f7      	bne.n	80033da <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 80033ea:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 80033ee:	bd30      	pop	{r4, r5, pc}

080033f0 <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
 80033f0:	7501      	strb	r1, [r0, #20]
 80033f2:	4770      	bx	lr

080033f4 <RDMSubDevice::SetFactoryDefaults()>:
 80033f4:	7a03      	ldrb	r3, [r0, #8]
 80033f6:	b510      	push	{r4, lr}
 80033f8:	b94b      	cbnz	r3, 800340e <RDMSubDevice::SetFactoryDefaults()+0x1a>
 80033fa:	f100 0138 	add.w	r1, r0, #56	; 0x38
 80033fe:	f7ff ffda 	bl	80033b6 <RDMSubDevice::SetLabel(char const*)>
 8003402:	8983      	ldrh	r3, [r0, #12]
 8003404:	8243      	strh	r3, [r0, #18]
 8003406:	7b83      	ldrb	r3, [r0, #14]
 8003408:	7503      	strb	r3, [r0, #20]
 800340a:	2301      	movs	r3, #1
 800340c:	7203      	strb	r3, [r0, #8]
 800340e:	bd10      	pop	{r4, pc}

08003410 <RDMSubDevice::CalculateChecksum()>:
 8003410:	4602      	mov	r2, r0
 8003412:	b510      	push	{r4, lr}
 8003414:	8a43      	ldrh	r3, [r0, #18]
 8003416:	7d01      	ldrb	r1, [r0, #20]
 8003418:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 800341c:	440b      	add	r3, r1
 800341e:	b298      	uxth	r0, r3
 8003420:	f102 0316 	add.w	r3, r2, #22
 8003424:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003428:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800342c:	32ea      	adds	r2, #234	; 0xea
 800342e:	18d1      	adds	r1, r2, r3
 8003430:	428c      	cmp	r4, r1
 8003432:	d800      	bhi.n	8003436 <RDMSubDevice::CalculateChecksum()+0x26>
 8003434:	bd10      	pop	{r4, pc}
 8003436:	f813 1b01 	ldrb.w	r1, [r3], #1
 800343a:	4408      	add	r0, r1
 800343c:	b280      	uxth	r0, r0
 800343e:	e7f6      	b.n	800342e <RDMSubDevice::CalculateChecksum()+0x1e>

08003440 <RDMSubDevice::GetFactoryDefaults()>:
 8003440:	7a03      	ldrb	r3, [r0, #8]
 8003442:	b510      	push	{r4, lr}
 8003444:	4604      	mov	r4, r0
 8003446:	b133      	cbz	r3, 8003456 <RDMSubDevice::GetFactoryDefaults()+0x16>
 8003448:	f7ff ffe2 	bl	8003410 <RDMSubDevice::CalculateChecksum()>
 800344c:	8963      	ldrh	r3, [r4, #10]
 800344e:	4283      	cmp	r3, r0
 8003450:	bf1c      	itt	ne
 8003452:	2300      	movne	r3, #0
 8003454:	7223      	strbne	r3, [r4, #8]
 8003456:	7a20      	ldrb	r0, [r4, #8]
 8003458:	bd10      	pop	{r4, pc}
	...

0800345c <Rdm::Receive(unsigned int)>:
 800345c:	4b02      	ldr	r3, [pc, #8]	; (8003468 <Rdm::Receive(unsigned int)+0xc>)
 800345e:	4601      	mov	r1, r0
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	f000 bc5b 	b.w	8003d1c <Dmx::RdmReceive(unsigned int)>
 8003466:	bf00      	nop
 8003468:	20000638 	andcs	r0, r0, r8, lsr r6

0800346c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800346c:	2300      	movs	r3, #0
 800346e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003472:	4604      	mov	r4, r0
 8003474:	460e      	mov	r6, r1
 8003476:	4617      	mov	r7, r2
 8003478:	4d0b      	ldr	r5, [pc, #44]	; (80034a8 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800347a:	461a      	mov	r2, r3
 800347c:	4601      	mov	r1, r0
 800347e:	6828      	ldr	r0, [r5, #0]
 8003480:	f000 fade 	bl	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003484:	463b      	mov	r3, r7
 8003486:	4632      	mov	r2, r6
 8003488:	4621      	mov	r1, r4
 800348a:	6828      	ldr	r0, [r5, #0]
 800348c:	f000 fc00 	bl	8003c90 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003490:	2100      	movs	r1, #0
 8003492:	2004      	movs	r0, #4
 8003494:	f006 fb2c 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003498:	2301      	movs	r3, #1
 800349a:	4621      	mov	r1, r4
 800349c:	6828      	ldr	r0, [r5, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034a4:	f000 bacc 	b.w	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80034a8:	20000638 	andcs	r0, r0, r8, lsr r6

080034ac <USART2_IRQHandler>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	f3bf 8f5f 	dmb	sy
 80034b2:	2408      	movs	r4, #8
 80034b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034b8:	498c      	ldr	r1, [pc, #560]	; (80036ec <USART2_IRQHandler+0x240>)
 80034ba:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 80034be:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80034c2:	f013 0f02 	tst.w	r3, #2
 80034c6:	4b8a      	ldr	r3, [pc, #552]	; (80036f0 <USART2_IRQHandler+0x244>)
 80034c8:	d016      	beq.n	80034f8 <USART2_IRQHandler+0x4c>
 80034ca:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 80034ce:	f020 0002 	bic.w	r0, r0, #2
 80034d2:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 80034d6:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034e0:	2202      	movs	r2, #2
 80034e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80034e6:	2310      	movs	r3, #16
 80034e8:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 80034ec:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 80034f0:	2320      	movs	r3, #32
 80034f2:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 80034f6:	bd10      	pop	{r4, pc}
 80034f8:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80034fc:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8003500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003504:	280a      	cmp	r0, #10
 8003506:	f200 80ec 	bhi.w	80036e2 <USART2_IRQHandler+0x236>
 800350a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800350e:	00ea000b 	rsceq	r0, sl, fp
 8003512:	00ea0019 	rsceq	r0, sl, r9, lsl r0
 8003516:	005c0039 	subseq	r0, ip, r9, lsr r0
 800351a:	00870077 	addeq	r0, r7, r7, ror r0
 800351e:	00ba00a8 	adcseq	r0, sl, r8, lsr #1
 8003522:	210800ce 	smlabtcs	r8, lr, r0, r0
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800352e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 8003532:	2208      	movs	r2, #8
 8003534:	4b6d      	ldr	r3, [pc, #436]	; (80036ec <USART2_IRQHandler+0x240>)
 8003536:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800353a:	f3bf 8f5f 	dmb	sy
 800353e:	e7da      	b.n	80034f6 <USART2_IRQHandler+0x4a>
 8003540:	b11a      	cbz	r2, 800354a <USART2_IRQHandler+0x9e>
 8003542:	2acc      	cmp	r2, #204	; 0xcc
 8003544:	d016      	beq.n	8003574 <USART2_IRQHandler+0xc8>
 8003546:	2200      	movs	r2, #0
 8003548:	e065      	b.n	8003616 <USART2_IRQHandler+0x16a>
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003552:	4a68      	ldr	r2, [pc, #416]	; (80036f4 <USART2_IRQHandler+0x248>)
 8003554:	6851      	ldr	r1, [r2, #4]
 8003556:	3101      	adds	r1, #1
 8003558:	6051      	str	r1, [r2, #4]
 800355a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800355e:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 8003562:	60d1      	str	r1, [r2, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800356a:	2210      	movs	r2, #16
 800356c:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <USART2_IRQHandler+0x240>)
 800356e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003572:	e7de      	b.n	8003532 <USART2_IRQHandler+0x86>
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <USART2_IRQHandler+0x24c>)
 8003578:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800357c:	2205      	movs	r2, #5
 800357e:	e7f2      	b.n	8003566 <USART2_IRQHandler+0xba>
 8003580:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8003584:	b288      	uxth	r0, r1
 8003586:	541a      	strb	r2, [r3, r0]
 8003588:	1c4a      	adds	r2, r1, #1
 800358a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800358e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003592:	d90b      	bls.n	80035ac <USART2_IRQHandler+0x100>
 8003594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800359c:	2200      	movs	r2, #0
 800359e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80035a2:	2210      	movs	r2, #16
 80035a4:	4b51      	ldr	r3, [pc, #324]	; (80036ec <USART2_IRQHandler+0x240>)
 80035a6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80035aa:	e7c2      	b.n	8003532 <USART2_IRQHandler+0x86>
 80035ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035b0:	4850      	ldr	r0, [pc, #320]	; (80036f4 <USART2_IRQHandler+0x248>)
 80035b2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 80035b6:	68c3      	ldr	r3, [r0, #12]
 80035b8:	60c1      	str	r1, [r0, #12]
 80035ba:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 80035be:	3304      	adds	r3, #4
 80035c0:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 80035c4:	e7b5      	b.n	8003532 <USART2_IRQHandler+0x86>
 80035c6:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 80035ca:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 80035ce:	541a      	strb	r2, [r3, r0]
 80035d0:	1c41      	adds	r1, r0, #1
 80035d2:	3817      	subs	r0, #23
 80035d4:	b289      	uxth	r1, r1
 80035d6:	4422      	add	r2, r4
 80035d8:	28e7      	cmp	r0, #231	; 0xe7
 80035da:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 80035de:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 80035e2:	d808      	bhi.n	80035f6 <USART2_IRQHandler+0x14a>
 80035e4:	789a      	ldrb	r2, [r3, #2]
 80035e6:	428a      	cmp	r2, r1
 80035e8:	d105      	bne.n	80035f6 <USART2_IRQHandler+0x14a>
 80035ea:	2206      	movs	r2, #6
 80035ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80035f0:	2220      	movs	r2, #32
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <USART2_IRQHandler+0x240>)
 80035f4:	e7bb      	b.n	800356e <USART2_IRQHandler+0xc2>
 80035f6:	29ff      	cmp	r1, #255	; 0xff
 80035f8:	d99b      	bls.n	8003532 <USART2_IRQHandler+0x86>
 80035fa:	e7a4      	b.n	8003546 <USART2_IRQHandler+0x9a>
 80035fc:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8003600:	545a      	strb	r2, [r3, r1]
 8003602:	3101      	adds	r1, #1
 8003604:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003608:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800360c:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 8003610:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8003614:	2207      	movs	r2, #7
 8003616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800361a:	e78a      	b.n	8003532 <USART2_IRQHandler+0x86>
 800361c:	2020      	movs	r0, #32
 800361e:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 8003622:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 8003626:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800362a:	541a      	strb	r2, [r3, r0]
 800362c:	1aa2      	subs	r2, r4, r2
 800362e:	b292      	uxth	r2, r2
 8003630:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8003634:	b912      	cbnz	r2, 800363c <USART2_IRQHandler+0x190>
 8003636:	785a      	ldrb	r2, [r3, #1]
 8003638:	2a01      	cmp	r2, #1
 800363a:	d003      	beq.n	8003644 <USART2_IRQHandler+0x198>
 800363c:	2200      	movs	r2, #0
 800363e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003642:	e780      	b.n	8003546 <USART2_IRQHandler+0x9a>
 8003644:	3001      	adds	r0, #1
 8003646:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <USART2_IRQHandler+0x250>)
 8003648:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800364c:	f8a3 0204 	strh.w	r0, [r3, #516]	; 0x204
 8003650:	6850      	ldr	r0, [r2, #4]
 8003652:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <USART2_IRQHandler+0x254>)
 8003654:	6010      	str	r0, [r2, #0]
 8003656:	2210      	movs	r2, #16
 8003658:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 800365c:	e773      	b.n	8003546 <USART2_IRQHandler+0x9a>
 800365e:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8003662:	2aaa      	cmp	r2, #170	; 0xaa
 8003664:	545a      	strb	r2, [r3, r1]
 8003666:	f101 0101 	add.w	r1, r1, #1
 800366a:	b289      	uxth	r1, r1
 800366c:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003670:	d002      	beq.n	8003678 <USART2_IRQHandler+0x1cc>
 8003672:	2909      	cmp	r1, #9
 8003674:	f47f af5d 	bne.w	8003532 <USART2_IRQHandler+0x86>
 8003678:	2200      	movs	r2, #0
 800367a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800367e:	2209      	movs	r2, #9
 8003680:	e7c9      	b.n	8003616 <USART2_IRQHandler+0x16a>
 8003682:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 8003686:	545a      	strb	r2, [r3, r1]
 8003688:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800368c:	3101      	adds	r1, #1
 800368e:	3201      	adds	r2, #1
 8003690:	b292      	uxth	r2, r2
 8003692:	2a0c      	cmp	r2, #12
 8003694:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 8003698:	d002      	beq.n	80036a0 <USART2_IRQHandler+0x1f4>
 800369a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800369e:	e748      	b.n	8003532 <USART2_IRQHandler+0x86>
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 80036a6:	220a      	movs	r2, #10
 80036a8:	e7b5      	b.n	8003616 <USART2_IRQHandler+0x16a>
 80036aa:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 80036ae:	545a      	strb	r2, [r3, r1]
 80036b0:	1c4a      	adds	r2, r1, #1
 80036b2:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80036b6:	b292      	uxth	r2, r2
 80036b8:	3101      	adds	r1, #1
 80036ba:	b289      	uxth	r1, r1
 80036bc:	2904      	cmp	r1, #4
 80036be:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 80036c2:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 80036c6:	f47f af34 	bne.w	8003532 <USART2_IRQHandler+0x86>
 80036ca:	2100      	movs	r1, #0
 80036cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d0:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 80036d4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <USART2_IRQHandler+0x250>)
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <USART2_IRQHandler+0x254>)
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e727      	b.n	8003532 <USART2_IRQHandler+0x86>
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036e8:	e795      	b.n	8003616 <USART2_IRQHandler+0x16a>
 80036ea:	bf00      	nop
 80036ec:	40010000 	andmi	r0, r1, r0
 80036f0:	2000020c 	andcs	r0, r0, ip, lsl #4
 80036f4:	20000628 	andcs	r0, r0, r8, lsr #12
 80036f8:	00cc0001 	sbceq	r0, ip, r1
 80036fc:	e0001000 	and	r1, r0, r0
 8003700:	2000063c 	andcs	r0, r0, ip, lsr r6

08003704 <TIMER1_IRQHandler>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	f3bf 8f5f 	dmb	sy
 800370a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800370e:	2008      	movs	r0, #8
 8003710:	691c      	ldr	r4, [r3, #16]
 8003712:	4923      	ldr	r1, [pc, #140]	; (80037a0 <TIMER1_IRQHandler+0x9c>)
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIMER1_IRQHandler+0xa0>)
 8003716:	8813      	ldrh	r3, [r2, #0]
 8003718:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 800371c:	07a1      	lsls	r1, r4, #30
 800371e:	d51b      	bpl.n	8003758 <TIMER1_IRQHandler+0x54>
 8003720:	07dd      	lsls	r5, r3, #31
 8003722:	d50d      	bpl.n	8003740 <TIMER1_IRQHandler+0x3c>
 8003724:	4d20      	ldr	r5, [pc, #128]	; (80037a8 <TIMER1_IRQHandler+0xa4>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372a:	8013      	strh	r3, [r2, #0]
 800372c:	2110      	movs	r1, #16
 800372e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003732:	2203      	movs	r2, #3
 8003734:	4628      	mov	r0, r5
 8003736:	f005 fa7f 	bl	8008c38 <gpio_init>
 800373a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373e:	616b      	str	r3, [r5, #20]
 8003740:	4621      	mov	r1, r4
 8003742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003746:	f005 fd72 	bl	800922e <timer_interrupt_flag_clear>
 800374a:	2208      	movs	r2, #8
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <TIMER1_IRQHandler+0x9c>)
 800374e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003752:	f3bf 8f5f 	dmb	sy
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	0760      	lsls	r0, r4, #29
 800375a:	d509      	bpl.n	8003770 <TIMER1_IRQHandler+0x6c>
 800375c:	05d9      	lsls	r1, r3, #23
 800375e:	d5ef      	bpl.n	8003740 <TIMER1_IRQHandler+0x3c>
 8003760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003764:	2203      	movs	r2, #3
 8003766:	2118      	movs	r1, #24
 8003768:	480f      	ldr	r0, [pc, #60]	; (80037a8 <TIMER1_IRQHandler+0xa4>)
 800376a:	f005 fa65 	bl	8008c38 <gpio_init>
 800376e:	e7e7      	b.n	8003740 <TIMER1_IRQHandler+0x3c>
 8003770:	0722      	lsls	r2, r4, #28
 8003772:	d5e5      	bpl.n	8003740 <TIMER1_IRQHandler+0x3c>
 8003774:	05db      	lsls	r3, r3, #23
 8003776:	d5e3      	bpl.n	8003740 <TIMER1_IRQHandler+0x3c>
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <TIMER1_IRQHandler+0xa8>)
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	480c      	ldr	r0, [pc, #48]	; (80037b0 <TIMER1_IRQHandler+0xac>)
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	61da      	str	r2, [r3, #28]
 8003786:	4a0b      	ldr	r2, [pc, #44]	; (80037b4 <TIMER1_IRQHandler+0xb0>)
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
 800378a:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	61da      	str	r2, [r3, #28]
 8003798:	f005 fde8 	bl	800936c <usart_dma_transmit_config>
 800379c:	e7d0      	b.n	8003740 <TIMER1_IRQHandler+0x3c>
 800379e:	bf00      	nop
 80037a0:	40010000 	andmi	r0, r1, r0
 80037a4:	20000624 	andcs	r0, r0, r4, lsr #12
 80037a8:	40011000 	andmi	r1, r1, r0
 80037ac:	40020000 	andmi	r0, r2, r0
 80037b0:	40004800 	andmi	r4, r0, r0, lsl #16
 80037b4:	2000041c 	andcs	r0, r0, ip, lsl r4

080037b8 <TIMER2_IRQHandler>:
 80037b8:	b508      	push	{r3, lr}
 80037ba:	f3bf 8f5f 	dmb	sy
 80037be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037c2:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 80037c6:	078b      	lsls	r3, r1, #30
 80037c8:	d511      	bpl.n	80037ee <TIMER2_IRQHandler+0x36>
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <TIMER2_IRQHandler+0x44>)
 80037cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037d0:	2a04      	cmp	r2, #4
 80037d2:	d10c      	bne.n	80037ee <TIMER2_IRQHandler+0x36>
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80037da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037e6:	2210      	movs	r2, #16
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <TIMER2_IRQHandler+0x48>)
 80037ea:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <TIMER2_IRQHandler+0x4c>)
 80037f0:	f005 fd1d 	bl	800922e <timer_interrupt_flag_clear>
 80037f4:	f3bf 8f5f 	dmb	sy
 80037f8:	bd08      	pop	{r3, pc}
 80037fa:	bf00      	nop
 80037fc:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003800:	40010000 	andmi	r0, r1, r0
 8003804:	40000400 	andmi	r0, r0, r0, lsl #8

08003808 <TIMER3_IRQHandler>:
 8003808:	b508      	push	{r3, lr}
 800380a:	f3bf 8f5f 	dmb	sy
 800380e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003812:	4804      	ldr	r0, [pc, #16]	; (8003824 <TIMER3_IRQHandler+0x1c>)
 8003814:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8003818:	f005 fd09 	bl	800922e <timer_interrupt_flag_clear>
 800381c:	f3bf 8f5f 	dmb	sy
 8003820:	bd08      	pop	{r3, pc}
 8003822:	bf00      	nop
 8003824:	40000800 	andmi	r0, r0, r0, lsl #16

08003828 <TIMER6_IRQHandler>:
 8003828:	b508      	push	{r3, lr}
 800382a:	f3bf 8f5f 	dmb	sy
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <TIMER6_IRQHandler+0x24>)
 8003830:	4807      	ldr	r0, [pc, #28]	; (8003850 <TIMER6_IRQHandler+0x28>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	1a52      	subs	r2, r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	2101      	movs	r1, #1
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	f005 fcf5 	bl	800922e <timer_interrupt_flag_clear>
 8003844:	f3bf 8f5f 	dmb	sy
 8003848:	bd08      	pop	{r3, pc}
 800384a:	bf00      	nop
 800384c:	20000628 	andcs	r0, r0, r8, lsr #12
 8003850:	40001400 	andmi	r1, r0, r0, lsl #8

08003854 <Dmx::ClearData(unsigned int)>:
 8003854:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003858:	b510      	push	{r4, lr}
 800385a:	2400      	movs	r4, #0
 800385c:	4a08      	ldr	r2, [pc, #32]	; (8003880 <Dmx::ClearData(unsigned int)+0x2c>)
 800385e:	fb03 2301 	mla	r3, r3, r1, r2
 8003862:	f203 2002 	addw	r0, r3, #514	; 0x202
 8003866:	f823 4b02 	strh.w	r4, [r3], #2
 800386a:	4283      	cmp	r3, r0
 800386c:	d1fb      	bne.n	8003866 <Dmx::ClearData(unsigned int)+0x12>
 800386e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003872:	fb03 2201 	mla	r2, r3, r1, r2
 8003876:	f240 2301 	movw	r3, #513	; 0x201
 800387a:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800387e:	bd10      	pop	{r4, pc}
 8003880:	2000041c 	andcs	r0, r0, ip, lsl r4

08003884 <Dmx::StartData(unsigned int, unsigned int)>:
 8003884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003886:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800388a:	6943      	ldr	r3, [r0, #20]
 800388c:	460c      	mov	r4, r1
 800388e:	4615      	mov	r5, r2
 8003890:	b085      	sub	sp, #20
 8003892:	2b00      	cmp	r3, #0
 8003894:	d16a      	bne.n	800396c <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 8003896:	4e47      	ldr	r6, [pc, #284]	; (80039b4 <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 8003898:	8834      	ldrh	r4, [r6, #0]
 800389a:	2c00      	cmp	r4, #0
 800389c:	d15b      	bne.n	8003956 <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800389e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80038a2:	f005 fa5b 	bl	8008d5c <rcu_periph_clock_enable>
 80038a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038aa:	f005 fbc9 	bl	8009040 <timer_deinit>
 80038ae:	236b      	movs	r3, #107	; 0x6b
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4b41      	ldr	r3, [pc, #260]	; (80039b8 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 80038b4:	4669      	mov	r1, sp
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038bc:	9302      	str	r3, [sp, #8]
 80038be:	f8ad 4004 	strh.w	r4, [sp, #4]
 80038c2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80038c6:	f88d 400e 	strb.w	r4, [sp, #14]
 80038ca:	f005 fc1b 	bl	8009104 <timer_init>
 80038ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038d6:	f005 fcad 	bl	8009234 <timer_flag_clear>
 80038da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038e2:	f005 fca4 	bl	800922e <timer_interrupt_flag_clear>
 80038e6:	2210      	movs	r2, #16
 80038e8:	4621      	mov	r1, r4
 80038ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038ee:	f005 fc66 	bl	80091be <timer_channel_output_mode_config>
 80038f2:	2210      	movs	r2, #16
 80038f4:	2101      	movs	r1, #1
 80038f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80038fa:	f005 fc60 	bl	80091be <timer_channel_output_mode_config>
 80038fe:	4f2f      	ldr	r7, [pc, #188]	; (80039bc <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 8003900:	2210      	movs	r2, #16
 8003902:	2102      	movs	r1, #2
 8003904:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003908:	f005 fc59 	bl	80091be <timer_channel_output_mode_config>
 800390c:	4622      	mov	r2, r4
 800390e:	4621      	mov	r1, r4
 8003910:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003914:	f005 fc79 	bl	800920a <timer_channel_output_pulse_value_config>
 8003918:	2101      	movs	r1, #1
 800391a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800391e:	883a      	ldrh	r2, [r7, #0]
 8003920:	f005 fc73 	bl	800920a <timer_channel_output_pulse_value_config>
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2102      	movs	r1, #2
 800392c:	441a      	add	r2, r3
 800392e:	b292      	uxth	r2, r2
 8003930:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003934:	f005 fc69 	bl	800920a <timer_channel_output_pulse_value_config>
 8003938:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800393c:	210e      	movs	r1, #14
 800393e:	f005 fc72 	bl	8009226 <timer_interrupt_enable>
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 8003948:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800394c:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f005 fc2f 	bl	80091b4 <timer_enable>
 8003956:	2201      	movs	r2, #1
 8003958:	8831      	ldrh	r1, [r6, #0]
 800395a:	fa02 f305 	lsl.w	r3, r2, r5
 800395e:	430b      	orrs	r3, r1
 8003960:	8033      	strh	r3, [r6, #0]
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 8003964:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003968:	b005      	add	sp, #20
 800396a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 8003972:	fb02 3305 	mla	r3, r2, r5, r3
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800397c:	2107      	movs	r1, #7
 800397e:	4620      	mov	r0, r4
 8003980:	f005 fcfa 	bl	8009378 <usart_flag_get>
 8003984:	2800      	cmp	r0, #0
 8003986:	d0f9      	beq.n	800397c <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 8003988:	4620      	mov	r0, r4
 800398a:	4911      	ldr	r1, [pc, #68]	; (80039d0 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800398c:	f005 fd16 	bl	80093bc <usart_interrupt_flag_clear>
 8003990:	f240 3105 	movw	r1, #773	; 0x305
 8003994:	4620      	mov	r0, r4
 8003996:	f005 fcfa 	bl	800938e <usart_interrupt_enable>
 800399a:	2202      	movs	r2, #2
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800399e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80039a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039a6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 80039b2:	e7d9      	b.n	8003968 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 80039b4:	20000624 	andcs	r0, r0, r4, lsr #12
 80039b8:	20000000 	andcs	r0, r0, r0
 80039bc:	20000008 	andcs	r0, r0, r8
 80039c0:	20000004 	andcs	r0, r0, r4
 80039c4:	e000e100 	and	lr, r0, r0, lsl #2
 80039c8:	20000620 	andcs	r0, r0, r0, lsr #12
 80039cc:	2000020c 	andcs	r0, r0, ip, lsl #4
 80039d0:	00050305 	andeq	r0, r5, r5, lsl #6

080039d4 <Dmx::StopData(unsigned int, unsigned int)>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d17      	ldr	r5, [pc, #92]	; (8003a34 <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 80039d8:	4614      	mov	r4, r2
 80039da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80039de:	4603      	mov	r3, r0
 80039e0:	4608      	mov	r0, r1
 80039e2:	b182      	cbz	r2, 8003a06 <Dmx::StopData(unsigned int, unsigned int)+0x32>
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	b97b      	cbnz	r3, 8003a08 <Dmx::StopData(unsigned int, unsigned int)+0x34>
 80039e8:	2201      	movs	r2, #1
 80039ea:	4913      	ldr	r1, [pc, #76]	; (8003a38 <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 80039ec:	f104 0308 	add.w	r3, r4, #8
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	40a2      	lsls	r2, r4
 80039f6:	4313      	orrs	r3, r2
 80039f8:	880a      	ldrh	r2, [r1, #0]
 80039fa:	ea22 0303 	bic.w	r3, r2, r3
 80039fe:	800b      	strh	r3, [r1, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	f240 3105 	movw	r1, #773	; 0x305
 8003a0c:	f005 fcca 	bl	80093a4 <usart_interrupt_disable>
 8003a10:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <Dmx::StopData(unsigned int, unsigned int)+0x68>)
 8003a16:	fb02 3304 	mla	r3, r2, r4, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a24:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8003a30:	e7e6      	b.n	8003a00 <Dmx::StopData(unsigned int, unsigned int)+0x2c>
 8003a32:	bf00      	nop
 8003a34:	20000620 	andcs	r0, r0, r0, lsr #12
 8003a38:	20000624 	andcs	r0, r0, r4, lsr #12
 8003a3c:	2000020c 	andcs	r0, r0, ip, lsl #4

08003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	461d      	mov	r5, r3
 8003a44:	6943      	ldr	r3, [r0, #20]
 8003a46:	4606      	mov	r6, r0
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	4614      	mov	r4, r2
 8003a4c:	d014      	beq.n	8003a78 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 8003a4e:	6142      	str	r2, [r0, #20]
 8003a50:	4910      	ldr	r1, [pc, #64]	; (8003a94 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	f7ff ffbe 	bl	80039d4 <Dmx::StopData(unsigned int, unsigned int)>
 8003a58:	b934      	cbnz	r4, 8003a68 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 8003a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003a60:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8003a64:	b94d      	cbnz	r5, 8003a7a <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	2c01      	cmp	r4, #1
 8003a6a:	d1fb      	bne.n	8003a64 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 8003a72:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8003a76:	e7f5      	b.n	8003a64 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 8003a78:	b135      	cbz	r5, 8003a88 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a80:	2200      	movs	r2, #0
 8003a82:	4904      	ldr	r1, [pc, #16]	; (8003a94 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003a84:	f7ff befe 	b.w	8003884 <Dmx::StartData(unsigned int, unsigned int)>
 8003a88:	462a      	mov	r2, r5
 8003a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a8e:	4901      	ldr	r1, [pc, #4]	; (8003a94 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 8003a90:	f7ff bfa0 	b.w	80039d4 <Dmx::StopData(unsigned int, unsigned int)>
 8003a94:	40004800 	andmi	r4, r0, r0, lsl #16
 8003a98:	40010000 	andmi	r0, r1, r0

08003a9c <Dmx::Dmx()>:
 8003a9c:	225c      	movs	r2, #92	; 0x5c
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003aa4:	e9c0 2300 	strd	r2, r3, [r0]
 8003aa8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003aac:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8003ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab4:	2400      	movs	r4, #0
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	8203      	strh	r3, [r0, #16]
 8003aba:	4b5d      	ldr	r3, [pc, #372]	; (8003c30 <Dmx::Dmx()+0x194>)
 8003abc:	b08b      	sub	sp, #44	; 0x2c
 8003abe:	6018      	str	r0, [r3, #0]
 8003ac0:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <Dmx::Dmx()+0x198>)
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	801c      	strh	r4, [r3, #0]
 8003ac6:	2110      	movs	r1, #16
 8003ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003acc:	485a      	ldr	r0, [pc, #360]	; (8003c38 <Dmx::Dmx()+0x19c>)
 8003ace:	f005 f8b3 	bl	8008c38 <gpio_init>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f7ff febd 	bl	8003854 <Dmx::ClearData(unsigned int)>
 8003ada:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <Dmx::Dmx()+0x1a0>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	4628      	mov	r0, r5
 8003ae0:	601c      	str	r4, [r3, #0]
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	f7ff ffac 	bl	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003ae8:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <Dmx::Dmx()+0x1a4>)
 8003aea:	4e56      	ldr	r6, [pc, #344]	; (8003c44 <Dmx::Dmx()+0x1a8>)
 8003aec:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 8003af0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003af4:	f005 f932 	bl	8008d5c <rcu_periph_clock_enable>
 8003af8:	f240 5001 	movw	r0, #1281	; 0x501
 8003afc:	f005 f92e 	bl	8008d5c <rcu_periph_clock_enable>
 8003b00:	4630      	mov	r0, r6
 8003b02:	2101      	movs	r1, #1
 8003b04:	f004 ff8e 	bl	8008a24 <dma_deinit>
 8003b08:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <Dmx::Dmx()+0x1ac>)
 8003b0a:	2701      	movs	r7, #1
 8003b0c:	e9cd 3403 	strd	r3, r4, [sp, #12]
 8003b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b14:	9308      	str	r3, [sp, #32]
 8003b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1a:	aa03      	add	r2, sp, #12
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003b24:	9406      	str	r4, [sp, #24]
 8003b26:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8003b2a:	f004 ffa1 	bl	8008a70 <dma_init>
 8003b2e:	4639      	mov	r1, r7
 8003b30:	4630      	mov	r0, r6
 8003b32:	f004 ffd7 	bl	8008ae4 <dma_circulation_disable>
 8003b36:	4639      	mov	r1, r7
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f004 ffe3 	bl	8008b04 <dma_memory_to_memory_disable>
 8003b3e:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 8003b42:	f240 7001 	movw	r0, #1793	; 0x701
 8003b46:	f005 f909 	bl	8008d5c <rcu_periph_clock_enable>
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f005 fa78 	bl	8009040 <timer_deinit>
 8003b50:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003b54:	236b      	movs	r3, #107	; 0x6b
 8003b56:	4630      	mov	r0, r6
 8003b58:	a903      	add	r1, sp, #12
 8003b5a:	9303      	str	r3, [sp, #12]
 8003b5c:	f8ad 4010 	strh.w	r4, [sp, #16]
 8003b60:	f8cd 9014 	str.w	r9, [sp, #20]
 8003b64:	f8ad 4018 	strh.w	r4, [sp, #24]
 8003b68:	f88d 401a 	strb.w	r4, [sp, #26]
 8003b6c:	f005 faca 	bl	8009104 <timer_init>
 8003b70:	4649      	mov	r1, r9
 8003b72:	4630      	mov	r0, r6
 8003b74:	f005 fb5e 	bl	8009234 <timer_flag_clear>
 8003b78:	4649      	mov	r1, r9
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f005 fb57 	bl	800922e <timer_interrupt_flag_clear>
 8003b80:	4621      	mov	r1, r4
 8003b82:	4630      	mov	r0, r6
 8003b84:	2210      	movs	r2, #16
 8003b86:	f005 fb1a 	bl	80091be <timer_channel_output_mode_config>
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	2210      	movs	r2, #16
 8003b90:	f005 fb15 	bl	80091be <timer_channel_output_mode_config>
 8003b94:	4630      	mov	r0, r6
 8003b96:	2210      	movs	r2, #16
 8003b98:	2102      	movs	r1, #2
 8003b9a:	f005 fb10 	bl	80091be <timer_channel_output_mode_config>
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	2103      	movs	r1, #3
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f005 fb0b 	bl	80091be <timer_channel_output_mode_config>
 8003ba8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003bac:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8003c4c <Dmx::Dmx()+0x1b0>
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 8003bb6:	f8c8 3000 	str.w	r3, [r8]
 8003bba:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8003bbe:	f005 faf9 	bl	80091b4 <timer_enable>
 8003bc2:	f240 7005 	movw	r0, #1797	; 0x705
 8003bc6:	f005 f8c9 	bl	8008d5c <rcu_periph_clock_enable>
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f005 fa38 	bl	8009040 <timer_deinit>
 8003bd0:	f642 232f 	movw	r3, #10799	; 0x2a2f
 8003bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003bd8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bdc:	4630      	mov	r0, r6
 8003bde:	a903      	add	r1, sp, #12
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	f005 fa8f 	bl	8009104 <timer_init>
 8003be6:	4649      	mov	r1, r9
 8003be8:	4630      	mov	r0, r6
 8003bea:	f005 fb23 	bl	8009234 <timer_flag_clear>
 8003bee:	4649      	mov	r1, r9
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f005 fb1c 	bl	800922e <timer_interrupt_flag_clear>
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f005 fb14 	bl	8009226 <timer_interrupt_enable>
 8003bfe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003c02:	4630      	mov	r0, r6
 8003c04:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 8003c08:	f8c8 3004 	str.w	r3, [r8, #4]
 8003c0c:	f005 fad2 	bl	80091b4 <timer_enable>
 8003c10:	2302      	movs	r3, #2
 8003c12:	2208      	movs	r2, #8
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	490e      	ldr	r1, [pc, #56]	; (8003c50 <Dmx::Dmx()+0x1b4>)
 8003c18:	4623      	mov	r3, r4
 8003c1a:	480e      	ldr	r0, [pc, #56]	; (8003c54 <Dmx::Dmx()+0x1b8>)
 8003c1c:	f005 fe7a 	bl	8009914 <gd32_uart_begin>
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	4628      	mov	r0, r5
 8003c24:	f8c8 3004 	str.w	r3, [r8, #4]
 8003c28:	b00b      	add	sp, #44	; 0x2c
 8003c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000638 	andcs	r0, r0, r8, lsr r6
 8003c34:	20000624 	andcs	r0, r0, r4, lsr #12
 8003c38:	40010c00 	andmi	r0, r1, r0, lsl #24
 8003c3c:	20000620 	andcs	r0, r0, r0, lsr #12
 8003c40:	2000020c 	andcs	r0, r0, ip, lsl #4
 8003c44:	40020000 	andmi	r0, r2, r0
 8003c48:	40004804 	andmi	r4, r0, r4, lsl #16
 8003c4c:	e000e100 	and	lr, r0, r0, lsl #2
 8003c50:	0003d090 	muleq	r3, r0, r0
 8003c54:	40004800 	andmi	r4, r0, r0, lsl #16

08003c58 <Dmx::GetDmxAvailable(unsigned int)>:
 8003c58:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 8003c5e:	fb02 3101 	mla	r1, r2, r1, r3
 8003c62:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 8003c66:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 8003c6a:	bf1f      	itttt	ne
 8003c6c:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 8003c70:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8003c74:	4608      	movne	r0, r1
 8003c76:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003c7a:	4770      	bx	lr
 8003c7c:	2000020c 	andcs	r0, r0, ip, lsl #4

08003c80 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 8003c80:	f3bf 8f5f 	dmb	sy
 8003c84:	4b01      	ldr	r3, [pc, #4]	; (8003c8c <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 8003c86:	0109      	lsls	r1, r1, #4
 8003c88:	5858      	ldr	r0, [r3, r1]
 8003c8a:	4770      	bx	lr
 8003c8c:	20000628 	andcs	r0, r0, r8, lsr #12

08003c90 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	4614      	mov	r4, r2
 8003c94:	461d      	mov	r5, r3
 8003c96:	4e1f      	ldr	r6, [pc, #124]	; (8003d14 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003c98:	2106      	movs	r1, #6
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f005 fb6c 	bl	8009378 <usart_flag_get>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d0f9      	beq.n	8003c98 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 8003ca4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8003ca8:	4e1b      	ldr	r6, [pc, #108]	; (8003d18 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 8003caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	f004 ffc0 	bl	8008c38 <gpio_init>
 8003cb8:	6177      	str	r7, [r6, #20]
 8003cba:	2100      	movs	r1, #0
 8003cbc:	20b0      	movs	r0, #176	; 0xb0
 8003cbe:	f005 ff17 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	2118      	movs	r1, #24
 8003cca:	f004 ffb5 	bl	8008c38 <gpio_init>
 8003cce:	2100      	movs	r1, #0
 8003cd0:	200c      	movs	r0, #12
 8003cd2:	f005 ff0d 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003cd6:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 8003cda:	4425      	add	r5, r4
 8003cdc:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 8003ce0:	42ac      	cmp	r4, r5
 8003ce2:	d109      	bne.n	8003cf8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003ce4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8003ce8:	4c0a      	ldr	r4, [pc, #40]	; (8003d14 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 8003cea:	2106      	movs	r1, #6
 8003cec:	4620      	mov	r0, r4
 8003cee:	f005 fb43 	bl	8009378 <usart_flag_get>
 8003cf2:	2801      	cmp	r0, #1
 8003cf4:	d10b      	bne.n	8003d0e <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 8003cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf8:	2107      	movs	r1, #7
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f005 fb3c 	bl	8009378 <usart_flag_get>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d0f9      	beq.n	8003cf8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 8003d04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d08:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8003d0c:	e7e8      	b.n	8003ce0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 8003d0e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8003d12:	e7ea      	b.n	8003cea <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003d14:	40004800 	andmi	r4, r0, r0, lsl #16
 8003d18:	40011000 	andmi	r1, r1, r0

08003d1c <Dmx::RdmReceive(unsigned int)>:
 8003d1c:	f44f 7204 	mov.w	r2, #528	; 0x210
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <Dmx::RdmReceive(unsigned int)+0x20>)
 8003d22:	fb02 3101 	mla	r1, r2, r1, r3
 8003d26:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 8003d2a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8003d2e:	bf1e      	ittt	ne
 8003d30:	2300      	movne	r3, #0
 8003d32:	4608      	movne	r0, r1
 8003d34:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000020c 	andcs	r0, r0, ip, lsl #4

08003d40 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4604      	mov	r4, r0
 8003d44:	460d      	mov	r5, r1
 8003d46:	4616      	mov	r6, r2
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 8003d4a:	20c8      	movs	r0, #200	; 0xc8
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	f005 fecf 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003d52:	4632      	mov	r2, r6
 8003d54:	4629      	mov	r1, r5
 8003d56:	4620      	mov	r0, r4
 8003d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d5c:	f7ff bb86 	b.w	800346c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 8003d60:	2000063c 	andcs	r0, r0, ip, lsr r6

08003d64 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8003d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	4606      	mov	r6, r0
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	20c8      	movs	r0, #200	; 0xc8
 8003d70:	6819      	ldr	r1, [r3, #0]
 8003d72:	4615      	mov	r5, r2
 8003d74:	f005 febc 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4f19      	ldr	r7, [pc, #100]	; (8003de0 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f7ff fe5d 	bl	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003d86:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 8003d8a:	4e16      	ldr	r6, [pc, #88]	; (8003de4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003d8c:	4425      	add	r5, r4
 8003d8e:	42ac      	cmp	r4, r5
 8003d90:	d115      	bne.n	8003dbe <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003d92:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 8003d96:	4d13      	ldr	r5, [pc, #76]	; (8003de4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 8003d98:	2106      	movs	r1, #6
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f005 faec 	bl	8009378 <usart_flag_get>
 8003da0:	2801      	cmp	r0, #1
 8003da2:	4604      	mov	r4, r0
 8003da4:	d116      	bne.n	8003dd4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 8003da6:	2100      	movs	r1, #0
 8003da8:	2004      	movs	r0, #4
 8003daa:	f005 fea1 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 8003dae:	4623      	mov	r3, r4
 8003db0:	4622      	mov	r2, r4
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	2100      	movs	r1, #0
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f7ff be41 	b.w	8003a40 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8003dbe:	2107      	movs	r1, #7
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f005 fad9 	bl	8009378 <usart_flag_get>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d0f9      	beq.n	8003dbe <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 8003dca:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003dce:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 8003dd2:	e7dc      	b.n	8003d8e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 8003dd4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8003dd8:	e7de      	b.n	8003d98 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 8003dda:	bf00      	nop
 8003ddc:	2000063c 	andcs	r0, r0, ip, lsr r6
 8003de0:	20000638 	andcs	r0, r0, r8, lsr r6
 8003de4:	40004800 	andmi	r4, r0, r0, lsl #16

08003de8 <memcpy.isra.0>:
 8003de8:	f004 bbbe 	b.w	8008568 <memcpy>

08003dec <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	6001      	str	r1, [r0, #0]
 8003df0:	2100      	movs	r1, #0
 8003df2:	4604      	mov	r4, r0
 8003df4:	6041      	str	r1, [r0, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	3008      	adds	r0, #8
 8003dfa:	f004 fbd7 	bl	80085ac <memset>
 8003dfe:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 8003e00:	4620      	mov	r0, r4
 8003e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e04:	237f      	movs	r3, #127	; 0x7f
 8003e06:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8003e0a:	bd10      	pop	{r4, pc}
 8003e0c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

08003e10 <RDMDeviceParams::Load()>:
 8003e10:	4601      	mov	r1, r0
 8003e12:	6800      	ldr	r0, [r0, #0]
 8003e14:	b130      	cbz	r0, 8003e24 <RDMDeviceParams::Load()+0x14>
 8003e16:	b508      	push	{r3, lr}
 8003e18:	6803      	ldr	r3, [r0, #0]
 8003e1a:	3104      	adds	r1, #4
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4798      	blx	r3
 8003e20:	2001      	movs	r0, #1
 8003e22:	bd08      	pop	{r3, pc}
 8003e24:	4770      	bx	lr

08003e26 <RDMDeviceParams::Set(RDMDevice*)>:
 8003e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e28:	6843      	ldr	r3, [r0, #4]
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	07d9      	lsls	r1, r3, #31
 8003e2e:	4605      	mov	r5, r0
 8003e30:	d518      	bpl.n	8003e64 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003e32:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 8003e36:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003e3a:	2e20      	cmp	r6, #32
 8003e3c:	bf28      	it	cs
 8003e3e:	2620      	movcs	r6, #32
 8003e40:	f100 0108 	add.w	r1, r0, #8
 8003e44:	b1e3      	cbz	r3, 8003e80 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 8003e46:	f104 070a 	add.w	r7, r4, #10
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	f7ff ffcb 	bl	8003de8 <memcpy.isra.0>
 8003e52:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003e54:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 8003e58:	b120      	cbz	r0, 8003e64 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4639      	mov	r1, r7
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4798      	blx	r3
 8003e64:	686b      	ldr	r3, [r5, #4]
 8003e66:	079a      	lsls	r2, r3, #30
 8003e68:	bf44      	itt	mi
 8003e6a:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 8003e6e:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 8003e72:	075b      	lsls	r3, r3, #29
 8003e74:	bf44      	itt	mi
 8003e76:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 8003e7a:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 8003e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e80:	4632      	mov	r2, r6
 8003e82:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8003e86:	f7ff ffaf 	bl	8003de8 <memcpy.isra.0>
 8003e8a:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 8003e8e:	e7e9      	b.n	8003e64 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

08003e90 <RDMDeviceParams::Dump()>:
 8003e90:	4770      	bx	lr

08003e92 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 8003e92:	4770      	bx	lr

08003e94 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 8003e94:	4770      	bx	lr
	...

08003e98 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 8003e9e:	f840 3b88 	str.w	r3, [r0], #136
 8003ea2:	f7ff f997 	bl	80031d4 <RDMSubDevices::~RDMSubDevices()>
 8003ea6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8003eaa:	f7fe fb67 	bl	800257c <RDMSensors::~RDMSensors()>
 8003eae:	4620      	mov	r0, r4
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0800a2f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp, pc}

08003eb8 <RDMDeviceResponder::~RDMDeviceResponder()>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	4604      	mov	r4, r0
 8003ebc:	f7ff ffec 	bl	8003e98 <RDMDeviceResponder::~RDMDeviceResponder()>
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f004 fad8 	bl	8008476 <operator delete(void*)>
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	bd10      	pop	{r4, pc}

08003eca <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 8003eca:	b470      	push	{r4, r5, r6}
 8003ecc:	790a      	ldrb	r2, [r1, #4]
 8003ece:	680b      	ldr	r3, [r1, #0]
 8003ed0:	2a20      	cmp	r2, #32
 8003ed2:	bf28      	it	cs
 8003ed4:	2220      	movcs	r2, #32
 8003ed6:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 8003eda:	189c      	adds	r4, r3, r2
 8003edc:	b189      	cbz	r1, 8003f02 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 8003ede:	f100 010a 	add.w	r1, r0, #10
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d107      	bne.n	8003ef8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x2e>
 8003ee8:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 8003eec:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8003eee:	b170      	cbz	r0, 8003f0e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x44>
 8003ef0:	bc70      	pop	{r4, r5, r6}
 8003ef2:	6803      	ldr	r3, [r0, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4718      	bx	r3
 8003ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003efc:	f805 6b01 	strb.w	r6, [r5], #1
 8003f00:	e7f0      	b.n	8003ee4 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x1a>
 8003f02:	f100 0151 	add.w	r1, r0, #81	; 0x51
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	d103      	bne.n	8003f12 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x48>
 8003f0a:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
 8003f0e:	bc70      	pop	{r4, r5, r6}
 8003f10:	4770      	bx	lr
 8003f12:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003f16:	f801 5b01 	strb.w	r5, [r1], #1
 8003f1a:	e7f4      	b.n	8003f06 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3c>

08003f1c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 8003f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1e:	4604      	mov	r4, r0
 8003f20:	1d07      	adds	r7, r0, #4
 8003f22:	4638      	mov	r0, r7
 8003f24:	460e      	mov	r6, r1
 8003f26:	4615      	mov	r5, r2
 8003f28:	f001 f9f4 	bl	8005314 <RDMDevice::RDMDevice()>
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb0>)
 8003f30:	f840 3b7c 	str.w	r3, [r0], #124
 8003f34:	f001 f9ae 	bl	8005294 <RDMIdentify::RDMIdentify()>
 8003f38:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8003f3c:	f7fe faf0 	bl	8002520 <RDMSensors::RDMSensors()>
 8003f40:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8003f44:	f7ff f93e 	bl	80031c4 <RDMSubDevices::RDMSubDevices()>
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601c      	str	r4, [r3, #0]
 8003f4e:	2365      	movs	r3, #101	; 0x65
 8003f50:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 8003f54:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8003f58:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 8003f62:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8003f66:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
 8003f6a:	f104 0399 	add.w	r3, r4, #153	; 0x99
 8003f6e:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 8003f72:	428b      	cmp	r3, r1
 8003f74:	d123      	bne.n	8003fbe <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa2>
 8003f76:	2100      	movs	r1, #0
 8003f78:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d121      	bne.n	8003fc4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa8>
 8003f80:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8003f84:	f7fd fe62 	bl	8001c4c <RDMSoftwareVersion::GetVersion()>
 8003f88:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8003f8c:	f7fd fe62 	bl	8001c54 <RDMSoftwareVersion::GetVersionLength()>
 8003f90:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003f94:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	b91b      	cbnz	r3, 8003fa6 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8a>
 8003f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fa2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb8>)
 8003fa8:	4638      	mov	r0, r7
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2317      	movs	r3, #23
 8003fae:	4669      	mov	r1, sp
 8003fb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8003fb4:	f7ff ff89 	bl	8003eca <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003fb8:	4620      	mov	r0, r4
 8003fba:	b003      	add	sp, #12
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8003fc2:	e7d6      	b.n	8003f72 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x56>
 8003fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc8:	e7d8      	b.n	8003f7c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x60>
 8003fca:	bf00      	nop
 8003fcc:	0800a2f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sp, pc}
 8003fd0:	20000640 	andcs	r0, r0, r0, asr #12
 8003fd4:	0800a2d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sp, pc}

08003fd8 <RDMDeviceResponder::Init()>:
 8003fd8:	2301      	movs	r3, #1
 8003fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fdc:	4604      	mov	r4, r0
 8003fde:	f06f 050d 	mvn.w	r5, #13
 8003fe2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 8003fe6:	f100 0355 	add.w	r3, r0, #85	; 0x55
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 8003ff0:	4669      	mov	r1, sp
 8003ff2:	3004      	adds	r0, #4
 8003ff4:	f88d 3004 	strb.w	r3, [sp, #4]
 8003ff8:	f7ff ff67 	bl	8003eca <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8003ffc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004000:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004004:	f104 020e 	add.w	r2, r4, #14
 8004008:	1b2d      	subs	r5, r5, r4
 800400a:	18a9      	adds	r1, r5, r2
 800400c:	4288      	cmp	r0, r1
 800400e:	d84b      	bhi.n	80040a8 <RDMDeviceResponder::Init()+0xd0>
 8004010:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 8004014:	f7fd fe20 	bl	8001c58 <RDMSoftwareVersion::GetVersionId()>
 8004018:	2201      	movs	r2, #1
 800401a:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 800401e:	2200      	movs	r2, #0
 8004020:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004024:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8004028:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 800402c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 8004030:	0a1a      	lsrs	r2, r3, #8
 8004032:	0e03      	lsrs	r3, r0, #24
 8004034:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 8004038:	0c03      	lsrs	r3, r0, #16
 800403a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800403e:	0a03      	lsrs	r3, r0, #8
 8004040:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8004044:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004048:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 800404c:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8004056:	685d      	ldr	r5, [r3, #4]
 8004058:	bb5d      	cbnz	r5, 80040b2 <RDMDeviceResponder::Init()+0xda>
 800405a:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 800405e:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8004062:	0a03      	lsrs	r3, r0, #8
 8004064:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8004068:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800406c:	2301      	movs	r3, #1
 800406e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8004072:	0a33      	lsrs	r3, r6, #8
 8004074:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8004078:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800407c:	b2c0      	uxtb	r0, r0
 800407e:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 8004082:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 8004086:	f884 60aa 	strb.w	r6, [r4, #170]	; 0xaa
 800408a:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800408e:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 8004092:	4293      	cmp	r3, r2
 8004094:	d126      	bne.n	80040e4 <RDMDeviceResponder::Init()+0x10c>
 8004096:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800409a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800409e:	4413      	add	r3, r2
 80040a0:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80040a4:	b002      	add	sp, #8
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80040ac:	440b      	add	r3, r1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	e7ab      	b.n	800400a <RDMDeviceResponder::Init()+0x32>
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	4628      	mov	r0, r5
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	4798      	blx	r3
 80040ba:	0a00      	lsrs	r0, r0, #8
 80040bc:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	4628      	mov	r0, r5
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	4798      	blx	r3
 80040c8:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	4628      	mov	r0, r5
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4798      	blx	r3
 80040d4:	0a00      	lsrs	r0, r0, #8
 80040d6:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	4628      	mov	r0, r5
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4798      	blx	r3
 80040e2:	e7c3      	b.n	800406c <RDMDeviceResponder::Init()+0x94>
 80040e4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80040e8:	7499      	strb	r1, [r3, #18]
 80040ea:	e7d2      	b.n	8004092 <RDMDeviceResponder::Init()+0xba>

080040ec <RDMDeviceResponder::Print()>:
 80040ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	3004      	adds	r0, #4
 80040f2:	f001 f981 	bl	80053f8 <RDMDevice::Print()>
 80040f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040fa:	481c      	ldr	r0, [pc, #112]	; (800416c <RDMDeviceResponder::Print()+0x80>)
 80040fc:	681d      	ldr	r5, [r3, #0]
 80040fe:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8004100:	f7fd ffa6 	bl	8002050 <printf>
 8004104:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 8004108:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800410c:	4818      	ldr	r0, [pc, #96]	; (8004170 <RDMDeviceResponder::Print()+0x84>)
 800410e:	f7fd ff9f 	bl	8002050 <printf>
 8004112:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004116:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 800411a:	4816      	ldr	r0, [pc, #88]	; (8004174 <RDMDeviceResponder::Print()+0x88>)
 800411c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8004120:	f7fd ff96 	bl	8002050 <printf>
 8004124:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8004128:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
 800412c:	3508      	adds	r5, #8
 800412e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8004132:	4811      	ldr	r0, [pc, #68]	; (8004178 <RDMDeviceResponder::Print()+0x8c>)
 8004134:	f7fd ff8c 	bl	8002050 <printf>
 8004138:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 800413c:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 8004140:	b2f3      	uxtb	r3, r6
 8004142:	9500      	str	r5, [sp, #0]
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <RDMDeviceResponder::Print()+0x90>)
 8004146:	f7fd ff83 	bl	8002050 <printf>
 800414a:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800414e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <RDMDeviceResponder::Print()+0x94>)
 8004154:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8004158:	f7fd ff7a 	bl	8002050 <printf>
 800415c:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 8004160:	4808      	ldr	r0, [pc, #32]	; (8004184 <RDMDeviceResponder::Print()+0x98>)
 8004162:	b002      	add	sp, #8
 8004164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004168:	f7fd bf72 	b.w	8002050 <printf>
 800416c:	0800a224 	stmdaeq	r0, {r2, r5, r9, sp, pc}
 8004170:	0800a241 	stmdaeq	r0, {r0, r6, r9, sp, pc}
 8004174:	0800a25a 	stmdaeq	r0, {r1, r3, r4, r6, r9, sp, pc}
 8004178:	0800a272 	stmdaeq	r0, {r1, r4, r5, r6, r9, sp, pc}
 800417c:	0800a28a 	stmdaeq	r0, {r1, r3, r7, r9, sp, pc}
 8004180:	0800a2a8 	stmdaeq	r0, {r3, r5, r7, r9, sp, pc}
 8004184:	0800a2c0 	stmdaeq	r0, {r6, r7, r9, sp, pc}

08004188 <memcmp>:
 8004188:	b510      	push	{r4, lr}
 800418a:	3901      	subs	r1, #1
 800418c:	4402      	add	r2, r0
 800418e:	4290      	cmp	r0, r2
 8004190:	d101      	bne.n	8004196 <memcmp+0xe>
 8004192:	2000      	movs	r0, #0
 8004194:	e005      	b.n	80041a2 <memcmp+0x1a>
 8004196:	7803      	ldrb	r3, [r0, #0]
 8004198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800419c:	42a3      	cmp	r3, r4
 800419e:	d001      	beq.n	80041a4 <memcmp+0x1c>
 80041a0:	1b18      	subs	r0, r3, r4
 80041a2:	bd10      	pop	{r4, pc}
 80041a4:	3001      	adds	r0, #1
 80041a6:	e7f2      	b.n	800418e <memcmp+0x6>

080041a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>:
 80041a8:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80041ac:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
 80041b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041b4:	3b01      	subs	r3, #1
 80041b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041ba:	6858      	ldr	r0, [r3, #4]
 80041bc:	6803      	ldr	r3, [r0, #0]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	4718      	bx	r3

080041c2 <memcpy.isra.0>:
 80041c2:	3801      	subs	r0, #1
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	d100      	bne.n	80041cc <memcpy.isra.0+0xa>
 80041ca:	4770      	bx	lr
 80041cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041d0:	f800 3f01 	strb.w	r3, [r0, #1]!
 80041d4:	e7f7      	b.n	80041c6 <memcpy.isra.0+0x4>

080041d6 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
 80041d6:	b570      	push	{r4, r5, r6, lr}
 80041d8:	4604      	mov	r4, r0
 80041da:	1e50      	subs	r0, r2, #1
 80041dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80041e0:	4615      	mov	r5, r2
 80041e2:	d221      	bcs.n	8004228 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 80041e4:	b129      	cbz	r1, 80041f2 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x1c>
 80041e6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80041ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80041ee:	f7ff b82f 	b.w	8003250 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
 80041f2:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80041f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80041fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041fe:	3b01      	subs	r3, #1
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	6858      	ldr	r0, [r3, #4]
 8004206:	b178      	cbz	r0, 8004228 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x52>
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	4629      	mov	r1, r5
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4798      	blx	r3
 8004210:	b120      	cbz	r0, 800421c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x46>
 8004212:	0a2b      	lsrs	r3, r5, #8
 8004214:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 8004218:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	4620      	mov	r0, r4
 8004220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4718      	bx	r3
 8004228:	bd70      	pop	{r4, r5, r6, pc}

0800422a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
 800422a:	b111      	cbz	r1, 8004232 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x8>
 800422c:	3088      	adds	r0, #136	; 0x88
 800422e:	f7ff b839 	b.w	80032a4 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
 8004232:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8004236:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800423a:	3a01      	subs	r2, #1
 800423c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004240:	4770      	bx	lr

08004242 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
 8004242:	b111      	cbz	r1, 800424a <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x8>
 8004244:	3088      	adds	r0, #136	; 0x88
 8004246:	f7ff b825 	b.w	8003294 <RDMSubDevices::GetPersonalityCount(unsigned short)>
 800424a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
 800424e:	4770      	bx	lr

08004250 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4604      	mov	r4, r0
 8004254:	b121      	cbz	r1, 8004260 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x10>
 8004256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800425a:	3088      	adds	r0, #136	; 0x88
 800425c:	f7ff b811 	b.w	8003282 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004260:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
 8004264:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8004268:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800426c:	3a01      	subs	r2, #1
 800426e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004272:	685d      	ldr	r5, [r3, #4]
 8004274:	b305      	cbz	r5, 80042b8 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x68>
 8004276:	682b      	ldr	r3, [r5, #0]
 8004278:	4628      	mov	r0, r5
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	4798      	blx	r3
 800427e:	0a00      	lsrs	r0, r0, #8
 8004280:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	4628      	mov	r0, r5
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	4798      	blx	r3
 800428c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	4628      	mov	r0, r5
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4798      	blx	r3
 8004298:	0a00      	lsrs	r0, r0, #8
 800429a:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	4628      	mov	r0, r5
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4798      	blx	r3
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 80042ac:	4629      	mov	r1, r5
 80042ae:	4620      	mov	r0, r4
 80042b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4718      	bx	r3
 80042b8:	bd70      	pop	{r4, r5, r6, pc}

080042ba <RDMHandler::RDMHandler(bool)>:
 80042ba:	2200      	movs	r2, #0
 80042bc:	7001      	strb	r1, [r0, #0]
 80042be:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80042c2:	7042      	strb	r2, [r0, #1]
 80042c4:	4770      	bx	lr

080042c6 <RDMHandler::HandleString(char const*, unsigned int)>:
 80042c6:	6883      	ldr	r3, [r0, #8]
 80042c8:	75da      	strb	r2, [r3, #23]
 80042ca:	3318      	adds	r3, #24
 80042cc:	440a      	add	r2, r1
 80042ce:	4291      	cmp	r1, r2
 80042d0:	d100      	bne.n	80042d4 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 80042d2:	4770      	bx	lr
 80042d4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80042d8:	f803 0b01 	strb.w	r0, [r3], #1
 80042dc:	e7f7      	b.n	80042ce <RDMHandler::HandleString(char const*, unsigned int)+0x8>
	...

080042e0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 80042e6:	25cc      	movs	r5, #204	; 0xcc
 80042e8:	701d      	strb	r5, [r3, #0]
 80042ea:	7825      	ldrb	r5, [r4, #0]
 80042ec:	705d      	strb	r5, [r3, #1]
 80042ee:	7ba5      	ldrb	r5, [r4, #14]
 80042f0:	73dd      	strb	r5, [r3, #15]
 80042f2:	2500      	movs	r5, #0
 80042f4:	745d      	strb	r5, [r3, #17]
 80042f6:	7c65      	ldrb	r5, [r4, #17]
 80042f8:	749d      	strb	r5, [r3, #18]
 80042fa:	7ca5      	ldrb	r5, [r4, #18]
 80042fc:	74dd      	strb	r5, [r3, #19]
 80042fe:	7ce5      	ldrb	r5, [r4, #19]
 8004300:	3501      	adds	r5, #1
 8004302:	751d      	strb	r5, [r3, #20]
 8004304:	7d25      	ldrb	r5, [r4, #20]
 8004306:	755d      	strb	r5, [r3, #21]
 8004308:	7d65      	ldrb	r5, [r4, #21]
 800430a:	759d      	strb	r5, [r3, #22]
 800430c:	b119      	cbz	r1, 8004316 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800430e:	1e4d      	subs	r5, r1, #1
 8004310:	2d01      	cmp	r5, #1
 8004312:	d922      	bls.n	800435a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x7a>
 8004314:	bd70      	pop	{r4, r5, r6, pc}
 8004316:	7dda      	ldrb	r2, [r3, #23]
 8004318:	7419      	strb	r1, [r3, #16]
 800431a:	3218      	adds	r2, #24
 800431c:	709a      	strb	r2, [r3, #2]
 800431e:	4a16      	ldr	r2, [pc, #88]	; (8004378 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x98>)
 8004320:	f104 0108 	add.w	r1, r4, #8
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	1cdd      	adds	r5, r3, #3
 8004328:	3204      	adds	r2, #4
 800432a:	340e      	adds	r4, #14
 800432c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004330:	f805 6b01 	strb.w	r6, [r5], #1
 8004334:	f812 6b01 	ldrb.w	r6, [r2], #1
 8004338:	42a1      	cmp	r1, r4
 800433a:	716e      	strb	r6, [r5, #5]
 800433c:	d1f6      	bne.n	800432c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4c>
 800433e:	2200      	movs	r2, #0
 8004340:	7899      	ldrb	r1, [r3, #2]
 8004342:	4613      	mov	r3, r2
 8004344:	6884      	ldr	r4, [r0, #8]
 8004346:	428a      	cmp	r2, r1
 8004348:	eb04 0502 	add.w	r5, r4, r2
 800434c:	d30e      	bcc.n	800436c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8c>
 800434e:	0a1a      	lsrs	r2, r3, #8
 8004350:	702a      	strb	r2, [r5, #0]
 8004352:	6882      	ldr	r2, [r0, #8]
 8004354:	440a      	add	r2, r1
 8004356:	7053      	strb	r3, [r2, #1]
 8004358:	e7dc      	b.n	8004314 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800435a:	7419      	strb	r1, [r3, #16]
 800435c:	2102      	movs	r1, #2
 800435e:	251a      	movs	r5, #26
 8004360:	75d9      	strb	r1, [r3, #23]
 8004362:	0a11      	lsrs	r1, r2, #8
 8004364:	709d      	strb	r5, [r3, #2]
 8004366:	7619      	strb	r1, [r3, #24]
 8004368:	765a      	strb	r2, [r3, #25]
 800436a:	e7d8      	b.n	800431e <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800436c:	5ca5      	ldrb	r5, [r4, r2]
 800436e:	3201      	adds	r2, #1
 8004370:	442b      	add	r3, r5
 8004372:	b29b      	uxth	r3, r3
 8004374:	e7e7      	b.n	8004346 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x66>
 8004376:	bf00      	nop
 8004378:	20000640 	andcs	r0, r0, r0, asr #12

0800437c <RDMHandler::RespondMessageAck()>:
 800437c:	6843      	ldr	r3, [r0, #4]
 800437e:	7d9a      	ldrb	r2, [r3, #22]
 8004380:	b90a      	cbnz	r2, 8004386 <RDMHandler::RespondMessageAck()+0xa>
 8004382:	2218      	movs	r2, #24
 8004384:	705a      	strb	r2, [r3, #1]
 8004386:	2200      	movs	r2, #0
 8004388:	4611      	mov	r1, r2
 800438a:	f7ff bfa9 	b.w	80042e0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

08004390 <RDMHandler::GetSupportedParameters(unsigned short)>:
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <RDMHandler::GetSupportedParameters(unsigned short)+0x64>)
 8004392:	2900      	cmp	r1, #0
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <RDMHandler::GetSupportedParameters(unsigned short)+0x68>)
 8004396:	bf08      	it	eq
 8004398:	461a      	moveq	r2, r3
 800439a:	b4f0      	push	{r4, r5, r6, r7}
 800439c:	bf14      	ite	ne
 800439e:	2108      	movne	r1, #8
 80043a0:	211e      	moveq	r1, #30
 80043a2:	2518      	movs	r5, #24
 80043a4:	4614      	mov	r4, r2
 80043a6:	2300      	movs	r3, #0
 80043a8:	fb05 2501 	mla	r5, r5, r1, r2
 80043ac:	7d66      	ldrb	r6, [r4, #21]
 80043ae:	b10e      	cbz	r6, 80043b4 <RDMHandler::GetSupportedParameters(unsigned short)+0x24>
 80043b0:	3301      	adds	r3, #1
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3418      	adds	r4, #24
 80043b6:	42ac      	cmp	r4, r5
 80043b8:	d1f8      	bne.n	80043ac <RDMHandler::GetSupportedParameters(unsigned short)+0x1c>
 80043ba:	6886      	ldr	r6, [r0, #8]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	75f3      	strb	r3, [r6, #23]
 80043c0:	230c      	movs	r3, #12
 80043c2:	4359      	muls	r1, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	461c      	mov	r4, r3
 80043c8:	f102 0c15 	add.w	ip, r2, #21
 80043cc:	f81c 5013 	ldrb.w	r5, [ip, r3, lsl #1]
 80043d0:	b14d      	cbz	r5, 80043e6 <RDMHandler::GetSupportedParameters(unsigned short)+0x56>
 80043d2:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80043d6:	eb06 0744 	add.w	r7, r6, r4, lsl #1
 80043da:	0a2d      	lsrs	r5, r5, #8
 80043dc:	763d      	strb	r5, [r7, #24]
 80043de:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80043e2:	3401      	adds	r4, #1
 80043e4:	767d      	strb	r5, [r7, #25]
 80043e6:	330c      	adds	r3, #12
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d1ef      	bne.n	80043cc <RDMHandler::GetSupportedParameters(unsigned short)+0x3c>
 80043ec:	bcf0      	pop	{r4, r5, r6, r7}
 80043ee:	f7ff bfc5 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80043f2:	bf00      	nop
 80043f4:	0800a324 	stmdaeq	r0, {r2, r5, r8, r9, sp, pc}
 80043f8:	0800a5f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, sp, pc}

080043fc <RDMHandler::GetDeviceInfo(unsigned short)>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 8004400:	4605      	mov	r5, r0
 8004402:	681c      	ldr	r4, [r3, #0]
 8004404:	b349      	cbz	r1, 800445a <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 8004406:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800440a:	f7fe fefb 	bl	8003204 <RDMSubDevices::GetInfo(unsigned short)>
 800440e:	b1b8      	cbz	r0, 8004440 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 8004410:	8803      	ldrh	r3, [r0, #0]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8004418:	8803      	ldrh	r3, [r0, #0]
 800441a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800441e:	7903      	ldrb	r3, [r0, #4]
 8004420:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 8004424:	7943      	ldrb	r3, [r0, #5]
 8004426:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800442a:	8843      	ldrh	r3, [r0, #2]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 8004432:	8843      	ldrh	r3, [r0, #2]
 8004434:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 8004438:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800443c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 8004440:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 8004444:	2213      	movs	r2, #19
 8004446:	68a8      	ldr	r0, [r5, #8]
 8004448:	75c2      	strb	r2, [r0, #23]
 800444a:	3018      	adds	r0, #24
 800444c:	f7ff feb9 	bl	80041c2 <memcpy.isra.0>
 8004450:	4628      	mov	r0, r5
 8004452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004456:	f7ff bf91 	b.w	800437c <RDMHandler::RespondMessageAck()>
 800445a:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800445e:	e7f1      	b.n	8004444 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 8004460:	20000640 	andcs	r0, r0, r0, asr #12

08004464 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	2301      	movs	r3, #1
 8004468:	6886      	ldr	r6, [r0, #8]
 800446a:	4605      	mov	r5, r0
 800446c:	75f3      	strb	r3, [r6, #23]
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 8004470:	681c      	ldr	r4, [r3, #0]
 8004472:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8004476:	b37b      	cbz	r3, 80044d8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 8004478:	f06f 0c0d 	mvn.w	ip, #13
 800447c:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
 8004480:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004484:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004488:	f104 020e 	add.w	r2, r4, #14
 800448c:	ebac 0c04 	sub.w	ip, ip, r4
 8004490:	eb0c 0702 	add.w	r7, ip, r2
 8004494:	4287      	cmp	r7, r0
 8004496:	d30a      	bcc.n	80044ae <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 8004498:	4299      	cmp	r1, r3
 800449a:	d00d      	beq.n	80044b8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800449c:	2300      	movs	r3, #0
 800449e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 80044a2:	7633      	strb	r3, [r6, #24]
 80044a4:	4628      	mov	r0, r5
 80044a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044aa:	f7ff bf67 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80044ae:	f812 7b01 	ldrb.w	r7, [r2], #1
 80044b2:	443b      	add	r3, r7
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	e7eb      	b.n	8004490 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 80044b8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80044bc:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 80044c0:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
 80044c4:	440b      	add	r3, r1
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d1e8      	bne.n	800449c <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 80044ca:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80044ce:	f7fe ff2d 	bl	800332c <RDMSubDevices::GetFactoryDefaults()>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d0e2      	beq.n	800449e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 80044d8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 80044dc:	e7e1      	b.n	80044a2 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 80044de:	bf00      	nop
 80044e0:	20000640 	andcs	r0, r0, r0, asr #12

080044e4 <RDMHandler::GetProductDetailIdList(unsigned short)>:
 80044e4:	2102      	movs	r1, #2
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <RDMHandler::GetProductDetailIdList(unsigned short)+0x18>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80044ee:	6883      	ldr	r3, [r0, #8]
 80044f0:	75d9      	strb	r1, [r3, #23]
 80044f2:	0a11      	lsrs	r1, r2, #8
 80044f4:	7619      	strb	r1, [r3, #24]
 80044f6:	765a      	strb	r2, [r3, #25]
 80044f8:	f7ff bf40 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80044fc:	20000640 	andcs	r0, r0, r0, asr #12

08004500 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	2209      	movs	r2, #9
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 8004508:	f7ff fedd 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 800450c:	4620      	mov	r0, r4
 800450e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004512:	f7ff bf33 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004516:	bf00      	nop
 8004518:	0800a308 	stmdaeq	r0, {r3, r8, r9, sp, pc}

0800451c <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800451c:	b510      	push	{r4, lr}
 800451e:	4604      	mov	r4, r0
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 8004528:	312f      	adds	r1, #47	; 0x2f
 800452a:	f7ff fecc 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 800452e:	4620      	mov	r0, r4
 8004530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004534:	f7ff bf22 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004538:	20000640 	andcs	r0, r0, r0, asr #12

0800453c <RDMHandler::GetDeviceLabel(unsigned short)>:
 800453c:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800453e:	b513      	push	{r0, r1, r4, lr}
 8004540:	4604      	mov	r4, r0
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	b171      	cbz	r1, 8004564 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 8004546:	466a      	mov	r2, sp
 8004548:	3088      	adds	r0, #136	; 0x88
 800454a:	f7fe fe63 	bl	8003214 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 800454e:	4620      	mov	r0, r4
 8004550:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004554:	9900      	ldr	r1, [sp, #0]
 8004556:	f7ff feb6 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff ff0e 	bl	800437c <RDMHandler::RespondMessageAck()>
 8004560:	b002      	add	sp, #8
 8004562:	bd10      	pop	{r4, pc}
 8004564:	f100 030e 	add.w	r3, r0, #14
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800456e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004572:	e7ec      	b.n	800454e <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 8004574:	20000640 	andcs	r0, r0, r0, asr #12

08004578 <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <RDMHandler::GetSoftwareVersionLabel(unsigned short)+0x20>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8004584:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004588:	f7ff fe9d 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 800458c:	4620      	mov	r0, r4
 800458e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004592:	f7ff bef3 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004596:	bf00      	nop
 8004598:	20000640 	andcs	r0, r0, r0, asr #12

0800459c <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800459c:	2201      	movs	r2, #1
 800459e:	6883      	ldr	r3, [r0, #8]
 80045a0:	75da      	strb	r2, [r3, #23]
 80045a2:	4a02      	ldr	r2, [pc, #8]	; (80045ac <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	761a      	strb	r2, [r3, #24]
 80045a8:	f7ff bee8 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80045ac:	20000644 	andcs	r0, r0, r4, asr #12

080045b0 <RDMHandler::GetLanguage(unsigned short)>:
 80045b0:	b510      	push	{r4, lr}
 80045b2:	4604      	mov	r4, r0
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <RDMHandler::GetLanguage(unsigned short)+0x1c>)
 80045b6:	2202      	movs	r2, #2
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	31bf      	adds	r1, #191	; 0xbf
 80045bc:	f7ff fe83 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 80045c0:	4620      	mov	r0, r4
 80045c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c6:	f7ff bed9 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80045ca:	bf00      	nop
 80045cc:	20000640 	andcs	r0, r0, r0, asr #12

080045d0 <RDMHandler::GetPersonality(unsigned short)>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	4f0d      	ldr	r7, [pc, #52]	; (8004608 <RDMHandler::GetPersonality(unsigned short)+0x38>)
 80045d4:	4604      	mov	r4, r0
 80045d6:	460e      	mov	r6, r1
 80045d8:	6838      	ldr	r0, [r7, #0]
 80045da:	b189      	cbz	r1, 8004600 <RDMHandler::GetPersonality(unsigned short)+0x30>
 80045dc:	3088      	adds	r0, #136	; 0x88
 80045de:	f7fe fe48 	bl	8003272 <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
 80045e2:	4605      	mov	r5, r0
 80045e4:	4631      	mov	r1, r6
 80045e6:	6838      	ldr	r0, [r7, #0]
 80045e8:	f7ff fe2b 	bl	8004242 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 80045ec:	2202      	movs	r2, #2
 80045ee:	68a3      	ldr	r3, [r4, #8]
 80045f0:	7658      	strb	r0, [r3, #25]
 80045f2:	75da      	strb	r2, [r3, #23]
 80045f4:	761d      	strb	r5, [r3, #24]
 80045f6:	4620      	mov	r0, r4
 80045f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045fc:	f7ff bebe 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004600:	f890 50a5 	ldrb.w	r5, [r0, #165]	; 0xa5
 8004604:	e7ee      	b.n	80045e4 <RDMHandler::GetPersonality(unsigned short)+0x14>
 8004606:	bf00      	nop
 8004608:	20000640 	andcs	r0, r0, r0, asr #12

0800460c <RDMHandler::GetDmxStartAddress(unsigned short)>:
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <RDMHandler::GetDmxStartAddress(unsigned short)+0x38>)
 800460e:	b510      	push	{r4, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	b169      	cbz	r1, 8004632 <RDMHandler::GetDmxStartAddress(unsigned short)+0x26>
 8004616:	3088      	adds	r0, #136	; 0x88
 8004618:	f7fe fe12 	bl	8003240 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
 800461c:	2202      	movs	r2, #2
 800461e:	68a3      	ldr	r3, [r4, #8]
 8004620:	75da      	strb	r2, [r3, #23]
 8004622:	0a02      	lsrs	r2, r0, #8
 8004624:	7658      	strb	r0, [r3, #25]
 8004626:	761a      	strb	r2, [r3, #24]
 8004628:	4620      	mov	r0, r4
 800462a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800462e:	f7ff bea5 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004632:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 8004636:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 800463a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800463e:	b298      	uxth	r0, r3
 8004640:	e7ec      	b.n	800461c <RDMHandler::GetDmxStartAddress(unsigned short)+0x10>
 8004642:	bf00      	nop
 8004644:	20000640 	andcs	r0, r0, r0, asr #12

08004648 <RDMHandler::GetDeviceHours(unsigned short)>:
 8004648:	2104      	movs	r1, #4
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <RDMHandler::GetDeviceHours(unsigned short)+0x20>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <RDMHandler::GetDeviceHours(unsigned short)+0x24>)
 8004650:	fbb2 f2f3 	udiv	r2, r2, r3
 8004654:	6883      	ldr	r3, [r0, #8]
 8004656:	75d9      	strb	r1, [r3, #23]
 8004658:	2100      	movs	r1, #0
 800465a:	7619      	strb	r1, [r3, #24]
 800465c:	7659      	strb	r1, [r3, #25]
 800465e:	0a11      	lsrs	r1, r2, #8
 8004660:	7699      	strb	r1, [r3, #26]
 8004662:	76da      	strb	r2, [r3, #27]
 8004664:	f7ff be8a 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004668:	20001814 	andcs	r1, r0, r4, lsl r8
 800466c:	0036ee80 	eorseq	lr, r6, r0, lsl #29

08004670 <RDMHandler::GetDisplayInvert(unsigned short)>:
 8004670:	2301      	movs	r3, #1
 8004672:	6882      	ldr	r2, [r0, #8]
 8004674:	75d3      	strb	r3, [r2, #23]
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <RDMHandler::GetDisplayInvert(unsigned short)+0x18>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	b103      	cbz	r3, 8004680 <RDMHandler::GetDisplayInvert(unsigned short)+0x10>
 800467e:	79db      	ldrb	r3, [r3, #7]
 8004680:	7613      	strb	r3, [r2, #24]
 8004682:	f7ff be7b 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004686:	bf00      	nop
 8004688:	200016ec 	andcs	r1, r0, ip, ror #13

0800468c <RDMHandler::GetDisplayLevel(unsigned short)>:
 800468c:	2301      	movs	r3, #1
 800468e:	6882      	ldr	r2, [r0, #8]
 8004690:	75d3      	strb	r3, [r2, #23]
 8004692:	4b04      	ldr	r3, [pc, #16]	; (80046a4 <RDMHandler::GetDisplayLevel(unsigned short)+0x18>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	b103      	cbz	r3, 800469c <RDMHandler::GetDisplayLevel(unsigned short)+0x10>
 800469a:	799b      	ldrb	r3, [r3, #6]
 800469c:	7613      	strb	r3, [r2, #24]
 800469e:	f7ff be6d 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80046a2:	bf00      	nop
 80046a4:	200016ec 	andcs	r1, r0, ip, ror #13

080046a8 <RDMHandler::GetRealTimeClock(unsigned short)>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <RDMHandler::GetRealTimeClock(unsigned short)+0x44>)
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	a901      	add	r1, sp, #4
 80046b4:	f003 fd39 	bl	800812a <Hardware::GetTime(tm*)>
 80046b8:	9a06      	ldr	r2, [sp, #24]
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
 80046c0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046c4:	765a      	strb	r2, [r3, #25]
 80046c6:	9a05      	ldr	r2, [sp, #20]
 80046c8:	4620      	mov	r0, r4
 80046ca:	3201      	adds	r2, #1
 80046cc:	769a      	strb	r2, [r3, #26]
 80046ce:	9a04      	ldr	r2, [sp, #16]
 80046d0:	7619      	strb	r1, [r3, #24]
 80046d2:	76da      	strb	r2, [r3, #27]
 80046d4:	9a03      	ldr	r2, [sp, #12]
 80046d6:	771a      	strb	r2, [r3, #28]
 80046d8:	9a02      	ldr	r2, [sp, #8]
 80046da:	775a      	strb	r2, [r3, #29]
 80046dc:	9a01      	ldr	r2, [sp, #4]
 80046de:	779a      	strb	r2, [r3, #30]
 80046e0:	2207      	movs	r2, #7
 80046e2:	75da      	strb	r2, [r3, #23]
 80046e4:	f7ff fe4a 	bl	800437c <RDMHandler::RespondMessageAck()>
 80046e8:	b00a      	add	sp, #40	; 0x28
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	200017dc 	ldrdcs	r1, [r0], -ip

080046f0 <RDMHandler::GetPowerState(unsigned short)>:
 80046f0:	2201      	movs	r2, #1
 80046f2:	6883      	ldr	r3, [r0, #8]
 80046f4:	75da      	strb	r2, [r3, #23]
 80046f6:	22ff      	movs	r2, #255	; 0xff
 80046f8:	761a      	strb	r2, [r3, #24]
 80046fa:	f7ff be3f 	b.w	800437c <RDMHandler::RespondMessageAck()>

080046fe <RDMHandler::GetPerformSelfTest(unsigned short)>:
 80046fe:	b538      	push	{r3, r4, r5, lr}
 8004700:	2301      	movs	r3, #1
 8004702:	6885      	ldr	r5, [r0, #8]
 8004704:	4604      	mov	r4, r0
 8004706:	75eb      	strb	r3, [r5, #23]
 8004708:	f7fd f99c 	bl	8001a44 <rdm::selftest::Get()>
 800470c:	3800      	subs	r0, #0
 800470e:	bf18      	it	ne
 8004710:	2001      	movne	r0, #1
 8004712:	7628      	strb	r0, [r5, #24]
 8004714:	4620      	mov	r0, r4
 8004716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471a:	f7ff be2f 	b.w	800437c <RDMHandler::RespondMessageAck()>
	...

08004720 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	2208      	movs	r2, #8
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)+0x18>)
 8004728:	f7ff fdcd 	bl	80042c6 <RDMHandler::HandleString(char const*, unsigned int)>
 800472c:	4620      	mov	r0, r4
 800472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004732:	f7ff be23 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004736:	bf00      	nop
 8004738:	0800a312 	stmdaeq	r0, {r1, r4, r8, r9, sp, pc}

0800473c <RDMHandler::GetSlotInfo(unsigned short)>:
 800473c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80047c8 <RDMHandler::GetSlotInfo(unsigned short)+0x8c>
 8004744:	4606      	mov	r6, r0
 8004746:	6887      	ldr	r7, [r0, #8]
 8004748:	4689      	mov	r9, r1
 800474a:	f8d8 0000 	ldr.w	r0, [r8]
 800474e:	b1b9      	cbz	r1, 8004780 <RDMHandler::GetSlotInfo(unsigned short)+0x44>
 8004750:	3088      	adds	r0, #136	; 0x88
 8004752:	f7fe fd86 	bl	8003262 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
 8004756:	f04f 0a00 	mov.w	sl, #0
 800475a:	282e      	cmp	r0, #46	; 0x2e
 800475c:	bf28      	it	cs
 800475e:	202e      	movcs	r0, #46	; 0x2e
 8004760:	4654      	mov	r4, sl
 8004762:	b285      	uxth	r5, r0
 8004764:	fa1f f18a 	uxth.w	r1, sl
 8004768:	42a9      	cmp	r1, r5
 800476a:	d311      	bcc.n	8004790 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
 800476c:	b2e4      	uxtb	r4, r4
 800476e:	75fc      	strb	r4, [r7, #23]
 8004770:	3418      	adds	r4, #24
 8004772:	4630      	mov	r0, r6
 8004774:	70bc      	strb	r4, [r7, #2]
 8004776:	f7ff fe01 	bl	800437c <RDMHandler::RespondMessageAck()>
 800477a:	b002      	add	sp, #8
 800477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004780:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
 8004784:	f890 00a4 	ldrb.w	r0, [r0, #164]	; 0xa4
 8004788:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800478c:	b298      	uxth	r0, r3
 800478e:	e7e2      	b.n	8004756 <RDMHandler::GetSlotInfo(unsigned short)+0x1a>
 8004790:	f1b9 0f00 	cmp.w	r9, #0
 8004794:	d115      	bne.n	80047c2 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 8004796:	f8d8 0000 	ldr.w	r0, [r8]
 800479a:	aa01      	add	r2, sp, #4
 800479c:	f7ff fd04 	bl	80041a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 80047a0:	b178      	cbz	r0, 80047c2 <RDMHandler::GetSlotInfo(unsigned short)+0x86>
 80047a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80047a6:	193a      	adds	r2, r7, r4
 80047a8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80047ac:	7693      	strb	r3, [r2, #26]
 80047ae:	1d23      	adds	r3, r4, #4
 80047b0:	0a08      	lsrs	r0, r1, #8
 80047b2:	443b      	add	r3, r7
 80047b4:	f882 9018 	strb.w	r9, [r2, #24]
 80047b8:	f882 a019 	strb.w	sl, [r2, #25]
 80047bc:	76d0      	strb	r0, [r2, #27]
 80047be:	3405      	adds	r4, #5
 80047c0:	7619      	strb	r1, [r3, #24]
 80047c2:	f10a 0a01 	add.w	sl, sl, #1
 80047c6:	e7cd      	b.n	8004764 <RDMHandler::GetSlotInfo(unsigned short)+0x28>
 80047c8:	20000640 	andcs	r0, r0, r0, asr #12

080047cc <RDMHandler::RespondMessageNack(unsigned short)>:
 80047cc:	460a      	mov	r2, r1
 80047ce:	2102      	movs	r1, #2
 80047d0:	f7ff bd86 	b.w	80042e0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

080047d4 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	6843      	ldr	r3, [r0, #4]
 80047d8:	4604      	mov	r4, r0
 80047da:	7d9a      	ldrb	r2, [r3, #22]
 80047dc:	2a01      	cmp	r2, #1
 80047de:	d004      	beq.n	80047ea <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 80047e0:	2101      	movs	r1, #1
 80047e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e6:	f7ff bff1 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 80047ea:	7ddb      	ldrb	r3, [r3, #23]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d003      	beq.n	80047f8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80047f0:	2bff      	cmp	r3, #255	; 0xff
 80047f2:	d001      	beq.n	80047f8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 80047f4:	2106      	movs	r1, #6
 80047f6:	e7f4      	b.n	80047e2 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 80047f8:	2100      	movs	r1, #0
 80047fa:	68a2      	ldr	r2, [r4, #8]
 80047fc:	2bff      	cmp	r3, #255	; 0xff
 80047fe:	75d1      	strb	r1, [r2, #23]
 8004800:	d102      	bne.n	8004808 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 8004802:	2104      	movs	r1, #4
 8004804:	4620      	mov	r0, r4
 8004806:	e7ec      	b.n	80047e2 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	f003 fca4 	bl	8008158 <Hardware::Reboot()>
 8004810:	2800      	cmp	r0, #0
 8004812:	d0f6      	beq.n	8004802 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 8004814:	bd10      	pop	{r4, pc}
 8004816:	bf00      	nop
 8004818:	200017dc 	ldrdcs	r1, [r0], -ip

0800481c <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	6843      	ldr	r3, [r0, #4]
 8004820:	460d      	mov	r5, r1
 8004822:	7d99      	ldrb	r1, [r3, #22]
 8004824:	4604      	mov	r4, r0
 8004826:	2901      	cmp	r1, #1
 8004828:	d004      	beq.n	8004834 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800482a:	2101      	movs	r1, #1
 800482c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004830:	f7ff bfcc 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004834:	7ddb      	ldrb	r3, [r3, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d901      	bls.n	800483e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800483a:	2106      	movs	r1, #6
 800483c:	e7f6      	b.n	800482c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 8004840:	4f12      	ldr	r7, [pc, #72]	; (800488c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 8004842:	6816      	ldr	r6, [r2, #0]
 8004844:	4a12      	ldr	r2, [pc, #72]	; (8004890 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 8004846:	6810      	ldr	r0, [r2, #0]
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800484a:	b983      	cbnz	r3, 800486e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 800484c:	2102      	movs	r1, #2
 800484e:	7013      	strb	r3, [r2, #0]
 8004850:	f003 fbc4 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 8004854:	7839      	ldrb	r1, [r7, #0]
 8004856:	b111      	cbz	r1, 800485e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004858:	4630      	mov	r0, r6
 800485a:	f7fd f9b9 	bl	8001bd0 <RDMIdentify::Off(rdm::identify::Mode)>
 800485e:	b98d      	cbnz	r5, 8004884 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 8004860:	68a3      	ldr	r3, [r4, #8]
 8004862:	4620      	mov	r0, r4
 8004864:	75dd      	strb	r5, [r3, #23]
 8004866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800486a:	f7ff bd87 	b.w	800437c <RDMHandler::RespondMessageAck()>
 800486e:	7011      	strb	r1, [r2, #0]
 8004870:	2104      	movs	r1, #4
 8004872:	f003 fbb3 	bl	8007fdc <LedBlink::SetMode(ledblink::Mode)>
 8004876:	7839      	ldrb	r1, [r7, #0]
 8004878:	2900      	cmp	r1, #0
 800487a:	d0f0      	beq.n	800485e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800487c:	4630      	mov	r0, r6
 800487e:	f7fd f98d 	bl	8001b9c <RDMIdentify::On(rdm::identify::Mode)>
 8004882:	e7ec      	b.n	800485e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 8004884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004886:	bf00      	nop
 8004888:	20000648 	andcs	r0, r0, r8, asr #12
 800488c:	20000645 	andcs	r0, r0, r5, asr #12
 8004890:	200017d8 	ldrdcs	r1, [r0], -r8
 8004894:	20000644 	andcs	r0, r0, r4, asr #12

08004898 <RDMHandler::SetLanguage(bool, unsigned short)>:
 8004898:	b470      	push	{r4, r5, r6}
 800489a:	6842      	ldr	r2, [r0, #4]
 800489c:	4603      	mov	r3, r0
 800489e:	7d94      	ldrb	r4, [r2, #22]
 80048a0:	2c02      	cmp	r4, #2
 80048a2:	d003      	beq.n	80048ac <RDMHandler::SetLanguage(bool, unsigned short)+0x14>
 80048a4:	2101      	movs	r1, #1
 80048a6:	bc70      	pop	{r4, r5, r6}
 80048a8:	f7ff bf90 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 80048ac:	4c0b      	ldr	r4, [pc, #44]	; (80048dc <RDMHandler::SetLanguage(bool, unsigned short)+0x44>)
 80048ae:	7dd6      	ldrb	r6, [r2, #23]
 80048b0:	6824      	ldr	r4, [r4, #0]
 80048b2:	f894 50bf 	ldrb.w	r5, [r4, #191]	; 0xbf
 80048b6:	42ae      	cmp	r6, r5
 80048b8:	d104      	bne.n	80048c4 <RDMHandler::SetLanguage(bool, unsigned short)+0x2c>
 80048ba:	7e15      	ldrb	r5, [r2, #24]
 80048bc:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 80048c0:	4295      	cmp	r5, r2
 80048c2:	d002      	beq.n	80048ca <RDMHandler::SetLanguage(bool, unsigned short)+0x32>
 80048c4:	2106      	movs	r1, #6
 80048c6:	4618      	mov	r0, r3
 80048c8:	e7ed      	b.n	80048a6 <RDMHandler::SetLanguage(bool, unsigned short)+0xe>
 80048ca:	b921      	cbnz	r1, 80048d6 <RDMHandler::SetLanguage(bool, unsigned short)+0x3e>
 80048cc:	6883      	ldr	r3, [r0, #8]
 80048ce:	75d9      	strb	r1, [r3, #23]
 80048d0:	bc70      	pop	{r4, r5, r6}
 80048d2:	f7ff bd53 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80048d6:	bc70      	pop	{r4, r5, r6}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000640 	andcs	r0, r0, r0, asr #12

080048e0 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
 80048e0:	6842      	ldr	r2, [r0, #4]
 80048e2:	7d92      	ldrb	r2, [r2, #22]
 80048e4:	b112      	cbz	r2, 80048ec <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc>
 80048e6:	2101      	movs	r1, #1
 80048e8:	f7ff bf70 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 80048ec:	2104      	movs	r1, #4
 80048ee:	6883      	ldr	r3, [r0, #8]
 80048f0:	75d9      	strb	r1, [r3, #23]
 80048f2:	761a      	strb	r2, [r3, #24]
 80048f4:	765a      	strb	r2, [r3, #25]
 80048f6:	769a      	strb	r2, [r3, #26]
 80048f8:	76da      	strb	r2, [r3, #27]
 80048fa:	f7ff bd3f 	b.w	800437c <RDMHandler::RespondMessageAck()>
	...

08004900 <RDMHandler::SetPersonality(bool, unsigned short)>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	6843      	ldr	r3, [r0, #4]
 8004904:	4615      	mov	r5, r2
 8004906:	7d9a      	ldrb	r2, [r3, #22]
 8004908:	4604      	mov	r4, r0
 800490a:	2a01      	cmp	r2, #1
 800490c:	d004      	beq.n	8004918 <RDMHandler::SetPersonality(bool, unsigned short)+0x18>
 800490e:	2101      	movs	r1, #1
 8004910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004914:	f7ff bf5a 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004918:	4f0c      	ldr	r7, [pc, #48]	; (800494c <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>)
 800491a:	7dde      	ldrb	r6, [r3, #23]
 800491c:	4629      	mov	r1, r5
 800491e:	6838      	ldr	r0, [r7, #0]
 8004920:	f7ff fc8f 	bl	8004242 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004924:	b10e      	cbz	r6, 800492a <RDMHandler::SetPersonality(bool, unsigned short)+0x2a>
 8004926:	4286      	cmp	r6, r0
 8004928:	d902      	bls.n	8004930 <RDMHandler::SetPersonality(bool, unsigned short)+0x30>
 800492a:	2106      	movs	r1, #6
 800492c:	4620      	mov	r0, r4
 800492e:	e7ef      	b.n	8004910 <RDMHandler::SetPersonality(bool, unsigned short)+0x10>
 8004930:	4632      	mov	r2, r6
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	4629      	mov	r1, r5
 8004936:	f7ff fc8b 	bl	8004250 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 800493a:	2200      	movs	r2, #0
 800493c:	68a3      	ldr	r3, [r4, #8]
 800493e:	4620      	mov	r0, r4
 8004940:	75da      	strb	r2, [r3, #23]
 8004942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004946:	f7ff bd19 	b.w	800437c <RDMHandler::RespondMessageAck()>
 800494a:	bf00      	nop
 800494c:	20000640 	andcs	r0, r0, r0, asr #12

08004950 <RDMHandler::GetPersonalityDescription(unsigned short)>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	6843      	ldr	r3, [r0, #4]
 8004956:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80049d0 <RDMHandler::GetPersonalityDescription(unsigned short)+0x80>
 800495a:	7dde      	ldrb	r6, [r3, #23]
 800495c:	4604      	mov	r4, r0
 800495e:	f8d9 0000 	ldr.w	r0, [r9]
 8004962:	460f      	mov	r7, r1
 8004964:	f7ff fc6d 	bl	8004242 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
 8004968:	b10e      	cbz	r6, 800496e <RDMHandler::GetPersonalityDescription(unsigned short)+0x1e>
 800496a:	4286      	cmp	r6, r0
 800496c:	d905      	bls.n	800497a <RDMHandler::GetPersonalityDescription(unsigned short)+0x2a>
 800496e:	4620      	mov	r0, r4
 8004970:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004974:	2106      	movs	r1, #6
 8004976:	f7ff bf29 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 800497a:	4632      	mov	r2, r6
 800497c:	4639      	mov	r1, r7
 800497e:	f8d9 0000 	ldr.w	r0, [r9]
 8004982:	f7ff fc52 	bl	800422a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 8004986:	8803      	ldrh	r3, [r0, #0]
 8004988:	68a5      	ldr	r5, [r4, #8]
 800498a:	0a1a      	lsrs	r2, r3, #8
 800498c:	4639      	mov	r1, r7
 800498e:	766a      	strb	r2, [r5, #25]
 8004990:	76ab      	strb	r3, [r5, #26]
 8004992:	4632      	mov	r2, r6
 8004994:	f8d9 0000 	ldr.w	r0, [r9]
 8004998:	762e      	strb	r6, [r5, #24]
 800499a:	f7ff fc46 	bl	800422a <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
 800499e:	2300      	movs	r3, #0
 80049a0:	f105 081b 	add.w	r8, r5, #27
 80049a4:	1dc1      	adds	r1, r0, #7
 80049a6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	42b3      	cmp	r3, r6
 80049ac:	d203      	bcs.n	80049b6 <RDMHandler::GetPersonalityDescription(unsigned short)+0x66>
 80049ae:	3301      	adds	r3, #1
 80049b0:	2b21      	cmp	r3, #33	; 0x21
 80049b2:	d107      	bne.n	80049c4 <RDMHandler::GetPersonalityDescription(unsigned short)+0x74>
 80049b4:	2220      	movs	r2, #32
 80049b6:	3203      	adds	r2, #3
 80049b8:	75ea      	strb	r2, [r5, #23]
 80049ba:	4620      	mov	r0, r4
 80049bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c0:	f7ff bcdc 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80049c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80049c8:	f808 2b01 	strb.w	r2, [r8], #1
 80049cc:	e7eb      	b.n	80049a6 <RDMHandler::GetPersonalityDescription(unsigned short)+0x56>
 80049ce:	bf00      	nop
 80049d0:	20000640 	andcs	r0, r0, r0, asr #12

080049d4 <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	6843      	ldr	r3, [r0, #4]
 80049d8:	460d      	mov	r5, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	7d9a      	ldrb	r2, [r3, #22]
 80049de:	4604      	mov	r4, r0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	d004      	beq.n	80049ee <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x1a>
 80049e4:	2101      	movs	r1, #1
 80049e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ea:	f7ff beef 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 80049ee:	7dda      	ldrb	r2, [r3, #23]
 80049f0:	7e1b      	ldrb	r3, [r3, #24]
 80049f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	1e53      	subs	r3, r2, #1
 80049fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fe:	d301      	bcc.n	8004a04 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x30>
 8004a00:	2106      	movs	r1, #6
 8004a02:	e7f0      	b.n	80049e6 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x12>
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	f7ff fbe5 	bl	80041d6 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004a0c:	b935      	cbnz	r5, 8004a1c <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x48>
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	4620      	mov	r0, r4
 8004a12:	75dd      	strb	r5, [r3, #23]
 8004a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a18:	f7ff bcb0 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000640 	andcs	r0, r0, r0, asr #12

08004a24 <RDMHandler::GetSensorDefinition(unsigned short)>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	6843      	ldr	r3, [r0, #4]
 8004a28:	4605      	mov	r5, r0
 8004a2a:	7dde      	ldrb	r6, [r3, #23]
 8004a2c:	2eff      	cmp	r6, #255	; 0xff
 8004a2e:	d004      	beq.n	8004a3a <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004a30:	4b26      	ldr	r3, [pc, #152]	; (8004acc <RDMHandler::GetSensorDefinition(unsigned short)+0xa8>)
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	7903      	ldrb	r3, [r0, #4]
 8004a36:	42b3      	cmp	r3, r6
 8004a38:	d805      	bhi.n	8004a46 <RDMHandler::GetSensorDefinition(unsigned short)+0x22>
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a40:	2106      	movs	r1, #6
 8004a42:	f7ff bec3 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004a46:	4631      	mov	r1, r6
 8004a48:	68ac      	ldr	r4, [r5, #8]
 8004a4a:	f7fd fdaf 	bl	80025ac <RDMSensors::GetDefintion(unsigned char)>
 8004a4e:	7802      	ldrb	r2, [r0, #0]
 8004a50:	4603      	mov	r3, r0
 8004a52:	42b2      	cmp	r2, r6
 8004a54:	d1f1      	bne.n	8004a3a <RDMHandler::GetSensorDefinition(unsigned short)+0x16>
 8004a56:	7622      	strb	r2, [r4, #24]
 8004a58:	7842      	ldrb	r2, [r0, #1]
 8004a5a:	f100 010c 	add.w	r1, r0, #12
 8004a5e:	7662      	strb	r2, [r4, #25]
 8004a60:	7882      	ldrb	r2, [r0, #2]
 8004a62:	76a2      	strb	r2, [r4, #26]
 8004a64:	78c2      	ldrb	r2, [r0, #3]
 8004a66:	76e2      	strb	r2, [r4, #27]
 8004a68:	f990 2005 	ldrsb.w	r2, [r0, #5]
 8004a6c:	7722      	strb	r2, [r4, #28]
 8004a6e:	8882      	ldrh	r2, [r0, #4]
 8004a70:	7762      	strb	r2, [r4, #29]
 8004a72:	f990 2007 	ldrsb.w	r2, [r0, #7]
 8004a76:	77a2      	strb	r2, [r4, #30]
 8004a78:	88c2      	ldrh	r2, [r0, #6]
 8004a7a:	77e2      	strb	r2, [r4, #31]
 8004a7c:	f990 2009 	ldrsb.w	r2, [r0, #9]
 8004a80:	f884 2020 	strb.w	r2, [r4, #32]
 8004a84:	8902      	ldrh	r2, [r0, #8]
 8004a86:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 8004a8a:	f990 200b 	ldrsb.w	r2, [r0, #11]
 8004a8e:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
 8004a92:	8942      	ldrh	r2, [r0, #10]
 8004a94:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 8004a98:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8004a9c:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8004aa0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004aa4:	220d      	movs	r2, #13
 8004aa6:	f893 702c 	ldrb.w	r7, [r3, #44]	; 0x2c
 8004aaa:	f1a2 060d 	sub.w	r6, r2, #13
 8004aae:	42b7      	cmp	r7, r6
 8004ab0:	dc05      	bgt.n	8004abe <RDMHandler::GetSensorDefinition(unsigned short)+0x9a>
 8004ab2:	75e2      	strb	r2, [r4, #23]
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004aba:	f7ff bc5f 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004abe:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004ac2:	3201      	adds	r2, #1
 8004ac4:	f800 6b01 	strb.w	r6, [r0], #1
 8004ac8:	e7ed      	b.n	8004aa6 <RDMHandler::GetSensorDefinition(unsigned short)+0x82>
 8004aca:	bf00      	nop
 8004acc:	200001f8 	strdcs	r0, [r0], -r8

08004ad0 <RDMHandler::GetSensorValue(unsigned short)>:
 8004ad0:	b570      	push	{r4, r5, r6, lr}
 8004ad2:	6843      	ldr	r3, [r0, #4]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	7d9a      	ldrb	r2, [r3, #22]
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	d004      	beq.n	8004ae6 <RDMHandler::GetSensorValue(unsigned short)+0x16>
 8004adc:	2101      	movs	r1, #1
 8004ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ae2:	f7ff be73 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004ae6:	7dde      	ldrb	r6, [r3, #23]
 8004ae8:	2eff      	cmp	r6, #255	; 0xff
 8004aea:	d004      	beq.n	8004af6 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004aec:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <RDMHandler::GetSensorValue(unsigned short)+0x7c>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	7903      	ldrb	r3, [r0, #4]
 8004af2:	42b3      	cmp	r3, r6
 8004af4:	d802      	bhi.n	8004afc <RDMHandler::GetSensorValue(unsigned short)+0x2c>
 8004af6:	2106      	movs	r1, #6
 8004af8:	4628      	mov	r0, r5
 8004afa:	e7f0      	b.n	8004ade <RDMHandler::GetSensorValue(unsigned short)+0xe>
 8004afc:	4631      	mov	r1, r6
 8004afe:	68ac      	ldr	r4, [r5, #8]
 8004b00:	f7fd fd59 	bl	80025b6 <RDMSensors::GetValues(unsigned char)>
 8004b04:	7a03      	ldrb	r3, [r0, #8]
 8004b06:	42b3      	cmp	r3, r6
 8004b08:	d1f5      	bne.n	8004af6 <RDMHandler::GetSensorValue(unsigned short)+0x26>
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	75e3      	strb	r3, [r4, #23]
 8004b0e:	2321      	movs	r3, #33	; 0x21
 8004b10:	70a3      	strb	r3, [r4, #2]
 8004b12:	7a03      	ldrb	r3, [r0, #8]
 8004b14:	7623      	strb	r3, [r4, #24]
 8004b16:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004b1a:	7663      	strb	r3, [r4, #25]
 8004b1c:	8803      	ldrh	r3, [r0, #0]
 8004b1e:	76a3      	strb	r3, [r4, #26]
 8004b20:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004b24:	76e3      	strb	r3, [r4, #27]
 8004b26:	8843      	ldrh	r3, [r0, #2]
 8004b28:	7723      	strb	r3, [r4, #28]
 8004b2a:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004b2e:	7763      	strb	r3, [r4, #29]
 8004b30:	8883      	ldrh	r3, [r0, #4]
 8004b32:	77a3      	strb	r3, [r4, #30]
 8004b34:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004b38:	77e3      	strb	r3, [r4, #31]
 8004b3a:	88c3      	ldrh	r3, [r0, #6]
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f884 3020 	strb.w	r3, [r4, #32]
 8004b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b46:	f7ff bc19 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004b4a:	bf00      	nop
 8004b4c:	200001f8 	strdcs	r0, [r0], -r8

08004b50 <RDMHandler::SetSensorValue(bool, unsigned short)>:
 8004b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b54:	6843      	ldr	r3, [r0, #4]
 8004b56:	4606      	mov	r6, r0
 8004b58:	7d9a      	ldrb	r2, [r3, #22]
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	2a01      	cmp	r2, #1
 8004b5e:	d004      	beq.n	8004b6a <RDMHandler::SetSensorValue(bool, unsigned short)+0x1a>
 8004b60:	2101      	movs	r1, #1
 8004b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b66:	f7ff be31 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004b6a:	7ddf      	ldrb	r7, [r3, #23]
 8004b6c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004c00 <RDMHandler::SetSensorValue(bool, unsigned short)+0xb0>
 8004b70:	2fff      	cmp	r7, #255	; 0xff
 8004b72:	f8d8 3000 	ldr.w	r3, [r8]
 8004b76:	d004      	beq.n	8004b82 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004b78:	791a      	ldrb	r2, [r3, #4]
 8004b7a:	42ba      	cmp	r2, r7
 8004b7c:	d801      	bhi.n	8004b82 <RDMHandler::SetSensorValue(bool, unsigned short)+0x32>
 8004b7e:	2106      	movs	r1, #6
 8004b80:	e7ef      	b.n	8004b62 <RDMHandler::SetSensorValue(bool, unsigned short)+0x12>
 8004b82:	4639      	mov	r1, r7
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fd1b 	bl	80025c0 <RDMSensors::SetValues(unsigned char)>
 8004b8a:	bbb5      	cbnz	r5, 8004bfa <RDMHandler::SetSensorValue(bool, unsigned short)+0xaa>
 8004b8c:	2fff      	cmp	r7, #255	; 0xff
 8004b8e:	68b4      	ldr	r4, [r6, #8]
 8004b90:	d112      	bne.n	8004bb8 <RDMHandler::SetSensorValue(bool, unsigned short)+0x68>
 8004b92:	2309      	movs	r3, #9
 8004b94:	75e3      	strb	r3, [r4, #23]
 8004b96:	2321      	movs	r3, #33	; 0x21
 8004b98:	7625      	strb	r5, [r4, #24]
 8004b9a:	70a3      	strb	r3, [r4, #2]
 8004b9c:	7665      	strb	r5, [r4, #25]
 8004b9e:	76a5      	strb	r5, [r4, #26]
 8004ba0:	76e5      	strb	r5, [r4, #27]
 8004ba2:	7725      	strb	r5, [r4, #28]
 8004ba4:	7765      	strb	r5, [r4, #29]
 8004ba6:	77a5      	strb	r5, [r4, #30]
 8004ba8:	77e5      	strb	r5, [r4, #31]
 8004baa:	f884 5020 	strb.w	r5, [r4, #32]
 8004bae:	4630      	mov	r0, r6
 8004bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	f7ff bbe2 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f8d8 0000 	ldr.w	r0, [r8]
 8004bbe:	f7fd fcfa 	bl	80025b6 <RDMSensors::GetValues(unsigned char)>
 8004bc2:	2309      	movs	r3, #9
 8004bc4:	75e3      	strb	r3, [r4, #23]
 8004bc6:	2321      	movs	r3, #33	; 0x21
 8004bc8:	70a3      	strb	r3, [r4, #2]
 8004bca:	7a03      	ldrb	r3, [r0, #8]
 8004bcc:	7623      	strb	r3, [r4, #24]
 8004bce:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8004bd2:	7663      	strb	r3, [r4, #25]
 8004bd4:	8803      	ldrh	r3, [r0, #0]
 8004bd6:	76a3      	strb	r3, [r4, #26]
 8004bd8:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8004bdc:	76e3      	strb	r3, [r4, #27]
 8004bde:	8843      	ldrh	r3, [r0, #2]
 8004be0:	7723      	strb	r3, [r4, #28]
 8004be2:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8004be6:	7763      	strb	r3, [r4, #29]
 8004be8:	8883      	ldrh	r3, [r0, #4]
 8004bea:	77a3      	strb	r3, [r4, #30]
 8004bec:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8004bf0:	77e3      	strb	r3, [r4, #31]
 8004bf2:	88c3      	ldrh	r3, [r0, #6]
 8004bf4:	f884 3020 	strb.w	r3, [r4, #32]
 8004bf8:	e7d9      	b.n	8004bae <RDMHandler::SetSensorValue(bool, unsigned short)+0x5e>
 8004bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfe:	bf00      	nop
 8004c00:	200001f8 	strdcs	r0, [r0], -r8

08004c04 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	6843      	ldr	r3, [r0, #4]
 8004c08:	4604      	mov	r4, r0
 8004c0a:	7d9a      	ldrb	r2, [r3, #22]
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	2a01      	cmp	r2, #1
 8004c10:	d004      	beq.n	8004c1c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x18>
 8004c12:	2101      	movs	r1, #1
 8004c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c18:	f7ff bdd8 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004c1c:	7dd9      	ldrb	r1, [r3, #23]
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x48>)
 8004c20:	29ff      	cmp	r1, #255	; 0xff
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	7903      	ldrb	r3, [r0, #4]
 8004c26:	d103      	bne.n	8004c30 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x2c>
 8004c28:	b923      	cbnz	r3, 8004c34 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x30>
 8004c2a:	2106      	movs	r1, #6
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	e7f1      	b.n	8004c14 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x10>
 8004c30:	4299      	cmp	r1, r3
 8004c32:	d2fa      	bcs.n	8004c2a <RDMHandler::SetRecordSensors(bool, unsigned short)+0x26>
 8004c34:	f7fd fcdb 	bl	80025ee <RDMSensors::SetRecord(unsigned char)>
 8004c38:	b935      	cbnz	r5, 8004c48 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x44>
 8004c3a:	68a3      	ldr	r3, [r4, #8]
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	75dd      	strb	r5, [r3, #23]
 8004c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c44:	f7ff bb9a 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200001f8 	strdcs	r0, [r0], -r8

08004c50 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
 8004c50:	2104      	movs	r1, #4
 8004c52:	f7ff bdbb 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
	...

08004c58 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	6843      	ldr	r3, [r0, #4]
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	7d9a      	ldrb	r2, [r3, #22]
 8004c60:	2a01      	cmp	r2, #1
 8004c62:	d004      	beq.n	8004c6e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x16>
 8004c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c68:	2101      	movs	r1, #1
 8004c6a:	f7ff bdaf 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004c6e:	7ddd      	ldrb	r5, [r3, #23]
 8004c70:	2d02      	cmp	r5, #2
 8004c72:	d102      	bne.n	8004c7a <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x22>
 8004c74:	2106      	movs	r1, #6
 8004c76:	f7ff fda9 	bl	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004c7a:	1e6b      	subs	r3, r5, #1
 8004c7c:	4259      	negs	r1, r3
 8004c7e:	4159      	adcs	r1, r3
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x48>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6998      	ldr	r0, [r3, #24]
 8004c86:	b110      	cbz	r0, 8004c8e <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x36>
 8004c88:	6803      	ldr	r3, [r0, #0]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	4798      	blx	r3
 8004c8e:	2200      	movs	r2, #0
 8004c90:	68a3      	ldr	r3, [r4, #8]
 8004c92:	4620      	mov	r0, r4
 8004c94:	75da      	strb	r2, [r3, #23]
 8004c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c9a:	f7ff bb6f 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004c9e:	bf00      	nop
 8004ca0:	200016ec 	andcs	r1, r0, ip, ror #13

08004ca4 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	6843      	ldr	r3, [r0, #4]
 8004ca8:	4604      	mov	r4, r0
 8004caa:	7d99      	ldrb	r1, [r3, #22]
 8004cac:	2901      	cmp	r1, #1
 8004cae:	d004      	beq.n	8004cba <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x16>
 8004cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	f7ff bd89 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004cba:	4e0b      	ldr	r6, [pc, #44]	; (8004ce8 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x44>)
 8004cbc:	7ddd      	ldrb	r5, [r3, #23]
 8004cbe:	6830      	ldr	r0, [r6, #0]
 8004cc0:	b105      	cbz	r5, 8004cc4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x20>
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f7fc fa46 	bl	8001154 <Display::SetSleep(bool)>
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	6998      	ldr	r0, [r3, #24]
 8004ccc:	b118      	cbz	r0, 8004cd6 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x32>
 8004cce:	6803      	ldr	r3, [r0, #0]
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	4798      	blx	r3
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	68a3      	ldr	r3, [r4, #8]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	75da      	strb	r2, [r3, #23]
 8004cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ce2:	f7ff bb4b 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004ce6:	bf00      	nop
 8004ce8:	200016ec 	andcs	r1, r0, ip, ror #13

08004cec <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	6843      	ldr	r3, [r0, #4]
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	7d9a      	ldrb	r2, [r3, #22]
 8004cf4:	b08a      	sub	sp, #40	; 0x28
 8004cf6:	2a07      	cmp	r2, #7
 8004cf8:	d005      	beq.n	8004d06 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x1a>
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	b00a      	add	sp, #40	; 0x28
 8004cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d02:	f7ff bd63 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004d06:	7dd8      	ldrb	r0, [r3, #23]
 8004d08:	7e1a      	ldrb	r2, [r3, #24]
 8004d0a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8004d0e:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 8004d12:	9206      	str	r2, [sp, #24]
 8004d14:	7e5a      	ldrb	r2, [r3, #25]
 8004d16:	3a01      	subs	r2, #1
 8004d18:	9205      	str	r2, [sp, #20]
 8004d1a:	7e9a      	ldrb	r2, [r3, #26]
 8004d1c:	9204      	str	r2, [sp, #16]
 8004d1e:	7eda      	ldrb	r2, [r3, #27]
 8004d20:	9203      	str	r2, [sp, #12]
 8004d22:	7f1a      	ldrb	r2, [r3, #28]
 8004d24:	7f5b      	ldrb	r3, [r3, #29]
 8004d26:	9202      	str	r2, [sp, #8]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	b979      	cbnz	r1, 8004d4c <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x60>
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x64>)
 8004d2e:	a901      	add	r1, sp, #4
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f003 f9e5 	bl	8008100 <Hardware::SetTime(tm const*)>
 8004d36:	b918      	cbnz	r0, 8004d40 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x54>
 8004d38:	2104      	movs	r1, #4
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7ff fd46 	bl	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004d40:	2200      	movs	r2, #0
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	4620      	mov	r0, r4
 8004d46:	75da      	strb	r2, [r3, #23]
 8004d48:	f7ff fb18 	bl	800437c <RDMHandler::RespondMessageAck()>
 8004d4c:	b00a      	add	sp, #40	; 0x28
 8004d4e:	bd10      	pop	{r4, pc}
 8004d50:	200017dc 	ldrdcs	r1, [r0], -ip

08004d54 <RDMHandler::SetPowerState(bool, unsigned short)>:
 8004d54:	6842      	ldr	r2, [r0, #4]
 8004d56:	7d91      	ldrb	r1, [r2, #22]
 8004d58:	2901      	cmp	r1, #1
 8004d5a:	d002      	beq.n	8004d62 <RDMHandler::SetPowerState(bool, unsigned short)+0xe>
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	f7ff bd35 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004d62:	7dd1      	ldrb	r1, [r2, #23]
 8004d64:	1eca      	subs	r2, r1, #3
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	2afb      	cmp	r2, #251	; 0xfb
 8004d6a:	d801      	bhi.n	8004d70 <RDMHandler::SetPowerState(bool, unsigned short)+0x1c>
 8004d6c:	2106      	movs	r1, #6
 8004d6e:	e7f6      	b.n	8004d5e <RDMHandler::SetPowerState(bool, unsigned short)+0xa>
 8004d70:	29ff      	cmp	r1, #255	; 0xff
 8004d72:	6883      	ldr	r3, [r0, #8]
 8004d74:	d103      	bne.n	8004d7e <RDMHandler::SetPowerState(bool, unsigned short)+0x2a>
 8004d76:	2200      	movs	r2, #0
 8004d78:	75da      	strb	r2, [r3, #23]
 8004d7a:	f7ff baff 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004d7e:	2104      	movs	r1, #4
 8004d80:	e7ed      	b.n	8004d5e <RDMHandler::SetPowerState(bool, unsigned short)+0xa>

08004d82 <RDMHandler::SetPerformSelfTest(bool, unsigned short)>:
 8004d82:	b510      	push	{r4, lr}
 8004d84:	6843      	ldr	r3, [r0, #4]
 8004d86:	4604      	mov	r4, r0
 8004d88:	7d9a      	ldrb	r2, [r3, #22]
 8004d8a:	2a01      	cmp	r2, #1
 8004d8c:	d004      	beq.n	8004d98 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x16>
 8004d8e:	2101      	movs	r1, #1
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f7ff bd1a 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004d98:	7dd8      	ldrb	r0, [r3, #23]
 8004d9a:	f7fc fe59 	bl	8001a50 <rdm::selftest::Set(unsigned char)>
 8004d9e:	b910      	cbnz	r0, 8004da6 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0x24>
 8004da0:	2106      	movs	r1, #6
 8004da2:	4620      	mov	r0, r4
 8004da4:	e7f4      	b.n	8004d90 <RDMHandler::SetPerformSelfTest(bool, unsigned short)+0xe>
 8004da6:	2200      	movs	r2, #0
 8004da8:	68a3      	ldr	r3, [r4, #8]
 8004daa:	4620      	mov	r0, r4
 8004dac:	75da      	strb	r2, [r3, #23]
 8004dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db2:	f7ff bae3 	b.w	800437c <RDMHandler::RespondMessageAck()>

08004db6 <RDMHandler::GetSelfTestDescription(unsigned short)>:
 8004db6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004db8:	6845      	ldr	r5, [r0, #4]
 8004dba:	4604      	mov	r4, r0
 8004dbc:	a901      	add	r1, sp, #4
 8004dbe:	7de8      	ldrb	r0, [r5, #23]
 8004dc0:	f7fc fe7a 	bl	8001ab8 <rdm::selftest::GetDescription(unsigned char, unsigned int&)>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	b928      	cbnz	r0, 8004dd4 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1e>
 8004dc8:	2106      	movs	r1, #6
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f7ff fcfe 	bl	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004dd0:	b003      	add	sp, #12
 8004dd2:	bd30      	pop	{r4, r5, pc}
 8004dd4:	9a01      	ldr	r2, [sp, #4]
 8004dd6:	2a20      	cmp	r2, #32
 8004dd8:	bf84      	itt	hi
 8004dda:	2220      	movhi	r2, #32
 8004ddc:	9201      	strhi	r2, [sp, #4]
 8004dde:	9901      	ldr	r1, [sp, #4]
 8004de0:	68a2      	ldr	r2, [r4, #8]
 8004de2:	1c48      	adds	r0, r1, #1
 8004de4:	75d0      	strb	r0, [r2, #23]
 8004de6:	7de8      	ldrb	r0, [r5, #23]
 8004de8:	3219      	adds	r2, #25
 8004dea:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004dee:	4419      	add	r1, r3
 8004df0:	428b      	cmp	r3, r1
 8004df2:	d103      	bne.n	8004dfc <RDMHandler::GetSelfTestDescription(unsigned short)+0x46>
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff fac1 	bl	800437c <RDMHandler::RespondMessageAck()>
 8004dfa:	e7e9      	b.n	8004dd0 <RDMHandler::GetSelfTestDescription(unsigned short)+0x1a>
 8004dfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e00:	f802 0b01 	strb.w	r0, [r2], #1
 8004e04:	e7f4      	b.n	8004df0 <RDMHandler::GetSelfTestDescription(unsigned short)+0x3a>
	...

08004e08 <RDMHandler::GetSlotDescription(unsigned short)>:
 8004e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <RDMHandler::GetSlotDescription(unsigned short)+0x78>)
 8004e0c:	6846      	ldr	r6, [r0, #4]
 8004e0e:	4604      	mov	r4, r0
 8004e10:	7df3      	ldrb	r3, [r6, #23]
 8004e12:	7e35      	ldrb	r5, [r6, #24]
 8004e14:	6810      	ldr	r0, [r2, #0]
 8004e16:	b939      	cbnz	r1, 8004e28 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004e18:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004e1c:	b2ad      	uxth	r5, r5
 8004e1e:	466a      	mov	r2, sp
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7ff f9c1 	bl	80041a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&) [clone .part.0]>
 8004e26:	b928      	cbnz	r0, 8004e34 <RDMHandler::GetSlotDescription(unsigned short)+0x2c>
 8004e28:	2106      	movs	r1, #6
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7ff fcce 	bl	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004e30:	b002      	add	sp, #8
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	4628      	mov	r0, r5
 8004e36:	f8bd 1000 	ldrh.w	r1, [sp]
 8004e3a:	aa01      	add	r2, sp, #4
 8004e3c:	f000 fa48 	bl	80052d0 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d0f0      	beq.n	8004e28 <RDMHandler::GetSlotDescription(unsigned short)+0x20>
 8004e46:	9a01      	ldr	r2, [sp, #4]
 8004e48:	2a20      	cmp	r2, #32
 8004e4a:	bf84      	itt	hi
 8004e4c:	2220      	movhi	r2, #32
 8004e4e:	9201      	strhi	r2, [sp, #4]
 8004e50:	9901      	ldr	r1, [sp, #4]
 8004e52:	68a2      	ldr	r2, [r4, #8]
 8004e54:	1c88      	adds	r0, r1, #2
 8004e56:	75d0      	strb	r0, [r2, #23]
 8004e58:	7df0      	ldrb	r0, [r6, #23]
 8004e5a:	321a      	adds	r2, #26
 8004e5c:	f802 0c02 	strb.w	r0, [r2, #-2]
 8004e60:	7e30      	ldrb	r0, [r6, #24]
 8004e62:	4419      	add	r1, r3
 8004e64:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	d103      	bne.n	8004e74 <RDMHandler::GetSlotDescription(unsigned short)+0x6c>
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7ff fa85 	bl	800437c <RDMHandler::RespondMessageAck()>
 8004e72:	e7dd      	b.n	8004e30 <RDMHandler::GetSlotDescription(unsigned short)+0x28>
 8004e74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e78:	f802 0b01 	strb.w	r0, [r2], #1
 8004e7c:	e7f4      	b.n	8004e68 <RDMHandler::GetSlotDescription(unsigned short)+0x60>
 8004e7e:	bf00      	nop
 8004e80:	20000640 	andcs	r0, r0, r0, asr #12

08004e84 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 8004e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e86:	6843      	ldr	r3, [r0, #4]
 8004e88:	4605      	mov	r5, r0
 8004e8a:	7d9b      	ldrb	r3, [r3, #22]
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	b12b      	cbz	r3, 8004e9c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x18>
 8004e90:	2101      	movs	r1, #1
 8004e92:	b003      	add	sp, #12
 8004e94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004e98:	f7ff bc98 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004e9c:	f06f 070d 	mvn.w	r7, #13
 8004ea0:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xbc>)
 8004ea2:	4669      	mov	r1, sp
 8004ea4:	681c      	ldr	r4, [r3, #0]
 8004ea6:	f104 0355 	add.w	r3, r4, #85	; 0x55
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004eb0:	1d20      	adds	r0, r4, #4
 8004eb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8004eb6:	f7ff f808 	bl	8003eca <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004eba:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8004ebe:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8004ec2:	f104 020e 	add.w	r2, r4, #14
 8004ec6:	1b3f      	subs	r7, r7, r4
 8004ec8:	18b9      	adds	r1, r7, r2
 8004eca:	4288      	cmp	r0, r1
 8004ecc:	d830      	bhi.n	8004f30 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xac>
 8004ece:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff f9ba 	bl	8004250 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
 8004edc:	2100      	movs	r1, #0
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8004ee4:	f7ff f977 	bl	80041d6 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
 8004ee8:	2213      	movs	r2, #19
 8004eea:	f104 0199 	add.w	r1, r4, #153	; 0x99
 8004eee:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8004ef2:	f7ff f966 	bl	80041c2 <memcpy.isra.0>
 8004ef6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8004efa:	f7fe fa2a 	bl	8003352 <RDMSubDevices::SetFactoryDefaults()>
 8004efe:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004f02:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8004f06:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8004f10:	2301      	movs	r3, #1
 8004f12:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 8004f16:	b110      	cbz	r0, 8004f1e <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x9a>
 8004f18:	6803      	ldr	r3, [r0, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4798      	blx	r3
 8004f1e:	b966      	cbnz	r6, 8004f3a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0xb6>
 8004f20:	4628      	mov	r0, r5
 8004f22:	68ab      	ldr	r3, [r5, #8]
 8004f24:	75de      	strb	r6, [r3, #23]
 8004f26:	b003      	add	sp, #12
 8004f28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004f2c:	f7ff ba26 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004f30:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004f34:	440b      	add	r3, r1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	e7c6      	b.n	8004ec8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x44>
 8004f3a:	b003      	add	sp, #12
 8004f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000640 	andcs	r0, r0, r0, asr #12

08004f44 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 8004f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f46:	6845      	ldr	r5, [r0, #4]
 8004f48:	460e      	mov	r6, r1
 8004f4a:	7dab      	ldrb	r3, [r5, #22]
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	4611      	mov	r1, r2
 8004f52:	d905      	bls.n	8004f60 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 8004f54:	2101      	movs	r1, #1
 8004f56:	b002      	add	sp, #8
 8004f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f5c:	f7ff bc36 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 8004f62:	6810      	ldr	r0, [r2, #0]
 8004f64:	f105 0217 	add.w	r2, r5, #23
 8004f68:	b159      	cbz	r1, 8004f82 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 8004f6a:	3088      	adds	r0, #136	; 0x88
 8004f6c:	f7fe f95b 	bl	8003226 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 8004f70:	b97e      	cbnz	r6, 8004f92 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 8004f72:	4620      	mov	r0, r4
 8004f74:	68a3      	ldr	r3, [r4, #8]
 8004f76:	75de      	strb	r6, [r3, #23]
 8004f78:	b002      	add	sp, #8
 8004f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f7e:	f7ff b9fd 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8004f82:	4669      	mov	r1, sp
 8004f84:	3004      	adds	r0, #4
 8004f86:	9200      	str	r2, [sp, #0]
 8004f88:	f88d 3004 	strb.w	r3, [sp, #4]
 8004f8c:	f7fe ff9d 	bl	8003eca <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 8004f90:	e7ee      	b.n	8004f70 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 8004f92:	b002      	add	sp, #8
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
 8004f96:	bf00      	nop
 8004f98:	20000640 	andcs	r0, r0, r0, asr #12

08004f9c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 8004f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	2700      	movs	r7, #0
 8004fa4:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 8004fa8:	2c20      	cmp	r4, #32
 8004faa:	46be      	mov	lr, r7
 8004fac:	f89d 801c 	ldrb.w	r8, [sp, #28]
 8004fb0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004fb4:	d004      	beq.n	8004fc0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 8004fb6:	2105      	movs	r1, #5
 8004fb8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	f7ff bc06 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 8004fc0:	4c2d      	ldr	r4, [pc, #180]	; (8005078 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 8004fc2:	6824      	ldr	r4, [r4, #0]
 8004fc4:	88a4      	ldrh	r4, [r4, #4]
 8004fc6:	4294      	cmp	r4, r2
 8004fc8:	d205      	bcs.n	8004fd6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004fca:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004fce:	42a2      	cmp	r2, r4
 8004fd0:	d001      	beq.n	8004fd6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 8004fd2:	2109      	movs	r1, #9
 8004fd4:	e7f0      	b.n	8004fb8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004fd6:	f04f 0c1e 	mov.w	ip, #30
 8004fda:	2400      	movs	r4, #0
 8004fdc:	4d27      	ldr	r5, [pc, #156]	; (800507c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 8004fde:	f8b5 9000 	ldrh.w	r9, [r5]
 8004fe2:	4599      	cmp	r9, r3
 8004fe4:	bf02      	ittt	eq
 8004fe6:	462c      	moveq	r4, r5
 8004fe8:	7daf      	ldrbeq	r7, [r5, #22]
 8004fea:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 8004fee:	f1bc 0c01 	subs.w	ip, ip, #1
 8004ff2:	f105 0518 	add.w	r5, r5, #24
 8004ff6:	d1f2      	bne.n	8004fde <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 8004ff8:	b90c      	cbnz	r4, 8004ffe <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	e7dc      	b.n	8004fb8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 8004ffe:	7803      	ldrb	r3, [r0, #0]
 8005000:	b19b      	cbz	r3, 800502a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 8005002:	2f00      	cmp	r7, #0
 8005004:	d0f9      	beq.n	8004ffa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 8005006:	2e20      	cmp	r6, #32
 8005008:	d121      	bne.n	800504e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 800500a:	2900      	cmp	r1, #0
 800500c:	d131      	bne.n	8005072 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 800500e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005012:	429a      	cmp	r2, r3
 8005014:	d0dd      	beq.n	8004fd2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	b913      	cbnz	r3, 8005020 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 800501a:	68a1      	ldr	r1, [r4, #8]
 800501c:	07cd      	lsls	r5, r1, #31
 800501e:	d5ca      	bpl.n	8004fb6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 8005020:	7d21      	ldrb	r1, [r4, #20]
 8005022:	4541      	cmp	r1, r8
 8005024:	d005      	beq.n	8005032 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 8005026:	2101      	movs	r1, #1
 8005028:	e7c6      	b.n	8004fb8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800502a:	f1be 0f00 	cmp.w	lr, #0
 800502e:	d1ea      	bne.n	8005006 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 8005030:	e7e3      	b.n	8004ffa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 8005032:	68a1      	ldr	r1, [r4, #8]
 8005034:	eb00 0461 	add.w	r4, r0, r1, asr #1
 8005038:	104d      	asrs	r5, r1, #1
 800503a:	07c9      	lsls	r1, r1, #31
 800503c:	bf48      	it	mi
 800503e:	5941      	ldrmi	r1, [r0, r5]
 8005040:	4620      	mov	r0, r4
 8005042:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005046:	bf48      	it	mi
 8005048:	58cb      	ldrmi	r3, [r1, r3]
 800504a:	4611      	mov	r1, r2
 800504c:	4718      	bx	r3
 800504e:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8005052:	f003 0401 	and.w	r4, r3, #1
 8005056:	b90d      	cbnz	r5, 800505c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 8005058:	2c00      	cmp	r4, #0
 800505a:	d0ac      	beq.n	8004fb6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800505c:	105e      	asrs	r6, r3, #1
 800505e:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8005062:	b10c      	cbz	r4, 8005068 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 8005064:	5980      	ldr	r0, [r0, r6]
 8005066:	5945      	ldr	r5, [r0, r5]
 8005068:	4618      	mov	r0, r3
 800506a:	462b      	mov	r3, r5
 800506c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005070:	4718      	bx	r3
 8005072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005076:	bf00      	nop
 8005078:	200001fc 	strdcs	r0, [r0], -ip
 800507c:	0800a324 	stmdaeq	r0, {r2, r5, r8, r9, sp, pc}

08005080 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 8005080:	23ff      	movs	r3, #255	; 0xff
 8005082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	7013      	strb	r3, [r2, #0]
 8005088:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800508c:	7d0b      	ldrb	r3, [r1, #20]
 800508e:	f891 8015 	ldrb.w	r8, [r1, #21]
 8005092:	f101 0902 	add.w	r9, r1, #2
 8005096:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 800509a:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800509c:	b085      	sub	sp, #20
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4607      	mov	r7, r0
 80050a2:	460d      	mov	r5, r1
 80050a4:	4614      	mov	r4, r2
 80050a6:	4648      	mov	r0, r9
 80050a8:	2206      	movs	r2, #6
 80050aa:	f891 a013 	ldrb.w	sl, [r1, #19]
 80050ae:	495a      	ldr	r1, [pc, #360]	; (8005218 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80050b0:	1d1e      	adds	r6, r3, #4
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	f7ff f868 	bl	8004188 <memcmp>
 80050b8:	2202      	movs	r2, #2
 80050ba:	4683      	mov	fp, r0
 80050bc:	4631      	mov	r1, r6
 80050be:	4648      	mov	r0, r9
 80050c0:	fa1f f888 	uxth.w	r8, r8
 80050c4:	f7ff f860 	bl	8004188 <memcmp>
 80050c8:	b928      	cbnz	r0, 80050d6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x56>
 80050ca:	2204      	movs	r2, #4
 80050cc:	4952      	ldr	r1, [pc, #328]	; (8005218 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 80050ce:	18a8      	adds	r0, r5, r2
 80050d0:	f7ff f85a 	bl	8004188 <memcmp>
 80050d4:	b160      	cbz	r0, 80050f0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 80050d6:	4631      	mov	r1, r6
 80050d8:	2206      	movs	r2, #6
 80050da:	4648      	mov	r0, r9
 80050dc:	f7ff f854 	bl	8004188 <memcmp>
 80050e0:	4601      	mov	r1, r0
 80050e2:	b130      	cbz	r0, 80050f2 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 80050e4:	f1bb 0f00 	cmp.w	fp, #0
 80050e8:	d04b      	beq.n	8005182 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x102>
 80050ea:	b005      	add	sp, #20
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	2101      	movs	r1, #1
 80050f2:	2301      	movs	r3, #1
 80050f4:	f1ba 0f10 	cmp.w	sl, #16
 80050f8:	d17a      	bne.n	80051f0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x170>
 80050fa:	f1b8 0f01 	cmp.w	r8, #1
 80050fe:	d143      	bne.n	8005188 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x108>
 8005100:	787b      	ldrb	r3, [r7, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f1      	bne.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005106:	2206      	movs	r2, #6
 8005108:	4631      	mov	r1, r6
 800510a:	f105 0017 	add.w	r0, r5, #23
 800510e:	f7ff f83b 	bl	8004188 <memcmp>
 8005112:	2800      	cmp	r0, #0
 8005114:	dce9      	bgt.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005116:	2206      	movs	r2, #6
 8005118:	4630      	mov	r0, r6
 800511a:	f105 011d 	add.w	r1, r5, #29
 800511e:	f7ff f833 	bl	8004188 <memcmp>
 8005122:	2800      	cmp	r0, #0
 8005124:	dce1      	bgt.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005126:	23fe      	movs	r3, #254	; 0xfe
 8005128:	7023      	strb	r3, [r4, #0]
 800512a:	7063      	strb	r3, [r4, #1]
 800512c:	70a3      	strb	r3, [r4, #2]
 800512e:	70e3      	strb	r3, [r4, #3]
 8005130:	7123      	strb	r3, [r4, #4]
 8005132:	7163      	strb	r3, [r4, #5]
 8005134:	71a3      	strb	r3, [r4, #6]
 8005136:	23aa      	movs	r3, #170	; 0xaa
 8005138:	71e3      	strb	r3, [r4, #7]
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	4622      	mov	r2, r4
 800513e:	f103 090a 	add.w	r9, r3, #10
 8005142:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8005146:	7831      	ldrb	r1, [r6, #0]
 8005148:	3202      	adds	r2, #2
 800514a:	f061 0155 	orn	r1, r1, #85	; 0x55
 800514e:	7191      	strb	r1, [r2, #6]
 8005150:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005154:	f041 0155 	orr.w	r1, r1, #85	; 0x55
 8005158:	71d1      	strb	r1, [r2, #7]
 800515a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800515e:	454e      	cmp	r6, r9
 8005160:	440b      	add	r3, r1
 8005162:	b29b      	uxth	r3, r3
 8005164:	d1ef      	bne.n	8005146 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc6>
 8005166:	0a1a      	lsrs	r2, r3, #8
 8005168:	f062 0155 	orn	r1, r2, #85	; 0x55
 800516c:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8005170:	7562      	strb	r2, [r4, #21]
 8005172:	f063 0255 	orn	r2, r3, #85	; 0x55
 8005176:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800517a:	7521      	strb	r1, [r4, #20]
 800517c:	75a2      	strb	r2, [r4, #22]
 800517e:	75e3      	strb	r3, [r4, #23]
 8005180:	e7b3      	b.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005182:	4659      	mov	r1, fp
 8005184:	465b      	mov	r3, fp
 8005186:	e7b5      	b.n	80050f4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x74>
 8005188:	f1b8 0f03 	cmp.w	r8, #3
 800518c:	d11a      	bne.n	80051c4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x144>
 800518e:	7daa      	ldrb	r2, [r5, #22]
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1aa      	bne.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005194:	707a      	strb	r2, [r7, #1]
 8005196:	f1bb 0f00 	cmp.w	fp, #0
 800519a:	d0a6      	beq.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0a4      	beq.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 80051a0:	2302      	movs	r3, #2
 80051a2:	75e3      	strb	r3, [r4, #23]
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 80051a6:	7622      	strb	r2, [r4, #24]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	7662      	strb	r2, [r4, #25]
 80051ac:	889b      	ldrh	r3, [r3, #4]
 80051ae:	3b00      	subs	r3, #0
 80051b0:	bf18      	it	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4638      	mov	r0, r7
 80051b8:	7663      	strb	r3, [r4, #25]
 80051ba:	b005      	add	sp, #20
 80051bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	f7ff b8dc 	b.w	800437c <RDMHandler::RespondMessageAck()>
 80051c4:	f1b8 0f02 	cmp.w	r8, #2
 80051c8:	d18f      	bne.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 80051ca:	7daa      	ldrb	r2, [r5, #22]
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d18c      	bne.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 80051d0:	2101      	movs	r1, #1
 80051d2:	7079      	strb	r1, [r7, #1]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d088      	beq.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 80051da:	f884 8017 	strb.w	r8, [r4, #23]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	7622      	strb	r2, [r4, #24]
 80051e2:	7662      	strb	r2, [r4, #25]
 80051e4:	889b      	ldrh	r3, [r3, #4]
 80051e6:	3b00      	subs	r3, #0
 80051e8:	bf18      	it	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	408b      	lsls	r3, r1
 80051ee:	e7e2      	b.n	80051b6 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x136>
 80051f0:	7c6a      	ldrb	r2, [r5, #17]
 80051f2:	7cab      	ldrb	r3, [r5, #18]
 80051f4:	f1bb 0f00 	cmp.w	fp, #0
 80051f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	7dab      	ldrb	r3, [r5, #22]
 8005202:	4652      	mov	r2, sl
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	bf08      	it	eq
 8005208:	2101      	moveq	r1, #1
 800520a:	4643      	mov	r3, r8
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff fec5 	bl	8004f9c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 8005212:	e76a      	b.n	80050ea <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 8005214:	20000640 	andcs	r0, r0, r0, asr #12
 8005218:	0800a31c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sp, pc}
 800521c:	200001fc 	strdcs	r0, [r0], -ip

08005220 <RDMHandler::GetIdentifyMode(unsigned short)>:
 8005220:	2201      	movs	r2, #1
 8005222:	6883      	ldr	r3, [r0, #8]
 8005224:	75da      	strb	r2, [r3, #23]
 8005226:	4a02      	ldr	r2, [pc, #8]	; (8005230 <RDMHandler::GetIdentifyMode(unsigned short)+0x10>)
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	761a      	strb	r2, [r3, #24]
 800522c:	f7ff b8a6 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8005230:	20000645 	andcs	r0, r0, r5, asr #12

08005234 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	6843      	ldr	r3, [r0, #4]
 8005238:	4604      	mov	r4, r0
 800523a:	7d9a      	ldrb	r2, [r3, #22]
 800523c:	460d      	mov	r5, r1
 800523e:	2a01      	cmp	r2, #1
 8005240:	d004      	beq.n	800524c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x18>
 8005242:	2101      	movs	r1, #1
 8005244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005248:	f7ff bac0 	b.w	80047cc <RDMHandler::RespondMessageNack(unsigned short)>
 800524c:	7dd9      	ldrb	r1, [r3, #23]
 800524e:	1e4b      	subs	r3, r1, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2bfd      	cmp	r3, #253	; 0xfd
 8005254:	d801      	bhi.n	800525a <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x26>
 8005256:	2106      	movs	r1, #6
 8005258:	e7f4      	b.n	8005244 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x10>
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x54>)
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x58>)
 8005260:	7019      	strb	r1, [r3, #0]
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x5c>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b15b      	cbz	r3, 8005280 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 8005268:	b151      	cbz	r1, 8005280 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
 800526a:	21ff      	movs	r1, #255	; 0xff
 800526c:	f7fc fc96 	bl	8001b9c <RDMIdentify::On(rdm::identify::Mode)>
 8005270:	b94d      	cbnz	r5, 8005286 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x52>
 8005272:	68a3      	ldr	r3, [r4, #8]
 8005274:	4620      	mov	r0, r4
 8005276:	75dd      	strb	r5, [r3, #23]
 8005278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800527c:	f7ff b87e 	b.w	800437c <RDMHandler::RespondMessageAck()>
 8005280:	f7fc fca6 	bl	8001bd0 <RDMIdentify::Off(rdm::identify::Mode)>
 8005284:	e7f4      	b.n	8005270 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x3c>
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	20000648 	andcs	r0, r0, r8, asr #12
 800528c:	20000645 	andcs	r0, r0, r5, asr #12
 8005290:	20000644 	andcs	r0, r0, r4, asr #12

08005294 <RDMIdentify::RDMIdentify()>:
 8005294:	4b01      	ldr	r3, [pc, #4]	; (800529c <RDMIdentify::RDMIdentify()+0x8>)
 8005296:	6018      	str	r0, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000648 	andcs	r0, r0, r8, asr #12

080052a0 <RDMSlotInfo::bsearch(unsigned short)>:
 80052a0:	b530      	push	{r4, r5, lr}
 80052a2:	2128      	movs	r1, #40	; 0x28
 80052a4:	4604      	mov	r4, r0
 80052a6:	2200      	movs	r2, #0
 80052a8:	4d08      	ldr	r5, [pc, #32]	; (80052cc <RDMSlotInfo::bsearch(unsigned short)+0x2c>)
 80052aa:	1a8b      	subs	r3, r1, r2
 80052ac:	eb02 0063 	add.w	r0, r2, r3, asr #1
 80052b0:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d205      	bcs.n	80052c4 <RDMSlotInfo::bsearch(unsigned short)+0x24>
 80052b8:	1c42      	adds	r2, r0, #1
 80052ba:	428a      	cmp	r2, r1
 80052bc:	ddf5      	ble.n	80052aa <RDMSlotInfo::bsearch(unsigned short)+0xa>
 80052be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052c2:	bd30      	pop	{r4, r5, pc}
 80052c4:	d9fd      	bls.n	80052c2 <RDMSlotInfo::bsearch(unsigned short)+0x22>
 80052c6:	1e41      	subs	r1, r0, #1
 80052c8:	e7f7      	b.n	80052ba <RDMSlotInfo::bsearch(unsigned short)+0x1a>
 80052ca:	bf00      	nop
 80052cc:	0800ab48 	stmdaeq	r0, {r3, r6, r8, r9, fp, sp, pc}

080052d0 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
 80052d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052d4:	4299      	cmp	r1, r3
 80052d6:	b510      	push	{r4, lr}
 80052d8:	4614      	mov	r4, r2
 80052da:	d103      	bne.n	80052e4 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x14>
 80052dc:	4611      	mov	r1, r2
 80052de:	f7fc fc89 	bl	8001bf4 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
 80052e2:	bd10      	pop	{r4, pc}
 80052e4:	4608      	mov	r0, r1
 80052e6:	f7ff ffdb 	bl	80052a0 <RDMSlotInfo::bsearch(unsigned short)>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	da02      	bge.n	80052f4 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x24>
 80052ee:	2000      	movs	r0, #0
 80052f0:	6020      	str	r0, [r4, #0]
 80052f2:	e7f6      	b.n	80052e2 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x40>)
 80052f6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80052fa:	6858      	ldr	r0, [r3, #4]
 80052fc:	4602      	mov	r2, r0
 80052fe:	4613      	mov	r3, r2
 8005300:	7819      	ldrb	r1, [r3, #0]
 8005302:	3201      	adds	r2, #1
 8005304:	2900      	cmp	r1, #0
 8005306:	d1fa      	bne.n	80052fe <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x2e>
 8005308:	1a1b      	subs	r3, r3, r0
 800530a:	b29b      	uxth	r3, r3
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	e7e8      	b.n	80052e2 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x12>
 8005310:	0800ab48 	stmdaeq	r0, {r3, r6, r8, r9, fp, sp, pc}

08005314 <RDMDevice::RDMDevice()>:
 8005314:	4a33      	ldr	r2, [pc, #204]	; (80053e4 <RDMDevice::RDMDevice()+0xd0>)
 8005316:	2300      	movs	r3, #0
 8005318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	4611      	mov	r1, r2
 800531e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8005322:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 8005326:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800532a:	6743      	str	r3, [r0, #116]	; 0x74
 800532c:	4613      	mov	r3, r2
 800532e:	7818      	ldrb	r0, [r3, #0]
 8005330:	3201      	adds	r2, #1
 8005332:	2800      	cmp	r0, #0
 8005334:	d1fa      	bne.n	800532c <RDMDevice::RDMDevice()+0x18>
 8005336:	1a5b      	subs	r3, r3, r1
 8005338:	2b20      	cmp	r3, #32
 800533a:	bf28      	it	cs
 800533c:	2320      	movcs	r3, #32
 800533e:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 8005342:	4629      	mov	r1, r5
 8005344:	461a      	mov	r2, r3
 8005346:	4827      	ldr	r0, [pc, #156]	; (80053e4 <RDMDevice::RDMDevice()+0xd0>)
 8005348:	3a01      	subs	r2, #1
 800534a:	d23b      	bcs.n	80053c4 <RDMDevice::RDMDevice()+0xb0>
 800534c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <RDMDevice::RDMDevice()+0xd4>)
 8005352:	4669      	mov	r1, sp
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	7022      	strb	r2, [r4, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	7063      	strb	r3, [r4, #1]
 800535c:	4b23      	ldr	r3, [pc, #140]	; (80053ec <RDMDevice::RDMDevice()+0xd8>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	f002 fa4c 	bl	80077fc <Network::MacAddressCopyTo(unsigned char*)>
 8005364:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8005368:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800536c:	70a3      	strb	r3, [r4, #2]
 800536e:	7263      	strb	r3, [r4, #9]
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <RDMDevice::RDMDevice()+0xdc>)
 8005372:	70e2      	strb	r2, [r4, #3]
 8005374:	7222      	strb	r2, [r4, #8]
 8005376:	461a      	mov	r2, r3
 8005378:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800537c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005380:	7121      	strb	r1, [r4, #4]
 8005382:	7160      	strb	r0, [r4, #5]
 8005384:	71a0      	strb	r0, [r4, #6]
 8005386:	71e1      	strb	r1, [r4, #7]
 8005388:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800538c:	2900      	cmp	r1, #0
 800538e:	d1fb      	bne.n	8005388 <RDMDevice::RDMDevice()+0x74>
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	2b20      	cmp	r3, #32
 8005394:	bf28      	it	cs
 8005396:	2320      	movcs	r3, #32
 8005398:	461a      	mov	r2, r3
 800539a:	4915      	ldr	r1, [pc, #84]	; (80053f0 <RDMDevice::RDMDevice()+0xdc>)
 800539c:	3a01      	subs	r2, #1
 800539e:	d216      	bcs.n	80053ce <RDMDevice::RDMDevice()+0xba>
 80053a0:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80053a4:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 80053a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80053aa:	2314      	movs	r3, #20
 80053ac:	4a11      	ldr	r2, [pc, #68]	; (80053f4 <RDMDevice::RDMDevice()+0xe0>)
 80053ae:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 80053b2:	f104 0165 	add.w	r1, r4, #101	; 0x65
 80053b6:	f104 0351 	add.w	r3, r4, #81	; 0x51
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d10c      	bne.n	80053d8 <RDMDevice::RDMDevice()+0xc4>
 80053be:	4620      	mov	r0, r4
 80053c0:	b002      	add	sp, #8
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f810 6b01 	ldrb.w	r6, [r0], #1
 80053c8:	f801 6b01 	strb.w	r6, [r1], #1
 80053cc:	e7bc      	b.n	8005348 <RDMDevice::RDMDevice()+0x34>
 80053ce:	f811 0b01 	ldrb.w	r0, [r1], #1
 80053d2:	f805 0b01 	strb.w	r0, [r5], #1
 80053d6:	e7e1      	b.n	800539c <RDMDevice::RDMDevice()+0x88>
 80053d8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80053dc:	f803 0b01 	strb.w	r0, [r3], #1
 80053e0:	e7eb      	b.n	80053ba <RDMDevice::RDMDevice()+0xa6>
 80053e2:	bf00      	nop
 80053e4:	0800ad87 	stmdaeq	r0, {r0, r1, r2, r7, r8, sl, fp, sp, pc}
 80053e8:	0800ad85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, sp, pc}
 80053ec:	200016e4 	andcs	r1, r0, r4, ror #13
 80053f0:	0800ac88 	stmdaeq	r0, {r3, r7, sl, fp, sp, pc}
 80053f4:	0800ad70 	stmdaeq	r0, {r4, r5, r6, r8, sl, fp, sp, pc}

080053f8 <RDMDevice::Print()>:
 80053f8:	b513      	push	{r0, r1, r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	4818      	ldr	r0, [pc, #96]	; (8005460 <RDMDevice::Print()+0x68>)
 80053fe:	f7fc fe27 	bl	8002050 <printf>
 8005402:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 8005406:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800540a:	4816      	ldr	r0, [pc, #88]	; (8005464 <RDMDevice::Print()+0x6c>)
 800540c:	f7fc fe20 	bl	8002050 <printf>
 8005410:	7862      	ldrb	r2, [r4, #1]
 8005412:	7821      	ldrb	r1, [r4, #0]
 8005414:	4814      	ldr	r0, [pc, #80]	; (8005468 <RDMDevice::Print()+0x70>)
 8005416:	f7fc fe1b 	bl	8002050 <printf>
 800541a:	79a3      	ldrb	r3, [r4, #6]
 800541c:	7a22      	ldrb	r2, [r4, #8]
 800541e:	7a61      	ldrb	r1, [r4, #9]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	4812      	ldr	r0, [pc, #72]	; (800546c <RDMDevice::Print()+0x74>)
 8005424:	79e3      	ldrb	r3, [r4, #7]
 8005426:	f7fc fe13 	bl	8002050 <printf>
 800542a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800542e:	f104 020a 	add.w	r2, r4, #10
 8005432:	480f      	ldr	r0, [pc, #60]	; (8005470 <RDMDevice::Print()+0x78>)
 8005434:	f7fc fe0c 	bl	8002050 <printf>
 8005438:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800543c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8005440:	0a09      	lsrs	r1, r1, #8
 8005442:	480c      	ldr	r0, [pc, #48]	; (8005474 <RDMDevice::Print()+0x7c>)
 8005444:	f7fc fe04 	bl	8002050 <printf>
 8005448:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800544c:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 8005450:	4809      	ldr	r0, [pc, #36]	; (8005478 <RDMDevice::Print()+0x80>)
 8005452:	0a09      	lsrs	r1, r1, #8
 8005454:	b002      	add	sp, #8
 8005456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545a:	f7fc bdf9 	b.w	8002050 <printf>
 800545e:	bf00      	nop
 8005460:	0800ac9c 	stmdaeq	r0, {r2, r3, r4, r7, sl, fp, sp, pc}
 8005464:	0800acb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, fp, sp, pc}
 8005468:	0800acd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, sp, pc}
 800546c:	0800acf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp, sp, pc}
 8005470:	0800ad17 	stmdaeq	r0, {r0, r1, r2, r4, r8, sl, fp, sp, pc}
 8005474:	0800ad32 	stmdaeq	r0, {r1, r4, r5, r8, sl, fp, sp, pc}
 8005478:	0800ad51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp, sp, pc}

0800547c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005480:	460e      	mov	r6, r1
 8005482:	4611      	mov	r1, r2
 8005484:	4604      	mov	r4, r0
 8005486:	4690      	mov	r8, r2
 8005488:	461d      	mov	r5, r3
 800548a:	9f06      	ldr	r7, [sp, #24]
 800548c:	f000 fa92 	bl	80059b4 <PixelConfiguration::Validate(unsigned int&)>
 8005490:	2e01      	cmp	r6, #1
 8005492:	d009      	beq.n	80054a8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 8005494:	7ce2      	ldrb	r2, [r4, #19]
 8005496:	b93a      	cbnz	r2, 80054a8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 8005498:	2e04      	cmp	r6, #4
 800549a:	d13c      	bne.n	8005516 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x9a>
 800549c:	2303      	movs	r3, #3
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	4641      	mov	r1, r8
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 fa86 	bl	80059b4 <PixelConfiguration::Validate(unsigned int&)>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	bf15      	itete	ne
 80054ae:	f44f 72aa 	movne.w	r2, #340	; 0x154
 80054b2:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80054b6:	21aa      	movne	r1, #170	; 0xaa
 80054b8:	2180      	moveq	r1, #128	; 0x80
 80054ba:	bf14      	ite	ne
 80054bc:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 80054c0:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 80054c4:	e9c5 1200 	strd	r1, r2, [r5]
 80054c8:	69a2      	ldr	r2, [r4, #24]
 80054ca:	60ab      	str	r3, [r5, #8]
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	b10a      	cbz	r2, 80054d4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d900      	bls.n	80054d6 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5a>
 80054d4:	61a3      	str	r3, [r4, #24]
 80054d6:	69a2      	ldr	r2, [r4, #24]
 80054d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	6963      	ldr	r3, [r4, #20]
 80054e0:	42b3      	cmp	r3, r6
 80054e2:	bf94      	ite	ls
 80054e4:	6163      	strls	r3, [r4, #20]
 80054e6:	6166      	strhi	r6, [r4, #20]
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f2:	9b07      	ldr	r3, [sp, #28]
 80054f4:	3201      	adds	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	2e01      	cmp	r6, #1
 80054fa:	bf01      	itttt	eq
 80054fc:	682b      	ldreq	r3, [r5, #0]
 80054fe:	683a      	ldreq	r2, [r7, #0]
 8005500:	3301      	addeq	r3, #1
 8005502:	fbb2 f2f3 	udiveq	r2, r2, r3
 8005506:	bf1e      	ittt	ne
 8005508:	6963      	ldrne	r3, [r4, #20]
 800550a:	435a      	mulne	r2, r3
 800550c:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 8005510:	60ea      	str	r2, [r5, #12]
 8005512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0c1      	beq.n	80054a0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800551c:	3b0b      	subs	r3, #11
 800551e:	2b01      	cmp	r3, #1
 8005520:	bf88      	it	hi
 8005522:	6022      	strhi	r2, [r4, #0]
 8005524:	e7bc      	b.n	80054a0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

08005526 <PixelDmxConfiguration::Dump()>:
 8005526:	4770      	bx	lr

08005528 <LightSet::Blackout(bool)>:
 8005528:	4770      	bx	lr

0800552a <LightSet::Print()>:
 800552a:	4770      	bx	lr

0800552c <PixelDmxParamsRdm::SetDmxStartAddress(unsigned short)>:
 800552c:	2000      	movs	r0, #0
 800552e:	4770      	bx	lr

08005530 <PixelDmxParamsRdm::GetDmxStartAddress()>:
 8005530:	2001      	movs	r0, #1
 8005532:	4770      	bx	lr

08005534 <PixelDmxParamsRdm::GetDmxFootprint()>:
 8005534:	2006      	movs	r0, #6
 8005536:	4770      	bx	lr

08005538 <PixelDmxParamsRdm::Stop(unsigned int)>:
 8005538:	4770      	bx	lr

0800553a <PixelDmxParamsRdm::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800553a:	2905      	cmp	r1, #5
 800553c:	f04f 0000 	mov.w	r0, #0
 8005540:	bf9f      	itttt	ls
 8005542:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8005546:	7090      	strbls	r0, [r2, #2]
 8005548:	8013      	strhls	r3, [r2, #0]
 800554a:	2001      	movls	r0, #1
 800554c:	4770      	bx	lr

0800554e <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 800554e:	4770      	bx	lr

08005550 <PixelDmxParamsRdm::~PixelDmxParamsRdm()>:
 8005550:	b510      	push	{r4, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	f002 ff8f 	bl	8008476 <operator delete(void*)>
 8005558:	4620      	mov	r0, r4
 800555a:	bd10      	pop	{r4, pc}

0800555c <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)>:
 800555c:	4b02      	ldr	r3, [pc, #8]	; (8005568 <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0xc>)
 800555e:	6003      	str	r3, [r0, #0]
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <PixelDmxParamsRdm::PixelDmxParamsRdm(WS28xxDmxStore*)+0x10>)
 8005562:	6019      	str	r1, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	0800adac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, sp, pc}
 800556c:	2000064c 	andcs	r0, r0, ip, asr #12

08005570 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005570:	2b05      	cmp	r3, #5
 8005572:	b570      	push	{r4, r5, r6, lr}
 8005574:	4606      	mov	r6, r0
 8005576:	4614      	mov	r4, r2
 8005578:	d934      	bls.n	80055e4 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 800557a:	7953      	ldrb	r3, [r2, #5]
 800557c:	b933      	cbnz	r3, 800558c <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c>
 800557e:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005580:	7013      	strb	r3, [r2, #0]
 8005582:	4621      	mov	r1, r4
 8005584:	4630      	mov	r0, r6
 8005586:	f7fc f931 	bl	80017ec <PixelDmxParamsRdm::Display(unsigned char const*)>
 800558a:	e02b      	b.n	80055e4 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 800558c:	2bff      	cmp	r3, #255	; 0xff
 800558e:	d124      	bne.n	80055da <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>)
 8005592:	7811      	ldrb	r1, [r2, #0]
 8005594:	2900      	cmp	r1, #0
 8005596:	d1f4      	bne.n	8005582 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 8005598:	4d14      	ldr	r5, [pc, #80]	; (80055ec <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 800559a:	7013      	strb	r3, [r2, #0]
 800559c:	6828      	ldr	r0, [r5, #0]
 800559e:	7821      	ldrb	r1, [r4, #0]
 80055a0:	6803      	ldr	r3, [r0, #0]
 80055a2:	290e      	cmp	r1, #14
 80055a4:	bf28      	it	cs
 80055a6:	210e      	movcs	r1, #14
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	4798      	blx	r3
 80055ac:	6828      	ldr	r0, [r5, #0]
 80055ae:	7861      	ldrb	r1, [r4, #1]
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4798      	blx	r3
 80055b6:	6828      	ldr	r0, [r5, #0]
 80055b8:	78a1      	ldrb	r1, [r4, #2]
 80055ba:	6803      	ldr	r3, [r0, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	4798      	blx	r3
 80055c0:	6828      	ldr	r0, [r5, #0]
 80055c2:	78e1      	ldrb	r1, [r4, #3]
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	2906      	cmp	r1, #6
 80055c8:	bf28      	it	cs
 80055ca:	2106      	movcs	r1, #6
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4798      	blx	r3
 80055d0:	6828      	ldr	r0, [r5, #0]
 80055d2:	7921      	ldrb	r1, [r4, #4]
 80055d4:	6803      	ldr	r3, [r0, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	4798      	blx	r3
 80055da:	7963      	ldrb	r3, [r4, #5]
 80055dc:	3b01      	subs	r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2bfd      	cmp	r3, #253	; 0xfd
 80055e2:	d8ce      	bhi.n	8005582 <PixelDmxParamsRdm::SetData(unsigned int, unsigned char const*, unsigned int)+0x12>
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	bf00      	nop
 80055e8:	20000650 	andcs	r0, r0, r0, asr r6
 80055ec:	2000064c 	andcs	r0, r0, ip, asr #12

080055f0 <WS28xxDmx::GetDmxStartAddress()>:
 80055f0:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 80055f2:	4770      	bx	lr

080055f4 <WS28xxDmx::GetDmxFootprint()>:
 80055f4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80055f6:	4770      	bx	lr

080055f8 <WS28xxDmx::~WS28xxDmx()>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 80055fc:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80055fe:	4604      	mov	r4, r0
 8005600:	6003      	str	r3, [r0, #0]
 8005602:	b12d      	cbz	r5, 8005610 <WS28xxDmx::~WS28xxDmx()+0x18>
 8005604:	4628      	mov	r0, r5
 8005606:	f001 fb31 	bl	8006c6c <WS28xx::~WS28xx()>
 800560a:	4628      	mov	r0, r5
 800560c:	f002 ff33 	bl	8008476 <operator delete(void*)>
 8005610:	4620      	mov	r0, r4
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	0800ade0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp, pc}

08005618 <WS28xxDmx::~WS28xxDmx()>:
 8005618:	b510      	push	{r4, lr}
 800561a:	4604      	mov	r4, r0
 800561c:	f7ff ffec 	bl	80055f8 <WS28xxDmx::~WS28xxDmx()>
 8005620:	4620      	mov	r0, r4
 8005622:	f002 ff28 	bl	8008476 <operator delete(void*)>
 8005626:	4620      	mov	r0, r4
 8005628:	bd10      	pop	{r4, pc}

0800562a <WS28xxDmx::Blackout(bool)>:
 800562a:	b538      	push	{r3, r4, r5, lr}
 800562c:	4605      	mov	r5, r0
 800562e:	460c      	mov	r4, r1
 8005630:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 8005634:	f004 f964 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8005638:	2800      	cmp	r0, #0
 800563a:	d1fb      	bne.n	8005634 <WS28xxDmx::Blackout(bool)+0xa>
 800563c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800563e:	b11c      	cbz	r4, 8005648 <WS28xxDmx::Blackout(bool)+0x1e>
 8005640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005644:	f001 bb8c 	b.w	8006d60 <WS28xx::Blackout()>
 8005648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800564c:	f001 bb6c 	b.w	8006d28 <WS28xx::Update()>

08005650 <WS28xxDmx::Start(unsigned int)>:
 8005650:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005654:	b93b      	cbnz	r3, 8005666 <WS28xxDmx::Start(unsigned int)+0x16>
 8005656:	2301      	movs	r3, #1
 8005658:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800565c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800565e:	b110      	cbz	r0, 8005666 <WS28xxDmx::Start(unsigned int)+0x16>
 8005660:	6803      	ldr	r3, [r0, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4718      	bx	r3
 8005666:	4770      	bx	lr

08005668 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 8005668:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800566a:	b508      	push	{r3, lr}
 800566c:	428a      	cmp	r2, r1
 800566e:	d101      	bne.n	8005674 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 8005670:	2001      	movs	r0, #1
 8005672:	bd08      	pop	{r3, pc}
 8005674:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8005676:	440a      	add	r2, r1
 8005678:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800567c:	dc0b      	bgt.n	8005696 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800567e:	1e4a      	subs	r2, r1, #1
 8005680:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005684:	d207      	bcs.n	8005696 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 8005686:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8005688:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800568a:	2800      	cmp	r0, #0
 800568c:	d0f0      	beq.n	8005670 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800568e:	6803      	ldr	r3, [r0, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4798      	blx	r3
 8005694:	e7ec      	b.n	8005670 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 8005696:	2000      	movs	r0, #0
 8005698:	e7eb      	b.n	8005672 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800569a <WS28xxDmx::Stop(unsigned int)>:
 800569a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800569e:	b510      	push	{r4, lr}
 80056a0:	4604      	mov	r4, r0
 80056a2:	b16b      	cbz	r3, 80056c0 <WS28xxDmx::Stop(unsigned int)+0x26>
 80056a4:	2300      	movs	r3, #0
 80056a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80056aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80056ac:	b108      	cbz	r0, 80056b2 <WS28xxDmx::Stop(unsigned int)+0x18>
 80056ae:	f001 fb57 	bl	8006d60 <WS28xx::Blackout()>
 80056b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80056b4:	b120      	cbz	r0, 80056c0 <WS28xxDmx::Stop(unsigned int)+0x26>
 80056b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ba:	6803      	ldr	r3, [r0, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	4718      	bx	r3
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80056c2:	4603      	mov	r3, r0
 80056c4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 80056c6:	4288      	cmp	r0, r1
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	d30f      	bcc.n	80056ee <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 80056ce:	7090      	strb	r0, [r2, #2]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	fbb1 f0f3 	udiv	r0, r1, r3
 80056d6:	fb03 1110 	mls	r1, r3, r0, r1
 80056da:	2903      	cmp	r1, #3
 80056dc:	d80e      	bhi.n	80056fc <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 80056de:	e8df f001 	tbb	[pc, r1]
 80056e2:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 80056e6:	f240 2305 	movw	r3, #517	; 0x205
 80056ea:	2001      	movs	r0, #1
 80056ec:	8013      	strh	r3, [r2, #0]
 80056ee:	4770      	bx	lr
 80056f0:	f240 2306 	movw	r3, #518	; 0x206
 80056f4:	e7f9      	b.n	80056ea <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 80056f6:	f240 2307 	movw	r3, #519	; 0x207
 80056fa:	e7f6      	b.n	80056ea <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 80056fc:	f240 2312 	movw	r3, #530	; 0x212
 8005700:	e7f3      	b.n	80056ea <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

08005702 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 8005702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005706:	b085      	sub	sp, #20
 8005708:	4606      	mov	r6, r0
 800570a:	4691      	mov	r9, r2
 800570c:	4698      	mov	r8, r3
 800570e:	9103      	str	r1, [sp, #12]
 8005710:	f004 f8f6 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8005714:	2800      	cmp	r0, #0
 8005716:	d172      	bne.n	80057fe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	6972      	ldr	r2, [r6, #20]
 800571c:	f003 0103 	and.w	r1, r3, #3
 8005720:	6a33      	ldr	r3, [r6, #32]
 8005722:	2902      	cmp	r1, #2
 8005724:	fbb8 f7f3 	udiv	r7, r8, r3
 8005728:	d01f      	beq.n	800576a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x68>
 800572a:	2903      	cmp	r1, #3
 800572c:	d024      	beq.n	8005778 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x76>
 800572e:	2901      	cmp	r1, #1
 8005730:	6875      	ldr	r5, [r6, #4]
 8005732:	d01b      	beq.n	800576c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 8005734:	4297      	cmp	r7, r2
 8005736:	bf28      	it	cs
 8005738:	4617      	movcs	r7, r2
 800573a:	4295      	cmp	r5, r2
 800573c:	d91e      	bls.n	800577c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800573e:	4605      	mov	r5, r0
 8005740:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 8005742:	3c01      	subs	r4, #1
 8005744:	2b03      	cmp	r3, #3
 8005746:	444c      	add	r4, r9
 8005748:	d144      	bne.n	80057d4 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd2>
 800574a:	42bd      	cmp	r5, r7
 800574c:	d325      	bcc.n	800579a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800574e:	6933      	ldr	r3, [r6, #16]
 8005750:	9a03      	ldr	r2, [sp, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d153      	bne.n	80057fe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 8005756:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800575a:	2b00      	cmp	r3, #0
 800575c:	d14f      	bne.n	80057fe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800575e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8005760:	b005      	add	sp, #20
 8005762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005766:	f001 badf 	b.w	8006d28 <WS28xx::Update()>
 800576a:	68b5      	ldr	r5, [r6, #8]
 800576c:	442f      	add	r7, r5
 800576e:	4297      	cmp	r7, r2
 8005770:	bf28      	it	cs
 8005772:	4617      	movcs	r7, r2
 8005774:	4604      	mov	r4, r0
 8005776:	e7e5      	b.n	8005744 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8005778:	68f5      	ldr	r5, [r6, #12]
 800577a:	e7f7      	b.n	800576c <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800577c:	4605      	mov	r5, r0
 800577e:	4604      	mov	r4, r0
 8005780:	e7e0      	b.n	8005744 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 8005782:	78a2      	ldrb	r2, [r4, #2]
 8005784:	7863      	ldrb	r3, [r4, #1]
 8005786:	9200      	str	r2, [sp, #0]
 8005788:	eb0b 010a 	add.w	r1, fp, sl
 800578c:	7822      	ldrb	r2, [r4, #0]
 800578e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8005790:	f000 fc8a 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005794:	f10a 0a01 	add.w	sl, sl, #1
 8005798:	e00a      	b.n	80057b0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
 800579a:	eba4 0309 	sub.w	r3, r4, r9
 800579e:	4598      	cmp	r8, r3
 80057a0:	d9d5      	bls.n	800574e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 80057a2:	f04f 0a00 	mov.w	sl, #0
 80057a6:	69b3      	ldr	r3, [r6, #24]
 80057a8:	f894 f000 	pld	[r4]
 80057ac:	fb03 fb05 	mul.w	fp, r3, r5
 80057b0:	69b3      	ldr	r3, [r6, #24]
 80057b2:	459a      	cmp	sl, r3
 80057b4:	d3e5      	bcc.n	8005782 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 80057b6:	3501      	adds	r5, #1
 80057b8:	3403      	adds	r4, #3
 80057ba:	e7c6      	b.n	800574a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 80057bc:	f04f 0a00 	mov.w	sl, #0
 80057c0:	69b3      	ldr	r3, [r6, #24]
 80057c2:	f894 f000 	pld	[r4]
 80057c6:	fb03 fb05 	mul.w	fp, r3, r5
 80057ca:	69b3      	ldr	r3, [r6, #24]
 80057cc:	459a      	cmp	sl, r3
 80057ce:	d308      	bcc.n	80057e2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 80057d0:	3501      	adds	r5, #1
 80057d2:	3404      	adds	r4, #4
 80057d4:	42af      	cmp	r7, r5
 80057d6:	d9ba      	bls.n	800574e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 80057d8:	eba4 0309 	sub.w	r3, r4, r9
 80057dc:	4598      	cmp	r8, r3
 80057de:	d8ed      	bhi.n	80057bc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xba>
 80057e0:	e7b5      	b.n	800574e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 80057e2:	78e2      	ldrb	r2, [r4, #3]
 80057e4:	7863      	ldrb	r3, [r4, #1]
 80057e6:	9201      	str	r2, [sp, #4]
 80057e8:	78a2      	ldrb	r2, [r4, #2]
 80057ea:	eb0b 010a 	add.w	r1, fp, sl
 80057ee:	9200      	str	r2, [sp, #0]
 80057f0:	7822      	ldrb	r2, [r4, #0]
 80057f2:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80057f4:	f001 f924 	bl	8006a40 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80057f8:	f10a 0a01 	add.w	sl, sl, #1
 80057fc:	e7e5      	b.n	80057ca <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
 80057fe:	b005      	add	sp, #20
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005804 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	4b1d      	ldr	r3, [pc, #116]	; (800587c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 8005808:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800580a:	6003      	str	r3, [r0, #0]
 800580c:	2300      	movs	r3, #0
 800580e:	460d      	mov	r5, r1
 8005810:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8005814:	2101      	movs	r1, #1
 8005816:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800581a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800581e:	8483      	strh	r3, [r0, #36]	; 0x24
 8005820:	6283      	str	r3, [r0, #40]	; 0x28
 8005822:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005824:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800582a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	f100 031c 	add.w	r3, r0, #28
 8005832:	8602      	strh	r2, [r0, #48]	; 0x30
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	f100 0314 	add.w	r3, r0, #20
 800583a:	4604      	mov	r4, r0
 800583c:	f100 0220 	add.w	r2, r0, #32
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	1d03      	adds	r3, r0, #4
 8005844:	4628      	mov	r0, r5
 8005846:	f7ff fe19 	bl	800547c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800584a:	201c      	movs	r0, #28
 800584c:	f002 fe17 	bl	800847e <operator new(unsigned int)>
 8005850:	4606      	mov	r6, r0
 8005852:	4629      	mov	r1, r5
 8005854:	f001 fa28 	bl	8006ca8 <WS28xx::WS28xx(PixelConfiguration&)>
 8005858:	4630      	mov	r0, r6
 800585a:	6366      	str	r6, [r4, #52]	; 0x34
 800585c:	f001 fa80 	bl	8006d60 <WS28xx::Blackout()>
 8005860:	69ab      	ldr	r3, [r5, #24]
 8005862:	6a22      	ldr	r2, [r4, #32]
 8005864:	61a3      	str	r3, [r4, #24]
 8005866:	8bab      	ldrh	r3, [r5, #28]
 8005868:	4628      	mov	r0, r5
 800586a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800586c:	6963      	ldr	r3, [r4, #20]
 800586e:	4353      	muls	r3, r2
 8005870:	8623      	strh	r3, [r4, #48]	; 0x30
 8005872:	f7ff fe58 	bl	8005526 <PixelDmxConfiguration::Dump()>
 8005876:	4620      	mov	r0, r4
 8005878:	b002      	add	sp, #8
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	0800ade0 	stmdaeq	r0, {r5, r6, r7, r8, sl, fp, sp, pc}
 8005880:	20000654 	andcs	r0, r0, r4, asr r6

08005884 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 8005884:	2200      	movs	r2, #0
 8005886:	6001      	str	r1, [r0, #0]
 8005888:	4910      	ldr	r1, [pc, #64]	; (80058cc <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 800588a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800588e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8005892:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8005896:	81c1      	strh	r1, [r0, #14]
 8005898:	213d      	movs	r1, #61	; 0x3d
 800589a:	8201      	strh	r1, [r0, #16]
 800589c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058a0:	8241      	strh	r1, [r0, #18]
 80058a2:	2101      	movs	r1, #1
 80058a4:	7541      	strb	r1, [r0, #21]
 80058a6:	2106      	movs	r1, #6
 80058a8:	75c1      	strb	r1, [r0, #23]
 80058aa:	4909      	ldr	r1, [pc, #36]	; (80058d0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 80058ac:	7302      	strb	r2, [r0, #12]
 80058ae:	e9c0 c106 	strd	ip, r1, [r0, #24]
 80058b2:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 80058b6:	6201      	str	r1, [r0, #32]
 80058b8:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 80058bc:	6241      	str	r1, [r0, #36]	; 0x24
 80058be:	211d      	movs	r1, #29
 80058c0:	7582      	strb	r2, [r0, #22]
 80058c2:	8501      	strh	r1, [r0, #40]	; 0x28
 80058c4:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	0100aa03 	tsteq	r0, r3, lsl #20
 80058d0:	00090005 	andeq	r0, r9, r5

080058d4 <WS28xxDmxParams::Load()>:
 80058d4:	b508      	push	{r3, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4601      	mov	r1, r0
 80058da:	6043      	str	r3, [r0, #4]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	b120      	cbz	r0, 80058ea <WS28xxDmxParams::Load()+0x16>
 80058e0:	6803      	ldr	r3, [r0, #0]
 80058e2:	3104      	adds	r1, #4
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	4798      	blx	r3
 80058e8:	2001      	movs	r0, #1
 80058ea:	bd08      	pop	{r3, pc}

080058ec <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 80058ec:	6843      	ldr	r3, [r0, #4]
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	bf44      	itt	mi
 80058f2:	7a02      	ldrbmi	r2, [r0, #8]
 80058f4:	600a      	strmi	r2, [r1, #0]
 80058f6:	079a      	lsls	r2, r3, #30
 80058f8:	d505      	bpl.n	8005906 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 80058fa:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 80058fe:	2a00      	cmp	r2, #0
 8005900:	bf08      	it	eq
 8005902:	22aa      	moveq	r2, #170	; 0xaa
 8005904:	604a      	str	r2, [r1, #4]
 8005906:	059a      	lsls	r2, r3, #22
 8005908:	bf44      	itt	mi
 800590a:	7dc2      	ldrbmi	r2, [r0, #23]
 800590c:	608a      	strmi	r2, [r1, #8]
 800590e:	055a      	lsls	r2, r3, #21
 8005910:	bf44      	itt	mi
 8005912:	7e02      	ldrbmi	r2, [r0, #24]
 8005914:	740a      	strbmi	r2, [r1, #16]
 8005916:	051a      	lsls	r2, r3, #20
 8005918:	bf44      	itt	mi
 800591a:	7e42      	ldrbmi	r2, [r0, #25]
 800591c:	744a      	strbmi	r2, [r1, #17]
 800591e:	06da      	lsls	r2, r3, #27
 8005920:	bf44      	itt	mi
 8005922:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8005926:	60ca      	strmi	r2, [r1, #12]
 8005928:	069a      	lsls	r2, r3, #26
 800592a:	bf44      	itt	mi
 800592c:	7c82      	ldrbmi	r2, [r0, #18]
 800592e:	748a      	strbmi	r2, [r1, #18]
 8005930:	075a      	lsls	r2, r3, #29
 8005932:	d50b      	bpl.n	800594c <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 8005934:	7ac2      	ldrb	r2, [r0, #11]
 8005936:	b510      	push	{r4, lr}
 8005938:	7b04      	ldrb	r4, [r0, #12]
 800593a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800593e:	838a      	strh	r2, [r1, #28]
 8005940:	05da      	lsls	r2, r3, #23
 8005942:	bf44      	itt	mi
 8005944:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005948:	618b      	strmi	r3, [r1, #24]
 800594a:	bd10      	pop	{r4, pc}
 800594c:	05db      	lsls	r3, r3, #23
 800594e:	bf44      	itt	mi
 8005950:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 8005954:	618b      	strmi	r3, [r1, #24]
 8005956:	4770      	bx	lr

08005958 <WS28xxDmxParams::Dump()>:
 8005958:	4770      	bx	lr
	...

0800595c <WS28xxDmx::Print()>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005962:	f000 fb5f 	bl	8006024 <WS28xx::Print()>
 8005966:	4805      	ldr	r0, [pc, #20]	; (800597c <WS28xxDmx::Print()+0x20>)
 8005968:	f7fc fb72 	bl	8002050 <printf>
 800596c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <WS28xxDmx::Print()+0x24>)
 8005976:	f7fc bb6b 	b.w	8002050 <printf>
 800597a:	bf00      	nop
 800597c:	0800ae0c 	stmdaeq	r0, {r2, r3, r9, sl, fp, sp, pc}
 8005980:	0800ae22 	stmdaeq	r0, {r1, r5, r9, sl, fp, sp, pc}

08005984 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 8005984:	3801      	subs	r0, #1
 8005986:	2809      	cmp	r0, #9
 8005988:	bf9a      	itte	ls
 800598a:	4b02      	ldrls	r3, [pc, #8]	; (8005994 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 800598c:	5618      	ldrsbls	r0, [r3, r0]
 800598e:	2002      	movhi	r0, #2
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	0800ae46 	stmdaeq	r0, {r1, r2, r6, r9, sl, fp, sp, pc}

08005998 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8005998:	23c0      	movs	r3, #192	; 0xc0
 800599a:	2803      	cmp	r0, #3
 800599c:	700b      	strb	r3, [r1, #0]
 800599e:	d006      	beq.n	80059ae <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 80059a0:	3808      	subs	r0, #8
 80059a2:	2803      	cmp	r0, #3
 80059a4:	bf34      	ite	cc
 80059a6:	23fc      	movcc	r3, #252	; 0xfc
 80059a8:	23f0      	movcs	r3, #240	; 0xf0
 80059aa:	7013      	strb	r3, [r2, #0]
 80059ac:	4770      	bx	lr
 80059ae:	23f8      	movs	r3, #248	; 0xf8
 80059b0:	e7fb      	b.n	80059aa <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

080059b4 <PixelConfiguration::Validate(unsigned int&)>:
 80059b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059b6:	e9d0 5300 	ldrd	r5, r3, [r0]
 80059ba:	2d07      	cmp	r5, #7
 80059bc:	4604      	mov	r4, r0
 80059be:	6882      	ldr	r2, [r0, #8]
 80059c0:	d129      	bne.n	8005a16 <PixelConfiguration::Validate(unsigned int&)+0x62>
 80059c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c6:	bf28      	it	cs
 80059c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80059cc:	6043      	str	r3, [r0, #4]
 80059ce:	2304      	movs	r3, #4
 80059d0:	600b      	str	r3, [r1, #0]
 80059d2:	2301      	movs	r3, #1
 80059d4:	2a06      	cmp	r2, #6
 80059d6:	74e3      	strb	r3, [r4, #19]
 80059d8:	d103      	bne.n	80059e2 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 80059da:	4628      	mov	r0, r5
 80059dc:	f7ff ffd2 	bl	8005984 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 80059e0:	60a0      	str	r0, [r4, #8]
 80059e2:	7c63      	ldrb	r3, [r4, #17]
 80059e4:	7c22      	ldrb	r2, [r4, #16]
 80059e6:	4628      	mov	r0, r5
 80059e8:	429a      	cmp	r2, r3
 80059ea:	bf28      	it	cs
 80059ec:	2300      	movcs	r3, #0
 80059ee:	f10d 0207 	add.w	r2, sp, #7
 80059f2:	bf28      	it	cs
 80059f4:	8223      	strhcs	r3, [r4, #16]
 80059f6:	f10d 0106 	add.w	r1, sp, #6
 80059fa:	f7ff ffcd 	bl	8005998 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 80059fe:	7c23      	ldrb	r3, [r4, #16]
 8005a00:	b913      	cbnz	r3, 8005a08 <PixelConfiguration::Validate(unsigned int&)+0x54>
 8005a02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a06:	7423      	strb	r3, [r4, #16]
 8005a08:	7c63      	ldrb	r3, [r4, #17]
 8005a0a:	b913      	cbnz	r3, 8005a12 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 8005a0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a10:	7463      	strb	r3, [r4, #17]
 8005a12:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 8005a14:	e020      	b.n	8005a58 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8005a16:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8005a1a:	bf28      	it	cs
 8005a1c:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8005a20:	6043      	str	r3, [r0, #4]
 8005a22:	2303      	movs	r3, #3
 8005a24:	600b      	str	r3, [r1, #0]
 8005a26:	f1a5 030b 	sub.w	r3, r5, #11
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d806      	bhi.n	8005a3c <PixelConfiguration::Validate(unsigned int&)+0x88>
 8005a2e:	7c83      	ldrb	r3, [r0, #18]
 8005a30:	2b1f      	cmp	r3, #31
 8005a32:	d81d      	bhi.n	8005a70 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 8005a34:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005a38:	74a3      	strb	r3, [r4, #18]
 8005a3a:	e000      	b.n	8005a3e <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005a3c:	b9d5      	cbnz	r5, 8005a74 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8005a44:	2a06      	cmp	r2, #6
 8005a46:	bf08      	it	eq
 8005a48:	60a3      	streq	r3, [r4, #8]
 8005a4a:	2d0d      	cmp	r5, #13
 8005a4c:	74e3      	strb	r3, [r4, #19]
 8005a4e:	8221      	strh	r1, [r4, #16]
 8005a50:	68e3      	ldr	r3, [r4, #12]
 8005a52:	d109      	bne.n	8005a68 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 8005a54:	b913      	cbnz	r3, 8005a5c <PixelConfiguration::Validate(unsigned int&)+0xa8>
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 8005a58:	60e3      	str	r3, [r4, #12]
 8005a5a:	e003      	b.n	8005a64 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 8005a5c:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d900      	bls.n	8005a64 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 8005a62:	60e2      	str	r2, [r4, #12]
 8005a64:	b003      	add	sp, #12
 8005a66:	bd30      	pop	{r4, r5, pc}
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f4      	beq.n	8005a56 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8005a6c:	4a06      	ldr	r2, [pc, #24]	; (8005a88 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 8005a6e:	e7f6      	b.n	8005a5e <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8005a70:	23ff      	movs	r3, #255	; 0xff
 8005a72:	e7e1      	b.n	8005a38 <PixelConfiguration::Validate(unsigned int&)+0x84>
 8005a74:	2d0d      	cmp	r5, #13
 8005a76:	d1ac      	bne.n	80059d2 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8005a78:	e7e1      	b.n	8005a3e <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8005a7a:	bf00      	nop
 8005a7c:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8005a80:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8005a84:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8005a88:	017d7840 	cmneq	sp, r0, asr #16

08005a8c <PixelConfiguration::Dump()>:
 8005a8c:	4770      	bx	lr
	...

08005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 8005a90:	b507      	push	{r0, r1, r2, lr}
 8005a92:	b2cb      	uxtb	r3, r1
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8005a9a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005a9e:	4601      	mov	r1, r0
 8005aa0:	4803      	ldr	r0, [pc, #12]	; (8005ab0 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 8005aa2:	6800      	ldr	r0, [r0, #0]
 8005aa4:	f000 fb00 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8005aa8:	b003      	add	sp, #12
 8005aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aae:	bf00      	nop
 8005ab0:	20000684 	andcs	r0, r0, r4, lsl #13

08005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	2400      	movs	r4, #0
 8005ab8:	4d05      	ldr	r5, [pc, #20]	; (8005ad0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d300      	bcc.n	8005ac2 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f7ff ffe3 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005aca:	3401      	adds	r4, #1
 8005acc:	e7f5      	b.n	8005aba <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 8005ace:	bf00      	nop
 8005ad0:	20000680 	andcs	r0, r0, r0, lsl #13

08005ad4 <PixelPatterns::PixelPatterns(unsigned int)>:
 8005ad4:	2901      	cmp	r1, #1
 8005ad6:	bf28      	it	cs
 8005ad8:	2101      	movcs	r1, #1
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	2200      	movs	r2, #0
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8005af0:	6819      	ldr	r1, [r3, #0]
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	619a      	str	r2, [r3, #24]
 8005afa:	4770      	bx	lr
 8005afc:	20000694 	mulcs	r0, r4, r6
 8005b00:	20000684 	andcs	r0, r0, r4, lsl #13
 8005b04:	20000678 	andcs	r0, r0, r8, ror r6
 8005b08:	20000680 	andcs	r0, r0, r0, lsl #13
 8005b0c:	20001814 	andcs	r1, r0, r4, lsl r8
 8005b10:	20000658 	andcs	r0, r0, r8, asr r6

08005b14 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8005b14:	2805      	cmp	r0, #5
 8005b16:	bfdd      	ittte	le
 8005b18:	220e      	movle	r2, #14
 8005b1a:	4b02      	ldrle	r3, [pc, #8]	; (8005b24 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8005b1c:	fb02 3000 	mlale	r0, r2, r0, r3
 8005b20:	4801      	ldrgt	r0, [pc, #4]	; (8005b28 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8005b22:	4770      	bx	lr
 8005b24:	0800ae58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, sp, pc}
 8005b28:	0800ae50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp, pc}

08005b2c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	460e      	mov	r6, r1
 8005b30:	4615      	mov	r5, r2
 8005b32:	461c      	mov	r4, r3
 8005b34:	f7ff ffbe 	bl	8005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4905      	ldr	r1, [pc, #20]	; (8005b50 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 8005b3c:	22ff      	movs	r2, #255	; 0xff
 8005b3e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005b42:	61cb      	str	r3, [r1, #28]
 8005b44:	2300      	movs	r3, #0
 8005b46:	604d      	str	r5, [r1, #4]
 8005b48:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8005b4c:	618c      	str	r4, [r1, #24]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	20000658 	andcs	r0, r0, r8, asr r6

08005b54 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	460e      	mov	r6, r1
 8005b58:	461c      	mov	r4, r3
 8005b5a:	4615      	mov	r5, r2
 8005b5c:	f7ff ffaa 	bl	8005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005b60:	2302      	movs	r3, #2
 8005b62:	4908      	ldr	r1, [pc, #32]	; (8005b84 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005b64:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005b68:	61cb      	str	r3, [r1, #28]
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005b70:	604b      	str	r3, [r1, #4]
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	610b      	str	r3, [r1, #16]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	614b      	str	r3, [r1, #20]
 8005b7c:	9b05      	ldr	r3, [sp, #20]
 8005b7e:	618b      	str	r3, [r1, #24]
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	bf00      	nop
 8005b84:	20000658 	andcs	r0, r0, r8, asr r6
 8005b88:	20000680 	andcs	r0, r0, r0, lsl #13

08005b8c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	460e      	mov	r6, r1
 8005b90:	461d      	mov	r5, r3
 8005b92:	4614      	mov	r4, r2
 8005b94:	f7ff ff8e 	bl	8005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005b98:	2303      	movs	r3, #3
 8005b9a:	4907      	ldr	r1, [pc, #28]	; (8005bb8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005b9c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005ba0:	61cb      	str	r3, [r1, #28]
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 8005ba4:	604d      	str	r5, [r1, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	608c      	str	r4, [r1, #8]
 8005baa:	610b      	str	r3, [r1, #16]
 8005bac:	2300      	movs	r3, #0
 8005bae:	614b      	str	r3, [r1, #20]
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	618b      	str	r3, [r1, #24]
 8005bb4:	bd70      	pop	{r4, r5, r6, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000658 	andcs	r0, r0, r8, asr r6
 8005bbc:	20000680 	andcs	r0, r0, r0, lsl #13

08005bc0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	f7ff ff74 	bl	8005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	4912      	ldr	r1, [pc, #72]	; (8005c18 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 8005bd0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005bd4:	604d      	str	r5, [r1, #4]
 8005bd6:	4d11      	ldr	r5, [pc, #68]	; (8005c1c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 8005bd8:	61cb      	str	r3, [r1, #28]
 8005bda:	6828      	ldr	r0, [r5, #0]
 8005bdc:	608c      	str	r4, [r1, #8]
 8005bde:	1e43      	subs	r3, r0, #1
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	610b      	str	r3, [r1, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	4c0d      	ldr	r4, [pc, #52]	; (8005c20 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 8005bea:	614b      	str	r3, [r1, #20]
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	b97b      	cbnz	r3, 8005c10 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 8005bf0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005bf4:	4298      	cmp	r0, r3
 8005bf6:	bf2c      	ite	cs
 8005bf8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8005bfc:	0080      	lslcc	r0, r0, #2
 8005bfe:	f002 fc40 	bl	8008482 <operator new[](unsigned int)>
 8005c02:	2200      	movs	r2, #0
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	6020      	str	r0, [r4, #0]
 8005c08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	d100      	bne.n	8005c12 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	f840 2b04 	str.w	r2, [r0], #4
 8005c16:	e7f9      	b.n	8005c0c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 8005c18:	20000658 	andcs	r0, r0, r8, asr r6
 8005c1c:	20000680 	andcs	r0, r0, r0, lsl #13
 8005c20:	2000067c 	andcs	r0, r0, ip, ror r6

08005c24 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	460e      	mov	r6, r1
 8005c28:	461c      	mov	r4, r3
 8005c2a:	4615      	mov	r5, r2
 8005c2c:	f7ff ff42 	bl	8005ab4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8005c30:	2305      	movs	r3, #5
 8005c32:	4907      	ldr	r1, [pc, #28]	; (8005c50 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8005c34:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 8005c38:	61cb      	str	r3, [r1, #28]
 8005c3a:	9b05      	ldr	r3, [sp, #20]
 8005c3c:	e9c1 5402 	strd	r5, r4, [r1, #8]
 8005c40:	604b      	str	r3, [r1, #4]
 8005c42:	9b04      	ldr	r3, [sp, #16]
 8005c44:	610b      	str	r3, [r1, #16]
 8005c46:	2300      	movs	r3, #0
 8005c48:	614b      	str	r3, [r1, #20]
 8005c4a:	9b06      	ldr	r3, [sp, #24]
 8005c4c:	618b      	str	r3, [r1, #24]
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	20000658 	andcs	r0, r0, r8, asr r6

08005c54 <PixelPatterns::Wheel(unsigned char)>:
 8005c54:	43cb      	mvns	r3, r1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b54      	cmp	r3, #84	; 0x54
 8005c5a:	d809      	bhi.n	8005c70 <PixelPatterns::Wheel(unsigned char)+0x1c>
 8005c5c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	1e5a      	subs	r2, r3, #1
 8005c64:	4258      	negs	r0, r3
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	b2c0      	uxtb	r0, r0
 8005c6a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005c6e:	4770      	bx	lr
 8005c70:	2ba9      	cmp	r3, #169	; 0xa9
 8005c72:	d809      	bhi.n	8005c88 <PixelPatterns::Wheel(unsigned char)+0x34>
 8005c74:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 8005c78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005c7c:	b2c9      	uxtb	r1, r1
 8005c7e:	43c8      	mvns	r0, r1
 8005c80:	b2c0      	uxtb	r0, r0
 8005c82:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8005c86:	4770      	bx	lr
 8005c88:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 8005c8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005c90:	b2c9      	uxtb	r1, r1
 8005c92:	0208      	lsls	r0, r1, #8
 8005c94:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8005c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8005c9c:	4770      	bx	lr
	...

08005ca0 <PixelPatterns::Increment(unsigned int)>:
 8005ca0:	4a0d      	ldr	r2, [pc, #52]	; (8005cd8 <PixelPatterns::Increment(unsigned int)+0x38>)
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	014c      	lsls	r4, r1, #5
 8005ca6:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8005caa:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 8005cae:	b930      	cbnz	r0, 8005cbe <PixelPatterns::Increment(unsigned int)+0x1e>
 8005cb0:	690a      	ldr	r2, [r1, #16]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bf18      	it	ne
 8005cb8:	4618      	movne	r0, r3
 8005cba:	6148      	str	r0, [r1, #20]
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	b92b      	cbnz	r3, 8005ccc <PixelPatterns::Increment(unsigned int)+0x2c>
 8005cc0:	4422      	add	r2, r4
 8005cc2:	6913      	ldr	r3, [r2, #16]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	6153      	str	r3, [r2, #20]
 8005cca:	e7f7      	b.n	8005cbc <PixelPatterns::Increment(unsigned int)+0x1c>
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	614b      	str	r3, [r1, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f3      	bne.n	8005cbc <PixelPatterns::Increment(unsigned int)+0x1c>
 8005cd4:	e7f4      	b.n	8005cc0 <PixelPatterns::Increment(unsigned int)+0x20>
 8005cd6:	bf00      	nop
 8005cd8:	20000658 	andcs	r0, r0, r8, asr r6

08005cdc <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 8005cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	2700      	movs	r7, #0
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 8005ce8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8005d2c <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 8005cec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005cf0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005cf4:	f8d8 2000 	ldr.w	r2, [r8]
 8005cf8:	b2be      	uxth	r6, r7
 8005cfa:	42b2      	cmp	r2, r6
 8005cfc:	f107 0701 	add.w	r7, r7, #1
 8005d00:	d805      	bhi.n	8005d0e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8005d02:	4629      	mov	r1, r5
 8005d04:	4620      	mov	r0, r4
 8005d06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d0a:	f7ff bfc9 	b.w	8005ca0 <PixelPatterns::Increment(unsigned int)>
 8005d0e:	0233      	lsls	r3, r6, #8
 8005d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d14:	444b      	add	r3, r9
 8005d16:	b2d9      	uxtb	r1, r3
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f7ff ff9b 	bl	8005c54 <PixelPatterns::Wheel(unsigned char)>
 8005d1e:	4601      	mov	r1, r0
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff feb5 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005d26:	e7e5      	b.n	8005cf4 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 8005d28:	20000658 	andcs	r0, r0, r8, asr r6
 8005d2c:	20000680 	andcs	r0, r0, r0, lsl #13

08005d30 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 8005d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4605      	mov	r5, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	f04f 0b00 	mov.w	fp, #0
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 8005d3e:	4e12      	ldr	r6, [pc, #72]	; (8005d88 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 8005d40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d44:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005d48:	f8df a040 	ldr.w	sl, [pc, #64]	; 8005d8c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 8005d4c:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	fa1f f08b 	uxth.w	r0, fp
 8005d56:	4283      	cmp	r3, r0
 8005d58:	d805      	bhi.n	8005d66 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d62:	f7ff bf9d 	b.w	8005ca0 <PixelPatterns::Increment(unsigned int)>
 8005d66:	eb09 0300 	add.w	r3, r9, r0
 8005d6a:	fb0a f303 	mul.w	r3, sl, r3
 8005d6e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8005d72:	bf94      	ite	ls
 8005d74:	4639      	movls	r1, r7
 8005d76:	4641      	movhi	r1, r8
 8005d78:	f7ff fe8a 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005d7c:	f10b 0b01 	add.w	fp, fp, #1
 8005d80:	e7e6      	b.n	8005d50 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8005d82:	bf00      	nop
 8005d84:	20000658 	andcs	r0, r0, r8, asr r6
 8005d88:	20000680 	andcs	r0, r0, r0, lsl #13
 8005d8c:	aaaaaaab 	bge	6ab0840 <__heap_size+0x6aaf840>

08005d90 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4605      	mov	r5, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 8005d98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005d9c:	6899      	ldr	r1, [r3, #8]
 8005d9e:	6958      	ldr	r0, [r3, #20]
 8005da0:	f7ff fe76 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005da4:	4621      	mov	r1, r4
 8005da6:	4628      	mov	r0, r5
 8005da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dac:	f7ff bf78 	b.w	8005ca0 <PixelPatterns::Increment(unsigned int)>
 8005db0:	20000658 	andcs	r0, r0, r8, asr r6

08005db4 <PixelPatterns::ScannerUpdate(unsigned int)>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	460d      	mov	r5, r1
 8005dba:	f04f 0900 	mov.w	r9, #0
 8005dbe:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005dc6:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 8005dca:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8005dce:	00b3      	lsls	r3, r6, #2
 8005dd0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8005e60 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 8005dd4:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8005e64 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 8005dd8:	9002      	str	r0, [sp, #8]
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	1bbf      	subs	r7, r7, r6
 8005dde:	f8da 1000 	ldr.w	r1, [sl]
 8005de2:	fa1f f489 	uxth.w	r4, r9
 8005de6:	42a1      	cmp	r1, r4
 8005de8:	d806      	bhi.n	8005df8 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 8005dea:	4629      	mov	r1, r5
 8005dec:	9802      	ldr	r0, [sp, #8]
 8005dee:	b005      	add	sp, #20
 8005df0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	f7ff bf54 	b.w	8005ca0 <PixelPatterns::Increment(unsigned int)>
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d10b      	bne.n	8005e14 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff fe46 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e04:	f8d8 1000 	ldr.w	r1, [r8]
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	f841 b003 	str.w	fp, [r1, r3]
 8005e0e:	f109 0901 	add.w	r9, r9, #1
 8005e12:	e7e4      	b.n	8005dde <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 8005e14:	42a7      	cmp	r7, r4
 8005e16:	d108      	bne.n	8005e2a <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 8005e18:	4659      	mov	r1, fp
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f7ff fe38 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e20:	f8d8 1000 	ldr.w	r1, [r8]
 8005e24:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 8005e28:	e7f1      	b.n	8005e0e <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 8005e2a:	f8d8 1000 	ldr.w	r1, [r8]
 8005e2e:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005e32:	f3c0 2146 	ubfx	r1, r0, #9, #7
 8005e36:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 8005e3a:	0209      	lsls	r1, r1, #8
 8005e3c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8005e40:	f3c0 0046 	ubfx	r0, r0, #1, #7
 8005e44:	4301      	orrs	r1, r0
 8005e46:	4620      	mov	r0, r4
 8005e48:	9103      	str	r1, [sp, #12]
 8005e4a:	f7ff fe21 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005e4e:	f8d8 0000 	ldr.w	r0, [r8]
 8005e52:	9903      	ldr	r1, [sp, #12]
 8005e54:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8005e58:	e7d9      	b.n	8005e0e <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 8005e5a:	bf00      	nop
 8005e5c:	20000658 	andcs	r0, r0, r8, asr r6
 8005e60:	20000680 	andcs	r0, r0, r0, lsl #13
 8005e64:	2000067c 	andcs	r0, r0, ip, ror r6

08005e68 <PixelPatterns::FadeUpdate(unsigned int)>:
 8005e68:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8005e72:	4605      	mov	r5, r0
 8005e74:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 8005e78:	460c      	mov	r4, r1
 8005e7a:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 8005e7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e82:	437a      	muls	r2, r7
 8005e84:	1bc6      	subs	r6, r0, r7
 8005e86:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8005e8a:	fb06 220c 	mla	r2, r6, ip, r2
 8005e8e:	fbb2 f2f0 	udiv	r2, r2, r0
 8005e92:	0212      	lsls	r2, r2, #8
 8005e94:	fa1f fc82 	uxth.w	ip, r2
 8005e98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005e9c:	437a      	muls	r2, r7
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	437b      	muls	r3, r7
 8005ea2:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8005ea6:	fb06 220e 	mla	r2, r6, lr, r2
 8005eaa:	b2c9      	uxtb	r1, r1
 8005eac:	fb06 3301 	mla	r3, r6, r1, r3
 8005eb0:	fbb2 f2f0 	udiv	r2, r2, r0
 8005eb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8005eb8:	2700      	movs	r7, #0
 8005eba:	0412      	lsls	r2, r2, #16
 8005ebc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005ec0:	ea4c 0202 	orr.w	r2, ip, r2
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8005ef4 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 8005eca:	ea42 0603 	orr.w	r6, r2, r3
 8005ece:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed2:	429f      	cmp	r7, r3
 8005ed4:	d305      	bcc.n	8005ee2 <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	f7ff bedf 	b.w	8005ca0 <PixelPatterns::Increment(unsigned int)>
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	f7ff fdd3 	bl	8005a90 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 8005eea:	3701      	adds	r7, #1
 8005eec:	e7ef      	b.n	8005ece <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 8005eee:	bf00      	nop
 8005ef0:	20000658 	andcs	r0, r0, r8, asr r6
 8005ef4:	20000680 	andcs	r0, r0, r0, lsl #13

08005ef8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8005efc:	014e      	lsls	r6, r1, #5
 8005efe:	599c      	ldr	r4, [r3, r6]
 8005f00:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8005f04:	686f      	ldr	r7, [r5, #4]
 8005f06:	1b14      	subs	r4, r2, r4
 8005f08:	42bc      	cmp	r4, r7
 8005f0a:	d319      	bcc.n	8005f40 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005f0c:	519a      	str	r2, [r3, r6]
 8005f0e:	69eb      	ldr	r3, [r5, #28]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d814      	bhi.n	8005f40 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8005f16:	e8df f003 	tbb	[pc, r3]
 8005f1a:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 8005f1e:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 8005f22:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 8005f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f28:	f7ff ff02 	bl	8005d30 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 8005f2c:	e7fa      	b.n	8005f24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005f2e:	f7ff ff2f 	bl	8005d90 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 8005f32:	e7f7      	b.n	8005f24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005f34:	f7ff ff3e 	bl	8005db4 <PixelPatterns::ScannerUpdate(unsigned int)>
 8005f38:	e7f4      	b.n	8005f24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005f3a:	f7ff ff95 	bl	8005e68 <PixelPatterns::FadeUpdate(unsigned int)>
 8005f3e:	e7f1      	b.n	8005f24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f0      	b.n	8005f26 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 8005f44:	20000658 	andcs	r0, r0, r8, asr r6

08005f48 <PixelPatterns::Run()>:
 8005f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	f003 fcd7 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8005f52:	4604      	mov	r4, r0
 8005f54:	b9c0      	cbnz	r0, 8005f88 <PixelPatterns::Run()+0x40>
 8005f56:	4605      	mov	r5, r0
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <PixelPatterns::Run()+0x44>)
 8005f5a:	4f0d      	ldr	r7, [pc, #52]	; (8005f90 <PixelPatterns::Run()+0x48>)
 8005f5c:	f8d3 8000 	ldr.w	r8, [r3]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b2e9      	uxtb	r1, r5
 8005f64:	428b      	cmp	r3, r1
 8005f66:	f105 0501 	add.w	r5, r5, #1
 8005f6a:	d806      	bhi.n	8005f7a <PixelPatterns::Run()+0x32>
 8005f6c:	b164      	cbz	r4, 8005f88 <PixelPatterns::Run()+0x40>
 8005f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <PixelPatterns::Run()+0x4c>)
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	f000 bed7 	b.w	8006d28 <WS28xx::Update()>
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7ff ffbb 	bl	8005ef8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 8005f82:	4304      	orrs	r4, r0
 8005f84:	b2e4      	uxtb	r4, r4
 8005f86:	e7eb      	b.n	8005f60 <PixelPatterns::Run()+0x18>
 8005f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f8c:	20001814 	andcs	r1, r0, r4, lsl r8
 8005f90:	20000678 	andcs	r0, r0, r8, ror r6
 8005f94:	20000684 	andcs	r0, r0, r4, lsl #13

08005f98 <PixelType::GetType(pixel::Type)>:
 8005f98:	280d      	cmp	r0, #13
 8005f9a:	bfda      	itte	le
 8005f9c:	4b02      	ldrle	r3, [pc, #8]	; (8005fa8 <PixelType::GetType(pixel::Type)+0x10>)
 8005f9e:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8005fa2:	4802      	ldrgt	r0, [pc, #8]	; (8005fac <PixelType::GetType(pixel::Type)+0x14>)
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	0800aec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, sp, pc}
 8005fac:	0800ae50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp, pc}

08005fb0 <PixelType::GetMap(pixel::Map)>:
 8005fb0:	2805      	cmp	r0, #5
 8005fb2:	bfda      	itte	le
 8005fb4:	4b02      	ldrle	r3, [pc, #8]	; (8005fc0 <PixelType::GetMap(pixel::Map)+0x10>)
 8005fb6:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8005fba:	4802      	ldrgt	r0, [pc, #8]	; (8005fc4 <PixelType::GetMap(pixel::Map)+0x14>)
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	0800aeac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp, sp, pc}
 8005fc4:	0800a083 	stmdaeq	r0, {r0, r1, r7, sp, pc}

08005fc8 <PixelType::ConvertTxH(unsigned char)>:
 8005fc8:	28f0      	cmp	r0, #240	; 0xf0
 8005fca:	d010      	beq.n	8005fee <PixelType::ConvertTxH(unsigned char)+0x26>
 8005fcc:	d807      	bhi.n	8005fde <PixelType::ConvertTxH(unsigned char)+0x16>
 8005fce:	28c0      	cmp	r0, #192	; 0xc0
 8005fd0:	d00f      	beq.n	8005ff2 <PixelType::ConvertTxH(unsigned char)+0x2a>
 8005fd2:	28e0      	cmp	r0, #224	; 0xe0
 8005fd4:	d00f      	beq.n	8005ff6 <PixelType::ConvertTxH(unsigned char)+0x2e>
 8005fd6:	2880      	cmp	r0, #128	; 0x80
 8005fd8:	d113      	bne.n	8006002 <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005fda:	480b      	ldr	r0, [pc, #44]	; (8006008 <PixelType::ConvertTxH(unsigned char)+0x40>)
 8005fdc:	4770      	bx	lr
 8005fde:	28fc      	cmp	r0, #252	; 0xfc
 8005fe0:	d00b      	beq.n	8005ffa <PixelType::ConvertTxH(unsigned char)+0x32>
 8005fe2:	28fe      	cmp	r0, #254	; 0xfe
 8005fe4:	d00b      	beq.n	8005ffe <PixelType::ConvertTxH(unsigned char)+0x36>
 8005fe6:	28f8      	cmp	r0, #248	; 0xf8
 8005fe8:	d10b      	bne.n	8006002 <PixelType::ConvertTxH(unsigned char)+0x3a>
 8005fea:	4808      	ldr	r0, [pc, #32]	; (800600c <PixelType::ConvertTxH(unsigned char)+0x44>)
 8005fec:	4770      	bx	lr
 8005fee:	4808      	ldr	r0, [pc, #32]	; (8006010 <PixelType::ConvertTxH(unsigned char)+0x48>)
 8005ff0:	4770      	bx	lr
 8005ff2:	4808      	ldr	r0, [pc, #32]	; (8006014 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 8005ff4:	4770      	bx	lr
 8005ff6:	4808      	ldr	r0, [pc, #32]	; (8006018 <PixelType::ConvertTxH(unsigned char)+0x50>)
 8005ff8:	4770      	bx	lr
 8005ffa:	4808      	ldr	r0, [pc, #32]	; (800601c <PixelType::ConvertTxH(unsigned char)+0x54>)
 8005ffc:	4770      	bx	lr
 8005ffe:	4808      	ldr	r0, [pc, #32]	; (8006020 <PixelType::ConvertTxH(unsigned char)+0x58>)
 8006000:	4770      	bx	lr
 8006002:	2000      	movs	r0, #0
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800600c:	3f480000 	svccc	0x00480000
 8006010:	3f200000 	svccc	0x00200000
 8006014:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 8006018:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800601c:	3f700000 	svccc	0x00700000
 8006020:	3f8c0000 	svccc	0x008c0000

08006024 <WS28xx::Print()>:
 8006024:	b513      	push	{r0, r1, r4, lr}
 8006026:	4604      	mov	r4, r0
 8006028:	4819      	ldr	r0, [pc, #100]	; (8006090 <WS28xx::Print()+0x6c>)
 800602a:	f7fc f811 	bl	8002050 <printf>
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	f7ff ffb2 	bl	8005f98 <PixelType::GetType(pixel::Type)>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	4601      	mov	r1, r0
 8006038:	4816      	ldr	r0, [pc, #88]	; (8006094 <WS28xx::Print()+0x70>)
 800603a:	f7fc f809 	bl	8002050 <printf>
 800603e:	6861      	ldr	r1, [r4, #4]
 8006040:	4815      	ldr	r0, [pc, #84]	; (8006098 <WS28xx::Print()+0x74>)
 8006042:	f7fc f805 	bl	8002050 <printf>
 8006046:	7ca3      	ldrb	r3, [r4, #18]
 8006048:	b1fb      	cbz	r3, 800608a <WS28xx::Print()+0x66>
 800604a:	68a0      	ldr	r0, [r4, #8]
 800604c:	f7ff ffb0 	bl	8005fb0 <PixelType::GetMap(pixel::Map)>
 8006050:	68a2      	ldr	r2, [r4, #8]
 8006052:	4601      	mov	r1, r0
 8006054:	4811      	ldr	r0, [pc, #68]	; (800609c <WS28xx::Print()+0x78>)
 8006056:	f7fb fffb 	bl	8002050 <printf>
 800605a:	7c20      	ldrb	r0, [r4, #16]
 800605c:	f7ff ffb4 	bl	8005fc8 <PixelType::ConvertTxH(unsigned char)>
 8006060:	f7fa f9f4 	bl	800044c <__aeabi_f2d>
 8006064:	460b      	mov	r3, r1
 8006066:	7c21      	ldrb	r1, [r4, #16]
 8006068:	4602      	mov	r2, r0
 800606a:	9100      	str	r1, [sp, #0]
 800606c:	480c      	ldr	r0, [pc, #48]	; (80060a0 <WS28xx::Print()+0x7c>)
 800606e:	f7fb ffef 	bl	8002050 <printf>
 8006072:	7c60      	ldrb	r0, [r4, #17]
 8006074:	f7ff ffa8 	bl	8005fc8 <PixelType::ConvertTxH(unsigned char)>
 8006078:	f7fa f9e8 	bl	800044c <__aeabi_f2d>
 800607c:	460b      	mov	r3, r1
 800607e:	7c61      	ldrb	r1, [r4, #17]
 8006080:	4602      	mov	r2, r0
 8006082:	9100      	str	r1, [sp, #0]
 8006084:	4807      	ldr	r0, [pc, #28]	; (80060a4 <WS28xx::Print()+0x80>)
 8006086:	f7fb ffe3 	bl	8002050 <printf>
 800608a:	b002      	add	sp, #8
 800608c:	bd10      	pop	{r4, pc}
 800608e:	bf00      	nop
 8006090:	0800af34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp, sp, pc}
 8006094:	0800af46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, sp, pc}
 8006098:	0800af5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, sp, pc}
 800609c:	0800af69 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, fp, sp, pc}
 80060a0:	0800af7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sl, fp, sp, pc}
 80060a4:	0800af95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, fp, sp, pc}

080060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 80060a8:	b530      	push	{r4, r5, lr}
 80060aa:	7c84      	ldrb	r4, [r0, #18]
 80060ac:	f89d c00c 	ldrb.w	ip, [sp, #12]
 80060b0:	b994      	cbnz	r4, 80060d8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 80060b2:	6804      	ldr	r4, [r0, #0]
 80060b4:	f1a4 0e0b 	sub.w	lr, r4, #11
 80060b8:	f1be 0f01 	cmp.w	lr, #1
 80060bc:	d93d      	bls.n	800613a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 80060be:	b9d4      	cbnz	r4, 80060f6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 80060c0:	6944      	ldr	r4, [r0, #20]
 80060c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060c6:	5462      	strb	r2, [r4, r1]
 80060c8:	6942      	ldr	r2, [r0, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	7053      	strb	r3, [r2, #1]
 80060ce:	6943      	ldr	r3, [r0, #20]
 80060d0:	440b      	add	r3, r1
 80060d2:	f883 c002 	strb.w	ip, [r3, #2]
 80060d6:	bd30      	pop	{r4, r5, pc}
 80060d8:	6884      	ldr	r4, [r0, #8]
 80060da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80060de:	00c9      	lsls	r1, r1, #3
 80060e0:	2c05      	cmp	r4, #5
 80060e2:	f200 812d 	bhi.w	8006340 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 80060e6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80060ea:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 80060ee:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 80060f2:	0202003b 	andeq	r0, r2, #59	; 0x3b
 80060f6:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 80060fa:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 80060fe:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 8006102:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 8006106:	f004 040c 	and.w	r4, r4, #12
 800610a:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800610e:	ea4e 0e04 	orr.w	lr, lr, r4
 8006112:	6944      	ldr	r4, [r0, #20]
 8006114:	3101      	adds	r1, #1
 8006116:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800611a:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800611e:	6944      	ldr	r4, [r0, #20]
 8006120:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8006124:	f884 c001 	strb.w	ip, [r4, #1]
 8006128:	6944      	ldr	r4, [r0, #20]
 800612a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800612e:	70a3      	strb	r3, [r4, #2]
 8006130:	6943      	ldr	r3, [r0, #20]
 8006132:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8006136:	70da      	strb	r2, [r3, #3]
 8006138:	bd30      	pop	{r4, r5, pc}
 800613a:	6944      	ldr	r4, [r0, #20]
 800613c:	7cc5      	ldrb	r5, [r0, #19]
 800613e:	3101      	adds	r1, #1
 8006140:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 8006144:	6944      	ldr	r4, [r0, #20]
 8006146:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800614a:	7062      	strb	r2, [r4, #1]
 800614c:	6942      	ldr	r2, [r0, #20]
 800614e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006152:	7093      	strb	r3, [r2, #2]
 8006154:	6943      	ldr	r3, [r0, #20]
 8006156:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800615a:	f883 c003 	strb.w	ip, [r3, #3]
 800615e:	bd30      	pop	{r4, r5, pc}
 8006160:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006164:	bf0c      	ite	eq
 8006166:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800616a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800616e:	6945      	ldr	r5, [r0, #20]
 8006170:	1c4c      	adds	r4, r1, #1
 8006172:	f805 e004 	strb.w	lr, [r5, r4]
 8006176:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800617a:	bf0c      	ite	eq
 800617c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006180:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006184:	6945      	ldr	r5, [r0, #20]
 8006186:	1c8c      	adds	r4, r1, #2
 8006188:	f805 e004 	strb.w	lr, [r5, r4]
 800618c:	f01c 0f20 	tst.w	ip, #32
 8006190:	bf0c      	ite	eq
 8006192:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006196:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800619a:	6945      	ldr	r5, [r0, #20]
 800619c:	1ccc      	adds	r4, r1, #3
 800619e:	f805 e004 	strb.w	lr, [r5, r4]
 80061a2:	f01c 0f10 	tst.w	ip, #16
 80061a6:	bf0c      	ite	eq
 80061a8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80061ac:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80061b0:	6945      	ldr	r5, [r0, #20]
 80061b2:	1d0c      	adds	r4, r1, #4
 80061b4:	f01c 0f08 	tst.w	ip, #8
 80061b8:	f805 e004 	strb.w	lr, [r5, r4]
 80061bc:	bf0c      	ite	eq
 80061be:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80061c2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80061c6:	6945      	ldr	r5, [r0, #20]
 80061c8:	1d4c      	adds	r4, r1, #5
 80061ca:	f01c 0f04 	tst.w	ip, #4
 80061ce:	f805 e004 	strb.w	lr, [r5, r4]
 80061d2:	bf0c      	ite	eq
 80061d4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80061d8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80061dc:	6945      	ldr	r5, [r0, #20]
 80061de:	1d8c      	adds	r4, r1, #6
 80061e0:	f01c 0f02 	tst.w	ip, #2
 80061e4:	f805 e004 	strb.w	lr, [r5, r4]
 80061e8:	bf0c      	ite	eq
 80061ea:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80061ee:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80061f2:	6945      	ldr	r5, [r0, #20]
 80061f4:	1dcc      	adds	r4, r1, #7
 80061f6:	f01c 0f01 	tst.w	ip, #1
 80061fa:	f805 e004 	strb.w	lr, [r5, r4]
 80061fe:	bf14      	ite	ne
 8006200:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8006204:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8006208:	6945      	ldr	r5, [r0, #20]
 800620a:	f101 0408 	add.w	r4, r1, #8
 800620e:	f805 c004 	strb.w	ip, [r5, r4]
 8006212:	0615      	lsls	r5, r2, #24
 8006214:	bf54      	ite	pl
 8006216:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800621a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800621e:	6945      	ldr	r5, [r0, #20]
 8006220:	f101 0409 	add.w	r4, r1, #9
 8006224:	f805 c004 	strb.w	ip, [r5, r4]
 8006228:	0655      	lsls	r5, r2, #25
 800622a:	bf54      	ite	pl
 800622c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006230:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006234:	6945      	ldr	r5, [r0, #20]
 8006236:	f101 040a 	add.w	r4, r1, #10
 800623a:	f805 c004 	strb.w	ip, [r5, r4]
 800623e:	0695      	lsls	r5, r2, #26
 8006240:	bf54      	ite	pl
 8006242:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006246:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800624a:	6945      	ldr	r5, [r0, #20]
 800624c:	f101 040b 	add.w	r4, r1, #11
 8006250:	f805 c004 	strb.w	ip, [r5, r4]
 8006254:	06d5      	lsls	r5, r2, #27
 8006256:	bf54      	ite	pl
 8006258:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800625c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006260:	6945      	ldr	r5, [r0, #20]
 8006262:	f101 040c 	add.w	r4, r1, #12
 8006266:	f805 c004 	strb.w	ip, [r5, r4]
 800626a:	0715      	lsls	r5, r2, #28
 800626c:	bf54      	ite	pl
 800626e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006272:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006276:	6945      	ldr	r5, [r0, #20]
 8006278:	f101 040d 	add.w	r4, r1, #13
 800627c:	f805 c004 	strb.w	ip, [r5, r4]
 8006280:	0755      	lsls	r5, r2, #29
 8006282:	bf54      	ite	pl
 8006284:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006288:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800628c:	6945      	ldr	r5, [r0, #20]
 800628e:	f101 040e 	add.w	r4, r1, #14
 8006292:	f805 c004 	strb.w	ip, [r5, r4]
 8006296:	0795      	lsls	r5, r2, #30
 8006298:	bf58      	it	pl
 800629a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800629e:	6945      	ldr	r5, [r0, #20]
 80062a0:	bf48      	it	mi
 80062a2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80062a6:	f101 040f 	add.w	r4, r1, #15
 80062aa:	f805 c004 	strb.w	ip, [r5, r4]
 80062ae:	07d5      	lsls	r5, r2, #31
 80062b0:	bf4c      	ite	mi
 80062b2:	7c45      	ldrbmi	r5, [r0, #17]
 80062b4:	7c05      	ldrbpl	r5, [r0, #16]
 80062b6:	6942      	ldr	r2, [r0, #20]
 80062b8:	f101 0410 	add.w	r4, r1, #16
 80062bc:	5515      	strb	r5, [r2, r4]
 80062be:	061c      	lsls	r4, r3, #24
 80062c0:	bf54      	ite	pl
 80062c2:	7c05      	ldrbpl	r5, [r0, #16]
 80062c4:	7c45      	ldrbmi	r5, [r0, #17]
 80062c6:	6944      	ldr	r4, [r0, #20]
 80062c8:	f101 0211 	add.w	r2, r1, #17
 80062cc:	54a5      	strb	r5, [r4, r2]
 80062ce:	065d      	lsls	r5, r3, #25
 80062d0:	bf54      	ite	pl
 80062d2:	7c05      	ldrbpl	r5, [r0, #16]
 80062d4:	7c45      	ldrbmi	r5, [r0, #17]
 80062d6:	6944      	ldr	r4, [r0, #20]
 80062d8:	f101 0212 	add.w	r2, r1, #18
 80062dc:	54a5      	strb	r5, [r4, r2]
 80062de:	069c      	lsls	r4, r3, #26
 80062e0:	bf54      	ite	pl
 80062e2:	7c05      	ldrbpl	r5, [r0, #16]
 80062e4:	7c45      	ldrbmi	r5, [r0, #17]
 80062e6:	6944      	ldr	r4, [r0, #20]
 80062e8:	f101 0213 	add.w	r2, r1, #19
 80062ec:	54a5      	strb	r5, [r4, r2]
 80062ee:	06dd      	lsls	r5, r3, #27
 80062f0:	bf54      	ite	pl
 80062f2:	7c05      	ldrbpl	r5, [r0, #16]
 80062f4:	7c45      	ldrbmi	r5, [r0, #17]
 80062f6:	6944      	ldr	r4, [r0, #20]
 80062f8:	f101 0214 	add.w	r2, r1, #20
 80062fc:	54a5      	strb	r5, [r4, r2]
 80062fe:	071c      	lsls	r4, r3, #28
 8006300:	bf54      	ite	pl
 8006302:	7c05      	ldrbpl	r5, [r0, #16]
 8006304:	7c45      	ldrbmi	r5, [r0, #17]
 8006306:	6944      	ldr	r4, [r0, #20]
 8006308:	f101 0215 	add.w	r2, r1, #21
 800630c:	54a5      	strb	r5, [r4, r2]
 800630e:	075d      	lsls	r5, r3, #29
 8006310:	bf54      	ite	pl
 8006312:	7c05      	ldrbpl	r5, [r0, #16]
 8006314:	7c45      	ldrbmi	r5, [r0, #17]
 8006316:	6944      	ldr	r4, [r0, #20]
 8006318:	f101 0216 	add.w	r2, r1, #22
 800631c:	54a5      	strb	r5, [r4, r2]
 800631e:	079c      	lsls	r4, r3, #30
 8006320:	bf54      	ite	pl
 8006322:	7c05      	ldrbpl	r5, [r0, #16]
 8006324:	7c45      	ldrbmi	r5, [r0, #17]
 8006326:	6944      	ldr	r4, [r0, #20]
 8006328:	f101 0217 	add.w	r2, r1, #23
 800632c:	54a5      	strb	r5, [r4, r2]
 800632e:	3118      	adds	r1, #24
 8006330:	f013 0f01 	tst.w	r3, #1
 8006334:	f000 80d9 	beq.w	80064ea <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 8006338:	7c42      	ldrb	r2, [r0, #17]
 800633a:	6943      	ldr	r3, [r0, #20]
 800633c:	545a      	strb	r2, [r3, r1]
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	0615      	lsls	r5, r2, #24
 8006342:	bf54      	ite	pl
 8006344:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006348:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800634c:	6945      	ldr	r5, [r0, #20]
 800634e:	1c4c      	adds	r4, r1, #1
 8006350:	f805 e004 	strb.w	lr, [r5, r4]
 8006354:	0655      	lsls	r5, r2, #25
 8006356:	bf54      	ite	pl
 8006358:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800635c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006360:	6945      	ldr	r5, [r0, #20]
 8006362:	1c8c      	adds	r4, r1, #2
 8006364:	f805 e004 	strb.w	lr, [r5, r4]
 8006368:	0695      	lsls	r5, r2, #26
 800636a:	bf54      	ite	pl
 800636c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006370:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006374:	6945      	ldr	r5, [r0, #20]
 8006376:	1ccc      	adds	r4, r1, #3
 8006378:	f805 e004 	strb.w	lr, [r5, r4]
 800637c:	06d5      	lsls	r5, r2, #27
 800637e:	bf54      	ite	pl
 8006380:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006384:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006388:	6945      	ldr	r5, [r0, #20]
 800638a:	1d0c      	adds	r4, r1, #4
 800638c:	f805 e004 	strb.w	lr, [r5, r4]
 8006390:	0715      	lsls	r5, r2, #28
 8006392:	bf54      	ite	pl
 8006394:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006398:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800639c:	6945      	ldr	r5, [r0, #20]
 800639e:	1d4c      	adds	r4, r1, #5
 80063a0:	f805 e004 	strb.w	lr, [r5, r4]
 80063a4:	0755      	lsls	r5, r2, #29
 80063a6:	bf54      	ite	pl
 80063a8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80063ac:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80063b0:	6945      	ldr	r5, [r0, #20]
 80063b2:	1d8c      	adds	r4, r1, #6
 80063b4:	f805 e004 	strb.w	lr, [r5, r4]
 80063b8:	0795      	lsls	r5, r2, #30
 80063ba:	bf58      	it	pl
 80063bc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80063c0:	6945      	ldr	r5, [r0, #20]
 80063c2:	bf48      	it	mi
 80063c4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80063c8:	1dcc      	adds	r4, r1, #7
 80063ca:	f805 e004 	strb.w	lr, [r5, r4]
 80063ce:	07d5      	lsls	r5, r2, #31
 80063d0:	bf4c      	ite	mi
 80063d2:	7c45      	ldrbmi	r5, [r0, #17]
 80063d4:	7c05      	ldrbpl	r5, [r0, #16]
 80063d6:	6942      	ldr	r2, [r0, #20]
 80063d8:	f101 0408 	add.w	r4, r1, #8
 80063dc:	5515      	strb	r5, [r2, r4]
 80063de:	061c      	lsls	r4, r3, #24
 80063e0:	bf54      	ite	pl
 80063e2:	7c05      	ldrbpl	r5, [r0, #16]
 80063e4:	7c45      	ldrbmi	r5, [r0, #17]
 80063e6:	6944      	ldr	r4, [r0, #20]
 80063e8:	f101 0209 	add.w	r2, r1, #9
 80063ec:	54a5      	strb	r5, [r4, r2]
 80063ee:	065d      	lsls	r5, r3, #25
 80063f0:	bf54      	ite	pl
 80063f2:	7c05      	ldrbpl	r5, [r0, #16]
 80063f4:	7c45      	ldrbmi	r5, [r0, #17]
 80063f6:	6944      	ldr	r4, [r0, #20]
 80063f8:	f101 020a 	add.w	r2, r1, #10
 80063fc:	54a5      	strb	r5, [r4, r2]
 80063fe:	069c      	lsls	r4, r3, #26
 8006400:	bf54      	ite	pl
 8006402:	7c05      	ldrbpl	r5, [r0, #16]
 8006404:	7c45      	ldrbmi	r5, [r0, #17]
 8006406:	6944      	ldr	r4, [r0, #20]
 8006408:	f101 020b 	add.w	r2, r1, #11
 800640c:	54a5      	strb	r5, [r4, r2]
 800640e:	06dd      	lsls	r5, r3, #27
 8006410:	bf54      	ite	pl
 8006412:	7c05      	ldrbpl	r5, [r0, #16]
 8006414:	7c45      	ldrbmi	r5, [r0, #17]
 8006416:	6944      	ldr	r4, [r0, #20]
 8006418:	f101 020c 	add.w	r2, r1, #12
 800641c:	54a5      	strb	r5, [r4, r2]
 800641e:	071c      	lsls	r4, r3, #28
 8006420:	bf54      	ite	pl
 8006422:	7c05      	ldrbpl	r5, [r0, #16]
 8006424:	7c45      	ldrbmi	r5, [r0, #17]
 8006426:	6944      	ldr	r4, [r0, #20]
 8006428:	f101 020d 	add.w	r2, r1, #13
 800642c:	54a5      	strb	r5, [r4, r2]
 800642e:	075d      	lsls	r5, r3, #29
 8006430:	bf54      	ite	pl
 8006432:	7c05      	ldrbpl	r5, [r0, #16]
 8006434:	7c45      	ldrbmi	r5, [r0, #17]
 8006436:	6944      	ldr	r4, [r0, #20]
 8006438:	f101 020e 	add.w	r2, r1, #14
 800643c:	54a5      	strb	r5, [r4, r2]
 800643e:	079c      	lsls	r4, r3, #30
 8006440:	bf58      	it	pl
 8006442:	7c05      	ldrbpl	r5, [r0, #16]
 8006444:	6944      	ldr	r4, [r0, #20]
 8006446:	bf48      	it	mi
 8006448:	7c45      	ldrbmi	r5, [r0, #17]
 800644a:	f101 020f 	add.w	r2, r1, #15
 800644e:	54a5      	strb	r5, [r4, r2]
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	bf4c      	ite	mi
 8006454:	7c44      	ldrbmi	r4, [r0, #17]
 8006456:	7c04      	ldrbpl	r4, [r0, #16]
 8006458:	6943      	ldr	r3, [r0, #20]
 800645a:	f101 0210 	add.w	r2, r1, #16
 800645e:	549c      	strb	r4, [r3, r2]
 8006460:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006464:	bf0c      	ite	eq
 8006466:	7c04      	ldrbeq	r4, [r0, #16]
 8006468:	7c44      	ldrbne	r4, [r0, #17]
 800646a:	6942      	ldr	r2, [r0, #20]
 800646c:	f101 0311 	add.w	r3, r1, #17
 8006470:	54d4      	strb	r4, [r2, r3]
 8006472:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006476:	bf0c      	ite	eq
 8006478:	7c04      	ldrbeq	r4, [r0, #16]
 800647a:	7c44      	ldrbne	r4, [r0, #17]
 800647c:	6942      	ldr	r2, [r0, #20]
 800647e:	f101 0312 	add.w	r3, r1, #18
 8006482:	54d4      	strb	r4, [r2, r3]
 8006484:	f01c 0f20 	tst.w	ip, #32
 8006488:	bf0c      	ite	eq
 800648a:	7c04      	ldrbeq	r4, [r0, #16]
 800648c:	7c44      	ldrbne	r4, [r0, #17]
 800648e:	6942      	ldr	r2, [r0, #20]
 8006490:	f101 0313 	add.w	r3, r1, #19
 8006494:	54d4      	strb	r4, [r2, r3]
 8006496:	f01c 0f10 	tst.w	ip, #16
 800649a:	bf0c      	ite	eq
 800649c:	7c04      	ldrbeq	r4, [r0, #16]
 800649e:	7c44      	ldrbne	r4, [r0, #17]
 80064a0:	6942      	ldr	r2, [r0, #20]
 80064a2:	f101 0314 	add.w	r3, r1, #20
 80064a6:	54d4      	strb	r4, [r2, r3]
 80064a8:	f01c 0f08 	tst.w	ip, #8
 80064ac:	bf0c      	ite	eq
 80064ae:	7c04      	ldrbeq	r4, [r0, #16]
 80064b0:	7c44      	ldrbne	r4, [r0, #17]
 80064b2:	6942      	ldr	r2, [r0, #20]
 80064b4:	f101 0315 	add.w	r3, r1, #21
 80064b8:	54d4      	strb	r4, [r2, r3]
 80064ba:	f01c 0f04 	tst.w	ip, #4
 80064be:	bf0c      	ite	eq
 80064c0:	7c04      	ldrbeq	r4, [r0, #16]
 80064c2:	7c44      	ldrbne	r4, [r0, #17]
 80064c4:	6942      	ldr	r2, [r0, #20]
 80064c6:	f101 0316 	add.w	r3, r1, #22
 80064ca:	54d4      	strb	r4, [r2, r3]
 80064cc:	f01c 0f02 	tst.w	ip, #2
 80064d0:	bf0c      	ite	eq
 80064d2:	7c04      	ldrbeq	r4, [r0, #16]
 80064d4:	7c44      	ldrbne	r4, [r0, #17]
 80064d6:	6942      	ldr	r2, [r0, #20]
 80064d8:	f101 0317 	add.w	r3, r1, #23
 80064dc:	f01c 0f01 	tst.w	ip, #1
 80064e0:	54d4      	strb	r4, [r2, r3]
 80064e2:	f101 0118 	add.w	r1, r1, #24
 80064e6:	f47f af27 	bne.w	8006338 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 80064ea:	7c02      	ldrb	r2, [r0, #16]
 80064ec:	e725      	b.n	800633a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 80064ee:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80064f2:	bf0c      	ite	eq
 80064f4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 80064f8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 80064fc:	6945      	ldr	r5, [r0, #20]
 80064fe:	1c4c      	adds	r4, r1, #1
 8006500:	f805 e004 	strb.w	lr, [r5, r4]
 8006504:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006508:	bf0c      	ite	eq
 800650a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800650e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006512:	6945      	ldr	r5, [r0, #20]
 8006514:	1c8c      	adds	r4, r1, #2
 8006516:	f805 e004 	strb.w	lr, [r5, r4]
 800651a:	f01c 0f20 	tst.w	ip, #32
 800651e:	bf0c      	ite	eq
 8006520:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006524:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006528:	6945      	ldr	r5, [r0, #20]
 800652a:	1ccc      	adds	r4, r1, #3
 800652c:	f805 e004 	strb.w	lr, [r5, r4]
 8006530:	f01c 0f10 	tst.w	ip, #16
 8006534:	bf0c      	ite	eq
 8006536:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800653a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800653e:	6945      	ldr	r5, [r0, #20]
 8006540:	1d0c      	adds	r4, r1, #4
 8006542:	f01c 0f08 	tst.w	ip, #8
 8006546:	f805 e004 	strb.w	lr, [r5, r4]
 800654a:	bf0c      	ite	eq
 800654c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006550:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006554:	6945      	ldr	r5, [r0, #20]
 8006556:	1d4c      	adds	r4, r1, #5
 8006558:	f01c 0f04 	tst.w	ip, #4
 800655c:	f805 e004 	strb.w	lr, [r5, r4]
 8006560:	bf0c      	ite	eq
 8006562:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 8006566:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800656a:	6945      	ldr	r5, [r0, #20]
 800656c:	1d8c      	adds	r4, r1, #6
 800656e:	f01c 0f02 	tst.w	ip, #2
 8006572:	f805 e004 	strb.w	lr, [r5, r4]
 8006576:	bf0c      	ite	eq
 8006578:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800657c:	f890 e011 	ldrbne.w	lr, [r0, #17]
 8006580:	6945      	ldr	r5, [r0, #20]
 8006582:	1dcc      	adds	r4, r1, #7
 8006584:	f01c 0f01 	tst.w	ip, #1
 8006588:	f805 e004 	strb.w	lr, [r5, r4]
 800658c:	bf14      	ite	ne
 800658e:	f890 c011 	ldrbne.w	ip, [r0, #17]
 8006592:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 8006596:	6945      	ldr	r5, [r0, #20]
 8006598:	f101 0408 	add.w	r4, r1, #8
 800659c:	f805 c004 	strb.w	ip, [r5, r4]
 80065a0:	061d      	lsls	r5, r3, #24
 80065a2:	bf54      	ite	pl
 80065a4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80065a8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80065ac:	6945      	ldr	r5, [r0, #20]
 80065ae:	f101 0409 	add.w	r4, r1, #9
 80065b2:	f805 c004 	strb.w	ip, [r5, r4]
 80065b6:	065d      	lsls	r5, r3, #25
 80065b8:	bf54      	ite	pl
 80065ba:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80065be:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80065c2:	6945      	ldr	r5, [r0, #20]
 80065c4:	f101 040a 	add.w	r4, r1, #10
 80065c8:	f805 c004 	strb.w	ip, [r5, r4]
 80065cc:	069d      	lsls	r5, r3, #26
 80065ce:	bf54      	ite	pl
 80065d0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80065d4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80065d8:	6945      	ldr	r5, [r0, #20]
 80065da:	f101 040b 	add.w	r4, r1, #11
 80065de:	f805 c004 	strb.w	ip, [r5, r4]
 80065e2:	06dd      	lsls	r5, r3, #27
 80065e4:	bf54      	ite	pl
 80065e6:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 80065ea:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 80065ee:	6945      	ldr	r5, [r0, #20]
 80065f0:	f101 040c 	add.w	r4, r1, #12
 80065f4:	f805 c004 	strb.w	ip, [r5, r4]
 80065f8:	071d      	lsls	r5, r3, #28
 80065fa:	bf54      	ite	pl
 80065fc:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006600:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006604:	6945      	ldr	r5, [r0, #20]
 8006606:	f101 040d 	add.w	r4, r1, #13
 800660a:	f805 c004 	strb.w	ip, [r5, r4]
 800660e:	075d      	lsls	r5, r3, #29
 8006610:	bf54      	ite	pl
 8006612:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 8006616:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800661a:	6945      	ldr	r5, [r0, #20]
 800661c:	f101 040e 	add.w	r4, r1, #14
 8006620:	f805 c004 	strb.w	ip, [r5, r4]
 8006624:	079d      	lsls	r5, r3, #30
 8006626:	bf58      	it	pl
 8006628:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800662c:	6945      	ldr	r5, [r0, #20]
 800662e:	bf48      	it	mi
 8006630:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 8006634:	f101 040f 	add.w	r4, r1, #15
 8006638:	f805 c004 	strb.w	ip, [r5, r4]
 800663c:	07dd      	lsls	r5, r3, #31
 800663e:	bf4c      	ite	mi
 8006640:	7c45      	ldrbmi	r5, [r0, #17]
 8006642:	7c05      	ldrbpl	r5, [r0, #16]
 8006644:	6943      	ldr	r3, [r0, #20]
 8006646:	f101 0410 	add.w	r4, r1, #16
 800664a:	551d      	strb	r5, [r3, r4]
 800664c:	0614      	lsls	r4, r2, #24
 800664e:	bf54      	ite	pl
 8006650:	7c05      	ldrbpl	r5, [r0, #16]
 8006652:	7c45      	ldrbmi	r5, [r0, #17]
 8006654:	6944      	ldr	r4, [r0, #20]
 8006656:	f101 0311 	add.w	r3, r1, #17
 800665a:	54e5      	strb	r5, [r4, r3]
 800665c:	0655      	lsls	r5, r2, #25
 800665e:	bf54      	ite	pl
 8006660:	7c05      	ldrbpl	r5, [r0, #16]
 8006662:	7c45      	ldrbmi	r5, [r0, #17]
 8006664:	6944      	ldr	r4, [r0, #20]
 8006666:	f101 0312 	add.w	r3, r1, #18
 800666a:	54e5      	strb	r5, [r4, r3]
 800666c:	0694      	lsls	r4, r2, #26
 800666e:	bf54      	ite	pl
 8006670:	7c05      	ldrbpl	r5, [r0, #16]
 8006672:	7c45      	ldrbmi	r5, [r0, #17]
 8006674:	6944      	ldr	r4, [r0, #20]
 8006676:	f101 0313 	add.w	r3, r1, #19
 800667a:	54e5      	strb	r5, [r4, r3]
 800667c:	06d5      	lsls	r5, r2, #27
 800667e:	bf54      	ite	pl
 8006680:	7c05      	ldrbpl	r5, [r0, #16]
 8006682:	7c45      	ldrbmi	r5, [r0, #17]
 8006684:	6944      	ldr	r4, [r0, #20]
 8006686:	f101 0314 	add.w	r3, r1, #20
 800668a:	54e5      	strb	r5, [r4, r3]
 800668c:	0714      	lsls	r4, r2, #28
 800668e:	bf54      	ite	pl
 8006690:	7c05      	ldrbpl	r5, [r0, #16]
 8006692:	7c45      	ldrbmi	r5, [r0, #17]
 8006694:	6944      	ldr	r4, [r0, #20]
 8006696:	f101 0315 	add.w	r3, r1, #21
 800669a:	54e5      	strb	r5, [r4, r3]
 800669c:	0755      	lsls	r5, r2, #29
 800669e:	bf54      	ite	pl
 80066a0:	7c05      	ldrbpl	r5, [r0, #16]
 80066a2:	7c45      	ldrbmi	r5, [r0, #17]
 80066a4:	6944      	ldr	r4, [r0, #20]
 80066a6:	f101 0316 	add.w	r3, r1, #22
 80066aa:	54e5      	strb	r5, [r4, r3]
 80066ac:	0794      	lsls	r4, r2, #30
 80066ae:	bf54      	ite	pl
 80066b0:	7c05      	ldrbpl	r5, [r0, #16]
 80066b2:	7c45      	ldrbmi	r5, [r0, #17]
 80066b4:	6944      	ldr	r4, [r0, #20]
 80066b6:	f101 0317 	add.w	r3, r1, #23
 80066ba:	54e5      	strb	r5, [r4, r3]
 80066bc:	3118      	adds	r1, #24
 80066be:	f012 0f01 	tst.w	r2, #1
 80066c2:	e637      	b.n	8006334 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 80066c4:	0615      	lsls	r5, r2, #24
 80066c6:	bf54      	ite	pl
 80066c8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80066cc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80066d0:	6945      	ldr	r5, [r0, #20]
 80066d2:	1c4c      	adds	r4, r1, #1
 80066d4:	f805 e004 	strb.w	lr, [r5, r4]
 80066d8:	0655      	lsls	r5, r2, #25
 80066da:	bf54      	ite	pl
 80066dc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80066e0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80066e4:	6945      	ldr	r5, [r0, #20]
 80066e6:	1c8c      	adds	r4, r1, #2
 80066e8:	f805 e004 	strb.w	lr, [r5, r4]
 80066ec:	0695      	lsls	r5, r2, #26
 80066ee:	bf54      	ite	pl
 80066f0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80066f4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80066f8:	6945      	ldr	r5, [r0, #20]
 80066fa:	1ccc      	adds	r4, r1, #3
 80066fc:	f805 e004 	strb.w	lr, [r5, r4]
 8006700:	06d5      	lsls	r5, r2, #27
 8006702:	bf54      	ite	pl
 8006704:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006708:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800670c:	6945      	ldr	r5, [r0, #20]
 800670e:	1d0c      	adds	r4, r1, #4
 8006710:	f805 e004 	strb.w	lr, [r5, r4]
 8006714:	0715      	lsls	r5, r2, #28
 8006716:	bf54      	ite	pl
 8006718:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800671c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006720:	6945      	ldr	r5, [r0, #20]
 8006722:	1d4c      	adds	r4, r1, #5
 8006724:	f805 e004 	strb.w	lr, [r5, r4]
 8006728:	0755      	lsls	r5, r2, #29
 800672a:	bf54      	ite	pl
 800672c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006730:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006734:	6945      	ldr	r5, [r0, #20]
 8006736:	1d8c      	adds	r4, r1, #6
 8006738:	f805 e004 	strb.w	lr, [r5, r4]
 800673c:	0795      	lsls	r5, r2, #30
 800673e:	bf58      	it	pl
 8006740:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006744:	6945      	ldr	r5, [r0, #20]
 8006746:	bf48      	it	mi
 8006748:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800674c:	1dcc      	adds	r4, r1, #7
 800674e:	f805 e004 	strb.w	lr, [r5, r4]
 8006752:	07d2      	lsls	r2, r2, #31
 8006754:	bf4c      	ite	mi
 8006756:	7c45      	ldrbmi	r5, [r0, #17]
 8006758:	7c05      	ldrbpl	r5, [r0, #16]
 800675a:	6942      	ldr	r2, [r0, #20]
 800675c:	f101 0408 	add.w	r4, r1, #8
 8006760:	5515      	strb	r5, [r2, r4]
 8006762:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006766:	bf0c      	ite	eq
 8006768:	7c05      	ldrbeq	r5, [r0, #16]
 800676a:	7c45      	ldrbne	r5, [r0, #17]
 800676c:	6944      	ldr	r4, [r0, #20]
 800676e:	f101 0209 	add.w	r2, r1, #9
 8006772:	54a5      	strb	r5, [r4, r2]
 8006774:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006778:	bf0c      	ite	eq
 800677a:	7c05      	ldrbeq	r5, [r0, #16]
 800677c:	7c45      	ldrbne	r5, [r0, #17]
 800677e:	6944      	ldr	r4, [r0, #20]
 8006780:	f101 020a 	add.w	r2, r1, #10
 8006784:	54a5      	strb	r5, [r4, r2]
 8006786:	f01c 0f20 	tst.w	ip, #32
 800678a:	bf0c      	ite	eq
 800678c:	7c05      	ldrbeq	r5, [r0, #16]
 800678e:	7c45      	ldrbne	r5, [r0, #17]
 8006790:	6944      	ldr	r4, [r0, #20]
 8006792:	f101 020b 	add.w	r2, r1, #11
 8006796:	54a5      	strb	r5, [r4, r2]
 8006798:	f01c 0f10 	tst.w	ip, #16
 800679c:	bf0c      	ite	eq
 800679e:	7c05      	ldrbeq	r5, [r0, #16]
 80067a0:	7c45      	ldrbne	r5, [r0, #17]
 80067a2:	6944      	ldr	r4, [r0, #20]
 80067a4:	f101 020c 	add.w	r2, r1, #12
 80067a8:	54a5      	strb	r5, [r4, r2]
 80067aa:	f01c 0f08 	tst.w	ip, #8
 80067ae:	bf0c      	ite	eq
 80067b0:	7c05      	ldrbeq	r5, [r0, #16]
 80067b2:	7c45      	ldrbne	r5, [r0, #17]
 80067b4:	6944      	ldr	r4, [r0, #20]
 80067b6:	f101 020d 	add.w	r2, r1, #13
 80067ba:	54a5      	strb	r5, [r4, r2]
 80067bc:	f01c 0f04 	tst.w	ip, #4
 80067c0:	bf0c      	ite	eq
 80067c2:	7c05      	ldrbeq	r5, [r0, #16]
 80067c4:	7c45      	ldrbne	r5, [r0, #17]
 80067c6:	6944      	ldr	r4, [r0, #20]
 80067c8:	f101 020e 	add.w	r2, r1, #14
 80067cc:	54a5      	strb	r5, [r4, r2]
 80067ce:	f01c 0f02 	tst.w	ip, #2
 80067d2:	bf0c      	ite	eq
 80067d4:	7c05      	ldrbeq	r5, [r0, #16]
 80067d6:	7c45      	ldrbne	r5, [r0, #17]
 80067d8:	6944      	ldr	r4, [r0, #20]
 80067da:	f101 020f 	add.w	r2, r1, #15
 80067de:	54a5      	strb	r5, [r4, r2]
 80067e0:	f01c 0f01 	tst.w	ip, #1
 80067e4:	bf14      	ite	ne
 80067e6:	7c45      	ldrbne	r5, [r0, #17]
 80067e8:	7c05      	ldrbeq	r5, [r0, #16]
 80067ea:	6944      	ldr	r4, [r0, #20]
 80067ec:	f101 0210 	add.w	r2, r1, #16
 80067f0:	e564      	b.n	80062bc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 80067f2:	061d      	lsls	r5, r3, #24
 80067f4:	bf54      	ite	pl
 80067f6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 80067fa:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 80067fe:	6945      	ldr	r5, [r0, #20]
 8006800:	1c4c      	adds	r4, r1, #1
 8006802:	f805 e004 	strb.w	lr, [r5, r4]
 8006806:	065d      	lsls	r5, r3, #25
 8006808:	bf54      	ite	pl
 800680a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800680e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006812:	6945      	ldr	r5, [r0, #20]
 8006814:	1c8c      	adds	r4, r1, #2
 8006816:	f805 e004 	strb.w	lr, [r5, r4]
 800681a:	069d      	lsls	r5, r3, #26
 800681c:	bf54      	ite	pl
 800681e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006822:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006826:	6945      	ldr	r5, [r0, #20]
 8006828:	1ccc      	adds	r4, r1, #3
 800682a:	f805 e004 	strb.w	lr, [r5, r4]
 800682e:	06dd      	lsls	r5, r3, #27
 8006830:	bf54      	ite	pl
 8006832:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006836:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800683a:	6945      	ldr	r5, [r0, #20]
 800683c:	1d0c      	adds	r4, r1, #4
 800683e:	f805 e004 	strb.w	lr, [r5, r4]
 8006842:	071d      	lsls	r5, r3, #28
 8006844:	bf54      	ite	pl
 8006846:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800684a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800684e:	6945      	ldr	r5, [r0, #20]
 8006850:	1d4c      	adds	r4, r1, #5
 8006852:	f805 e004 	strb.w	lr, [r5, r4]
 8006856:	075d      	lsls	r5, r3, #29
 8006858:	bf54      	ite	pl
 800685a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800685e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006862:	6945      	ldr	r5, [r0, #20]
 8006864:	1d8c      	adds	r4, r1, #6
 8006866:	f805 e004 	strb.w	lr, [r5, r4]
 800686a:	079d      	lsls	r5, r3, #30
 800686c:	bf58      	it	pl
 800686e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006872:	6945      	ldr	r5, [r0, #20]
 8006874:	bf48      	it	mi
 8006876:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800687a:	1dcc      	adds	r4, r1, #7
 800687c:	f805 e004 	strb.w	lr, [r5, r4]
 8006880:	07dd      	lsls	r5, r3, #31
 8006882:	bf4c      	ite	mi
 8006884:	7c45      	ldrbmi	r5, [r0, #17]
 8006886:	7c05      	ldrbpl	r5, [r0, #16]
 8006888:	6943      	ldr	r3, [r0, #20]
 800688a:	f101 0408 	add.w	r4, r1, #8
 800688e:	551d      	strb	r5, [r3, r4]
 8006890:	0614      	lsls	r4, r2, #24
 8006892:	bf54      	ite	pl
 8006894:	7c05      	ldrbpl	r5, [r0, #16]
 8006896:	7c45      	ldrbmi	r5, [r0, #17]
 8006898:	6944      	ldr	r4, [r0, #20]
 800689a:	f101 0309 	add.w	r3, r1, #9
 800689e:	54e5      	strb	r5, [r4, r3]
 80068a0:	0655      	lsls	r5, r2, #25
 80068a2:	bf54      	ite	pl
 80068a4:	7c05      	ldrbpl	r5, [r0, #16]
 80068a6:	7c45      	ldrbmi	r5, [r0, #17]
 80068a8:	6944      	ldr	r4, [r0, #20]
 80068aa:	f101 030a 	add.w	r3, r1, #10
 80068ae:	54e5      	strb	r5, [r4, r3]
 80068b0:	0694      	lsls	r4, r2, #26
 80068b2:	bf54      	ite	pl
 80068b4:	7c05      	ldrbpl	r5, [r0, #16]
 80068b6:	7c45      	ldrbmi	r5, [r0, #17]
 80068b8:	6944      	ldr	r4, [r0, #20]
 80068ba:	f101 030b 	add.w	r3, r1, #11
 80068be:	54e5      	strb	r5, [r4, r3]
 80068c0:	06d5      	lsls	r5, r2, #27
 80068c2:	bf54      	ite	pl
 80068c4:	7c05      	ldrbpl	r5, [r0, #16]
 80068c6:	7c45      	ldrbmi	r5, [r0, #17]
 80068c8:	6944      	ldr	r4, [r0, #20]
 80068ca:	f101 030c 	add.w	r3, r1, #12
 80068ce:	54e5      	strb	r5, [r4, r3]
 80068d0:	0714      	lsls	r4, r2, #28
 80068d2:	bf54      	ite	pl
 80068d4:	7c05      	ldrbpl	r5, [r0, #16]
 80068d6:	7c45      	ldrbmi	r5, [r0, #17]
 80068d8:	6944      	ldr	r4, [r0, #20]
 80068da:	f101 030d 	add.w	r3, r1, #13
 80068de:	54e5      	strb	r5, [r4, r3]
 80068e0:	0755      	lsls	r5, r2, #29
 80068e2:	bf54      	ite	pl
 80068e4:	7c05      	ldrbpl	r5, [r0, #16]
 80068e6:	7c45      	ldrbmi	r5, [r0, #17]
 80068e8:	6944      	ldr	r4, [r0, #20]
 80068ea:	f101 030e 	add.w	r3, r1, #14
 80068ee:	54e5      	strb	r5, [r4, r3]
 80068f0:	0794      	lsls	r4, r2, #30
 80068f2:	bf58      	it	pl
 80068f4:	7c05      	ldrbpl	r5, [r0, #16]
 80068f6:	6944      	ldr	r4, [r0, #20]
 80068f8:	bf48      	it	mi
 80068fa:	7c45      	ldrbmi	r5, [r0, #17]
 80068fc:	f101 030f 	add.w	r3, r1, #15
 8006900:	54e5      	strb	r5, [r4, r3]
 8006902:	07d2      	lsls	r2, r2, #31
 8006904:	bf4c      	ite	mi
 8006906:	7c44      	ldrbmi	r4, [r0, #17]
 8006908:	7c04      	ldrbpl	r4, [r0, #16]
 800690a:	6942      	ldr	r2, [r0, #20]
 800690c:	f101 0310 	add.w	r3, r1, #16
 8006910:	e5a5      	b.n	800645e <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 8006912:	061d      	lsls	r5, r3, #24
 8006914:	bf54      	ite	pl
 8006916:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800691a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800691e:	6945      	ldr	r5, [r0, #20]
 8006920:	1c4c      	adds	r4, r1, #1
 8006922:	f805 e004 	strb.w	lr, [r5, r4]
 8006926:	065d      	lsls	r5, r3, #25
 8006928:	bf54      	ite	pl
 800692a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800692e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006932:	6945      	ldr	r5, [r0, #20]
 8006934:	1c8c      	adds	r4, r1, #2
 8006936:	f805 e004 	strb.w	lr, [r5, r4]
 800693a:	069d      	lsls	r5, r3, #26
 800693c:	bf54      	ite	pl
 800693e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006942:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006946:	6945      	ldr	r5, [r0, #20]
 8006948:	1ccc      	adds	r4, r1, #3
 800694a:	f805 e004 	strb.w	lr, [r5, r4]
 800694e:	06dd      	lsls	r5, r3, #27
 8006950:	bf54      	ite	pl
 8006952:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006956:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800695a:	6945      	ldr	r5, [r0, #20]
 800695c:	1d0c      	adds	r4, r1, #4
 800695e:	f805 e004 	strb.w	lr, [r5, r4]
 8006962:	071d      	lsls	r5, r3, #28
 8006964:	bf54      	ite	pl
 8006966:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800696a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800696e:	6945      	ldr	r5, [r0, #20]
 8006970:	1d4c      	adds	r4, r1, #5
 8006972:	f805 e004 	strb.w	lr, [r5, r4]
 8006976:	075d      	lsls	r5, r3, #29
 8006978:	bf54      	ite	pl
 800697a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800697e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 8006982:	6945      	ldr	r5, [r0, #20]
 8006984:	1d8c      	adds	r4, r1, #6
 8006986:	f805 e004 	strb.w	lr, [r5, r4]
 800698a:	079d      	lsls	r5, r3, #30
 800698c:	bf58      	it	pl
 800698e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 8006992:	6945      	ldr	r5, [r0, #20]
 8006994:	bf48      	it	mi
 8006996:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800699a:	1dcc      	adds	r4, r1, #7
 800699c:	f805 e004 	strb.w	lr, [r5, r4]
 80069a0:	07db      	lsls	r3, r3, #31
 80069a2:	bf4c      	ite	mi
 80069a4:	7c45      	ldrbmi	r5, [r0, #17]
 80069a6:	7c05      	ldrbpl	r5, [r0, #16]
 80069a8:	6943      	ldr	r3, [r0, #20]
 80069aa:	f101 0408 	add.w	r4, r1, #8
 80069ae:	551d      	strb	r5, [r3, r4]
 80069b0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80069b4:	bf0c      	ite	eq
 80069b6:	7c05      	ldrbeq	r5, [r0, #16]
 80069b8:	7c45      	ldrbne	r5, [r0, #17]
 80069ba:	6944      	ldr	r4, [r0, #20]
 80069bc:	f101 0309 	add.w	r3, r1, #9
 80069c0:	54e5      	strb	r5, [r4, r3]
 80069c2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80069c6:	bf0c      	ite	eq
 80069c8:	7c05      	ldrbeq	r5, [r0, #16]
 80069ca:	7c45      	ldrbne	r5, [r0, #17]
 80069cc:	6944      	ldr	r4, [r0, #20]
 80069ce:	f101 030a 	add.w	r3, r1, #10
 80069d2:	54e5      	strb	r5, [r4, r3]
 80069d4:	f01c 0f20 	tst.w	ip, #32
 80069d8:	bf0c      	ite	eq
 80069da:	7c05      	ldrbeq	r5, [r0, #16]
 80069dc:	7c45      	ldrbne	r5, [r0, #17]
 80069de:	6944      	ldr	r4, [r0, #20]
 80069e0:	f101 030b 	add.w	r3, r1, #11
 80069e4:	54e5      	strb	r5, [r4, r3]
 80069e6:	f01c 0f10 	tst.w	ip, #16
 80069ea:	bf0c      	ite	eq
 80069ec:	7c05      	ldrbeq	r5, [r0, #16]
 80069ee:	7c45      	ldrbne	r5, [r0, #17]
 80069f0:	6944      	ldr	r4, [r0, #20]
 80069f2:	f101 030c 	add.w	r3, r1, #12
 80069f6:	54e5      	strb	r5, [r4, r3]
 80069f8:	f01c 0f08 	tst.w	ip, #8
 80069fc:	bf0c      	ite	eq
 80069fe:	7c05      	ldrbeq	r5, [r0, #16]
 8006a00:	7c45      	ldrbne	r5, [r0, #17]
 8006a02:	6944      	ldr	r4, [r0, #20]
 8006a04:	f101 030d 	add.w	r3, r1, #13
 8006a08:	54e5      	strb	r5, [r4, r3]
 8006a0a:	f01c 0f04 	tst.w	ip, #4
 8006a0e:	bf0c      	ite	eq
 8006a10:	7c05      	ldrbeq	r5, [r0, #16]
 8006a12:	7c45      	ldrbne	r5, [r0, #17]
 8006a14:	6944      	ldr	r4, [r0, #20]
 8006a16:	f101 030e 	add.w	r3, r1, #14
 8006a1a:	54e5      	strb	r5, [r4, r3]
 8006a1c:	f01c 0f02 	tst.w	ip, #2
 8006a20:	bf0c      	ite	eq
 8006a22:	7c05      	ldrbeq	r5, [r0, #16]
 8006a24:	7c45      	ldrbne	r5, [r0, #17]
 8006a26:	6944      	ldr	r4, [r0, #20]
 8006a28:	f101 030f 	add.w	r3, r1, #15
 8006a2c:	54e5      	strb	r5, [r4, r3]
 8006a2e:	f01c 0f01 	tst.w	ip, #1
 8006a32:	bf14      	ite	ne
 8006a34:	7c45      	ldrbne	r5, [r0, #17]
 8006a36:	7c05      	ldrbeq	r5, [r0, #16]
 8006a38:	6944      	ldr	r4, [r0, #20]
 8006a3a:	f101 0310 	add.w	r3, r1, #16
 8006a3e:	e604      	b.n	800664a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

08006a40 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	6804      	ldr	r4, [r0, #0]
 8006a44:	f89d c010 	ldrb.w	ip, [sp, #16]
 8006a48:	2c07      	cmp	r4, #7
 8006a4a:	f89d e014 	ldrb.w	lr, [sp, #20]
 8006a4e:	d000      	beq.n	8006a52 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	061e      	lsls	r6, r3, #24
 8006a54:	ea4f 1141 	mov.w	r1, r1, lsl #5
 8006a58:	bf54      	ite	pl
 8006a5a:	7c06      	ldrbpl	r6, [r0, #16]
 8006a5c:	7c46      	ldrbmi	r6, [r0, #17]
 8006a5e:	6945      	ldr	r5, [r0, #20]
 8006a60:	1c4c      	adds	r4, r1, #1
 8006a62:	552e      	strb	r6, [r5, r4]
 8006a64:	065d      	lsls	r5, r3, #25
 8006a66:	bf54      	ite	pl
 8006a68:	7c06      	ldrbpl	r6, [r0, #16]
 8006a6a:	7c46      	ldrbmi	r6, [r0, #17]
 8006a6c:	6945      	ldr	r5, [r0, #20]
 8006a6e:	1c8c      	adds	r4, r1, #2
 8006a70:	552e      	strb	r6, [r5, r4]
 8006a72:	069e      	lsls	r6, r3, #26
 8006a74:	bf54      	ite	pl
 8006a76:	7c06      	ldrbpl	r6, [r0, #16]
 8006a78:	7c46      	ldrbmi	r6, [r0, #17]
 8006a7a:	6945      	ldr	r5, [r0, #20]
 8006a7c:	1ccc      	adds	r4, r1, #3
 8006a7e:	552e      	strb	r6, [r5, r4]
 8006a80:	06dd      	lsls	r5, r3, #27
 8006a82:	bf54      	ite	pl
 8006a84:	7c06      	ldrbpl	r6, [r0, #16]
 8006a86:	7c46      	ldrbmi	r6, [r0, #17]
 8006a88:	6945      	ldr	r5, [r0, #20]
 8006a8a:	1d0c      	adds	r4, r1, #4
 8006a8c:	552e      	strb	r6, [r5, r4]
 8006a8e:	071e      	lsls	r6, r3, #28
 8006a90:	bf54      	ite	pl
 8006a92:	7c06      	ldrbpl	r6, [r0, #16]
 8006a94:	7c46      	ldrbmi	r6, [r0, #17]
 8006a96:	6945      	ldr	r5, [r0, #20]
 8006a98:	1d4c      	adds	r4, r1, #5
 8006a9a:	552e      	strb	r6, [r5, r4]
 8006a9c:	075d      	lsls	r5, r3, #29
 8006a9e:	bf54      	ite	pl
 8006aa0:	7c06      	ldrbpl	r6, [r0, #16]
 8006aa2:	7c46      	ldrbmi	r6, [r0, #17]
 8006aa4:	6945      	ldr	r5, [r0, #20]
 8006aa6:	1d8c      	adds	r4, r1, #6
 8006aa8:	552e      	strb	r6, [r5, r4]
 8006aaa:	079e      	lsls	r6, r3, #30
 8006aac:	6945      	ldr	r5, [r0, #20]
 8006aae:	bf54      	ite	pl
 8006ab0:	7c06      	ldrbpl	r6, [r0, #16]
 8006ab2:	7c46      	ldrbmi	r6, [r0, #17]
 8006ab4:	1dcc      	adds	r4, r1, #7
 8006ab6:	552e      	strb	r6, [r5, r4]
 8006ab8:	07dd      	lsls	r5, r3, #31
 8006aba:	bf4c      	ite	mi
 8006abc:	7c45      	ldrbmi	r5, [r0, #17]
 8006abe:	7c05      	ldrbpl	r5, [r0, #16]
 8006ac0:	6943      	ldr	r3, [r0, #20]
 8006ac2:	f101 0408 	add.w	r4, r1, #8
 8006ac6:	551d      	strb	r5, [r3, r4]
 8006ac8:	0614      	lsls	r4, r2, #24
 8006aca:	bf54      	ite	pl
 8006acc:	7c05      	ldrbpl	r5, [r0, #16]
 8006ace:	7c45      	ldrbmi	r5, [r0, #17]
 8006ad0:	6944      	ldr	r4, [r0, #20]
 8006ad2:	f101 0309 	add.w	r3, r1, #9
 8006ad6:	54e5      	strb	r5, [r4, r3]
 8006ad8:	0656      	lsls	r6, r2, #25
 8006ada:	bf54      	ite	pl
 8006adc:	7c05      	ldrbpl	r5, [r0, #16]
 8006ade:	7c45      	ldrbmi	r5, [r0, #17]
 8006ae0:	6944      	ldr	r4, [r0, #20]
 8006ae2:	f101 030a 	add.w	r3, r1, #10
 8006ae6:	54e5      	strb	r5, [r4, r3]
 8006ae8:	0695      	lsls	r5, r2, #26
 8006aea:	bf54      	ite	pl
 8006aec:	7c05      	ldrbpl	r5, [r0, #16]
 8006aee:	7c45      	ldrbmi	r5, [r0, #17]
 8006af0:	6944      	ldr	r4, [r0, #20]
 8006af2:	f101 030b 	add.w	r3, r1, #11
 8006af6:	54e5      	strb	r5, [r4, r3]
 8006af8:	06d4      	lsls	r4, r2, #27
 8006afa:	bf54      	ite	pl
 8006afc:	7c05      	ldrbpl	r5, [r0, #16]
 8006afe:	7c45      	ldrbmi	r5, [r0, #17]
 8006b00:	6944      	ldr	r4, [r0, #20]
 8006b02:	f101 030c 	add.w	r3, r1, #12
 8006b06:	54e5      	strb	r5, [r4, r3]
 8006b08:	0716      	lsls	r6, r2, #28
 8006b0a:	bf54      	ite	pl
 8006b0c:	7c05      	ldrbpl	r5, [r0, #16]
 8006b0e:	7c45      	ldrbmi	r5, [r0, #17]
 8006b10:	6944      	ldr	r4, [r0, #20]
 8006b12:	f101 030d 	add.w	r3, r1, #13
 8006b16:	54e5      	strb	r5, [r4, r3]
 8006b18:	0755      	lsls	r5, r2, #29
 8006b1a:	bf54      	ite	pl
 8006b1c:	7c05      	ldrbpl	r5, [r0, #16]
 8006b1e:	7c45      	ldrbmi	r5, [r0, #17]
 8006b20:	6944      	ldr	r4, [r0, #20]
 8006b22:	f101 030e 	add.w	r3, r1, #14
 8006b26:	54e5      	strb	r5, [r4, r3]
 8006b28:	0794      	lsls	r4, r2, #30
 8006b2a:	bf58      	it	pl
 8006b2c:	7c05      	ldrbpl	r5, [r0, #16]
 8006b2e:	6944      	ldr	r4, [r0, #20]
 8006b30:	bf48      	it	mi
 8006b32:	7c45      	ldrbmi	r5, [r0, #17]
 8006b34:	f101 030f 	add.w	r3, r1, #15
 8006b38:	54e5      	strb	r5, [r4, r3]
 8006b3a:	07d2      	lsls	r2, r2, #31
 8006b3c:	bf4c      	ite	mi
 8006b3e:	7c44      	ldrbmi	r4, [r0, #17]
 8006b40:	7c04      	ldrbpl	r4, [r0, #16]
 8006b42:	6942      	ldr	r2, [r0, #20]
 8006b44:	f101 0310 	add.w	r3, r1, #16
 8006b48:	54d4      	strb	r4, [r2, r3]
 8006b4a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8006b4e:	bf0c      	ite	eq
 8006b50:	7c04      	ldrbeq	r4, [r0, #16]
 8006b52:	7c44      	ldrbne	r4, [r0, #17]
 8006b54:	6942      	ldr	r2, [r0, #20]
 8006b56:	f101 0311 	add.w	r3, r1, #17
 8006b5a:	54d4      	strb	r4, [r2, r3]
 8006b5c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8006b60:	bf14      	ite	ne
 8006b62:	7c44      	ldrbne	r4, [r0, #17]
 8006b64:	7c04      	ldrbeq	r4, [r0, #16]
 8006b66:	6942      	ldr	r2, [r0, #20]
 8006b68:	f101 0312 	add.w	r3, r1, #18
 8006b6c:	54d4      	strb	r4, [r2, r3]
 8006b6e:	f01c 0f20 	tst.w	ip, #32
 8006b72:	bf14      	ite	ne
 8006b74:	7c44      	ldrbne	r4, [r0, #17]
 8006b76:	7c04      	ldrbeq	r4, [r0, #16]
 8006b78:	6942      	ldr	r2, [r0, #20]
 8006b7a:	f101 0313 	add.w	r3, r1, #19
 8006b7e:	54d4      	strb	r4, [r2, r3]
 8006b80:	f01c 0f10 	tst.w	ip, #16
 8006b84:	bf14      	ite	ne
 8006b86:	7c44      	ldrbne	r4, [r0, #17]
 8006b88:	7c04      	ldrbeq	r4, [r0, #16]
 8006b8a:	6942      	ldr	r2, [r0, #20]
 8006b8c:	f101 0314 	add.w	r3, r1, #20
 8006b90:	54d4      	strb	r4, [r2, r3]
 8006b92:	f01c 0f08 	tst.w	ip, #8
 8006b96:	bf14      	ite	ne
 8006b98:	7c44      	ldrbne	r4, [r0, #17]
 8006b9a:	7c04      	ldrbeq	r4, [r0, #16]
 8006b9c:	6942      	ldr	r2, [r0, #20]
 8006b9e:	f101 0315 	add.w	r3, r1, #21
 8006ba2:	54d4      	strb	r4, [r2, r3]
 8006ba4:	f01c 0f04 	tst.w	ip, #4
 8006ba8:	bf14      	ite	ne
 8006baa:	7c44      	ldrbne	r4, [r0, #17]
 8006bac:	7c04      	ldrbeq	r4, [r0, #16]
 8006bae:	6942      	ldr	r2, [r0, #20]
 8006bb0:	f101 0316 	add.w	r3, r1, #22
 8006bb4:	54d4      	strb	r4, [r2, r3]
 8006bb6:	f01c 0f02 	tst.w	ip, #2
 8006bba:	bf14      	ite	ne
 8006bbc:	7c44      	ldrbne	r4, [r0, #17]
 8006bbe:	7c04      	ldrbeq	r4, [r0, #16]
 8006bc0:	6942      	ldr	r2, [r0, #20]
 8006bc2:	f101 0317 	add.w	r3, r1, #23
 8006bc6:	54d4      	strb	r4, [r2, r3]
 8006bc8:	f01c 0f01 	tst.w	ip, #1
 8006bcc:	bf14      	ite	ne
 8006bce:	7c44      	ldrbne	r4, [r0, #17]
 8006bd0:	7c04      	ldrbeq	r4, [r0, #16]
 8006bd2:	6942      	ldr	r2, [r0, #20]
 8006bd4:	f101 0318 	add.w	r3, r1, #24
 8006bd8:	54d4      	strb	r4, [r2, r3]
 8006bda:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8006bde:	bf0c      	ite	eq
 8006be0:	7c04      	ldrbeq	r4, [r0, #16]
 8006be2:	7c44      	ldrbne	r4, [r0, #17]
 8006be4:	6942      	ldr	r2, [r0, #20]
 8006be6:	f101 0319 	add.w	r3, r1, #25
 8006bea:	54d4      	strb	r4, [r2, r3]
 8006bec:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8006bf0:	bf0c      	ite	eq
 8006bf2:	7c04      	ldrbeq	r4, [r0, #16]
 8006bf4:	7c44      	ldrbne	r4, [r0, #17]
 8006bf6:	6942      	ldr	r2, [r0, #20]
 8006bf8:	f101 031a 	add.w	r3, r1, #26
 8006bfc:	54d4      	strb	r4, [r2, r3]
 8006bfe:	f01e 0f20 	tst.w	lr, #32
 8006c02:	bf0c      	ite	eq
 8006c04:	7c04      	ldrbeq	r4, [r0, #16]
 8006c06:	7c44      	ldrbne	r4, [r0, #17]
 8006c08:	6942      	ldr	r2, [r0, #20]
 8006c0a:	f101 031b 	add.w	r3, r1, #27
 8006c0e:	54d4      	strb	r4, [r2, r3]
 8006c10:	f01e 0f10 	tst.w	lr, #16
 8006c14:	bf0c      	ite	eq
 8006c16:	7c04      	ldrbeq	r4, [r0, #16]
 8006c18:	7c44      	ldrbne	r4, [r0, #17]
 8006c1a:	6942      	ldr	r2, [r0, #20]
 8006c1c:	f101 031c 	add.w	r3, r1, #28
 8006c20:	54d4      	strb	r4, [r2, r3]
 8006c22:	f01e 0f08 	tst.w	lr, #8
 8006c26:	bf0c      	ite	eq
 8006c28:	7c04      	ldrbeq	r4, [r0, #16]
 8006c2a:	7c44      	ldrbne	r4, [r0, #17]
 8006c2c:	6942      	ldr	r2, [r0, #20]
 8006c2e:	f101 031d 	add.w	r3, r1, #29
 8006c32:	54d4      	strb	r4, [r2, r3]
 8006c34:	f01e 0f04 	tst.w	lr, #4
 8006c38:	bf0c      	ite	eq
 8006c3a:	7c04      	ldrbeq	r4, [r0, #16]
 8006c3c:	7c44      	ldrbne	r4, [r0, #17]
 8006c3e:	6942      	ldr	r2, [r0, #20]
 8006c40:	f101 031e 	add.w	r3, r1, #30
 8006c44:	54d4      	strb	r4, [r2, r3]
 8006c46:	f01e 0f02 	tst.w	lr, #2
 8006c4a:	6942      	ldr	r2, [r0, #20]
 8006c4c:	bf0c      	ite	eq
 8006c4e:	7c04      	ldrbeq	r4, [r0, #16]
 8006c50:	7c44      	ldrbne	r4, [r0, #17]
 8006c52:	f101 031f 	add.w	r3, r1, #31
 8006c56:	54d4      	strb	r4, [r2, r3]
 8006c58:	f01e 0f01 	tst.w	lr, #1
 8006c5c:	bf14      	ite	ne
 8006c5e:	7c42      	ldrbne	r2, [r0, #17]
 8006c60:	7c02      	ldrbeq	r2, [r0, #16]
 8006c62:	6943      	ldr	r3, [r0, #20]
 8006c64:	3120      	adds	r1, #32
 8006c66:	545a      	strb	r2, [r3, r1]
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	bf00      	nop

08006c6c <WS28xx::~WS28xx()>:
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4b01      	ldr	r3, [pc, #4]	; (8006c74 <WS28xx::~WS28xx()+0x8>)
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4770      	bx	lr
 8006c74:	20000694 	mulcs	r0, r4, r6

08006c78 <WS28xx::SetupBuffers()>:
 8006c78:	b513      	push	{r0, r1, r4, lr}
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	a801      	add	r0, sp, #4
 8006c7e:	f002 fe1d 	bl	80098bc <gd32_spi_dma_tx_prepare(unsigned int*)>
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	4a07      	ldr	r2, [pc, #28]	; (8006ca4 <WS28xx::SetupBuffers()+0x2c>)
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	f023 0303 	bic.w	r3, r3, #3
 8006c8c:	6160      	str	r0, [r4, #20]
 8006c8e:	4418      	add	r0, r3
 8006c90:	68e3      	ldr	r3, [r4, #12]
 8006c92:	61a0      	str	r0, [r4, #24]
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	3303      	adds	r3, #3
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	60e3      	str	r3, [r4, #12]
 8006c9e:	b002      	add	sp, #8
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000690 	mulcs	r0, r0, r6

08006ca8 <WS28xx::WS28xx(PixelConfiguration&)>:
 8006ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006caa:	23aa      	movs	r3, #170	; 0xaa
 8006cac:	2203      	movs	r2, #3
 8006cae:	e9c0 2300 	strd	r2, r3, [r0]
 8006cb2:	2306      	movs	r3, #6
 8006cb4:	6083      	str	r3, [r0, #8]
 8006cb6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8006cba:	8243      	strh	r3, [r0, #18]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	460d      	mov	r5, r1
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8006cc6:	4b17      	ldr	r3, [pc, #92]	; (8006d24 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 8006cc8:	a901      	add	r1, sp, #4
 8006cca:	6018      	str	r0, [r3, #0]
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f7fe fe71 	bl	80059b4 <PixelConfiguration::Validate(unsigned int&)>
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f7fe feda 	bl	8005a8c <PixelConfiguration::Dump()>
 8006cd8:	68ab      	ldr	r3, [r5, #8]
 8006cda:	686a      	ldr	r2, [r5, #4]
 8006cdc:	60a3      	str	r3, [r4, #8]
 8006cde:	8a2b      	ldrh	r3, [r5, #16]
 8006ce0:	6829      	ldr	r1, [r5, #0]
 8006ce2:	8223      	strh	r3, [r4, #16]
 8006ce4:	7cab      	ldrb	r3, [r5, #18]
 8006ce6:	7ce8      	ldrb	r0, [r5, #19]
 8006ce8:	74e3      	strb	r3, [r4, #19]
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	6021      	str	r1, [r4, #0]
 8006cee:	4353      	muls	r3, r2
 8006cf0:	6062      	str	r2, [r4, #4]
 8006cf2:	74a0      	strb	r0, [r4, #18]
 8006cf4:	b998      	cbnz	r0, 8006d1e <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 8006cf6:	390b      	subs	r1, #11
 8006cf8:	2902      	cmp	r1, #2
 8006cfa:	60e3      	str	r3, [r4, #12]
 8006cfc:	bf9e      	ittt	ls
 8006cfe:	68e3      	ldrls	r3, [r4, #12]
 8006d00:	3208      	addls	r2, #8
 8006d02:	189b      	addls	r3, r3, r2
 8006d04:	4620      	mov	r0, r4
 8006d06:	bf98      	it	ls
 8006d08:	60e3      	strls	r3, [r4, #12]
 8006d0a:	f7ff ffb5 	bl	8006c78 <WS28xx::SetupBuffers()>
 8006d0e:	f002 fd4b 	bl	80097a8 <gd32_spi_dma_begin()>
 8006d12:	68e8      	ldr	r0, [r5, #12]
 8006d14:	f002 fdbe 	bl	8009894 <gd32_spi_dma_set_speed_hz(unsigned int)>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	b003      	add	sp, #12
 8006d1c:	bd30      	pop	{r4, r5, pc}
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	3301      	adds	r3, #1
 8006d22:	e7e8      	b.n	8006cf6 <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 8006d24:	20000694 	mulcs	r0, r4, r6

08006d28 <WS28xx::Update()>:
 8006d28:	2200      	movs	r2, #0
 8006d2a:	b430      	push	{r4, r5}
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <WS28xx::Update()+0x34>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68c1      	ldr	r1, [r0, #12]
 8006d32:	6944      	ldr	r4, [r0, #20]
 8006d34:	4299      	cmp	r1, r3
 8006d36:	d807      	bhi.n	8006d48 <WS28xx::Update()+0x20>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6980      	ldr	r0, [r0, #24]
 8006d3c:	084d      	lsrs	r5, r1, #1
 8006d3e:	42ab      	cmp	r3, r5
 8006d40:	d105      	bne.n	8006d4e <WS28xx::Update()+0x26>
 8006d42:	bc30      	pop	{r4, r5}
 8006d44:	f002 bdc2 	b.w	80098cc <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 8006d48:	54e2      	strb	r2, [r4, r3]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7f0      	b.n	8006d30 <WS28xx::Update()+0x8>
 8006d4e:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8006d52:	ba52      	rev16	r2, r2
 8006d54:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	e7f0      	b.n	8006d3e <WS28xx::Update()+0x16>
 8006d5c:	20000690 	mulcs	r0, r0, r6

08006d60 <WS28xx::Blackout()>:
 8006d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d62:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 8006d66:	4604      	mov	r4, r0
 8006d68:	6143      	str	r3, [r0, #20]
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f002 fdc7 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1f9      	bne.n	8006d6a <WS28xx::Blackout()+0xa>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	6963      	ldr	r3, [r4, #20]
 8006d7a:	3a0b      	subs	r2, #11
 8006d7c:	2a02      	cmp	r2, #2
 8006d7e:	7018      	strb	r0, [r3, #0]
 8006d80:	d82a      	bhi.n	8006dd8 <WS28xx::Blackout()+0x78>
 8006d82:	4605      	mov	r5, r0
 8006d84:	4607      	mov	r7, r0
 8006d86:	7058      	strb	r0, [r3, #1]
 8006d88:	7098      	strb	r0, [r3, #2]
 8006d8a:	70d8      	strb	r0, [r3, #3]
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	42ab      	cmp	r3, r5
 8006d90:	d819      	bhi.n	8006dc6 <WS28xx::Blackout()+0x66>
 8006d92:	6821      	ldr	r1, [r4, #0]
 8006d94:	68e2      	ldr	r2, [r4, #12]
 8006d96:	390b      	subs	r1, #11
 8006d98:	2901      	cmp	r1, #1
 8006d9a:	bf94      	ite	ls
 8006d9c:	21ff      	movls	r1, #255	; 0xff
 8006d9e:	2100      	movhi	r1, #0
 8006da0:	6960      	ldr	r0, [r4, #20]
 8006da2:	3a04      	subs	r2, #4
 8006da4:	1883      	adds	r3, r0, r2
 8006da6:	5481      	strb	r1, [r0, r2]
 8006da8:	7059      	strb	r1, [r3, #1]
 8006daa:	7099      	strb	r1, [r3, #2]
 8006dac:	70d9      	strb	r1, [r3, #3]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7ff ffba 	bl	8006d28 <WS28xx::Update()>
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f002 fda2 	bl	8009900 <gd32_spi_dma_tx_is_active()>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d1f9      	bne.n	8006db4 <WS28xx::Blackout()+0x54>
 8006dc0:	6166      	str	r6, [r4, #20]
 8006dc2:	b003      	add	sp, #12
 8006dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4629      	mov	r1, r5
 8006dca:	461a      	mov	r2, r3
 8006dcc:	4620      	mov	r0, r4
 8006dce:	9700      	str	r7, [sp, #0]
 8006dd0:	f7ff f96a 	bl	80060a8 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	e7d9      	b.n	8006d8c <WS28xx::Blackout()+0x2c>
 8006dd8:	6963      	ldr	r3, [r4, #20]
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	b101      	cbz	r1, 8006de2 <WS28xx::Blackout()+0x82>
 8006de0:	7c21      	ldrb	r1, [r4, #16]
 8006de2:	68e0      	ldr	r0, [r4, #12]
 8006de4:	3001      	adds	r0, #1
 8006de6:	4403      	add	r3, r0
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d0e0      	beq.n	8006dae <WS28xx::Blackout()+0x4e>
 8006dec:	f802 1b01 	strb.w	r1, [r2], #1
 8006df0:	e7fa      	b.n	8006de8 <WS28xx::Blackout()+0x88>
	...

08006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8006df4:	2300      	movs	r3, #0
 8006df6:	2020      	movs	r0, #32
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	d100      	bne.n	8006e02 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	f852 4b04 	ldr.w	r4, [r2], #4
 8006e06:	3301      	adds	r3, #1
 8006e08:	4420      	add	r0, r4
 8006e0a:	e7f7      	b.n	8006dfc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 8006e0c:	0800afb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, pc}

08006e10 <SpiFlashStore::Init()>:
 8006e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e14:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8006f2c <SpiFlashStore::Init()+0x11c>
 8006e18:	4607      	mov	r7, r0
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	f8d8 0000 	ldr.w	r0, [r8]
 8006e20:	f000 fb84 	bl	800752c <FlashRom::GetSectorSize() const>
 8006e24:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006e28:	4605      	mov	r5, r0
 8006e2a:	d17d      	bne.n	8006f28 <SpiFlashStore::Init()+0x118>
 8006e2c:	f8d8 0000 	ldr.w	r0, [r8]
 8006e30:	f000 fb74 	bl	800751c <FlashRom::GetSize() const>
 8006e34:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <SpiFlashStore::Init()+0x120>)
 8006e36:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8006e3a:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	d171      	bne.n	8006f28 <SpiFlashStore::Init()+0x118>
 8006e44:	4c3b      	ldr	r4, [pc, #236]	; (8006f34 <SpiFlashStore::Init()+0x124>)
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4623      	mov	r3, r4
 8006e4e:	f8d8 0000 	ldr.w	r0, [r8]
 8006e52:	f000 fb6e 	bl	8007532 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 8006e56:	7823      	ldrb	r3, [r4, #0]
 8006e58:	2b41      	cmp	r3, #65	; 0x41
 8006e5a:	bf1c      	itt	ne
 8006e5c:	2341      	movne	r3, #65	; 0x41
 8006e5e:	7023      	strbne	r3, [r4, #0]
 8006e60:	7863      	ldrb	r3, [r4, #1]
 8006e62:	bf14      	ite	ne
 8006e64:	4635      	movne	r5, r6
 8006e66:	2501      	moveq	r5, #1
 8006e68:	2b76      	cmp	r3, #118	; 0x76
 8006e6a:	bf1c      	itt	ne
 8006e6c:	2376      	movne	r3, #118	; 0x76
 8006e6e:	7063      	strbne	r3, [r4, #1]
 8006e70:	78a3      	ldrb	r3, [r4, #2]
 8006e72:	bf18      	it	ne
 8006e74:	2500      	movne	r5, #0
 8006e76:	2b56      	cmp	r3, #86	; 0x56
 8006e78:	bf1c      	itt	ne
 8006e7a:	2356      	movne	r3, #86	; 0x56
 8006e7c:	70a3      	strbne	r3, [r4, #2]
 8006e7e:	78e3      	ldrb	r3, [r4, #3]
 8006e80:	bf18      	it	ne
 8006e82:	2500      	movne	r5, #0
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	d022      	beq.n	8006ece <SpiFlashStore::Init()+0xbe>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	70e3      	strb	r3, [r4, #3]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	2500      	movs	r5, #0
 8006e90:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006e94:	4b28      	ldr	r3, [pc, #160]	; (8006f38 <SpiFlashStore::Init()+0x128>)
 8006e96:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8006f3c <SpiFlashStore::Init()+0x12c>
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f7ff ffa8 	bl	8006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006ea4:	1823      	adds	r3, r4, r0
 8006ea6:	5425      	strb	r5, [r4, r0]
 8006ea8:	705d      	strb	r5, [r3, #1]
 8006eaa:	709d      	strb	r5, [r3, #2]
 8006eac:	70dd      	strb	r5, [r3, #3]
 8006eae:	f858 3b04 	ldr.w	r3, [r8], #4
 8006eb2:	1d02      	adds	r2, r0, #4
 8006eb4:	4403      	add	r3, r0
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d332      	bcc.n	8006f20 <SpiFlashStore::Init()+0x110>
 8006eba:	3601      	adds	r6, #1
 8006ebc:	2e1c      	cmp	r6, #28
 8006ebe:	d1ed      	bne.n	8006e9c <SpiFlashStore::Init()+0x8c>
 8006ec0:	2501      	movs	r5, #1
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <SpiFlashStore::Init()+0x130>)
 8006ec4:	601d      	str	r5, [r3, #0]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	b005      	add	sp, #20
 8006eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	d0dc      	beq.n	8006e8c <SpiFlashStore::Init()+0x7c>
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	46c8      	mov	r8, r9
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4638      	mov	r0, r7
 8006edc:	f7ff ff8a 	bl	8006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006ee0:	5c23      	ldrb	r3, [r4, r0]
 8006ee2:	2bff      	cmp	r3, #255	; 0xff
 8006ee4:	d112      	bne.n	8006f0c <SpiFlashStore::Init()+0xfc>
 8006ee6:	1823      	adds	r3, r4, r0
 8006ee8:	785a      	ldrb	r2, [r3, #1]
 8006eea:	2aff      	cmp	r2, #255	; 0xff
 8006eec:	d10e      	bne.n	8006f0c <SpiFlashStore::Init()+0xfc>
 8006eee:	789a      	ldrb	r2, [r3, #2]
 8006ef0:	2aff      	cmp	r2, #255	; 0xff
 8006ef2:	d10b      	bne.n	8006f0c <SpiFlashStore::Init()+0xfc>
 8006ef4:	78da      	ldrb	r2, [r3, #3]
 8006ef6:	2aff      	cmp	r2, #255	; 0xff
 8006ef8:	d108      	bne.n	8006f0c <SpiFlashStore::Init()+0xfc>
 8006efa:	46a9      	mov	r9, r5
 8006efc:	f804 8000 	strb.w	r8, [r4, r0]
 8006f00:	f883 8001 	strb.w	r8, [r3, #1]
 8006f04:	f883 8002 	strb.w	r8, [r3, #2]
 8006f08:	f883 8003 	strb.w	r8, [r3, #3]
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	2e1c      	cmp	r6, #28
 8006f10:	d1e2      	bne.n	8006ed8 <SpiFlashStore::Init()+0xc8>
 8006f12:	f1b9 0f00 	cmp.w	r9, #0
 8006f16:	d0d6      	beq.n	8006ec6 <SpiFlashStore::Init()+0xb6>
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <SpiFlashStore::Init()+0x130>)
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e7d2      	b.n	8006ec6 <SpiFlashStore::Init()+0xb6>
 8006f20:	f804 9002 	strb.w	r9, [r4, r2]
 8006f24:	3201      	adds	r2, #1
 8006f26:	e7c6      	b.n	8006eb6 <SpiFlashStore::Init()+0xa6>
 8006f28:	2500      	movs	r5, #0
 8006f2a:	e7cc      	b.n	8006ec6 <SpiFlashStore::Init()+0xb6>
 8006f2c:	200016c8 	andcs	r1, r0, r8, asr #13
 8006f30:	2000169c 	mulcs	r0, ip, r6
 8006f34:	2000069c 	mulcs	r0, ip, r6
 8006f38:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 8006f3c:	0800afb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, pc}
 8006f40:	200016a8 	andcs	r1, r0, r8, lsr #13

08006f44 <SpiFlashStore::SpiFlashStore()>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <SpiFlashStore::SpiFlashStore()+0x38>)
 8006f48:	4604      	mov	r4, r0
 8006f4a:	6018      	str	r0, [r3, #0]
 8006f4c:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <SpiFlashStore::SpiFlashStore()+0x3c>)
 8006f4e:	4d0d      	ldr	r5, [pc, #52]	; (8006f84 <SpiFlashStore::SpiFlashStore()+0x40>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b113      	cbz	r3, 8006f5c <SpiFlashStore::SpiFlashStore()+0x18>
 8006f56:	f7ff ff5b 	bl	8006e10 <SpiFlashStore::Init()>
 8006f5a:	7028      	strb	r0, [r5, #0]
 8006f5c:	782b      	ldrb	r3, [r5, #0]
 8006f5e:	b153      	cbz	r3, 8006f76 <SpiFlashStore::SpiFlashStore()+0x32>
 8006f60:	2320      	movs	r3, #32
 8006f62:	2200      	movs	r2, #0
 8006f64:	4908      	ldr	r1, [pc, #32]	; (8006f88 <SpiFlashStore::SpiFlashStore()+0x44>)
 8006f66:	f851 0b04 	ldr.w	r0, [r1], #4
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	2a1c      	cmp	r2, #28
 8006f6e:	4403      	add	r3, r0
 8006f70:	d1f9      	bne.n	8006f66 <SpiFlashStore::SpiFlashStore()+0x22>
 8006f72:	4a06      	ldr	r2, [pc, #24]	; (8006f8c <SpiFlashStore::SpiFlashStore()+0x48>)
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4620      	mov	r0, r4
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200016ac 	andcs	r1, r0, ip, lsr #13
 8006f80:	200016c8 	andcs	r1, r0, r8, asr #13
 8006f84:	200016a0 	andcs	r1, r0, r0, lsr #13
 8006f88:	0800afb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, sp, pc}
 8006f8c:	200016a4 	andcs	r1, r0, r4, lsr #13

08006f90 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 8006f90:	b508      	push	{r3, lr}
 8006f92:	f7ff ff2f 	bl	8006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006f96:	2300      	movs	r3, #0
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8006f9a:	1842      	adds	r2, r0, r1
 8006f9c:	540b      	strb	r3, [r1, r0]
 8006f9e:	7053      	strb	r3, [r2, #1]
 8006fa0:	7093      	strb	r3, [r2, #2]
 8006fa2:	70d3      	strb	r3, [r2, #3]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	bd08      	pop	{r3, pc}
 8006fac:	2000069c 	mulcs	r0, ip, r6
 8006fb0:	200016a8 	andcs	r1, r0, r8, lsr #13

08006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8006fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	461c      	mov	r4, r3
 8006fba:	4b19      	ldr	r3, [pc, #100]	; (8007020 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8006fbc:	4615      	mov	r5, r2
 8006fbe:	781f      	ldrb	r7, [r3, #0]
 8006fc0:	9e07      	ldr	r6, [sp, #28]
 8006fc2:	b307      	cbz	r7, 8007006 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006fc4:	f7ff ff16 	bl	8006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8006fce:	1941      	adds	r1, r0, r5
 8006fd0:	1e63      	subs	r3, r4, #1
 8006fd2:	9c06      	ldr	r4, [sp, #24]
 8006fd4:	4411      	add	r1, r2
 8006fd6:	440c      	add	r4, r1
 8006fd8:	42a1      	cmp	r1, r4
 8006fda:	d116      	bne.n	800700a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8006fdc:	f1bc 0f00 	cmp.w	ip, #0
 8006fe0:	d011      	beq.n	8007006 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8006fe4:	6819      	ldr	r1, [r3, #0]
 8006fe6:	b109      	cbz	r1, 8006fec <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 8006fe8:	2906      	cmp	r1, #6
 8006fea:	d101      	bne.n	8006ff0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8006fec:	2101      	movs	r1, #1
 8006fee:	6019      	str	r1, [r3, #0]
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	; (800702c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8006ff2:	6819      	ldr	r1, [r3, #0]
 8006ff4:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 8006ff6:	6019      	str	r1, [r3, #0]
 8006ff8:	b12d      	cbz	r5, 8007006 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006ffa:	b126      	cbz	r6, 8007006 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8006ffc:	9b08      	ldr	r3, [sp, #32]
 8006ffe:	4418      	add	r0, r3
 8007000:	5813      	ldr	r3, [r2, r0]
 8007002:	4333      	orrs	r3, r6
 8007004:	5013      	str	r3, [r2, r0]
 8007006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700a:	f891 8000 	ldrb.w	r8, [r1]
 800700e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8007012:	3101      	adds	r1, #1
 8007014:	45f0      	cmp	r8, lr
 8007016:	bf1c      	itt	ne
 8007018:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800701c:	46bc      	movne	ip, r7
 800701e:	e7db      	b.n	8006fd8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8007020:	200016a0 	andcs	r1, r0, r0, lsr #13
 8007024:	2000069c 	mulcs	r0, ip, r6
 8007028:	200016a8 	andcs	r1, r0, r8, lsr #13
 800702c:	20001814 	andcs	r1, r0, r4, lsl r8
 8007030:	20000698 	mulcs	r0, r8, r6

08007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 8007034:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007038:	461d      	mov	r5, r3
 800703a:	4b11      	ldr	r3, [pc, #68]	; (8007080 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800703c:	4607      	mov	r7, r0
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4614      	mov	r4, r2
 8007042:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8007046:	b1c3      	cbz	r3, 800707a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8007048:	f7ff fed4 	bl	8006df4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800704c:	4a0d      	ldr	r2, [pc, #52]	; (8007084 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800704e:	eb00 0608 	add.w	r6, r0, r8
 8007052:	5990      	ldr	r0, [r2, r6]
 8007054:	18b3      	adds	r3, r6, r2
 8007056:	b140      	cbz	r0, 800706a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 8007058:	3c01      	subs	r4, #1
 800705a:	441d      	add	r5, r3
 800705c:	429d      	cmp	r5, r3
 800705e:	d00c      	beq.n	800707a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 8007060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007064:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007068:	e7f8      	b.n	800705c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800706a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800706e:	4623      	mov	r3, r4
 8007070:	4642      	mov	r2, r8
 8007072:	4638      	mov	r0, r7
 8007074:	9500      	str	r5, [sp, #0]
 8007076:	f7ff ff9d 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800707a:	b004      	add	sp, #16
 800707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007080:	200016a0 	andcs	r1, r0, r0, lsr #13
 8007084:	2000069c 	mulcs	r0, ip, r6

08007088 <SpiFlashStore::Flash()>:
 8007088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800708a:	4c25      	ldr	r4, [pc, #148]	; (8007120 <SpiFlashStore::Flash()+0x98>)
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	2800      	cmp	r0, #0
 8007090:	d043      	beq.n	800711a <SpiFlashStore::Flash()+0x92>
 8007092:	3801      	subs	r0, #1
 8007094:	2805      	cmp	r0, #5
 8007096:	d831      	bhi.n	80070fc <SpiFlashStore::Flash()+0x74>
 8007098:	e8df f000 	tbb	[pc, r0]
 800709c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 80070a0:	4b203025 	blmi	881313c <__exidx_end+0x807b6c>
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b20      	ldr	r3, [pc, #128]	; (8007128 <SpiFlashStore::Flash()+0xa0>)
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	2302      	movs	r3, #2
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	2001      	movs	r0, #1
 80070b0:	e033      	b.n	800711a <SpiFlashStore::Flash()+0x92>
 80070b2:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <SpiFlashStore::Flash()+0x9c>)
 80070b4:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <SpiFlashStore::Flash()+0xa0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	2b63      	cmp	r3, #99	; 0x63
 80070be:	d9f6      	bls.n	80070ae <SpiFlashStore::Flash()+0x26>
 80070c0:	2303      	movs	r3, #3
 80070c2:	e7f3      	b.n	80070ac <SpiFlashStore::Flash()+0x24>
 80070c4:	4919      	ldr	r1, [pc, #100]	; (800712c <SpiFlashStore::Flash()+0xa4>)
 80070c6:	481a      	ldr	r0, [pc, #104]	; (8007130 <SpiFlashStore::Flash()+0xa8>)
 80070c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070cc:	6809      	ldr	r1, [r1, #0]
 80070ce:	6800      	ldr	r0, [r0, #0]
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	f000 fa3d 	bl	8007550 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d0e9      	beq.n	80070ae <SpiFlashStore::Flash()+0x26>
 80070da:	4b12      	ldr	r3, [pc, #72]	; (8007124 <SpiFlashStore::Flash()+0x9c>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <SpiFlashStore::Flash()+0xa0>)
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	2305      	movs	r3, #5
 80070e4:	e7e2      	b.n	80070ac <SpiFlashStore::Flash()+0x24>
 80070e6:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <SpiFlashStore::Flash()+0x9c>)
 80070e8:	4a0f      	ldr	r2, [pc, #60]	; (8007128 <SpiFlashStore::Flash()+0xa0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6812      	ldr	r2, [r2, #0]
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	2b63      	cmp	r3, #99	; 0x63
 80070f2:	d9dc      	bls.n	80070ae <SpiFlashStore::Flash()+0x26>
 80070f4:	2304      	movs	r3, #4
 80070f6:	e7d9      	b.n	80070ac <SpiFlashStore::Flash()+0x24>
 80070f8:	2306      	movs	r3, #6
 80070fa:	e7d7      	b.n	80070ac <SpiFlashStore::Flash()+0x24>
 80070fc:	ab03      	add	r3, sp, #12
 80070fe:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <SpiFlashStore::Flash()+0xac>)
 8007100:	490a      	ldr	r1, [pc, #40]	; (800712c <SpiFlashStore::Flash()+0xa4>)
 8007102:	480b      	ldr	r0, [pc, #44]	; (8007130 <SpiFlashStore::Flash()+0xa8>)
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <SpiFlashStore::Flash()+0xb0>)
 800710a:	6809      	ldr	r1, [r1, #0]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f000 fabf 	bl	8007690 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 8007112:	2800      	cmp	r0, #0
 8007114:	d0cb      	beq.n	80070ae <SpiFlashStore::Flash()+0x26>
 8007116:	2000      	movs	r0, #0
 8007118:	6020      	str	r0, [r4, #0]
 800711a:	b004      	add	sp, #16
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	200016a8 	andcs	r1, r0, r8, lsr #13
 8007124:	20001814 	andcs	r1, r0, r4, lsl r8
 8007128:	20000698 	mulcs	r0, r8, r6
 800712c:	2000169c 	mulcs	r0, ip, r6
 8007130:	200016c8 	andcs	r1, r0, r8, asr #13
 8007134:	200016a4 	andcs	r1, r0, r4, lsr #13
 8007138:	2000069c 	mulcs	r0, ip, r6

0800713c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800713c:	4770      	bx	lr
	...

08007140 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8007140:	2300      	movs	r3, #0
 8007142:	b507      	push	{r0, r1, r2, lr}
 8007144:	4805      	ldr	r0, [pc, #20]	; (800715c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	460a      	mov	r2, r1
 800714a:	2322      	movs	r3, #34	; 0x22
 800714c:	210f      	movs	r1, #15
 800714e:	6800      	ldr	r0, [r0, #0]
 8007150:	f7ff ff70 	bl	8007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8007154:	b003      	add	sp, #12
 8007156:	f85d fb04 	ldr.w	pc, [sp], #4
 800715a:	bf00      	nop
 800715c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007160 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8007160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007162:	2200      	movs	r2, #0
 8007164:	460b      	mov	r3, r1
 8007166:	2122      	movs	r1, #34	; 0x22
 8007168:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800716e:	9100      	str	r1, [sp, #0]
 8007170:	6800      	ldr	r0, [r0, #0]
 8007172:	210f      	movs	r1, #15
 8007174:	f7ff ff1e 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007178:	b005      	add	sp, #20
 800717a:	f85d fb04 	ldr.w	pc, [sp], #4
 800717e:	bf00      	nop
 8007180:	200016ac 	andcs	r1, r0, ip, lsr #13

08007184 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f001 f975 	bl	8008476 <operator delete(void*)>
 800718c:	4620      	mov	r0, r4
 800718e:	bd10      	pop	{r4, pc}

08007190 <StoreDisplayUdf::StoreDisplayUdf()>:
 8007190:	4a02      	ldr	r2, [pc, #8]	; (800719c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8007192:	6002      	str	r2, [r0, #0]
 8007194:	4a02      	ldr	r2, [pc, #8]	; (80071a0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8007196:	6010      	str	r0, [r2, #0]
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	0800b028 	stmdaeq	r0, {r3, r5, ip, sp, pc}
 80071a0:	200016b4 			; <UNDEFINED> instruction: 0x200016b4

080071a4 <StoreRDMDevice::~StoreRDMDevice()>:
 80071a4:	4770      	bx	lr

080071a6 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80071a6:	3804      	subs	r0, #4
 80071a8:	4770      	bx	lr
	...

080071ac <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 80071ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071ae:	2200      	movs	r2, #0
 80071b0:	460b      	mov	r3, r1
 80071b2:	2129      	movs	r1, #41	; 0x29
 80071b4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80071b8:	4804      	ldr	r0, [pc, #16]	; (80071cc <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 80071ba:	9100      	str	r1, [sp, #0]
 80071bc:	6800      	ldr	r0, [r0, #0]
 80071be:	210b      	movs	r1, #11
 80071c0:	f7ff fef8 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80071c4:	b005      	add	sp, #20
 80071c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ca:	bf00      	nop
 80071cc:	200016ac 	andcs	r1, r0, ip, lsr #13

080071d0 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	2401      	movs	r4, #1
 80071d4:	2600      	movs	r6, #0
 80071d6:	4d0c      	ldr	r5, [pc, #48]	; (8007208 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 80071d8:	b086      	sub	sp, #24
 80071da:	460b      	mov	r3, r1
 80071dc:	6828      	ldr	r0, [r5, #0]
 80071de:	f88d 2017 	strb.w	r2, [sp, #23]
 80071e2:	9200      	str	r2, [sp, #0]
 80071e4:	210b      	movs	r1, #11
 80071e6:	2204      	movs	r2, #4
 80071e8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80071ec:	f7ff fee2 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80071f0:	2224      	movs	r2, #36	; 0x24
 80071f2:	210b      	movs	r1, #11
 80071f4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80071f8:	6828      	ldr	r0, [r5, #0]
 80071fa:	9400      	str	r4, [sp, #0]
 80071fc:	f10d 0317 	add.w	r3, sp, #23
 8007200:	f7ff fed8 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007204:	b006      	add	sp, #24
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	200016ac 	andcs	r1, r0, ip, lsr #13

0800720c <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800720c:	f1a0 0004 	sub.w	r0, r0, #4
 8007210:	e7de      	b.n	80071d0 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8007212:	bf00      	nop

08007214 <StoreRDMDevice::~StoreRDMDevice()>:
 8007214:	b510      	push	{r4, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	f001 f92d 	bl	8008476 <operator delete(void*)>
 800721c:	4620      	mov	r0, r4
 800721e:	bd10      	pop	{r4, pc}

08007220 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8007220:	f1a0 0004 	sub.w	r0, r0, #4
 8007224:	e7f6      	b.n	8007214 <StoreRDMDevice::~StoreRDMDevice()>
	...

08007228 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 8007228:	2300      	movs	r3, #0
 800722a:	b507      	push	{r0, r1, r2, lr}
 800722c:	4805      	ldr	r0, [pc, #20]	; (8007244 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	460a      	mov	r2, r1
 8007232:	2329      	movs	r3, #41	; 0x29
 8007234:	210b      	movs	r1, #11
 8007236:	6800      	ldr	r0, [r0, #0]
 8007238:	f7ff fefc 	bl	8007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800723c:	b003      	add	sp, #12
 800723e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007242:	bf00      	nop
 8007244:	200016ac 	andcs	r1, r0, ip, lsr #13

08007248 <StoreRDMDevice::StoreRDMDevice()>:
 8007248:	4a03      	ldr	r2, [pc, #12]	; (8007258 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800724a:	6002      	str	r2, [r0, #0]
 800724c:	321c      	adds	r2, #28
 800724e:	6042      	str	r2, [r0, #4]
 8007250:	4a02      	ldr	r2, [pc, #8]	; (800725c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8007252:	6010      	str	r0, [r2, #0]
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	0800b040 	stmdaeq	r0, {r6, ip, sp, pc}
 800725c:	200016b8 			; <UNDEFINED> instruction: 0x200016b8

08007260 <StoreRDMSensors::~StoreRDMSensors()>:
 8007260:	4770      	bx	lr
	...

08007264 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
 8007264:	2300      	movs	r3, #0
 8007266:	b507      	push	{r0, r1, r2, lr}
 8007268:	4805      	ldr	r0, [pc, #20]	; (8007280 <StoreRDMSensors::Copy(TRDMSensorsParams*)+0x1c>)
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	460a      	mov	r2, r1
 800726e:	2334      	movs	r3, #52	; 0x34
 8007270:	2117      	movs	r1, #23
 8007272:	6800      	ldr	r0, [r0, #0]
 8007274:	f7ff fede 	bl	8007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8007278:	b003      	add	sp, #12
 800727a:	f85d fb04 	ldr.w	pc, [sp], #4
 800727e:	bf00      	nop
 8007280:	200016ac 	andcs	r1, r0, ip, lsr #13

08007284 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
 8007284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007286:	2200      	movs	r2, #0
 8007288:	460b      	mov	r3, r1
 800728a:	2134      	movs	r1, #52	; 0x34
 800728c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007290:	4804      	ldr	r0, [pc, #16]	; (80072a4 <StoreRDMSensors::Update(TRDMSensorsParams const*)+0x20>)
 8007292:	9100      	str	r1, [sp, #0]
 8007294:	6800      	ldr	r0, [r0, #0]
 8007296:	2117      	movs	r1, #23
 8007298:	f7ff fe8c 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800729c:	b005      	add	sp, #20
 800729e:	f85d fb04 	ldr.w	pc, [sp], #4
 80072a2:	bf00      	nop
 80072a4:	200016ac 	andcs	r1, r0, ip, lsr #13

080072a8 <StoreRDMSensors::~StoreRDMSensors()>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	4604      	mov	r4, r0
 80072ac:	f001 f8e3 	bl	8008476 <operator delete(void*)>
 80072b0:	4620      	mov	r0, r4
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <StoreRDMSensors::StoreRDMSensors()>:
 80072b4:	4a02      	ldr	r2, [pc, #8]	; (80072c0 <StoreRDMSensors::StoreRDMSensors()+0xc>)
 80072b6:	6002      	str	r2, [r0, #0]
 80072b8:	4a02      	ldr	r2, [pc, #8]	; (80072c4 <StoreRDMSensors::StoreRDMSensors()+0x10>)
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	0800b070 	stmdaeq	r0, {r4, r5, r6, ip, sp, pc}
 80072c4:	200016bc 			; <UNDEFINED> instruction: 0x200016bc

080072c8 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 80072c8:	4770      	bx	lr
	...

080072cc <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)>:
 80072cc:	2300      	movs	r3, #0
 80072ce:	b507      	push	{r0, r1, r2, lr}
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <StoreRDMSubDevices::Copy(TRDMSubDevicesParams*)+0x1c>)
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	460a      	mov	r2, r1
 80072d6:	234c      	movs	r3, #76	; 0x4c
 80072d8:	2118      	movs	r1, #24
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	f7ff feaa 	bl	8007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80072e0:	b003      	add	sp, #12
 80072e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072e6:	bf00      	nop
 80072e8:	200016ac 	andcs	r1, r0, ip, lsr #13

080072ec <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)>:
 80072ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072ee:	2200      	movs	r2, #0
 80072f0:	460b      	mov	r3, r1
 80072f2:	214c      	movs	r1, #76	; 0x4c
 80072f4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80072f8:	4804      	ldr	r0, [pc, #16]	; (800730c <StoreRDMSubDevices::Update(TRDMSubDevicesParams const*)+0x20>)
 80072fa:	9100      	str	r1, [sp, #0]
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	2118      	movs	r1, #24
 8007300:	f7ff fe58 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007304:	b005      	add	sp, #20
 8007306:	f85d fb04 	ldr.w	pc, [sp], #4
 800730a:	bf00      	nop
 800730c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007310 <StoreRDMSubDevices::~StoreRDMSubDevices()>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	f001 f8af 	bl	8008476 <operator delete(void*)>
 8007318:	4620      	mov	r0, r4
 800731a:	bd10      	pop	{r4, pc}

0800731c <StoreRDMSubDevices::StoreRDMSubDevices()>:
 800731c:	4a02      	ldr	r2, [pc, #8]	; (8007328 <StoreRDMSubDevices::StoreRDMSubDevices()+0xc>)
 800731e:	6002      	str	r2, [r0, #0]
 8007320:	4a02      	ldr	r2, [pc, #8]	; (800732c <StoreRDMSubDevices::StoreRDMSubDevices()+0x10>)
 8007322:	6010      	str	r0, [r2, #0]
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	0800b088 	stmdaeq	r0, {r3, r7, ip, sp, pc}
 800732c:	200016c0 	andcs	r1, r0, r0, asr #13

08007330 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8007330:	4770      	bx	lr

08007332 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8007332:	3804      	subs	r0, #4
 8007334:	4770      	bx	lr
	...

08007338 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 8007338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800733a:	2200      	movs	r2, #0
 800733c:	460b      	mov	r3, r1
 800733e:	2127      	movs	r1, #39	; 0x27
 8007340:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 8007346:	9100      	str	r1, [sp, #0]
 8007348:	6800      	ldr	r0, [r0, #0]
 800734a:	2103      	movs	r1, #3
 800734c:	f7ff fe32 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007350:	b005      	add	sp, #20
 8007352:	f85d fb04 	ldr.w	pc, [sp], #4
 8007356:	bf00      	nop
 8007358:	200016ac 	andcs	r1, r0, ip, lsr #13

0800735c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800735c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800735e:	2304      	movs	r3, #4
 8007360:	2200      	movs	r2, #0
 8007362:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007366:	2302      	movs	r3, #2
 8007368:	4806      	ldr	r0, [pc, #24]	; (8007384 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007370:	2207      	movs	r2, #7
 8007372:	2103      	movs	r1, #3
 8007374:	6800      	ldr	r0, [r0, #0]
 8007376:	f10d 0316 	add.w	r3, sp, #22
 800737a:	f7ff fe1b 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800737e:	b007      	add	sp, #28
 8007380:	f85d fb04 	ldr.w	pc, [sp], #4
 8007384:	200016ac 	andcs	r1, r0, ip, lsr #13

08007388 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8007388:	f1a0 0004 	sub.w	r0, r0, #4
 800738c:	e7e6      	b.n	800735c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800738e:	bf00      	nop

08007390 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8007390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007392:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007396:	2200      	movs	r2, #0
 8007398:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800739c:	2301      	movs	r3, #1
 800739e:	4807      	ldr	r0, [pc, #28]	; (80073bc <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f88d 1017 	strb.w	r1, [sp, #23]
 80073a6:	2226      	movs	r2, #38	; 0x26
 80073a8:	2103      	movs	r1, #3
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	f10d 0317 	add.w	r3, sp, #23
 80073b0:	f7ff fe00 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073b4:	b007      	add	sp, #28
 80073b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80073ba:	bf00      	nop
 80073bc:	200016ac 	andcs	r1, r0, ip, lsr #13

080073c0 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 80073c0:	f1a0 0004 	sub.w	r0, r0, #4
 80073c4:	e7e4      	b.n	8007390 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 80073c6:	bf00      	nop

080073c8 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 80073c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ce:	2200      	movs	r2, #0
 80073d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80073d4:	2301      	movs	r3, #1
 80073d6:	4807      	ldr	r0, [pc, #28]	; (80073f4 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	f88d 1017 	strb.w	r1, [sp, #23]
 80073de:	2213      	movs	r2, #19
 80073e0:	2103      	movs	r1, #3
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	f10d 0317 	add.w	r3, sp, #23
 80073e8:	f7ff fde4 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80073ec:	b007      	add	sp, #28
 80073ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80073f2:	bf00      	nop
 80073f4:	200016ac 	andcs	r1, r0, ip, lsr #13

080073f8 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 80073f8:	f1a0 0004 	sub.w	r0, r0, #4
 80073fc:	e7e4      	b.n	80073c8 <StoreWS28xxDmx::SaveMap(unsigned char)>
 80073fe:	bf00      	nop

08007400 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8007400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007406:	2200      	movs	r2, #0
 8007408:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800740c:	2302      	movs	r3, #2
 800740e:	4807      	ldr	r0, [pc, #28]	; (800742c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007416:	2211      	movs	r2, #17
 8007418:	2103      	movs	r1, #3
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	f10d 0316 	add.w	r3, sp, #22
 8007420:	f7ff fdc8 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007424:	b007      	add	sp, #28
 8007426:	f85d fb04 	ldr.w	pc, [sp], #4
 800742a:	bf00      	nop
 800742c:	200016ac 	andcs	r1, r0, ip, lsr #13

08007430 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8007430:	f1a0 0004 	sub.w	r0, r0, #4
 8007434:	e7e4      	b.n	8007400 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8007436:	bf00      	nop

08007438 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8007438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800743a:	2302      	movs	r3, #2
 800743c:	2200      	movs	r2, #0
 800743e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007442:	4807      	ldr	r0, [pc, #28]	; (8007460 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	f8ad 1016 	strh.w	r1, [sp, #22]
 800744a:	2205      	movs	r2, #5
 800744c:	2103      	movs	r1, #3
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	f10d 0316 	add.w	r3, sp, #22
 8007454:	f7ff fdae 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8007458:	b007      	add	sp, #28
 800745a:	f85d fb04 	ldr.w	pc, [sp], #4
 800745e:	bf00      	nop
 8007460:	200016ac 	andcs	r1, r0, ip, lsr #13

08007464 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8007464:	f1a0 0004 	sub.w	r0, r0, #4
 8007468:	e7e6      	b.n	8007438 <StoreWS28xxDmx::SaveCount(unsigned short)>
 800746a:	bf00      	nop

0800746c <StoreWS28xxDmx::SaveType(unsigned char)>:
 800746c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800746e:	2301      	movs	r3, #1
 8007470:	2200      	movs	r2, #0
 8007472:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007476:	4807      	ldr	r0, [pc, #28]	; (8007494 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	f88d 1017 	strb.w	r1, [sp, #23]
 800747e:	2204      	movs	r2, #4
 8007480:	2103      	movs	r1, #3
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	f10d 0317 	add.w	r3, sp, #23
 8007488:	f7ff fd94 	bl	8006fb4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800748c:	b007      	add	sp, #28
 800748e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007492:	bf00      	nop
 8007494:	200016ac 	andcs	r1, r0, ip, lsr #13

08007498 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8007498:	f1a0 0004 	sub.w	r0, r0, #4
 800749c:	e7e6      	b.n	800746c <StoreWS28xxDmx::SaveType(unsigned char)>
 800749e:	bf00      	nop

080074a0 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	4604      	mov	r4, r0
 80074a4:	f000 ffe7 	bl	8008476 <operator delete(void*)>
 80074a8:	4620      	mov	r0, r4
 80074aa:	bd10      	pop	{r4, pc}

080074ac <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 80074ac:	f1a0 0004 	sub.w	r0, r0, #4
 80074b0:	e7f6      	b.n	80074a0 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

080074b4 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 80074b4:	2300      	movs	r3, #0
 80074b6:	b507      	push	{r0, r1, r2, lr}
 80074b8:	4805      	ldr	r0, [pc, #20]	; (80074d0 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	460a      	mov	r2, r1
 80074be:	2327      	movs	r3, #39	; 0x27
 80074c0:	2103      	movs	r1, #3
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	f7ff fdb6 	bl	8007034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80074c8:	b003      	add	sp, #12
 80074ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ce:	bf00      	nop
 80074d0:	200016ac 	andcs	r1, r0, ip, lsr #13

080074d4 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 80074d4:	4a03      	ldr	r2, [pc, #12]	; (80074e4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 80074d6:	6002      	str	r2, [r0, #0]
 80074d8:	3230      	adds	r2, #48	; 0x30
 80074da:	6042      	str	r2, [r0, #4]
 80074dc:	4a02      	ldr	r2, [pc, #8]	; (80074e8 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 80074de:	6010      	str	r0, [r2, #0]
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	0800b0a0 	stmdaeq	r0, {r5, r7, ip, sp, pc}
 80074e8:	200016c4 	andcs	r1, r0, r4, asr #13

080074ec <FlashRom::FlashRom()>:
 80074ec:	4b07      	ldr	r3, [pc, #28]	; (800750c <FlashRom::FlashRom()+0x20>)
 80074ee:	b510      	push	{r4, lr}
 80074f0:	6018      	str	r0, [r3, #0]
 80074f2:	2301      	movs	r3, #1
 80074f4:	4604      	mov	r4, r0
 80074f6:	7003      	strb	r3, [r0, #0]
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <FlashRom::FlashRom()+0x24>)
 80074fa:	4906      	ldr	r1, [pc, #24]	; (8007514 <FlashRom::FlashRom()+0x28>)
 80074fc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8007500:	4805      	ldr	r0, [pc, #20]	; (8007518 <FlashRom::FlashRom()+0x2c>)
 8007502:	029a      	lsls	r2, r3, #10
 8007504:	f7fa fda4 	bl	8002050 <printf>
 8007508:	4620      	mov	r0, r4
 800750a:	bd10      	pop	{r4, pc}
 800750c:	200016c8 	andcs	r1, r0, r8, asr #13
 8007510:	1ffff700 	svcne	0x00fff700
 8007514:	0800a308 	stmdaeq	r0, {r3, r8, r9, sp, pc}
 8007518:	0800b0f0 	stmdaeq	r0, {r4, r5, r6, r7, ip, sp, pc}

0800751c <FlashRom::GetSize() const>:
 800751c:	4b02      	ldr	r3, [pc, #8]	; (8007528 <FlashRom::GetSize() const+0xc>)
 800751e:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8007522:	0280      	lsls	r0, r0, #10
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	1ffff700 	svcne	0x00fff700

0800752c <FlashRom::GetSectorSize() const>:
 800752c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007530:	4770      	bx	lr

08007532 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8007532:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007536:	441a      	add	r2, r3
 8007538:	4293      	cmp	r3, r2
 800753a:	d104      	bne.n	8007546 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800753c:	2200      	movs	r2, #0
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	2001      	movs	r0, #1
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	4770      	bx	lr
 8007546:	f851 0b04 	ldr.w	r0, [r1], #4
 800754a:	f843 0b04 	str.w	r0, [r3], #4
 800754e:	e7f3      	b.n	8007538 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08007550 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8007550:	2000      	movs	r0, #0
 8007552:	b538      	push	{r3, r4, r5, lr}
 8007554:	4c47      	ldr	r4, [pc, #284]	; (8007674 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8007556:	6018      	str	r0, [r3, #0]
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	2b04      	cmp	r3, #4
 800755c:	f200 8082 	bhi.w	8007664 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8007560:	e8df f003 	tbb	[pc, r3]
 8007564:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8007568:	4b430080 	blmi	90c7770 <__exidx_end+0x10bc1a0>
 800756c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8007570:	6019      	str	r1, [r3, #0]
 8007572:	4b42      	ldr	r3, [pc, #264]	; (800767c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	4b42      	ldr	r3, [pc, #264]	; (8007680 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8007578:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800757c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007580:	4b40      	ldr	r3, [pc, #256]	; (8007684 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8007582:	d807      	bhi.n	8007594 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	f001 facc 	bl	8008b24 <fmc_bank0_unlock>
 800758c:	2301      	movs	r3, #1
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	2000      	movs	r0, #0
 8007592:	e026      	b.n	80075e2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8007594:	4a3c      	ldr	r2, [pc, #240]	; (8007688 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8007596:	4291      	cmp	r1, r2
 8007598:	d3f4      	bcc.n	8007584 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	f001 facf 	bl	8008b40 <fmc_bank1_unlock>
 80075a2:	e7f3      	b.n	800758c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 80075a4:	4d37      	ldr	r5, [pc, #220]	; (8007684 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 80075a6:	782b      	ldrb	r3, [r5, #0]
 80075a8:	b15b      	cbz	r3, 80075c2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 80075aa:	f001 fae7 	bl	8008b7c <fmc_bank0_state_get>
 80075ae:	2801      	cmp	r0, #1
 80075b0:	d0ee      	beq.n	8007590 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 80075b2:	7829      	ldrb	r1, [r5, #0]
 80075b4:	4b35      	ldr	r3, [pc, #212]	; (800768c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80075b6:	b939      	cbnz	r1, 80075c8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 80075b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075ba:	f022 0202 	bic.w	r2, r2, #2
 80075be:	651a      	str	r2, [r3, #80]	; 0x50
 80075c0:	e006      	b.n	80075d0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 80075c2:	f001 faed 	bl	8008ba0 <fmc_bank1_state_get>
 80075c6:	e7f2      	b.n	80075ae <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	f022 0202 	bic.w	r2, r2, #2
 80075ce:	611a      	str	r2, [r3, #16]
 80075d0:	4b2a      	ldr	r3, [pc, #168]	; (800767c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	b94b      	cbnz	r3, 80075ea <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 80075d6:	b129      	cbz	r1, 80075e4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 80075d8:	f001 fac0 	bl	8008b5c <fmc_bank0_lock>
 80075dc:	2300      	movs	r3, #0
 80075de:	2001      	movs	r0, #1
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	f001 fac2 	bl	8008b6c <fmc_bank1_lock>
 80075e8:	e7f8      	b.n	80075dc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e7cf      	b.n	800758e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 80075ee:	4923      	ldr	r1, [pc, #140]	; (800767c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 80075f0:	680b      	ldr	r3, [r1, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ca      	beq.n	800758c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 80075f6:	4b23      	ldr	r3, [pc, #140]	; (8007684 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 80075f8:	4a1f      	ldr	r2, [pc, #124]	; (8007678 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 80075fa:	7818      	ldrb	r0, [r3, #0]
 80075fc:	4b23      	ldr	r3, [pc, #140]	; (800768c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 80075fe:	b190      	cbz	r0, 8007626 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f040 0002 	orr.w	r0, r0, #2
 8007606:	6118      	str	r0, [r3, #16]
 8007608:	6810      	ldr	r0, [r2, #0]
 800760a:	6158      	str	r0, [r3, #20]
 800760c:	6918      	ldr	r0, [r3, #16]
 800760e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8007612:	6118      	str	r0, [r3, #16]
 8007614:	680b      	ldr	r3, [r1, #0]
 8007616:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	6813      	ldr	r3, [r2, #0]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e7b2      	b.n	800758c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8007626:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007628:	f040 0002 	orr.w	r0, r0, #2
 800762c:	6518      	str	r0, [r3, #80]	; 0x50
 800762e:	6810      	ldr	r0, [r2, #0]
 8007630:	6558      	str	r0, [r3, #84]	; 0x54
 8007632:	69dd      	ldr	r5, [r3, #28]
 8007634:	07ad      	lsls	r5, r5, #30
 8007636:	bf48      	it	mi
 8007638:	6158      	strmi	r0, [r3, #20]
 800763a:	4814      	ldr	r0, [pc, #80]	; (800768c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800763c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800763e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007642:	6503      	str	r3, [r0, #80]	; 0x50
 8007644:	680b      	ldr	r3, [r1, #0]
 8007646:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800764a:	600b      	str	r3, [r1, #0]
 800764c:	6813      	ldr	r3, [r2, #0]
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	e7e6      	b.n	8007622 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800765a:	b132      	cbz	r2, 800766a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	f022 0201 	bic.w	r2, r2, #1
 8007662:	611a      	str	r2, [r3, #16]
 8007664:	2000      	movs	r0, #0
 8007666:	6020      	str	r0, [r4, #0]
 8007668:	e7bb      	b.n	80075e2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800766a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	651a      	str	r2, [r3, #80]	; 0x50
 8007672:	e7f7      	b.n	8007664 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8007674:	200016d0 	ldrdcs	r1, [r0], -r0
 8007678:	200016d4 	ldrdcs	r1, [r0], -r4
 800767c:	200016e0 	andcs	r1, r0, r0, ror #13
 8007680:	1ffff700 	svcne	0x00fff700
 8007684:	200016dc 	ldrdcs	r1, [r0], -ip
 8007688:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800768c:	40022000 	andmi	r2, r2, r0

08007690 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	2400      	movs	r4, #0
 8007694:	9804      	ldr	r0, [sp, #16]
 8007696:	6004      	str	r4, [r0, #0]
 8007698:	4c48      	ldr	r4, [pc, #288]	; (80077bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	2804      	cmp	r0, #4
 800769e:	d848      	bhi.n	8007732 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 80076a0:	e8df f000 	tbb	[pc, r0]
 80076a4:	22847c03 	addcs	r7, r4, #768	; 0x300
 80076a8:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 80076ac:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80076b0:	6001      	str	r1, [r0, #0]
 80076b2:	4844      	ldr	r0, [pc, #272]	; (80077c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	4b44      	ldr	r3, [pc, #272]	; (80077c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	4b44      	ldr	r3, [pc, #272]	; (80077cc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 80076bc:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80076c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c4:	4b42      	ldr	r3, [pc, #264]	; (80077d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80076c6:	d807      	bhi.n	80076d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
 80076cc:	f001 fa2a 	bl	8008b24 <fmc_bank0_unlock>
 80076d0:	2303      	movs	r3, #3
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	2000      	movs	r0, #0
 80076d6:	e026      	b.n	8007726 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80076d8:	4a3e      	ldr	r2, [pc, #248]	; (80077d4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 80076da:	4291      	cmp	r1, r2
 80076dc:	d3f4      	bcc.n	80076c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	f001 fa2d 	bl	8008b40 <fmc_bank1_unlock>
 80076e6:	e7f3      	b.n	80076d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80076e8:	4d39      	ldr	r5, [pc, #228]	; (80077d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80076ea:	782b      	ldrb	r3, [r5, #0]
 80076ec:	b15b      	cbz	r3, 8007706 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 80076ee:	f001 fa45 	bl	8008b7c <fmc_bank0_state_get>
 80076f2:	2801      	cmp	r0, #1
 80076f4:	d0ee      	beq.n	80076d4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 80076f6:	7829      	ldrb	r1, [r5, #0]
 80076f8:	4b37      	ldr	r3, [pc, #220]	; (80077d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80076fa:	b939      	cbnz	r1, 800770c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 80076fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076fe:	f022 0201 	bic.w	r2, r2, #1
 8007702:	651a      	str	r2, [r3, #80]	; 0x50
 8007704:	e006      	b.n	8007714 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8007706:	f001 fa4b 	bl	8008ba0 <fmc_bank1_state_get>
 800770a:	e7f2      	b.n	80076f2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	f022 0201 	bic.w	r2, r2, #1
 8007712:	611a      	str	r2, [r3, #16]
 8007714:	4b2c      	ldr	r3, [pc, #176]	; (80077c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	b94b      	cbnz	r3, 800772e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800771a:	b129      	cbz	r1, 8007728 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800771c:	f001 fa1e 	bl	8008b5c <fmc_bank0_lock>
 8007720:	2300      	movs	r3, #0
 8007722:	2001      	movs	r0, #1
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	f001 fa20 	bl	8008b6c <fmc_bank1_lock>
 800772c:	e7f8      	b.n	8007720 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800772e:	2304      	movs	r3, #4
 8007730:	e7cf      	b.n	80076d2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8007732:	4a25      	ldr	r2, [pc, #148]	; (80077c8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8007734:	6813      	ldr	r3, [r2, #0]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d91a      	bls.n	8007770 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800773a:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8007740:	b189      	cbz	r1, 8007766 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8007742:	6919      	ldr	r1, [r3, #16]
 8007744:	f041 0101 	orr.w	r1, r1, #1
 8007748:	6119      	str	r1, [r3, #16]
 800774a:	4d1e      	ldr	r5, [pc, #120]	; (80077c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800774c:	481c      	ldr	r0, [pc, #112]	; (80077c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800774e:	6829      	ldr	r1, [r5, #0]
 8007750:	6803      	ldr	r3, [r0, #0]
 8007752:	f851 6b04 	ldr.w	r6, [r1], #4
 8007756:	f843 6b04 	str.w	r6, [r3], #4
 800775a:	6003      	str	r3, [r0, #0]
 800775c:	6813      	ldr	r3, [r2, #0]
 800775e:	6029      	str	r1, [r5, #0]
 8007760:	3b04      	subs	r3, #4
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e7b4      	b.n	80076d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8007766:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007768:	f041 0101 	orr.w	r1, r1, #1
 800776c:	6519      	str	r1, [r3, #80]	; 0x50
 800776e:	e7ec      	b.n	800774a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ad      	beq.n	80076d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8007774:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800777a:	b152      	cbz	r2, 8007792 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800777c:	691a      	ldr	r2, [r3, #16]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	611a      	str	r2, [r3, #16]
 8007784:	4a0f      	ldr	r2, [pc, #60]	; (80077c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6812      	ldr	r2, [r2, #0]
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e79e      	b.n	80076d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8007792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	651a      	str	r2, [r3, #80]	; 0x50
 800779a:	e7f3      	b.n	8007784 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800779c:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	4b0d      	ldr	r3, [pc, #52]	; (80077d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80077a2:	b132      	cbz	r2, 80077b2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	f022 0202 	bic.w	r2, r2, #2
 80077aa:	611a      	str	r2, [r3, #16]
 80077ac:	2000      	movs	r0, #0
 80077ae:	6020      	str	r0, [r4, #0]
 80077b0:	e7b9      	b.n	8007726 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80077b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077b4:	f022 0202 	bic.w	r2, r2, #2
 80077b8:	651a      	str	r2, [r3, #80]	; 0x50
 80077ba:	e7f7      	b.n	80077ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 80077bc:	200016d0 	ldrdcs	r1, [r0], -r0
 80077c0:	200016cc 	andcs	r1, r0, ip, asr #13
 80077c4:	200016d8 	ldrdcs	r1, [r0], -r8
 80077c8:	200016e0 	andcs	r1, r0, r0, ror #13
 80077cc:	1ffff700 	svcne	0x00fff700
 80077d0:	200016dc 	ldrdcs	r1, [r0], -ip
 80077d4:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80077d8:	40022000 	andmi	r2, r2, r0

080077dc <Network::Network()>:
 80077dc:	4b05      	ldr	r3, [pc, #20]	; (80077f4 <Network::Network()+0x18>)
 80077de:	4906      	ldr	r1, [pc, #24]	; (80077f8 <Network::Network()+0x1c>)
 80077e0:	6018      	str	r0, [r3, #0]
 80077e2:	1e42      	subs	r2, r0, #1
 80077e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e8:	f802 3f01 	strb.w	r3, [r2, #1]!
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f9      	bne.n	80077e4 <Network::Network()+0x8>
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	200016e4 	andcs	r1, r0, r4, ror #13
 80077f8:	0800b11e 	stmdaeq	r0, {r1, r2, r3, r4, r8, ip, sp, pc}

080077fc <Network::MacAddressCopyTo(unsigned char*)>:
 80077fc:	4608      	mov	r0, r1
 80077fe:	f001 b83b 	b.w	8008878 <mac_address_get>

08007802 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8007802:	b430      	push	{r4, r5}
 8007804:	b168      	cbz	r0, 8007822 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8007806:	2300      	movs	r3, #0
 8007808:	7905      	ldrb	r5, [r0, #4]
 800780a:	5cd4      	ldrb	r4, [r2, r3]
 800780c:	b11c      	cbz	r4, 8007816 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 800780e:	1c5c      	adds	r4, r3, #1
 8007810:	429d      	cmp	r5, r3
 8007812:	4623      	mov	r3, r4
 8007814:	dcf9      	bgt.n	800780a <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8007816:	6804      	ldr	r4, [r0, #0]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	69e4      	ldr	r4, [r4, #28]
 800781c:	46a4      	mov	ip, r4
 800781e:	bc30      	pop	{r4, r5}
 8007820:	4760      	bx	ip
 8007822:	bc30      	pop	{r4, r5}
 8007824:	4770      	bx	lr
	...

08007828 <DisplayUdf::DisplayUdf()>:
 8007828:	b510      	push	{r4, lr}
 800782a:	4604      	mov	r4, r0
 800782c:	f000 f948 	bl	8007ac0 <Display::Display()>
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <DisplayUdf::DisplayUdf()+0x20>)
 8007832:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8007836:	601c      	str	r4, [r3, #0]
 8007838:	2301      	movs	r3, #1
 800783a:	f802 3b01 	strb.w	r3, [r2], #1
 800783e:	3301      	adds	r3, #1
 8007840:	2b15      	cmp	r3, #21
 8007842:	d1fa      	bne.n	800783a <DisplayUdf::DisplayUdf()+0x12>
 8007844:	4620      	mov	r0, r4
 8007846:	bd10      	pop	{r4, pc}
 8007848:	200016e8 	andcs	r1, r0, r8, ror #13

0800784c <DisplayUdf::SetTitle(char const*, ...)>:
 800784c:	b40e      	push	{r1, r2, r3}
 800784e:	b517      	push	{r0, r1, r2, r4, lr}
 8007850:	ab05      	add	r3, sp, #20
 8007852:	f853 2b04 	ldr.w	r2, [r3], #4
 8007856:	4604      	mov	r4, r0
 8007858:	211f      	movs	r1, #31
 800785a:	301c      	adds	r0, #28
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f7fa fc1f 	bl	80020a0 <vsnprintf>
 8007862:	2300      	movs	r3, #0
 8007864:	4404      	add	r4, r0
 8007866:	7723      	strb	r3, [r4, #28]
 8007868:	b003      	add	sp, #12
 800786a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800786e:	b003      	add	sp, #12
 8007870:	4770      	bx	lr
	...

08007874 <DisplayUdf::Show()>:
 8007874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	21ff      	movs	r1, #255	; 0xff
 800787a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 800787e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8007882:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007886:	2806      	cmp	r0, #6
 8007888:	bf88      	it	hi
 800788a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 800788e:	4293      	cmp	r3, r2
 8007890:	d1f7      	bne.n	8007882 <DisplayUdf::Show()+0xe>
 8007892:	2501      	movs	r5, #1
 8007894:	69a0      	ldr	r0, [r4, #24]
 8007896:	b118      	cbz	r0, 80078a0 <DisplayUdf::Show()+0x2c>
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	4629      	mov	r1, r5
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	4798      	blx	r3
 80078a0:	3501      	adds	r5, #1
 80078a2:	b2ed      	uxtb	r5, r5
 80078a4:	2d06      	cmp	r5, #6
 80078a6:	d1f5      	bne.n	8007894 <DisplayUdf::Show()+0x20>
 80078a8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80078ac:	69a0      	ldr	r0, [r4, #24]
 80078ae:	f104 021c 	add.w	r2, r4, #28
 80078b2:	f7ff ffa6 	bl	8007802 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80078b6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80078ba:	69a0      	ldr	r0, [r4, #24]
 80078bc:	4a12      	ldr	r2, [pc, #72]	; (8007908 <DisplayUdf::Show()+0x94>)
 80078be:	f7ff ffa0 	bl	8007802 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <DisplayUdf::Show()+0x98>)
 80078c4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	4620      	mov	r0, r4
 80078cc:	2303      	movs	r3, #3
 80078ce:	4a10      	ldr	r2, [pc, #64]	; (8007910 <DisplayUdf::Show()+0x9c>)
 80078d0:	f7f9 fc50 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 80078d4:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <DisplayUdf::Show()+0xa0>)
 80078d6:	4620      	mov	r0, r4
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f892 10a7 	ldrb.w	r1, [r2, #167]	; 0xa7
 80078de:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8
 80078e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80078e6:	f892 10a3 	ldrb.w	r1, [r2, #163]	; 0xa3
 80078ea:	f892 20a4 	ldrb.w	r2, [r2, #164]	; 0xa4
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 80078f4:	b292      	uxth	r2, r2
 80078f6:	9200      	str	r2, [sp, #0]
 80078f8:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
 80078fc:	4a06      	ldr	r2, [pc, #24]	; (8007918 <DisplayUdf::Show()+0xa4>)
 80078fe:	f7f9 fc39 	bl	8001174 <Display::Printf(unsigned char, char const*, ...)>
 8007902:	b003      	add	sp, #12
 8007904:	bd30      	pop	{r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	0800a308 	stmdaeq	r0, {r3, r8, r9, sp, pc}
 800790c:	2000177c 	andcs	r1, r0, ip, ror r7
 8007910:	0800b121 	stmdaeq	r0, {r0, r5, r8, ip, sp, pc}
 8007914:	200001f4 	strdcs	r0, [r0], -r4
 8007918:	0800b130 	stmdaeq	r0, {r4, r5, r8, ip, sp, pc}

0800791c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 800791c:	1e4b      	subs	r3, r1, #1
 800791e:	2b05      	cmp	r3, #5
 8007920:	b530      	push	{r4, r5, lr}
 8007922:	d80f      	bhi.n	8007944 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8007924:	2300      	movs	r3, #0
 8007926:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 800792a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800792e:	428d      	cmp	r5, r1
 8007930:	d109      	bne.n	8007946 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8007932:	1884      	adds	r4, r0, r2
 8007934:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8007938:	4403      	add	r3, r0
 800793a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 800793e:	4410      	add	r0, r2
 8007940:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8007944:	bd30      	pop	{r4, r5, pc}
 8007946:	3301      	adds	r3, #1
 8007948:	2b14      	cmp	r3, #20
 800794a:	d1ee      	bne.n	800792a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 800794c:	e7f7      	b.n	800793e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

0800794e <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 800794e:	b510      	push	{r4, lr}
 8007950:	2220      	movs	r2, #32
 8007952:	4604      	mov	r4, r0
 8007954:	f840 1b04 	str.w	r1, [r0], #4
 8007958:	2100      	movs	r1, #0
 800795a:	f000 fe27 	bl	80085ac <memset>
 800795e:	f647 7305 	movw	r3, #32517	; 0x7f05
 8007962:	4620      	mov	r0, r4
 8007964:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007966:	bd10      	pop	{r4, pc}

08007968 <DisplayUdfParams::Load()>:
 8007968:	b508      	push	{r3, lr}
 800796a:	2300      	movs	r3, #0
 800796c:	4601      	mov	r1, r0
 800796e:	6043      	str	r3, [r0, #4]
 8007970:	6800      	ldr	r0, [r0, #0]
 8007972:	b120      	cbz	r0, 800797e <DisplayUdfParams::Load()+0x16>
 8007974:	6803      	ldr	r3, [r0, #0]
 8007976:	3104      	adds	r1, #4
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	4798      	blx	r3
 800797c:	2001      	movs	r0, #1
 800797e:	bd08      	pop	{r3, pc}

08007980 <DisplayUdfParams::Set(DisplayUdf*)>:
 8007980:	6843      	ldr	r3, [r0, #4]
 8007982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007986:	009a      	lsls	r2, r3, #2
 8007988:	4604      	mov	r4, r0
 800798a:	460e      	mov	r6, r1
 800798c:	d506      	bpl.n	800799c <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 800798e:	6988      	ldr	r0, [r1, #24]
 8007990:	b120      	cbz	r0, 800799c <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8007992:	6803      	ldr	r3, [r0, #0]
 8007994:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4798      	blx	r3
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	69b0      	ldr	r0, [r6, #24]
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	bf41      	itttt	mi
 80079a4:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80079a8:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 80079ac:	4353      	mulmi	r3, r2
 80079ae:	6173      	strmi	r3, [r6, #20]
 80079b0:	6861      	ldr	r1, [r4, #4]
 80079b2:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80079b6:	b110      	cbz	r0, 80079be <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80079b8:	6803      	ldr	r3, [r0, #0]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	4798      	blx	r3
 80079be:	2500      	movs	r5, #0
 80079c0:	2701      	movs	r7, #1
 80079c2:	f104 0808 	add.w	r8, r4, #8
 80079c6:	6862      	ldr	r2, [r4, #4]
 80079c8:	fa07 f305 	lsl.w	r3, r7, r5
 80079cc:	4393      	bics	r3, r2
 80079ce:	d105      	bne.n	80079dc <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80079d0:	462a      	mov	r2, r5
 80079d2:	4630      	mov	r0, r6
 80079d4:	f818 1005 	ldrb.w	r1, [r8, r5]
 80079d8:	f7ff ffa0 	bl	800791c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079dc:	3501      	adds	r5, #1
 80079de:	2d14      	cmp	r5, #20
 80079e0:	d1f1      	bne.n	80079c6 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80079e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079e6 <DisplayUdfParams::Dump()>:
 80079e6:	4770      	bx	lr

080079e8 <Display::PrintInfo() [clone .isra.0]>:
 80079e8:	b910      	cbnz	r0, 80079f0 <Display::PrintInfo() [clone .isra.0]+0x8>
 80079ea:	4803      	ldr	r0, [pc, #12]	; (80079f8 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80079ec:	f7fa bb68 	b.w	80020c0 <puts>
 80079f0:	6803      	ldr	r3, [r0, #0]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	4718      	bx	r3
 80079f6:	bf00      	nop
 80079f8:	0800b140 	stmdaeq	r0, {r6, r8, ip, sp, pc}

080079fc <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80079fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079fe:	460d      	mov	r5, r1
 8007a00:	4604      	mov	r4, r0
 8007a02:	f001 fdc1 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8007a06:	4628      	mov	r0, r5
 8007a08:	f001 fdb6 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8007a0c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007a10:	2b07      	cmp	r3, #7
 8007a12:	d902      	bls.n	8007a1a <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8007a14:	3c50      	subs	r4, #80	; 0x50
 8007a16:	2c0f      	cmp	r4, #15
 8007a18:	d809      	bhi.n	8007a2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	f10d 0007 	add.w	r0, sp, #7
 8007a20:	f001 fe1e 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8007a24:	fab0 f080 	clz	r0, r0
 8007a28:	0940      	lsrs	r0, r0, #5
 8007a2a:	b003      	add	sp, #12
 8007a2c:	bd30      	pop	{r4, r5, pc}
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4608      	mov	r0, r1
 8007a32:	f001 fdaf 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007a36:	e7f5      	b.n	8007a24 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08007a38 <Display::Detect7Segment()>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	68c1      	ldr	r1, [r0, #12]
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	7a00      	ldrb	r0, [r0, #8]
 8007a40:	f7ff ffdc 	bl	80079fc <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8007a44:	7460      	strb	r0, [r4, #17]
 8007a46:	b170      	cbz	r0, 8007a66 <Display::Detect7Segment()+0x2e>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f104 0508 	add.w	r5, r4, #8
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4628      	mov	r0, r5
 8007a52:	f7fb f985 	bl	8002d60 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007a56:	7c63      	ldrb	r3, [r4, #17]
 8007a58:	b12b      	cbz	r3, 8007a66 <Display::Detect7Segment()+0x2e>
 8007a5a:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8007a5e:	2112      	movs	r1, #18
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7fb f97d 	bl	8002d60 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8007a66:	bd38      	pop	{r3, r4, r5, pc}

08007a68 <Display::Detect(display::Type)>:
 8007a68:	2902      	cmp	r1, #2
 8007a6a:	b538      	push	{r3, r4, r5, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	d014      	beq.n	8007a9a <Display::Detect(display::Type)+0x32>
 8007a70:	2904      	cmp	r1, #4
 8007a72:	d01b      	beq.n	8007aac <Display::Detect(display::Type)+0x44>
 8007a74:	69a0      	ldr	r0, [r4, #24]
 8007a76:	b168      	cbz	r0, 8007a94 <Display::Detect(display::Type)+0x2c>
 8007a78:	6803      	ldr	r3, [r0, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4798      	blx	r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	69a0      	ldr	r0, [r4, #24]
 8007a82:	b9ab      	cbnz	r3, 8007ab0 <Display::Detect(display::Type)+0x48>
 8007a84:	b110      	cbz	r0, 8007a8c <Display::Detect(display::Type)+0x24>
 8007a86:	6803      	ldr	r3, [r0, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4798      	blx	r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61a3      	str	r3, [r4, #24]
 8007a90:	2304      	movs	r3, #4
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	6163      	str	r3, [r4, #20]
 8007a98:	e010      	b.n	8007abc <Display::Detect(display::Type)+0x54>
 8007a9a:	2018      	movs	r0, #24
 8007a9c:	f000 fcef 	bl	800847e <operator new(unsigned int)>
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f000 f89e 	bl	8007be4 <Ssd1306::Ssd1306(TOledPanel)>
 8007aa8:	61a5      	str	r5, [r4, #24]
 8007aaa:	e7e3      	b.n	8007a74 <Display::Detect(display::Type)+0xc>
 8007aac:	6001      	str	r1, [r0, #0]
 8007aae:	e7e1      	b.n	8007a74 <Display::Detect(display::Type)+0xc>
 8007ab0:	6803      	ldr	r3, [r0, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4798      	blx	r3
 8007ab6:	69a3      	ldr	r3, [r4, #24]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0eb      	beq.n	8007a94 <Display::Detect(display::Type)+0x2c>
 8007abc:	bd38      	pop	{r3, r4, r5, pc}
	...

08007ac0 <Display::Display()>:
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <Display::Display()+0x44>)
 8007ac8:	4604      	mov	r4, r0
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a0e      	ldr	r2, [pc, #56]	; (8007b08 <Display::Display()+0x48>)
 8007ace:	6043      	str	r3, [r0, #4]
 8007ad0:	2321      	movs	r3, #33	; 0x21
 8007ad2:	7203      	strb	r3, [r0, #8]
 8007ad4:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <Display::Display()+0x4c>)
 8007ad6:	2102      	movs	r1, #2
 8007ad8:	60c3      	str	r3, [r0, #12]
 8007ada:	2300      	movs	r3, #0
 8007adc:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8007ae0:	8203      	strh	r3, [r0, #16]
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <Display::Display()+0x50>)
 8007ae4:	6018      	str	r0, [r3, #0]
 8007ae6:	f7ff ffbf 	bl	8007a68 <Display::Detect(display::Type)>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7ff ffa4 	bl	8007a38 <Display::Detect7Segment()>
 8007af0:	69a3      	ldr	r3, [r4, #24]
 8007af2:	b10b      	cbz	r3, 8007af8 <Display::Display()+0x38>
 8007af4:	f7f9 fb7e 	bl	80011f4 <display::timeout::gpio_init()>
 8007af8:	69a0      	ldr	r0, [r4, #24]
 8007afa:	f7ff ff75 	bl	80079e8 <Display::PrintInfo() [clone .isra.0]>
 8007afe:	4620      	mov	r0, r4
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	20001814 	andcs	r1, r0, r4, lsl r8
 8007b08:	000493e0 	andeq	r9, r4, r0, ror #7
 8007b0c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007b10:	200016ec 	andcs	r1, r0, ip, ror #13

08007b14 <Ssd1306::~Ssd1306()>:
 8007b14:	4770      	bx	lr

08007b16 <Ssd1306::SetCursor(unsigned int)>:
 8007b16:	4770      	bx	lr

08007b18 <Ssd1306::PrintInfo()>:
 8007b18:	b410      	push	{r4}
 8007b1a:	4906      	ldr	r1, [pc, #24]	; (8007b34 <Ssd1306::PrintInfo()+0x1c>)
 8007b1c:	7c44      	ldrb	r4, [r0, #17]
 8007b1e:	7903      	ldrb	r3, [r0, #4]
 8007b20:	7942      	ldrb	r2, [r0, #5]
 8007b22:	4805      	ldr	r0, [pc, #20]	; (8007b38 <Ssd1306::PrintInfo()+0x20>)
 8007b24:	2c00      	cmp	r4, #0
 8007b26:	bf08      	it	eq
 8007b28:	4601      	moveq	r1, r0
 8007b2a:	4804      	ldr	r0, [pc, #16]	; (8007b3c <Ssd1306::PrintInfo()+0x24>)
 8007b2c:	bc10      	pop	{r4}
 8007b2e:	f7fa ba8f 	b.w	8002050 <printf>
 8007b32:	bf00      	nop
 8007b34:	0800b151 	stmdaeq	r0, {r0, r4, r6, r8, ip, sp, pc}
 8007b38:	0800b158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp, pc}
 8007b3c:	0800b160 	stmdaeq	r0, {r5, r6, r8, ip, sp, pc}

08007b40 <Ssd1306::~Ssd1306()>:
 8007b40:	b510      	push	{r4, lr}
 8007b42:	4604      	mov	r4, r0
 8007b44:	f000 fc97 	bl	8008476 <operator delete(void*)>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd10      	pop	{r4, pc}

08007b4c <HAL_I2C::Setup()>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4604      	mov	r4, r0
 8007b50:	7800      	ldrb	r0, [r0, #0]
 8007b52:	f001 fd19 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8007b56:	6860      	ldr	r0, [r4, #4]
 8007b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b5c:	f001 bd0c 	b.w	8009578 <gd32_i2c_set_baudrate(unsigned int)>

08007b60 <Ssd1306::PutChar(int)>:
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f1a1 0420 	sub.w	r4, r1, #32
 8007b66:	2c5f      	cmp	r4, #95	; 0x5f
 8007b68:	bf88      	it	hi
 8007b6a:	2400      	movhi	r4, #0
 8007b6c:	3008      	adds	r0, #8
 8007b6e:	f7ff ffed 	bl	8007b4c <HAL_I2C::Setup()>
 8007b72:	4804      	ldr	r0, [pc, #16]	; (8007b84 <Ssd1306::PutChar(int)+0x24>)
 8007b74:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8007b78:	4420      	add	r0, r4
 8007b7a:	2107      	movs	r1, #7
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f001 bd08 	b.w	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007b84:	0800b174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp, pc}

08007b88 <Ssd1306::PutString(char const*)>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	1e4c      	subs	r4, r1, #1
 8007b8e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007b92:	b901      	cbnz	r1, 8007b96 <Ssd1306::PutString(char const*)+0xe>
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7ff ffe2 	bl	8007b60 <Ssd1306::PutChar(int)>
 8007b9c:	e7f7      	b.n	8007b8e <Ssd1306::PutString(char const*)+0x6>

08007b9e <Ssd1306::Text(char const*, unsigned int)>:
 8007b9e:	b570      	push	{r4, r5, r6, lr}
 8007ba0:	7903      	ldrb	r3, [r0, #4]
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	bf94      	ite	ls
 8007baa:	18ce      	addls	r6, r1, r3
 8007bac:	188e      	addhi	r6, r1, r2
 8007bae:	42b4      	cmp	r4, r6
 8007bb0:	d100      	bne.n	8007bb4 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bba:	f7ff ffd1 	bl	8007b60 <Ssd1306::PutChar(int)>
 8007bbe:	e7f6      	b.n	8007bae <Ssd1306::Text(char const*, unsigned int)+0x10>

08007bc0 <Ssd1306::InitMembers()>:
 8007bc0:	7c03      	ldrb	r3, [r0, #16]
 8007bc2:	b14b      	cbz	r3, 8007bd8 <Ssd1306::InitMembers()+0x18>
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d909      	bls.n	8007bde <Ssd1306::InitMembers()+0x1e>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	2204      	movs	r2, #4
 8007bce:	2115      	movs	r1, #21
 8007bd0:	7143      	strb	r3, [r0, #5]
 8007bd2:	7101      	strb	r1, [r0, #4]
 8007bd4:	6142      	str	r2, [r0, #20]
 8007bd6:	4770      	bx	lr
 8007bd8:	2308      	movs	r3, #8
 8007bda:	461a      	mov	r2, r3
 8007bdc:	e7f7      	b.n	8007bce <Ssd1306::InitMembers()+0xe>
 8007bde:	2304      	movs	r3, #4
 8007be0:	e7fb      	b.n	8007bda <Ssd1306::InitMembers()+0x1a>
	...

08007be4 <Ssd1306::Ssd1306(TOledPanel)>:
 8007be4:	4a08      	ldr	r2, [pc, #32]	; (8007c08 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8007be6:	b508      	push	{r3, lr}
 8007be8:	6002      	str	r2, [r0, #0]
 8007bea:	227f      	movs	r2, #127	; 0x7f
 8007bec:	80c2      	strh	r2, [r0, #6]
 8007bee:	223c      	movs	r2, #60	; 0x3c
 8007bf0:	7202      	strb	r2, [r0, #8]
 8007bf2:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8007bf4:	7401      	strb	r1, [r0, #16]
 8007bf6:	60c2      	str	r2, [r0, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	7442      	strb	r2, [r0, #17]
 8007bfc:	4a04      	ldr	r2, [pc, #16]	; (8007c10 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8007bfe:	6010      	str	r0, [r2, #0]
 8007c00:	f7ff ffde 	bl	8007bc0 <Ssd1306::InitMembers()>
 8007c04:	bd08      	pop	{r3, pc}
 8007c06:	bf00      	nop
 8007c08:	0800b44c 	stmdaeq	r0, {r2, r3, r6, sl, ip, sp, pc}
 8007c0c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8007c10:	20001778 	andcs	r1, r0, r8, ror r7

08007c14 <Ssd1306::SendCommand(unsigned char)>:
 8007c14:	2300      	movs	r3, #0
 8007c16:	b507      	push	{r0, r1, r2, lr}
 8007c18:	3008      	adds	r0, #8
 8007c1a:	f88d 3004 	strb.w	r3, [sp, #4]
 8007c1e:	f88d 1005 	strb.w	r1, [sp, #5]
 8007c22:	f7ff ff93 	bl	8007b4c <HAL_I2C::Setup()>
 8007c26:	2102      	movs	r1, #2
 8007c28:	a801      	add	r0, sp, #4
 8007c2a:	f001 fcb3 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007c2e:	b003      	add	sp, #12
 8007c30:	f85d fb04 	ldr.w	pc, [sp], #4

08007c34 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8007c34:	2914      	cmp	r1, #20
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	4605      	mov	r5, r0
 8007c3a:	4616      	mov	r6, r2
 8007c3c:	d81c      	bhi.n	8007c78 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007c3e:	7943      	ldrb	r3, [r0, #5]
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d919      	bls.n	8007c78 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8007c44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007c48:	7c43      	ldrb	r3, [r0, #17]
 8007c4a:	004c      	lsls	r4, r1, #1
 8007c4c:	b2e4      	uxtb	r4, r4
 8007c4e:	b10b      	cbz	r3, 8007c54 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8007c50:	3404      	adds	r4, #4
 8007c52:	b2e4      	uxtb	r4, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f004 010e 	and.w	r1, r4, #14
 8007c5a:	f7ff ffdb 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007c5e:	0921      	lsrs	r1, r4, #4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f041 0110 	orr.w	r1, r1, #16
 8007c66:	f7ff ffd5 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8007c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c74:	f7ff bfce 	b.w	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007c78:	bd70      	pop	{r4, r5, r6, pc}

08007c7a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8007c7a:	b570      	push	{r4, r5, r6, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	4615      	mov	r5, r2
 8007c80:	461e      	mov	r6, r3
 8007c82:	b171      	cbz	r1, 8007ca2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007c84:	7943      	ldrb	r3, [r0, #5]
 8007c86:	428b      	cmp	r3, r1
 8007c88:	d30b      	bcc.n	8007ca2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8007c8a:	3901      	subs	r1, #1
 8007c8c:	b2ca      	uxtb	r2, r1
 8007c8e:	2100      	movs	r1, #0
 8007c90:	f7ff ffd0 	bl	8007c34 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007c94:	4632      	mov	r2, r6
 8007c96:	4629      	mov	r1, r5
 8007c98:	4620      	mov	r0, r4
 8007c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c9e:	f7ff bf7e 	b.w	8007b9e <Ssd1306::Text(char const*, unsigned int)>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}

08007ca4 <Ssd1306::ClearLine(unsigned char)>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b1b9      	cbz	r1, 8007cda <Ssd1306::ClearLine(unsigned char)+0x36>
 8007caa:	7943      	ldrb	r3, [r0, #5]
 8007cac:	428b      	cmp	r3, r1
 8007cae:	d314      	bcc.n	8007cda <Ssd1306::ClearLine(unsigned char)+0x36>
 8007cb0:	3901      	subs	r1, #1
 8007cb2:	b2cc      	uxtb	r4, r1
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f7ff ffbc 	bl	8007c34 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007cbc:	f105 0008 	add.w	r0, r5, #8
 8007cc0:	f7ff ff44 	bl	8007b4c <HAL_I2C::Setup()>
 8007cc4:	2181      	movs	r1, #129	; 0x81
 8007cc6:	4805      	ldr	r0, [pc, #20]	; (8007cdc <Ssd1306::ClearLine(unsigned char)+0x38>)
 8007cc8:	f001 fc64 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f7ff bfad 	b.w	8007c34 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	200016f0 	strdcs	r1, [r0], -r0

08007ce0 <Ssd1306::SetSleep(bool)>:
 8007ce0:	b111      	cbz	r1, 8007ce8 <Ssd1306::SetSleep(bool)+0x8>
 8007ce2:	21ae      	movs	r1, #174	; 0xae
 8007ce4:	f7ff bf96 	b.w	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007ce8:	21af      	movs	r1, #175	; 0xaf
 8007cea:	e7fb      	b.n	8007ce4 <Ssd1306::SetSleep(bool)+0x4>

08007cec <Ssd1306::SetContrast(unsigned char)>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	7181      	strb	r1, [r0, #6]
 8007cf4:	2181      	movs	r1, #129	; 0x81
 8007cf6:	f7ff ff8d 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d02:	f7ff bf87 	b.w	8007c14 <Ssd1306::SendCommand(unsigned char)>

08007d06 <Ssd1306::SetFlipVertically(bool)>:
 8007d06:	b510      	push	{r4, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	71c1      	strb	r1, [r0, #7]
 8007d0c:	b141      	cbz	r1, 8007d20 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8007d0e:	21c0      	movs	r1, #192	; 0xc0
 8007d10:	f7ff ff80 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d14:	21a0      	movs	r1, #160	; 0xa0
 8007d16:	4620      	mov	r0, r4
 8007d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1c:	f7ff bf7a 	b.w	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d20:	21c8      	movs	r1, #200	; 0xc8
 8007d22:	f7ff ff77 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d26:	21a1      	movs	r1, #161	; 0xa1
 8007d28:	e7f5      	b.n	8007d16 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08007d2c <Ssd1306::CheckSH1106()>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b086      	sub	sp, #24
 8007d32:	2100      	movs	r1, #0
 8007d34:	f7ff ff6e 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d38:	2190      	movs	r1, #144	; 0x90
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff ff6a 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d40:	21b0      	movs	r1, #176	; 0xb0
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff ff66 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d48:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <Ssd1306::CheckSH1106()+0xa8>)
 8007d4a:	f104 0608 	add.w	r6, r4, #8
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	ad02      	add	r5, sp, #8
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	4630      	mov	r0, r6
 8007d58:	712b      	strb	r3, [r5, #4]
 8007d5a:	f7ff fef7 	bl	8007b4c <HAL_I2C::Setup()>
 8007d5e:	2105      	movs	r1, #5
 8007d60:	4628      	mov	r0, r5
 8007d62:	f001 fc17 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007d66:	2100      	movs	r1, #0
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7ff ff53 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d6e:	2190      	movs	r1, #144	; 0x90
 8007d70:	4620      	mov	r0, r4
 8007d72:	f7ff ff4f 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d76:	21b0      	movs	r1, #176	; 0xb0
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7ff ff4b 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	f88d 3014 	strb.w	r3, [sp, #20]
 8007d86:	2340      	movs	r3, #64	; 0x40
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f88d 3007 	strb.w	r3, [sp, #7]
 8007d8e:	f7ff fedd 	bl	8007b4c <HAL_I2C::Setup()>
 8007d92:	2101      	movs	r1, #1
 8007d94:	f10d 0007 	add.w	r0, sp, #7
 8007d98:	f001 fbfc 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f7ff fed5 	bl	8007b4c <HAL_I2C::Setup()>
 8007da2:	2105      	movs	r1, #5
 8007da4:	a804      	add	r0, sp, #16
 8007da6:	f001 fc5b 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8007daa:	2201      	movs	r2, #1
 8007dac:	5cab      	ldrb	r3, [r5, r2]
 8007dae:	a904      	add	r1, sp, #16
 8007db0:	3201      	adds	r2, #1
 8007db2:	4411      	add	r1, r2
 8007db4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8007db8:	428b      	cmp	r3, r1
 8007dba:	d006      	beq.n	8007dca <Ssd1306::CheckSH1106()+0x9e>
 8007dbc:	1a5b      	subs	r3, r3, r1
 8007dbe:	fab3 f383 	clz	r3, r3
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	7463      	strb	r3, [r4, #17]
 8007dc6:	b006      	add	sp, #24
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	2a05      	cmp	r2, #5
 8007dcc:	d1ee      	bne.n	8007dac <Ssd1306::CheckSH1106()+0x80>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e7f5      	b.n	8007dbe <Ssd1306::CheckSH1106()+0x92>
 8007dd2:	bf00      	nop
 8007dd4:	0800b16c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp, pc}

08007dd8 <Ssd1306::Cls()>:
 8007dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ddc:	4604      	mov	r4, r0
 8007dde:	2600      	movs	r6, #0
 8007de0:	7c45      	ldrb	r5, [r0, #17]
 8007de2:	00ad      	lsls	r5, r5, #2
 8007de4:	b2ed      	uxtb	r5, r5
 8007de6:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8007dea:	f045 0810 	orr.w	r8, r5, #16
 8007dee:	b2ff      	uxtb	r7, r7
 8007df0:	6963      	ldr	r3, [r4, #20]
 8007df2:	4629      	mov	r1, r5
 8007df4:	42b3      	cmp	r3, r6
 8007df6:	4620      	mov	r0, r4
 8007df8:	d80b      	bhi.n	8007e12 <Ssd1306::Cls()+0x3a>
 8007dfa:	f7ff ff0b 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007dfe:	4641      	mov	r1, r8
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff ff07 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007e06:	4620      	mov	r0, r4
 8007e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0c:	21b0      	movs	r1, #176	; 0xb0
 8007e0e:	f7ff bf01 	b.w	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007e12:	f7ff feff 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007e16:	4641      	mov	r1, r8
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff fefb 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007e1e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8007e22:	4620      	mov	r0, r4
 8007e24:	b2c9      	uxtb	r1, r1
 8007e26:	f7ff fef5 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007e2a:	7c23      	ldrb	r3, [r4, #16]
 8007e2c:	b123      	cbz	r3, 8007e38 <Ssd1306::Cls()+0x60>
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d901      	bls.n	8007e38 <Ssd1306::Cls()+0x60>
 8007e34:	3601      	adds	r6, #1
 8007e36:	e7db      	b.n	8007df0 <Ssd1306::Cls()+0x18>
 8007e38:	f104 0008 	add.w	r0, r4, #8
 8007e3c:	f7ff fe86 	bl	8007b4c <HAL_I2C::Setup()>
 8007e40:	4639      	mov	r1, r7
 8007e42:	4802      	ldr	r0, [pc, #8]	; (8007e4c <Ssd1306::Cls()+0x74>)
 8007e44:	f001 fba6 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007e48:	e7f4      	b.n	8007e34 <Ssd1306::Cls()+0x5c>
 8007e4a:	bf00      	nop
 8007e4c:	200016f0 	strdcs	r1, [r0], -r0

08007e50 <Ssd1306::Start()>:
 8007e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e52:	7a04      	ldrb	r4, [r0, #8]
 8007e54:	68c6      	ldr	r6, [r0, #12]
 8007e56:	4605      	mov	r5, r0
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 fb95 	bl	8009588 <gd32_i2c_set_address(unsigned char)>
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f001 fb8a 	bl	8009578 <gd32_i2c_set_baudrate(unsigned int)>
 8007e64:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e68:	2b07      	cmp	r3, #7
 8007e6a:	d902      	bls.n	8007e72 <Ssd1306::Start()+0x22>
 8007e6c:	3c50      	subs	r4, #80	; 0x50
 8007e6e:	2c0f      	cmp	r4, #15
 8007e70:	d80f      	bhi.n	8007e92 <Ssd1306::Start()+0x42>
 8007e72:	2101      	movs	r1, #1
 8007e74:	f10d 0007 	add.w	r0, sp, #7
 8007e78:	f001 fbf2 	bl	8009660 <gd32_i2c_read(char*, unsigned int)>
 8007e7c:	fab0 f480 	clz	r4, r0
 8007e80:	0964      	lsrs	r4, r4, #5
 8007e82:	b35c      	cbz	r4, 8007edc <Ssd1306::Start()+0x8c>
 8007e84:	7c2e      	ldrb	r6, [r5, #16]
 8007e86:	b14e      	cbz	r6, 8007e9c <Ssd1306::Start()+0x4c>
 8007e88:	3e01      	subs	r6, #1
 8007e8a:	2e01      	cmp	r6, #1
 8007e8c:	d929      	bls.n	8007ee2 <Ssd1306::Start()+0x92>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	e024      	b.n	8007edc <Ssd1306::Start()+0x8c>
 8007e92:	2100      	movs	r1, #0
 8007e94:	4608      	mov	r0, r1
 8007e96:	f001 fb7d 	bl	8009594 <gd32_i2c_write(char const*, unsigned int)>
 8007e9a:	e7ef      	b.n	8007e7c <Ssd1306::Start()+0x2c>
 8007e9c:	4f16      	ldr	r7, [pc, #88]	; (8007ef8 <Ssd1306::Start()+0xa8>)
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	f7ff feb5 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007eaa:	2e18      	cmp	r6, #24
 8007eac:	d1f7      	bne.n	8007e9e <Ssd1306::Start()+0x4e>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4a12      	ldr	r2, [pc, #72]	; (8007efc <Ssd1306::Start()+0xac>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	2b86      	cmp	r3, #134	; 0x86
 8007eba:	f802 0b01 	strb.w	r0, [r2], #1
 8007ebe:	d1fa      	bne.n	8007eb6 <Ssd1306::Start()+0x66>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	700b      	strb	r3, [r1, #0]
 8007ec6:	f7ff ff31 	bl	8007d2c <Ssd1306::CheckSH1106()>
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f7ff ff84 	bl	8007dd8 <Ssd1306::Cls()>
 8007ed0:	21af      	movs	r1, #175	; 0xaf
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fe9e 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	71eb      	strb	r3, [r5, #7]
 8007edc:	4620      	mov	r0, r4
 8007ede:	b003      	add	sp, #12
 8007ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	4f06      	ldr	r7, [pc, #24]	; (8007f00 <Ssd1306::Start()+0xb0>)
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007eec:	3601      	adds	r6, #1
 8007eee:	f7ff fe91 	bl	8007c14 <Ssd1306::SendCommand(unsigned char)>
 8007ef2:	2e18      	cmp	r6, #24
 8007ef4:	d1f7      	bne.n	8007ee6 <Ssd1306::Start()+0x96>
 8007ef6:	e7da      	b.n	8007eae <Ssd1306::Start()+0x5e>
 8007ef8:	0800b42c 	stmdaeq	r0, {r2, r3, r5, sl, ip, sp, pc}
 8007efc:	200016f0 	strdcs	r1, [r0], -r0
 8007f00:	0800b414 	stmdaeq	r0, {r2, r4, sl, ip, sp, pc}

08007f04 <console_putc>:
 8007f04:	f000 bc88 	b.w	8008818 <uart0_putc>

08007f08 <console_puts>:
 8007f08:	f000 bca6 	b.w	8008858 <uart0_puts>

08007f0c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	4617      	mov	r7, r2
 8007f12:	461e      	mov	r6, r3
 8007f14:	4d14      	ldr	r5, [pc, #80]	; (8007f68 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8007f16:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8007f18:	b086      	sub	sp, #24
 8007f1a:	6018      	str	r0, [r3, #0]
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	f105 0803 	add.w	r8, r5, #3
 8007f22:	2203      	movs	r2, #3
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 fb2a 	bl	800857e <memmove>
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	220b      	movs	r2, #11
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f000 fb25 	bl	800857e <memmove>
 8007f34:	f105 030e 	add.w	r3, r5, #14
 8007f38:	4631      	mov	r1, r6
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fb1e 	bl	800857e <memmove>
 8007f42:	2308      	movs	r3, #8
 8007f44:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8007f48:	230b      	movs	r3, #11
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8007f4e:	9005      	str	r0, [sp, #20]
 8007f50:	e9cd 5300 	strd	r5, r3, [sp]
 8007f54:	213f      	movs	r1, #63	; 0x3f
 8007f56:	2303      	movs	r3, #3
 8007f58:	4a06      	ldr	r2, [pc, #24]	; (8007f74 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8007f5a:	4807      	ldr	r0, [pc, #28]	; (8007f78 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8007f5c:	f7fa f888 	bl	8002070 <snprintf>
 8007f60:	4620      	mov	r0, r4
 8007f62:	b006      	add	sp, #24
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	2000177c 	andcs	r1, r0, ip, ror r7
 8007f6c:	200017d4 	ldrdcs	r1, [r0], -r4
 8007f70:	0800a308 	stmdaeq	r0, {r3, r8, r9, sp, pc}
 8007f74:	0800b490 	stmdaeq	r0, {r4, r7, sl, ip, sp, pc}
 8007f78:	20001792 	mulcs	r0, r2, r7

08007f7c <FirmwareVersion::Print(char const*)>:
 8007f7c:	b510      	push	{r4, lr}
 8007f7e:	460c      	mov	r4, r1
 8007f80:	4804      	ldr	r0, [pc, #16]	; (8007f94 <FirmwareVersion::Print(char const*)+0x18>)
 8007f82:	f7fa f89d 	bl	80020c0 <puts>
 8007f86:	b124      	cbz	r4, 8007f92 <FirmwareVersion::Print(char const*)+0x16>
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f8e:	f7fa b897 	b.w	80020c0 <puts>
 8007f92:	bd10      	pop	{r4, pc}
 8007f94:	20001792 	mulcs	r0, r2, r7

08007f98 <LedBlink::LedBlink()>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e9c0 3200 	strd	r3, r2, [r0]
 8007fa2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007fa6:	6083      	str	r3, [r0, #8]
 8007fa8:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8007fac:	6143      	str	r3, [r0, #20]
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <LedBlink::LedBlink()+0x3c>)
 8007fb0:	4d09      	ldr	r5, [pc, #36]	; (8007fd8 <LedBlink::LedBlink()+0x40>)
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	6018      	str	r0, [r3, #0]
 8007fb6:	f240 6004 	movw	r0, #1540	; 0x604
 8007fba:	f000 fecf 	bl	8008d5c <rcu_periph_clock_enable>
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	2110      	movs	r1, #16
 8007fc6:	f000 fe37 	bl	8008c38 <gpio_init>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	616b      	str	r3, [r5, #20]
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200017d8 	ldrdcs	r1, [r0], -r8
 8007fd8:	40011000 	andmi	r1, r1, r0

08007fdc <LedBlink::SetMode(ledblink::Mode)>:
 8007fdc:	6843      	ldr	r3, [r0, #4]
 8007fde:	428b      	cmp	r3, r1
 8007fe0:	d02f      	beq.n	8008042 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8007fe2:	6041      	str	r1, [r0, #4]
 8007fe4:	2904      	cmp	r1, #4
 8007fe6:	d822      	bhi.n	800802e <LedBlink::SetMode(ledblink::Mode)+0x52>
 8007fe8:	e8df f001 	tbb	[pc, r1]
 8007fec:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8007ff0:	23ff001d 	mvnscs	r0, #29
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	60c3      	str	r3, [r0, #12]
 8007ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008000:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8008004:	611a      	str	r2, [r3, #16]
 8008006:	6880      	ldr	r0, [r0, #8]
 8008008:	b1d8      	cbz	r0, 8008042 <LedBlink::SetMode(ledblink::Mode)+0x66>
 800800a:	6803      	ldr	r3, [r0, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	4718      	bx	r3
 8008010:	2301      	movs	r3, #1
 8008012:	6003      	str	r3, [r0, #0]
 8008014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008018:	60c3      	str	r3, [r0, #12]
 800801a:	e7f4      	b.n	8008006 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 800801c:	2303      	movs	r3, #3
 800801e:	6003      	str	r3, [r0, #0]
 8008020:	f240 134d 	movw	r3, #333	; 0x14d
 8008024:	e7f8      	b.n	8008018 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8008026:	2305      	movs	r3, #5
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	23c8      	movs	r3, #200	; 0xc8
 800802c:	e7f4      	b.n	8008018 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 800802e:	2300      	movs	r3, #0
 8008030:	2201      	movs	r2, #1
 8008032:	6003      	str	r3, [r0, #0]
 8008034:	60c3      	str	r3, [r0, #12]
 8008036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800803a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800803e:	615a      	str	r2, [r3, #20]
 8008040:	e7e1      	b.n	8008006 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8008042:	4770      	bx	lr

08008044 <Hardware::Hardware()>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	4604      	mov	r4, r0
 8008048:	2500      	movs	r5, #0
 800804a:	b090      	sub	sp, #64	; 0x40
 800804c:	f000 f8d4 	bl	80081f8 <HwClock::HwClock()>
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <Hardware::Hardware()+0xb4>)
 8008052:	60e5      	str	r5, [r4, #12]
 8008054:	7425      	strb	r5, [r4, #16]
 8008056:	601c      	str	r4, [r3, #0]
 8008058:	f7f8 f86a 	bl	8000130 <console_init>
 800805c:	f000 fc1e 	bl	800889c <systick_config>
 8008060:	f001 fd32 	bl	8009ac8 <udelay_init()>
 8008064:	f001 fd2e 	bl	8009ac4 <micros_init()>
 8008068:	f240 701b 	movw	r0, #1819	; 0x71b
 800806c:	f000 fe76 	bl	8008d5c <rcu_periph_clock_enable>
 8008070:	f240 701c 	movw	r0, #1820	; 0x71c
 8008074:	f000 fe72 	bl	8008d5c <rcu_periph_clock_enable>
 8008078:	4e20      	ldr	r6, [pc, #128]	; (80080fc <Hardware::Hardware()+0xb8>)
 800807a:	f000 fe67 	bl	8008d4c <pmu_backup_write_enable>
 800807e:	f000 fc9b 	bl	80089b8 <bkp_deinit>
 8008082:	4629      	mov	r1, r5
 8008084:	2002      	movs	r0, #2
 8008086:	f000 fc9f 	bl	80089c8 <bkp_data_write>
 800808a:	f240 7004 	movw	r0, #1796	; 0x704
 800808e:	f000 fe65 	bl	8008d5c <rcu_periph_clock_enable>
 8008092:	4630      	mov	r0, r6
 8008094:	f000 ffd4 	bl	8009040 <timer_deinit>
 8008098:	236b      	movs	r3, #107	; 0x6b
 800809a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800809e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080a2:	a903      	add	r1, sp, #12
 80080a4:	4630      	mov	r0, r6
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	f001 f82c 	bl	8009104 <timer_init>
 80080ac:	4630      	mov	r0, r6
 80080ae:	f001 f881 	bl	80091b4 <timer_enable>
 80080b2:	f001 f98f 	bl	80093d4 <gd32_adc_init()>
 80080b6:	2213      	movs	r2, #19
 80080b8:	2302      	movs	r3, #2
 80080ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080be:	237a      	movs	r3, #122	; 0x7a
 80080c0:	a807      	add	r0, sp, #28
 80080c2:	930c      	str	r3, [sp, #48]	; 0x30
 80080c4:	e9cd 5508 	strd	r5, r5, [sp, #32]
 80080c8:	9507      	str	r5, [sp, #28]
 80080ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80080cc:	f000 fafa 	bl	80086c4 <mktime>
 80080d0:	4629      	mov	r1, r5
 80080d2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80080d6:	a801      	add	r0, sp, #4
 80080d8:	f000 fb6a 	bl	80087b0 <settimeofday>
 80080dc:	f001 fa18 	bl	8009510 <gd32_i2c_begin()>
 80080e0:	4620      	mov	r0, r4
 80080e2:	f000 f981 	bl	80083e8 <HwClock::RtcProbe()>
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f892 	bl	8008210 <HwClock::Print()>
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 f8c3 	bl	8008278 <HwClock::HcToSys()>
 80080f2:	4620      	mov	r0, r4
 80080f4:	b010      	add	sp, #64	; 0x40
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	200017dc 	ldrdcs	r1, [r0], -ip
 80080fc:	40001000 	andmi	r1, r0, r0

08008100 <Hardware::SetTime(tm const*)>:
 8008100:	b500      	push	{lr}
 8008102:	680b      	ldr	r3, [r1, #0]
 8008104:	b08b      	sub	sp, #44	; 0x2c
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	684b      	ldr	r3, [r1, #4]
 800810a:	9302      	str	r3, [sp, #8]
 800810c:	688b      	ldr	r3, [r1, #8]
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	68cb      	ldr	r3, [r1, #12]
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	690b      	ldr	r3, [r1, #16]
 8008116:	9305      	str	r3, [sp, #20]
 8008118:	694b      	ldr	r3, [r1, #20]
 800811a:	a901      	add	r1, sp, #4
 800811c:	9306      	str	r3, [sp, #24]
 800811e:	f000 f90b 	bl	8008338 <HwClock::Set(rtc_time const*)>
 8008122:	2001      	movs	r0, #1
 8008124:	b00b      	add	sp, #44	; 0x2c
 8008126:	f85d fb04 	ldr.w	pc, [sp], #4

0800812a <Hardware::GetTime(tm*)>:
 800812a:	b513      	push	{r0, r1, r4, lr}
 800812c:	2000      	movs	r0, #0
 800812e:	460c      	mov	r4, r1
 8008130:	f000 fb56 	bl	80087e0 <time>
 8008134:	9001      	str	r0, [sp, #4]
 8008136:	a801      	add	r0, sp, #4
 8008138:	f000 fa80 	bl	800863c <localtime>
 800813c:	6943      	ldr	r3, [r0, #20]
 800813e:	6163      	str	r3, [r4, #20]
 8008140:	6903      	ldr	r3, [r0, #16]
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	68c3      	ldr	r3, [r0, #12]
 8008146:	60e3      	str	r3, [r4, #12]
 8008148:	6883      	ldr	r3, [r0, #8]
 800814a:	60a3      	str	r3, [r4, #8]
 800814c:	6843      	ldr	r3, [r0, #4]
 800814e:	6063      	str	r3, [r4, #4]
 8008150:	6803      	ldr	r3, [r0, #0]
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	b002      	add	sp, #8
 8008156:	bd10      	pop	{r4, pc}

08008158 <Hardware::Reboot()>:
 8008158:	b508      	push	{r3, lr}
 800815a:	68c3      	ldr	r3, [r0, #12]
 800815c:	4604      	mov	r4, r0
 800815e:	b153      	cbz	r3, 8008176 <Hardware::Reboot()+0x1e>
 8008160:	2300      	movs	r3, #0
 8008162:	2104      	movs	r1, #4
 8008164:	7403      	strb	r3, [r0, #16]
 8008166:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800816a:	f000 fd3b 	bl	8008be4 <fwdgt_config>
 800816e:	68e0      	ldr	r0, [r4, #12]
 8008170:	6803      	ldr	r3, [r0, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	4798      	blx	r3
 8008176:	2102      	movs	r1, #2
 8008178:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800817c:	f000 fd32 	bl	8008be4 <fwdgt_config>
 8008180:	2801      	cmp	r0, #1
 8008182:	bf0c      	ite	eq
 8008184:	2301      	moveq	r3, #1
 8008186:	2300      	movne	r3, #0
 8008188:	7423      	strb	r3, [r4, #16]
 800818a:	d101      	bne.n	8008190 <Hardware::Reboot()+0x38>
 800818c:	f000 fd1a 	bl	8008bc4 <fwdgt_enable>
 8008190:	2208      	movs	r2, #8
 8008192:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <Hardware::Reboot()+0x70>)
 8008194:	2501      	movs	r5, #1
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	480c      	ldr	r0, [pc, #48]	; (80081cc <Hardware::Reboot()+0x74>)
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	227d      	movs	r2, #125	; 0x7d
 800819e:	490c      	ldr	r1, [pc, #48]	; (80081d0 <Hardware::Reboot()+0x78>)
 80081a0:	60da      	str	r2, [r3, #12]
 80081a2:	68dc      	ldr	r4, [r3, #12]
 80081a4:	b904      	cbnz	r4, 80081a8 <Hardware::Reboot()+0x50>
 80081a6:	e7fe      	b.n	80081a6 <Hardware::Reboot()+0x4e>
 80081a8:	6802      	ldr	r2, [r0, #0]
 80081aa:	695e      	ldr	r6, [r3, #20]
 80081ac:	1b92      	subs	r2, r2, r6
 80081ae:	4294      	cmp	r4, r2
 80081b0:	d8f8      	bhi.n	80081a4 <Hardware::Reboot()+0x4c>
 80081b2:	6802      	ldr	r2, [r0, #0]
 80081b4:	615a      	str	r2, [r3, #20]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	2a01      	cmp	r2, #1
 80081ba:	f082 0401 	eor.w	r4, r2, #1
 80081be:	611c      	str	r4, [r3, #16]
 80081c0:	bf14      	ite	ne
 80081c2:	610d      	strne	r5, [r1, #16]
 80081c4:	614a      	streq	r2, [r1, #20]
 80081c6:	e7ec      	b.n	80081a2 <Hardware::Reboot()+0x4a>
 80081c8:	200017d8 	ldrdcs	r1, [r0], -r8
 80081cc:	20001814 	andcs	r1, r0, r4, lsl r8
 80081d0:	40011000 	andmi	r1, r1, r0

080081d4 <Hardware::WatchdogInit()>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	2102      	movs	r1, #2
 80081d8:	4604      	mov	r4, r0
 80081da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081de:	f000 fd01 	bl	8008be4 <fwdgt_config>
 80081e2:	2801      	cmp	r0, #1
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	7423      	strb	r3, [r4, #16]
 80081ec:	d103      	bne.n	80081f6 <Hardware::WatchdogInit()+0x22>
 80081ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f2:	f000 bce7 	b.w	8008bc4 <fwdgt_enable>
 80081f6:	bd10      	pop	{r4, pc}

080081f8 <HwClock::HwClock()>:
 80081f8:	2200      	movs	r2, #0
 80081fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80081fe:	e9c0 2200 	strd	r2, r2, [r0]
 8008202:	7282      	strb	r2, [r0, #10]
 8008204:	4a01      	ldr	r2, [pc, #4]	; (800820c <HwClock::HwClock()+0x14>)
 8008206:	8101      	strh	r1, [r0, #8]
 8008208:	6010      	str	r0, [r2, #0]
 800820a:	4770      	bx	lr
 800820c:	200017e0 	andcs	r1, r0, r0, ror #15

08008210 <HwClock::Print()>:
 8008210:	b510      	push	{r4, lr}
 8008212:	7a83      	ldrb	r3, [r0, #10]
 8008214:	4604      	mov	r4, r0
 8008216:	b08e      	sub	sp, #56	; 0x38
 8008218:	b92b      	cbnz	r3, 8008226 <HwClock::Print()+0x16>
 800821a:	4812      	ldr	r0, [pc, #72]	; (8008264 <HwClock::Print()+0x54>)
 800821c:	b00e      	add	sp, #56	; 0x38
 800821e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008222:	f7f9 bf4d 	b.w	80020c0 <puts>
 8008226:	7a43      	ldrb	r3, [r0, #9]
 8008228:	480f      	ldr	r0, [pc, #60]	; (8008268 <HwClock::Print()+0x58>)
 800822a:	2b03      	cmp	r3, #3
 800822c:	bf96      	itet	ls
 800822e:	4a0f      	ldrls	r2, [pc, #60]	; (800826c <HwClock::Print()+0x5c>)
 8008230:	490f      	ldrhi	r1, [pc, #60]	; (8008270 <HwClock::Print()+0x60>)
 8008232:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
 8008236:	f7f9 ff0b 	bl	8002050 <printf>
 800823a:	a905      	add	r1, sp, #20
 800823c:	4620      	mov	r0, r4
 800823e:	f000 f905 	bl	800844c <HwClock::RtcGet(rtc_time*)>
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	9b06      	ldr	r3, [sp, #24]
 800824a:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	9b07      	ldr	r3, [sp, #28]
 8008252:	4808      	ldr	r0, [pc, #32]	; (8008274 <HwClock::Print()+0x64>)
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800825a:	3201      	adds	r2, #1
 800825c:	f7f9 fef8 	bl	8002050 <printf>
 8008260:	b00e      	add	sp, #56	; 0x38
 8008262:	bd10      	pop	{r4, pc}
 8008264:	0800b4b4 	stmdaeq	r0, {r2, r4, r5, r7, sl, ip, sp, pc}
 8008268:	08009f8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, sl, fp, ip, pc}
 800826c:	0800b50c 	stmdaeq	r0, {r2, r3, r8, sl, ip, sp, pc}
 8008270:	0800ae50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp, pc}
 8008274:	0800b4c5 	stmdaeq	r0, {r0, r2, r6, r7, sl, ip, sp, pc}

08008278 <HwClock::HcToSys()>:
 8008278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800827c:	7a83      	ldrb	r3, [r0, #10]
 800827e:	4604      	mov	r4, r0
 8008280:	b0a3      	sub	sp, #140	; 0x8c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d04c      	beq.n	8008320 <HwClock::HcToSys()+0xa8>
 8008286:	4f2a      	ldr	r7, [pc, #168]	; (8008330 <HwClock::HcToSys()+0xb8>)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	7c1e      	ldrb	r6, [r3, #16]
 800828c:	b136      	cbz	r6, 800829c <HwClock::HcToSys()+0x24>
 800828e:	2200      	movs	r2, #0
 8008290:	2104      	movs	r1, #4
 8008292:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008296:	741a      	strb	r2, [r3, #16]
 8008298:	f000 fca4 	bl	8008be4 <fwdgt_config>
 800829c:	f04f 083c 	mov.w	r8, #60	; 0x3c
 80082a0:	a907      	add	r1, sp, #28
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 f8d2 	bl	800844c <HwClock::RtcGet(rtc_time*)>
 80082a8:	2100      	movs	r1, #0
 80082aa:	a801      	add	r0, sp, #4
 80082ac:	f000 fa56 	bl	800875c <gettimeofday>
 80082b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80082b4:	fb08 2903 	mla	r9, r8, r3, r2
 80082b8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	a819      	add	r0, sp, #100	; 0x64
 80082c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80082c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c4:	931c      	str	r3, [sp, #112]	; 0x70
 80082c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c8:	931d      	str	r3, [sp, #116]	; 0x74
 80082ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082cc:	931e      	str	r3, [sp, #120]	; 0x78
 80082ce:	f000 f9f9 	bl	80086c4 <mktime>
 80082d2:	4605      	mov	r5, r0
 80082d4:	4620      	mov	r0, r4
 80082d6:	a910      	add	r1, sp, #64	; 0x40
 80082d8:	f000 f8b8 	bl	800844c <HwClock::RtcGet(rtc_time*)>
 80082dc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80082e0:	fb08 3302 	mla	r3, r8, r2, r3
 80082e4:	4599      	cmp	r9, r3
 80082e6:	d0f5      	beq.n	80082d4 <HwClock::HcToSys()+0x5c>
 80082e8:	2100      	movs	r1, #0
 80082ea:	a803      	add	r0, sp, #12
 80082ec:	f000 fa36 	bl	800875c <gettimeofday>
 80082f0:	9b01      	ldr	r3, [sp, #4]
 80082f2:	9a03      	ldr	r2, [sp, #12]
 80082f4:	9902      	ldr	r1, [sp, #8]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	9505      	str	r5, [sp, #20]
 80082fa:	9b04      	ldr	r3, [sp, #16]
 80082fc:	d113      	bne.n	8008326 <HwClock::HcToSys()+0xae>
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	f5c3 2274 	rsb	r2, r3, #999424	; 0xf4000
 8008304:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8008308:	2100      	movs	r1, #0
 800830a:	a805      	add	r0, sp, #20
 800830c:	9206      	str	r2, [sp, #24]
 800830e:	f000 fa4f 	bl	80087b0 <settimeofday>
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <HwClock::HcToSys()+0xbc>)
 8008314:	6838      	ldr	r0, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	b10e      	cbz	r6, 8008320 <HwClock::HcToSys()+0xa8>
 800831c:	f7ff ff5a 	bl	80081d4 <Hardware::WatchdogInit()>
 8008320:	b023      	add	sp, #140	; 0x8c
 8008322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008326:	1a5a      	subs	r2, r3, r1
 8008328:	bf48      	it	mi
 800832a:	1aca      	submi	r2, r1, r3
 800832c:	e7ec      	b.n	8008308 <HwClock::HcToSys()+0x90>
 800832e:	bf00      	nop
 8008330:	200017dc 	ldrdcs	r1, [r0], -ip
 8008334:	20001814 	andcs	r1, r0, r4, lsl r8

08008338 <HwClock::Set(rtc_time const*)>:
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	7a86      	ldrb	r6, [r0, #10]
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	b090      	sub	sp, #64	; 0x40
 8008342:	2e00      	cmp	r6, #0
 8008344:	d02b      	beq.n	800839e <HwClock::Set(rtc_time const*)+0x66>
 8008346:	2100      	movs	r1, #0
 8008348:	a801      	add	r0, sp, #4
 800834a:	f000 fa07 	bl	800875c <gettimeofday>
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 f873 	bl	800843c <HwClock::RtcSet(rtc_time const*)>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	a807      	add	r0, sp, #28
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	9308      	str	r3, [sp, #32]
 8008360:	68a3      	ldr	r3, [r4, #8]
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	68e3      	ldr	r3, [r4, #12]
 8008366:	930a      	str	r3, [sp, #40]	; 0x28
 8008368:	6923      	ldr	r3, [r4, #16]
 800836a:	930b      	str	r3, [sp, #44]	; 0x2c
 800836c:	6963      	ldr	r3, [r4, #20]
 800836e:	2400      	movs	r4, #0
 8008370:	930c      	str	r3, [sp, #48]	; 0x30
 8008372:	940f      	str	r4, [sp, #60]	; 0x3c
 8008374:	f000 f9a6 	bl	80086c4 <mktime>
 8008378:	4621      	mov	r1, r4
 800837a:	9003      	str	r0, [sp, #12]
 800837c:	a805      	add	r0, sp, #20
 800837e:	f000 f9ed 	bl	800875c <gettimeofday>
 8008382:	9906      	ldr	r1, [sp, #24]
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	a803      	add	r0, sp, #12
 8008388:	1aca      	subs	r2, r1, r3
 800838a:	bf42      	ittt	mi
 800838c:	1a5b      	submi	r3, r3, r1
 800838e:	f5c3 2274 	rsbmi	r2, r3, #999424	; 0xf4000
 8008392:	f502 7210 	addmi.w	r2, r2, #576	; 0x240
 8008396:	2100      	movs	r1, #0
 8008398:	9204      	str	r2, [sp, #16]
 800839a:	f000 fa09 	bl	80087b0 <settimeofday>
 800839e:	4630      	mov	r0, r6
 80083a0:	b010      	add	sp, #64	; 0x40
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <rtc_configuration()>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083aa:	f000 fd89 	bl	8008ec0 <rcu_osci_on>
 80083ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80083b2:	f000 fd3b 	bl	8008e2c <rcu_osci_stab_wait>
 80083b6:	2801      	cmp	r0, #1
 80083b8:	4604      	mov	r4, r0
 80083ba:	d113      	bne.n	80083e4 <rtc_configuration()+0x40>
 80083bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80083c0:	f000 fd1a 	bl	8008df8 <rcu_rtc_clock_config>
 80083c4:	f640 000f 	movw	r0, #2063	; 0x80f
 80083c8:	f000 fcc8 	bl	8008d5c <rcu_periph_clock_enable>
 80083cc:	f000 fe20 	bl	8009010 <rtc_register_sync_wait>
 80083d0:	f000 fe16 	bl	8009000 <rtc_lwoff_wait>
 80083d4:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80083d8:	f000 fe00 	bl	8008fdc <rtc_prescaler_set>
 80083dc:	f000 fe10 	bl	8009000 <rtc_lwoff_wait>
 80083e0:	4620      	mov	r0, r4
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	2000      	movs	r0, #0
 80083e6:	e7fc      	b.n	80083e2 <rtc_configuration()+0x3e>

080083e8 <HwClock::RtcProbe()>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4604      	mov	r4, r0
 80083ec:	2001      	movs	r0, #1
 80083ee:	f000 fb01 	bl	80089f4 <bkp_data_read>
 80083f2:	f24a 55a5 	movw	r5, #42405	; 0xa5a5
 80083f6:	42a8      	cmp	r0, r5
 80083f8:	d019      	beq.n	800842e <HwClock::RtcProbe()+0x46>
 80083fa:	f7ff ffd3 	bl	80083a4 <rtc_configuration()>
 80083fe:	b908      	cbnz	r0, 8008404 <HwClock::RtcProbe()+0x1c>
 8008400:	72a0      	strb	r0, [r4, #10]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	f000 fdfc 	bl	8009000 <rtc_lwoff_wait>
 8008408:	2000      	movs	r0, #0
 800840a:	f000 f9e9 	bl	80087e0 <time>
 800840e:	f000 fdd5 	bl	8008fbc <rtc_counter_set>
 8008412:	f000 fdf5 	bl	8009000 <rtc_lwoff_wait>
 8008416:	4629      	mov	r1, r5
 8008418:	2001      	movs	r0, #1
 800841a:	f000 fad5 	bl	80089c8 <bkp_data_write>
 800841e:	2303      	movs	r3, #3
 8008420:	7263      	strb	r3, [r4, #9]
 8008422:	2301      	movs	r3, #1
 8008424:	72a3      	strb	r3, [r4, #10]
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <HwClock::RtcProbe()+0x50>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	e7e9      	b.n	8008402 <HwClock::RtcProbe()+0x1a>
 800842e:	f000 fdef 	bl	8009010 <rtc_register_sync_wait>
 8008432:	f000 fde5 	bl	8009000 <rtc_lwoff_wait>
 8008436:	e7f2      	b.n	800841e <HwClock::RtcProbe()+0x36>
 8008438:	20001814 	andcs	r1, r0, r4, lsl r8

0800843c <HwClock::RtcSet(rtc_time const*)>:
 800843c:	b508      	push	{r3, lr}
 800843e:	4608      	mov	r0, r1
 8008440:	f000 f940 	bl	80086c4 <mktime>
 8008444:	f000 fdba 	bl	8008fbc <rtc_counter_set>
 8008448:	2001      	movs	r0, #1
 800844a:	bd08      	pop	{r3, pc}

0800844c <HwClock::RtcGet(rtc_time*)>:
 800844c:	b513      	push	{r0, r1, r4, lr}
 800844e:	460c      	mov	r4, r1
 8008450:	f000 fdec 	bl	800902c <rtc_counter_get>
 8008454:	9001      	str	r0, [sp, #4]
 8008456:	a801      	add	r0, sp, #4
 8008458:	f000 f8f0 	bl	800863c <localtime>
 800845c:	1e61      	subs	r1, r4, #1
 800845e:	f100 0324 	add.w	r3, r0, #36	; 0x24
 8008462:	4298      	cmp	r0, r3
 8008464:	d102      	bne.n	800846c <HwClock::RtcGet(rtc_time*)+0x20>
 8008466:	2001      	movs	r0, #1
 8008468:	b002      	add	sp, #8
 800846a:	bd10      	pop	{r4, pc}
 800846c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008470:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008474:	e7f5      	b.n	8008462 <HwClock::RtcGet(rtc_time*)+0x16>

08008476 <operator delete(void*)>:
 8008476:	f000 b851 	b.w	800851c <free>

0800847a <operator delete[](void*)>:
 800847a:	f000 b84f 	b.w	800851c <free>

0800847e <operator new(unsigned int)>:
 800847e:	f000 b803 	b.w	8008488 <malloc>

08008482 <operator new[](unsigned int)>:
 8008482:	f000 b801 	b.w	8008488 <malloc>
	...

08008488 <malloc>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	4601      	mov	r1, r0
 800848e:	481c      	ldr	r0, [pc, #112]	; (8008500 <malloc+0x78>)
 8008490:	f7f9 fdde 	bl	8002050 <printf>
 8008494:	b17c      	cbz	r4, 80084b6 <malloc+0x2e>
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <malloc+0x7c>)
 8008498:	6818      	ldr	r0, [r3, #0]
 800849a:	b978      	cbnz	r0, 80084bc <malloc+0x34>
 800849c:	4a1a      	ldr	r2, [pc, #104]	; (8008508 <malloc+0x80>)
 800849e:	f104 031b 	add.w	r3, r4, #27
 80084a2:	6811      	ldr	r1, [r2, #0]
 80084a4:	4819      	ldr	r0, [pc, #100]	; (800850c <malloc+0x84>)
 80084a6:	f023 030f 	bic.w	r3, r3, #15
 80084aa:	440b      	add	r3, r1
 80084ac:	4283      	cmp	r3, r0
 80084ae:	d921      	bls.n	80084f4 <malloc+0x6c>
 80084b0:	4817      	ldr	r0, [pc, #92]	; (8008510 <malloc+0x88>)
 80084b2:	f7f9 fdcd 	bl	8002050 <printf>
 80084b6:	2500      	movs	r5, #0
 80084b8:	4628      	mov	r0, r5
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	4284      	cmp	r4, r0
 80084be:	d80a      	bhi.n	80084d6 <malloc+0x4e>
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	6899      	ldr	r1, [r3, #8]
 80084c4:	3201      	adds	r2, #1
 80084c6:	428a      	cmp	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	d900      	bls.n	80084ce <malloc+0x46>
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	68d9      	ldr	r1, [r3, #12]
 80084d0:	b919      	cbnz	r1, 80084da <malloc+0x52>
 80084d2:	4604      	mov	r4, r0
 80084d4:	e7e2      	b.n	800849c <malloc+0x14>
 80084d6:	3310      	adds	r3, #16
 80084d8:	e7de      	b.n	8008498 <malloc+0x10>
 80084da:	4604      	mov	r4, r0
 80084dc:	688a      	ldr	r2, [r1, #8]
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	2300      	movs	r3, #0
 80084e2:	f101 050c 	add.w	r5, r1, #12
 80084e6:	608b      	str	r3, [r1, #8]
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	4809      	ldr	r0, [pc, #36]	; (8008514 <malloc+0x8c>)
 80084ee:	f7f9 fdaf 	bl	8002050 <printf>
 80084f2:	e7e1      	b.n	80084b8 <malloc+0x30>
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <malloc+0x90>)
 80084f8:	e9c1 3400 	strd	r3, r4, [r1]
 80084fc:	e7f0      	b.n	80084e0 <malloc+0x58>
 80084fe:	bf00      	nop
 8008500:	0800b51c 	stmdaeq	r0, {r2, r3, r4, r8, sl, ip, sp, pc}
 8008504:	20000010 	andcs	r0, r0, r0, lsl r0
 8008508:	2000000c 	andcs	r0, r0, ip
 800850c:	2000b000 	andcs	fp, r0, r0
 8008510:	0800b528 	stmdaeq	r0, {r3, r5, r8, sl, ip, sp, pc}
 8008514:	0800b544 	stmdaeq	r0, {r2, r6, r8, sl, ip, sp, pc}
 8008518:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0800851c <free>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4604      	mov	r4, r0
 8008520:	b1c8      	cbz	r0, 8008556 <free+0x3a>
 8008522:	f1a0 050c 	sub.w	r5, r0, #12
 8008526:	4602      	mov	r2, r0
 8008528:	4629      	mov	r1, r5
 800852a:	480c      	ldr	r0, [pc, #48]	; (800855c <free+0x40>)
 800852c:	f7f9 fd90 	bl	8002050 <printf>
 8008530:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <free+0x44>)
 8008536:	429a      	cmp	r2, r3
 8008538:	d10d      	bne.n	8008556 <free+0x3a>
 800853a:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <free+0x48>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	b152      	cbz	r2, 8008556 <free+0x3a>
 8008540:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8008544:	4291      	cmp	r1, r2
 8008546:	d107      	bne.n	8008558 <free+0x3c>
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	f844 2c04 	str.w	r2, [r4, #-4]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	60dd      	str	r5, [r3, #12]
 8008552:	3a01      	subs	r2, #1
 8008554:	605a      	str	r2, [r3, #4]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	3310      	adds	r3, #16
 800855a:	e7ef      	b.n	800853c <free+0x20>
 800855c:	0800b56f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, pc}
 8008560:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8008564:	20000010 	andcs	r0, r0, r0, lsl r0

08008568 <memcpy>:
 8008568:	b510      	push	{r4, lr}
 800856a:	1e43      	subs	r3, r0, #1
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	d100      	bne.n	8008574 <memcpy+0xc>
 8008572:	bd10      	pop	{r4, pc}
 8008574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857c:	e7f7      	b.n	800856e <memcpy+0x6>

0800857e <memmove>:
 800857e:	4288      	cmp	r0, r1
 8008580:	b510      	push	{r4, lr}
 8008582:	eb01 0302 	add.w	r3, r1, r2
 8008586:	d208      	bcs.n	800859a <memmove+0x1c>
 8008588:	1e42      	subs	r2, r0, #1
 800858a:	4299      	cmp	r1, r3
 800858c:	d100      	bne.n	8008590 <memmove+0x12>
 800858e:	bd10      	pop	{r4, pc}
 8008590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008594:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008598:	e7f7      	b.n	800858a <memmove+0xc>
 800859a:	4601      	mov	r1, r0
 800859c:	4402      	add	r2, r0
 800859e:	428a      	cmp	r2, r1
 80085a0:	d0f5      	beq.n	800858e <memmove+0x10>
 80085a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085aa:	e7f8      	b.n	800859e <memmove+0x20>

080085ac <memset>:
 80085ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ae:	b1c2      	cbz	r2, 80085e2 <memset+0x36>
 80085b0:	4603      	mov	r3, r0
 80085b2:	b2c9      	uxtb	r1, r1
 80085b4:	075c      	lsls	r4, r3, #29
 80085b6:	d110      	bne.n	80085da <memset+0x2e>
 80085b8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80085bc:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80085c0:	463d      	mov	r5, r7
 80085c2:	461e      	mov	r6, r3
 80085c4:	f022 0407 	bic.w	r4, r2, #7
 80085c8:	441c      	add	r4, r3
 80085ca:	42a6      	cmp	r6, r4
 80085cc:	d10a      	bne.n	80085e4 <memset+0x38>
 80085ce:	4413      	add	r3, r2
 80085d0:	429c      	cmp	r4, r3
 80085d2:	d006      	beq.n	80085e2 <memset+0x36>
 80085d4:	f804 1b01 	strb.w	r1, [r4], #1
 80085d8:	e7fa      	b.n	80085d0 <memset+0x24>
 80085da:	3a01      	subs	r2, #1
 80085dc:	f803 1b01 	strb.w	r1, [r3], #1
 80085e0:	d1e8      	bne.n	80085b4 <memset+0x8>
 80085e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e4:	f846 7b08 	str.w	r7, [r6], #8
 80085e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80085ec:	e7ed      	b.n	80085ca <memset+0x1e>

080085ee <isleapyear>:
 80085ee:	2264      	movs	r2, #100	; 0x64
 80085f0:	fb90 f3f2 	sdiv	r3, r0, r2
 80085f4:	fb02 0313 	mls	r3, r2, r3, r0
 80085f8:	b94b      	cbnz	r3, 800860e <isleapyear+0x20>
 80085fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80085fe:	fb90 f2f3 	sdiv	r2, r0, r3
 8008602:	fb03 0012 	mls	r0, r3, r2, r0
 8008606:	fab0 f080 	clz	r0, r0
 800860a:	0940      	lsrs	r0, r0, #5
 800860c:	4770      	bx	lr
 800860e:	f010 0f03 	tst.w	r0, #3
 8008612:	bf0c      	ite	eq
 8008614:	2001      	moveq	r0, #1
 8008616:	2000      	movne	r0, #0
 8008618:	4770      	bx	lr
	...

0800861c <getdaysofmonth>:
 800861c:	b510      	push	{r4, lr}
 800861e:	4604      	mov	r4, r0
 8008620:	2c01      	cmp	r4, #1
 8008622:	4608      	mov	r0, r1
 8008624:	d102      	bne.n	800862c <getdaysofmonth+0x10>
 8008626:	f7ff ffe2 	bl	80085ee <isleapyear>
 800862a:	b918      	cbnz	r0, 8008634 <getdaysofmonth+0x18>
 800862c:	4b02      	ldr	r3, [pc, #8]	; (8008638 <getdaysofmonth+0x1c>)
 800862e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008632:	bd10      	pop	{r4, pc}
 8008634:	201d      	movs	r0, #29
 8008636:	e7fc      	b.n	8008632 <getdaysofmonth+0x16>
 8008638:	0800b598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, sp, pc}

0800863c <localtime>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	2800      	cmp	r0, #0
 8008640:	d03c      	beq.n	80086bc <localtime+0x80>
 8008642:	213c      	movs	r1, #60	; 0x3c
 8008644:	6803      	ldr	r3, [r0, #0]
 8008646:	4d1e      	ldr	r5, [pc, #120]	; (80086c0 <localtime+0x84>)
 8008648:	fb93 f2f1 	sdiv	r2, r3, r1
 800864c:	fb01 3312 	mls	r3, r1, r2, r3
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	fb92 f3f1 	sdiv	r3, r2, r1
 8008656:	fb01 2213 	mls	r2, r1, r3, r2
 800865a:	606a      	str	r2, [r5, #4]
 800865c:	2218      	movs	r2, #24
 800865e:	fb93 f4f2 	sdiv	r4, r3, r2
 8008662:	fb02 3314 	mls	r3, r2, r4, r3
 8008666:	60ab      	str	r3, [r5, #8]
 8008668:	2307      	movs	r3, #7
 800866a:	1d22      	adds	r2, r4, #4
 800866c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008670:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8008674:	f240 166d 	movw	r6, #365	; 0x16d
 8008678:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800867c:	1ad2      	subs	r2, r2, r3
 800867e:	61aa      	str	r2, [r5, #24]
 8008680:	4608      	mov	r0, r1
 8008682:	f7ff ffb4 	bl	80085ee <isleapyear>
 8008686:	2800      	cmp	r0, #0
 8008688:	bf14      	ite	ne
 800868a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 800868e:	4633      	moveq	r3, r6
 8008690:	429c      	cmp	r4, r3
 8008692:	db02      	blt.n	800869a <localtime+0x5e>
 8008694:	1ae4      	subs	r4, r4, r3
 8008696:	3101      	adds	r1, #1
 8008698:	e7f2      	b.n	8008680 <localtime+0x44>
 800869a:	2600      	movs	r6, #0
 800869c:	f2a1 736c 	subw	r3, r1, #1900	; 0x76c
 80086a0:	616b      	str	r3, [r5, #20]
 80086a2:	61ec      	str	r4, [r5, #28]
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7ff ffb9 	bl	800861c <getdaysofmonth>
 80086aa:	4284      	cmp	r4, r0
 80086ac:	db02      	blt.n	80086b4 <localtime+0x78>
 80086ae:	1a24      	subs	r4, r4, r0
 80086b0:	3601      	adds	r6, #1
 80086b2:	e7f7      	b.n	80086a4 <localtime+0x68>
 80086b4:	3401      	adds	r4, #1
 80086b6:	4802      	ldr	r0, [pc, #8]	; (80086c0 <localtime+0x84>)
 80086b8:	612e      	str	r6, [r5, #16]
 80086ba:	60ec      	str	r4, [r5, #12]
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
 80086be:	bf00      	nop
 80086c0:	200017e4 	andcs	r1, r0, r4, ror #15

080086c4 <mktime>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d043      	beq.n	8008756 <mktime+0x92>
 80086ce:	6941      	ldr	r1, [r0, #20]
 80086d0:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80086d4:	2b45      	cmp	r3, #69	; 0x45
 80086d6:	d83e      	bhi.n	8008756 <mktime+0x92>
 80086d8:	2600      	movs	r6, #0
 80086da:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80086de:	f240 186d 	movw	r8, #365	; 0x16d
 80086e2:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80086e6:	42af      	cmp	r7, r5
 80086e8:	da24      	bge.n	8008734 <mktime+0x70>
 80086ea:	6927      	ldr	r7, [r4, #16]
 80086ec:	2f0b      	cmp	r7, #11
 80086ee:	d832      	bhi.n	8008756 <mktime+0x92>
 80086f0:	2500      	movs	r5, #0
 80086f2:	42af      	cmp	r7, r5
 80086f4:	d129      	bne.n	800874a <mktime+0x86>
 80086f6:	68e5      	ldr	r5, [r4, #12]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	dd2c      	ble.n	8008756 <mktime+0x92>
 80086fc:	4638      	mov	r0, r7
 80086fe:	f7ff ff8d 	bl	800861c <getdaysofmonth>
 8008702:	4285      	cmp	r5, r0
 8008704:	dc27      	bgt.n	8008756 <mktime+0x92>
 8008706:	2318      	movs	r3, #24
 8008708:	3d01      	subs	r5, #1
 800870a:	4435      	add	r5, r6
 800870c:	435d      	muls	r5, r3
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	2b17      	cmp	r3, #23
 8008712:	d820      	bhi.n	8008756 <mktime+0x92>
 8008714:	213c      	movs	r1, #60	; 0x3c
 8008716:	442b      	add	r3, r5
 8008718:	fb01 f203 	mul.w	r2, r1, r3
 800871c:	6863      	ldr	r3, [r4, #4]
 800871e:	2b3b      	cmp	r3, #59	; 0x3b
 8008720:	d819      	bhi.n	8008756 <mktime+0x92>
 8008722:	6820      	ldr	r0, [r4, #0]
 8008724:	4413      	add	r3, r2
 8008726:	283b      	cmp	r0, #59	; 0x3b
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	d813      	bhi.n	8008756 <mktime+0x92>
 800872e:	4418      	add	r0, r3
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	4628      	mov	r0, r5
 8008736:	f7ff ff5a 	bl	80085ee <isleapyear>
 800873a:	2800      	cmp	r0, #0
 800873c:	bf14      	ite	ne
 800873e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8008742:	4643      	moveq	r3, r8
 8008744:	3501      	adds	r5, #1
 8008746:	441e      	add	r6, r3
 8008748:	e7cd      	b.n	80086e6 <mktime+0x22>
 800874a:	4628      	mov	r0, r5
 800874c:	f7ff ff66 	bl	800861c <getdaysofmonth>
 8008750:	3501      	adds	r5, #1
 8008752:	4406      	add	r6, r0
 8008754:	e7cd      	b.n	80086f2 <mktime+0x2e>
 8008756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800875a:	e7e9      	b.n	8008730 <mktime+0x6c>

0800875c <gettimeofday>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <gettimeofday+0x44>)
 8008760:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <gettimeofday+0x48>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6814      	ldr	r4, [r2, #0]
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800876c:	429c      	cmp	r4, r3
 800876e:	bf2c      	ite	cs
 8008770:	1ae4      	subcs	r4, r4, r3
 8008772:	1b1c      	subcc	r4, r3, r4
 8008774:	4354      	muls	r4, r2
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <gettimeofday+0x4c>)
 8008778:	4605      	mov	r5, r0
 800877a:	e9d3 2100 	ldrd	r2, r1, [r3]
 800877e:	18a4      	adds	r4, r4, r2
 8008780:	f141 0100 	adc.w	r1, r1, #0
 8008784:	e9c3 4100 	strd	r4, r1, [r3]
 8008788:	4620      	mov	r0, r4
 800878a:	2300      	movs	r3, #0
 800878c:	4a07      	ldr	r2, [pc, #28]	; (80087ac <gettimeofday+0x50>)
 800878e:	f7f7 fcdf 	bl	8000150 <__aeabi_uldivmod>
 8008792:	4b06      	ldr	r3, [pc, #24]	; (80087ac <gettimeofday+0x50>)
 8008794:	6028      	str	r0, [r5, #0]
 8008796:	fb03 4410 	mls	r4, r3, r0, r4
 800879a:	2000      	movs	r0, #0
 800879c:	606c      	str	r4, [r5, #4]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20001814 	andcs	r1, r0, r4, lsl r8
 80087a4:	20001810 	andcs	r1, r0, r0, lsl r8
 80087a8:	20001808 	andcs	r1, r0, r8, lsl #16
 80087ac:	000f4240 	andeq	r4, pc, r0, asr #4

080087b0 <settimeofday>:
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <settimeofday+0x20>)
 80087b2:	b510      	push	{r4, lr}
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4b07      	ldr	r3, [pc, #28]	; (80087d4 <settimeofday+0x24>)
 80087b8:	6804      	ldr	r4, [r0, #0]
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	6843      	ldr	r3, [r0, #4]
 80087be:	4806      	ldr	r0, [pc, #24]	; (80087d8 <settimeofday+0x28>)
 80087c0:	17da      	asrs	r2, r3, #31
 80087c2:	fbc4 3200 	smlal	r3, r2, r4, r0
 80087c6:	4905      	ldr	r1, [pc, #20]	; (80087dc <settimeofday+0x2c>)
 80087c8:	2000      	movs	r0, #0
 80087ca:	e9c1 3200 	strd	r3, r2, [r1]
 80087ce:	bd10      	pop	{r4, pc}
 80087d0:	20001814 	andcs	r1, r0, r4, lsl r8
 80087d4:	20001810 	andcs	r1, r0, r0, lsl r8
 80087d8:	000f4240 	andeq	r4, pc, r0, asr #4
 80087dc:	20001808 	andcs	r1, r0, r8, lsl #16

080087e0 <time>:
 80087e0:	b513      	push	{r0, r1, r4, lr}
 80087e2:	4604      	mov	r4, r0
 80087e4:	2100      	movs	r1, #0
 80087e6:	4668      	mov	r0, sp
 80087e8:	f7ff ffb8 	bl	800875c <gettimeofday>
 80087ec:	9800      	ldr	r0, [sp, #0]
 80087ee:	b104      	cbz	r4, 80087f2 <time+0x12>
 80087f0:	6020      	str	r0, [r4, #0]
 80087f2:	b002      	add	sp, #8
 80087f4:	bd10      	pop	{r4, pc}
	...

080087f8 <uart0_init>:
 80087f8:	2301      	movs	r3, #1
 80087fa:	b507      	push	{r0, r1, r2, lr}
 80087fc:	2208      	movs	r2, #8
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008804:	2300      	movs	r3, #0
 8008806:	4803      	ldr	r0, [pc, #12]	; (8008814 <uart0_init+0x1c>)
 8008808:	f001 f884 	bl	8009914 <gd32_uart_begin>
 800880c:	b003      	add	sp, #12
 800880e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008812:	bf00      	nop
 8008814:	40013800 	andmi	r3, r1, r0, lsl #16

08008818 <uart0_putc>:
 8008818:	280a      	cmp	r0, #10
 800881a:	b538      	push	{r3, r4, r5, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	d10a      	bne.n	8008836 <uart0_putc+0x1e>
 8008820:	4d0b      	ldr	r5, [pc, #44]	; (8008850 <uart0_putc+0x38>)
 8008822:	2107      	movs	r1, #7
 8008824:	4628      	mov	r0, r5
 8008826:	f000 fda7 	bl	8009378 <usart_flag_get>
 800882a:	2800      	cmp	r0, #0
 800882c:	d0f9      	beq.n	8008822 <uart0_putc+0xa>
 800882e:	220d      	movs	r2, #13
 8008830:	4b08      	ldr	r3, [pc, #32]	; (8008854 <uart0_putc+0x3c>)
 8008832:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8008836:	4d06      	ldr	r5, [pc, #24]	; (8008850 <uart0_putc+0x38>)
 8008838:	2107      	movs	r1, #7
 800883a:	4628      	mov	r0, r5
 800883c:	f000 fd9c 	bl	8009378 <usart_flag_get>
 8008840:	2800      	cmp	r0, #0
 8008842:	d0f9      	beq.n	8008838 <uart0_putc+0x20>
 8008844:	4b03      	ldr	r3, [pc, #12]	; (8008854 <uart0_putc+0x3c>)
 8008846:	b2e4      	uxtb	r4, r4
 8008848:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	bf00      	nop
 8008850:	40013800 	andmi	r3, r1, r0, lsl #16
 8008854:	40013000 	andmi	r3, r1, r0

08008858 <uart0_puts>:
 8008858:	b510      	push	{r4, lr}
 800885a:	1e44      	subs	r4, r0, #1
 800885c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008860:	b903      	cbnz	r3, 8008864 <uart0_puts+0xc>
 8008862:	bd10      	pop	{r4, pc}
 8008864:	2b0a      	cmp	r3, #10
 8008866:	d102      	bne.n	800886e <uart0_puts+0x16>
 8008868:	200d      	movs	r0, #13
 800886a:	f7ff ffd5 	bl	8008818 <uart0_putc>
 800886e:	7820      	ldrb	r0, [r4, #0]
 8008870:	f7ff ffd2 	bl	8008818 <uart0_putc>
 8008874:	e7f2      	b.n	800885c <uart0_puts+0x4>
	...

08008878 <mac_address_get>:
 8008878:	2102      	movs	r1, #2
 800887a:	4a07      	ldr	r2, [pc, #28]	; (8008898 <mac_address_get+0x20>)
 800887c:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8008880:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8008884:	7001      	strb	r1, [r0, #0]
 8008886:	7042      	strb	r2, [r0, #1]
 8008888:	0e1a      	lsrs	r2, r3, #24
 800888a:	7082      	strb	r2, [r0, #2]
 800888c:	0c1a      	lsrs	r2, r3, #16
 800888e:	70c2      	strb	r2, [r0, #3]
 8008890:	0a1a      	lsrs	r2, r3, #8
 8008892:	7102      	strb	r2, [r0, #4]
 8008894:	7143      	strb	r3, [r0, #5]
 8008896:	4770      	bx	lr
 8008898:	1ffff000 	svcne	0x00fff000

0800889c <systick_config>:
 800889c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088a0:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <systick_config+0x34>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a8:	3b01      	subs	r3, #1
 80088aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088ae:	d20d      	bcs.n	80088cc <systick_config+0x30>
 80088b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80088b4:	21f0      	movs	r1, #240	; 0xf0
 80088b6:	6153      	str	r3, [r2, #20]
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <systick_config+0x38>)
 80088ba:	2007      	movs	r0, #7
 80088bc:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088c0:	2100      	movs	r1, #0
 80088c2:	6191      	str	r1, [r2, #24]
 80088c4:	6110      	str	r0, [r2, #16]
 80088c6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80088ca:	4770      	bx	lr
 80088cc:	e7fe      	b.n	80088cc <systick_config+0x30>
 80088ce:	bf00      	nop
 80088d0:	200000e0 	andcs	r0, r0, r0, ror #1
 80088d4:	e000ed00 	and	lr, r0, r0, lsl #26

080088d8 <SysTick_Handler>:
 80088d8:	4a02      	ldr	r2, [pc, #8]	; (80088e4 <SysTick_Handler+0xc>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20001814 	andcs	r1, r0, r4, lsl r8

080088e8 <SystemInit>:
 80088e8:	4b30      	ldr	r3, [pc, #192]	; (80089ac <SystemInit+0xc4>)
 80088ea:	4931      	ldr	r1, [pc, #196]	; (80089b0 <SystemInit+0xc8>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	f042 0201 	orr.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	f022 0203 	bic.w	r2, r2, #3
 80088fa:	605a      	str	r2, [r3, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	400a      	ands	r2, r1
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	6858      	ldr	r0, [r3, #4]
 8008904:	4a2b      	ldr	r2, [pc, #172]	; (80089b4 <SystemInit+0xcc>)
 8008906:	4002      	ands	r2, r0
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	400a      	ands	r2, r1
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	f022 620f 	bic.w	r2, r2, #149946368	; 0x8f00000
 800891e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008922:	605a      	str	r2, [r3, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	400a      	ands	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800892e:	609a      	str	r2, [r3, #8]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800893c:	6819      	ldr	r1, [r3, #0]
 800893e:	0389      	lsls	r1, r1, #14
 8008940:	d401      	bmi.n	8008946 <SystemInit+0x5e>
 8008942:	3a01      	subs	r2, #1
 8008944:	d1fa      	bne.n	800893c <SystemInit+0x54>
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	0390      	lsls	r0, r2, #14
 800894a:	d400      	bmi.n	800894e <SystemInit+0x66>
 800894c:	e7fe      	b.n	800894c <SystemInit+0x64>
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	605a      	str	r2, [r3, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800895c:	605a      	str	r2, [r3, #4]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008964:	605a      	str	r2, [r3, #4]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 8008974:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8008978:	605a      	str	r2, [r3, #4]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	f042 6202 	orr.w	r2, r2, #136314880	; 0x8200000
 8008980:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	0191      	lsls	r1, r2, #6
 8008992:	d5fc      	bpl.n	800898e <SystemInit+0xa6>
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	f022 0203 	bic.w	r2, r2, #3
 800899a:	605a      	str	r2, [r3, #4]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	f042 0202 	orr.w	r2, r2, #2
 80089a2:	605a      	str	r2, [r3, #4]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	0712      	lsls	r2, r2, #28
 80089a8:	d5fc      	bpl.n	80089a4 <SystemInit+0xbc>
 80089aa:	4770      	bx	lr
 80089ac:	40021000 	andmi	r1, r2, r0
 80089b0:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80089b4:	e8ff000c 	ldm	pc!, {r2, r3}^	; <UNPREDICTABLE>

080089b8 <bkp_deinit>:
 80089b8:	b508      	push	{r3, lr}
 80089ba:	f000 f9ef 	bl	8008d9c <rcu_bkp_reset_enable>
 80089be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089c2:	f000 b9f3 	b.w	8008dac <rcu_bkp_reset_disable>
	...

080089c8 <bkp_data_write>:
 80089c8:	f1a0 030b 	sub.w	r3, r0, #11
 80089cc:	2b1f      	cmp	r3, #31
 80089ce:	d804      	bhi.n	80089da <bkp_data_write+0x12>
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <bkp_data_write+0x28>)
 80089d2:	4403      	add	r3, r0
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	8019      	strh	r1, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	1e43      	subs	r3, r0, #1
 80089dc:	2b09      	cmp	r3, #9
 80089de:	bf9f      	itttt	ls
 80089e0:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80089e4:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80089e8:	0080      	lslls	r0, r0, #2
 80089ea:	8001      	strhls	r1, [r0, #0]
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	10001b05 	andne	r1, r0, r5, lsl #22

080089f4 <bkp_data_read>:
 80089f4:	f1a0 030b 	sub.w	r3, r0, #11
 80089f8:	2b1f      	cmp	r3, #31
 80089fa:	d805      	bhi.n	8008a08 <bkp_data_read+0x14>
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <bkp_data_read+0x2c>)
 80089fe:	4403      	add	r3, r0
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	8818      	ldrh	r0, [r3, #0]
 8008a04:	b280      	uxth	r0, r0
 8008a06:	4770      	bx	lr
 8008a08:	1e43      	subs	r3, r0, #1
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d806      	bhi.n	8008a1c <bkp_data_read+0x28>
 8008a0e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8008a12:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8008a16:	0080      	lsls	r0, r0, #2
 8008a18:	8800      	ldrh	r0, [r0, #0]
 8008a1a:	e7f3      	b.n	8008a04 <bkp_data_read+0x10>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4770      	bx	lr
 8008a20:	10001b05 	andne	r1, r0, r5, lsl #22

08008a24 <dma_deinit>:
 8008a24:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <dma_deinit+0x34>)
 8008a26:	4298      	cmp	r0, r3
 8008a28:	d102      	bne.n	8008a30 <dma_deinit+0xc>
 8008a2a:	2904      	cmp	r1, #4
 8008a2c:	d900      	bls.n	8008a30 <dma_deinit+0xc>
 8008a2e:	e7fe      	b.n	8008a2e <dma_deinit+0xa>
 8008a30:	2314      	movs	r3, #20
 8008a32:	fb03 0301 	mla	r3, r3, r1, r0
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	0089      	lsls	r1, r1, #2
 8008a3a:	f022 0201 	bic.w	r2, r2, #1
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	2200      	movs	r2, #0
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	611a      	str	r2, [r3, #16]
 8008a48:	615a      	str	r2, [r3, #20]
 8008a4a:	230f      	movs	r3, #15
 8008a4c:	6842      	ldr	r2, [r0, #4]
 8008a4e:	408b      	lsls	r3, r1
 8008a50:	4313      	orrs	r3, r2
 8008a52:	6043      	str	r3, [r0, #4]
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40020400 	andmi	r0, r2, r0, lsl #8

08008a5c <dma_struct_para_init>:
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a62:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8008a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a6a:	8303      	strh	r3, [r0, #24]
 8008a6c:	7683      	strb	r3, [r0, #26]
 8008a6e:	4770      	bx	lr

08008a70 <dma_init>:
 8008a70:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <dma_init+0x70>)
 8008a72:	b510      	push	{r4, lr}
 8008a74:	4298      	cmp	r0, r3
 8008a76:	d102      	bne.n	8008a7e <dma_init+0xe>
 8008a78:	2904      	cmp	r1, #4
 8008a7a:	d900      	bls.n	8008a7e <dma_init+0xe>
 8008a7c:	e7fe      	b.n	8008a7c <dma_init+0xc>
 8008a7e:	2314      	movs	r3, #20
 8008a80:	fb03 0101 	mla	r1, r3, r1, r0
 8008a84:	6813      	ldr	r3, [r2, #0]
 8008a86:	610b      	str	r3, [r1, #16]
 8008a88:	6893      	ldr	r3, [r2, #8]
 8008a8a:	614b      	str	r3, [r1, #20]
 8008a8c:	8a13      	ldrh	r3, [r2, #16]
 8008a8e:	60cb      	str	r3, [r1, #12]
 8008a90:	68d4      	ldr	r4, [r2, #12]
 8008a92:	6853      	ldr	r3, [r2, #4]
 8008a94:	6888      	ldr	r0, [r1, #8]
 8008a96:	4323      	orrs	r3, r4
 8008a98:	6954      	ldr	r4, [r2, #20]
 8008a9a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8008a9e:	4323      	orrs	r3, r4
 8008aa0:	4303      	orrs	r3, r0
 8008aa2:	608b      	str	r3, [r1, #8]
 8008aa4:	7e13      	ldrb	r3, [r2, #24]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	688b      	ldr	r3, [r1, #8]
 8008aaa:	bf0c      	ite	eq
 8008aac:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8008ab0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8008ab4:	608b      	str	r3, [r1, #8]
 8008ab6:	7e53      	ldrb	r3, [r2, #25]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	688b      	ldr	r3, [r1, #8]
 8008abc:	bf0c      	ite	eq
 8008abe:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8008ac2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8008ac6:	608b      	str	r3, [r1, #8]
 8008ac8:	7e93      	ldrb	r3, [r2, #26]
 8008aca:	b923      	cbnz	r3, 8008ad6 <dma_init+0x66>
 8008acc:	688b      	ldr	r3, [r1, #8]
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	608b      	str	r3, [r1, #8]
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	688b      	ldr	r3, [r1, #8]
 8008ad8:	f043 0310 	orr.w	r3, r3, #16
 8008adc:	e7f9      	b.n	8008ad2 <dma_init+0x62>
 8008ade:	bf00      	nop
 8008ae0:	40020400 	andmi	r0, r2, r0, lsl #8

08008ae4 <dma_circulation_disable>:
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <dma_circulation_disable+0x1c>)
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	d102      	bne.n	8008af0 <dma_circulation_disable+0xc>
 8008aea:	2904      	cmp	r1, #4
 8008aec:	d900      	bls.n	8008af0 <dma_circulation_disable+0xc>
 8008aee:	e7fe      	b.n	8008aee <dma_circulation_disable+0xa>
 8008af0:	2314      	movs	r3, #20
 8008af2:	4359      	muls	r1, r3
 8008af4:	3008      	adds	r0, #8
 8008af6:	580b      	ldr	r3, [r1, r0]
 8008af8:	f023 0320 	bic.w	r3, r3, #32
 8008afc:	500b      	str	r3, [r1, r0]
 8008afe:	4770      	bx	lr
 8008b00:	40020400 	andmi	r0, r2, r0, lsl #8

08008b04 <dma_memory_to_memory_disable>:
 8008b04:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <dma_memory_to_memory_disable+0x1c>)
 8008b06:	4298      	cmp	r0, r3
 8008b08:	d102      	bne.n	8008b10 <dma_memory_to_memory_disable+0xc>
 8008b0a:	2904      	cmp	r1, #4
 8008b0c:	d900      	bls.n	8008b10 <dma_memory_to_memory_disable+0xc>
 8008b0e:	e7fe      	b.n	8008b0e <dma_memory_to_memory_disable+0xa>
 8008b10:	2314      	movs	r3, #20
 8008b12:	4359      	muls	r1, r3
 8008b14:	3008      	adds	r0, #8
 8008b16:	580b      	ldr	r3, [r1, r0]
 8008b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1c:	500b      	str	r3, [r1, r0]
 8008b1e:	4770      	bx	lr
 8008b20:	40020400 	andmi	r0, r2, r0, lsl #8

08008b24 <fmc_bank0_unlock>:
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <fmc_bank0_unlock+0x14>)
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	0612      	lsls	r2, r2, #24
 8008b2a:	bf41      	itttt	mi
 8008b2c:	4a03      	ldrmi	r2, [pc, #12]	; (8008b3c <fmc_bank0_unlock+0x18>)
 8008b2e:	605a      	strmi	r2, [r3, #4]
 8008b30:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008b34:	605a      	strmi	r2, [r3, #4]
 8008b36:	4770      	bx	lr
 8008b38:	40022000 	andmi	r2, r2, r0
 8008b3c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008b40 <fmc_bank1_unlock>:
 8008b40:	4b04      	ldr	r3, [pc, #16]	; (8008b54 <fmc_bank1_unlock+0x14>)
 8008b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b44:	0612      	lsls	r2, r2, #24
 8008b46:	bf41      	itttt	mi
 8008b48:	4a03      	ldrmi	r2, [pc, #12]	; (8008b58 <fmc_bank1_unlock+0x18>)
 8008b4a:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008b4c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8008b50:	645a      	strmi	r2, [r3, #68]	; 0x44
 8008b52:	4770      	bx	lr
 8008b54:	40022000 	andmi	r2, r2, r0
 8008b58:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08008b5c <fmc_bank0_lock>:
 8008b5c:	4a02      	ldr	r2, [pc, #8]	; (8008b68 <fmc_bank0_lock+0xc>)
 8008b5e:	6913      	ldr	r3, [r2, #16]
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	6113      	str	r3, [r2, #16]
 8008b66:	4770      	bx	lr
 8008b68:	40022000 	andmi	r2, r2, r0

08008b6c <fmc_bank1_lock>:
 8008b6c:	4a02      	ldr	r2, [pc, #8]	; (8008b78 <fmc_bank1_lock+0xc>)
 8008b6e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b74:	6513      	str	r3, [r2, #80]	; 0x50
 8008b76:	4770      	bx	lr
 8008b78:	40022000 	andmi	r2, r2, r0

08008b7c <fmc_bank0_state_get>:
 8008b7c:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <fmc_bank0_state_get+0x20>)
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	07d1      	lsls	r1, r2, #31
 8008b82:	d407      	bmi.n	8008b94 <fmc_bank0_state_get+0x18>
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	06d2      	lsls	r2, r2, #27
 8008b88:	d406      	bmi.n	8008b98 <fmc_bank0_state_get+0x1c>
 8008b8a:	68d8      	ldr	r0, [r3, #12]
 8008b8c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008b90:	0040      	lsls	r0, r0, #1
 8008b92:	4770      	bx	lr
 8008b94:	2001      	movs	r0, #1
 8008b96:	4770      	bx	lr
 8008b98:	2003      	movs	r0, #3
 8008b9a:	4770      	bx	lr
 8008b9c:	40022000 	andmi	r2, r2, r0

08008ba0 <fmc_bank1_state_get>:
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <fmc_bank1_state_get+0x20>)
 8008ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba4:	07d1      	lsls	r1, r2, #31
 8008ba6:	d407      	bmi.n	8008bb8 <fmc_bank1_state_get+0x18>
 8008ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008baa:	06d2      	lsls	r2, r2, #27
 8008bac:	d406      	bmi.n	8008bbc <fmc_bank1_state_get+0x1c>
 8008bae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008bb0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8008bb4:	0040      	lsls	r0, r0, #1
 8008bb6:	4770      	bx	lr
 8008bb8:	2001      	movs	r0, #1
 8008bba:	4770      	bx	lr
 8008bbc:	2003      	movs	r0, #3
 8008bbe:	4770      	bx	lr
 8008bc0:	40022000 	andmi	r2, r2, r0

08008bc4 <fwdgt_enable>:
 8008bc4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008bc8:	4b01      	ldr	r3, [pc, #4]	; (8008bd0 <fwdgt_enable+0xc>)
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	40003000 	andmi	r3, r0, r0

08008bd4 <fwdgt_counter_reload>:
 8008bd4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008bd8:	4b01      	ldr	r3, [pc, #4]	; (8008be0 <fwdgt_counter_reload+0xc>)
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40003000 	andmi	r3, r0, r0

08008be4 <fwdgt_config>:
 8008be4:	f245 5355 	movw	r3, #21845	; 0x5555
 8008be8:	4a11      	ldr	r2, [pc, #68]	; (8008c30 <fwdgt_config+0x4c>)
 8008bea:	b510      	push	{r4, lr}
 8008bec:	4c11      	ldr	r4, [pc, #68]	; (8008c34 <fwdgt_config+0x50>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	68d3      	ldr	r3, [r2, #12]
 8008bf2:	3c01      	subs	r4, #1
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	d013      	beq.n	8008c22 <fwdgt_config+0x3e>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f8      	bne.n	8008bf0 <fwdgt_config+0xc>
 8008bfe:	6051      	str	r1, [r2, #4]
 8008c00:	490c      	ldr	r1, [pc, #48]	; (8008c34 <fwdgt_config+0x50>)
 8008c02:	4a0b      	ldr	r2, [pc, #44]	; (8008c30 <fwdgt_config+0x4c>)
 8008c04:	68d3      	ldr	r3, [r2, #12]
 8008c06:	3901      	subs	r1, #1
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	d00d      	beq.n	8008c2a <fwdgt_config+0x46>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f8      	bne.n	8008c04 <fwdgt_config+0x20>
 8008c12:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8008c16:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008c1a:	6090      	str	r0, [r2, #8]
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e002      	b.n	8008c28 <fwdgt_config+0x44>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0eb      	beq.n	8008bfe <fwdgt_config+0x1a>
 8008c26:	2000      	movs	r0, #0
 8008c28:	bd10      	pop	{r4, pc}
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1fb      	bne.n	8008c26 <fwdgt_config+0x42>
 8008c2e:	e7f0      	b.n	8008c12 <fwdgt_config+0x2e>
 8008c30:	40003000 	andmi	r3, r0, r0
 8008c34:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008c38 <gpio_init>:
 8008c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3c:	f04f 0c0f 	mov.w	ip, #15
 8008c40:	06cf      	lsls	r7, r1, #27
 8008c42:	f04f 0400 	mov.w	r4, #0
 8008c46:	f04f 0701 	mov.w	r7, #1
 8008c4a:	f001 050f 	and.w	r5, r1, #15
 8008c4e:	bf48      	it	mi
 8008c50:	4315      	orrmi	r5, r2
 8008c52:	fa23 f204 	lsr.w	r2, r3, r4
 8008c56:	07d6      	lsls	r6, r2, #31
 8008c58:	d510      	bpl.n	8008c7c <gpio_init+0x44>
 8008c5a:	00a2      	lsls	r2, r4, #2
 8008c5c:	6806      	ldr	r6, [r0, #0]
 8008c5e:	fa0c fe02 	lsl.w	lr, ip, r2
 8008c62:	ea26 060e 	bic.w	r6, r6, lr
 8008c66:	fa05 f202 	lsl.w	r2, r5, r2
 8008c6a:	2928      	cmp	r1, #40	; 0x28
 8008c6c:	ea42 0206 	orr.w	r2, r2, r6
 8008c70:	d128      	bne.n	8008cc4 <gpio_init+0x8c>
 8008c72:	fa07 f604 	lsl.w	r6, r7, r4
 8008c76:	401e      	ands	r6, r3
 8008c78:	6146      	str	r6, [r0, #20]
 8008c7a:	6002      	str	r2, [r0, #0]
 8008c7c:	3401      	adds	r4, #1
 8008c7e:	2c08      	cmp	r4, #8
 8008c80:	d1e7      	bne.n	8008c52 <gpio_init+0x1a>
 8008c82:	2600      	movs	r6, #0
 8008c84:	f04f 0c0f 	mov.w	ip, #15
 8008c88:	2701      	movs	r7, #1
 8008c8a:	f106 0208 	add.w	r2, r6, #8
 8008c8e:	fa23 f402 	lsr.w	r4, r3, r2
 8008c92:	07e4      	lsls	r4, r4, #31
 8008c94:	d511      	bpl.n	8008cba <gpio_init+0x82>
 8008c96:	00b4      	lsls	r4, r6, #2
 8008c98:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008c9c:	fa0c f804 	lsl.w	r8, ip, r4
 8008ca0:	ea2e 0e08 	bic.w	lr, lr, r8
 8008ca4:	fa05 f404 	lsl.w	r4, r5, r4
 8008ca8:	2928      	cmp	r1, #40	; 0x28
 8008caa:	ea44 040e 	orr.w	r4, r4, lr
 8008cae:	d110      	bne.n	8008cd2 <gpio_init+0x9a>
 8008cb0:	fa07 f202 	lsl.w	r2, r7, r2
 8008cb4:	401a      	ands	r2, r3
 8008cb6:	6142      	str	r2, [r0, #20]
 8008cb8:	6044      	str	r4, [r0, #4]
 8008cba:	3601      	adds	r6, #1
 8008cbc:	2e08      	cmp	r6, #8
 8008cbe:	d1e4      	bne.n	8008c8a <gpio_init+0x52>
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	2948      	cmp	r1, #72	; 0x48
 8008cc6:	bf02      	ittt	eq
 8008cc8:	fa07 f604 	lsleq.w	r6, r7, r4
 8008ccc:	401e      	andeq	r6, r3
 8008cce:	6106      	streq	r6, [r0, #16]
 8008cd0:	e7d3      	b.n	8008c7a <gpio_init+0x42>
 8008cd2:	2948      	cmp	r1, #72	; 0x48
 8008cd4:	bf02      	ittt	eq
 8008cd6:	fa07 f202 	lsleq.w	r2, r7, r2
 8008cda:	401a      	andeq	r2, r3
 8008cdc:	6102      	streq	r2, [r0, #16]
 8008cde:	e7eb      	b.n	8008cb8 <gpio_init+0x80>

08008ce0 <gpio_input_bit_get>:
 8008ce0:	6883      	ldr	r3, [r0, #8]
 8008ce2:	420b      	tst	r3, r1
 8008ce4:	bf14      	ite	ne
 8008ce6:	2001      	movne	r0, #1
 8008ce8:	2000      	moveq	r0, #0
 8008cea:	4770      	bx	lr

08008cec <gpio_pin_remap_config>:
 8008cec:	2800      	cmp	r0, #0
 8008cee:	4a16      	ldr	r2, [pc, #88]	; (8008d48 <gpio_pin_remap_config+0x5c>)
 8008cf0:	b530      	push	{r4, r5, lr}
 8008cf2:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8008cf6:	bfb4      	ite	lt
 8008cf8:	69d3      	ldrlt	r3, [r2, #28]
 8008cfa:	6853      	ldrge	r3, [r2, #4]
 8008cfc:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8008d00:	b284      	uxth	r4, r0
 8008d02:	d110      	bne.n	8008d26 <gpio_pin_remap_config+0x3a>
 8008d04:	6855      	ldr	r5, [r2, #4]
 8008d06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008d0a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8008d0e:	6055      	str	r5, [r2, #4]
 8008d10:	b119      	cbz	r1, 8008d1a <gpio_pin_remap_config+0x2e>
 8008d12:	0d42      	lsrs	r2, r0, #21
 8008d14:	0112      	lsls	r2, r2, #4
 8008d16:	4094      	lsls	r4, r2
 8008d18:	4323      	orrs	r3, r4
 8008d1a:	4a0b      	ldr	r2, [pc, #44]	; (8008d48 <gpio_pin_remap_config+0x5c>)
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	bfb4      	ite	lt
 8008d20:	61d3      	strlt	r3, [r2, #28]
 8008d22:	6053      	strge	r3, [r2, #4]
 8008d24:	bd30      	pop	{r4, r5, pc}
 8008d26:	02c2      	lsls	r2, r0, #11
 8008d28:	bf4d      	iteet	mi
 8008d2a:	2203      	movmi	r2, #3
 8008d2c:	0d42      	lsrpl	r2, r0, #21
 8008d2e:	0112      	lslpl	r2, r2, #4
 8008d30:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8008d34:	bf4c      	ite	mi
 8008d36:	40aa      	lslmi	r2, r5
 8008d38:	fa04 f202 	lslpl.w	r2, r4, r2
 8008d3c:	ea23 0302 	bic.w	r3, r3, r2
 8008d40:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8008d44:	e7e4      	b.n	8008d10 <gpio_pin_remap_config+0x24>
 8008d46:	bf00      	nop
 8008d48:	40010000 	andmi	r0, r1, r0

08008d4c <pmu_backup_write_enable>:
 8008d4c:	4a02      	ldr	r2, [pc, #8]	; (8008d58 <pmu_backup_write_enable+0xc>)
 8008d4e:	6813      	ldr	r3, [r2, #0]
 8008d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	4770      	bx	lr
 8008d58:	40007000 	andmi	r7, r0, r0

08008d5c <rcu_periph_clock_enable>:
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	0983      	lsrs	r3, r0, #6
 8008d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d68:	6819      	ldr	r1, [r3, #0]
 8008d6a:	f000 001f 	and.w	r0, r0, #31
 8008d6e:	4082      	lsls	r2, r0
 8008d70:	430a      	orrs	r2, r1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	4770      	bx	lr

08008d76 <rcu_periph_clock_disable>:
 8008d76:	2101      	movs	r1, #1
 8008d78:	0983      	lsrs	r3, r0, #6
 8008d7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d7e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	f000 001f 	and.w	r0, r0, #31
 8008d88:	4081      	lsls	r1, r0
 8008d8a:	ea22 0201 	bic.w	r2, r2, r1
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	4770      	bx	lr

08008d92 <rcu_periph_reset_enable>:
 8008d92:	f7ff bfe3 	b.w	8008d5c <rcu_periph_clock_enable>

08008d96 <rcu_periph_reset_disable>:
 8008d96:	f7ff bfee 	b.w	8008d76 <rcu_periph_clock_disable>
	...

08008d9c <rcu_bkp_reset_enable>:
 8008d9c:	4a02      	ldr	r2, [pc, #8]	; (8008da8 <rcu_bkp_reset_enable+0xc>)
 8008d9e:	6a13      	ldr	r3, [r2, #32]
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da4:	6213      	str	r3, [r2, #32]
 8008da6:	4770      	bx	lr
 8008da8:	40021000 	andmi	r1, r2, r0

08008dac <rcu_bkp_reset_disable>:
 8008dac:	4a02      	ldr	r2, [pc, #8]	; (8008db8 <rcu_bkp_reset_disable+0xc>)
 8008dae:	6a13      	ldr	r3, [r2, #32]
 8008db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db4:	6213      	str	r3, [r2, #32]
 8008db6:	4770      	bx	lr
 8008db8:	40021000 	andmi	r1, r2, r0

08008dbc <rcu_adc_clock_config>:
 8008dbc:	490c      	ldr	r1, [pc, #48]	; (8008df0 <rcu_adc_clock_config+0x34>)
 8008dbe:	2805      	cmp	r0, #5
 8008dc0:	684b      	ldr	r3, [r1, #4]
 8008dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008dca:	d006      	beq.n	8008dda <rcu_adc_clock_config+0x1e>
 8008dcc:	d803      	bhi.n	8008dd6 <rcu_adc_clock_config+0x1a>
 8008dce:	2804      	cmp	r0, #4
 8008dd0:	d10a      	bne.n	8008de8 <rcu_adc_clock_config+0x2c>
 8008dd2:	604b      	str	r3, [r1, #4]
 8008dd4:	4770      	bx	lr
 8008dd6:	2807      	cmp	r0, #7
 8008dd8:	d1fb      	bne.n	8008dd2 <rcu_adc_clock_config+0x16>
 8008dda:	4a06      	ldr	r2, [pc, #24]	; (8008df4 <rcu_adc_clock_config+0x38>)
 8008ddc:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8008de0:	4313      	orrs	r3, r2
 8008de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de6:	e7f4      	b.n	8008dd2 <rcu_adc_clock_config+0x16>
 8008de8:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8008dec:	e7f1      	b.n	8008dd2 <rcu_adc_clock_config+0x16>
 8008dee:	bf00      	nop
 8008df0:	40021000 	andmi	r1, r2, r0
 8008df4:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08008df8 <rcu_rtc_clock_config>:
 8008df8:	4a03      	ldr	r2, [pc, #12]	; (8008e08 <rcu_rtc_clock_config+0x10>)
 8008dfa:	6a13      	ldr	r3, [r2, #32]
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e00:	4303      	orrs	r3, r0
 8008e02:	6213      	str	r3, [r2, #32]
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40021000 	andmi	r1, r2, r0

08008e0c <rcu_flag_get>:
 8008e0c:	0983      	lsrs	r3, r0, #6
 8008e0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e12:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f000 001f 	and.w	r0, r0, #31
 8008e1e:	4083      	lsls	r3, r0
 8008e20:	4213      	tst	r3, r2
 8008e22:	bf14      	ite	ne
 8008e24:	2001      	movne	r0, #1
 8008e26:	2000      	moveq	r0, #0
 8008e28:	4770      	bx	lr
	...

08008e2c <rcu_osci_stab_wait>:
 8008e2c:	2818      	cmp	r0, #24
 8008e2e:	b508      	push	{r3, lr}
 8008e30:	d03b      	beq.n	8008eaa <rcu_osci_stab_wait+0x7e>
 8008e32:	d804      	bhi.n	8008e3e <rcu_osci_stab_wait+0x12>
 8008e34:	b378      	cbz	r0, 8008e96 <rcu_osci_stab_wait+0x6a>
 8008e36:	2810      	cmp	r0, #16
 8008e38:	d012      	beq.n	8008e60 <rcu_osci_stab_wait+0x34>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	bd08      	pop	{r3, pc}
 8008e3e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008e42:	d01c      	beq.n	8008e7e <rcu_osci_stab_wait+0x52>
 8008e44:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8008e48:	d1f7      	bne.n	8008e3a <rcu_osci_stab_wait+0xe>
 8008e4a:	491c      	ldr	r1, [pc, #112]	; (8008ebc <rcu_osci_stab_wait+0x90>)
 8008e4c:	f640 1001 	movw	r0, #2305	; 0x901
 8008e50:	f7ff ffdc 	bl	8008e0c <rcu_flag_get>
 8008e54:	b908      	cbnz	r0, 8008e5a <rcu_osci_stab_wait+0x2e>
 8008e56:	3901      	subs	r1, #1
 8008e58:	d1f8      	bne.n	8008e4c <rcu_osci_stab_wait+0x20>
 8008e5a:	f640 1001 	movw	r0, #2305	; 0x901
 8008e5e:	e008      	b.n	8008e72 <rcu_osci_stab_wait+0x46>
 8008e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e64:	2011      	movs	r0, #17
 8008e66:	f7ff ffd1 	bl	8008e0c <rcu_flag_get>
 8008e6a:	b908      	cbnz	r0, 8008e70 <rcu_osci_stab_wait+0x44>
 8008e6c:	3901      	subs	r1, #1
 8008e6e:	d1f9      	bne.n	8008e64 <rcu_osci_stab_wait+0x38>
 8008e70:	2011      	movs	r0, #17
 8008e72:	f7ff ffcb 	bl	8008e0c <rcu_flag_get>
 8008e76:	3800      	subs	r0, #0
 8008e78:	bf18      	it	ne
 8008e7a:	2001      	movne	r0, #1
 8008e7c:	e7de      	b.n	8008e3c <rcu_osci_stab_wait+0x10>
 8008e7e:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8008e82:	f640 0001 	movw	r0, #2049	; 0x801
 8008e86:	f7ff ffc1 	bl	8008e0c <rcu_flag_get>
 8008e8a:	b908      	cbnz	r0, 8008e90 <rcu_osci_stab_wait+0x64>
 8008e8c:	3901      	subs	r1, #1
 8008e8e:	d1f8      	bne.n	8008e82 <rcu_osci_stab_wait+0x56>
 8008e90:	f640 0001 	movw	r0, #2049	; 0x801
 8008e94:	e7ed      	b.n	8008e72 <rcu_osci_stab_wait+0x46>
 8008e96:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f7ff ffb6 	bl	8008e0c <rcu_flag_get>
 8008ea0:	b908      	cbnz	r0, 8008ea6 <rcu_osci_stab_wait+0x7a>
 8008ea2:	3901      	subs	r1, #1
 8008ea4:	d1f9      	bne.n	8008e9a <rcu_osci_stab_wait+0x6e>
 8008ea6:	2001      	movs	r0, #1
 8008ea8:	e7e3      	b.n	8008e72 <rcu_osci_stab_wait+0x46>
 8008eaa:	4904      	ldr	r1, [pc, #16]	; (8008ebc <rcu_osci_stab_wait+0x90>)
 8008eac:	2019      	movs	r0, #25
 8008eae:	f7ff ffad 	bl	8008e0c <rcu_flag_get>
 8008eb2:	b908      	cbnz	r0, 8008eb8 <rcu_osci_stab_wait+0x8c>
 8008eb4:	3901      	subs	r1, #1
 8008eb6:	d1f9      	bne.n	8008eac <rcu_osci_stab_wait+0x80>
 8008eb8:	2019      	movs	r0, #25
 8008eba:	e7da      	b.n	8008e72 <rcu_osci_stab_wait+0x46>
 8008ebc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08008ec0 <rcu_osci_on>:
 8008ec0:	f7ff bf4c 	b.w	8008d5c <rcu_periph_clock_enable>

08008ec4 <rcu_clock_freq_get>:
 8008ec4:	4b2f      	ldr	r3, [pc, #188]	; (8008f84 <rcu_clock_freq_get+0xc0>)
 8008ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec8:	4604      	mov	r4, r0
 8008eca:	461f      	mov	r7, r3
 8008ecc:	b089      	sub	sp, #36	; 0x24
 8008ece:	ad04      	add	r5, sp, #16
 8008ed0:	f103 0610 	add.w	r6, r3, #16
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	6859      	ldr	r1, [r3, #4]
 8008eda:	3308      	adds	r3, #8
 8008edc:	c203      	stmia	r2!, {r0, r1}
 8008ede:	42b3      	cmp	r3, r6
 8008ee0:	4615      	mov	r5, r2
 8008ee2:	d1f7      	bne.n	8008ed4 <rcu_clock_freq_get+0x10>
 8008ee4:	466b      	mov	r3, sp
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	6871      	ldr	r1, [r6, #4]
 8008eea:	4a27      	ldr	r2, [pc, #156]	; (8008f88 <rcu_clock_freq_get+0xc4>)
 8008eec:	c303      	stmia	r3!, {r0, r1}
 8008eee:	c303      	stmia	r3!, {r0, r1}
 8008ef0:	6853      	ldr	r3, [r2, #4]
 8008ef2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d137      	bne.n	8008f6a <rcu_clock_freq_get+0xa6>
 8008efa:	6853      	ldr	r3, [r2, #4]
 8008efc:	03dd      	lsls	r5, r3, #15
 8008efe:	d510      	bpl.n	8008f22 <rcu_clock_freq_get+0x5e>
 8008f00:	6853      	ldr	r3, [r2, #4]
 8008f02:	4922      	ldr	r1, [pc, #136]	; (8008f8c <rcu_clock_freq_get+0xc8>)
 8008f04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <rcu_clock_freq_get+0xcc>)
 8008f0a:	bf08      	it	eq
 8008f0c:	4619      	moveq	r1, r3
 8008f0e:	6853      	ldr	r3, [r2, #4]
 8008f10:	6850      	ldr	r0, [r2, #4]
 8008f12:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8008f16:	0100      	lsls	r0, r0, #4
 8008f18:	d505      	bpl.n	8008f26 <rcu_clock_freq_get+0x62>
 8008f1a:	f043 0310 	orr.w	r3, r3, #16
 8008f1e:	3301      	adds	r3, #1
 8008f20:	e004      	b.n	8008f2c <rcu_clock_freq_get+0x68>
 8008f22:	491a      	ldr	r1, [pc, #104]	; (8008f8c <rcu_clock_freq_get+0xc8>)
 8008f24:	e7f3      	b.n	8008f0e <rcu_clock_freq_get+0x4a>
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	d0f9      	beq.n	8008f1e <rcu_clock_freq_get+0x5a>
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	fb01 f003 	mul.w	r0, r1, r3
 8008f30:	6853      	ldr	r3, [r2, #4]
 8008f32:	6851      	ldr	r1, [r2, #4]
 8008f34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008f38:	6852      	ldr	r2, [r2, #4]
 8008f3a:	3320      	adds	r3, #32
 8008f3c:	446b      	add	r3, sp
 8008f3e:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8008f42:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8008f46:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008f4a:	3120      	adds	r1, #32
 8008f4c:	3220      	adds	r2, #32
 8008f4e:	4469      	add	r1, sp
 8008f50:	446a      	add	r2, sp
 8008f52:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8008f56:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008f5a:	fa20 f303 	lsr.w	r3, r0, r3
 8008f5e:	2c03      	cmp	r4, #3
 8008f60:	d80e      	bhi.n	8008f80 <rcu_clock_freq_get+0xbc>
 8008f62:	e8df f004 	tbb	[pc, r4]
 8008f66:	0a070405 	beq	81c9f82 <__exidx_end+0x1be9b2>
 8008f6a:	4809      	ldr	r0, [pc, #36]	; (8008f90 <rcu_clock_freq_get+0xcc>)
 8008f6c:	e7e0      	b.n	8008f30 <rcu_clock_freq_get+0x6c>
 8008f6e:	4618      	mov	r0, r3
 8008f70:	b009      	add	sp, #36	; 0x24
 8008f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f74:	fa23 f001 	lsr.w	r0, r3, r1
 8008f78:	e7fa      	b.n	8008f70 <rcu_clock_freq_get+0xac>
 8008f7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008f7e:	e7f7      	b.n	8008f70 <rcu_clock_freq_get+0xac>
 8008f80:	2000      	movs	r0, #0
 8008f82:	e7f5      	b.n	8008f70 <rcu_clock_freq_get+0xac>
 8008f84:	08009f21 	stmdaeq	r0, {r0, r5, r8, r9, sl, fp, ip, pc}
 8008f88:	40021000 	andmi	r1, r2, r0
 8008f8c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8008f90:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08008f94 <rtc_configuration_mode_enter>:
 8008f94:	4a03      	ldr	r2, [pc, #12]	; (8008fa4 <rtc_configuration_mode_enter+0x10>)
 8008f96:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008f9a:	f043 0310 	orr.w	r3, r3, #16
 8008f9e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008fa2:	4770      	bx	lr
 8008fa4:	40002000 	andmi	r2, r0, r0

08008fa8 <rtc_configuration_mode_exit>:
 8008fa8:	4a03      	ldr	r2, [pc, #12]	; (8008fb8 <rtc_configuration_mode_exit+0x10>)
 8008faa:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
 8008fb6:	4770      	bx	lr
 8008fb8:	40002000 	andmi	r2, r0, r0

08008fbc <rtc_counter_set>:
 8008fbc:	b508      	push	{r3, lr}
 8008fbe:	f7ff ffe9 	bl	8008f94 <rtc_configuration_mode_enter>
 8008fc2:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <rtc_counter_set+0x1c>)
 8008fc4:	0c02      	lsrs	r2, r0, #16
 8008fc6:	b280      	uxth	r0, r0
 8008fc8:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
 8008fcc:	f8c3 081c 	str.w	r0, [r3, #2076]	; 0x81c
 8008fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008fd4:	f7ff bfe8 	b.w	8008fa8 <rtc_configuration_mode_exit>
 8008fd8:	40002000 	andmi	r2, r0, r0

08008fdc <rtc_prescaler_set>:
 8008fdc:	b508      	push	{r3, lr}
 8008fde:	f7ff ffd9 	bl	8008f94 <rtc_configuration_mode_enter>
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <rtc_prescaler_set+0x20>)
 8008fe4:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8008fe8:	b280      	uxth	r0, r0
 8008fea:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8008fee:	f8c3 080c 	str.w	r0, [r3, #2060]	; 0x80c
 8008ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ff6:	f7ff bfd7 	b.w	8008fa8 <rtc_configuration_mode_exit>
 8008ffa:	bf00      	nop
 8008ffc:	40002000 	andmi	r2, r0, r0

08009000 <rtc_lwoff_wait>:
 8009000:	4a02      	ldr	r2, [pc, #8]	; (800900c <rtc_lwoff_wait+0xc>)
 8009002:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8009006:	069b      	lsls	r3, r3, #26
 8009008:	d5fb      	bpl.n	8009002 <rtc_lwoff_wait+0x2>
 800900a:	4770      	bx	lr
 800900c:	40002000 	andmi	r2, r0, r0

08009010 <rtc_register_sync_wait>:
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <rtc_register_sync_wait+0x18>)
 8009012:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8009016:	f022 0208 	bic.w	r2, r2, #8
 800901a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800901e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8009022:	0712      	lsls	r2, r2, #28
 8009024:	d5fb      	bpl.n	800901e <rtc_register_sync_wait+0xe>
 8009026:	4770      	bx	lr
 8009028:	40002000 	andmi	r2, r0, r0

0800902c <rtc_counter_get>:
 800902c:	4b03      	ldr	r3, [pc, #12]	; (800903c <rtc_counter_get+0x10>)
 800902e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009032:	f8d3 0818 	ldr.w	r0, [r3, #2072]	; 0x818
 8009036:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800903a:	4770      	bx	lr
 800903c:	40002000 	andmi	r2, r0, r0

08009040 <timer_deinit>:
 8009040:	b508      	push	{r3, lr}
 8009042:	4b2d      	ldr	r3, [pc, #180]	; (80090f8 <timer_deinit+0xb8>)
 8009044:	4298      	cmp	r0, r3
 8009046:	d048      	beq.n	80090da <timer_deinit+0x9a>
 8009048:	d816      	bhi.n	8009078 <timer_deinit+0x38>
 800904a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800904e:	4298      	cmp	r0, r3
 8009050:	d03c      	beq.n	80090cc <timer_deinit+0x8c>
 8009052:	d807      	bhi.n	8009064 <timer_deinit+0x24>
 8009054:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009058:	d02a      	beq.n	80090b0 <timer_deinit+0x70>
 800905a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800905e:	4298      	cmp	r0, r3
 8009060:	d02d      	beq.n	80090be <timer_deinit+0x7e>
 8009062:	bd08      	pop	{r3, pc}
 8009064:	4b25      	ldr	r3, [pc, #148]	; (80090fc <timer_deinit+0xbc>)
 8009066:	4298      	cmp	r0, r3
 8009068:	d1fb      	bne.n	8009062 <timer_deinit+0x22>
 800906a:	f240 4003 	movw	r0, #1027	; 0x403
 800906e:	f7ff fe90 	bl	8008d92 <rcu_periph_reset_enable>
 8009072:	f240 4003 	movw	r0, #1027	; 0x403
 8009076:	e017      	b.n	80090a8 <timer_deinit+0x68>
 8009078:	4b21      	ldr	r3, [pc, #132]	; (8009100 <timer_deinit+0xc0>)
 800907a:	4298      	cmp	r0, r3
 800907c:	d00e      	beq.n	800909c <timer_deinit+0x5c>
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	4298      	cmp	r0, r3
 8009084:	d030      	beq.n	80090e8 <timer_deinit+0xa8>
 8009086:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 800908a:	4298      	cmp	r0, r3
 800908c:	d1e9      	bne.n	8009062 <timer_deinit+0x22>
 800908e:	f240 4005 	movw	r0, #1029	; 0x405
 8009092:	f7ff fe7e 	bl	8008d92 <rcu_periph_reset_enable>
 8009096:	f240 4005 	movw	r0, #1029	; 0x405
 800909a:	e005      	b.n	80090a8 <timer_deinit+0x68>
 800909c:	f240 300b 	movw	r0, #779	; 0x30b
 80090a0:	f7ff fe77 	bl	8008d92 <rcu_periph_reset_enable>
 80090a4:	f240 300b 	movw	r0, #779	; 0x30b
 80090a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090ac:	f7ff be73 	b.w	8008d96 <rcu_periph_reset_disable>
 80090b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090b4:	f7ff fe6d 	bl	8008d92 <rcu_periph_reset_enable>
 80090b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090bc:	e7f4      	b.n	80090a8 <timer_deinit+0x68>
 80090be:	f240 4001 	movw	r0, #1025	; 0x401
 80090c2:	f7ff fe66 	bl	8008d92 <rcu_periph_reset_enable>
 80090c6:	f240 4001 	movw	r0, #1025	; 0x401
 80090ca:	e7ed      	b.n	80090a8 <timer_deinit+0x68>
 80090cc:	f240 4002 	movw	r0, #1026	; 0x402
 80090d0:	f7ff fe5f 	bl	8008d92 <rcu_periph_reset_enable>
 80090d4:	f240 4002 	movw	r0, #1026	; 0x402
 80090d8:	e7e6      	b.n	80090a8 <timer_deinit+0x68>
 80090da:	f240 4004 	movw	r0, #1028	; 0x404
 80090de:	f7ff fe58 	bl	8008d92 <rcu_periph_reset_enable>
 80090e2:	f240 4004 	movw	r0, #1028	; 0x404
 80090e6:	e7df      	b.n	80090a8 <timer_deinit+0x68>
 80090e8:	f240 300d 	movw	r0, #781	; 0x30d
 80090ec:	f7ff fe51 	bl	8008d92 <rcu_periph_reset_enable>
 80090f0:	f240 300d 	movw	r0, #781	; 0x30d
 80090f4:	e7d8      	b.n	80090a8 <timer_deinit+0x68>
 80090f6:	bf00      	nop
 80090f8:	40001000 	andmi	r1, r0, r0
 80090fc:	40000c00 	andmi	r0, r0, r0, lsl #24
 8009100:	40012c00 	andmi	r2, r1, r0, lsl #24

08009104 <timer_init>:
 8009104:	880b      	ldrh	r3, [r1, #0]
 8009106:	6283      	str	r3, [r0, #40]	; 0x28
 8009108:	4b26      	ldr	r3, [pc, #152]	; (80091a4 <timer_init+0xa0>)
 800910a:	4298      	cmp	r0, r3
 800910c:	d018      	beq.n	8009140 <timer_init+0x3c>
 800910e:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8009112:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009116:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 800911a:	d011      	beq.n	8009140 <timer_init+0x3c>
 800911c:	4a22      	ldr	r2, [pc, #136]	; (80091a8 <timer_init+0xa4>)
 800911e:	4290      	cmp	r0, r2
 8009120:	d00e      	beq.n	8009140 <timer_init+0x3c>
 8009122:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8009126:	4290      	cmp	r0, r2
 8009128:	d00a      	beq.n	8009140 <timer_init+0x3c>
 800912a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800912e:	4293      	cmp	r3, r2
 8009130:	d006      	beq.n	8009140 <timer_init+0x3c>
 8009132:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8009136:	4293      	cmp	r3, r2
 8009138:	d002      	beq.n	8009140 <timer_init+0x3c>
 800913a:	4b1c      	ldr	r3, [pc, #112]	; (80091ac <timer_init+0xa8>)
 800913c:	4298      	cmp	r0, r3
 800913e:	d10f      	bne.n	8009160 <timer_init+0x5c>
 8009140:	6803      	ldr	r3, [r0, #0]
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	6003      	str	r3, [r0, #0]
 8009148:	884b      	ldrh	r3, [r1, #2]
 800914a:	6802      	ldr	r2, [r0, #0]
 800914c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009150:	4313      	orrs	r3, r2
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	888b      	ldrh	r3, [r1, #4]
 8009156:	6802      	ldr	r2, [r0, #0]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	4313      	orrs	r3, r2
 800915e:	6003      	str	r3, [r0, #0]
 8009160:	688b      	ldr	r3, [r1, #8]
 8009162:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009164:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <timer_init+0xac>)
 8009166:	4298      	cmp	r0, r3
 8009168:	d003      	beq.n	8009172 <timer_init+0x6e>
 800916a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800916e:	4298      	cmp	r0, r3
 8009170:	d104      	bne.n	800917c <timer_init+0x78>
 8009172:	6943      	ldr	r3, [r0, #20]
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	6143      	str	r3, [r0, #20]
 800917a:	4770      	bx	lr
 800917c:	6803      	ldr	r3, [r0, #0]
 800917e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009182:	6003      	str	r3, [r0, #0]
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	6802      	ldr	r2, [r0, #0]
 8009188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918c:	4313      	orrs	r3, r2
 800918e:	6003      	str	r3, [r0, #0]
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <timer_init+0xa0>)
 8009192:	4298      	cmp	r0, r3
 8009194:	d002      	beq.n	800919c <timer_init+0x98>
 8009196:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <timer_init+0xa4>)
 8009198:	4298      	cmp	r0, r3
 800919a:	d1ea      	bne.n	8009172 <timer_init+0x6e>
 800919c:	7b8b      	ldrb	r3, [r1, #14]
 800919e:	6303      	str	r3, [r0, #48]	; 0x30
 80091a0:	e7e7      	b.n	8009172 <timer_init+0x6e>
 80091a2:	bf00      	nop
 80091a4:	40012c00 	andmi	r2, r1, r0, lsl #24
 80091a8:	40013400 	andmi	r3, r1, r0, lsl #8
 80091ac:	40002000 	andmi	r2, r0, r0
 80091b0:	40001000 	andmi	r1, r0, r0

080091b4 <timer_enable>:
 80091b4:	6803      	ldr	r3, [r0, #0]
 80091b6:	f043 0301 	orr.w	r3, r3, #1
 80091ba:	6003      	str	r3, [r0, #0]
 80091bc:	4770      	bx	lr

080091be <timer_channel_output_mode_config>:
 80091be:	2903      	cmp	r1, #3
 80091c0:	d81a      	bhi.n	80091f8 <timer_channel_output_mode_config+0x3a>
 80091c2:	e8df f001 	tbb	[pc, r1]
 80091c6:	1a120a02 	bne	848b9d6 <__exidx_end+0x480406>
 80091ca:	6983      	ldr	r3, [r0, #24]
 80091cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d0:	6183      	str	r3, [r0, #24]
 80091d2:	6983      	ldr	r3, [r0, #24]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	6183      	str	r3, [r0, #24]
 80091d8:	4770      	bx	lr
 80091da:	6983      	ldr	r3, [r0, #24]
 80091dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e0:	6183      	str	r3, [r0, #24]
 80091e2:	6983      	ldr	r3, [r0, #24]
 80091e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80091e8:	e7f5      	b.n	80091d6 <timer_channel_output_mode_config+0x18>
 80091ea:	69c3      	ldr	r3, [r0, #28]
 80091ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f0:	61c3      	str	r3, [r0, #28]
 80091f2:	69c3      	ldr	r3, [r0, #28]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	61c3      	str	r3, [r0, #28]
 80091f8:	4770      	bx	lr
 80091fa:	69c3      	ldr	r3, [r0, #28]
 80091fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009200:	61c3      	str	r3, [r0, #28]
 8009202:	69c3      	ldr	r3, [r0, #28]
 8009204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009208:	e7f5      	b.n	80091f6 <timer_channel_output_mode_config+0x38>

0800920a <timer_channel_output_pulse_value_config>:
 800920a:	2903      	cmp	r1, #3
 800920c:	d80a      	bhi.n	8009224 <timer_channel_output_pulse_value_config+0x1a>
 800920e:	e8df f001 	tbb	[pc, r1]
 8009212:	08060402 	stmdaeq	r6, {r1, sl}
 8009216:	6342      	str	r2, [r0, #52]	; 0x34
 8009218:	4770      	bx	lr
 800921a:	6382      	str	r2, [r0, #56]	; 0x38
 800921c:	4770      	bx	lr
 800921e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8009220:	4770      	bx	lr
 8009222:	6402      	str	r2, [r0, #64]	; 0x40
 8009224:	4770      	bx	lr

08009226 <timer_interrupt_enable>:
 8009226:	68c3      	ldr	r3, [r0, #12]
 8009228:	430b      	orrs	r3, r1
 800922a:	60c3      	str	r3, [r0, #12]
 800922c:	4770      	bx	lr

0800922e <timer_interrupt_flag_clear>:
 800922e:	43c9      	mvns	r1, r1
 8009230:	6101      	str	r1, [r0, #16]
 8009232:	4770      	bx	lr

08009234 <timer_flag_clear>:
 8009234:	43c9      	mvns	r1, r1
 8009236:	6101      	str	r1, [r0, #16]
 8009238:	4770      	bx	lr
	...

0800923c <usart_deinit>:
 800923c:	b508      	push	{r3, lr}
 800923e:	4b1d      	ldr	r3, [pc, #116]	; (80092b4 <usart_deinit+0x78>)
 8009240:	4298      	cmp	r0, r3
 8009242:	d028      	beq.n	8009296 <usart_deinit+0x5a>
 8009244:	d808      	bhi.n	8009258 <usart_deinit+0x1c>
 8009246:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800924a:	4298      	cmp	r0, r3
 800924c:	d015      	beq.n	800927a <usart_deinit+0x3e>
 800924e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009252:	4298      	cmp	r0, r3
 8009254:	d018      	beq.n	8009288 <usart_deinit+0x4c>
 8009256:	bd08      	pop	{r3, pc}
 8009258:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <usart_deinit+0x7c>)
 800925a:	4298      	cmp	r0, r3
 800925c:	d022      	beq.n	80092a4 <usart_deinit+0x68>
 800925e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8009262:	4298      	cmp	r0, r3
 8009264:	d1f7      	bne.n	8009256 <usart_deinit+0x1a>
 8009266:	f240 300e 	movw	r0, #782	; 0x30e
 800926a:	f7ff fd92 	bl	8008d92 <rcu_periph_reset_enable>
 800926e:	f240 300e 	movw	r0, #782	; 0x30e
 8009272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009276:	f7ff bd8e 	b.w	8008d96 <rcu_periph_reset_disable>
 800927a:	f240 4011 	movw	r0, #1041	; 0x411
 800927e:	f7ff fd88 	bl	8008d92 <rcu_periph_reset_enable>
 8009282:	f240 4011 	movw	r0, #1041	; 0x411
 8009286:	e7f4      	b.n	8009272 <usart_deinit+0x36>
 8009288:	f240 4012 	movw	r0, #1042	; 0x412
 800928c:	f7ff fd81 	bl	8008d92 <rcu_periph_reset_enable>
 8009290:	f240 4012 	movw	r0, #1042	; 0x412
 8009294:	e7ed      	b.n	8009272 <usart_deinit+0x36>
 8009296:	f240 4013 	movw	r0, #1043	; 0x413
 800929a:	f7ff fd7a 	bl	8008d92 <rcu_periph_reset_enable>
 800929e:	f240 4013 	movw	r0, #1043	; 0x413
 80092a2:	e7e6      	b.n	8009272 <usart_deinit+0x36>
 80092a4:	f240 4014 	movw	r0, #1044	; 0x414
 80092a8:	f7ff fd73 	bl	8008d92 <rcu_periph_reset_enable>
 80092ac:	f240 4014 	movw	r0, #1044	; 0x414
 80092b0:	e7df      	b.n	8009272 <usart_deinit+0x36>
 80092b2:	bf00      	nop
 80092b4:	40004c00 	andmi	r4, r0, r0, lsl #24
 80092b8:	40005000 	andmi	r5, r0, r0

080092bc <usart_baudrate_set>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <usart_baudrate_set+0x48>)
 80092c0:	4604      	mov	r4, r0
 80092c2:	4298      	cmp	r0, r3
 80092c4:	460d      	mov	r5, r1
 80092c6:	d01b      	beq.n	8009300 <usart_baudrate_set+0x44>
 80092c8:	d809      	bhi.n	80092de <usart_baudrate_set+0x22>
 80092ca:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80092ce:	4298      	cmp	r0, r3
 80092d0:	d016      	beq.n	8009300 <usart_baudrate_set+0x44>
 80092d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092d6:	4298      	cmp	r0, r3
 80092d8:	d012      	beq.n	8009300 <usart_baudrate_set+0x44>
 80092da:	2000      	movs	r0, #0
 80092dc:	e009      	b.n	80092f2 <usart_baudrate_set+0x36>
 80092de:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <usart_baudrate_set+0x4c>)
 80092e0:	4298      	cmp	r0, r3
 80092e2:	d00d      	beq.n	8009300 <usart_baudrate_set+0x44>
 80092e4:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80092e8:	4298      	cmp	r0, r3
 80092ea:	d1f6      	bne.n	80092da <usart_baudrate_set+0x1e>
 80092ec:	2003      	movs	r0, #3
 80092ee:	f7ff fde9 	bl	8008ec4 <rcu_clock_freq_get>
 80092f2:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 80092f6:	fbb1 f1f5 	udiv	r1, r1, r5
 80092fa:	b289      	uxth	r1, r1
 80092fc:	60a1      	str	r1, [r4, #8]
 80092fe:	bd38      	pop	{r3, r4, r5, pc}
 8009300:	2002      	movs	r0, #2
 8009302:	e7f4      	b.n	80092ee <usart_baudrate_set+0x32>
 8009304:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009308:	40005000 	andmi	r5, r0, r0

0800930c <usart_parity_config>:
 800930c:	68c3      	ldr	r3, [r0, #12]
 800930e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009312:	60c3      	str	r3, [r0, #12]
 8009314:	68c3      	ldr	r3, [r0, #12]
 8009316:	430b      	orrs	r3, r1
 8009318:	60c3      	str	r3, [r0, #12]
 800931a:	4770      	bx	lr

0800931c <usart_word_length_set>:
 800931c:	68c3      	ldr	r3, [r0, #12]
 800931e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009322:	60c3      	str	r3, [r0, #12]
 8009324:	68c3      	ldr	r3, [r0, #12]
 8009326:	430b      	orrs	r3, r1
 8009328:	60c3      	str	r3, [r0, #12]
 800932a:	4770      	bx	lr

0800932c <usart_stop_bit_set>:
 800932c:	6903      	ldr	r3, [r0, #16]
 800932e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009332:	6103      	str	r3, [r0, #16]
 8009334:	6903      	ldr	r3, [r0, #16]
 8009336:	430b      	orrs	r3, r1
 8009338:	6103      	str	r3, [r0, #16]
 800933a:	4770      	bx	lr

0800933c <usart_transmit_config>:
 800933c:	68c3      	ldr	r3, [r0, #12]
 800933e:	f023 0308 	bic.w	r3, r3, #8
 8009342:	430b      	orrs	r3, r1
 8009344:	60c3      	str	r3, [r0, #12]
 8009346:	4770      	bx	lr

08009348 <usart_receive_config>:
 8009348:	68c3      	ldr	r3, [r0, #12]
 800934a:	f023 0304 	bic.w	r3, r3, #4
 800934e:	430b      	orrs	r3, r1
 8009350:	60c3      	str	r3, [r0, #12]
 8009352:	4770      	bx	lr

08009354 <usart_hardware_flow_rts_config>:
 8009354:	6943      	ldr	r3, [r0, #20]
 8009356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935a:	430b      	orrs	r3, r1
 800935c:	6143      	str	r3, [r0, #20]
 800935e:	4770      	bx	lr

08009360 <usart_hardware_flow_cts_config>:
 8009360:	6943      	ldr	r3, [r0, #20]
 8009362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009366:	430b      	orrs	r3, r1
 8009368:	6143      	str	r3, [r0, #20]
 800936a:	4770      	bx	lr

0800936c <usart_dma_transmit_config>:
 800936c:	6943      	ldr	r3, [r0, #20]
 800936e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009372:	430b      	orrs	r3, r1
 8009374:	6143      	str	r3, [r0, #20]
 8009376:	4770      	bx	lr

08009378 <usart_flag_get>:
 8009378:	098b      	lsrs	r3, r1, #6
 800937a:	581a      	ldr	r2, [r3, r0]
 800937c:	2301      	movs	r3, #1
 800937e:	f001 011f 	and.w	r1, r1, #31
 8009382:	408b      	lsls	r3, r1
 8009384:	4213      	tst	r3, r2
 8009386:	bf14      	ite	ne
 8009388:	2001      	movne	r0, #1
 800938a:	2000      	moveq	r0, #0
 800938c:	4770      	bx	lr

0800938e <usart_interrupt_enable>:
 800938e:	2301      	movs	r3, #1
 8009390:	b510      	push	{r4, lr}
 8009392:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8009396:	5814      	ldr	r4, [r2, r0]
 8009398:	f001 011f 	and.w	r1, r1, #31
 800939c:	408b      	lsls	r3, r1
 800939e:	4323      	orrs	r3, r4
 80093a0:	5013      	str	r3, [r2, r0]
 80093a2:	bd10      	pop	{r4, pc}

080093a4 <usart_interrupt_disable>:
 80093a4:	2201      	movs	r2, #1
 80093a6:	b510      	push	{r4, lr}
 80093a8:	f3c1 1489 	ubfx	r4, r1, #6, #10
 80093ac:	5823      	ldr	r3, [r4, r0]
 80093ae:	f001 011f 	and.w	r1, r1, #31
 80093b2:	408a      	lsls	r2, r1
 80093b4:	ea23 0302 	bic.w	r3, r3, r2
 80093b8:	5023      	str	r3, [r4, r0]
 80093ba:	bd10      	pop	{r4, pc}

080093bc <usart_interrupt_flag_clear>:
 80093bc:	2201      	movs	r2, #1
 80093be:	b510      	push	{r4, lr}
 80093c0:	0d8c      	lsrs	r4, r1, #22
 80093c2:	5823      	ldr	r3, [r4, r0]
 80093c4:	f3c1 4104 	ubfx	r1, r1, #16, #5
 80093c8:	408a      	lsls	r2, r1
 80093ca:	ea23 0302 	bic.w	r3, r3, r2
 80093ce:	5023      	str	r3, [r4, r0]
 80093d0:	bd10      	pop	{r4, pc}
	...

080093d4 <gd32_adc_init()>:
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f240 6009 	movw	r0, #1545	; 0x609
 80093da:	4c21      	ldr	r4, [pc, #132]	; (8009460 <gd32_adc_init()+0x8c>)
 80093dc:	f7ff fcbe 	bl	8008d5c <rcu_periph_clock_enable>
 80093e0:	2005      	movs	r0, #5
 80093e2:	f7ff fceb 	bl	8008dbc <rcu_adc_clock_config>
 80093e6:	4620      	mov	r0, r4
 80093e8:	2201      	movs	r2, #1
 80093ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80093ee:	f000 fba7 	bl	8009b40 <adc_special_function_config>
 80093f2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80093f6:	4620      	mov	r0, r4
 80093f8:	2102      	movs	r1, #2
 80093fa:	f000 fc40 	bl	8009c7e <adc_external_trigger_source_config>
 80093fe:	2100      	movs	r1, #0
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fbc5 	bl	8009b90 <adc_data_alignment_config>
 8009406:	2000      	movs	r0, #0
 8009408:	f000 fb8a 	bl	8009b20 <adc_mode_config>
 800940c:	2202      	movs	r2, #2
 800940e:	4620      	mov	r0, r4
 8009410:	4611      	mov	r1, r2
 8009412:	f000 fbe9 	bl	8009be8 <adc_channel_length_config>
 8009416:	4620      	mov	r0, r4
 8009418:	2307      	movs	r3, #7
 800941a:	2210      	movs	r2, #16
 800941c:	2100      	movs	r1, #0
 800941e:	f000 fc00 	bl	8009c22 <adc_inserted_channel_config>
 8009422:	2307      	movs	r3, #7
 8009424:	4620      	mov	r0, r4
 8009426:	2211      	movs	r2, #17
 8009428:	2101      	movs	r1, #1
 800942a:	f000 fbfa 	bl	8009c22 <adc_inserted_channel_config>
 800942e:	2201      	movs	r2, #1
 8009430:	2102      	movs	r1, #2
 8009432:	4620      	mov	r0, r4
 8009434:	f000 fc34 	bl	8009ca0 <adc_external_trigger_config>
 8009438:	f000 fbcc 	bl	8009bd4 <adc_tempsensor_vrefint_enable>
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fbb0 	bl	8009ba2 <adc_enable>
 8009442:	2100      	movs	r1, #0
 8009444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009448:	f000 fb52 	bl	8009af0 <udelay(unsigned int, unsigned int)>
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fbb0 	bl	8009bb2 <adc_calibration_enable>
 8009452:	4620      	mov	r0, r4
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009458:	2102      	movs	r1, #2
 800945a:	f000 bc3c 	b.w	8009cd6 <adc_software_trigger_enable>
 800945e:	bf00      	nop
 8009460:	40012400 	andmi	r2, r1, r0, lsl #8
 8009464:	00000000 	andeq	r0, r0, r0

08009468 <gd32_adc_gettemp()>:
 8009468:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <gd32_adc_gettemp()+0x70>)
 800946a:	b510      	push	{r4, lr}
 800946c:	f8d3 443c 	ldr.w	r4, [r3, #1084]	; 0x43c
 8009470:	2102      	movs	r1, #2
 8009472:	481a      	ldr	r0, [pc, #104]	; (80094dc <gd32_adc_gettemp()+0x74>)
 8009474:	f000 fc2f 	bl	8009cd6 <adc_software_trigger_enable>
 8009478:	4620      	mov	r0, r4
 800947a:	f7f6 ffc5 	bl	8000408 <__aeabi_ui2d>
 800947e:	a310      	add	r3, pc, #64	; (adr r3, 80094c0 <gd32_adc_gettemp()+0x58>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f7 f83a 	bl	80004fc <__aeabi_dmul>
 8009488:	2200      	movs	r2, #0
 800948a:	4b15      	ldr	r3, [pc, #84]	; (80094e0 <gd32_adc_gettemp()+0x78>)
 800948c:	f7f7 f836 	bl	80004fc <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	a10c      	add	r1, pc, #48	; (adr r1, 80094c8 <gd32_adc_gettemp()+0x60>)
 8009496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800949a:	f7f6 fe77 	bl	800018c <__aeabi_dsub>
 800949e:	2200      	movs	r2, #0
 80094a0:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <gd32_adc_gettemp()+0x7c>)
 80094a2:	f7f7 f82b 	bl	80004fc <__aeabi_dmul>
 80094a6:	a30a      	add	r3, pc, #40	; (adr r3, 80094d0 <gd32_adc_gettemp()+0x68>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 f950 	bl	8000750 <__aeabi_ddiv>
 80094b0:	2200      	movs	r2, #0
 80094b2:	4b0d      	ldr	r3, [pc, #52]	; (80094e8 <gd32_adc_gettemp()+0x80>)
 80094b4:	f7f6 fe6c 	bl	8000190 <__adddf3>
 80094b8:	f7f7 fa32 	bl	8000920 <__aeabi_d2f>
 80094bc:	bd10      	pop	{r4, pc}
 80094be:	bf00      	nop
 80094c0:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 80094c4:	400a6666 	andmi	r6, sl, r6, ror #12
 80094c8:	ae147ae1 	vnmlage.f32	s14, s9, s3
 80094cc:	3ff6e147 	svccc	0x00f6e147
 80094d0:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
 80094d4:	40113333 	andsmi	r3, r1, r3, lsr r3
 80094d8:	40012000 	andmi	r2, r1, r0
 80094dc:	40012400 	andmi	r2, r1, r0, lsl #8
 80094e0:	3f300000 	svccc	0x00300000
 80094e4:	408f4000 	addmi	r4, pc, r0
 80094e8:	40390000 	eorsmi	r0, r9, r0

080094ec <_stop() [clone .isra.0]>:
 80094ec:	b508      	push	{r3, lr}
 80094ee:	4806      	ldr	r0, [pc, #24]	; (8009508 <_stop() [clone .isra.0]+0x1c>)
 80094f0:	f000 fc84 	bl	8009dfc <i2c_stop_on_bus>
 80094f4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80094f8:	4904      	ldr	r1, [pc, #16]	; (800950c <_stop() [clone .isra.0]+0x20>)
 80094fa:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80094fe:	0592      	lsls	r2, r2, #22
 8009500:	d501      	bpl.n	8009506 <_stop() [clone .isra.0]+0x1a>
 8009502:	3b01      	subs	r3, #1
 8009504:	d1f9      	bne.n	80094fa <_stop() [clone .isra.0]+0xe>
 8009506:	bd08      	pop	{r3, pc}
 8009508:	40005400 	andmi	r5, r0, r0, lsl #8
 800950c:	40005000 	andmi	r5, r0, r0

08009510 <gd32_i2c_begin()>:
 8009510:	b510      	push	{r4, lr}
 8009512:	f240 7015 	movw	r0, #1813	; 0x715
 8009516:	f7ff fc21 	bl	8008d5c <rcu_periph_clock_enable>
 800951a:	4c15      	ldr	r4, [pc, #84]	; (8009570 <gd32_i2c_begin()+0x60>)
 800951c:	f240 6003 	movw	r0, #1539	; 0x603
 8009520:	f7ff fc1c 	bl	8008d5c <rcu_periph_clock_enable>
 8009524:	f240 6003 	movw	r0, #1539	; 0x603
 8009528:	f7ff fc18 	bl	8008d5c <rcu_periph_clock_enable>
 800952c:	4620      	mov	r0, r4
 800952e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009532:	2203      	movs	r2, #3
 8009534:	211c      	movs	r1, #28
 8009536:	f7ff fb7f 	bl	8008c38 <gpio_init>
 800953a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800953e:	2203      	movs	r2, #3
 8009540:	4620      	mov	r0, r4
 8009542:	211c      	movs	r1, #28
 8009544:	f7ff fb78 	bl	8008c38 <gpio_init>
 8009548:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 800954c:	2101      	movs	r1, #1
 800954e:	2002      	movs	r0, #2
 8009550:	f7ff fbcc 	bl	8008cec <gpio_pin_remap_config>
 8009554:	4620      	mov	r0, r4
 8009556:	4907      	ldr	r1, [pc, #28]	; (8009574 <gd32_i2c_begin()+0x64>)
 8009558:	2200      	movs	r2, #0
 800955a:	f000 fbc9 	bl	8009cf0 <i2c_clock_config>
 800955e:	4620      	mov	r0, r4
 8009560:	f000 fc42 	bl	8009de8 <i2c_enable>
 8009564:	4620      	mov	r0, r4
 8009566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956a:	2101      	movs	r1, #1
 800956c:	f000 bc22 	b.w	8009db4 <i2c_ack_config>
 8009570:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009574:	00061a80 	andeq	r1, r6, r0, lsl #21

08009578 <gd32_i2c_set_baudrate(unsigned int)>:
 8009578:	4601      	mov	r1, r0
 800957a:	2200      	movs	r2, #0
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 800957e:	f000 bbb7 	b.w	8009cf0 <i2c_clock_config>
 8009582:	bf00      	nop
 8009584:	40005400 	andmi	r5, r0, r0, lsl #8

08009588 <gd32_i2c_set_address(unsigned char)>:
 8009588:	4b01      	ldr	r3, [pc, #4]	; (8009590 <gd32_i2c_set_address(unsigned char)+0x8>)
 800958a:	0040      	lsls	r0, r0, #1
 800958c:	7018      	strb	r0, [r3, #0]
 800958e:	4770      	bx	lr
 8009590:	20001818 	andcs	r1, r0, r8, lsl r8

08009594 <gd32_i2c_write(char const*, unsigned int)>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	460f      	mov	r7, r1
 800959a:	f640 75ff 	movw	r5, #4095	; 0xfff
 800959e:	4e2e      	ldr	r6, [pc, #184]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095a0:	f240 6101 	movw	r1, #1537	; 0x601
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fc33 	bl	8009e10 <i2c_flag_get>
 80095aa:	b9b0      	cbnz	r0, 80095da <gd32_i2c_write(char const*, unsigned int)+0x46>
 80095ac:	482a      	ldr	r0, [pc, #168]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095ae:	f000 fc20 	bl	8009df2 <i2c_start_on_bus>
 80095b2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095b6:	4e28      	ldr	r6, [pc, #160]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095b8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 fc27 	bl	8009e10 <i2c_flag_get>
 80095c2:	b190      	cbz	r0, 80095ea <gd32_i2c_write(char const*, unsigned int)+0x56>
 80095c4:	4b25      	ldr	r3, [pc, #148]	; (800965c <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 80095c6:	f06f 0201 	mvn.w	r2, #1
 80095ca:	7819      	ldrb	r1, [r3, #0]
 80095cc:	4822      	ldr	r0, [pc, #136]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095ce:	f000 fc03 	bl	8009dd8 <i2c_master_addressing>
 80095d2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80095d6:	4e20      	ldr	r6, [pc, #128]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80095d8:	e00c      	b.n	80095f4 <gd32_i2c_write(char const*, unsigned int)+0x60>
 80095da:	3d01      	subs	r5, #1
 80095dc:	d1e0      	bne.n	80095a0 <gd32_i2c_write(char const*, unsigned int)+0xc>
 80095de:	f7ff ff85 	bl	80094ec <_stop() [clone .isra.0]>
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e6:	4240      	negs	r0, r0
 80095e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ea:	3d01      	subs	r5, #1
 80095ec:	d1e4      	bne.n	80095b8 <gd32_i2c_write(char const*, unsigned int)+0x24>
 80095ee:	e7f6      	b.n	80095de <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80095f0:	3d01      	subs	r5, #1
 80095f2:	d0f4      	beq.n	80095de <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80095f4:	f240 5101 	movw	r1, #1281	; 0x501
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 fc09 	bl	8009e10 <i2c_flag_get>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d0f6      	beq.n	80095f0 <gd32_i2c_write(char const*, unsigned int)+0x5c>
 8009602:	f240 5101 	movw	r1, #1281	; 0x501
 8009606:	4814      	ldr	r0, [pc, #80]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8009608:	f000 fc0d 	bl	8009e26 <i2c_flag_clear>
 800960c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009610:	4e11      	ldr	r6, [pc, #68]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8009612:	f240 5107 	movw	r1, #1287	; 0x507
 8009616:	4630      	mov	r0, r6
 8009618:	f000 fbfa 	bl	8009e10 <i2c_flag_get>
 800961c:	2801      	cmp	r0, #1
 800961e:	d107      	bne.n	8009630 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8009620:	4e0d      	ldr	r6, [pc, #52]	; (8009658 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8009622:	4427      	add	r7, r4
 8009624:	42a7      	cmp	r7, r4
 8009626:	d106      	bne.n	8009636 <gd32_i2c_write(char const*, unsigned int)+0xa2>
 8009628:	f7ff ff60 	bl	80094ec <_stop() [clone .isra.0]>
 800962c:	2000      	movs	r0, #0
 800962e:	e7da      	b.n	80095e6 <gd32_i2c_write(char const*, unsigned int)+0x52>
 8009630:	3d01      	subs	r5, #1
 8009632:	d1ee      	bne.n	8009612 <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8009634:	e7d3      	b.n	80095de <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8009636:	4630      	mov	r0, r6
 8009638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963c:	f000 fbe3 	bl	8009e06 <i2c_data_transmit>
 8009640:	f640 75ff 	movw	r5, #4095	; 0xfff
 8009644:	f240 5102 	movw	r1, #1282	; 0x502
 8009648:	4630      	mov	r0, r6
 800964a:	f000 fbe1 	bl	8009e10 <i2c_flag_get>
 800964e:	2800      	cmp	r0, #0
 8009650:	d1e8      	bne.n	8009624 <gd32_i2c_write(char const*, unsigned int)+0x90>
 8009652:	3d01      	subs	r5, #1
 8009654:	d1f6      	bne.n	8009644 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8009656:	e7c2      	b.n	80095de <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8009658:	40005400 	andmi	r5, r0, r0, lsl #8
 800965c:	20001818 	andcs	r1, r0, r8, lsl r8

08009660 <gd32_i2c_read(char*, unsigned int)>:
 8009660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009664:	4680      	mov	r8, r0
 8009666:	460c      	mov	r4, r1
 8009668:	f640 76ff 	movw	r6, #4095	; 0xfff
 800966c:	4f4b      	ldr	r7, [pc, #300]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 800966e:	f240 6101 	movw	r1, #1537	; 0x601
 8009672:	4638      	mov	r0, r7
 8009674:	f000 fbcc 	bl	8009e10 <i2c_flag_get>
 8009678:	4605      	mov	r5, r0
 800967a:	bb08      	cbnz	r0, 80096c0 <gd32_i2c_read(char*, unsigned int)+0x60>
 800967c:	2c02      	cmp	r4, #2
 800967e:	d103      	bne.n	8009688 <gd32_i2c_read(char*, unsigned int)+0x28>
 8009680:	4601      	mov	r1, r0
 8009682:	4846      	ldr	r0, [pc, #280]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8009684:	f000 fb9f 	bl	8009dc6 <i2c_ackpos_config>
 8009688:	4844      	ldr	r0, [pc, #272]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 800968a:	f000 fbb2 	bl	8009df2 <i2c_start_on_bus>
 800968e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8009692:	4f42      	ldr	r7, [pc, #264]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8009694:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8009698:	4638      	mov	r0, r7
 800969a:	f000 fbb9 	bl	8009e10 <i2c_flag_get>
 800969e:	b1a8      	cbz	r0, 80096cc <gd32_i2c_read(char*, unsigned int)+0x6c>
 80096a0:	4b3f      	ldr	r3, [pc, #252]	; (80097a0 <gd32_i2c_read(char*, unsigned int)+0x140>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	7819      	ldrb	r1, [r3, #0]
 80096a6:	483d      	ldr	r0, [pc, #244]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096a8:	f000 fb96 	bl	8009dd8 <i2c_master_addressing>
 80096ac:	2c02      	cmp	r4, #2
 80096ae:	d803      	bhi.n	80096b8 <gd32_i2c_read(char*, unsigned int)+0x58>
 80096b0:	2100      	movs	r1, #0
 80096b2:	483a      	ldr	r0, [pc, #232]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096b4:	f000 fb7e 	bl	8009db4 <i2c_ack_config>
 80096b8:	f640 76ff 	movw	r6, #4095	; 0xfff
 80096bc:	4f37      	ldr	r7, [pc, #220]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096be:	e00a      	b.n	80096d6 <gd32_i2c_read(char*, unsigned int)+0x76>
 80096c0:	3e01      	subs	r6, #1
 80096c2:	d1d4      	bne.n	800966e <gd32_i2c_read(char*, unsigned int)+0xe>
 80096c4:	f7ff ff12 	bl	80094ec <_stop() [clone .isra.0]>
 80096c8:	2504      	movs	r5, #4
 80096ca:	e04d      	b.n	8009768 <gd32_i2c_read(char*, unsigned int)+0x108>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	d1e1      	bne.n	8009694 <gd32_i2c_read(char*, unsigned int)+0x34>
 80096d0:	e7f8      	b.n	80096c4 <gd32_i2c_read(char*, unsigned int)+0x64>
 80096d2:	3e01      	subs	r6, #1
 80096d4:	d0f6      	beq.n	80096c4 <gd32_i2c_read(char*, unsigned int)+0x64>
 80096d6:	f240 5101 	movw	r1, #1281	; 0x501
 80096da:	4638      	mov	r0, r7
 80096dc:	f000 fb98 	bl	8009e10 <i2c_flag_get>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d0f6      	beq.n	80096d2 <gd32_i2c_read(char*, unsigned int)+0x72>
 80096e4:	f240 5101 	movw	r1, #1281	; 0x501
 80096e8:	482c      	ldr	r0, [pc, #176]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096ea:	f000 fb9c 	bl	8009e26 <i2c_flag_clear>
 80096ee:	2c01      	cmp	r4, #1
 80096f0:	d102      	bne.n	80096f8 <gd32_i2c_read(char*, unsigned int)+0x98>
 80096f2:	482a      	ldr	r0, [pc, #168]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096f4:	f000 fb82 	bl	8009dfc <i2c_stop_on_bus>
 80096f8:	f640 77ff 	movw	r7, #4095	; 0xfff
 80096fc:	4e27      	ldr	r6, [pc, #156]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80096fe:	e022      	b.n	8009746 <gd32_i2c_read(char*, unsigned int)+0xe6>
 8009700:	2c03      	cmp	r4, #3
 8009702:	d134      	bne.n	800976e <gd32_i2c_read(char*, unsigned int)+0x10e>
 8009704:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009708:	e002      	b.n	8009710 <gd32_i2c_read(char*, unsigned int)+0xb0>
 800970a:	f1b9 0901 	subs.w	r9, r9, #1
 800970e:	d0d9      	beq.n	80096c4 <gd32_i2c_read(char*, unsigned int)+0x64>
 8009710:	f240 5102 	movw	r1, #1282	; 0x502
 8009714:	4630      	mov	r0, r6
 8009716:	f000 fb7b 	bl	8009e10 <i2c_flag_get>
 800971a:	2800      	cmp	r0, #0
 800971c:	d0f5      	beq.n	800970a <gd32_i2c_read(char*, unsigned int)+0xaa>
 800971e:	2100      	movs	r1, #0
 8009720:	4630      	mov	r0, r6
 8009722:	f000 fb47 	bl	8009db4 <i2c_ack_config>
 8009726:	f240 5106 	movw	r1, #1286	; 0x506
 800972a:	4630      	mov	r0, r6
 800972c:	f000 fb70 	bl	8009e10 <i2c_flag_get>
 8009730:	b138      	cbz	r0, 8009742 <gd32_i2c_read(char*, unsigned int)+0xe2>
 8009732:	4630      	mov	r0, r6
 8009734:	f000 fb69 	bl	8009e0a <i2c_data_receive>
 8009738:	f640 77ff 	movw	r7, #4095	; 0xfff
 800973c:	f808 0b01 	strb.w	r0, [r8], #1
 8009740:	3c01      	subs	r4, #1
 8009742:	3f01      	subs	r7, #1
 8009744:	d0be      	beq.n	80096c4 <gd32_i2c_read(char*, unsigned int)+0x64>
 8009746:	2c00      	cmp	r4, #0
 8009748:	d1da      	bne.n	8009700 <gd32_i2c_read(char*, unsigned int)+0xa0>
 800974a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800974e:	4915      	ldr	r1, [pc, #84]	; (80097a4 <gd32_i2c_read(char*, unsigned int)+0x144>)
 8009750:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8009754:	0592      	lsls	r2, r2, #22
 8009756:	d41d      	bmi.n	8009794 <gd32_i2c_read(char*, unsigned int)+0x134>
 8009758:	2101      	movs	r1, #1
 800975a:	4810      	ldr	r0, [pc, #64]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 800975c:	f000 fb2a 	bl	8009db4 <i2c_ack_config>
 8009760:	2101      	movs	r1, #1
 8009762:	480e      	ldr	r0, [pc, #56]	; (800979c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8009764:	f000 fb2f 	bl	8009dc6 <i2c_ackpos_config>
 8009768:	4628      	mov	r0, r5
 800976a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800976e:	2c02      	cmp	r4, #2
 8009770:	d1d9      	bne.n	8009726 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8009772:	f640 79ff 	movw	r9, #4095	; 0xfff
 8009776:	e002      	b.n	800977e <gd32_i2c_read(char*, unsigned int)+0x11e>
 8009778:	f1b9 0901 	subs.w	r9, r9, #1
 800977c:	d0a2      	beq.n	80096c4 <gd32_i2c_read(char*, unsigned int)+0x64>
 800977e:	f240 5102 	movw	r1, #1282	; 0x502
 8009782:	4630      	mov	r0, r6
 8009784:	f000 fb44 	bl	8009e10 <i2c_flag_get>
 8009788:	2800      	cmp	r0, #0
 800978a:	d0f5      	beq.n	8009778 <gd32_i2c_read(char*, unsigned int)+0x118>
 800978c:	4630      	mov	r0, r6
 800978e:	f000 fb35 	bl	8009dfc <i2c_stop_on_bus>
 8009792:	e7c8      	b.n	8009726 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8009794:	3b01      	subs	r3, #1
 8009796:	d1db      	bne.n	8009750 <gd32_i2c_read(char*, unsigned int)+0xf0>
 8009798:	e796      	b.n	80096c8 <gd32_i2c_read(char*, unsigned int)+0x68>
 800979a:	bf00      	nop
 800979c:	40005400 	andmi	r5, r0, r0, lsl #8
 80097a0:	20001818 	andcs	r1, r0, r8, lsl r8
 80097a4:	40005000 	andmi	r5, r0, r0

080097a8 <gd32_spi_dma_begin()>:
 80097a8:	b530      	push	{r4, r5, lr}
 80097aa:	f240 6002 	movw	r0, #1538	; 0x602
 80097ae:	b089      	sub	sp, #36	; 0x24
 80097b0:	f7ff fad4 	bl	8008d5c <rcu_periph_clock_enable>
 80097b4:	f240 6003 	movw	r0, #1539	; 0x603
 80097b8:	f7ff fad0 	bl	8008d5c <rcu_periph_clock_enable>
 80097bc:	f240 700f 	movw	r0, #1807	; 0x70f
 80097c0:	f7ff facc 	bl	8008d5c <rcu_periph_clock_enable>
 80097c4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80097c8:	f7ff fac8 	bl	8008d5c <rcu_periph_clock_enable>
 80097cc:	2338      	movs	r3, #56	; 0x38
 80097ce:	2203      	movs	r2, #3
 80097d0:	2118      	movs	r1, #24
 80097d2:	4829      	ldr	r0, [pc, #164]	; (8009878 <gd32_spi_dma_begin()+0xd0>)
 80097d4:	f7ff fa30 	bl	8008c38 <gpio_init>
 80097d8:	4c28      	ldr	r4, [pc, #160]	; (800987c <gd32_spi_dma_begin()+0xd4>)
 80097da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097de:	2203      	movs	r2, #3
 80097e0:	2118      	movs	r1, #24
 80097e2:	4827      	ldr	r0, [pc, #156]	; (8009880 <gd32_spi_dma_begin()+0xd8>)
 80097e4:	f7ff fa28 	bl	8008c38 <gpio_init>
 80097e8:	2101      	movs	r1, #1
 80097ea:	4826      	ldr	r0, [pc, #152]	; (8009884 <gd32_spi_dma_begin()+0xdc>)
 80097ec:	f7ff fa7e 	bl	8008cec <gpio_pin_remap_config>
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fb6e 	bl	8009ed2 <i2s_disable>
 80097f6:	2300      	movs	r3, #0
 80097f8:	4620      	mov	r0, r4
 80097fa:	461a      	mov	r2, r3
 80097fc:	4922      	ldr	r1, [pc, #136]	; (8009888 <gd32_spi_dma_begin()+0xe0>)
 80097fe:	f000 fb33 	bl	8009e68 <i2s_psc_config>
 8009802:	2300      	movs	r3, #0
 8009804:	2210      	movs	r2, #16
 8009806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800980a:	4620      	mov	r0, r4
 800980c:	f000 fb1d 	bl	8009e4a <i2s_init>
 8009810:	4620      	mov	r0, r4
 8009812:	f000 fb59 	bl	8009ec8 <i2s_enable>
 8009816:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 800981a:	f240 5001 	movw	r0, #1281	; 0x501
 800981e:	f7ff fa9d 	bl	8008d5c <rcu_periph_clock_enable>
 8009822:	2101      	movs	r1, #1
 8009824:	4620      	mov	r0, r4
 8009826:	f7ff f8fd 	bl	8008a24 <dma_deinit>
 800982a:	a801      	add	r0, sp, #4
 800982c:	f7ff f916 	bl	8008a5c <dma_struct_para_init>
 8009830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009834:	2501      	movs	r5, #1
 8009836:	9304      	str	r3, [sp, #16]
 8009838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800983c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009840:	4912      	ldr	r1, [pc, #72]	; (800988c <gd32_spi_dma_begin()+0xe4>)
 8009842:	4620      	mov	r0, r4
 8009844:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8009848:	9206      	str	r2, [sp, #24]
 800984a:	4629      	mov	r1, r5
 800984c:	aa01      	add	r2, sp, #4
 800984e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009852:	f88d 501e 	strb.w	r5, [sp, #30]
 8009856:	f7ff f90b 	bl	8008a70 <dma_init>
 800985a:	4629      	mov	r1, r5
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff f941 	bl	8008ae4 <dma_circulation_disable>
 8009862:	4629      	mov	r1, r5
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff f94d 	bl	8008b04 <dma_memory_to_memory_disable>
 800986a:	2200      	movs	r2, #0
 800986c:	4b08      	ldr	r3, [pc, #32]	; (8009890 <gd32_spi_dma_begin()+0xe8>)
 800986e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8009872:	b009      	add	sp, #36	; 0x24
 8009874:	bd30      	pop	{r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	40010c00 	andmi	r0, r1, r0, lsl #24
 800987c:	40003c00 	andmi	r3, r0, r0, lsl #24
 8009880:	40010800 	andmi	r0, r1, r0, lsl #16
 8009884:	00300400 	eorseq	r0, r0, r0, lsl #8
 8009888:	00030d40 	andeq	r0, r3, r0, asr #26
 800988c:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8009890:	40020000 	andmi	r0, r2, r0

08009894 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4c08      	ldr	r4, [pc, #32]	; (80098b8 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8009898:	4605      	mov	r5, r0
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fb19 	bl	8009ed2 <i2s_disable>
 80098a0:	2300      	movs	r3, #0
 80098a2:	4620      	mov	r0, r4
 80098a4:	461a      	mov	r2, r3
 80098a6:	0969      	lsrs	r1, r5, #5
 80098a8:	f000 fade 	bl	8009e68 <i2s_psc_config>
 80098ac:	4620      	mov	r0, r4
 80098ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b2:	f000 bb09 	b.w	8009ec8 <i2s_enable>
 80098b6:	bf00      	nop
 80098b8:	40003c00 	andmi	r3, r0, r0, lsl #24

080098bc <gd32_spi_dma_tx_prepare(unsigned int*)>:
 80098bc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	4801      	ldr	r0, [pc, #4]	; (80098c8 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	2000181c 	andcs	r1, r0, ip, lsl r8

080098cc <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80098cc:	4a0a      	ldr	r2, [pc, #40]	; (80098f8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80098ce:	3101      	adds	r1, #1
 80098d0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80098d4:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80098d8:	f023 0301 	bic.w	r3, r3, #1
 80098dc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80098e0:	f043 0301 	orr.w	r3, r3, #1
 80098e4:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80098e8:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80098ec:	4803      	ldr	r0, [pc, #12]	; (80098fc <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80098ee:	2100      	movs	r1, #0
 80098f0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80098f4:	f000 baf2 	b.w	8009edc <spi_dma_enable>
 80098f8:	40020000 	andmi	r0, r2, r0
 80098fc:	40003c00 	andmi	r3, r0, r0, lsl #24

08009900 <gd32_spi_dma_tx_is_active()>:
 8009900:	4b03      	ldr	r3, [pc, #12]	; (8009910 <gd32_spi_dma_tx_is_active()+0x10>)
 8009902:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8009906:	3800      	subs	r0, #0
 8009908:	bf18      	it	ne
 800990a:	2001      	movne	r0, #1
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40020000 	andmi	r0, r2, r0

08009914 <gd32_uart_begin>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	461e      	mov	r6, r3
 8009918:	4b63      	ldr	r3, [pc, #396]	; (8009aa8 <gd32_uart_begin+0x194>)
 800991a:	4604      	mov	r4, r0
 800991c:	4298      	cmp	r0, r3
 800991e:	460f      	mov	r7, r1
 8009920:	4615      	mov	r5, r2
 8009922:	d03b      	beq.n	800999c <gd32_uart_begin+0x88>
 8009924:	d80a      	bhi.n	800993c <gd32_uart_begin+0x28>
 8009926:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800992a:	4298      	cmp	r0, r3
 800992c:	d02f      	beq.n	800998e <gd32_uart_begin+0x7a>
 800992e:	f240 7012 	movw	r0, #1810	; 0x712
 8009932:	f7ff fa13 	bl	8008d5c <rcu_periph_clock_enable>
 8009936:	f240 6004 	movw	r0, #1540	; 0x604
 800993a:	e008      	b.n	800994e <gd32_uart_begin+0x3a>
 800993c:	4b5b      	ldr	r3, [pc, #364]	; (8009aac <gd32_uart_begin+0x198>)
 800993e:	4298      	cmp	r0, r3
 8009940:	d02f      	beq.n	80099a2 <gd32_uart_begin+0x8e>
 8009942:	f240 600e 	movw	r0, #1550	; 0x60e
 8009946:	f7ff fa09 	bl	8008d5c <rcu_periph_clock_enable>
 800994a:	f240 6003 	movw	r0, #1539	; 0x603
 800994e:	f7ff fa05 	bl	8008d5c <rcu_periph_clock_enable>
 8009952:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8009956:	f7ff fa01 	bl	8008d5c <rcu_periph_clock_enable>
 800995a:	4b53      	ldr	r3, [pc, #332]	; (8009aa8 <gd32_uart_begin+0x194>)
 800995c:	429c      	cmp	r4, r3
 800995e:	f000 8084 	beq.w	8009a6a <gd32_uart_begin+0x156>
 8009962:	d829      	bhi.n	80099b8 <gd32_uart_begin+0xa4>
 8009964:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8009968:	429c      	cmp	r4, r3
 800996a:	d071      	beq.n	8009a50 <gd32_uart_begin+0x13c>
 800996c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009970:	2203      	movs	r2, #3
 8009972:	2118      	movs	r1, #24
 8009974:	484e      	ldr	r0, [pc, #312]	; (8009ab0 <gd32_uart_begin+0x19c>)
 8009976:	f7ff f95f 	bl	8008c38 <gpio_init>
 800997a:	2104      	movs	r1, #4
 800997c:	484c      	ldr	r0, [pc, #304]	; (8009ab0 <gd32_uart_begin+0x19c>)
 800997e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009982:	2203      	movs	r2, #3
 8009984:	f7ff f958 	bl	8008c38 <gpio_init>
 8009988:	2101      	movs	r1, #1
 800998a:	484a      	ldr	r0, [pc, #296]	; (8009ab4 <gd32_uart_begin+0x1a0>)
 800998c:	e025      	b.n	80099da <gd32_uart_begin+0xc6>
 800998e:	f240 7011 	movw	r0, #1809	; 0x711
 8009992:	f7ff f9e3 	bl	8008d5c <rcu_periph_clock_enable>
 8009996:	f240 6002 	movw	r0, #1538	; 0x602
 800999a:	e7d8      	b.n	800994e <gd32_uart_begin+0x3a>
 800999c:	f240 7013 	movw	r0, #1811	; 0x713
 80099a0:	e7c7      	b.n	8009932 <gd32_uart_begin+0x1e>
 80099a2:	f240 7014 	movw	r0, #1812	; 0x714
 80099a6:	f7ff f9d9 	bl	8008d5c <rcu_periph_clock_enable>
 80099aa:	f240 6004 	movw	r0, #1540	; 0x604
 80099ae:	f7ff f9d5 	bl	8008d5c <rcu_periph_clock_enable>
 80099b2:	f240 6005 	movw	r0, #1541	; 0x605
 80099b6:	e7ca      	b.n	800994e <gd32_uart_begin+0x3a>
 80099b8:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <gd32_uart_begin+0x198>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d062      	beq.n	8009a84 <gd32_uart_begin+0x170>
 80099be:	2340      	movs	r3, #64	; 0x40
 80099c0:	2203      	movs	r2, #3
 80099c2:	2118      	movs	r1, #24
 80099c4:	483c      	ldr	r0, [pc, #240]	; (8009ab8 <gd32_uart_begin+0x1a4>)
 80099c6:	f7ff f937 	bl	8008c38 <gpio_init>
 80099ca:	2104      	movs	r1, #4
 80099cc:	483a      	ldr	r0, [pc, #232]	; (8009ab8 <gd32_uart_begin+0x1a4>)
 80099ce:	2380      	movs	r3, #128	; 0x80
 80099d0:	2203      	movs	r2, #3
 80099d2:	f7ff f931 	bl	8008c38 <gpio_init>
 80099d6:	2101      	movs	r1, #1
 80099d8:	2004      	movs	r0, #4
 80099da:	f7ff f987 	bl	8008cec <gpio_pin_remap_config>
 80099de:	4620      	mov	r0, r4
 80099e0:	f7ff fc2c 	bl	800923c <usart_deinit>
 80099e4:	68e3      	ldr	r3, [r4, #12]
 80099e6:	4639      	mov	r1, r7
 80099e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099ec:	4620      	mov	r0, r4
 80099ee:	60e3      	str	r3, [r4, #12]
 80099f0:	f7ff fc64 	bl	80092bc <usart_baudrate_set>
 80099f4:	f1a5 0309 	sub.w	r3, r5, #9
 80099f8:	4259      	negs	r1, r3
 80099fa:	4159      	adcs	r1, r3
 80099fc:	4620      	mov	r0, r4
 80099fe:	0309      	lsls	r1, r1, #12
 8009a00:	f7ff fc8c 	bl	800931c <usart_word_length_set>
 8009a04:	9906      	ldr	r1, [sp, #24]
 8009a06:	4620      	mov	r0, r4
 8009a08:	1e8a      	subs	r2, r1, #2
 8009a0a:	4251      	negs	r1, r2
 8009a0c:	4151      	adcs	r1, r2
 8009a0e:	0349      	lsls	r1, r1, #13
 8009a10:	f7ff fc8c 	bl	800932c <usart_stop_bit_set>
 8009a14:	2e01      	cmp	r6, #1
 8009a16:	d041      	beq.n	8009a9c <gd32_uart_begin+0x188>
 8009a18:	2e02      	cmp	r6, #2
 8009a1a:	d142      	bne.n	8009aa2 <gd32_uart_begin+0x18e>
 8009a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a20:	4620      	mov	r0, r4
 8009a22:	f7ff fc73 	bl	800930c <usart_parity_config>
 8009a26:	2100      	movs	r1, #0
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff fc93 	bl	8009354 <usart_hardware_flow_rts_config>
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4620      	mov	r0, r4
 8009a32:	f7ff fc95 	bl	8009360 <usart_hardware_flow_cts_config>
 8009a36:	2104      	movs	r1, #4
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7ff fc85 	bl	8009348 <usart_receive_config>
 8009a3e:	2108      	movs	r1, #8
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7ff fc7b 	bl	800933c <usart_transmit_config>
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009a4c:	60e3      	str	r3, [r4, #12]
 8009a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a50:	2304      	movs	r3, #4
 8009a52:	2203      	movs	r2, #3
 8009a54:	2118      	movs	r1, #24
 8009a56:	4819      	ldr	r0, [pc, #100]	; (8009abc <gd32_uart_begin+0x1a8>)
 8009a58:	f7ff f8ee 	bl	8008c38 <gpio_init>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	2203      	movs	r2, #3
 8009a60:	2104      	movs	r1, #4
 8009a62:	4816      	ldr	r0, [pc, #88]	; (8009abc <gd32_uart_begin+0x1a8>)
 8009a64:	f7ff f8e8 	bl	8008c38 <gpio_init>
 8009a68:	e7b9      	b.n	80099de <gd32_uart_begin+0xca>
 8009a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6e:	2203      	movs	r2, #3
 8009a70:	2118      	movs	r1, #24
 8009a72:	480f      	ldr	r0, [pc, #60]	; (8009ab0 <gd32_uart_begin+0x19c>)
 8009a74:	f7ff f8e0 	bl	8008c38 <gpio_init>
 8009a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	2104      	movs	r1, #4
 8009a80:	480b      	ldr	r0, [pc, #44]	; (8009ab0 <gd32_uart_begin+0x19c>)
 8009a82:	e7ef      	b.n	8009a64 <gd32_uart_begin+0x150>
 8009a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a88:	2203      	movs	r2, #3
 8009a8a:	2118      	movs	r1, #24
 8009a8c:	4808      	ldr	r0, [pc, #32]	; (8009ab0 <gd32_uart_begin+0x19c>)
 8009a8e:	f7ff f8d3 	bl	8008c38 <gpio_init>
 8009a92:	2304      	movs	r3, #4
 8009a94:	2203      	movs	r2, #3
 8009a96:	4619      	mov	r1, r3
 8009a98:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <gd32_uart_begin+0x1ac>)
 8009a9a:	e7e3      	b.n	8009a64 <gd32_uart_begin+0x150>
 8009a9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009aa0:	e7be      	b.n	8009a20 <gd32_uart_begin+0x10c>
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	e7bc      	b.n	8009a20 <gd32_uart_begin+0x10c>
 8009aa6:	bf00      	nop
 8009aa8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8009aac:	40005000 	andmi	r5, r0, r0
 8009ab0:	40011000 	andmi	r1, r1, r0
 8009ab4:	00140010 	andseq	r0, r4, r0, lsl r0
 8009ab8:	40010c00 	andmi	r0, r1, r0, lsl #24
 8009abc:	40010800 	andmi	r0, r1, r0, lsl #16
 8009ac0:	40011400 	andmi	r1, r1, r0, lsl #8

08009ac4 <micros_init()>:
 8009ac4:	4770      	bx	lr
	...

08009ac8 <udelay_init()>:
 8009ac8:	4a07      	ldr	r2, [pc, #28]	; (8009ae8 <udelay_init()+0x20>)
 8009aca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8009ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ad2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4b04      	ldr	r3, [pc, #16]	; (8009aec <udelay_init()+0x24>)
 8009ada:	605a      	str	r2, [r3, #4]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	e000ed00 	and	lr, r0, r0, lsl #26
 8009aec:	e0001000 	and	r1, r0, r0

08009af0 <udelay(unsigned int, unsigned int)>:
 8009af0:	236c      	movs	r3, #108	; 0x6c
 8009af2:	b530      	push	{r4, r5, lr}
 8009af4:	4358      	muls	r0, r3
 8009af6:	b909      	cbnz	r1, 8009afc <udelay(unsigned int, unsigned int)+0xc>
 8009af8:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <udelay(unsigned int, unsigned int)+0x2c>)
 8009afa:	6859      	ldr	r1, [r3, #4]
 8009afc:	2300      	movs	r3, #0
 8009afe:	4c07      	ldr	r4, [pc, #28]	; (8009b1c <udelay(unsigned int, unsigned int)+0x2c>)
 8009b00:	6862      	ldr	r2, [r4, #4]
 8009b02:	4291      	cmp	r1, r2
 8009b04:	d0fc      	beq.n	8009b00 <udelay(unsigned int, unsigned int)+0x10>
 8009b06:	bf2a      	itet	cs
 8009b08:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8009b0c:	189b      	addcc	r3, r3, r2
 8009b0e:	195b      	addcs	r3, r3, r5
 8009b10:	1a5b      	subs	r3, r3, r1
 8009b12:	4283      	cmp	r3, r0
 8009b14:	d300      	bcc.n	8009b18 <udelay(unsigned int, unsigned int)+0x28>
 8009b16:	bd30      	pop	{r4, r5, pc}
 8009b18:	4611      	mov	r1, r2
 8009b1a:	e7f1      	b.n	8009b00 <udelay(unsigned int, unsigned int)+0x10>
 8009b1c:	e0001000 	and	r1, r0, r0

08009b20 <adc_mode_config>:
 8009b20:	4b06      	ldr	r3, [pc, #24]	; (8009b3c <adc_mode_config+0x1c>)
 8009b22:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b26:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8009b2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009b2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b32:	4302      	orrs	r2, r0
 8009b34:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40012000 	andmi	r2, r1, r0

08009b40 <adc_special_function_config>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8009b46:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8009b4a:	f001 0102 	and.w	r1, r1, #2
 8009b4e:	b17a      	cbz	r2, 8009b70 <adc_special_function_config+0x30>
 8009b50:	b11b      	cbz	r3, 8009b5a <adc_special_function_config+0x1a>
 8009b52:	6843      	ldr	r3, [r0, #4]
 8009b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b58:	6043      	str	r3, [r0, #4]
 8009b5a:	b11c      	cbz	r4, 8009b64 <adc_special_function_config+0x24>
 8009b5c:	6843      	ldr	r3, [r0, #4]
 8009b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b62:	6043      	str	r3, [r0, #4]
 8009b64:	b119      	cbz	r1, 8009b6e <adc_special_function_config+0x2e>
 8009b66:	6883      	ldr	r3, [r0, #8]
 8009b68:	f043 0302 	orr.w	r3, r3, #2
 8009b6c:	6083      	str	r3, [r0, #8]
 8009b6e:	bd10      	pop	{r4, pc}
 8009b70:	b11b      	cbz	r3, 8009b7a <adc_special_function_config+0x3a>
 8009b72:	6843      	ldr	r3, [r0, #4]
 8009b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b78:	6043      	str	r3, [r0, #4]
 8009b7a:	b11c      	cbz	r4, 8009b84 <adc_special_function_config+0x44>
 8009b7c:	6843      	ldr	r3, [r0, #4]
 8009b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b82:	6043      	str	r3, [r0, #4]
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d0f2      	beq.n	8009b6e <adc_special_function_config+0x2e>
 8009b88:	6883      	ldr	r3, [r0, #8]
 8009b8a:	f023 0302 	bic.w	r3, r3, #2
 8009b8e:	e7ed      	b.n	8009b6c <adc_special_function_config+0x2c>

08009b90 <adc_data_alignment_config>:
 8009b90:	6883      	ldr	r3, [r0, #8]
 8009b92:	b119      	cbz	r1, 8009b9c <adc_data_alignment_config+0xc>
 8009b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b98:	6083      	str	r3, [r0, #8]
 8009b9a:	4770      	bx	lr
 8009b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ba0:	e7fa      	b.n	8009b98 <adc_data_alignment_config+0x8>

08009ba2 <adc_enable>:
 8009ba2:	6883      	ldr	r3, [r0, #8]
 8009ba4:	07db      	lsls	r3, r3, #31
 8009ba6:	bf5e      	ittt	pl
 8009ba8:	6883      	ldrpl	r3, [r0, #8]
 8009baa:	f043 0301 	orrpl.w	r3, r3, #1
 8009bae:	6083      	strpl	r3, [r0, #8]
 8009bb0:	4770      	bx	lr

08009bb2 <adc_calibration_enable>:
 8009bb2:	6883      	ldr	r3, [r0, #8]
 8009bb4:	f100 0208 	add.w	r2, r0, #8
 8009bb8:	f043 0308 	orr.w	r3, r3, #8
 8009bbc:	6083      	str	r3, [r0, #8]
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	0719      	lsls	r1, r3, #28
 8009bc2:	d4fc      	bmi.n	8009bbe <adc_calibration_enable+0xc>
 8009bc4:	6883      	ldr	r3, [r0, #8]
 8009bc6:	f043 0304 	orr.w	r3, r3, #4
 8009bca:	6083      	str	r3, [r0, #8]
 8009bcc:	6813      	ldr	r3, [r2, #0]
 8009bce:	075b      	lsls	r3, r3, #29
 8009bd0:	d4fc      	bmi.n	8009bcc <adc_calibration_enable+0x1a>
 8009bd2:	4770      	bx	lr

08009bd4 <adc_tempsensor_vrefint_enable>:
 8009bd4:	4a03      	ldr	r2, [pc, #12]	; (8009be4 <adc_tempsensor_vrefint_enable+0x10>)
 8009bd6:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8009bda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bde:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8009be2:	4770      	bx	lr
 8009be4:	40012000 	andmi	r2, r1, r0

08009be8 <adc_channel_length_config>:
 8009be8:	2901      	cmp	r1, #1
 8009bea:	d002      	beq.n	8009bf2 <adc_channel_length_config+0xa>
 8009bec:	2902      	cmp	r1, #2
 8009bee:	d00c      	beq.n	8009c0a <adc_channel_length_config+0x22>
 8009bf0:	4770      	bx	lr
 8009bf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009bf4:	3a01      	subs	r2, #1
 8009bf6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bfa:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009bfc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009bfe:	0512      	lsls	r2, r2, #20
 8009c00:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8009c04:	431a      	orrs	r2, r3
 8009c06:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009c08:	4770      	bx	lr
 8009c0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009c12:	6383      	str	r3, [r0, #56]	; 0x38
 8009c14:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c16:	0512      	lsls	r2, r2, #20
 8009c18:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	6382      	str	r2, [r0, #56]	; 0x38
 8009c20:	4770      	bx	lr

08009c22 <adc_inserted_channel_config>:
 8009c22:	b530      	push	{r4, r5, lr}
 8009c24:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009c26:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009c28:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8009c2c:	1a61      	subs	r1, r4, r1
 8009c2e:	f06f 0404 	mvn.w	r4, #4
 8009c32:	4361      	muls	r1, r4
 8009c34:	241f      	movs	r4, #31
 8009c36:	310f      	adds	r1, #15
 8009c38:	408c      	lsls	r4, r1
 8009c3a:	ea25 0504 	bic.w	r5, r5, r4
 8009c3e:	fa02 f101 	lsl.w	r1, r2, r1
 8009c42:	4329      	orrs	r1, r5
 8009c44:	2a09      	cmp	r2, #9
 8009c46:	6381      	str	r1, [r0, #56]	; 0x38
 8009c48:	d80b      	bhi.n	8009c62 <adc_inserted_channel_config+0x40>
 8009c4a:	2407      	movs	r4, #7
 8009c4c:	6901      	ldr	r1, [r0, #16]
 8009c4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c52:	4094      	lsls	r4, r2
 8009c54:	ea21 0104 	bic.w	r1, r1, r4
 8009c58:	fa03 f202 	lsl.w	r2, r3, r2
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	6102      	str	r2, [r0, #16]
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	2a11      	cmp	r2, #17
 8009c64:	d8fc      	bhi.n	8009c60 <adc_inserted_channel_config+0x3e>
 8009c66:	2407      	movs	r4, #7
 8009c68:	3a0a      	subs	r2, #10
 8009c6a:	68c1      	ldr	r1, [r0, #12]
 8009c6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c70:	4094      	lsls	r4, r2
 8009c72:	ea21 0104 	bic.w	r1, r1, r4
 8009c76:	4093      	lsls	r3, r2
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	60c3      	str	r3, [r0, #12]
 8009c7c:	e7f0      	b.n	8009c60 <adc_inserted_channel_config+0x3e>

08009c7e <adc_external_trigger_source_config>:
 8009c7e:	2901      	cmp	r1, #1
 8009c80:	d002      	beq.n	8009c88 <adc_external_trigger_source_config+0xa>
 8009c82:	2902      	cmp	r1, #2
 8009c84:	d008      	beq.n	8009c98 <adc_external_trigger_source_config+0x1a>
 8009c86:	4770      	bx	lr
 8009c88:	6883      	ldr	r3, [r0, #8]
 8009c8a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8009c8e:	6083      	str	r3, [r0, #8]
 8009c90:	6883      	ldr	r3, [r0, #8]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	6083      	str	r3, [r0, #8]
 8009c96:	4770      	bx	lr
 8009c98:	6883      	ldr	r3, [r0, #8]
 8009c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9e:	e7f6      	b.n	8009c8e <adc_external_trigger_source_config+0x10>

08009ca0 <adc_external_trigger_config>:
 8009ca0:	f001 0301 	and.w	r3, r1, #1
 8009ca4:	f001 0102 	and.w	r1, r1, #2
 8009ca8:	b152      	cbz	r2, 8009cc0 <adc_external_trigger_config+0x20>
 8009caa:	b11b      	cbz	r3, 8009cb4 <adc_external_trigger_config+0x14>
 8009cac:	6883      	ldr	r3, [r0, #8]
 8009cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cb2:	6083      	str	r3, [r0, #8]
 8009cb4:	b119      	cbz	r1, 8009cbe <adc_external_trigger_config+0x1e>
 8009cb6:	6883      	ldr	r3, [r0, #8]
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbc:	6083      	str	r3, [r0, #8]
 8009cbe:	4770      	bx	lr
 8009cc0:	b11b      	cbz	r3, 8009cca <adc_external_trigger_config+0x2a>
 8009cc2:	6883      	ldr	r3, [r0, #8]
 8009cc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009cc8:	6083      	str	r3, [r0, #8]
 8009cca:	2900      	cmp	r1, #0
 8009ccc:	d0f7      	beq.n	8009cbe <adc_external_trigger_config+0x1e>
 8009cce:	6883      	ldr	r3, [r0, #8]
 8009cd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cd4:	e7f2      	b.n	8009cbc <adc_external_trigger_config+0x1c>

08009cd6 <adc_software_trigger_enable>:
 8009cd6:	07ca      	lsls	r2, r1, #31
 8009cd8:	bf42      	ittt	mi
 8009cda:	6883      	ldrmi	r3, [r0, #8]
 8009cdc:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8009ce0:	6083      	strmi	r3, [r0, #8]
 8009ce2:	078b      	lsls	r3, r1, #30
 8009ce4:	bf42      	ittt	mi
 8009ce6:	6883      	ldrmi	r3, [r0, #8]
 8009ce8:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8009cec:	6083      	strmi	r3, [r0, #8]
 8009cee:	4770      	bx	lr

08009cf0 <i2c_clock_config>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2002      	movs	r0, #2
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	4617      	mov	r7, r2
 8009cfa:	f7ff f8e3 	bl	8008ec4 <rcu_clock_freq_get>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	4828      	ldr	r0, [pc, #160]	; (8009da4 <i2c_clock_config+0xb4>)
 8009d02:	4a29      	ldr	r2, [pc, #164]	; (8009da8 <i2c_clock_config+0xb8>)
 8009d04:	fbb3 f0f0 	udiv	r0, r3, r0
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	bf34      	ite	cc
 8009d0c:	4601      	movcc	r1, r0
 8009d0e:	2136      	movcs	r1, #54	; 0x36
 8009d10:	686e      	ldr	r6, [r5, #4]
 8009d12:	4a26      	ldr	r2, [pc, #152]	; (8009dac <i2c_clock_config+0xbc>)
 8009d14:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8009d18:	430e      	orrs	r6, r1
 8009d1a:	4294      	cmp	r4, r2
 8009d1c:	606e      	str	r6, [r5, #4]
 8009d1e:	d816      	bhi.n	8009d4e <i2c_clock_config+0x5e>
 8009d20:	3001      	adds	r0, #1
 8009d22:	2835      	cmp	r0, #53	; 0x35
 8009d24:	d90d      	bls.n	8009d42 <i2c_clock_config+0x52>
 8009d26:	2236      	movs	r2, #54	; 0x36
 8009d28:	622a      	str	r2, [r5, #32]
 8009d2a:	0064      	lsls	r4, r4, #1
 8009d2c:	fbb3 f4f4 	udiv	r4, r3, r4
 8009d30:	2c04      	cmp	r4, #4
 8009d32:	bf38      	it	cc
 8009d34:	2404      	movcc	r4, #4
 8009d36:	69ea      	ldr	r2, [r5, #28]
 8009d38:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8009d3c:	4314      	orrs	r4, r2
 8009d3e:	61ec      	str	r4, [r5, #28]
 8009d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d42:	2802      	cmp	r0, #2
 8009d44:	d801      	bhi.n	8009d4a <i2c_clock_config+0x5a>
 8009d46:	2202      	movs	r2, #2
 8009d48:	e7ee      	b.n	8009d28 <i2c_clock_config+0x38>
 8009d4a:	6228      	str	r0, [r5, #32]
 8009d4c:	e7ed      	b.n	8009d2a <i2c_clock_config+0x3a>
 8009d4e:	4a18      	ldr	r2, [pc, #96]	; (8009db0 <i2c_clock_config+0xc0>)
 8009d50:	4294      	cmp	r4, r2
 8009d52:	d8f5      	bhi.n	8009d40 <i2c_clock_config+0x50>
 8009d54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d58:	4351      	muls	r1, r2
 8009d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d5e:	fbb1 f1f2 	udiv	r1, r1, r2
 8009d62:	3101      	adds	r1, #1
 8009d64:	6229      	str	r1, [r5, #32]
 8009d66:	b9a7      	cbnz	r7, 8009d92 <i2c_clock_config+0xa2>
 8009d68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009d6c:	fbb3 f4f4 	udiv	r4, r3, r4
 8009d70:	69eb      	ldr	r3, [r5, #28]
 8009d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d76:	61eb      	str	r3, [r5, #28]
 8009d78:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8009d7c:	b90b      	cbnz	r3, 8009d82 <i2c_clock_config+0x92>
 8009d7e:	f044 0401 	orr.w	r4, r4, #1
 8009d82:	69eb      	ldr	r3, [r5, #28]
 8009d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d88:	61eb      	str	r3, [r5, #28]
 8009d8a:	69eb      	ldr	r3, [r5, #28]
 8009d8c:	4323      	orrs	r3, r4
 8009d8e:	61eb      	str	r3, [r5, #28]
 8009d90:	e7d6      	b.n	8009d40 <i2c_clock_config+0x50>
 8009d92:	2219      	movs	r2, #25
 8009d94:	4354      	muls	r4, r2
 8009d96:	fbb3 f4f4 	udiv	r4, r3, r4
 8009d9a:	69eb      	ldr	r3, [r5, #28]
 8009d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009da0:	e7e9      	b.n	8009d76 <i2c_clock_config+0x86>
 8009da2:	bf00      	nop
 8009da4:	000f4240 	andeq	r4, pc, r0, asr #4
 8009da8:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8009dac:	000186a0 	andeq	r8, r1, r0, lsr #13
 8009db0:	00061a80 	andeq	r1, r6, r0, lsl #21

08009db4 <i2c_ack_config>:
 8009db4:	6803      	ldr	r3, [r0, #0]
 8009db6:	2901      	cmp	r1, #1
 8009db8:	bf0c      	ite	eq
 8009dba:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8009dbe:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	4770      	bx	lr

08009dc6 <i2c_ackpos_config>:
 8009dc6:	6803      	ldr	r3, [r0, #0]
 8009dc8:	b919      	cbnz	r1, 8009dd2 <i2c_ackpos_config+0xc>
 8009dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009dce:	6003      	str	r3, [r0, #0]
 8009dd0:	4770      	bx	lr
 8009dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dd6:	e7fa      	b.n	8009dce <i2c_ackpos_config+0x8>

08009dd8 <i2c_master_addressing>:
 8009dd8:	3202      	adds	r2, #2
 8009dda:	bf0c      	ite	eq
 8009ddc:	f021 0101 	biceq.w	r1, r1, #1
 8009de0:	f041 0101 	orrne.w	r1, r1, #1
 8009de4:	6101      	str	r1, [r0, #16]
 8009de6:	4770      	bx	lr

08009de8 <i2c_enable>:
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	f043 0301 	orr.w	r3, r3, #1
 8009dee:	6003      	str	r3, [r0, #0]
 8009df0:	4770      	bx	lr

08009df2 <i2c_start_on_bus>:
 8009df2:	6803      	ldr	r3, [r0, #0]
 8009df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	4770      	bx	lr

08009dfc <i2c_stop_on_bus>:
 8009dfc:	6803      	ldr	r3, [r0, #0]
 8009dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e02:	6003      	str	r3, [r0, #0]
 8009e04:	4770      	bx	lr

08009e06 <i2c_data_transmit>:
 8009e06:	6101      	str	r1, [r0, #16]
 8009e08:	4770      	bx	lr

08009e0a <i2c_data_receive>:
 8009e0a:	6900      	ldr	r0, [r0, #16]
 8009e0c:	b2c0      	uxtb	r0, r0
 8009e0e:	4770      	bx	lr

08009e10 <i2c_flag_get>:
 8009e10:	098b      	lsrs	r3, r1, #6
 8009e12:	581a      	ldr	r2, [r3, r0]
 8009e14:	2301      	movs	r3, #1
 8009e16:	f001 011f 	and.w	r1, r1, #31
 8009e1a:	408b      	lsls	r3, r1
 8009e1c:	4213      	tst	r3, r2
 8009e1e:	bf14      	ite	ne
 8009e20:	2001      	movne	r0, #1
 8009e22:	2000      	moveq	r0, #0
 8009e24:	4770      	bx	lr

08009e26 <i2c_flag_clear>:
 8009e26:	f240 5301 	movw	r3, #1281	; 0x501
 8009e2a:	4299      	cmp	r1, r3
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	d102      	bne.n	8009e36 <i2c_flag_clear+0x10>
 8009e30:	6943      	ldr	r3, [r0, #20]
 8009e32:	6983      	ldr	r3, [r0, #24]
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	2201      	movs	r2, #1
 8009e38:	098c      	lsrs	r4, r1, #6
 8009e3a:	5823      	ldr	r3, [r4, r0]
 8009e3c:	f001 011f 	and.w	r1, r1, #31
 8009e40:	408a      	lsls	r2, r1
 8009e42:	ea23 0302 	bic.w	r3, r3, r2
 8009e46:	5023      	str	r3, [r4, r0]
 8009e48:	e7f4      	b.n	8009e34 <i2c_flag_clear+0xe>

08009e4a <i2s_init>:
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	69c4      	ldr	r4, [r0, #28]
 8009e4e:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8009e52:	f024 0408 	bic.w	r4, r4, #8
 8009e56:	0424      	lsls	r4, r4, #16
 8009e58:	0c24      	lsrs	r4, r4, #16
 8009e5a:	431c      	orrs	r4, r3
 8009e5c:	4314      	orrs	r4, r2
 8009e5e:	430c      	orrs	r4, r1
 8009e60:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8009e64:	61c4      	str	r4, [r0, #28]
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <i2s_psc_config>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	4605      	mov	r5, r0
 8009e70:	6203      	str	r3, [r0, #32]
 8009e72:	2000      	movs	r0, #0
 8009e74:	460c      	mov	r4, r1
 8009e76:	4616      	mov	r6, r2
 8009e78:	f7ff f824 	bl	8008ec4 <rcu_clock_freq_get>
 8009e7c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009e80:	f04f 030a 	mov.w	r3, #10
 8009e84:	d11b      	bne.n	8009ebe <i2s_psc_config+0x56>
 8009e86:	0a00      	lsrs	r0, r0, #8
 8009e88:	4358      	muls	r0, r3
 8009e8a:	fbb0 f4f4 	udiv	r4, r0, r4
 8009e8e:	230a      	movs	r3, #10
 8009e90:	3405      	adds	r4, #5
 8009e92:	fbb4 f4f3 	udiv	r4, r4, r3
 8009e96:	f004 0301 	and.w	r3, r4, #1
 8009e9a:	0864      	lsrs	r4, r4, #1
 8009e9c:	1ea2      	subs	r2, r4, #2
 8009e9e:	2afd      	cmp	r2, #253	; 0xfd
 8009ea0:	bf86      	itte	hi
 8009ea2:	2300      	movhi	r3, #0
 8009ea4:	2402      	movhi	r4, #2
 8009ea6:	021b      	lslls	r3, r3, #8
 8009ea8:	431c      	orrs	r4, r3
 8009eaa:	433c      	orrs	r4, r7
 8009eac:	622c      	str	r4, [r5, #32]
 8009eae:	69eb      	ldr	r3, [r5, #28]
 8009eb0:	f023 0307 	bic.w	r3, r3, #7
 8009eb4:	61eb      	str	r3, [r5, #28]
 8009eb6:	69eb      	ldr	r3, [r5, #28]
 8009eb8:	4333      	orrs	r3, r6
 8009eba:	61eb      	str	r3, [r5, #28]
 8009ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebe:	b90e      	cbnz	r6, 8009ec4 <i2s_psc_config+0x5c>
 8009ec0:	0940      	lsrs	r0, r0, #5
 8009ec2:	e7e1      	b.n	8009e88 <i2s_psc_config+0x20>
 8009ec4:	0980      	lsrs	r0, r0, #6
 8009ec6:	e7df      	b.n	8009e88 <i2s_psc_config+0x20>

08009ec8 <i2s_enable>:
 8009ec8:	69c3      	ldr	r3, [r0, #28]
 8009eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ece:	61c3      	str	r3, [r0, #28]
 8009ed0:	4770      	bx	lr

08009ed2 <i2s_disable>:
 8009ed2:	69c3      	ldr	r3, [r0, #28]
 8009ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed8:	61c3      	str	r3, [r0, #28]
 8009eda:	4770      	bx	lr

08009edc <spi_dma_enable>:
 8009edc:	6843      	ldr	r3, [r0, #4]
 8009ede:	b919      	cbnz	r1, 8009ee8 <spi_dma_enable+0xc>
 8009ee0:	f043 0302 	orr.w	r3, r3, #2
 8009ee4:	6043      	str	r3, [r0, #4]
 8009ee6:	4770      	bx	lr
 8009ee8:	f043 0301 	orr.w	r3, r3, #1
 8009eec:	e7fa      	b.n	8009ee4 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08009ef0 <vtable for RDMResponder-0xe4>:
 8009ef0:	00000003 	andeq	r0, r0, r3
 8009ef4:	000000aa 	andeq	r0, r0, sl, lsr #1
 8009ef8:	00000006 	andeq	r0, r0, r6
 8009efc:	00000000 	andeq	r0, r0, r0
 8009f00:	01ff0000 	mvnseq	r0, r0
 8009f04:	00000001 	andeq	r0, r0, r1
 8009f08:	00000001 	andeq	r0, r0, r1
 8009f0c:	00000001 	andeq	r0, r0, r1
 8009f10:	00000000 	andeq	r0, r0, r0
 8009f14:	18002000 	stmdane	r0, {sp}
 8009f18:	00180400 	andseq	r0, r8, r0, lsl #8
 8009f1c:	00000007 	andeq	r0, r0, r7
	...
 8009f28:	03020100 	movweq	r0, #8448	; 0x2100
 8009f2c:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8009f30:	00000009 	andeq	r0, r0, r9
 8009f34:	03020100 	movweq	r0, #8448	; 0x2100
 8009f38:	73696404 	cmnvc	r9, #4, 8	; 0x4000000
 8009f3c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009f40:	6e650064 	cdpvs	0, 6, cr0, cr5, cr4, {3}
 8009f44:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8009f48:	6f430064 	svcvs	0x00430064
 8009f4c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009f50:	646f4d20 	strbtvs	r4, [pc], #-3360	; 8009f58 <_etext+0x68>
 8009f54:	38310065 	ldmdacc	r1!, {r0, r2, r5, r6}
 8009f58:	3a32313a 	bcc	8c96448 <__exidx_end+0xc8ae78>
 8009f5c:	4d003035 	stcmi	0, cr3, [r0, #-212]	; 0xffffff2c
 8009f60:	31207261 			; <UNDEFINED> instruction: 0x31207261
 8009f64:	30322039 	eorscc	r2, r2, r9, lsr r0
 8009f68:	25003232 	strcs	r3, [r0, #-562]	; 0xfffffdce
 8009f6c:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 8009f70:	75254720 	strvc	r4, [r5, #-1824]!	; 0xfffff8e0
 8009f74:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8009f78:	6f43005d 	svcvs	0x0043005d
 8009f7c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8009f80:	646f6d20 	strbtvs	r6, [pc], #-3360	; 8009f88 <_etext+0x98>
 8009f84:	4f200065 	svcmi	0x00200065
 8009f88:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8009f8c:	73252074 			; <UNDEFINED> instruction: 0x73252074
 8009f90:	6554000a 	ldrbvs	r0, [r4, #-10]
 8009f94:	70207473 	eorvc	r7, r0, r3, ror r4
 8009f98:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 8009f9c:	3a206e72 	bcc	882596c <__exidx_end+0x81a39c>
 8009fa0:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8009fa4:	5d75255b 	cfldr64pl	mvdx2, [r5, #-364]!	; 0xfffffe94
 8009fa8:	4452000a 	ldrbmi	r0, [r2], #-10
 8009fac:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 8009fb0:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8009fb4:	20726564 	rsbscs	r6, r2, r4, ror #10
 8009fb8:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8009fbc:	0031206c 	eorseq	r2, r1, ip, rrx
 8009fc0:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8009fc4:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8009fc8:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8009fcc:	3a732500 	bcc	9cd33d4 <__exidx_end+0x1cc7e04>
 8009fd0:	00007525 	andeq	r7, r0, r5, lsr #10

08009fd4 <vtable for RDMResponder>:
	...
 8009fdc:	080010f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, ip}
 8009fe0:	08001141 	stmdaeq	r0, {r0, r6, r8, ip}
 8009fe4:	08001089 	stmdaeq	r0, {r0, r3, r7, ip}
 8009fe8:	080010d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, ip}

08009fec <vtable for FactoryDefaults>:
	...
 8009ff4:	08001043 	stmdaeq	r0, {r0, r1, r6, ip}
 8009ff8:	0800106f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, ip}
 8009ffc:	080010bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, ip}

0800a000 <vtable for PixelDmxStartStop>:
	...
 800a008:	08001045 	stmdaeq	r0, {r0, r2, r6, ip}
 800a00c:	0800107b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, ip}
 800a010:	08001049 	stmdaeq	r0, {r0, r3, r6, ip}
 800a014:	08001055 	stmdaeq	r0, {r0, r2, r4, r6, ip}

0800a018 <vtable for Reboot>:
	...
 800a020:	08001061 	stmdaeq	r0, {r0, r5, r6, ip}
 800a024:	08001063 	stmdaeq	r0, {r0, r1, r5, r6, ip}
 800a028:	080010cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, ip}

0800a02c <SOFTWARE_VERSION>:
 800a02c:	00332e31 	eorseq	r2, r3, r1, lsr lr
 800a030:	30322d25 	eorscc	r2, r2, r5, lsr #26
 800a034:	2d250073 	stccs	0, cr0, [r5, #-460]!	; 0xfffffe34
 800a038:	25207338 	strcs	r7, [r0, #-824]!	; 0xfffffcc8
 800a03c:	2064322d 	rsbcs	r3, r4, sp, lsr #4
 800a040:	322d2547 	eorcc	r2, sp, #297795584	; 0x11c00000
 800a044:	2d252064 	stccs	0, cr2, [r5, #-400]!	; 0xfffffe70
 800a048:	50007335 	andpl	r7, r0, r5, lsr r3
 800a04c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a050:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 800a054:	79540064 	ldmdbvc	r4, {r2, r5, r6}^
 800a058:	47006570 	smlsdxmi	r0, r0, r5, r6
 800a05c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800a060:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800a064:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 800a068:	614d0074 	hvcvs	53252	; 0xd004
 800a06c:	65540070 	ldrbvs	r0, [r4, #-112]	; 0xffffff90
 800a070:	50207473 	eorpl	r7, r0, r3, ror r4
 800a074:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 800a078:	50006e72 	andpl	r6, r0, r2, ror lr
 800a07c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 800a080:	55006d61 	strpl	r6, [r0, #-3425]	; 0xfffff29f
 800a084:	6665646e 	strbtvs	r6, [r5], -lr, ror #8
 800a088:	64656e69 	strbtvs	r6, [r5], #-3689	; 0xfffff197
	...

0800a08d <SOFTWARE_VERSION>:
 800a08d:	00332e31 	eorseq	r2, r3, r1, lsr lr
 800a091:	00555043 	subseq	r5, r5, r3, asr #32
 800a095:	 	andeq	r0, r0, r0

0800a098 <vtable for CpuTemperature>:
	...
 800a0a0:	08002505 	stmdaeq	r0, {r0, r2, r8, sl, sp}
 800a0a4:	08002515 	stmdaeq	r0, {r0, r2, r4, r8, sl, sp}
 800a0a8:	08002501 	stmdaeq	r0, {r0, r8, sl, sp}
 800a0ac:	08002507 	stmdaeq	r0, {r0, r1, r2, r8, sl, sp}

0800a0b0 <vtable for RDMSensorBH170>:
	...
 800a0b8:	08002787 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, sl, sp}
 800a0bc:	08002789 	stmdaeq	r0, {r0, r3, r7, r8, r9, sl, sp}
 800a0c0:	0800263b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r9, sl, sp}
 800a0c4:	08002709 	stmdaeq	r0, {r0, r3, r8, r9, sl, sp}

0800a0c8 <vtable for RDMSensorMCP9808>:
	...
 800a0d0:	08002779 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, sp}
 800a0d4:	0800277b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, r9, sl, sp}
 800a0d8:	08002641 	stmdaeq	r0, {r0, r6, r9, sl, sp}
 800a0dc:	080026f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, sl, sp}

0800a0e0 <vtable for RDMSensorHTU21DHumidity>:
	...
 800a0e8:	0800276b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, r9, sl, sp}
 800a0ec:	0800276d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, sl, sp}
 800a0f0:	08002647 	stmdaeq	r0, {r0, r1, r2, r6, r9, sl, sp}
 800a0f4:	080026e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, sp}

0800a0f8 <vtable for RDMSensorHTU21DTemperature>:
	...
 800a100:	0800275d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, sp}
 800a104:	0800275f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp}
 800a108:	0800264d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, sp}
 800a10c:	080026d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, sp}

0800a110 <vtable for RDMSensorINA219Current>:
	...
 800a118:	0800274f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, r9, sl, sp}
 800a11c:	08002751 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, sp}
 800a120:	08002653 	stmdaeq	r0, {r0, r1, r4, r6, r9, sl, sp}
 800a124:	080026bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, sp}

0800a128 <vtable for RDMSensorINA219Power>:
	...
 800a130:	08002741 	stmdaeq	r0, {r0, r6, r8, r9, sl, sp}
 800a134:	08002743 	stmdaeq	r0, {r0, r1, r6, r8, r9, sl, sp}
 800a138:	08002659 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, sp}
 800a13c:	080026ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, sp}

0800a140 <vtable for RDMSensorINA219Voltage>:
	...
 800a148:	08002733 	stmdaeq	r0, {r0, r1, r4, r5, r8, r9, sl, sp}
 800a14c:	08002735 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, sp}
 800a150:	0800265f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, sl, sp}
 800a154:	08002691 	stmdaeq	r0, {r0, r4, r7, r9, sl, sp}

0800a158 <vtable for RDMSensorSI7021Humidity>:
	...
 800a160:	08002725 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, sp}
 800a164:	08002727 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, sl, sp}
 800a168:	08002665 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, sp}
 800a16c:	08002681 	stmdaeq	r0, {r0, r7, r9, sl, sp}

0800a170 <vtable for RDMSensorSI7021Temperature>:
	...
 800a178:	08002717 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, sp}
 800a17c:	08002719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, sp}
 800a180:	0800266b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, sp}
 800a184:	08002671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, sp}

0800a188 <sensor::bh1750::DESCRIPTION>:
 800a188:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a18c:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a190:	6867694c 	stmdavs	r7!, {r2, r3, r6, r8, fp, sp, lr}^
 800a194:	 	stclvs	0, cr0, [r1, #-464]	; 0xfffffe30

0800a196 <sensor::htu21d::temperature::DESCRIPTION>:
 800a196:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a19a:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a19e:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a1a2:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a1a6:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a1aa <sensor::htu21d::humidity::DESCRIPTION>:
 800a1aa:	616c6552 	cmnvs	ip, r2, asr r5
 800a1ae:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a1b2:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a1b6:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a1ba:	 	svcvs	0x00500079

0800a1bc <sensor::ina219::power::DESCRIPTION>:
 800a1bc:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
 800a1c0:	 	strbvc	r0, [r3, #-114]	; 0xffffff8e

0800a1c2 <sensor::ina219::current::DESCRIPTION>:
 800a1c2:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
 800a1c6:	00746e65 	rsbseq	r6, r4, r5, ror #28

0800a1ca <sensor::ina219::voltage::DESCRIPTION>:
 800a1ca:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
 800a1ce:	00656761 	rsbeq	r6, r5, r1, ror #14

0800a1d2 <sensor::si7021::temperature::DESCRIPTION>:
 800a1d2:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a1d6:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a1da:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a1de:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a1e2:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a1e6 <sensor::si7021::humidity::DESCRIPTION>:
 800a1e6:	616c6552 	cmnvs	ip, r2, asr r5
 800a1ea:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a1ee:	6d754820 	ldclvs	8, cr4, [r5, #-128]!	; 0xffffff80
 800a1f2:	74696469 	strbtvc	r6, [r9], #-1129	; 0xfffffb97
 800a1f6:	 	stclvs	0, cr0, [r1, #-484]	; 0xfffffe1c

0800a1f8 <sensor::mcp9808::DESCRIPTION>:
 800a1f8:	69626d41 	stmdbvs	r2!, {r0, r6, r8, sl, fp, sp, lr}^
 800a1fc:	20746e65 	rsbscs	r6, r4, r5, ror #28
 800a200:	706d6554 	rsbvc	r6, sp, r4, asr r5
 800a204:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
 800a208:	00657275 	rsbeq	r7, r5, r5, ror r2

0800a20c <vtable for RDMSensor>:
	...
 800a224:	204d4452 	subcs	r4, sp, r2, asr r4
 800a228:	70736552 	rsbsvc	r6, r3, r2, asr r5
 800a22c:	65646e6f 	strbvs	r6, [r4, #-3695]!	; 0xfffff191
 800a230:	6f632072 	svcvs	0x00632072
 800a234:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 800a238:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 800a23c:	0a6e6f69 	beq	9ba5fe8 <__exidx_end+0x1b9aa18>
 800a240:	72502000 	subsvc	r2, r0, #0
 800a244:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
 800a248:	56206c6f 	strtpl	r6, [r0], -pc, ror #24
 800a24c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 800a250:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800a254:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 800a258:	4420000a 	strtmi	r0, [r0], #-10
 800a25c:	4120584d 			; <UNDEFINED> instruction: 0x4120584d
 800a260:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 800a264:	20207373 	eorcs	r7, r0, r3, ror r3
 800a268:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a26c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a270:	4420000a 	strtmi	r0, [r0], #-10
 800a274:	4620584d 	strtmi	r5, [r0], -sp, asr #16
 800a278:	70746f6f 	rsbsvc	r6, r4, pc, ror #30
 800a27c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 800a280:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a284:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 800a288:	5020000a 	eorpl	r0, r0, sl
 800a28c:	6f737265 	svcvs	0x00737265
 800a290:	696c616e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 800a294:	25207974 	strcs	r7, [r0, #-2420]!	; 0xfffff68c
 800a298:	666f2064 	strbtvs	r2, [pc], -r4, rrx
 800a29c:	20642520 	rsbcs	r2, r4, r0, lsr #10
 800a2a0:	2a2e255b 	bcs	8b93814 <__exidx_end+0xb88244>
 800a2a4:	000a5d73 	andeq	r5, sl, r3, ror sp
 800a2a8:	62755320 	rsbsvs	r5, r5, #32, 6	; 0x80000000
 800a2ac:	76654420 	strbtvc	r4, [r5], -r0, lsr #8
 800a2b0:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 800a2b4:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a2b8:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a2bc:	000a6425 	andeq	r6, sl, r5, lsr #8
 800a2c0:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 800a2c4:	73726f73 	cmnvc	r2, #460	; 0x1cc
 800a2c8:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a2cc:	20202020 	eorcs	r2, r0, r0, lsr #32
 800a2d0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800a2d4:	000a6425 	andeq	r6, sl, r5, lsr #8

0800a2d8 <DEVICE_LABEL>:
 800a2d8:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a2dc:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a2e0:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800a2e4:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 800a2e8:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 800a2ec:	00726564 	rsbseq	r6, r2, r4, ror #10

0800a2f0 <vtable for RDMDeviceResponder>:
	...
 800a2f8:	08003e99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, ip, sp}
 800a2fc:	08003eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp}
 800a300:	08003e93 	stmdaeq	r0, {r0, r1, r4, r7, r9, sl, fp, ip, sp}
 800a304:	08003e95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, ip, sp}
 800a308:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800a30c:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800a310:	6d450052 	stclvs	0, cr0, [r5, #-328]	; 0xfffffeb8
 800a314:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 800a318:	00006465 	andeq	r6, r0, r5, ror #8

0800a31c <UID_ALL>:
 800a31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 800a320:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0800a324 <RDMHandler::PID_DEFINITIONS>:
 800a324:	00000060 	andeq	r0, r0, r0, rrx
 800a328:	080043fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	...
 800a338:	01010000 	mrseq	r0, (UNDEF: 1)
 800a33c:	00000080 	andeq	r0, r0, r0, lsl #1
 800a340:	08004501 	stmdaeq	r0, {r0, r8, sl, lr}
	...
 800a350:	01010100 	mrseq	r0, (UNDEF: 17)
 800a354:	00000081 	andeq	r0, r0, r1, lsl #1
 800a358:	0800451d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, lr}
	...
 800a368:	01010100 	mrseq	r0, (UNDEF: 17)
 800a36c:	00000082 	andeq	r0, r0, r2, lsl #1
 800a370:	0800453d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, lr}
 800a374:	00000000 	andeq	r0, r0, r0
 800a378:	08004f45 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, fp, lr}
 800a37c:	00000000 	andeq	r0, r0, r0
 800a380:	01010100 	mrseq	r0, (UNDEF: 17)
 800a384:	00000090 	muleq	r0, r0, r0
 800a388:	08004465 	stmdaeq	r0, {r0, r2, r5, r6, sl, lr}
 800a38c:	00000000 	andeq	r0, r0, r0
 800a390:	08004e85 	stmdaeq	r0, {r0, r2, r7, r9, sl, fp, lr}
 800a394:	00000000 	andeq	r0, r0, r0
 800a398:	01010100 	mrseq	r0, (UNDEF: 17)
 800a39c:	00001000 	andeq	r1, r0, r0
 800a3a0:	0800459d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, lr}
 800a3a4:	00000000 	andeq	r0, r0, r0
 800a3a8:	0800481d 	stmdaeq	r0, {r0, r2, r3, r4, fp, lr}
 800a3ac:	00000000 	andeq	r0, r0, r0
 800a3b0:	01010000 	mrseq	r0, (UNDEF: 1)
 800a3b4:	00001001 	andeq	r1, r0, r1
	...
 800a3c0:	080047d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, lr}
 800a3c4:	00000000 	andeq	r0, r0, r0
 800a3c8:	01010100 	mrseq	r0, (UNDEF: 17)
 800a3cc:	00000050 	andeq	r0, r0, r0, asr r0
 800a3d0:	08004391 	stmdaeq	r0, {r0, r4, r7, r8, r9, lr}
	...
 800a3e0:	00010000 	andeq	r0, r1, r0
 800a3e4:	00000070 	andeq	r0, r0, r0, ror r0
 800a3e8:	080044e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, lr}
	...
 800a3f8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a3fc:	000000a0 	andeq	r0, r0, r0, lsr #1
 800a400:	080045b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, lr}
	...
 800a410:	00010100 	andeq	r0, r1, r0, lsl #2
 800a414:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a418:	080045b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, lr}
 800a41c:	00000000 	andeq	r0, r0, r0
 800a420:	08004899 	stmdaeq	r0, {r0, r3, r4, r7, fp, lr}
 800a424:	00000000 	andeq	r0, r0, r0
 800a428:	00010100 	andeq	r0, r1, r0, lsl #2
 800a42c:	000000c0 	andeq	r0, r0, r0, asr #1
 800a430:	08004579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, lr}
	...
 800a440:	00010000 	andeq	r0, r1, r0
 800a444:	000000c1 	andeq	r0, r0, r1, asr #1
 800a448:	080048e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, lr}
	...
 800a458:	00010100 	andeq	r0, r1, r0, lsl #2
 800a45c:	000000c2 	andeq	r0, r0, r2, asr #1
 800a460:	08004721 	stmdaeq	r0, {r0, r5, r8, r9, sl, lr}
	...
 800a470:	00010100 	andeq	r0, r1, r0, lsl #2
 800a474:	000000e0 	andeq	r0, r0, r0, ror #1
 800a478:	080045d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, lr}
 800a47c:	00000000 	andeq	r0, r0, r0
 800a480:	08004901 	stmdaeq	r0, {r0, r8, fp, lr}
 800a484:	00000000 	andeq	r0, r0, r0
 800a488:	00010100 	andeq	r0, r1, r0, lsl #2
 800a48c:	000000e1 	andeq	r0, r0, r1, ror #1
 800a490:	08004951 	stmdaeq	r0, {r0, r4, r6, r8, fp, lr}
	...
 800a4a0:	00010101 	andeq	r0, r1, r1, lsl #2
 800a4a4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a4a8:	0800460d 	stmdaeq	r0, {r0, r2, r3, r9, sl, lr}
 800a4ac:	00000000 	andeq	r0, r0, r0
 800a4b0:	080049d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, fp, lr}
 800a4b4:	00000000 	andeq	r0, r0, r0
 800a4b8:	00010000 	andeq	r0, r1, r0
 800a4bc:	00000120 	andeq	r0, r0, r0, lsr #2
 800a4c0:	0800473d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, lr}
	...
 800a4d0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a4d4:	00000121 	andeq	r0, r0, r1, lsr #2
 800a4d8:	08004e09 	stmdaeq	r0, {r0, r3, r9, sl, fp, lr}
	...
 800a4e8:	00010102 	andeq	r0, r1, r2, lsl #2
 800a4ec:	00000200 	andeq	r0, r0, r0, lsl #4
 800a4f0:	08004a25 	stmdaeq	r0, {r0, r2, r5, r9, fp, lr}
	...
 800a500:	00010101 	andeq	r0, r1, r1, lsl #2
 800a504:	00000201 	andeq	r0, r0, r1, lsl #4
 800a508:	08004ad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, lr}
 800a50c:	00000000 	andeq	r0, r0, r0
 800a510:	08004b51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, lr}
 800a514:	00000000 	andeq	r0, r0, r0
 800a518:	00010101 	andeq	r0, r1, r1, lsl #2
 800a51c:	00000202 	andeq	r0, r0, r2, lsl #4
	...
 800a528:	08004c05 	stmdaeq	r0, {r0, r2, sl, fp, lr}
 800a52c:	00000000 	andeq	r0, r0, r0
 800a530:	00010100 	andeq	r0, r1, r0, lsl #2
 800a534:	00000400 	andeq	r0, r0, r0, lsl #8
 800a538:	08004649 	stmdaeq	r0, {r0, r3, r6, r9, sl, lr}
 800a53c:	00000000 	andeq	r0, r0, r0
 800a540:	08004c51 	stmdaeq	r0, {r0, r4, r6, sl, fp, lr}
 800a544:	00000000 	andeq	r0, r0, r0
 800a548:	00010100 	andeq	r0, r1, r0, lsl #2
 800a54c:	00000500 	andeq	r0, r0, r0, lsl #10
 800a550:	08004671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, lr}
 800a554:	00000000 	andeq	r0, r0, r0
 800a558:	08004c59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, lr}
 800a55c:	00000000 	andeq	r0, r0, r0
 800a560:	00010100 	andeq	r0, r1, r0, lsl #2
 800a564:	00000501 	andeq	r0, r0, r1, lsl #10
 800a568:	0800468d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, lr}
 800a56c:	00000000 	andeq	r0, r0, r0
 800a570:	08004ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, lr}
 800a574:	00000000 	andeq	r0, r0, r0
 800a578:	00010100 	andeq	r0, r1, r0, lsl #2
 800a57c:	00000603 	andeq	r0, r0, r3, lsl #12
 800a580:	080046a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, sl, lr}
 800a584:	00000000 	andeq	r0, r0, r0
 800a588:	08004ced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, lr}
 800a58c:	00000000 	andeq	r0, r0, r0
 800a590:	00010100 	andeq	r0, r1, r0, lsl #2
 800a594:	00001010 	andeq	r1, r0, r0, lsl r0
 800a598:	080046f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, lr}
 800a59c:	00000000 	andeq	r0, r0, r0
 800a5a0:	08004d55 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, fp, lr}
 800a5a4:	00000000 	andeq	r0, r0, r0
 800a5a8:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5ac:	00001020 	andeq	r1, r0, r0, lsr #32
 800a5b0:	080046ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, lr}
 800a5b4:	00000000 	andeq	r0, r0, r0
 800a5b8:	08004d83 	stmdaeq	r0, {r0, r1, r7, r8, sl, fp, lr}
 800a5bc:	00000000 	andeq	r0, r0, r0
 800a5c0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a5c4:	00001021 	andeq	r1, r0, r1, lsr #32
 800a5c8:	08004db7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, sl, fp, lr}
	...
 800a5d8:	00010101 	andeq	r0, r1, r1, lsl #2
 800a5dc:	00001040 	andeq	r1, r0, r0, asr #32
 800a5e0:	08005221 	stmdaeq	r0, {r0, r5, r9, ip, lr}
 800a5e4:	00000000 	andeq	r0, r0, r0
 800a5e8:	08005235 	stmdaeq	r0, {r0, r2, r4, r5, r9, ip, lr}
 800a5ec:	00000000 	andeq	r0, r0, r0
 800a5f0:	00010100 	andeq	r0, r1, r0, lsl #2

0800a5f4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES>:
 800a5f4:	00000060 	andeq	r0, r0, r0, rrx
 800a5f8:	080043fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, lr}
	...
 800a608:	00010100 	andeq	r0, r1, r0, lsl #2
 800a60c:	000000c0 	andeq	r0, r0, r0, asr #1
 800a610:	08004579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, lr}
	...
 800a620:	00010100 	andeq	r0, r1, r0, lsl #2
 800a624:	00001000 	andeq	r1, r0, r0
 800a628:	0800459d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, lr}
 800a62c:	00000000 	andeq	r0, r0, r0
 800a630:	0800481d 	stmdaeq	r0, {r0, r2, r3, r4, fp, lr}
 800a634:	00000000 	andeq	r0, r0, r0
 800a638:	00010100 	andeq	r0, r1, r0, lsl #2
 800a63c:	00000050 	andeq	r0, r0, r0, asr r0
 800a640:	08004391 	stmdaeq	r0, {r0, r4, r7, r8, r9, lr}
	...
 800a650:	00010100 	andeq	r0, r1, r0, lsl #2
 800a654:	00000070 	andeq	r0, r0, r0, ror r0
 800a658:	080044e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, lr}
	...
 800a668:	00010100 	andeq	r0, r1, r0, lsl #2
 800a66c:	000000e0 	andeq	r0, r0, r0, ror #1
 800a670:	080045d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, lr}
 800a674:	00000000 	andeq	r0, r0, r0
 800a678:	08004901 	stmdaeq	r0, {r0, r8, fp, lr}
 800a67c:	00000000 	andeq	r0, r0, r0
 800a680:	00010100 	andeq	r0, r1, r0, lsl #2
 800a684:	000000e1 	andeq	r0, r0, r1, ror #1
 800a688:	08004951 	stmdaeq	r0, {r0, r4, r6, r8, fp, lr}
	...
 800a698:	00010101 	andeq	r0, r1, r1, lsl #2
 800a69c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 800a6a0:	0800460d 	stmdaeq	r0, {r0, r2, r3, r9, sl, lr}
 800a6a4:	00000000 	andeq	r0, r0, r0
 800a6a8:	080049d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, fp, lr}
 800a6ac:	00000000 	andeq	r0, r0, r0
 800a6b0:	00010100 	andeq	r0, r1, r0, lsl #2
 800a6b4:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800a6b8:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
 800a6bc:	6f697469 	svcvs	0x00697469
 800a6c0:	6e49006e 	cdpvs	0, 4, cr0, cr9, cr14, {3}
 800a6c4:	736e6574 	cmnvc	lr, #116, 10	; 0x1d000000
 800a6c8:	00797469 	rsbseq	r7, r9, r9, ror #8
 800a6cc:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 800a6d0:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 800a6d4:	614d2079 	hvcvs	53769	; 0xd209
 800a6d8:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 800a6dc:	6e615000 	cdpvs	0, 6, cr5, cr1, cr0, {0}
 800a6e0:	6c695400 	cfstrdvs	mvd5, [r9], #-0
 800a6e4:	6f430074 	svcvs	0x00430074
 800a6e8:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a6ec:	65656857 	strbvs	r6, [r5, #-2135]!	; 0xfffff7a9
 800a6f0:	7553006c 	ldrbvc	r0, [r3, #-108]	; 0xffffff94
 800a6f4:	61727462 	cmnvs	r2, r2, ror #8
 800a6f8:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a6fc:	6f432065 	svcvs	0x00432065
 800a700:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a704:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a708:	80e22072 	rschi	r2, r2, r2, ror r0
 800a70c:	79432093 	stmdbvc	r3, {r0, r1, r4, r7, sp}^
 800a710:	422f6e61 	eormi	r6, pc, #1552	; 0x610
 800a714:	0065756c 	rsbeq	r7, r5, ip, ror #10
 800a718:	74627553 	strbtvc	r7, [r2], #-1363	; 0xfffffaad
 800a71c:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
 800a720:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a724:	6f6c6f43 	svcvs	0x006c6f43
 800a728:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a72c:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a730:	209380e2 	addscs	r8, r3, r2, ror #1
 800a734:	6c6c6559 	cfstr64vs	mvdx6, [ip], #-356	; 0xfffffe9c
 800a738:	412f776f 			; <UNDEFINED> instruction: 0x412f776f
 800a73c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a740:	62755300 	rsbsvs	r5, r5, #0, 6
 800a744:	63617274 	cmnvs	r1, #116, 4	; 0x40000007
 800a748:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a74c:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a6d4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0xe0>
 800a750:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a754:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a758:	4d202d20 	stcmi	13, cr2, [r0, #-128]!	; 0xffffff80
 800a75c:	6e656761 	cdpvs	7, 6, cr6, cr5, cr1, {3}
 800a760:	41006174 	tstmi	r0, r4, ror r1
 800a764:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a768:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a76c:	6f6c6f43 	svcvs	0x006c6f43
 800a770:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a774:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a778:	6552202d 	ldrbvs	r2, [r2, #-45]	; 0xffffffd3
 800a77c:	64410064 	strbvs	r0, [r1], #-100	; 0xffffff9c
 800a780:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a784:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a788:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a78c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a790:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a794:	65724720 	ldrbvs	r4, [r2, #-1824]!	; 0xfffff8e0
 800a798:	41006e65 	tstmi	r0, r5, ror #28
 800a79c:	74696464 	strbtvc	r6, [r9], #-1124	; 0xfffffb9c
 800a7a0:	20657669 	rsbcs	r7, r5, r9, ror #12
 800a7a4:	6f6c6f43 	svcvs	0x006c6f43
 800a7a8:	694d2072 	stmdbvs	sp, {r1, r4, r5, r6, sp}^
 800a7ac:	20726578 	rsbscs	r6, r2, r8, ror r5
 800a7b0:	6c42202d 	mcrrvs	0, 2, r2, r2, cr13
 800a7b4:	43006575 	movwmi	r6, #1397	; 0x575
 800a7b8:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a7bc:	6d655420 	cfstrdvs	mvd5, [r5, #-128]!	; 0xffffff80
 800a7c0:	61726570 	cmnvs	r2, r0, ror r5
 800a7c4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 800a7c8:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 800a7cc:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 800a7d0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 800a7d4:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a7d8:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a7dc:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a764 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x170>
 800a7e0:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a7e4:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a7e8:	41202d20 			; <UNDEFINED> instruction: 0x41202d20
 800a7ec:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 800a7f0:	64644100 	strbtvs	r4, [r4], #-256	; 0xffffff00
 800a7f4:	76697469 	strbtvc	r7, [r9], -r9, ror #8
 800a7f8:	6f432065 	svcvs	0x00432065
 800a7fc:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a800:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a804:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a808:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a80c:	64410065 	strbvs	r0, [r1], #-101	; 0xffffff9b
 800a810:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 800a814:	43206576 			; <UNDEFINED> instruction: 0x43206576
 800a818:	726f6c6f 	rsbvc	r6, pc, #28416	; 0x6f00
 800a81c:	78694d20 	stmdavc	r9!, {r5, r8, sl, fp, lr}^
 800a820:	2d207265 	sfmcs	f7, 4, [r0, #-404]!	; 0xfffffe6c
 800a824:	72615720 	rsbvc	r5, r1, #32, 14	; 0x800000
 800a828:	6857206d 	ldmdavs	r7, {r0, r2, r3, r5, r6, sp}^
 800a82c:	00657469 	rsbeq	r7, r5, r9, ror #8
 800a830:	69646441 	stmdbvs	r4!, {r0, r6, sl, sp, lr}^
 800a834:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
 800a838:	6c6f4320 	stclvs	3, cr4, [pc], #-128	; 800a7c0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1cc>
 800a83c:	4d20726f 	sfmmi	f7, 4, [r0, #-444]!	; 0xfffffe44
 800a840:	72657869 	rsbvc	r7, r5, #6881280	; 0x690000
 800a844:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
 800a848:	206c6f6f 	rsbcs	r6, ip, pc, ror #30
 800a84c:	74696857 	strbtvc	r6, [r9], #-2135	; 0xfffff7a9
 800a850:	75530065 	ldrbvc	r0, [r3, #-101]	; 0xffffff9b
 800a854:	61727462 	cmnvs	r2, r2, ror #8
 800a858:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 800a85c:	6f432065 	svcvs	0x00432065
 800a860:	20726f6c 	rsbscs	r6, r2, ip, ror #30
 800a864:	6578694d 	ldrbvs	r6, [r8, #-2381]!	; 0xfffff6b3
 800a868:	202d2072 	eorcs	r2, sp, r2, ror r0
 800a86c:	48005655 	stmdami	r0, {r0, r2, r4, r6, r9, sl, ip, lr}
 800a870:	53006575 	movwpl	r6, #1397	; 0x575
 800a874:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
 800a878:	6f697461 	svcvs	0x00697461
 800a87c:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
 800a880:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 800a884:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a888:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a88c:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a890:	61746f52 	cmnvs	r4, r2, asr pc
 800a894:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 800a898:	626f6720 	rsbvs	r6, pc, #32, 14	; 0x800000
 800a89c:	6877206f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r6, sp}^
 800a8a0:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a8a4:	73697250 	cmnvc	r9, #80, 4
 800a8a8:	6877206d 	ldmdavs	r7!, {r0, r2, r3, r5, r6, sp}^
 800a8ac:	006c6565 	rsbeq	r6, ip, r5, ror #10
 800a8b0:	65666645 	strbvs	r6, [r6, #-1605]!	; 0xfffff9bb
 800a8b4:	20737463 	rsbscs	r7, r3, r3, ror #8
 800a8b8:	65656877 	strbvs	r6, [r5, #-2167]!	; 0xfffff789
 800a8bc:	6542006c 	strbvs	r0, [r2, #-108]	; 0xffffff94
 800a8c0:	73206d61 			; <UNDEFINED> instruction: 0x73206d61
 800a8c4:	20657a69 	rsbcs	r7, r5, r9, ror #20
 800a8c8:	73697269 	cmnvc	r9, #-1879048186	; 0x90000006
 800a8cc:	67644500 	strbvs	r4, [r4, -r0, lsl #10]!
 800a8d0:	654c2f65 	strbvs	r2, [ip, #-3941]	; 0xfffff09b
 800a8d4:	6620736e 	strtvs	r7, [r0], -lr, ror #6
 800a8d8:	7375636f 	cmnvc	r5, #-1140850687	; 0xbc000001
 800a8dc:	6f724600 	svcvs	0x00724600
 800a8e0:	442f7473 	strtmi	r7, [pc], #-1139	; 800a8e8 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x2f4>
 800a8e4:	75666669 	strbvc	r6, [r6, #-1641]!	; 0xfffff997
 800a8e8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 800a8ec:	72745300 	rsbsvc	r5, r4, #0, 6
 800a8f0:	2f65626f 	svccs	0x0065626f
 800a8f4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
 800a8f8:	00726574 	rsbseq	r6, r2, r4, ror r5
 800a8fc:	6d6f6f5a 	stclvs	15, cr6, [pc, #-360]!	; 800a79c <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1a8>
 800a900:	6e656c20 	cdpvs	12, 6, cr6, cr5, cr0, {1}
 800a904:	72460073 	subvc	r0, r6, #115	; 0x73
 800a908:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a90c:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a910:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a914:	72460072 	subvc	r0, r6, #114	; 0x72
 800a918:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
 800a91c:	68732067 	ldmdavs	r3!, {r0, r1, r2, r5, r6, sp}^
 800a920:	65747475 	ldrbvs	r7, [r4, #-1141]!	; 0xfffffb8b
 800a924:	6f722072 	svcvs	0x00722072
 800a928:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800a92c:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
 800a930:	6573756f 	ldrbvs	r7, [r3, #-1391]!	; 0xfffffa91
 800a934:	61420072 	hvcvs	8194	; 0x2002
 800a938:	44206e72 	strtmi	r6, [r0], #-3698	; 0xfffff18e
 800a93c:	00726f6f 	rsbseq	r6, r2, pc, ror #30
 800a940:	706d614c 	rsbvc	r6, sp, ip, asr #2
 800a944:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a948:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a780 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x18c>
 800a94c:	6e756620 	cdpvs	6, 7, cr6, cr5, cr0, {1}
 800a950:	6f697463 	svcvs	0x00697463
 800a954:	4600736e 	strmi	r7, [r0], -lr, ror #6
 800a958:	75747869 	ldrbvc	r7, [r4, #-2153]!	; 0xfffff797
 800a95c:	63206572 			; <UNDEFINED> instruction: 0x63206572
 800a960:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a964:	63206c6f 			; <UNDEFINED> instruction: 0x63206c6f
 800a968:	6e6e6168 	powvsez	f6, f6, #0.0
 800a96c:	4d006c65 	stcmi	12, cr6, [r0, #-404]	; 0xfffffe6c
 800a970:	6f726361 	svcvs	0x00726361
 800a974:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 800a978:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 800a7b0 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x1bc>
 800a97c:	6c655200 	sfmvs	f5, 2, [r5], #-0
 800a980:	6f207961 	svcvs	0x00207961
 800a984:	6f702072 	svcvs	0x00702072
 800a988:	20726577 	rsbscs	r6, r2, r7, ror r5
 800a98c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a990:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a994:	206e6146 	rsbcs	r6, lr, r6, asr #2
 800a998:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 800a99c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
 800a9a0:	74616548 	strbtvc	r6, [r1], #-1352	; 0xfffffab8
 800a9a4:	63207265 			; <UNDEFINED> instruction: 0x63207265
 800a9a8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a9ac:	46006c6f 	strmi	r6, [r0], -pc, ror #24
 800a9b0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800a9b4:	206e6961 	rsbcs	r6, lr, r1, ror #18
 800a9b8:	65746177 	ldrbvs	r6, [r4, #-375]!	; 0xfffffe89
 800a9bc:	75702072 	ldrbvc	r2, [r0, #-114]!	; 0xffffff8e
 800a9c0:	6320706d 			; <UNDEFINED> instruction: 0x6320706d
 800a9c4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800a9c8:	00206c6f 	eoreq	r6, r0, pc, ror #24
 800a9cc:	746f6c53 	strbtvc	r6, [pc], #-3155	; 800a9d4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x3e0>
 800a9d0:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
 800a9d4:	6c746365 	ldclvs	3, cr6, [r4], #-404	; 0xfffffe6c
 800a9d8:	6f632079 	svcvs	0x00632079
 800a9dc:	6f72746e 	svcvs	0x0072746e
 800a9e0:	7020736c 	eorvc	r7, r0, ip, ror #6
 800a9e4:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800a9e8:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800a9ec:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 800a9f0:	73657270 	cmnvc	r5, #112, 4
 800a9f4:	73746e65 	cmnvc	r4, #1616	; 0x650
 800a9f8:	616f4320 	cmnvs	pc, r0, lsr #6
 800a9fc:	20657372 	rsbcs	r7, r5, r2, ror r3
 800aa00:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aa04:	622d3631 	eorvs	r3, sp, #51380224	; 0x3100000
 800aa08:	70207469 	eorvc	r7, r0, r9, ror #8
 800aa0c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aa10:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aa14:	46002973 			; <UNDEFINED> instruction: 0x46002973
 800aa18:	2c656e69 	stclcs	14, cr6, [r5], #-420	; 0xfffffe5c
 800aa1c:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800aa20:	2d363120 	ldfcss	f3, [r6, #-128]!	; 0xffffff80
 800aa24:	20746962 	rsbscs	r6, r4, r2, ror #18
 800aa28:	61726170 	cmnvs	r2, r0, ror r1
 800aa2c:	6574656d 	ldrbvs	r6, [r4, #-1389]!	; 0xfffffa93
 800aa30:	53007372 	movwpl	r7, #882	; 0x372
 800aa34:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aa38:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aa3c:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 800aa40:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800aa44:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 800aa48:	6f662065 	svcvs	0x00662065
 800aa4c:	73612072 	cmnvc	r1, #114	; 0x72
 800aa50:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800aa54:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800aa58:	72617020 	rsbvc	r7, r1, #32
 800aa5c:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800aa60:	53007265 	movwpl	r7, #613	; 0x265
 800aa64:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aa68:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aa6c:	65707320 	ldrbvs	r7, [r0, #-800]!	; 0xfffffce0
 800aa70:	762f6465 	strtvc	r6, [pc], -r5, ror #8
 800aa74:	636f6c65 	cmnvs	pc, #25856	; 0x6500
 800aa78:	20797469 	rsbscs	r7, r9, r9, ror #8
 800aa7c:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aa80:	6f737361 	svcvs	0x00737361
 800aa84:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800aa88:	70206465 	eorvc	r6, r0, r5, ror #8
 800aa8c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aa90:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aa94:	6f6c5300 	svcvs	0x006c5300
 800aa98:	72702074 	rsbsvc	r2, r0, #116	; 0x74
 800aa9c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
 800aaa0:	63207365 			; <UNDEFINED> instruction: 0x63207365
 800aaa4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800aaa8:	6d2f6c6f 	stcvs	12, cr6, [pc, #-444]!	; 800a8f4 <RDMHandler::PID_DEFINITIONS_SUB_DEVICES+0x300>
 800aaac:	2065646f 	rsbcs	r6, r5, pc, ror #8
 800aab0:	6f666e69 	svcvs	0x00666e69
 800aab4:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
 800aab8:	72617020 	rsbvc	r7, r1, #32
 800aabc:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800aac0:	53007265 	movwpl	r7, #613	; 0x265
 800aac4:	20746f6c 	rsbscs	r6, r4, ip, ror #30
 800aac8:	73746573 	cmnvc	r4, #482344960	; 0x1cc00000
 800aacc:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
 800aad0:	70207865 	eorvc	r7, r0, r5, ror #16
 800aad4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 800aad8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800aadc:	20726f66 	rsbscs	r6, r2, r6, ror #30
 800aae0:	6f737361 	svcvs	0x00737361
 800aae4:	74616963 	strbtvc	r6, [r1], #-2403	; 0xfffff69d
 800aae8:	70206465 	eorvc	r6, r0, r5, ror #8
 800aaec:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 800aaf0:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 800aaf4:	6f6c5300 	svcvs	0x006c5300
 800aaf8:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
 800aafc:	72207374 	eorvc	r7, r0, #116, 6	; 0xd0000001
 800ab00:	7461746f 	strbtvc	r7, [r1], #-1135	; 0xfffffb91
 800ab04:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800ab08:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 800ab0c:	6f662064 	svcvs	0x00662064
 800ab10:	73612072 	cmnvc	r1, #114	; 0x72
 800ab14:	69636f73 	stmdbvs	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 800ab18:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
 800ab1c:	72617020 	rsbvc	r7, r1, #32
 800ab20:	74656d61 	strbtvc	r6, [r5], #-3425	; 0xfffff29f
 800ab24:	43007265 	movwmi	r7, #613	; 0x265
 800ab28:	69626d6f 	stmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800ab2c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 800ab30:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 800ab34:	6f722f78 	svcvs	0x00722f78
 800ab38:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
 800ab3c:	63206e6f 			; <UNDEFINED> instruction: 0x63206e6f
 800ab40:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 800ab44:	00006c6f 	andeq	r6, r0, pc, ror #24

0800ab48 <s_tTableC2>:
 800ab48:	00000001 	andeq	r0, r0, r1
 800ab4c:	0800a6c2 	stmdaeq	r0, {r1, r6, r7, r9, sl, sp, pc}
 800ab50:	00000002 	andeq	r0, r0, r2
 800ab54:	0800a6cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, sp, pc}
 800ab58:	00000101 	andeq	r0, r0, r1, lsl #2
 800ab5c:	0800a6dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, sp, pc}
 800ab60:	00000102 	andeq	r0, r0, r2, lsl #2
 800ab64:	0800a6e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, sp, pc}
 800ab68:	00000201 	andeq	r0, r0, r1, lsl #4
 800ab6c:	0800a6e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, sl, sp, pc}
 800ab70:	00000202 	andeq	r0, r0, r2, lsl #4
 800ab74:	0800a6f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, sp, pc}
 800ab78:	00000203 	andeq	r0, r0, r3, lsl #4
 800ab7c:	0800a718 	stmdaeq	r0, {r3, r4, r8, r9, sl, sp, pc}
 800ab80:	00000204 	andeq	r0, r0, r4, lsl #4
 800ab84:	0800a741 	stmdaeq	r0, {r0, r6, r8, r9, sl, sp, pc}
 800ab88:	00000205 	andeq	r0, r0, r5, lsl #4
 800ab8c:	0800a763 	stmdaeq	r0, {r0, r1, r5, r6, r8, r9, sl, sp, pc}
 800ab90:	00000206 	andeq	r0, r0, r6, lsl #4
 800ab94:	0800a77e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, pc}
 800ab98:	00000207 	andeq	r0, r0, r7, lsl #4
 800ab9c:	0800a79b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, sl, sp, pc}
 800aba0:	00000208 	andeq	r0, r0, r8, lsl #4
 800aba4:	0800a7b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, r9, sl, sp, pc}
 800aba8:	00000211 	andeq	r0, r0, r1, lsl r2
 800abac:	0800a7d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, sl, sp, pc}
 800abb0:	00000212 	andeq	r0, r0, r2, lsl r2
 800abb4:	0800a7f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, sl, sp, pc}
 800abb8:	00000213 	andeq	r0, r0, r3, lsl r2
 800abbc:	0800a80e 	stmdaeq	r0, {r1, r2, r3, fp, sp, pc}
 800abc0:	00000214 	andeq	r0, r0, r4, lsl r2
 800abc4:	0800a830 	stmdaeq	r0, {r4, r5, fp, sp, pc}
 800abc8:	00000215 	andeq	r0, r0, r5, lsl r2
 800abcc:	0800a852 	stmdaeq	r0, {r1, r4, r6, fp, sp, pc}
 800abd0:	00000216 	andeq	r0, r0, r6, lsl r2
 800abd4:	0800a86f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, fp, sp, pc}
 800abd8:	00000217 	andeq	r0, r0, r7, lsl r2
 800abdc:	0800a873 	stmdaeq	r0, {r0, r1, r4, r5, r6, fp, sp, pc}
 800abe0:	00000301 	andeq	r0, r0, r1, lsl #6
 800abe4:	0800a87e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, fp, sp, pc}
 800abe8:	00000302 	andeq	r0, r0, r2, lsl #6
 800abec:	0800a890 	stmdaeq	r0, {r4, r7, fp, sp, pc}
 800abf0:	00000303 	andeq	r0, r0, r3, lsl #6
 800abf4:	0800a8a4 	stmdaeq	r0, {r2, r5, r7, fp, sp, pc}
 800abf8:	00000304 	andeq	r0, r0, r4, lsl #6
 800abfc:	0800a8b0 	stmdaeq	r0, {r4, r5, r7, fp, sp, pc}
 800ac00:	00000401 	andeq	r0, r0, r1, lsl #8
 800ac04:	0800a8be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, sp, pc}
 800ac08:	00000402 	andeq	r0, r0, r2, lsl #8
 800ac0c:	0800a8cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, fp, sp, pc}
 800ac10:	00000403 	andeq	r0, r0, r3, lsl #8
 800ac14:	0800a8dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, sp, pc}
 800ac18:	00000404 	andeq	r0, r0, r4, lsl #8
 800ac1c:	0800a8ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, sp, pc}
 800ac20:	00000405 	andeq	r0, r0, r5, lsl #8
 800ac24:	0800a8fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, sp, pc}
 800ac28:	00000406 	andeq	r0, r0, r6, lsl #8
 800ac2c:	0800a906 	stmdaeq	r0, {r1, r2, r8, fp, sp, pc}
 800ac30:	00000407 	andeq	r0, r0, r7, lsl #8
 800ac34:	0800a916 	stmdaeq	r0, {r1, r2, r4, r8, fp, sp, pc}
 800ac38:	00000408 	andeq	r0, r0, r8, lsl #8
 800ac3c:	0800a92f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r8, fp, sp, pc}
 800ac40:	00000409 	andeq	r0, r0, r9, lsl #8
 800ac44:	0800a936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, pc}
 800ac48:	00000501 	andeq	r0, r0, r1, lsl #10
 800ac4c:	0800a940 	stmdaeq	r0, {r6, r8, fp, sp, pc}
 800ac50:	00000502 	andeq	r0, r0, r2, lsl #10
 800ac54:	0800a957 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, fp, sp, pc}
 800ac58:	00000504 	andeq	r0, r0, r4, lsl #10
 800ac5c:	0800a96f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, fp, sp, pc}
 800ac60:	00000505 	andeq	r0, r0, r5, lsl #10
 800ac64:	0800a97d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, fp, sp, pc}
 800ac68:	00000506 	andeq	r0, r0, r6, lsl #10
 800ac6c:	0800a994 	stmdaeq	r0, {r2, r4, r7, r8, fp, sp, pc}
 800ac70:	00000507 	andeq	r0, r0, r7, lsl #10
 800ac74:	0800a9a0 	stmdaeq	r0, {r5, r7, r8, fp, sp, pc}
 800ac78:	00000508 	andeq	r0, r0, r8, lsl #10
 800ac7c:	0800a9af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, fp, sp, pc}
 800ac80:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 800ac84:	0800a6b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, sp, pc}
 800ac88:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ac8c:	672f2f3a 			; <UNDEFINED> instruction: 0x672f2f3a
 800ac90:	2d323364 	ldccs	3, cr3, [r2, #-400]!	; 0xfffffe70
 800ac94:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800ac98:	0067726f 	rsbeq	r7, r7, pc, ror #4
 800ac9c:	204d4452 	subcs	r4, sp, r2, asr r4
 800aca0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 800aca4:	63206563 			; <UNDEFINED> instruction: 0x63206563
 800aca8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 800acac:	61727567 	cmnvs	r2, r7, ror #10
 800acb0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 800acb4:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 800acb8:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 800acbc:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 800acc0:	20726572 	rsbscs	r6, r2, r2, ror r5
 800acc4:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 800acc8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800accc:	0a732a2e 	beq	9cd558c <__exidx_end+0x1cc9fbc>
 800acd0:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800acd4:	6166756e 	cmnvs	r6, lr, ror #10
 800acd8:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 800acdc:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 800ace0:	20202044 	eorcs	r2, r0, r4, asr #32
 800ace4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800ace8:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800acec:	000a5832 	andeq	r5, sl, r2, lsr r8
 800acf0:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 800acf4:	206c6169 	rsbcs	r6, ip, r9, ror #2
 800acf8:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 800acfc:	20207265 	eorcs	r7, r0, r5, ror #4
 800ad00:	3a202020 	bcc	8812d88 <__exidx_end+0x8077b8>
 800ad04:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 800ad08:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800ad0c:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800ad10:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 800ad14:	20000a58 	andcs	r0, r0, r8, asr sl
 800ad18:	746f6f52 	strbtvc	r6, [pc], #-3922	; 800ad20 <s_tTableC2+0x1d8>
 800ad1c:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 800ad20:	20206c65 	eorcs	r6, r0, r5, ror #24
 800ad24:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ad28:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800ad2c:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 800ad30:	5020000a 	eorpl	r0, r0, sl
 800ad34:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 800ad38:	43207463 			; <UNDEFINED> instruction: 0x43207463
 800ad3c:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 800ad40:	2079726f 	rsbscs	r7, r9, pc, ror #4
 800ad44:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 800ad48:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 800ad4c:	0a58322e 	beq	961760c <__exidx_end+0x160c03c>
 800ad50:	72502000 	subsvc	r2, r0, #0
 800ad54:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 800ad58:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 800ad5c:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 800ad60:	20202020 	eorcs	r2, r0, r0, lsr #32
 800ad64:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 800ad68:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 800ad6c:	000a5832 	andeq	r5, sl, r2, lsr r8

0800ad70 <DEVICE_LABEL>:
 800ad70:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 800ad74:	33303146 	teqcc	r0, #-2147483631	; 0x80000011
 800ad78:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 800ad7c:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 800ad80:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

0800ad85 <RDMConst::MANUFACTURER_ID>:
 800ad85:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0800ad87 <RDMConst::MANUFACTURER_NAME>:
 800ad87:	70747468 	rsbsvc	r7, r4, r8, ror #8
 800ad8b:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 800ad8f:	6f2e7777 	svcvs	0x002e7777
 800ad93:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 800ad97:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 800ad9b:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 800ad9f:	0067726f 	rsbeq	r7, r7, pc, ror #4
	...

0800ada4 <vtable for PixelDmxParamsRdm>:
	...
 800adac:	0800554f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, sl, ip, lr}
 800adb0:	08005551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, lr}
 800adb4:	08005539 	stmdaeq	r0, {r0, r3, r4, r5, r8, sl, ip, lr}
 800adb8:	08005539 	stmdaeq	r0, {r0, r3, r4, r5, r8, sl, ip, lr}
 800adbc:	08005571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, ip, lr}
 800adc0:	08005529 	stmdaeq	r0, {r0, r3, r5, r8, sl, ip, lr}
 800adc4:	0800552b 	stmdaeq	r0, {r0, r1, r3, r5, r8, sl, ip, lr}
 800adc8:	0800552d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, ip, lr}
 800adcc:	08005531 	stmdaeq	r0, {r0, r4, r5, r8, sl, ip, lr}
 800add0:	08005535 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, ip, lr}
 800add4:	0800553b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, sl, ip, lr}

0800add8 <vtable for WS28xxDmx>:
	...
 800ade0:	080055f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, ip, lr}
 800ade4:	08005619 	stmdaeq	r0, {r0, r3, r4, r9, sl, ip, lr}
 800ade8:	08005651 	stmdaeq	r0, {r0, r4, r6, r9, sl, ip, lr}
 800adec:	0800569b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r9, sl, ip, lr}
 800adf0:	08005703 	stmdaeq	r0, {r0, r1, r8, r9, sl, ip, lr}
 800adf4:	0800562b 	stmdaeq	r0, {r0, r1, r3, r5, r9, sl, ip, lr}
 800adf8:	0800595d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, fp, ip, lr}
 800adfc:	08005669 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, ip, lr}
 800ae00:	080055f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, sl, ip, lr}
 800ae04:	080055f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, ip, lr}
 800ae08:	080056c3 	stmdaeq	r0, {r0, r1, r6, r7, r9, sl, ip, lr}
 800ae0c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800ae10:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 800ae14:	61702058 	cmnvs	r0, r8, asr r0
 800ae18:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800ae1c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800ae20:	4720000a 	strmi	r0, [r0, -sl]!
 800ae24:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 800ae28:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800ae2c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 800ae30:	203a2074 	eorscs	r2, sl, r4, ror r0
 800ae34:	5b206425 	blpl	8823ed0 <__exidx_end+0x818900>
 800ae38:	756f7247 	strbvc	r7, [pc, #-583]!	; 800abf9 <s_tTableC2+0xb1>
 800ae3c:	3a207370 	bcc	8827c04 <__exidx_end+0x81c634>
 800ae40:	5d642520 	cfstr64pl	mvdx2, [r4, #-128]!	; 0xffffff80
 800ae44:	 	andeq	r0, r0, #10

0800ae46 <CSWTCH.6>:
 800ae46:	02020200 	andeq	r0, r2, #0, 4
 800ae4a:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 800ae4e:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 800ae52:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 800ae56:	 	svcvs	0x004e006e

0800ae58 <s_patternName>:
 800ae58:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 800ae64:	61520000 	cmpvs	r2, r0
 800ae68:	6f626e69 	svcvs	0x00626e69
 800ae6c:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 800ae70:	00656c63 	rsbeq	r6, r5, r3, ror #24
 800ae74:	61656854 	cmnvs	r5, r4, asr r8
 800ae78:	20726574 	rsbscs	r6, r2, r4, ror r5
 800ae7c:	73616863 	cmnvc	r1, #6488064	; 0x630000
 800ae80:	6f430065 	svcvs	0x00430065
 800ae84:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 800ae88:	70697720 	rsbvc	r7, r9, r0, lsr #14
 800ae8c:	00000065 	andeq	r0, r0, r5, rrx
 800ae90:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 800ae94:	0072656e 	rsbseq	r6, r2, lr, ror #10
 800ae98:	00000000 	andeq	r0, r0, r0
 800ae9c:	61460000 	mrsvs	r0, (UNDEF: 70)
 800aea0:	00006564 	andeq	r6, r0, r4, ror #10
	...

0800aeac <PixelType::MAPS>:
 800aeac:	00424752 	subeq	r4, r2, r2, asr r7
 800aeb0:	00474252 	subeq	r4, r7, r2, asr r2
 800aeb4:	00425247 	subeq	r5, r2, r7, asr #4
 800aeb8:	00524247 	subseq	r4, r2, r7, asr #4
 800aebc:	00475242 	subeq	r5, r7, r2, asr #4
 800aec0:	00524742 	subseq	r4, r2, r2, asr #14

0800aec4 <PixelType::TYPES>:
 800aec4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aec8:	00003130 	andeq	r3, r0, r0, lsr r1
 800aecc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aed0:	00003131 	andeq	r3, r0, r1, lsr r1
 800aed4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aed8:	00003231 	andeq	r3, r0, r1, lsr r2
 800aedc:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aee0:	00423231 	subeq	r3, r2, r1, lsr r2
 800aee4:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aee8:	00003331 	andeq	r3, r0, r1, lsr r3
 800aeec:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 800aef0:	00003531 	andeq	r3, r0, r1, lsr r5
 800aef4:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800aef8:	00003231 	andeq	r3, r0, r1, lsr r2
 800aefc:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800af00:	00573231 	subseq	r3, r7, r1, lsr r2
 800af04:	31534355 	cmpcc	r3, r5, asr r3
 800af08:	00333039 	eorseq	r3, r3, r9, lsr r0
 800af0c:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 800af10:	00333039 	eorseq	r3, r3, r9, lsr r0
 800af14:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 800af18:	00003231 	andeq	r3, r0, r1, lsr r2
 800af1c:	31415041 	cmpcc	r1, r1, asr #32
 800af20:	00003230 	andeq	r3, r0, r0, lsr r2
 800af24:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 800af28:	00003232 	andeq	r3, r0, r2, lsr r2
 800af2c:	31383950 	teqcc	r8, r0, asr r9
 800af30:	00000033 	andeq	r0, r0, r3, lsr r0
 800af34:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 800af38:	6170206c 	cmnvs	r0, ip, rrx
 800af3c:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 800af40:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 800af44:	5420000a 	strtpl	r0, [r0], #-10
 800af48:	20657079 	rsbcs	r7, r5, r9, ror r0
 800af4c:	3a202020 	bcc	8812fd4 <__exidx_end+0x807a04>
 800af50:	20732520 	rsbscs	r2, r3, r0, lsr #10
 800af54:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 800af58:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 800af5c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 800af60:	3a202020 	bcc	8812fe8 <__exidx_end+0x807a18>
 800af64:	0a642520 	beq	99143ec <__exidx_end+0x1908e1c>
 800af68:	614d2000 	mrsvs	r2, (UNDEF: 77)
 800af6c:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 800af70:	203a2067 	eorscs	r2, sl, r7, rrx
 800af74:	5b207325 	blpl	8827c10 <__exidx_end+0x81c640>
 800af78:	0a5d6425 	beq	9764014 <__exidx_end+0x1758a44>
 800af7c:	30542000 	subscc	r2, r4, r0
 800af80:	20202048 	eorcs	r2, r0, r8, asr #32
 800af84:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800af88:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800af8c:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800af90:	0a5d5825 	beq	976102c <__exidx_end+0x1755a5c>
 800af94:	31542000 	cmpcc	r4, r0
 800af98:	20202048 	eorcs	r2, r0, r8, asr #32
 800af9c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 800afa0:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 800afa4:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 800afa8:	0a5d5825 	beq	9761044 <__exidx_end+0x1755a74>
 800afac:	00000000 	andeq	r0, r0, r0

0800afb0 <s_aStorSize>:
 800afb0:	00000060 	andeq	r0, r0, r0, rrx
 800afb4:	00000090 	muleq	r0, r0, r0
 800afb8:	00000020 	andeq	r0, r0, r0, lsr #32
 800afbc:	00000040 	andeq	r0, r0, r0, asr #32
 800afc0:	00000060 	andeq	r0, r0, r0, rrx
 800afc4:	00000040 	andeq	r0, r0, r0, asr #32
 800afc8:	00000020 	andeq	r0, r0, r0, lsr #32
 800afcc:	00000020 	andeq	r0, r0, r0, lsr #32
 800afd0:	000001e0 	andeq	r0, r0, r0, ror #3
 800afd4:	00000040 	andeq	r0, r0, r0, asr #32
 800afd8:	00000020 	andeq	r0, r0, r0, lsr #32
 800afdc:	00000060 	andeq	r0, r0, r0, rrx
 800afe0:	00000030 	andeq	r0, r0, r0, lsr r0
 800afe4:	00000020 	andeq	r0, r0, r0, lsr #32
 800afe8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 800afec:	00000030 	andeq	r0, r0, r0, lsr r0
 800aff0:	00000040 	andeq	r0, r0, r0, asr #32
 800aff4:	00000020 	andeq	r0, r0, r0, lsr #32
 800aff8:	00000060 	andeq	r0, r0, r0, rrx
 800affc:	00000020 	andeq	r0, r0, r0, lsr #32
 800b000:	00000400 	andeq	r0, r0, r0, lsl #8
 800b004:	00000020 	andeq	r0, r0, r0, lsr #32
 800b008:	00000020 	andeq	r0, r0, r0, lsr #32
 800b00c:	00000040 	andeq	r0, r0, r0, asr #32
 800b010:	00000060 	andeq	r0, r0, r0, rrx
 800b014:	00000020 	andeq	r0, r0, r0, lsr #32
 800b018:	00000020 	andeq	r0, r0, r0, lsr #32
 800b01c:	00000020 	andeq	r0, r0, r0, lsr #32

0800b020 <vtable for StoreDisplayUdf>:
	...
 800b028:	0800713d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, ip, sp, lr}
 800b02c:	08007185 	stmdaeq	r0, {r0, r2, r7, r8, ip, sp, lr}
 800b030:	08007161 	stmdaeq	r0, {r0, r5, r6, r8, ip, sp, lr}
 800b034:	08007141 	stmdaeq	r0, {r0, r6, r8, ip, sp, lr}

0800b038 <vtable for StoreRDMDevice>:
	...
 800b040:	080071a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, ip, sp, lr}
 800b044:	08007215 	stmdaeq	r0, {r0, r2, r4, r9, ip, sp, lr}
 800b048:	080071ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, ip, sp, lr}
 800b04c:	08007229 	stmdaeq	r0, {r0, r3, r5, r9, ip, sp, lr}
 800b050:	080071d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, ip, sp, lr}
 800b054:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b058:	00000000 	andeq	r0, r0, r0
 800b05c:	080071a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r8, ip, sp, lr}
 800b060:	08007221 	stmdaeq	r0, {r0, r5, r9, ip, sp, lr}
 800b064:	0800720d 	stmdaeq	r0, {r0, r2, r3, r9, ip, sp, lr}

0800b068 <vtable for StoreRDMSensors>:
	...
 800b070:	08007261 	stmdaeq	r0, {r0, r5, r6, r9, ip, sp, lr}
 800b074:	080072a9 	stmdaeq	r0, {r0, r3, r5, r7, r9, ip, sp, lr}
 800b078:	08007285 	stmdaeq	r0, {r0, r2, r7, r9, ip, sp, lr}
 800b07c:	08007265 	stmdaeq	r0, {r0, r2, r5, r6, r9, ip, sp, lr}

0800b080 <vtable for StoreRDMSubDevices>:
	...
 800b088:	080072c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, ip, sp, lr}
 800b08c:	08007311 	stmdaeq	r0, {r0, r4, r8, r9, ip, sp, lr}
 800b090:	080072ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, ip, sp, lr}
 800b094:	080072cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, ip, sp, lr}

0800b098 <vtable for StoreWS28xxDmx>:
	...
 800b0a0:	08007331 	stmdaeq	r0, {r0, r4, r5, r8, r9, ip, sp, lr}
 800b0a4:	080074a1 	stmdaeq	r0, {r0, r5, r7, sl, ip, sp, lr}
 800b0a8:	08007339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, ip, sp, lr}
 800b0ac:	080074b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, ip, sp, lr}
 800b0b0:	0800746d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
 800b0b4:	08007439 	stmdaeq	r0, {r0, r3, r4, r5, sl, ip, sp, lr}
 800b0b8:	08007401 	stmdaeq	r0, {r0, sl, ip, sp, lr}
 800b0bc:	080073c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, ip, sp, lr}
 800b0c0:	08007391 	stmdaeq	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
 800b0c4:	0800735d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, ip, sp, lr}
 800b0c8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 800b0cc:	00000000 	andeq	r0, r0, r0
 800b0d0:	08007333 	stmdaeq	r0, {r0, r1, r4, r5, r8, r9, ip, sp, lr}
 800b0d4:	080074ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, ip, sp, lr}
 800b0d8:	08007499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, sp, lr}
 800b0dc:	08007465 	stmdaeq	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 800b0e0:	08007431 	stmdaeq	r0, {r0, r4, r5, sl, ip, sp, lr}
 800b0e4:	080073f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}
 800b0e8:	080073c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, ip, sp, lr}
 800b0ec:	08007389 	stmdaeq	r0, {r0, r3, r7, r8, r9, ip, sp, lr}
 800b0f0:	3a434d46 	bcc	90de610 <__exidx_end+0x10d3040>
 800b0f4:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 800b0f8:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 800b0fc:	73252064 			; <UNDEFINED> instruction: 0x73252064
 800b100:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 800b104:	6f742068 	svcvs	0x00742068
 800b108:	206c6174 	rsbcs	r6, ip, r4, ror r1
 800b10c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 800b110:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 800b114:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 800b118:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 800b11c:	6f6c000a 	svcvs	0x006c000a
 800b120:	72694600 	rsbvc	r4, r9, #0, 12
 800b124:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 800b128:	25562065 	ldrbcs	r2, [r6, #-101]	; 0xffffff9b
 800b12c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800b130:	20584d44 	subscs	r4, r8, r4, asr #26
 800b134:	33253a53 			; <UNDEFINED> instruction: 0x33253a53
 800b138:	3a462075 	bcc	9193314 <__exidx_end+0x1187d44>
 800b13c:	00753325 	rsbseq	r3, r5, r5, lsr #6
 800b140:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 800b144:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 800b148:	66207961 	strtvs	r7, [r0], -r1, ror #18
 800b14c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 800b150:	31485300 	mrscc	r5, (UNDEF: 120)
 800b154:	00363031 	eorseq	r3, r6, r1, lsr r0
 800b158:	31445353 	cmpcc	r4, r3, asr r3
 800b15c:	00363033 	eorseq	r3, r6, r3, lsr r0
 800b160:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 800b164:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 800b168:	000a2964 	andeq	r2, sl, r4, ror #18
 800b16c:	aaeeaa40 	bge	7bb5a74 <__heap_size+0x7bb4a74>
 800b170:	000000ee 	andeq	r0, r0, lr, ror #1

0800b174 <_OledFont8x6>:
 800b174:	00000040 	andeq	r0, r0, r0, asr #32
 800b178:	40000000 	andmi	r0, r0, r0
 800b17c:	005f0000 	subseq	r0, pc, r0
 800b180:	00400000 	subeq	r0, r0, r0
 800b184:	00070007 	andeq	r0, r7, r7
 800b188:	7f144000 	svcvc	0x00144000
 800b18c:	00147f14 	andseq	r7, r4, r4, lsl pc
 800b190:	7f2a2440 	svcvc	0x002a2440
 800b194:	4000122a 	andmi	r1, r0, sl, lsr #4
 800b198:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 800b19c:	36400062 	strbcc	r0, [r0], -r2, rrx
 800b1a0:	50205649 	eorpl	r5, r0, r9, asr #12
 800b1a4:	08004000 	stmdaeq	r0, {lr}
 800b1a8:	00000307 	andeq	r0, r0, r7, lsl #6
 800b1ac:	221c0040 	andscs	r0, ip, #64	; 0x40
 800b1b0:	40000041 	andmi	r0, r0, r1, asr #32
 800b1b4:	1c224100 	stfnes	f4, [r2], #-0
 800b1b8:	2a400000 	bcs	900b1c0 <__exidx_end+0xfffbf0>
 800b1bc:	2a1c7f1c 	bcs	872ae34 <__exidx_end+0x71f864>
 800b1c0:	08084000 	stmdaeq	r8, {lr}
 800b1c4:	0008083e 	andeq	r0, r8, lr, lsr r8
 800b1c8:	70800040 	addvc	r0, r0, r0, asr #32
 800b1cc:	40000030 	andmi	r0, r0, r0, lsr r0
 800b1d0:	08080808 	stmdaeq	r8, {r3, fp}
 800b1d4:	00400008 	subeq	r0, r0, r8
 800b1d8:	00606000 	rsbeq	r6, r0, r0
 800b1dc:	10204000 	eorne	r4, r0, r0
 800b1e0:	00020408 	andeq	r0, r2, r8, lsl #8
 800b1e4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 800b1e8:	40003e45 	andmi	r3, r0, r5, asr #28
 800b1ec:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 800b1f0:	72400000 	subvc	r0, r0, #0
 800b1f4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 800b1f8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 800b1fc:	00334d49 	eorseq	r4, r3, r9, asr #26
 800b200:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 800b204:	4000107f 	andmi	r1, r0, pc, ror r0
 800b208:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 800b20c:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 800b210:	3149494a 	cmpcc	r9, sl, asr #18
 800b214:	21414000 	mrscs	r4, (UNDEF: 65)
 800b218:	00070911 	andeq	r0, r7, r1, lsl r9
 800b21c:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 800b220:	40003649 	andmi	r3, r0, r9, asr #12
 800b224:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 800b228:	0040001e 	subeq	r0, r0, lr, lsl r0
 800b22c:	00001400 	andeq	r1, r0, r0, lsl #8
 800b230:	40004000 	andmi	r4, r0, r0
 800b234:	00000034 	andeq	r0, r0, r4, lsr r0
 800b238:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 800b23c:	40004122 	andmi	r4, r0, r2, lsr #2
 800b240:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 800b244:	00400014 	subeq	r0, r0, r4, lsl r0
 800b248:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 800b24c:	01024000 	mrseq	r4, (UNDEF: 2)
 800b250:	00060959 	andeq	r0, r6, r9, asr r9
 800b254:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 800b258:	40004e59 	andmi	r4, r0, r9, asr lr
 800b25c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 800b260:	7f40007c 	svcvc	0x0040007c
 800b264:	36494949 	strbcc	r4, [r9], -r9, asr #18
 800b268:	413e4000 	teqmi	lr, r0
 800b26c:	00224141 	eoreq	r4, r2, r1, asr #2
 800b270:	41417f40 	cmpmi	r1, r0, asr #30
 800b274:	40003e41 	andmi	r3, r0, r1, asr #28
 800b278:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 800b27c:	7f400041 	svcvc	0x00400041
 800b280:	01090909 	tsteq	r9, r9, lsl #18
 800b284:	413e4000 	teqmi	lr, r0
 800b288:	00735141 	rsbseq	r5, r3, r1, asr #2
 800b28c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b290:	40007f08 	andmi	r7, r0, r8, lsl #30
 800b294:	417f4100 	cmnmi	pc, r0, lsl #2
 800b298:	20400000 	subcs	r0, r0, r0
 800b29c:	013f4140 	teqeq	pc, r0, asr #2
 800b2a0:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 800b2a4:	00412214 	subeq	r2, r1, r4, lsl r2
 800b2a8:	40407f40 	submi	r7, r0, r0, asr #30
 800b2ac:	40004040 	andmi	r4, r0, r0, asr #32
 800b2b0:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 800b2b4:	7f40007f 	svcvc	0x0040007f
 800b2b8:	7f100804 	svcvc	0x00100804
 800b2bc:	413e4000 	teqmi	lr, r0
 800b2c0:	003e4141 	eorseq	r4, lr, r1, asr #2
 800b2c4:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 800b2c8:	40000609 	andmi	r0, r0, r9, lsl #12
 800b2cc:	2151413e 	cmpcs	r1, lr, lsr r1
 800b2d0:	7f40005e 	svcvc	0x0040005e
 800b2d4:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 800b2d8:	49264000 	stmdbmi	r6!, {lr}
 800b2dc:	00324949 	eorseq	r4, r2, r9, asr #18
 800b2e0:	7f010340 	svcvc	0x00010340
 800b2e4:	40000301 	andmi	r0, r0, r1, lsl #6
 800b2e8:	4040403f 	submi	r4, r0, pc, lsr r0
 800b2ec:	1f40003f 	svcne	0x0040003f
 800b2f0:	1f204020 	svcne	0x00204020
 800b2f4:	403f4000 	eorsmi	r4, pc, r0
 800b2f8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 800b2fc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 800b300:	40006314 	andmi	r6, r0, r4, lsl r3
 800b304:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 800b308:	61400003 	cmpvs	r0, r3
 800b30c:	434d4959 	movtmi	r4, #55641	; 0xd959
 800b310:	7f004000 	svcvc	0x00004000
 800b314:	00414141 	subeq	r4, r1, r1, asr #2
 800b318:	08040240 	stmdaeq	r4, {r6, r9}
 800b31c:	40002010 	andmi	r2, r0, r0, lsl r0
 800b320:	41414100 	mrsmi	r4, (UNDEF: 81)
 800b324:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 800b328:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 800b32c:	40404000 	submi	r4, r0, r0
 800b330:	00404040 	subeq	r4, r0, r0, asr #32
 800b334:	07030040 	streq	r0, [r3, -r0, asr #32]
 800b338:	40000008 	andmi	r0, r0, r8
 800b33c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 800b340:	7f400040 	svcvc	0x00400040
 800b344:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 800b348:	44384000 	ldrtmi	r4, [r8], #-0
 800b34c:	00284444 	eoreq	r4, r8, r4, asr #8
 800b350:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 800b354:	40007f28 	andmi	r7, r0, r8, lsr #30
 800b358:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 800b35c:	00400018 	subeq	r0, r0, r8, lsl r0
 800b360:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 800b364:	a4184000 	ldrge	r4, [r8], #-0
 800b368:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 800b36c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 800b370:	40007804 	andmi	r7, r0, r4, lsl #16
 800b374:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 800b378:	20400000 	subcs	r0, r0, r0
 800b37c:	003d4040 	eorseq	r4, sp, r0, asr #32
 800b380:	107f4000 	rsbsne	r4, pc, r0
 800b384:	00004428 	andeq	r4, r0, r8, lsr #8
 800b388:	7f410040 	svcvc	0x00410040
 800b38c:	40000040 	andmi	r0, r0, r0, asr #32
 800b390:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 800b394:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 800b398:	78040408 	stmdavc	r4, {r3, sl}
 800b39c:	44384000 	ldrtmi	r4, [r8], #-0
 800b3a0:	00384444 	eorseq	r4, r8, r4, asr #8
 800b3a4:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 800b3a8:	40001824 	andmi	r1, r0, r4, lsr #16
 800b3ac:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 800b3b0:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 800b3b4:	08040408 	stmdaeq	r4, {r3, sl}
 800b3b8:	54484000 	strbpl	r4, [r8], #-0
 800b3bc:	00245454 	eoreq	r5, r4, r4, asr r4
 800b3c0:	3f040440 	svccc	0x00040440
 800b3c4:	40002444 	andmi	r2, r0, r4, asr #8
 800b3c8:	2040403c 	subcs	r4, r0, ip, lsr r0
 800b3cc:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 800b3d0:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 800b3d4:	403c4000 	eorsmi	r4, ip, r0
 800b3d8:	003c4030 	eorseq	r4, ip, r0, lsr r0
 800b3dc:	10284440 	eorne	r4, r8, r0, asr #8
 800b3e0:	40004428 	andmi	r4, r0, r8, lsr #8
 800b3e4:	9090904c 	addsls	r9, r0, ip, asr #32
 800b3e8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 800b3ec:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 800b3f0:	08004000 	stmdaeq	r0, {lr}
 800b3f4:	00004136 	andeq	r4, r0, r6, lsr r1
 800b3f8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 800b3fc:	40000000 	andmi	r0, r0, r0
 800b400:	08364100 	ldmdaeq	r6!, {r8, lr}
 800b404:	02400000 	subeq	r0, r0, #0
 800b408:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 800b40c:	263c4000 	ldrtcs	r4, [ip], -r0
 800b410:	003c2623 	eorseq	r2, ip, r3, lsr #12

0800b414 <oled_128x32_init>:
 800b414:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b418:	4000d31f 	andmi	sp, r0, pc, lsl r3
 800b41c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b420:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 800b424:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b428:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b42c <oled_128x64_init>:
 800b42c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 800b430:	4000d33f 	andmi	sp, r0, pc, lsr r3
 800b434:	0020148d 	eoreq	r1, r0, sp, lsl #9
 800b438:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 800b43c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 800b440:	a6a440db 	ssatge	r4, #5, fp, asr #1

0800b444 <vtable for Ssd1306>:
	...
 800b44c:	08007b15 	stmdaeq	r0, {r0, r2, r4, r8, r9, fp, ip, sp, lr}
 800b450:	08007b41 	stmdaeq	r0, {r0, r6, r8, r9, fp, ip, sp, lr}
 800b454:	08007e51 	stmdaeq	r0, {r0, r4, r6, r9, sl, fp, ip, sp, lr}
 800b458:	08007dd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 800b45c:	08007ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, ip, sp, lr}
 800b460:	08007b61 	stmdaeq	r0, {r0, r5, r6, r8, r9, fp, ip, sp, lr}
 800b464:	08007b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr}
 800b468:	08007c7b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, sl, fp, ip, sp, lr}
 800b46c:	08007c35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, ip, sp, lr}
 800b470:	08007b17 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, fp, ip, sp, lr}
 800b474:	08007ce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, ip, sp, lr}
 800b478:	08007ced 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, fp, ip, sp, lr}
 800b47c:	08007d07 	stmdaeq	r0, {r0, r1, r2, r8, sl, fp, ip, sp, lr}
 800b480:	08007b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, sp, lr}
 800b484:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 800b488:	5b1b006d 	blpl	86cb644 <__exidx_end+0x6c0074>
 800b48c:	006d3034 	rsbeq	r3, sp, r4, lsr r0
 800b490:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 800b494:	205d732a 	subscs	r7, sp, sl, lsr #6
 800b498:	43207325 			; <UNDEFINED> instruction: 0x43207325
 800b49c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 800b4a0:	2064656c 	rsbcs	r6, r4, ip, ror #10
 800b4a4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 800b4a8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 800b4ac:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 800b4b0:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 800b4b4:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 800b4b8:	63204354 			; <UNDEFINED> instruction: 0x63204354
 800b4bc:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 800b4c0:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 800b4c4:	342e2500 	strtcc	r2, [lr], #-1280	; 0xfffffb00
 800b4c8:	2e252f64 	cdpcs	15, 2, cr2, cr5, cr4, {3}
 800b4cc:	252f6432 	strcs	r6, [pc, #-1074]!	; 800b0a2 <vtable for StoreWS28xxDmx+0xa>
 800b4d0:	2064322e 	rsbcs	r3, r4, lr, lsr #4
 800b4d4:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 800b4d8:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 800b4dc:	2e253a64 	vnmulcs.f32	s6, s10, s9
 800b4e0:	000a6432 	andeq	r6, sl, r2, lsr r4
 800b4e4:	3750434d 	ldrbcc	r4, [r0, -sp, asr #6]
 800b4e8:	58313439 	ldmdapl	r1!, {r0, r3, r4, r5, sl, ip, sp}
 800b4ec:	33534400 	cmpcc	r3, #0, 8
 800b4f0:	00313332 	eorseq	r3, r1, r2, lsr r3
 800b4f4:	38464350 	stmdacc	r6, {r4, r6, r8, r9, lr}^
 800b4f8:	00333635 	eorseq	r3, r3, r5, lsr r6
 800b4fc:	5f434f53 	svcpl	0x00434f53
 800b500:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
 800b504:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
 800b508:	00000000 	andeq	r0, r0, r0

0800b50c <CSWTCH.7>:
 800b50c:	0800b4e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp, pc}
 800b510:	0800b4ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, sl, ip, sp, pc}
 800b514:	0800b4f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, ip, sp, pc}
 800b518:	0800b4fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, sp, pc}
 800b51c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b520:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b524:	000a7525 	andeq	r7, sl, r5, lsr #10
 800b528:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b52c:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b530:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 800b534:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 800b538:	6b636f6c 	blvs	98e72f0 <__exidx_end+0x18dbd20>
 800b53c:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 800b540:	000a7469 	andeq	r7, sl, r9, ror #8
 800b544:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 800b548:	203a636f 	eorscs	r6, sl, pc, ror #6
 800b54c:	6f6c4270 	svcvs	0x006c4270
 800b550:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 800b554:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 800b558:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 800b55c:	7a697320 	bvc	9a681e4 <__exidx_end+0x1a5cc14>
 800b560:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 800b564:	6164202c 	cmnvs	r4, ip, lsr #32
 800b568:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 800b56c:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 800b570:	3a656572 	bcc	9964b40 <__exidx_end+0x1959570>
 800b574:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 800b578:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 800b57c:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 800b580:	203d2072 	eorscs	r2, sp, r2, ror r0
 800b584:	202c7025 	eorcs	r7, ip, r5, lsr #32
 800b588:	6f6c4270 	svcvs	0x006c4270
 800b58c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 800b590:	0a702520 	beq	9c14a18 <__exidx_end+0x1c09448>
 800b594:	00000000 	andeq	r0, r0, r0

0800b598 <days_of_month>:
 800b598:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b59c:	0000001c 	andeq	r0, r0, ip, lsl r0
 800b5a0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5a8:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5b0:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5b4:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5bc:	0000001f 	andeq	r0, r0, pc, lsl r0
 800b5c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 800b5c4:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0800b5c8 <__exidx_start>:
 800b5c8:	7fff6b08 	svcvc	0x00ff6b08
 800b5cc:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0800b5d0 <.ARM.attributes>:
 800b5d0:	00002e41 	andeq	r2, r0, r1, asr #28
 800b5d4:	61656100 	cmnvs	r5, r0, lsl #2
 800b5d8:	01006962 	tsteq	r0, r2, ror #18
 800b5dc:	00000024 	andeq	r0, r0, r4, lsr #32
 800b5e0:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 800b5e4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 800b5e8:	0600334d 	streq	r3, [r0], -sp, asr #6
 800b5ec:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 800b5f0:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 800b5f4:	17011501 	strne	r1, [r1, -r1, lsl #10]
 800b5f8:	1a011803 	bne	805160c <__exidx_end+0x4603c>
 800b5fc:	Address 0x000000000800b5fc is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <next_block>:
2000000c:	2000a000 	andcs	sl, r0, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <s_IsProgrammed>:
	...

200000e9 <s_isOn>:
200000e9:	 	andeq	r0, r0, r0

200000ec <s_Pattern>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <outptr>:
200000f0:	00000000 	andeq	r0, r0, r0

200000f4 <RDMResponder::s_RdmCommand>:
	...

200001f3 <RDMResponder::m_IsSubDeviceActive>:
	...

200001f4 <RDMResponder::s_pThis>:
200001f4:	00000000 	andeq	r0, r0, r0

200001f8 <RDMSensors::s_pThis>:
200001f8:	00000000 	andeq	r0, r0, r0

200001fc <RDMSubDevices::s_pThis>:
200001fc:	00000000 	andeq	r0, r0, r0

20000200 <DMXReceiver::s_IsActive>:
20000200:	00000000 	andeq	r0, r0, r0

20000204 <DMXReceiver::s_pLightSet>:
20000204:	00000000 	andeq	r0, r0, r0

20000208 <DMXReceiver::s_bDisableOutput>:
20000208:	00000000 	andeq	r0, r0, r0

2000020c <s_RxBuffer>:
	...

2000041c <s_TxBuffer>:
	...

20000620 <sv_PortState>:
20000620:	00000000 	andeq	r0, r0, r0

20000624 <s_nUartsSending>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <sv_nRxDmxPackets>:
	...

20000638 <Dmx::s_pThis>:
20000638:	00000000 	andeq	r0, r0, r0

2000063c <gv_RdmDataReceiveEnd>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <RDMDeviceResponder::s_pThis>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <RDMIdentify::m_bIsEnabled>:
	...

20000645 <RDMIdentify::m_nMode>:
20000645:	 	andeq	r0, r0, r0

20000648 <RDMIdentify::s_pThis>:
20000648:	00000000 	andeq	r0, r0, r0

2000064c <PixelDmxParamsRdm::s_pWS28xxDmxStore>:
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <PixelDmxParamsRdm::s_Data>:
20000650:	00000000 	andeq	r0, r0, r0

20000654 <WS28xxDmx::s_pThis>:
20000654:	00000000 	andeq	r0, r0, r0

20000658 <PixelPatterns::m_PortConfig>:
	...

20000678 <PixelPatterns::m_nActivePorts>:
20000678:	00000000 	andeq	r0, r0, r0

2000067c <PixelPatterns::m_pScannerColours>:
2000067c:	00000000 	andeq	r0, r0, r0

20000680 <PixelPatterns::m_nCount>:
20000680:	00000000 	andeq	r0, r0, r0

20000684 <PixelPatterns::m_pOutput>:
20000684:	00000000 	andeq	r0, r0, r0

20000688 <PixelTestPattern::s_pThis>:
20000688:	00000000 	andeq	r0, r0, r0

2000068c <PixelTestPattern::s_Pattern>:
2000068c:	00000000 	andeq	r0, r0, r0

20000690 <s_tmp>:
20000690:	00000000 	andeq	r0, r0, r0

20000694 <WS28xx::s_pThis>:
20000694:	00000000 	andeq	r0, r0, r0

20000698 <SpiFlashStore::s_nWaitMillis>:
20000698:	00000000 	andeq	r0, r0, r0

2000069c <SpiFlashStore::s_SpiFlashData>:
	...

2000169c <SpiFlashStore::s_nStartAddress>:
2000169c:	00000000 	andeq	r0, r0, r0

200016a0 <SpiFlashStore::s_bHaveFlashChip>:
200016a0:	00000000 	andeq	r0, r0, r0

200016a4 <SpiFlashStore::s_nSpiFlashStoreSize>:
200016a4:	00000000 	andeq	r0, r0, r0

200016a8 <SpiFlashStore::s_State>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <SpiFlashStore::s_pThis>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <SpiFlashStore::s_bIsNew>:
200016b0:	00000000 	andeq	r0, r0, r0

200016b4 <StoreDisplayUdf::s_pThis>:
200016b4:	00000000 	andeq	r0, r0, r0

200016b8 <StoreRDMDevice::s_pThis>:
200016b8:	00000000 	andeq	r0, r0, r0

200016bc <StoreRDMSensors::s_pThis>:
200016bc:	00000000 	andeq	r0, r0, r0

200016c0 <StoreRDMSubDevices::s_pThis>:
200016c0:	00000000 	andeq	r0, r0, r0

200016c4 <StoreWS28xxDmx::s_pThis>:
200016c4:	00000000 	andeq	r0, r0, r0

200016c8 <FlashRom::s_pThis>:
200016c8:	00000000 	andeq	r0, r0, r0

200016cc <flashrom::s_nAddress>:
200016cc:	00000000 	andeq	r0, r0, r0

200016d0 <flashrom::s_State>:
200016d0:	00000000 	andeq	r0, r0, r0

200016d4 <flashrom::s_nPage>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <flashrom::s_pData>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <flashrom::s_isBank0>:
200016dc:	00000000 	andeq	r0, r0, r0

200016e0 <flashrom::s_nLength>:
200016e0:	00000000 	andeq	r0, r0, r0

200016e4 <Network::s_pThis>:
200016e4:	00000000 	andeq	r0, r0, r0

200016e8 <DisplayUdf::s_pThis>:
200016e8:	00000000 	andeq	r0, r0, r0

200016ec <Display::s_pThis>:
200016ec:	00000000 	andeq	r0, r0, r0

200016f0 <_ClearBuffer>:
	...

20001778 <Ssd1306::s_pThis>:
20001778:	00000000 	andeq	r0, r0, r0

2000177c <FirmwareVersion::s_FirmwareVersion>:
	...

20001792 <FirmwareVersion::s_Print>:
	...

200017d4 <FirmwareVersion::s_pThis>:
200017d4:	00000000 	andeq	r0, r0, r0

200017d8 <LedBlink::s_pThis>:
200017d8:	00000000 	andeq	r0, r0, r0

200017dc <Hardware::s_pThis>:
200017dc:	00000000 	andeq	r0, r0, r0

200017e0 <HwClock::s_pThis>:
200017e0:	00000000 	andeq	r0, r0, r0

200017e4 <Tm>:
	...

20001808 <s_micros>:
	...

20001810 <set_timer>:
20001810:	00000000 	andeq	r0, r0, r0

20001814 <s_nSysTickMillis>:
20001814:	00000000 	andeq	r0, r0, r0

20001818 <s_nAddress>:
20001818:	00000000 	andeq	r0, r0, r0

2000181c <s_TxBuffer>:
	...

Disassembly of section .heap:

2000a000 <heap_low>:
	...

Disassembly of section .stack:

2000b000 <_sp-0x1000>:
	...
